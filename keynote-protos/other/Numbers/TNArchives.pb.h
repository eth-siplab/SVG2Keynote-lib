// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TNArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TNArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TNArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSCHArchives.pb.h"
#include "TSCEArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSAArchives.pb.h"
#include "TSTArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TNArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TNArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TNArchives_2eproto;
namespace TN {
class ChartMediatorArchive;
struct ChartMediatorArchiveDefaultTypeInternal;
extern ChartMediatorArchiveDefaultTypeInternal _ChartMediatorArchive_default_instance_;
class ChartMediatorFormulaStorage;
struct ChartMediatorFormulaStorageDefaultTypeInternal;
extern ChartMediatorFormulaStorageDefaultTypeInternal _ChartMediatorFormulaStorage_default_instance_;
class ChartSelectionArchive;
struct ChartSelectionArchiveDefaultTypeInternal;
extern ChartSelectionArchiveDefaultTypeInternal _ChartSelectionArchive_default_instance_;
class DocumentArchive;
struct DocumentArchiveDefaultTypeInternal;
extern DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
class FormBasedSheetArchive;
struct FormBasedSheetArchiveDefaultTypeInternal;
extern FormBasedSheetArchiveDefaultTypeInternal _FormBasedSheetArchive_default_instance_;
class FormBuilderSelectionArchive;
struct FormBuilderSelectionArchiveDefaultTypeInternal;
extern FormBuilderSelectionArchiveDefaultTypeInternal _FormBuilderSelectionArchive_default_instance_;
class FormSelectionArchive;
struct FormSelectionArchiveDefaultTypeInternal;
extern FormSelectionArchiveDefaultTypeInternal _FormSelectionArchive_default_instance_;
class FormTableChooserSelectionArchive;
struct FormTableChooserSelectionArchiveDefaultTypeInternal;
extern FormTableChooserSelectionArchiveDefaultTypeInternal _FormTableChooserSelectionArchive_default_instance_;
class PasteboardNativeStorageArchive;
struct PasteboardNativeStorageArchiveDefaultTypeInternal;
extern PasteboardNativeStorageArchiveDefaultTypeInternal _PasteboardNativeStorageArchive_default_instance_;
class PlaceholderArchive;
struct PlaceholderArchiveDefaultTypeInternal;
extern PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
class SheetArchive;
struct SheetArchiveDefaultTypeInternal;
extern SheetArchiveDefaultTypeInternal _SheetArchive_default_instance_;
class SheetSelectionArchive;
struct SheetSelectionArchiveDefaultTypeInternal;
extern SheetSelectionArchiveDefaultTypeInternal _SheetSelectionArchive_default_instance_;
class SheetStyleArchive;
struct SheetStyleArchiveDefaultTypeInternal;
extern SheetStyleArchiveDefaultTypeInternal _SheetStyleArchive_default_instance_;
class SheetStylePropertiesArchive;
struct SheetStylePropertiesArchiveDefaultTypeInternal;
extern SheetStylePropertiesArchiveDefaultTypeInternal _SheetStylePropertiesArchive_default_instance_;
class SheetUIStateArchive;
struct SheetUIStateArchiveDefaultTypeInternal;
extern SheetUIStateArchiveDefaultTypeInternal _SheetUIStateArchive_default_instance_;
class SheetUIStateDictionaryEntryArchive;
struct SheetUIStateDictionaryEntryArchiveDefaultTypeInternal;
extern SheetUIStateDictionaryEntryArchiveDefaultTypeInternal _SheetUIStateDictionaryEntryArchive_default_instance_;
class ThemeArchive;
struct ThemeArchiveDefaultTypeInternal;
extern ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
class UIStateArchive;
struct UIStateArchiveDefaultTypeInternal;
extern UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
class UUIDSheetUIStateDictionaryArchive;
struct UUIDSheetUIStateDictionaryArchiveDefaultTypeInternal;
extern UUIDSheetUIStateDictionaryArchiveDefaultTypeInternal _UUIDSheetUIStateDictionaryArchive_default_instance_;
class UndoRedoStateArchive;
struct UndoRedoStateArchiveDefaultTypeInternal;
extern UndoRedoStateArchiveDefaultTypeInternal _UndoRedoStateArchive_default_instance_;
}  // namespace TN
PROTOBUF_NAMESPACE_OPEN
template<> ::TN::ChartMediatorArchive* Arena::CreateMaybeMessage<::TN::ChartMediatorArchive>(Arena*);
template<> ::TN::ChartMediatorFormulaStorage* Arena::CreateMaybeMessage<::TN::ChartMediatorFormulaStorage>(Arena*);
template<> ::TN::ChartSelectionArchive* Arena::CreateMaybeMessage<::TN::ChartSelectionArchive>(Arena*);
template<> ::TN::DocumentArchive* Arena::CreateMaybeMessage<::TN::DocumentArchive>(Arena*);
template<> ::TN::FormBasedSheetArchive* Arena::CreateMaybeMessage<::TN::FormBasedSheetArchive>(Arena*);
template<> ::TN::FormBuilderSelectionArchive* Arena::CreateMaybeMessage<::TN::FormBuilderSelectionArchive>(Arena*);
template<> ::TN::FormSelectionArchive* Arena::CreateMaybeMessage<::TN::FormSelectionArchive>(Arena*);
template<> ::TN::FormTableChooserSelectionArchive* Arena::CreateMaybeMessage<::TN::FormTableChooserSelectionArchive>(Arena*);
template<> ::TN::PasteboardNativeStorageArchive* Arena::CreateMaybeMessage<::TN::PasteboardNativeStorageArchive>(Arena*);
template<> ::TN::PlaceholderArchive* Arena::CreateMaybeMessage<::TN::PlaceholderArchive>(Arena*);
template<> ::TN::SheetArchive* Arena::CreateMaybeMessage<::TN::SheetArchive>(Arena*);
template<> ::TN::SheetSelectionArchive* Arena::CreateMaybeMessage<::TN::SheetSelectionArchive>(Arena*);
template<> ::TN::SheetStyleArchive* Arena::CreateMaybeMessage<::TN::SheetStyleArchive>(Arena*);
template<> ::TN::SheetStylePropertiesArchive* Arena::CreateMaybeMessage<::TN::SheetStylePropertiesArchive>(Arena*);
template<> ::TN::SheetUIStateArchive* Arena::CreateMaybeMessage<::TN::SheetUIStateArchive>(Arena*);
template<> ::TN::SheetUIStateDictionaryEntryArchive* Arena::CreateMaybeMessage<::TN::SheetUIStateDictionaryEntryArchive>(Arena*);
template<> ::TN::ThemeArchive* Arena::CreateMaybeMessage<::TN::ThemeArchive>(Arena*);
template<> ::TN::UIStateArchive* Arena::CreateMaybeMessage<::TN::UIStateArchive>(Arena*);
template<> ::TN::UUIDSheetUIStateDictionaryArchive* Arena::CreateMaybeMessage<::TN::UUIDSheetUIStateDictionaryArchive>(Arena*);
template<> ::TN::UndoRedoStateArchive* Arena::CreateMaybeMessage<::TN::UndoRedoStateArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TN {

enum UIStateArchive_InspectorPaneViewMode : int {
  UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat = 0,
  UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFilter = 1
};
bool UIStateArchive_InspectorPaneViewMode_IsValid(int value);
constexpr UIStateArchive_InspectorPaneViewMode UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_MIN = UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat;
constexpr UIStateArchive_InspectorPaneViewMode UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX = UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFilter;
constexpr int UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_ARRAYSIZE = UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UIStateArchive_InspectorPaneViewMode_descriptor();
template<typename T>
inline const std::string& UIStateArchive_InspectorPaneViewMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UIStateArchive_InspectorPaneViewMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UIStateArchive_InspectorPaneViewMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UIStateArchive_InspectorPaneViewMode_descriptor(), enum_t_value);
}
inline bool UIStateArchive_InspectorPaneViewMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UIStateArchive_InspectorPaneViewMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UIStateArchive_InspectorPaneViewMode>(
    UIStateArchive_InspectorPaneViewMode_descriptor(), name, value);
}
enum PageOrder : int {
  PageOrderTopToBottom = 0,
  PageOrderLeftToRight = 1
};
bool PageOrder_IsValid(int value);
constexpr PageOrder PageOrder_MIN = PageOrderTopToBottom;
constexpr PageOrder PageOrder_MAX = PageOrderLeftToRight;
constexpr int PageOrder_ARRAYSIZE = PageOrder_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageOrder_descriptor();
template<typename T>
inline const std::string& PageOrder_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PageOrder>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PageOrder_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PageOrder_descriptor(), enum_t_value);
}
inline bool PageOrder_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PageOrder* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PageOrder>(
    PageOrder_descriptor(), name, value);
}
enum PageLayoutDirection : int {
  PageLayoutDirectionLeftToRight = 0,
  PageLayoutDirectionRightToLeft = 1
};
bool PageLayoutDirection_IsValid(int value);
constexpr PageLayoutDirection PageLayoutDirection_MIN = PageLayoutDirectionLeftToRight;
constexpr PageLayoutDirection PageLayoutDirection_MAX = PageLayoutDirectionRightToLeft;
constexpr int PageLayoutDirection_ARRAYSIZE = PageLayoutDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageLayoutDirection_descriptor();
template<typename T>
inline const std::string& PageLayoutDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PageLayoutDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PageLayoutDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PageLayoutDirection_descriptor(), enum_t_value);
}
inline bool PageLayoutDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PageLayoutDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PageLayoutDirection>(
    PageLayoutDirection_descriptor(), name, value);
}
// ===================================================================

class SheetUIStateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.SheetUIStateArchive) */ {
 public:
  inline SheetUIStateArchive() : SheetUIStateArchive(nullptr) {}
  ~SheetUIStateArchive() override;
  explicit constexpr SheetUIStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SheetUIStateArchive(const SheetUIStateArchive& from);
  SheetUIStateArchive(SheetUIStateArchive&& from) noexcept
    : SheetUIStateArchive() {
    *this = ::std::move(from);
  }

  inline SheetUIStateArchive& operator=(const SheetUIStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SheetUIStateArchive& operator=(SheetUIStateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SheetUIStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SheetUIStateArchive* internal_default_instance() {
    return reinterpret_cast<const SheetUIStateArchive*>(
               &_SheetUIStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SheetUIStateArchive& a, SheetUIStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SheetUIStateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SheetUIStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SheetUIStateArchive* New() const final {
    return CreateMaybeMessage<SheetUIStateArchive>(nullptr);
  }

  SheetUIStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SheetUIStateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SheetUIStateArchive& from);
  void MergeFrom(const SheetUIStateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SheetUIStateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.SheetUIStateArchive";
  }
  protected:
  explicit SheetUIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScrollPositionFieldNumber = 2,
    kPreviousScrollPositionFieldNumber = 5,
    kVisibleSizeFieldNumber = 8,
    kPreviousVisibleSizeFieldNumber = 9,
    kSelectionPathFieldNumber = 11,
    kSelectionPathTransformerFieldNumber = 12,
    kViewScaleFieldNumber = 1,
    kPreviousViewScaleFieldNumber = 3,
    kScrollPositionIsUnscaledFieldNumber = 4,
    kScrollPositionValidFieldNumber = 6,
    kPreviousScrollPositionValidFieldNumber = 7,
    kDeviceIdiomFieldNumber = 10,
  };
  // required .TSP.Point scroll_position = 2;
  bool has_scroll_position() const;
  private:
  bool _internal_has_scroll_position() const;
  public:
  void clear_scroll_position();
  const ::TSP::Point& scroll_position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Point* release_scroll_position();
  ::TSP::Point* mutable_scroll_position();
  void set_allocated_scroll_position(::TSP::Point* scroll_position);
  private:
  const ::TSP::Point& _internal_scroll_position() const;
  ::TSP::Point* _internal_mutable_scroll_position();
  public:
  void unsafe_arena_set_allocated_scroll_position(
      ::TSP::Point* scroll_position);
  ::TSP::Point* unsafe_arena_release_scroll_position();

  // optional .TSP.Point previous_scroll_position = 5;
  bool has_previous_scroll_position() const;
  private:
  bool _internal_has_previous_scroll_position() const;
  public:
  void clear_previous_scroll_position();
  const ::TSP::Point& previous_scroll_position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Point* release_previous_scroll_position();
  ::TSP::Point* mutable_previous_scroll_position();
  void set_allocated_previous_scroll_position(::TSP::Point* previous_scroll_position);
  private:
  const ::TSP::Point& _internal_previous_scroll_position() const;
  ::TSP::Point* _internal_mutable_previous_scroll_position();
  public:
  void unsafe_arena_set_allocated_previous_scroll_position(
      ::TSP::Point* previous_scroll_position);
  ::TSP::Point* unsafe_arena_release_previous_scroll_position();

  // optional .TSP.Size visible_size = 8;
  bool has_visible_size() const;
  private:
  bool _internal_has_visible_size() const;
  public:
  void clear_visible_size();
  const ::TSP::Size& visible_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_visible_size();
  ::TSP::Size* mutable_visible_size();
  void set_allocated_visible_size(::TSP::Size* visible_size);
  private:
  const ::TSP::Size& _internal_visible_size() const;
  ::TSP::Size* _internal_mutable_visible_size();
  public:
  void unsafe_arena_set_allocated_visible_size(
      ::TSP::Size* visible_size);
  ::TSP::Size* unsafe_arena_release_visible_size();

  // optional .TSP.Size previous_visible_size = 9;
  bool has_previous_visible_size() const;
  private:
  bool _internal_has_previous_visible_size() const;
  public:
  void clear_previous_visible_size();
  const ::TSP::Size& previous_visible_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_previous_visible_size();
  ::TSP::Size* mutable_previous_visible_size();
  void set_allocated_previous_visible_size(::TSP::Size* previous_visible_size);
  private:
  const ::TSP::Size& _internal_previous_visible_size() const;
  ::TSP::Size* _internal_mutable_previous_visible_size();
  public:
  void unsafe_arena_set_allocated_previous_visible_size(
      ::TSP::Size* previous_visible_size);
  ::TSP::Size* unsafe_arena_release_previous_visible_size();

  // optional .TSK.SelectionPathArchive selection_path = 11;
  bool has_selection_path() const;
  private:
  bool _internal_has_selection_path() const;
  public:
  void clear_selection_path();
  const ::TSK::SelectionPathArchive& selection_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::SelectionPathArchive* release_selection_path();
  ::TSK::SelectionPathArchive* mutable_selection_path();
  void set_allocated_selection_path(::TSK::SelectionPathArchive* selection_path);
  private:
  const ::TSK::SelectionPathArchive& _internal_selection_path() const;
  ::TSK::SelectionPathArchive* _internal_mutable_selection_path();
  public:
  void unsafe_arena_set_allocated_selection_path(
      ::TSK::SelectionPathArchive* selection_path);
  ::TSK::SelectionPathArchive* unsafe_arena_release_selection_path();

  // optional .TSP.Reference selection_path_transformer = 12;
  bool has_selection_path_transformer() const;
  private:
  bool _internal_has_selection_path_transformer() const;
  public:
  void clear_selection_path_transformer();
  const ::TSP::Reference& selection_path_transformer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_selection_path_transformer();
  ::TSP::Reference* mutable_selection_path_transformer();
  void set_allocated_selection_path_transformer(::TSP::Reference* selection_path_transformer);
  private:
  const ::TSP::Reference& _internal_selection_path_transformer() const;
  ::TSP::Reference* _internal_mutable_selection_path_transformer();
  public:
  void unsafe_arena_set_allocated_selection_path_transformer(
      ::TSP::Reference* selection_path_transformer);
  ::TSP::Reference* unsafe_arena_release_selection_path_transformer();

  // required float view_scale = 1;
  bool has_view_scale() const;
  private:
  bool _internal_has_view_scale() const;
  public:
  void clear_view_scale();
  float view_scale() const;
  void set_view_scale(float value);
  private:
  float _internal_view_scale() const;
  void _internal_set_view_scale(float value);
  public:

  // optional float previous_view_scale = 3;
  bool has_previous_view_scale() const;
  private:
  bool _internal_has_previous_view_scale() const;
  public:
  void clear_previous_view_scale();
  float previous_view_scale() const;
  void set_previous_view_scale(float value);
  private:
  float _internal_previous_view_scale() const;
  void _internal_set_previous_view_scale(float value);
  public:

  // optional bool scroll_position_is_unscaled = 4;
  bool has_scroll_position_is_unscaled() const;
  private:
  bool _internal_has_scroll_position_is_unscaled() const;
  public:
  void clear_scroll_position_is_unscaled();
  bool scroll_position_is_unscaled() const;
  void set_scroll_position_is_unscaled(bool value);
  private:
  bool _internal_scroll_position_is_unscaled() const;
  void _internal_set_scroll_position_is_unscaled(bool value);
  public:

  // optional bool scroll_position_valid = 6;
  bool has_scroll_position_valid() const;
  private:
  bool _internal_has_scroll_position_valid() const;
  public:
  void clear_scroll_position_valid();
  bool scroll_position_valid() const;
  void set_scroll_position_valid(bool value);
  private:
  bool _internal_scroll_position_valid() const;
  void _internal_set_scroll_position_valid(bool value);
  public:

  // optional bool previous_scroll_position_valid = 7;
  bool has_previous_scroll_position_valid() const;
  private:
  bool _internal_has_previous_scroll_position_valid() const;
  public:
  void clear_previous_scroll_position_valid();
  bool previous_scroll_position_valid() const;
  void set_previous_scroll_position_valid(bool value);
  private:
  bool _internal_previous_scroll_position_valid() const;
  void _internal_set_previous_scroll_position_valid(bool value);
  public:

  // optional uint32 device_idiom = 10;
  bool has_device_idiom() const;
  private:
  bool _internal_has_device_idiom() const;
  public:
  void clear_device_idiom();
  ::PROTOBUF_NAMESPACE_ID::uint32 device_idiom() const;
  void set_device_idiom(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device_idiom() const;
  void _internal_set_device_idiom(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TN.SheetUIStateArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Point* scroll_position_;
  ::TSP::Point* previous_scroll_position_;
  ::TSP::Size* visible_size_;
  ::TSP::Size* previous_visible_size_;
  ::TSK::SelectionPathArchive* selection_path_;
  ::TSP::Reference* selection_path_transformer_;
  float view_scale_;
  float previous_view_scale_;
  bool scroll_position_is_unscaled_;
  bool scroll_position_valid_;
  bool previous_scroll_position_valid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_idiom_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class SheetUIStateDictionaryEntryArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.SheetUIStateDictionaryEntryArchive) */ {
 public:
  inline SheetUIStateDictionaryEntryArchive() : SheetUIStateDictionaryEntryArchive(nullptr) {}
  ~SheetUIStateDictionaryEntryArchive() override;
  explicit constexpr SheetUIStateDictionaryEntryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SheetUIStateDictionaryEntryArchive(const SheetUIStateDictionaryEntryArchive& from);
  SheetUIStateDictionaryEntryArchive(SheetUIStateDictionaryEntryArchive&& from) noexcept
    : SheetUIStateDictionaryEntryArchive() {
    *this = ::std::move(from);
  }

  inline SheetUIStateDictionaryEntryArchive& operator=(const SheetUIStateDictionaryEntryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SheetUIStateDictionaryEntryArchive& operator=(SheetUIStateDictionaryEntryArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SheetUIStateDictionaryEntryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SheetUIStateDictionaryEntryArchive* internal_default_instance() {
    return reinterpret_cast<const SheetUIStateDictionaryEntryArchive*>(
               &_SheetUIStateDictionaryEntryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SheetUIStateDictionaryEntryArchive& a, SheetUIStateDictionaryEntryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SheetUIStateDictionaryEntryArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SheetUIStateDictionaryEntryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SheetUIStateDictionaryEntryArchive* New() const final {
    return CreateMaybeMessage<SheetUIStateDictionaryEntryArchive>(nullptr);
  }

  SheetUIStateDictionaryEntryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SheetUIStateDictionaryEntryArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SheetUIStateDictionaryEntryArchive& from);
  void MergeFrom(const SheetUIStateDictionaryEntryArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SheetUIStateDictionaryEntryArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.SheetUIStateDictionaryEntryArchive";
  }
  protected:
  explicit SheetUIStateDictionaryEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetFieldNumber = 1,
    kSheetUistateFieldNumber = 2,
  };
  // required .TSP.Reference sheet = 1;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TN.SheetUIStateArchive sheet_uistate = 2;
  bool has_sheet_uistate() const;
  private:
  bool _internal_has_sheet_uistate() const;
  public:
  void clear_sheet_uistate();
  const ::TN::SheetUIStateArchive& sheet_uistate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::SheetUIStateArchive* release_sheet_uistate();
  ::TN::SheetUIStateArchive* mutable_sheet_uistate();
  void set_allocated_sheet_uistate(::TN::SheetUIStateArchive* sheet_uistate);
  private:
  const ::TN::SheetUIStateArchive& _internal_sheet_uistate() const;
  ::TN::SheetUIStateArchive* _internal_mutable_sheet_uistate();
  public:
  void unsafe_arena_set_allocated_sheet_uistate(
      ::TN::SheetUIStateArchive* sheet_uistate);
  ::TN::SheetUIStateArchive* unsafe_arena_release_sheet_uistate();

  // @@protoc_insertion_point(class_scope:TN.SheetUIStateDictionaryEntryArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* sheet_;
  ::TN::SheetUIStateArchive* sheet_uistate_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class UUIDSheetUIStateDictionaryArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.UUIDSheetUIStateDictionaryArchive) */ {
 public:
  inline UUIDSheetUIStateDictionaryArchive() : UUIDSheetUIStateDictionaryArchive(nullptr) {}
  ~UUIDSheetUIStateDictionaryArchive() override;
  explicit constexpr UUIDSheetUIStateDictionaryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UUIDSheetUIStateDictionaryArchive(const UUIDSheetUIStateDictionaryArchive& from);
  UUIDSheetUIStateDictionaryArchive(UUIDSheetUIStateDictionaryArchive&& from) noexcept
    : UUIDSheetUIStateDictionaryArchive() {
    *this = ::std::move(from);
  }

  inline UUIDSheetUIStateDictionaryArchive& operator=(const UUIDSheetUIStateDictionaryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUIDSheetUIStateDictionaryArchive& operator=(UUIDSheetUIStateDictionaryArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUIDSheetUIStateDictionaryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUIDSheetUIStateDictionaryArchive* internal_default_instance() {
    return reinterpret_cast<const UUIDSheetUIStateDictionaryArchive*>(
               &_UUIDSheetUIStateDictionaryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UUIDSheetUIStateDictionaryArchive& a, UUIDSheetUIStateDictionaryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UUIDSheetUIStateDictionaryArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUIDSheetUIStateDictionaryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UUIDSheetUIStateDictionaryArchive* New() const final {
    return CreateMaybeMessage<UUIDSheetUIStateDictionaryArchive>(nullptr);
  }

  UUIDSheetUIStateDictionaryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UUIDSheetUIStateDictionaryArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UUIDSheetUIStateDictionaryArchive& from);
  void MergeFrom(const UUIDSheetUIStateDictionaryArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUIDSheetUIStateDictionaryArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.UUIDSheetUIStateDictionaryArchive";
  }
  protected:
  explicit UUIDSheetUIStateDictionaryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetUuidFieldNumber = 1,
    kSheetUistateFieldNumber = 2,
  };
  // required .TSP.UUID sheet_uuid = 1;
  bool has_sheet_uuid() const;
  private:
  bool _internal_has_sheet_uuid() const;
  public:
  void clear_sheet_uuid();
  const ::TSP::UUID& sheet_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uuid();
  ::TSP::UUID* mutable_sheet_uuid();
  void set_allocated_sheet_uuid(::TSP::UUID* sheet_uuid);
  private:
  const ::TSP::UUID& _internal_sheet_uuid() const;
  ::TSP::UUID* _internal_mutable_sheet_uuid();
  public:
  void unsafe_arena_set_allocated_sheet_uuid(
      ::TSP::UUID* sheet_uuid);
  ::TSP::UUID* unsafe_arena_release_sheet_uuid();

  // required .TN.SheetUIStateArchive sheet_uistate = 2;
  bool has_sheet_uistate() const;
  private:
  bool _internal_has_sheet_uistate() const;
  public:
  void clear_sheet_uistate();
  const ::TN::SheetUIStateArchive& sheet_uistate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::SheetUIStateArchive* release_sheet_uistate();
  ::TN::SheetUIStateArchive* mutable_sheet_uistate();
  void set_allocated_sheet_uistate(::TN::SheetUIStateArchive* sheet_uistate);
  private:
  const ::TN::SheetUIStateArchive& _internal_sheet_uistate() const;
  ::TN::SheetUIStateArchive* _internal_mutable_sheet_uistate();
  public:
  void unsafe_arena_set_allocated_sheet_uistate(
      ::TN::SheetUIStateArchive* sheet_uistate);
  ::TN::SheetUIStateArchive* unsafe_arena_release_sheet_uistate();

  // @@protoc_insertion_point(class_scope:TN.UUIDSheetUIStateDictionaryArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* sheet_uuid_;
  ::TN::SheetUIStateArchive* sheet_uistate_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class UIStateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.UIStateArchive) */ {
 public:
  inline UIStateArchive() : UIStateArchive(nullptr) {}
  ~UIStateArchive() override;
  explicit constexpr UIStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UIStateArchive(const UIStateArchive& from);
  UIStateArchive(UIStateArchive&& from) noexcept
    : UIStateArchive() {
    *this = ::std::move(from);
  }

  inline UIStateArchive& operator=(const UIStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UIStateArchive& operator=(UIStateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UIStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UIStateArchive* internal_default_instance() {
    return reinterpret_cast<const UIStateArchive*>(
               &_UIStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UIStateArchive& a, UIStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UIStateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UIStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UIStateArchive* New() const final {
    return CreateMaybeMessage<UIStateArchive>(nullptr);
  }

  UIStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UIStateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UIStateArchive& from);
  void MergeFrom(const UIStateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UIStateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.UIStateArchive";
  }
  protected:
  explicit UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UIStateArchive_InspectorPaneViewMode InspectorPaneViewMode;
  static constexpr InspectorPaneViewMode kInspectorPaneViewModeFormat =
    UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFormat;
  static constexpr InspectorPaneViewMode kInspectorPaneViewModeFilter =
    UIStateArchive_InspectorPaneViewMode_kInspectorPaneViewModeFilter;
  static inline bool InspectorPaneViewMode_IsValid(int value) {
    return UIStateArchive_InspectorPaneViewMode_IsValid(value);
  }
  static constexpr InspectorPaneViewMode InspectorPaneViewMode_MIN =
    UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_MIN;
  static constexpr InspectorPaneViewMode InspectorPaneViewMode_MAX =
    UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_MAX;
  static constexpr int InspectorPaneViewMode_ARRAYSIZE =
    UIStateArchive_InspectorPaneViewMode_InspectorPaneViewMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InspectorPaneViewMode_descriptor() {
    return UIStateArchive_InspectorPaneViewMode_descriptor();
  }
  template<typename T>
  static inline const std::string& InspectorPaneViewMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InspectorPaneViewMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InspectorPaneViewMode_Name.");
    return UIStateArchive_InspectorPaneViewMode_Name(enum_t_value);
  }
  static inline bool InspectorPaneViewMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InspectorPaneViewMode* value) {
    return UIStateArchive_InspectorPaneViewMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedInfoFieldNumber = 2,
    kSheetUistateDictionaryEntryFieldNumber = 3,
    kEditModeSheetUistateDictionaryEntryFieldNumber = 7,
    kSelectedQuickCalcFunctionsFieldNumber = 16,
    kChartUiStateFieldNumber = 23,
    kUuidSheetUistateDictionaryFieldNumber = 28,
    kTableSelectionFieldNumber = 4,
    kChartSelectionFieldNumber = 12,
    kSheetSelectionFieldNumber = 13,
    kDesktopWindowOriginFieldNumber = 20,
    kDesktopWindowSizeFieldNumber = 21,
    kDesktopScreenSizeFieldNumber = 22,
    kSelectionPathFieldNumber = 24,
    kFreehandDrawingToolkitStateFieldNumber = 29,
    kSelectionPathTransformerFieldNumber = 30,
    kActiveSheetIndexFieldNumber = 1,
    kEditingSheetIndexFieldNumber = 5,
    kDocumentModeFieldNumber = 6,
    kTableEditingModeFieldNumber = 8,
    kFormFocusedRecordIndexFieldNumber = 9,
    kFormFocusedFieldIndexFieldNumber = 10,
    kInspectorPaneViewModeFieldNumber = 15,
    kInChartModeFieldNumber = 11,
    kRemovedAllQuickCalcFunctionsFieldNumber = 17,
    kShowCanvasGuidesFieldNumber = 18,
    kShowsCommentsFieldNumber = 19,
    kInspectorPaneAutohiddenFieldNumber = 25,
    kShowsSidebarFieldNumber = 26,
    kShowsRulersFieldNumber = 27,
    kEditingDisabledFieldNumber = 31,
    kInspectorPaneVisibleFieldNumber = 14,
  };
  // repeated .TSP.Reference selected_info = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int selected_info_size() const;
  private:
  int _internal_selected_info_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_selected_info();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_selected_info(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_selected_info();
  private:
  const ::TSP::Reference& _internal_selected_info(int index) const;
  ::TSP::Reference* _internal_add_selected_info();
  public:
  PROTOBUF_DEPRECATED const ::TSP::Reference& selected_info(int index) const;
  PROTOBUF_DEPRECATED ::TSP::Reference* add_selected_info();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      selected_info() const;

  // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3 [deprecated = true];
  PROTOBUF_DEPRECATED int sheet_uistate_dictionary_entry_size() const;
  private:
  int _internal_sheet_uistate_dictionary_entry_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_sheet_uistate_dictionary_entry();
  PROTOBUF_DEPRECATED ::TN::SheetUIStateDictionaryEntryArchive* mutable_sheet_uistate_dictionary_entry(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >*
      mutable_sheet_uistate_dictionary_entry();
  private:
  const ::TN::SheetUIStateDictionaryEntryArchive& _internal_sheet_uistate_dictionary_entry(int index) const;
  ::TN::SheetUIStateDictionaryEntryArchive* _internal_add_sheet_uistate_dictionary_entry();
  public:
  PROTOBUF_DEPRECATED const ::TN::SheetUIStateDictionaryEntryArchive& sheet_uistate_dictionary_entry(int index) const;
  PROTOBUF_DEPRECATED ::TN::SheetUIStateDictionaryEntryArchive* add_sheet_uistate_dictionary_entry();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >&
      sheet_uistate_dictionary_entry() const;

  // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7 [deprecated = true];
  PROTOBUF_DEPRECATED int edit_mode_sheet_uistate_dictionary_entry_size() const;
  private:
  int _internal_edit_mode_sheet_uistate_dictionary_entry_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_edit_mode_sheet_uistate_dictionary_entry();
  PROTOBUF_DEPRECATED ::TN::SheetUIStateDictionaryEntryArchive* mutable_edit_mode_sheet_uistate_dictionary_entry(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >*
      mutable_edit_mode_sheet_uistate_dictionary_entry();
  private:
  const ::TN::SheetUIStateDictionaryEntryArchive& _internal_edit_mode_sheet_uistate_dictionary_entry(int index) const;
  ::TN::SheetUIStateDictionaryEntryArchive* _internal_add_edit_mode_sheet_uistate_dictionary_entry();
  public:
  PROTOBUF_DEPRECATED const ::TN::SheetUIStateDictionaryEntryArchive& edit_mode_sheet_uistate_dictionary_entry(int index) const;
  PROTOBUF_DEPRECATED ::TN::SheetUIStateDictionaryEntryArchive* add_edit_mode_sheet_uistate_dictionary_entry();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >&
      edit_mode_sheet_uistate_dictionary_entry() const;

  // repeated uint32 selected_quick_calc_functions = 16;
  int selected_quick_calc_functions_size() const;
  private:
  int _internal_selected_quick_calc_functions_size() const;
  public:
  void clear_selected_quick_calc_functions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selected_quick_calc_functions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_selected_quick_calc_functions() const;
  void _internal_add_selected_quick_calc_functions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_selected_quick_calc_functions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 selected_quick_calc_functions(int index) const;
  void set_selected_quick_calc_functions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_selected_quick_calc_functions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      selected_quick_calc_functions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_selected_quick_calc_functions();

  // repeated .TSCH.ChartUIState chart_ui_state = 23;
  int chart_ui_state_size() const;
  private:
  int _internal_chart_ui_state_size() const;
  public:
  void clear_chart_ui_state();
  ::TSCH::ChartUIState* mutable_chart_ui_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >*
      mutable_chart_ui_state();
  private:
  const ::TSCH::ChartUIState& _internal_chart_ui_state(int index) const;
  ::TSCH::ChartUIState* _internal_add_chart_ui_state();
  public:
  const ::TSCH::ChartUIState& chart_ui_state(int index) const;
  ::TSCH::ChartUIState* add_chart_ui_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >&
      chart_ui_state() const;

  // repeated .TN.UUIDSheetUIStateDictionaryArchive uuid_sheet_uistate_dictionary = 28;
  int uuid_sheet_uistate_dictionary_size() const;
  private:
  int _internal_uuid_sheet_uistate_dictionary_size() const;
  public:
  void clear_uuid_sheet_uistate_dictionary();
  ::TN::UUIDSheetUIStateDictionaryArchive* mutable_uuid_sheet_uistate_dictionary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >*
      mutable_uuid_sheet_uistate_dictionary();
  private:
  const ::TN::UUIDSheetUIStateDictionaryArchive& _internal_uuid_sheet_uistate_dictionary(int index) const;
  ::TN::UUIDSheetUIStateDictionaryArchive* _internal_add_uuid_sheet_uistate_dictionary();
  public:
  const ::TN::UUIDSheetUIStateDictionaryArchive& uuid_sheet_uistate_dictionary(int index) const;
  ::TN::UUIDSheetUIStateDictionaryArchive* add_uuid_sheet_uistate_dictionary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >&
      uuid_sheet_uistate_dictionary() const;

  // optional .TST.SelectionArchive table_selection = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_table_selection() const;
  private:
  bool _internal_has_table_selection() const;
  public:
  PROTOBUF_DEPRECATED void clear_table_selection();
  PROTOBUF_DEPRECATED const ::TST::SelectionArchive& table_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TST::SelectionArchive* release_table_selection();
  PROTOBUF_DEPRECATED ::TST::SelectionArchive* mutable_table_selection();
  PROTOBUF_DEPRECATED void set_allocated_table_selection(::TST::SelectionArchive* table_selection);
  private:
  const ::TST::SelectionArchive& _internal_table_selection() const;
  ::TST::SelectionArchive* _internal_mutable_table_selection();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_table_selection(
      ::TST::SelectionArchive* table_selection);
  PROTOBUF_DEPRECATED ::TST::SelectionArchive* unsafe_arena_release_table_selection();

  // optional .TN.ChartSelectionArchive chart_selection = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_chart_selection() const;
  private:
  bool _internal_has_chart_selection() const;
  public:
  PROTOBUF_DEPRECATED void clear_chart_selection();
  PROTOBUF_DEPRECATED const ::TN::ChartSelectionArchive& chart_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TN::ChartSelectionArchive* release_chart_selection();
  PROTOBUF_DEPRECATED ::TN::ChartSelectionArchive* mutable_chart_selection();
  PROTOBUF_DEPRECATED void set_allocated_chart_selection(::TN::ChartSelectionArchive* chart_selection);
  private:
  const ::TN::ChartSelectionArchive& _internal_chart_selection() const;
  ::TN::ChartSelectionArchive* _internal_mutable_chart_selection();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_chart_selection(
      ::TN::ChartSelectionArchive* chart_selection);
  PROTOBUF_DEPRECATED ::TN::ChartSelectionArchive* unsafe_arena_release_chart_selection();

  // optional .TSP.Reference sheet_selection = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_sheet_selection() const;
  private:
  bool _internal_has_sheet_selection() const;
  public:
  PROTOBUF_DEPRECATED void clear_sheet_selection();
  PROTOBUF_DEPRECATED const ::TSP::Reference& sheet_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_sheet_selection();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_sheet_selection();
  PROTOBUF_DEPRECATED void set_allocated_sheet_selection(::TSP::Reference* sheet_selection);
  private:
  const ::TSP::Reference& _internal_sheet_selection() const;
  ::TSP::Reference* _internal_mutable_sheet_selection();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_sheet_selection(
      ::TSP::Reference* sheet_selection);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_sheet_selection();

  // optional .TSP.Point desktop_window_origin = 20;
  bool has_desktop_window_origin() const;
  private:
  bool _internal_has_desktop_window_origin() const;
  public:
  void clear_desktop_window_origin();
  const ::TSP::Point& desktop_window_origin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Point* release_desktop_window_origin();
  ::TSP::Point* mutable_desktop_window_origin();
  void set_allocated_desktop_window_origin(::TSP::Point* desktop_window_origin);
  private:
  const ::TSP::Point& _internal_desktop_window_origin() const;
  ::TSP::Point* _internal_mutable_desktop_window_origin();
  public:
  void unsafe_arena_set_allocated_desktop_window_origin(
      ::TSP::Point* desktop_window_origin);
  ::TSP::Point* unsafe_arena_release_desktop_window_origin();

  // optional .TSP.Size desktop_window_size = 21;
  bool has_desktop_window_size() const;
  private:
  bool _internal_has_desktop_window_size() const;
  public:
  void clear_desktop_window_size();
  const ::TSP::Size& desktop_window_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_desktop_window_size();
  ::TSP::Size* mutable_desktop_window_size();
  void set_allocated_desktop_window_size(::TSP::Size* desktop_window_size);
  private:
  const ::TSP::Size& _internal_desktop_window_size() const;
  ::TSP::Size* _internal_mutable_desktop_window_size();
  public:
  void unsafe_arena_set_allocated_desktop_window_size(
      ::TSP::Size* desktop_window_size);
  ::TSP::Size* unsafe_arena_release_desktop_window_size();

  // optional .TSP.Size desktop_screen_size = 22;
  bool has_desktop_screen_size() const;
  private:
  bool _internal_has_desktop_screen_size() const;
  public:
  void clear_desktop_screen_size();
  const ::TSP::Size& desktop_screen_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_desktop_screen_size();
  ::TSP::Size* mutable_desktop_screen_size();
  void set_allocated_desktop_screen_size(::TSP::Size* desktop_screen_size);
  private:
  const ::TSP::Size& _internal_desktop_screen_size() const;
  ::TSP::Size* _internal_mutable_desktop_screen_size();
  public:
  void unsafe_arena_set_allocated_desktop_screen_size(
      ::TSP::Size* desktop_screen_size);
  ::TSP::Size* unsafe_arena_release_desktop_screen_size();

  // optional .TSK.SelectionPathArchive selection_path = 24;
  bool has_selection_path() const;
  private:
  bool _internal_has_selection_path() const;
  public:
  void clear_selection_path();
  const ::TSK::SelectionPathArchive& selection_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::SelectionPathArchive* release_selection_path();
  ::TSK::SelectionPathArchive* mutable_selection_path();
  void set_allocated_selection_path(::TSK::SelectionPathArchive* selection_path);
  private:
  const ::TSK::SelectionPathArchive& _internal_selection_path() const;
  ::TSK::SelectionPathArchive* _internal_mutable_selection_path();
  public:
  void unsafe_arena_set_allocated_selection_path(
      ::TSK::SelectionPathArchive* selection_path);
  ::TSK::SelectionPathArchive* unsafe_arena_release_selection_path();

  // optional .TSP.Reference freehand_drawing_toolkit_state = 29;
  bool has_freehand_drawing_toolkit_state() const;
  private:
  bool _internal_has_freehand_drawing_toolkit_state() const;
  public:
  void clear_freehand_drawing_toolkit_state();
  const ::TSP::Reference& freehand_drawing_toolkit_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_freehand_drawing_toolkit_state();
  ::TSP::Reference* mutable_freehand_drawing_toolkit_state();
  void set_allocated_freehand_drawing_toolkit_state(::TSP::Reference* freehand_drawing_toolkit_state);
  private:
  const ::TSP::Reference& _internal_freehand_drawing_toolkit_state() const;
  ::TSP::Reference* _internal_mutable_freehand_drawing_toolkit_state();
  public:
  void unsafe_arena_set_allocated_freehand_drawing_toolkit_state(
      ::TSP::Reference* freehand_drawing_toolkit_state);
  ::TSP::Reference* unsafe_arena_release_freehand_drawing_toolkit_state();

  // optional .TSP.Reference selection_path_transformer = 30;
  bool has_selection_path_transformer() const;
  private:
  bool _internal_has_selection_path_transformer() const;
  public:
  void clear_selection_path_transformer();
  const ::TSP::Reference& selection_path_transformer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_selection_path_transformer();
  ::TSP::Reference* mutable_selection_path_transformer();
  void set_allocated_selection_path_transformer(::TSP::Reference* selection_path_transformer);
  private:
  const ::TSP::Reference& _internal_selection_path_transformer() const;
  ::TSP::Reference* _internal_mutable_selection_path_transformer();
  public:
  void unsafe_arena_set_allocated_selection_path_transformer(
      ::TSP::Reference* selection_path_transformer);
  ::TSP::Reference* unsafe_arena_release_selection_path_transformer();

  // required uint32 active_sheet_index = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_active_sheet_index() const;
  private:
  bool _internal_has_active_sheet_index() const;
  public:
  PROTOBUF_DEPRECATED void clear_active_sheet_index();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 active_sheet_index() const;
  PROTOBUF_DEPRECATED void set_active_sheet_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_active_sheet_index() const;
  void _internal_set_active_sheet_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 editing_sheet_index = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_editing_sheet_index() const;
  private:
  bool _internal_has_editing_sheet_index() const;
  public:
  PROTOBUF_DEPRECATED void clear_editing_sheet_index();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 editing_sheet_index() const;
  PROTOBUF_DEPRECATED void set_editing_sheet_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_editing_sheet_index() const;
  void _internal_set_editing_sheet_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 document_mode = 6;
  bool has_document_mode() const;
  private:
  bool _internal_has_document_mode() const;
  public:
  void clear_document_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 document_mode() const;
  void set_document_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_document_mode() const;
  void _internal_set_document_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 table_editing_mode = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_table_editing_mode() const;
  private:
  bool _internal_has_table_editing_mode() const;
  public:
  PROTOBUF_DEPRECATED void clear_table_editing_mode();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 table_editing_mode() const;
  PROTOBUF_DEPRECATED void set_table_editing_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_editing_mode() const;
  void _internal_set_table_editing_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 form_focused_record_index = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_form_focused_record_index() const;
  private:
  bool _internal_has_form_focused_record_index() const;
  public:
  PROTOBUF_DEPRECATED void clear_form_focused_record_index();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 form_focused_record_index() const;
  PROTOBUF_DEPRECATED void set_form_focused_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_form_focused_record_index() const;
  void _internal_set_form_focused_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 form_focused_field_index = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_form_focused_field_index() const;
  private:
  bool _internal_has_form_focused_field_index() const;
  public:
  PROTOBUF_DEPRECATED void clear_form_focused_field_index();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 form_focused_field_index() const;
  PROTOBUF_DEPRECATED void set_form_focused_field_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_form_focused_field_index() const;
  void _internal_set_form_focused_field_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
  bool has_inspector_pane_view_mode() const;
  private:
  bool _internal_has_inspector_pane_view_mode() const;
  public:
  void clear_inspector_pane_view_mode();
  ::TN::UIStateArchive_InspectorPaneViewMode inspector_pane_view_mode() const;
  void set_inspector_pane_view_mode(::TN::UIStateArchive_InspectorPaneViewMode value);
  private:
  ::TN::UIStateArchive_InspectorPaneViewMode _internal_inspector_pane_view_mode() const;
  void _internal_set_inspector_pane_view_mode(::TN::UIStateArchive_InspectorPaneViewMode value);
  public:

  // optional bool in_chart_mode = 11;
  bool has_in_chart_mode() const;
  private:
  bool _internal_has_in_chart_mode() const;
  public:
  void clear_in_chart_mode();
  bool in_chart_mode() const;
  void set_in_chart_mode(bool value);
  private:
  bool _internal_in_chart_mode() const;
  void _internal_set_in_chart_mode(bool value);
  public:

  // optional bool removed_all_quick_calc_functions = 17;
  bool has_removed_all_quick_calc_functions() const;
  private:
  bool _internal_has_removed_all_quick_calc_functions() const;
  public:
  void clear_removed_all_quick_calc_functions();
  bool removed_all_quick_calc_functions() const;
  void set_removed_all_quick_calc_functions(bool value);
  private:
  bool _internal_removed_all_quick_calc_functions() const;
  void _internal_set_removed_all_quick_calc_functions(bool value);
  public:

  // optional bool show_canvas_guides = 18;
  bool has_show_canvas_guides() const;
  private:
  bool _internal_has_show_canvas_guides() const;
  public:
  void clear_show_canvas_guides();
  bool show_canvas_guides() const;
  void set_show_canvas_guides(bool value);
  private:
  bool _internal_show_canvas_guides() const;
  void _internal_set_show_canvas_guides(bool value);
  public:

  // optional bool shows_comments = 19;
  bool has_shows_comments() const;
  private:
  bool _internal_has_shows_comments() const;
  public:
  void clear_shows_comments();
  bool shows_comments() const;
  void set_shows_comments(bool value);
  private:
  bool _internal_shows_comments() const;
  void _internal_set_shows_comments(bool value);
  public:

  // optional bool inspector_pane_autohidden = 25;
  bool has_inspector_pane_autohidden() const;
  private:
  bool _internal_has_inspector_pane_autohidden() const;
  public:
  void clear_inspector_pane_autohidden();
  bool inspector_pane_autohidden() const;
  void set_inspector_pane_autohidden(bool value);
  private:
  bool _internal_inspector_pane_autohidden() const;
  void _internal_set_inspector_pane_autohidden(bool value);
  public:

  // optional bool shows_sidebar = 26 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_shows_sidebar() const;
  private:
  bool _internal_has_shows_sidebar() const;
  public:
  PROTOBUF_DEPRECATED void clear_shows_sidebar();
  PROTOBUF_DEPRECATED bool shows_sidebar() const;
  PROTOBUF_DEPRECATED void set_shows_sidebar(bool value);
  private:
  bool _internal_shows_sidebar() const;
  void _internal_set_shows_sidebar(bool value);
  public:

  // optional bool shows_rulers = 27;
  bool has_shows_rulers() const;
  private:
  bool _internal_has_shows_rulers() const;
  public:
  void clear_shows_rulers();
  bool shows_rulers() const;
  void set_shows_rulers(bool value);
  private:
  bool _internal_shows_rulers() const;
  void _internal_set_shows_rulers(bool value);
  public:

  // optional bool editing_disabled = 31;
  bool has_editing_disabled() const;
  private:
  bool _internal_has_editing_disabled() const;
  public:
  void clear_editing_disabled();
  bool editing_disabled() const;
  void set_editing_disabled(bool value);
  private:
  bool _internal_editing_disabled() const;
  void _internal_set_editing_disabled(bool value);
  public:

  // optional bool inspector_pane_visible = 14 [default = true];
  bool has_inspector_pane_visible() const;
  private:
  bool _internal_has_inspector_pane_visible() const;
  public:
  void clear_inspector_pane_visible();
  bool inspector_pane_visible() const;
  void set_inspector_pane_visible(bool value);
  private:
  bool _internal_inspector_pane_visible() const;
  void _internal_set_inspector_pane_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.UIStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > selected_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive > sheet_uistate_dictionary_entry_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive > edit_mode_sheet_uistate_dictionary_entry_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > selected_quick_calc_functions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState > chart_ui_state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive > uuid_sheet_uistate_dictionary_;
  ::TST::SelectionArchive* table_selection_;
  ::TN::ChartSelectionArchive* chart_selection_;
  ::TSP::Reference* sheet_selection_;
  ::TSP::Point* desktop_window_origin_;
  ::TSP::Size* desktop_window_size_;
  ::TSP::Size* desktop_screen_size_;
  ::TSK::SelectionPathArchive* selection_path_;
  ::TSP::Reference* freehand_drawing_toolkit_state_;
  ::TSP::Reference* selection_path_transformer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_sheet_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 editing_sheet_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 document_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_editing_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 form_focused_record_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 form_focused_field_index_;
  int inspector_pane_view_mode_;
  bool in_chart_mode_;
  bool removed_all_quick_calc_functions_;
  bool show_canvas_guides_;
  bool shows_comments_;
  bool inspector_pane_autohidden_;
  bool shows_sidebar_;
  bool shows_rulers_;
  bool editing_disabled_;
  bool inspector_pane_visible_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class SheetSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.SheetSelectionArchive) */ {
 public:
  inline SheetSelectionArchive() : SheetSelectionArchive(nullptr) {}
  ~SheetSelectionArchive() override;
  explicit constexpr SheetSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SheetSelectionArchive(const SheetSelectionArchive& from);
  SheetSelectionArchive(SheetSelectionArchive&& from) noexcept
    : SheetSelectionArchive() {
    *this = ::std::move(from);
  }

  inline SheetSelectionArchive& operator=(const SheetSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SheetSelectionArchive& operator=(SheetSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SheetSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SheetSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const SheetSelectionArchive*>(
               &_SheetSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SheetSelectionArchive& a, SheetSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SheetSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SheetSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SheetSelectionArchive* New() const final {
    return CreateMaybeMessage<SheetSelectionArchive>(nullptr);
  }

  SheetSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SheetSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SheetSelectionArchive& from);
  void MergeFrom(const SheetSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SheetSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.SheetSelectionArchive";
  }
  protected:
  explicit SheetSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetFieldNumber = 1,
    kPaginatedFieldNumber = 2,
  };
  // optional .TSP.Reference sheet = 1;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // optional bool paginated = 2;
  bool has_paginated() const;
  private:
  bool _internal_has_paginated() const;
  public:
  void clear_paginated();
  bool paginated() const;
  void set_paginated(bool value);
  private:
  bool _internal_paginated() const;
  void _internal_set_paginated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.SheetSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* sheet_;
  bool paginated_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class FormSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.FormSelectionArchive) */ {
 public:
  inline FormSelectionArchive() : FormSelectionArchive(nullptr) {}
  ~FormSelectionArchive() override;
  explicit constexpr FormSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormSelectionArchive(const FormSelectionArchive& from);
  FormSelectionArchive(FormSelectionArchive&& from) noexcept
    : FormSelectionArchive() {
    *this = ::std::move(from);
  }

  inline FormSelectionArchive& operator=(const FormSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormSelectionArchive& operator=(FormSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const FormSelectionArchive*>(
               &_FormSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FormSelectionArchive& a, FormSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormSelectionArchive* New() const final {
    return CreateMaybeMessage<FormSelectionArchive>(nullptr);
  }

  FormSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormSelectionArchive& from);
  void MergeFrom(const FormSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.FormSelectionArchive";
  }
  protected:
  explicit FormSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIndexFieldNumber = 1,
    kFieldIndexFieldNumber = 2,
  };
  // required uint32 record_index = 1;
  bool has_record_index() const;
  private:
  bool _internal_has_record_index() const;
  public:
  void clear_record_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 record_index() const;
  void set_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_record_index() const;
  void _internal_set_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 field_index = 2;
  bool has_field_index() const;
  private:
  bool _internal_has_field_index() const;
  public:
  void clear_field_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 field_index() const;
  void set_field_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_field_index() const;
  void _internal_set_field_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TN.FormSelectionArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 record_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 field_index_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class FormBuilderSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.FormBuilderSelectionArchive) */ {
 public:
  inline FormBuilderSelectionArchive() : FormBuilderSelectionArchive(nullptr) {}
  ~FormBuilderSelectionArchive() override;
  explicit constexpr FormBuilderSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormBuilderSelectionArchive(const FormBuilderSelectionArchive& from);
  FormBuilderSelectionArchive(FormBuilderSelectionArchive&& from) noexcept
    : FormBuilderSelectionArchive() {
    *this = ::std::move(from);
  }

  inline FormBuilderSelectionArchive& operator=(const FormBuilderSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormBuilderSelectionArchive& operator=(FormBuilderSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormBuilderSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormBuilderSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const FormBuilderSelectionArchive*>(
               &_FormBuilderSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FormBuilderSelectionArchive& a, FormBuilderSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormBuilderSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormBuilderSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormBuilderSelectionArchive* New() const final {
    return CreateMaybeMessage<FormBuilderSelectionArchive>(nullptr);
  }

  FormBuilderSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormBuilderSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormBuilderSelectionArchive& from);
  void MergeFrom(const FormBuilderSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormBuilderSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.FormBuilderSelectionArchive";
  }
  protected:
  explicit FormBuilderSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewingRecordIndexFieldNumber = 1,
  };
  // optional uint32 viewing_record_index = 1;
  bool has_viewing_record_index() const;
  private:
  bool _internal_has_viewing_record_index() const;
  public:
  void clear_viewing_record_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 viewing_record_index() const;
  void set_viewing_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_viewing_record_index() const;
  void _internal_set_viewing_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TN.FormBuilderSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 viewing_record_index_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class FormTableChooserSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.FormTableChooserSelectionArchive) */ {
 public:
  inline FormTableChooserSelectionArchive() : FormTableChooserSelectionArchive(nullptr) {}
  ~FormTableChooserSelectionArchive() override;
  explicit constexpr FormTableChooserSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormTableChooserSelectionArchive(const FormTableChooserSelectionArchive& from);
  FormTableChooserSelectionArchive(FormTableChooserSelectionArchive&& from) noexcept
    : FormTableChooserSelectionArchive() {
    *this = ::std::move(from);
  }

  inline FormTableChooserSelectionArchive& operator=(const FormTableChooserSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormTableChooserSelectionArchive& operator=(FormTableChooserSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormTableChooserSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormTableChooserSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const FormTableChooserSelectionArchive*>(
               &_FormTableChooserSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FormTableChooserSelectionArchive& a, FormTableChooserSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormTableChooserSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormTableChooserSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormTableChooserSelectionArchive* New() const final {
    return CreateMaybeMessage<FormTableChooserSelectionArchive>(nullptr);
  }

  FormTableChooserSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormTableChooserSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormTableChooserSelectionArchive& from);
  void MergeFrom(const FormTableChooserSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormTableChooserSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.FormTableChooserSelectionArchive";
  }
  protected:
  explicit FormTableChooserSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TN.FormTableChooserSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoRedoStateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.UndoRedoStateArchive) */ {
 public:
  inline UndoRedoStateArchive() : UndoRedoStateArchive(nullptr) {}
  ~UndoRedoStateArchive() override;
  explicit constexpr UndoRedoStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoRedoStateArchive(const UndoRedoStateArchive& from);
  UndoRedoStateArchive(UndoRedoStateArchive&& from) noexcept
    : UndoRedoStateArchive() {
    *this = ::std::move(from);
  }

  inline UndoRedoStateArchive& operator=(const UndoRedoStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoRedoStateArchive& operator=(UndoRedoStateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoRedoStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoRedoStateArchive* internal_default_instance() {
    return reinterpret_cast<const UndoRedoStateArchive*>(
               &_UndoRedoStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UndoRedoStateArchive& a, UndoRedoStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoRedoStateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoRedoStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoRedoStateArchive* New() const final {
    return CreateMaybeMessage<UndoRedoStateArchive>(nullptr);
  }

  UndoRedoStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoRedoStateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoRedoStateArchive& from);
  void MergeFrom(const UndoRedoStateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoRedoStateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.UndoRedoStateArchive";
  }
  protected:
  explicit UndoRedoStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiStateFieldNumber = 1,
  };
  // required .TN.UIStateArchive ui_state = 1;
  bool has_ui_state() const;
  private:
  bool _internal_has_ui_state() const;
  public:
  void clear_ui_state();
  const ::TN::UIStateArchive& ui_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::UIStateArchive* release_ui_state();
  ::TN::UIStateArchive* mutable_ui_state();
  void set_allocated_ui_state(::TN::UIStateArchive* ui_state);
  private:
  const ::TN::UIStateArchive& _internal_ui_state() const;
  ::TN::UIStateArchive* _internal_mutable_ui_state();
  public:
  void unsafe_arena_set_allocated_ui_state(
      ::TN::UIStateArchive* ui_state);
  ::TN::UIStateArchive* unsafe_arena_release_ui_state();

  // @@protoc_insertion_point(class_scope:TN.UndoRedoStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TN::UIStateArchive* ui_state_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class DocumentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.DocumentArchive) */ {
 public:
  inline DocumentArchive() : DocumentArchive(nullptr) {}
  ~DocumentArchive() override;
  explicit constexpr DocumentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentArchive(const DocumentArchive& from);
  DocumentArchive(DocumentArchive&& from) noexcept
    : DocumentArchive() {
    *this = ::std::move(from);
  }

  inline DocumentArchive& operator=(const DocumentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentArchive& operator=(DocumentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentArchive*>(
               &_DocumentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DocumentArchive& a, DocumentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentArchive* New() const final {
    return CreateMaybeMessage<DocumentArchive>(nullptr);
  }

  DocumentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentArchive& from);
  void MergeFrom(const DocumentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.DocumentArchive";
  }
  protected:
  explicit DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetsFieldNumber = 1,
    kPrinterIdFieldNumber = 10,
    kPaperIdFieldNumber = 11,
    kCalculationEngineFieldNumber = 3,
    kStylesheetFieldNumber = 4,
    kSidebarOrderFieldNumber = 5,
    kThemeFieldNumber = 6,
    kUistateFieldNumber = 7,
    kSuperFieldNumber = 8,
    kCustomFormatListFieldNumber = 9,
    kPageSizeFieldNumber = 12,
  };
  // repeated .TSP.Reference sheets = 1;
  int sheets_size() const;
  private:
  int _internal_sheets_size() const;
  public:
  void clear_sheets();
  ::TSP::Reference* mutable_sheets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_sheets();
  private:
  const ::TSP::Reference& _internal_sheets(int index) const;
  ::TSP::Reference* _internal_add_sheets();
  public:
  const ::TSP::Reference& sheets(int index) const;
  ::TSP::Reference* add_sheets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      sheets() const;

  // optional string printer_id = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_printer_id() const;
  private:
  bool _internal_has_printer_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_printer_id();
  PROTOBUF_DEPRECATED const std::string& printer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_printer_id(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_printer_id();
  PROTOBUF_DEPRECATED std::string* release_printer_id();
  PROTOBUF_DEPRECATED void set_allocated_printer_id(std::string* printer_id);
  private:
  const std::string& _internal_printer_id() const;
  void _internal_set_printer_id(const std::string& value);
  std::string* _internal_mutable_printer_id();
  public:

  // optional string paper_id = 11;
  bool has_paper_id() const;
  private:
  bool _internal_has_paper_id() const;
  public:
  void clear_paper_id();
  const std::string& paper_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paper_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paper_id();
  std::string* release_paper_id();
  void set_allocated_paper_id(std::string* paper_id);
  private:
  const std::string& _internal_paper_id() const;
  void _internal_set_paper_id(const std::string& value);
  std::string* _internal_mutable_paper_id();
  public:

  // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_calculation_engine() const;
  private:
  bool _internal_has_calculation_engine() const;
  public:
  PROTOBUF_DEPRECATED void clear_calculation_engine();
  PROTOBUF_DEPRECATED const ::TSP::Reference& calculation_engine() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_calculation_engine();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_calculation_engine();
  PROTOBUF_DEPRECATED void set_allocated_calculation_engine(::TSP::Reference* calculation_engine);
  private:
  const ::TSP::Reference& _internal_calculation_engine() const;
  ::TSP::Reference* _internal_mutable_calculation_engine();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_calculation_engine(
      ::TSP::Reference* calculation_engine);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_calculation_engine();

  // required .TSP.Reference stylesheet = 4;
  bool has_stylesheet() const;
  private:
  bool _internal_has_stylesheet() const;
  public:
  void clear_stylesheet();
  const ::TSP::Reference& stylesheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_stylesheet();
  ::TSP::Reference* mutable_stylesheet();
  void set_allocated_stylesheet(::TSP::Reference* stylesheet);
  private:
  const ::TSP::Reference& _internal_stylesheet() const;
  ::TSP::Reference* _internal_mutable_stylesheet();
  public:
  void unsafe_arena_set_allocated_stylesheet(
      ::TSP::Reference* stylesheet);
  ::TSP::Reference* unsafe_arena_release_stylesheet();

  // required .TSP.Reference sidebar_order = 5;
  bool has_sidebar_order() const;
  private:
  bool _internal_has_sidebar_order() const;
  public:
  void clear_sidebar_order();
  const ::TSP::Reference& sidebar_order() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_sidebar_order();
  ::TSP::Reference* mutable_sidebar_order();
  void set_allocated_sidebar_order(::TSP::Reference* sidebar_order);
  private:
  const ::TSP::Reference& _internal_sidebar_order() const;
  ::TSP::Reference* _internal_mutable_sidebar_order();
  public:
  void unsafe_arena_set_allocated_sidebar_order(
      ::TSP::Reference* sidebar_order);
  ::TSP::Reference* unsafe_arena_release_sidebar_order();

  // required .TSP.Reference theme = 6;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // optional .TN.UIStateArchive uistate = 7;
  bool has_uistate() const;
  private:
  bool _internal_has_uistate() const;
  public:
  void clear_uistate();
  const ::TN::UIStateArchive& uistate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::UIStateArchive* release_uistate();
  ::TN::UIStateArchive* mutable_uistate();
  void set_allocated_uistate(::TN::UIStateArchive* uistate);
  private:
  const ::TN::UIStateArchive& _internal_uistate() const;
  ::TN::UIStateArchive* _internal_mutable_uistate();
  public:
  void unsafe_arena_set_allocated_uistate(
      ::TN::UIStateArchive* uistate);
  ::TN::UIStateArchive* unsafe_arena_release_uistate();

  // required .TSA.DocumentArchive super = 8;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSA::DocumentArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSA::DocumentArchive* release_super();
  ::TSA::DocumentArchive* mutable_super();
  void set_allocated_super(::TSA::DocumentArchive* super);
  private:
  const ::TSA::DocumentArchive& _internal_super() const;
  ::TSA::DocumentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSA::DocumentArchive* super);
  ::TSA::DocumentArchive* unsafe_arena_release_super();

  // optional .TSP.Reference custom_format_list = 9;
  bool has_custom_format_list() const;
  private:
  bool _internal_has_custom_format_list() const;
  public:
  void clear_custom_format_list();
  const ::TSP::Reference& custom_format_list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_custom_format_list();
  ::TSP::Reference* mutable_custom_format_list();
  void set_allocated_custom_format_list(::TSP::Reference* custom_format_list);
  private:
  const ::TSP::Reference& _internal_custom_format_list() const;
  ::TSP::Reference* _internal_mutable_custom_format_list();
  public:
  void unsafe_arena_set_allocated_custom_format_list(
      ::TSP::Reference* custom_format_list);
  ::TSP::Reference* unsafe_arena_release_custom_format_list();

  // optional .TSP.Size page_size = 12;
  bool has_page_size() const;
  private:
  bool _internal_has_page_size() const;
  public:
  void clear_page_size();
  const ::TSP::Size& page_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_page_size();
  ::TSP::Size* mutable_page_size();
  void set_allocated_page_size(::TSP::Size* page_size);
  private:
  const ::TSP::Size& _internal_page_size() const;
  ::TSP::Size* _internal_mutable_page_size();
  public:
  void unsafe_arena_set_allocated_page_size(
      ::TSP::Size* page_size);
  ::TSP::Size* unsafe_arena_release_page_size();

  // @@protoc_insertion_point(class_scope:TN.DocumentArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > sheets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr printer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paper_id_;
  ::TSP::Reference* calculation_engine_;
  ::TSP::Reference* stylesheet_;
  ::TSP::Reference* sidebar_order_;
  ::TSP::Reference* theme_;
  ::TN::UIStateArchive* uistate_;
  ::TSA::DocumentArchive* super_;
  ::TSP::Reference* custom_format_list_;
  ::TSP::Size* page_size_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class PlaceholderArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.PlaceholderArchive) */ {
 public:
  inline PlaceholderArchive() : PlaceholderArchive(nullptr) {}
  ~PlaceholderArchive() override;
  explicit constexpr PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceholderArchive(const PlaceholderArchive& from);
  PlaceholderArchive(PlaceholderArchive&& from) noexcept
    : PlaceholderArchive() {
    *this = ::std::move(from);
  }

  inline PlaceholderArchive& operator=(const PlaceholderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderArchive& operator=(PlaceholderArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceholderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceholderArchive* internal_default_instance() {
    return reinterpret_cast<const PlaceholderArchive*>(
               &_PlaceholderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PlaceholderArchive& a, PlaceholderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderArchive* New() const final {
    return CreateMaybeMessage<PlaceholderArchive>(nullptr);
  }

  PlaceholderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceholderArchive& from);
  void MergeFrom(const PlaceholderArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.PlaceholderArchive";
  }
  protected:
  explicit PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSWP.ShapeInfoArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::ShapeInfoArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ShapeInfoArchive* release_super();
  ::TSWP::ShapeInfoArchive* mutable_super();
  void set_allocated_super(::TSWP::ShapeInfoArchive* super);
  private:
  const ::TSWP::ShapeInfoArchive& _internal_super() const;
  ::TSWP::ShapeInfoArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::ShapeInfoArchive* super);
  ::TSWP::ShapeInfoArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.PlaceholderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::ShapeInfoArchive* super_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class SheetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.SheetArchive) */ {
 public:
  inline SheetArchive() : SheetArchive(nullptr) {}
  ~SheetArchive() override;
  explicit constexpr SheetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SheetArchive(const SheetArchive& from);
  SheetArchive(SheetArchive&& from) noexcept
    : SheetArchive() {
    *this = ::std::move(from);
  }

  inline SheetArchive& operator=(const SheetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SheetArchive& operator=(SheetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SheetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SheetArchive* internal_default_instance() {
    return reinterpret_cast<const SheetArchive*>(
               &_SheetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SheetArchive& a, SheetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SheetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SheetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SheetArchive* New() const final {
    return CreateMaybeMessage<SheetArchive>(nullptr);
  }

  SheetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SheetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SheetArchive& from);
  void MergeFrom(const SheetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SheetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.SheetArchive";
  }
  protected:
  explicit SheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableInfosFieldNumber = 2,
    kHeadersFieldNumber = 18,
    kFootersFieldNumber = 19,
    kNameFieldNumber = 1,
    kPrintMarginsFieldNumber = 10,
    kHeaderStorageFieldNumber = 15,
    kFooterStorageFieldNumber = 16,
    kUserDefinedGuideStorageFieldNumber = 17,
    kStyleFieldNumber = 22,
    kInPortraitPageOrientationFieldNumber = 3,
    kShowRepeatingHeadersFieldNumber = 4,
    kShowPageNumbersFieldNumber = 5,
    kIsAutofitOnFieldNumber = 6,
    kContentScaleFieldNumber = 7,
    kPageOrderFieldNumber = 8,
    kStartPageNumberFieldNumber = 12,
    kPageHeaderInsetFieldNumber = 13,
    kPageFooterInsetFieldNumber = 14,
    kUsingStartPageNumberFieldNumber = 11,
    kUsesSingleHeaderFooterFieldNumber = 20,
    kPrintBackgroundsFieldNumber = 23,
    kShouldPrintCommentsFieldNumber = 24,
    kLayoutDirectionFieldNumber = 21,
  };
  // repeated .TSP.Reference drawable_infos = 2;
  int drawable_infos_size() const;
  private:
  int _internal_drawable_infos_size() const;
  public:
  void clear_drawable_infos();
  ::TSP::Reference* mutable_drawable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawable_infos();
  private:
  const ::TSP::Reference& _internal_drawable_infos(int index) const;
  ::TSP::Reference* _internal_add_drawable_infos();
  public:
  const ::TSP::Reference& drawable_infos(int index) const;
  ::TSP::Reference* add_drawable_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawable_infos() const;

  // repeated .TSP.Reference headers = 18;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::TSP::Reference* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_headers();
  private:
  const ::TSP::Reference& _internal_headers(int index) const;
  ::TSP::Reference* _internal_add_headers();
  public:
  const ::TSP::Reference& headers(int index) const;
  ::TSP::Reference* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      headers() const;

  // repeated .TSP.Reference footers = 19;
  int footers_size() const;
  private:
  int _internal_footers_size() const;
  public:
  void clear_footers();
  ::TSP::Reference* mutable_footers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_footers();
  private:
  const ::TSP::Reference& _internal_footers(int index) const;
  ::TSP::Reference* _internal_add_footers();
  public:
  const ::TSP::Reference& footers(int index) const;
  ::TSP::Reference* add_footers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      footers() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .TSD.EdgeInsetsArchive print_margins = 10;
  bool has_print_margins() const;
  private:
  bool _internal_has_print_margins() const;
  public:
  void clear_print_margins();
  const ::TSD::EdgeInsetsArchive& print_margins() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::EdgeInsetsArchive* release_print_margins();
  ::TSD::EdgeInsetsArchive* mutable_print_margins();
  void set_allocated_print_margins(::TSD::EdgeInsetsArchive* print_margins);
  private:
  const ::TSD::EdgeInsetsArchive& _internal_print_margins() const;
  ::TSD::EdgeInsetsArchive* _internal_mutable_print_margins();
  public:
  void unsafe_arena_set_allocated_print_margins(
      ::TSD::EdgeInsetsArchive* print_margins);
  ::TSD::EdgeInsetsArchive* unsafe_arena_release_print_margins();

  // optional .TSP.Reference header_storage = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_header_storage() const;
  private:
  bool _internal_has_header_storage() const;
  public:
  PROTOBUF_DEPRECATED void clear_header_storage();
  PROTOBUF_DEPRECATED const ::TSP::Reference& header_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_header_storage();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_header_storage();
  PROTOBUF_DEPRECATED void set_allocated_header_storage(::TSP::Reference* header_storage);
  private:
  const ::TSP::Reference& _internal_header_storage() const;
  ::TSP::Reference* _internal_mutable_header_storage();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_header_storage(
      ::TSP::Reference* header_storage);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_header_storage();

  // optional .TSP.Reference footer_storage = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_footer_storage() const;
  private:
  bool _internal_has_footer_storage() const;
  public:
  PROTOBUF_DEPRECATED void clear_footer_storage();
  PROTOBUF_DEPRECATED const ::TSP::Reference& footer_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_footer_storage();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_footer_storage();
  PROTOBUF_DEPRECATED void set_allocated_footer_storage(::TSP::Reference* footer_storage);
  private:
  const ::TSP::Reference& _internal_footer_storage() const;
  ::TSP::Reference* _internal_mutable_footer_storage();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_footer_storage(
      ::TSP::Reference* footer_storage);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_footer_storage();

  // optional .TSP.Reference userDefinedGuideStorage = 17;
  bool has_userdefinedguidestorage() const;
  private:
  bool _internal_has_userdefinedguidestorage() const;
  public:
  void clear_userdefinedguidestorage();
  const ::TSP::Reference& userdefinedguidestorage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_userdefinedguidestorage();
  ::TSP::Reference* mutable_userdefinedguidestorage();
  void set_allocated_userdefinedguidestorage(::TSP::Reference* userdefinedguidestorage);
  private:
  const ::TSP::Reference& _internal_userdefinedguidestorage() const;
  ::TSP::Reference* _internal_mutable_userdefinedguidestorage();
  public:
  void unsafe_arena_set_allocated_userdefinedguidestorage(
      ::TSP::Reference* userdefinedguidestorage);
  ::TSP::Reference* unsafe_arena_release_userdefinedguidestorage();

  // optional .TSP.Reference style = 22;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // optional bool in_portrait_page_orientation = 3;
  bool has_in_portrait_page_orientation() const;
  private:
  bool _internal_has_in_portrait_page_orientation() const;
  public:
  void clear_in_portrait_page_orientation();
  bool in_portrait_page_orientation() const;
  void set_in_portrait_page_orientation(bool value);
  private:
  bool _internal_in_portrait_page_orientation() const;
  void _internal_set_in_portrait_page_orientation(bool value);
  public:

  // optional bool show_repeating_headers = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_show_repeating_headers() const;
  private:
  bool _internal_has_show_repeating_headers() const;
  public:
  PROTOBUF_DEPRECATED void clear_show_repeating_headers();
  PROTOBUF_DEPRECATED bool show_repeating_headers() const;
  PROTOBUF_DEPRECATED void set_show_repeating_headers(bool value);
  private:
  bool _internal_show_repeating_headers() const;
  void _internal_set_show_repeating_headers(bool value);
  public:

  // optional bool show_page_numbers = 5;
  bool has_show_page_numbers() const;
  private:
  bool _internal_has_show_page_numbers() const;
  public:
  void clear_show_page_numbers();
  bool show_page_numbers() const;
  void set_show_page_numbers(bool value);
  private:
  bool _internal_show_page_numbers() const;
  void _internal_set_show_page_numbers(bool value);
  public:

  // optional bool is_autofit_on = 6;
  bool has_is_autofit_on() const;
  private:
  bool _internal_has_is_autofit_on() const;
  public:
  void clear_is_autofit_on();
  bool is_autofit_on() const;
  void set_is_autofit_on(bool value);
  private:
  bool _internal_is_autofit_on() const;
  void _internal_set_is_autofit_on(bool value);
  public:

  // optional float content_scale = 7;
  bool has_content_scale() const;
  private:
  bool _internal_has_content_scale() const;
  public:
  void clear_content_scale();
  float content_scale() const;
  void set_content_scale(float value);
  private:
  float _internal_content_scale() const;
  void _internal_set_content_scale(float value);
  public:

  // optional .TN.PageOrder page_order = 8;
  bool has_page_order() const;
  private:
  bool _internal_has_page_order() const;
  public:
  void clear_page_order();
  ::TN::PageOrder page_order() const;
  void set_page_order(::TN::PageOrder value);
  private:
  ::TN::PageOrder _internal_page_order() const;
  void _internal_set_page_order(::TN::PageOrder value);
  public:

  // optional int32 start_page_number = 12;
  bool has_start_page_number() const;
  private:
  bool _internal_has_start_page_number() const;
  public:
  void clear_start_page_number();
  ::PROTOBUF_NAMESPACE_ID::int32 start_page_number() const;
  void set_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_page_number() const;
  void _internal_set_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float page_header_inset = 13;
  bool has_page_header_inset() const;
  private:
  bool _internal_has_page_header_inset() const;
  public:
  void clear_page_header_inset();
  float page_header_inset() const;
  void set_page_header_inset(float value);
  private:
  float _internal_page_header_inset() const;
  void _internal_set_page_header_inset(float value);
  public:

  // optional float page_footer_inset = 14;
  bool has_page_footer_inset() const;
  private:
  bool _internal_has_page_footer_inset() const;
  public:
  void clear_page_footer_inset();
  float page_footer_inset() const;
  void set_page_footer_inset(float value);
  private:
  float _internal_page_footer_inset() const;
  void _internal_set_page_footer_inset(float value);
  public:

  // optional bool using_start_page_number = 11;
  bool has_using_start_page_number() const;
  private:
  bool _internal_has_using_start_page_number() const;
  public:
  void clear_using_start_page_number();
  bool using_start_page_number() const;
  void set_using_start_page_number(bool value);
  private:
  bool _internal_using_start_page_number() const;
  void _internal_set_using_start_page_number(bool value);
  public:

  // optional bool uses_single_header_footer = 20;
  bool has_uses_single_header_footer() const;
  private:
  bool _internal_has_uses_single_header_footer() const;
  public:
  void clear_uses_single_header_footer();
  bool uses_single_header_footer() const;
  void set_uses_single_header_footer(bool value);
  private:
  bool _internal_uses_single_header_footer() const;
  void _internal_set_uses_single_header_footer(bool value);
  public:

  // optional bool print_backgrounds = 23;
  bool has_print_backgrounds() const;
  private:
  bool _internal_has_print_backgrounds() const;
  public:
  void clear_print_backgrounds();
  bool print_backgrounds() const;
  void set_print_backgrounds(bool value);
  private:
  bool _internal_print_backgrounds() const;
  void _internal_set_print_backgrounds(bool value);
  public:

  // optional bool should_print_comments = 24;
  bool has_should_print_comments() const;
  private:
  bool _internal_has_should_print_comments() const;
  public:
  void clear_should_print_comments();
  bool should_print_comments() const;
  void set_should_print_comments(bool value);
  private:
  bool _internal_should_print_comments() const;
  void _internal_set_should_print_comments(bool value);
  public:

  // optional .TN.PageLayoutDirection layout_direction = 21 [default = PageLayoutDirectionLeftToRight];
  bool has_layout_direction() const;
  private:
  bool _internal_has_layout_direction() const;
  public:
  void clear_layout_direction();
  ::TN::PageLayoutDirection layout_direction() const;
  void set_layout_direction(::TN::PageLayoutDirection value);
  private:
  ::TN::PageLayoutDirection _internal_layout_direction() const;
  void _internal_set_layout_direction(::TN::PageLayoutDirection value);
  public:

  // @@protoc_insertion_point(class_scope:TN.SheetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawable_infos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > headers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > footers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TSD::EdgeInsetsArchive* print_margins_;
  ::TSP::Reference* header_storage_;
  ::TSP::Reference* footer_storage_;
  ::TSP::Reference* userdefinedguidestorage_;
  ::TSP::Reference* style_;
  bool in_portrait_page_orientation_;
  bool show_repeating_headers_;
  bool show_page_numbers_;
  bool is_autofit_on_;
  float content_scale_;
  int page_order_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_page_number_;
  float page_header_inset_;
  float page_footer_inset_;
  bool using_start_page_number_;
  bool uses_single_header_footer_;
  bool print_backgrounds_;
  bool should_print_comments_;
  int layout_direction_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class SheetStylePropertiesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.SheetStylePropertiesArchive) */ {
 public:
  inline SheetStylePropertiesArchive() : SheetStylePropertiesArchive(nullptr) {}
  ~SheetStylePropertiesArchive() override;
  explicit constexpr SheetStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SheetStylePropertiesArchive(const SheetStylePropertiesArchive& from);
  SheetStylePropertiesArchive(SheetStylePropertiesArchive&& from) noexcept
    : SheetStylePropertiesArchive() {
    *this = ::std::move(from);
  }

  inline SheetStylePropertiesArchive& operator=(const SheetStylePropertiesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SheetStylePropertiesArchive& operator=(SheetStylePropertiesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SheetStylePropertiesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SheetStylePropertiesArchive* internal_default_instance() {
    return reinterpret_cast<const SheetStylePropertiesArchive*>(
               &_SheetStylePropertiesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SheetStylePropertiesArchive& a, SheetStylePropertiesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SheetStylePropertiesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SheetStylePropertiesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SheetStylePropertiesArchive* New() const final {
    return CreateMaybeMessage<SheetStylePropertiesArchive>(nullptr);
  }

  SheetStylePropertiesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SheetStylePropertiesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SheetStylePropertiesArchive& from);
  void MergeFrom(const SheetStylePropertiesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SheetStylePropertiesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.SheetStylePropertiesArchive";
  }
  protected:
  explicit SheetStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillFieldNumber = 1,
  };
  // optional .TSD.FillArchive fill = 1;
  bool has_fill() const;
  private:
  bool _internal_has_fill() const;
  public:
  void clear_fill();
  const ::TSD::FillArchive& fill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_fill();
  ::TSD::FillArchive* mutable_fill();
  void set_allocated_fill(::TSD::FillArchive* fill);
  private:
  const ::TSD::FillArchive& _internal_fill() const;
  ::TSD::FillArchive* _internal_mutable_fill();
  public:
  void unsafe_arena_set_allocated_fill(
      ::TSD::FillArchive* fill);
  ::TSD::FillArchive* unsafe_arena_release_fill();

  // @@protoc_insertion_point(class_scope:TN.SheetStylePropertiesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::FillArchive* fill_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class SheetStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.SheetStyleArchive) */ {
 public:
  inline SheetStyleArchive() : SheetStyleArchive(nullptr) {}
  ~SheetStyleArchive() override;
  explicit constexpr SheetStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SheetStyleArchive(const SheetStyleArchive& from);
  SheetStyleArchive(SheetStyleArchive&& from) noexcept
    : SheetStyleArchive() {
    *this = ::std::move(from);
  }

  inline SheetStyleArchive& operator=(const SheetStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SheetStyleArchive& operator=(SheetStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SheetStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SheetStyleArchive* internal_default_instance() {
    return reinterpret_cast<const SheetStyleArchive*>(
               &_SheetStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SheetStyleArchive& a, SheetStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SheetStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SheetStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SheetStyleArchive* New() const final {
    return CreateMaybeMessage<SheetStyleArchive>(nullptr);
  }

  SheetStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SheetStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SheetStyleArchive& from);
  void MergeFrom(const SheetStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SheetStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.SheetStyleArchive";
  }
  protected:
  explicit SheetStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSheetPropertiesFieldNumber = 3,
    kOverrideCountFieldNumber = 2,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TN.SheetStylePropertiesArchive sheet_properties = 3;
  bool has_sheet_properties() const;
  private:
  bool _internal_has_sheet_properties() const;
  public:
  void clear_sheet_properties();
  const ::TN::SheetStylePropertiesArchive& sheet_properties() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::SheetStylePropertiesArchive* release_sheet_properties();
  ::TN::SheetStylePropertiesArchive* mutable_sheet_properties();
  void set_allocated_sheet_properties(::TN::SheetStylePropertiesArchive* sheet_properties);
  private:
  const ::TN::SheetStylePropertiesArchive& _internal_sheet_properties() const;
  ::TN::SheetStylePropertiesArchive* _internal_mutable_sheet_properties();
  public:
  void unsafe_arena_set_allocated_sheet_properties(
      ::TN::SheetStylePropertiesArchive* sheet_properties);
  ::TN::SheetStylePropertiesArchive* unsafe_arena_release_sheet_properties();

  // optional uint32 override_count = 2;
  bool has_override_count() const;
  private:
  bool _internal_has_override_count() const;
  public:
  void clear_override_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count() const;
  void set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_override_count() const;
  void _internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TN.SheetStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  ::TN::SheetStylePropertiesArchive* sheet_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class FormBasedSheetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.FormBasedSheetArchive) */ {
 public:
  inline FormBasedSheetArchive() : FormBasedSheetArchive(nullptr) {}
  ~FormBasedSheetArchive() override;
  explicit constexpr FormBasedSheetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormBasedSheetArchive(const FormBasedSheetArchive& from);
  FormBasedSheetArchive(FormBasedSheetArchive&& from) noexcept
    : FormBasedSheetArchive() {
    *this = ::std::move(from);
  }

  inline FormBasedSheetArchive& operator=(const FormBasedSheetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormBasedSheetArchive& operator=(FormBasedSheetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormBasedSheetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormBasedSheetArchive* internal_default_instance() {
    return reinterpret_cast<const FormBasedSheetArchive*>(
               &_FormBasedSheetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FormBasedSheetArchive& a, FormBasedSheetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormBasedSheetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormBasedSheetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormBasedSheetArchive* New() const final {
    return CreateMaybeMessage<FormBasedSheetArchive>(nullptr);
  }

  FormBasedSheetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormBasedSheetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormBasedSheetArchive& from);
  void MergeFrom(const FormBasedSheetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormBasedSheetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.FormBasedSheetArchive";
  }
  protected:
  explicit FormBasedSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTableIdFieldNumber = 2,
  };
  // required .TN.SheetArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TN::SheetArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::SheetArchive* release_super();
  ::TN::SheetArchive* mutable_super();
  void set_allocated_super(::TN::SheetArchive* super);
  private:
  const ::TN::SheetArchive& _internal_super() const;
  ::TN::SheetArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TN::SheetArchive* super);
  ::TN::SheetArchive* unsafe_arena_release_super();

  // optional .TSP.CFUUIDArchive table_id = 2;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSP::CFUUIDArchive& table_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_table_id();
  ::TSP::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSP::CFUUIDArchive* table_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_table_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSP::CFUUIDArchive* table_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_table_id();

  // @@protoc_insertion_point(class_scope:TN.FormBasedSheetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TN::SheetArchive* super_;
  ::TSP::CFUUIDArchive* table_id_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.ThemeArchive) */ {
 public:
  inline ThemeArchive() : ThemeArchive(nullptr) {}
  ~ThemeArchive() override;
  explicit constexpr ThemeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeArchive(const ThemeArchive& from);
  ThemeArchive(ThemeArchive&& from) noexcept
    : ThemeArchive() {
    *this = ::std::move(from);
  }

  inline ThemeArchive& operator=(const ThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeArchive& operator=(ThemeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeArchive*>(
               &_ThemeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ThemeArchive& a, ThemeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeArchive* New() const final {
    return CreateMaybeMessage<ThemeArchive>(nullptr);
  }

  ThemeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemeArchive& from);
  void MergeFrom(const ThemeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.ThemeArchive";
  }
  protected:
  explicit ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrototypesFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSP.Reference prototypes = 2;
  int prototypes_size() const;
  private:
  int _internal_prototypes_size() const;
  public:
  void clear_prototypes();
  ::TSP::Reference* mutable_prototypes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_prototypes();
  private:
  const ::TSP::Reference& _internal_prototypes(int index) const;
  ::TSP::Reference* _internal_add_prototypes();
  public:
  const ::TSP::Reference& prototypes(int index) const;
  ::TSP::Reference* add_prototypes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      prototypes() const;

  // required .TSS.ThemeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ThemeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::ThemeArchive* release_super();
  ::TSS::ThemeArchive* mutable_super();
  void set_allocated_super(::TSS::ThemeArchive* super);
  private:
  const ::TSS::ThemeArchive& _internal_super() const;
  ::TSS::ThemeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ThemeArchive* super);
  ::TSS::ThemeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.ThemeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > prototypes_;
  ::TSS::ThemeArchive* super_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class PasteboardNativeStorageArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.PasteboardNativeStorageArchive) */ {
 public:
  inline PasteboardNativeStorageArchive() : PasteboardNativeStorageArchive(nullptr) {}
  ~PasteboardNativeStorageArchive() override;
  explicit constexpr PasteboardNativeStorageArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasteboardNativeStorageArchive(const PasteboardNativeStorageArchive& from);
  PasteboardNativeStorageArchive(PasteboardNativeStorageArchive&& from) noexcept
    : PasteboardNativeStorageArchive() {
    *this = ::std::move(from);
  }

  inline PasteboardNativeStorageArchive& operator=(const PasteboardNativeStorageArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasteboardNativeStorageArchive& operator=(PasteboardNativeStorageArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasteboardNativeStorageArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasteboardNativeStorageArchive* internal_default_instance() {
    return reinterpret_cast<const PasteboardNativeStorageArchive*>(
               &_PasteboardNativeStorageArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PasteboardNativeStorageArchive& a, PasteboardNativeStorageArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PasteboardNativeStorageArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasteboardNativeStorageArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasteboardNativeStorageArchive* New() const final {
    return CreateMaybeMessage<PasteboardNativeStorageArchive>(nullptr);
  }

  PasteboardNativeStorageArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasteboardNativeStorageArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PasteboardNativeStorageArchive& from);
  void MergeFrom(const PasteboardNativeStorageArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PasteboardNativeStorageArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.PasteboardNativeStorageArchive";
  }
  protected:
  explicit PasteboardNativeStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetFieldNumber = 1,
    kUiStateFieldNumber = 2,
  };
  // optional .TSP.Reference sheet = 1;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // optional .TN.SheetUIStateArchive ui_state = 2;
  bool has_ui_state() const;
  private:
  bool _internal_has_ui_state() const;
  public:
  void clear_ui_state();
  const ::TN::SheetUIStateArchive& ui_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::SheetUIStateArchive* release_ui_state();
  ::TN::SheetUIStateArchive* mutable_ui_state();
  void set_allocated_ui_state(::TN::SheetUIStateArchive* ui_state);
  private:
  const ::TN::SheetUIStateArchive& _internal_ui_state() const;
  ::TN::SheetUIStateArchive* _internal_mutable_ui_state();
  public:
  void unsafe_arena_set_allocated_ui_state(
      ::TN::SheetUIStateArchive* ui_state);
  ::TN::SheetUIStateArchive* unsafe_arena_release_ui_state();

  // @@protoc_insertion_point(class_scope:TN.PasteboardNativeStorageArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* sheet_;
  ::TN::SheetUIStateArchive* ui_state_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartMediatorFormulaStorage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.ChartMediatorFormulaStorage) */ {
 public:
  inline ChartMediatorFormulaStorage() : ChartMediatorFormulaStorage(nullptr) {}
  ~ChartMediatorFormulaStorage() override;
  explicit constexpr ChartMediatorFormulaStorage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartMediatorFormulaStorage(const ChartMediatorFormulaStorage& from);
  ChartMediatorFormulaStorage(ChartMediatorFormulaStorage&& from) noexcept
    : ChartMediatorFormulaStorage() {
    *this = ::std::move(from);
  }

  inline ChartMediatorFormulaStorage& operator=(const ChartMediatorFormulaStorage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartMediatorFormulaStorage& operator=(ChartMediatorFormulaStorage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartMediatorFormulaStorage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartMediatorFormulaStorage* internal_default_instance() {
    return reinterpret_cast<const ChartMediatorFormulaStorage*>(
               &_ChartMediatorFormulaStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ChartMediatorFormulaStorage& a, ChartMediatorFormulaStorage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartMediatorFormulaStorage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartMediatorFormulaStorage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartMediatorFormulaStorage* New() const final {
    return CreateMaybeMessage<ChartMediatorFormulaStorage>(nullptr);
  }

  ChartMediatorFormulaStorage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartMediatorFormulaStorage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartMediatorFormulaStorage& from);
  void MergeFrom(const ChartMediatorFormulaStorage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartMediatorFormulaStorage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.ChartMediatorFormulaStorage";
  }
  protected:
  explicit ChartMediatorFormulaStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFormulaeFieldNumber = 1,
    kRowLabelFormulaeFieldNumber = 3,
    kColLabelFormulaeFieldNumber = 4,
    kErrorCustomPosFormulaeFieldNumber = 6,
    kErrorCustomNegFormulaeFieldNumber = 7,
    kErrorCustomPosScatterXFormulaeFieldNumber = 8,
    kErrorCustomNegScatterXFormulaeFieldNumber = 9,
    kDirectionFieldNumber = 5,
  };
  // repeated .TSCE.FormulaArchive data_formulae = 1;
  int data_formulae_size() const;
  private:
  int _internal_data_formulae_size() const;
  public:
  void clear_data_formulae();
  ::TSCE::FormulaArchive* mutable_data_formulae(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_data_formulae();
  private:
  const ::TSCE::FormulaArchive& _internal_data_formulae(int index) const;
  ::TSCE::FormulaArchive* _internal_add_data_formulae();
  public:
  const ::TSCE::FormulaArchive& data_formulae(int index) const;
  ::TSCE::FormulaArchive* add_data_formulae();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      data_formulae() const;

  // repeated .TSCE.FormulaArchive row_label_formulae = 3;
  int row_label_formulae_size() const;
  private:
  int _internal_row_label_formulae_size() const;
  public:
  void clear_row_label_formulae();
  ::TSCE::FormulaArchive* mutable_row_label_formulae(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_row_label_formulae();
  private:
  const ::TSCE::FormulaArchive& _internal_row_label_formulae(int index) const;
  ::TSCE::FormulaArchive* _internal_add_row_label_formulae();
  public:
  const ::TSCE::FormulaArchive& row_label_formulae(int index) const;
  ::TSCE::FormulaArchive* add_row_label_formulae();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      row_label_formulae() const;

  // repeated .TSCE.FormulaArchive col_label_formulae = 4;
  int col_label_formulae_size() const;
  private:
  int _internal_col_label_formulae_size() const;
  public:
  void clear_col_label_formulae();
  ::TSCE::FormulaArchive* mutable_col_label_formulae(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_col_label_formulae();
  private:
  const ::TSCE::FormulaArchive& _internal_col_label_formulae(int index) const;
  ::TSCE::FormulaArchive* _internal_add_col_label_formulae();
  public:
  const ::TSCE::FormulaArchive& col_label_formulae(int index) const;
  ::TSCE::FormulaArchive* add_col_label_formulae();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      col_label_formulae() const;

  // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
  int error_custom_pos_formulae_size() const;
  private:
  int _internal_error_custom_pos_formulae_size() const;
  public:
  void clear_error_custom_pos_formulae();
  ::TSCE::FormulaArchive* mutable_error_custom_pos_formulae(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_error_custom_pos_formulae();
  private:
  const ::TSCE::FormulaArchive& _internal_error_custom_pos_formulae(int index) const;
  ::TSCE::FormulaArchive* _internal_add_error_custom_pos_formulae();
  public:
  const ::TSCE::FormulaArchive& error_custom_pos_formulae(int index) const;
  ::TSCE::FormulaArchive* add_error_custom_pos_formulae();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      error_custom_pos_formulae() const;

  // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
  int error_custom_neg_formulae_size() const;
  private:
  int _internal_error_custom_neg_formulae_size() const;
  public:
  void clear_error_custom_neg_formulae();
  ::TSCE::FormulaArchive* mutable_error_custom_neg_formulae(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_error_custom_neg_formulae();
  private:
  const ::TSCE::FormulaArchive& _internal_error_custom_neg_formulae(int index) const;
  ::TSCE::FormulaArchive* _internal_add_error_custom_neg_formulae();
  public:
  const ::TSCE::FormulaArchive& error_custom_neg_formulae(int index) const;
  ::TSCE::FormulaArchive* add_error_custom_neg_formulae();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      error_custom_neg_formulae() const;

  // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
  int error_custom_pos_scatterx_formulae_size() const;
  private:
  int _internal_error_custom_pos_scatterx_formulae_size() const;
  public:
  void clear_error_custom_pos_scatterx_formulae();
  ::TSCE::FormulaArchive* mutable_error_custom_pos_scatterx_formulae(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_error_custom_pos_scatterx_formulae();
  private:
  const ::TSCE::FormulaArchive& _internal_error_custom_pos_scatterx_formulae(int index) const;
  ::TSCE::FormulaArchive* _internal_add_error_custom_pos_scatterx_formulae();
  public:
  const ::TSCE::FormulaArchive& error_custom_pos_scatterx_formulae(int index) const;
  ::TSCE::FormulaArchive* add_error_custom_pos_scatterx_formulae();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      error_custom_pos_scatterx_formulae() const;

  // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
  int error_custom_neg_scatterx_formulae_size() const;
  private:
  int _internal_error_custom_neg_scatterx_formulae_size() const;
  public:
  void clear_error_custom_neg_scatterx_formulae();
  ::TSCE::FormulaArchive* mutable_error_custom_neg_scatterx_formulae(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_error_custom_neg_scatterx_formulae();
  private:
  const ::TSCE::FormulaArchive& _internal_error_custom_neg_scatterx_formulae(int index) const;
  ::TSCE::FormulaArchive* _internal_add_error_custom_neg_scatterx_formulae();
  public:
  const ::TSCE::FormulaArchive& error_custom_neg_scatterx_formulae(int index) const;
  ::TSCE::FormulaArchive* add_error_custom_neg_scatterx_formulae();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      error_custom_neg_scatterx_formulae() const;

  // optional int32 direction = 5;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TN.ChartMediatorFormulaStorage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > data_formulae_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > row_label_formulae_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > col_label_formulae_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > error_custom_pos_formulae_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > error_custom_neg_formulae_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > error_custom_pos_scatterx_formulae_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > error_custom_neg_scatterx_formulae_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartMediatorArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.ChartMediatorArchive) */ {
 public:
  inline ChartMediatorArchive() : ChartMediatorArchive(nullptr) {}
  ~ChartMediatorArchive() override;
  explicit constexpr ChartMediatorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartMediatorArchive(const ChartMediatorArchive& from);
  ChartMediatorArchive(ChartMediatorArchive&& from) noexcept
    : ChartMediatorArchive() {
    *this = ::std::move(from);
  }

  inline ChartMediatorArchive& operator=(const ChartMediatorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartMediatorArchive& operator=(ChartMediatorArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartMediatorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartMediatorArchive* internal_default_instance() {
    return reinterpret_cast<const ChartMediatorArchive*>(
               &_ChartMediatorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ChartMediatorArchive& a, ChartMediatorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartMediatorArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartMediatorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartMediatorArchive* New() const final {
    return CreateMaybeMessage<ChartMediatorArchive>(nullptr);
  }

  ChartMediatorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartMediatorArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartMediatorArchive& from);
  void MergeFrom(const ChartMediatorArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartMediatorArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.ChartMediatorArchive";
  }
  protected:
  explicit ChartMediatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 2,
    kSuperFieldNumber = 1,
    kFormulasFieldNumber = 3,
    kColumnsAreSeriesFieldNumber = 4,
    kIsRegisteredWithCalcEngineFieldNumber = 5,
  };
  // required string entity_id = 2;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // required .TSCH.ChartMediatorArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartMediatorArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartMediatorArchive* release_super();
  ::TSCH::ChartMediatorArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartMediatorArchive* super);
  private:
  const ::TSCH::ChartMediatorArchive& _internal_super() const;
  ::TSCH::ChartMediatorArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartMediatorArchive* super);
  ::TSCH::ChartMediatorArchive* unsafe_arena_release_super();

  // optional .TN.ChartMediatorFormulaStorage formulas = 3;
  bool has_formulas() const;
  private:
  bool _internal_has_formulas() const;
  public:
  void clear_formulas();
  const ::TN::ChartMediatorFormulaStorage& formulas() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::ChartMediatorFormulaStorage* release_formulas();
  ::TN::ChartMediatorFormulaStorage* mutable_formulas();
  void set_allocated_formulas(::TN::ChartMediatorFormulaStorage* formulas);
  private:
  const ::TN::ChartMediatorFormulaStorage& _internal_formulas() const;
  ::TN::ChartMediatorFormulaStorage* _internal_mutable_formulas();
  public:
  void unsafe_arena_set_allocated_formulas(
      ::TN::ChartMediatorFormulaStorage* formulas);
  ::TN::ChartMediatorFormulaStorage* unsafe_arena_release_formulas();

  // optional bool columns_are_series = 4;
  bool has_columns_are_series() const;
  private:
  bool _internal_has_columns_are_series() const;
  public:
  void clear_columns_are_series();
  bool columns_are_series() const;
  void set_columns_are_series(bool value);
  private:
  bool _internal_columns_are_series() const;
  void _internal_set_columns_are_series(bool value);
  public:

  // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_is_registered_with_calc_engine() const;
  private:
  bool _internal_has_is_registered_with_calc_engine() const;
  public:
  PROTOBUF_DEPRECATED void clear_is_registered_with_calc_engine();
  PROTOBUF_DEPRECATED bool is_registered_with_calc_engine() const;
  PROTOBUF_DEPRECATED void set_is_registered_with_calc_engine(bool value);
  private:
  bool _internal_is_registered_with_calc_engine() const;
  void _internal_set_is_registered_with_calc_engine(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.ChartMediatorArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
  ::TSCH::ChartMediatorArchive* super_;
  ::TN::ChartMediatorFormulaStorage* formulas_;
  bool columns_are_series_;
  bool is_registered_with_calc_engine_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.ChartSelectionArchive) */ {
 public:
  inline ChartSelectionArchive() : ChartSelectionArchive(nullptr) {}
  ~ChartSelectionArchive() override;
  explicit constexpr ChartSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSelectionArchive(const ChartSelectionArchive& from);
  ChartSelectionArchive(ChartSelectionArchive&& from) noexcept
    : ChartSelectionArchive() {
    *this = ::std::move(from);
  }

  inline ChartSelectionArchive& operator=(const ChartSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSelectionArchive& operator=(ChartSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSelectionArchive*>(
               &_ChartSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ChartSelectionArchive& a, ChartSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartSelectionArchive* New() const final {
    return CreateMaybeMessage<ChartSelectionArchive>(nullptr);
  }

  ChartSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartSelectionArchive& from);
  void MergeFrom(const ChartSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.ChartSelectionArchive";
  }
  protected:
  explicit ChartSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 1,
    kDeprecatedSuperFieldNumber = 2,
    kChartFieldNumber = 3,
    kSuperFieldNumber = 4,
  };
  // optional .TSCE.RangeReferenceArchive reference = 1;
  bool has_reference() const;
  private:
  bool _internal_has_reference() const;
  public:
  void clear_reference();
  const ::TSCE::RangeReferenceArchive& reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeReferenceArchive* release_reference();
  ::TSCE::RangeReferenceArchive* mutable_reference();
  void set_allocated_reference(::TSCE::RangeReferenceArchive* reference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_reference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_reference();
  public:
  void unsafe_arena_set_allocated_reference(
      ::TSCE::RangeReferenceArchive* reference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_reference();

  // optional .TSCH.ChartSelectionArchive deprecated_super = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_super() const;
  private:
  bool _internal_has_deprecated_super() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_super();
  PROTOBUF_DEPRECATED const ::TSCH::ChartSelectionArchive& deprecated_super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSCH::ChartSelectionArchive* release_deprecated_super();
  PROTOBUF_DEPRECATED ::TSCH::ChartSelectionArchive* mutable_deprecated_super();
  PROTOBUF_DEPRECATED void set_allocated_deprecated_super(::TSCH::ChartSelectionArchive* deprecated_super);
  private:
  const ::TSCH::ChartSelectionArchive& _internal_deprecated_super() const;
  ::TSCH::ChartSelectionArchive* _internal_mutable_deprecated_super();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_deprecated_super(
      ::TSCH::ChartSelectionArchive* deprecated_super);
  PROTOBUF_DEPRECATED ::TSCH::ChartSelectionArchive* unsafe_arena_release_deprecated_super();

  // optional .TSP.Reference chart = 3;
  bool has_chart() const;
  private:
  bool _internal_has_chart() const;
  public:
  void clear_chart();
  const ::TSP::Reference& chart() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_chart();
  ::TSP::Reference* mutable_chart();
  void set_allocated_chart(::TSP::Reference* chart);
  private:
  const ::TSP::Reference& _internal_chart() const;
  ::TSP::Reference* _internal_mutable_chart();
  public:
  void unsafe_arena_set_allocated_chart(
      ::TSP::Reference* chart);
  ::TSP::Reference* unsafe_arena_release_chart();

  // optional .TSD.DrawableSelectionArchive super = 4;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableSelectionArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::DrawableSelectionArchive* release_super();
  ::TSD::DrawableSelectionArchive* mutable_super();
  void set_allocated_super(::TSD::DrawableSelectionArchive* super);
  private:
  const ::TSD::DrawableSelectionArchive& _internal_super() const;
  ::TSD::DrawableSelectionArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableSelectionArchive* super);
  ::TSD::DrawableSelectionArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.ChartSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::RangeReferenceArchive* reference_;
  ::TSCH::ChartSelectionArchive* deprecated_super_;
  ::TSP::Reference* chart_;
  ::TSD::DrawableSelectionArchive* super_;
  friend struct ::TableStruct_TNArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SheetUIStateArchive

// required float view_scale = 1;
inline bool SheetUIStateArchive::_internal_has_view_scale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SheetUIStateArchive::has_view_scale() const {
  return _internal_has_view_scale();
}
inline void SheetUIStateArchive::clear_view_scale() {
  view_scale_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float SheetUIStateArchive::_internal_view_scale() const {
  return view_scale_;
}
inline float SheetUIStateArchive::view_scale() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.view_scale)
  return _internal_view_scale();
}
inline void SheetUIStateArchive::_internal_set_view_scale(float value) {
  _has_bits_[0] |= 0x00000040u;
  view_scale_ = value;
}
inline void SheetUIStateArchive::set_view_scale(float value) {
  _internal_set_view_scale(value);
  // @@protoc_insertion_point(field_set:TN.SheetUIStateArchive.view_scale)
}

// required .TSP.Point scroll_position = 2;
inline bool SheetUIStateArchive::_internal_has_scroll_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scroll_position_ != nullptr);
  return value;
}
inline bool SheetUIStateArchive::has_scroll_position() const {
  return _internal_has_scroll_position();
}
inline const ::TSP::Point& SheetUIStateArchive::_internal_scroll_position() const {
  const ::TSP::Point* p = scroll_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& SheetUIStateArchive::scroll_position() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.scroll_position)
  return _internal_scroll_position();
}
inline void SheetUIStateArchive::unsafe_arena_set_allocated_scroll_position(
    ::TSP::Point* scroll_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scroll_position_);
  }
  scroll_position_ = scroll_position;
  if (scroll_position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetUIStateArchive.scroll_position)
}
inline ::TSP::Point* SheetUIStateArchive::release_scroll_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Point* temp = scroll_position_;
  scroll_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Point* SheetUIStateArchive::unsafe_arena_release_scroll_position() {
  // @@protoc_insertion_point(field_release:TN.SheetUIStateArchive.scroll_position)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Point* temp = scroll_position_;
  scroll_position_ = nullptr;
  return temp;
}
inline ::TSP::Point* SheetUIStateArchive::_internal_mutable_scroll_position() {
  _has_bits_[0] |= 0x00000001u;
  if (scroll_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArena());
    scroll_position_ = p;
  }
  return scroll_position_;
}
inline ::TSP::Point* SheetUIStateArchive::mutable_scroll_position() {
  // @@protoc_insertion_point(field_mutable:TN.SheetUIStateArchive.scroll_position)
  return _internal_mutable_scroll_position();
}
inline void SheetUIStateArchive::set_allocated_scroll_position(::TSP::Point* scroll_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scroll_position_);
  }
  if (scroll_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scroll_position)->GetArena();
    if (message_arena != submessage_arena) {
      scroll_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scroll_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scroll_position_ = scroll_position;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetUIStateArchive.scroll_position)
}

// optional float previous_view_scale = 3;
inline bool SheetUIStateArchive::_internal_has_previous_view_scale() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SheetUIStateArchive::has_previous_view_scale() const {
  return _internal_has_previous_view_scale();
}
inline void SheetUIStateArchive::clear_previous_view_scale() {
  previous_view_scale_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float SheetUIStateArchive::_internal_previous_view_scale() const {
  return previous_view_scale_;
}
inline float SheetUIStateArchive::previous_view_scale() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.previous_view_scale)
  return _internal_previous_view_scale();
}
inline void SheetUIStateArchive::_internal_set_previous_view_scale(float value) {
  _has_bits_[0] |= 0x00000080u;
  previous_view_scale_ = value;
}
inline void SheetUIStateArchive::set_previous_view_scale(float value) {
  _internal_set_previous_view_scale(value);
  // @@protoc_insertion_point(field_set:TN.SheetUIStateArchive.previous_view_scale)
}

// optional bool scroll_position_is_unscaled = 4;
inline bool SheetUIStateArchive::_internal_has_scroll_position_is_unscaled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SheetUIStateArchive::has_scroll_position_is_unscaled() const {
  return _internal_has_scroll_position_is_unscaled();
}
inline void SheetUIStateArchive::clear_scroll_position_is_unscaled() {
  scroll_position_is_unscaled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool SheetUIStateArchive::_internal_scroll_position_is_unscaled() const {
  return scroll_position_is_unscaled_;
}
inline bool SheetUIStateArchive::scroll_position_is_unscaled() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.scroll_position_is_unscaled)
  return _internal_scroll_position_is_unscaled();
}
inline void SheetUIStateArchive::_internal_set_scroll_position_is_unscaled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  scroll_position_is_unscaled_ = value;
}
inline void SheetUIStateArchive::set_scroll_position_is_unscaled(bool value) {
  _internal_set_scroll_position_is_unscaled(value);
  // @@protoc_insertion_point(field_set:TN.SheetUIStateArchive.scroll_position_is_unscaled)
}

// optional .TSP.Point previous_scroll_position = 5;
inline bool SheetUIStateArchive::_internal_has_previous_scroll_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || previous_scroll_position_ != nullptr);
  return value;
}
inline bool SheetUIStateArchive::has_previous_scroll_position() const {
  return _internal_has_previous_scroll_position();
}
inline const ::TSP::Point& SheetUIStateArchive::_internal_previous_scroll_position() const {
  const ::TSP::Point* p = previous_scroll_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& SheetUIStateArchive::previous_scroll_position() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.previous_scroll_position)
  return _internal_previous_scroll_position();
}
inline void SheetUIStateArchive::unsafe_arena_set_allocated_previous_scroll_position(
    ::TSP::Point* previous_scroll_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_scroll_position_);
  }
  previous_scroll_position_ = previous_scroll_position;
  if (previous_scroll_position) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetUIStateArchive.previous_scroll_position)
}
inline ::TSP::Point* SheetUIStateArchive::release_previous_scroll_position() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = previous_scroll_position_;
  previous_scroll_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Point* SheetUIStateArchive::unsafe_arena_release_previous_scroll_position() {
  // @@protoc_insertion_point(field_release:TN.SheetUIStateArchive.previous_scroll_position)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = previous_scroll_position_;
  previous_scroll_position_ = nullptr;
  return temp;
}
inline ::TSP::Point* SheetUIStateArchive::_internal_mutable_previous_scroll_position() {
  _has_bits_[0] |= 0x00000002u;
  if (previous_scroll_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArena());
    previous_scroll_position_ = p;
  }
  return previous_scroll_position_;
}
inline ::TSP::Point* SheetUIStateArchive::mutable_previous_scroll_position() {
  // @@protoc_insertion_point(field_mutable:TN.SheetUIStateArchive.previous_scroll_position)
  return _internal_mutable_previous_scroll_position();
}
inline void SheetUIStateArchive::set_allocated_previous_scroll_position(::TSP::Point* previous_scroll_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_scroll_position_);
  }
  if (previous_scroll_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_scroll_position)->GetArena();
    if (message_arena != submessage_arena) {
      previous_scroll_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_scroll_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  previous_scroll_position_ = previous_scroll_position;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetUIStateArchive.previous_scroll_position)
}

// optional bool scroll_position_valid = 6;
inline bool SheetUIStateArchive::_internal_has_scroll_position_valid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SheetUIStateArchive::has_scroll_position_valid() const {
  return _internal_has_scroll_position_valid();
}
inline void SheetUIStateArchive::clear_scroll_position_valid() {
  scroll_position_valid_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool SheetUIStateArchive::_internal_scroll_position_valid() const {
  return scroll_position_valid_;
}
inline bool SheetUIStateArchive::scroll_position_valid() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.scroll_position_valid)
  return _internal_scroll_position_valid();
}
inline void SheetUIStateArchive::_internal_set_scroll_position_valid(bool value) {
  _has_bits_[0] |= 0x00000200u;
  scroll_position_valid_ = value;
}
inline void SheetUIStateArchive::set_scroll_position_valid(bool value) {
  _internal_set_scroll_position_valid(value);
  // @@protoc_insertion_point(field_set:TN.SheetUIStateArchive.scroll_position_valid)
}

// optional bool previous_scroll_position_valid = 7;
inline bool SheetUIStateArchive::_internal_has_previous_scroll_position_valid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SheetUIStateArchive::has_previous_scroll_position_valid() const {
  return _internal_has_previous_scroll_position_valid();
}
inline void SheetUIStateArchive::clear_previous_scroll_position_valid() {
  previous_scroll_position_valid_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool SheetUIStateArchive::_internal_previous_scroll_position_valid() const {
  return previous_scroll_position_valid_;
}
inline bool SheetUIStateArchive::previous_scroll_position_valid() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.previous_scroll_position_valid)
  return _internal_previous_scroll_position_valid();
}
inline void SheetUIStateArchive::_internal_set_previous_scroll_position_valid(bool value) {
  _has_bits_[0] |= 0x00000400u;
  previous_scroll_position_valid_ = value;
}
inline void SheetUIStateArchive::set_previous_scroll_position_valid(bool value) {
  _internal_set_previous_scroll_position_valid(value);
  // @@protoc_insertion_point(field_set:TN.SheetUIStateArchive.previous_scroll_position_valid)
}

// optional .TSP.Size visible_size = 8;
inline bool SheetUIStateArchive::_internal_has_visible_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || visible_size_ != nullptr);
  return value;
}
inline bool SheetUIStateArchive::has_visible_size() const {
  return _internal_has_visible_size();
}
inline const ::TSP::Size& SheetUIStateArchive::_internal_visible_size() const {
  const ::TSP::Size* p = visible_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& SheetUIStateArchive::visible_size() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.visible_size)
  return _internal_visible_size();
}
inline void SheetUIStateArchive::unsafe_arena_set_allocated_visible_size(
    ::TSP::Size* visible_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_size_);
  }
  visible_size_ = visible_size;
  if (visible_size) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetUIStateArchive.visible_size)
}
inline ::TSP::Size* SheetUIStateArchive::release_visible_size() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = visible_size_;
  visible_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* SheetUIStateArchive::unsafe_arena_release_visible_size() {
  // @@protoc_insertion_point(field_release:TN.SheetUIStateArchive.visible_size)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = visible_size_;
  visible_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* SheetUIStateArchive::_internal_mutable_visible_size() {
  _has_bits_[0] |= 0x00000004u;
  if (visible_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    visible_size_ = p;
  }
  return visible_size_;
}
inline ::TSP::Size* SheetUIStateArchive::mutable_visible_size() {
  // @@protoc_insertion_point(field_mutable:TN.SheetUIStateArchive.visible_size)
  return _internal_mutable_visible_size();
}
inline void SheetUIStateArchive::set_allocated_visible_size(::TSP::Size* visible_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_size_);
  }
  if (visible_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_size)->GetArena();
    if (message_arena != submessage_arena) {
      visible_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  visible_size_ = visible_size;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetUIStateArchive.visible_size)
}

// optional .TSP.Size previous_visible_size = 9;
inline bool SheetUIStateArchive::_internal_has_previous_visible_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || previous_visible_size_ != nullptr);
  return value;
}
inline bool SheetUIStateArchive::has_previous_visible_size() const {
  return _internal_has_previous_visible_size();
}
inline const ::TSP::Size& SheetUIStateArchive::_internal_previous_visible_size() const {
  const ::TSP::Size* p = previous_visible_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& SheetUIStateArchive::previous_visible_size() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.previous_visible_size)
  return _internal_previous_visible_size();
}
inline void SheetUIStateArchive::unsafe_arena_set_allocated_previous_visible_size(
    ::TSP::Size* previous_visible_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_visible_size_);
  }
  previous_visible_size_ = previous_visible_size;
  if (previous_visible_size) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetUIStateArchive.previous_visible_size)
}
inline ::TSP::Size* SheetUIStateArchive::release_previous_visible_size() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = previous_visible_size_;
  previous_visible_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* SheetUIStateArchive::unsafe_arena_release_previous_visible_size() {
  // @@protoc_insertion_point(field_release:TN.SheetUIStateArchive.previous_visible_size)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = previous_visible_size_;
  previous_visible_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* SheetUIStateArchive::_internal_mutable_previous_visible_size() {
  _has_bits_[0] |= 0x00000008u;
  if (previous_visible_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    previous_visible_size_ = p;
  }
  return previous_visible_size_;
}
inline ::TSP::Size* SheetUIStateArchive::mutable_previous_visible_size() {
  // @@protoc_insertion_point(field_mutable:TN.SheetUIStateArchive.previous_visible_size)
  return _internal_mutable_previous_visible_size();
}
inline void SheetUIStateArchive::set_allocated_previous_visible_size(::TSP::Size* previous_visible_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_visible_size_);
  }
  if (previous_visible_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_visible_size)->GetArena();
    if (message_arena != submessage_arena) {
      previous_visible_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_visible_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  previous_visible_size_ = previous_visible_size;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetUIStateArchive.previous_visible_size)
}

// optional uint32 device_idiom = 10;
inline bool SheetUIStateArchive::_internal_has_device_idiom() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SheetUIStateArchive::has_device_idiom() const {
  return _internal_has_device_idiom();
}
inline void SheetUIStateArchive::clear_device_idiom() {
  device_idiom_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SheetUIStateArchive::_internal_device_idiom() const {
  return device_idiom_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SheetUIStateArchive::device_idiom() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.device_idiom)
  return _internal_device_idiom();
}
inline void SheetUIStateArchive::_internal_set_device_idiom(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  device_idiom_ = value;
}
inline void SheetUIStateArchive::set_device_idiom(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_device_idiom(value);
  // @@protoc_insertion_point(field_set:TN.SheetUIStateArchive.device_idiom)
}

// optional .TSK.SelectionPathArchive selection_path = 11;
inline bool SheetUIStateArchive::_internal_has_selection_path() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || selection_path_ != nullptr);
  return value;
}
inline bool SheetUIStateArchive::has_selection_path() const {
  return _internal_has_selection_path();
}
inline const ::TSK::SelectionPathArchive& SheetUIStateArchive::_internal_selection_path() const {
  const ::TSK::SelectionPathArchive* p = selection_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::SelectionPathArchive&>(
      ::TSK::_SelectionPathArchive_default_instance_);
}
inline const ::TSK::SelectionPathArchive& SheetUIStateArchive::selection_path() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.selection_path)
  return _internal_selection_path();
}
inline void SheetUIStateArchive::unsafe_arena_set_allocated_selection_path(
    ::TSK::SelectionPathArchive* selection_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_);
  }
  selection_path_ = selection_path;
  if (selection_path) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetUIStateArchive.selection_path)
}
inline ::TSK::SelectionPathArchive* SheetUIStateArchive::release_selection_path() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::SelectionPathArchive* temp = selection_path_;
  selection_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::SelectionPathArchive* SheetUIStateArchive::unsafe_arena_release_selection_path() {
  // @@protoc_insertion_point(field_release:TN.SheetUIStateArchive.selection_path)
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::SelectionPathArchive* temp = selection_path_;
  selection_path_ = nullptr;
  return temp;
}
inline ::TSK::SelectionPathArchive* SheetUIStateArchive::_internal_mutable_selection_path() {
  _has_bits_[0] |= 0x00000010u;
  if (selection_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::SelectionPathArchive>(GetArena());
    selection_path_ = p;
  }
  return selection_path_;
}
inline ::TSK::SelectionPathArchive* SheetUIStateArchive::mutable_selection_path() {
  // @@protoc_insertion_point(field_mutable:TN.SheetUIStateArchive.selection_path)
  return _internal_mutable_selection_path();
}
inline void SheetUIStateArchive::set_allocated_selection_path(::TSK::SelectionPathArchive* selection_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_);
  }
  if (selection_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path)->GetArena();
    if (message_arena != submessage_arena) {
      selection_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  selection_path_ = selection_path;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetUIStateArchive.selection_path)
}

// optional .TSP.Reference selection_path_transformer = 12;
inline bool SheetUIStateArchive::_internal_has_selection_path_transformer() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || selection_path_transformer_ != nullptr);
  return value;
}
inline bool SheetUIStateArchive::has_selection_path_transformer() const {
  return _internal_has_selection_path_transformer();
}
inline const ::TSP::Reference& SheetUIStateArchive::_internal_selection_path_transformer() const {
  const ::TSP::Reference* p = selection_path_transformer_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SheetUIStateArchive::selection_path_transformer() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateArchive.selection_path_transformer)
  return _internal_selection_path_transformer();
}
inline void SheetUIStateArchive::unsafe_arena_set_allocated_selection_path_transformer(
    ::TSP::Reference* selection_path_transformer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer_);
  }
  selection_path_transformer_ = selection_path_transformer;
  if (selection_path_transformer) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetUIStateArchive.selection_path_transformer)
}
inline ::TSP::Reference* SheetUIStateArchive::release_selection_path_transformer() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = selection_path_transformer_;
  selection_path_transformer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SheetUIStateArchive::unsafe_arena_release_selection_path_transformer() {
  // @@protoc_insertion_point(field_release:TN.SheetUIStateArchive.selection_path_transformer)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = selection_path_transformer_;
  selection_path_transformer_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SheetUIStateArchive::_internal_mutable_selection_path_transformer() {
  _has_bits_[0] |= 0x00000020u;
  if (selection_path_transformer_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    selection_path_transformer_ = p;
  }
  return selection_path_transformer_;
}
inline ::TSP::Reference* SheetUIStateArchive::mutable_selection_path_transformer() {
  // @@protoc_insertion_point(field_mutable:TN.SheetUIStateArchive.selection_path_transformer)
  return _internal_mutable_selection_path_transformer();
}
inline void SheetUIStateArchive::set_allocated_selection_path_transformer(::TSP::Reference* selection_path_transformer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer_);
  }
  if (selection_path_transformer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer)->GetArena();
    if (message_arena != submessage_arena) {
      selection_path_transformer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_path_transformer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  selection_path_transformer_ = selection_path_transformer;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetUIStateArchive.selection_path_transformer)
}

// -------------------------------------------------------------------

// SheetUIStateDictionaryEntryArchive

// required .TSP.Reference sheet = 1;
inline bool SheetUIStateDictionaryEntryArchive::_internal_has_sheet() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_ != nullptr);
  return value;
}
inline bool SheetUIStateDictionaryEntryArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& SheetUIStateDictionaryEntryArchive::_internal_sheet() const {
  const ::TSP::Reference* p = sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SheetUIStateDictionaryEntryArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateDictionaryEntryArchive.sheet)
  return _internal_sheet();
}
inline void SheetUIStateDictionaryEntryArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  sheet_ = sheet;
  if (sheet) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetUIStateDictionaryEntryArchive.sheet)
}
inline ::TSP::Reference* SheetUIStateDictionaryEntryArchive::release_sheet() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SheetUIStateDictionaryEntryArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.SheetUIStateDictionaryEntryArchive.sheet)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SheetUIStateDictionaryEntryArchive::_internal_mutable_sheet() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    sheet_ = p;
  }
  return sheet_;
}
inline ::TSP::Reference* SheetUIStateDictionaryEntryArchive::mutable_sheet() {
  // @@protoc_insertion_point(field_mutable:TN.SheetUIStateDictionaryEntryArchive.sheet)
  return _internal_mutable_sheet();
}
inline void SheetUIStateDictionaryEntryArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet)->GetArena();
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetUIStateDictionaryEntryArchive.sheet)
}

// required .TN.SheetUIStateArchive sheet_uistate = 2;
inline bool SheetUIStateDictionaryEntryArchive::_internal_has_sheet_uistate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uistate_ != nullptr);
  return value;
}
inline bool SheetUIStateDictionaryEntryArchive::has_sheet_uistate() const {
  return _internal_has_sheet_uistate();
}
inline void SheetUIStateDictionaryEntryArchive::clear_sheet_uistate() {
  if (sheet_uistate_ != nullptr) sheet_uistate_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TN::SheetUIStateArchive& SheetUIStateDictionaryEntryArchive::_internal_sheet_uistate() const {
  const ::TN::SheetUIStateArchive* p = sheet_uistate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::SheetUIStateArchive&>(
      ::TN::_SheetUIStateArchive_default_instance_);
}
inline const ::TN::SheetUIStateArchive& SheetUIStateDictionaryEntryArchive::sheet_uistate() const {
  // @@protoc_insertion_point(field_get:TN.SheetUIStateDictionaryEntryArchive.sheet_uistate)
  return _internal_sheet_uistate();
}
inline void SheetUIStateDictionaryEntryArchive::unsafe_arena_set_allocated_sheet_uistate(
    ::TN::SheetUIStateArchive* sheet_uistate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uistate_);
  }
  sheet_uistate_ = sheet_uistate;
  if (sheet_uistate) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetUIStateDictionaryEntryArchive.sheet_uistate)
}
inline ::TN::SheetUIStateArchive* SheetUIStateDictionaryEntryArchive::release_sheet_uistate() {
  _has_bits_[0] &= ~0x00000002u;
  ::TN::SheetUIStateArchive* temp = sheet_uistate_;
  sheet_uistate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::SheetUIStateArchive* SheetUIStateDictionaryEntryArchive::unsafe_arena_release_sheet_uistate() {
  // @@protoc_insertion_point(field_release:TN.SheetUIStateDictionaryEntryArchive.sheet_uistate)
  _has_bits_[0] &= ~0x00000002u;
  ::TN::SheetUIStateArchive* temp = sheet_uistate_;
  sheet_uistate_ = nullptr;
  return temp;
}
inline ::TN::SheetUIStateArchive* SheetUIStateDictionaryEntryArchive::_internal_mutable_sheet_uistate() {
  _has_bits_[0] |= 0x00000002u;
  if (sheet_uistate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::SheetUIStateArchive>(GetArena());
    sheet_uistate_ = p;
  }
  return sheet_uistate_;
}
inline ::TN::SheetUIStateArchive* SheetUIStateDictionaryEntryArchive::mutable_sheet_uistate() {
  // @@protoc_insertion_point(field_mutable:TN.SheetUIStateDictionaryEntryArchive.sheet_uistate)
  return _internal_mutable_sheet_uistate();
}
inline void SheetUIStateDictionaryEntryArchive::set_allocated_sheet_uistate(::TN::SheetUIStateArchive* sheet_uistate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sheet_uistate_;
  }
  if (sheet_uistate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sheet_uistate);
    if (message_arena != submessage_arena) {
      sheet_uistate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uistate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sheet_uistate_ = sheet_uistate;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetUIStateDictionaryEntryArchive.sheet_uistate)
}

// -------------------------------------------------------------------

// UUIDSheetUIStateDictionaryArchive

// required .TSP.UUID sheet_uuid = 1;
inline bool UUIDSheetUIStateDictionaryArchive::_internal_has_sheet_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uuid_ != nullptr);
  return value;
}
inline bool UUIDSheetUIStateDictionaryArchive::has_sheet_uuid() const {
  return _internal_has_sheet_uuid();
}
inline const ::TSP::UUID& UUIDSheetUIStateDictionaryArchive::_internal_sheet_uuid() const {
  const ::TSP::UUID* p = sheet_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& UUIDSheetUIStateDictionaryArchive::sheet_uuid() const {
  // @@protoc_insertion_point(field_get:TN.UUIDSheetUIStateDictionaryArchive.sheet_uuid)
  return _internal_sheet_uuid();
}
inline void UUIDSheetUIStateDictionaryArchive::unsafe_arena_set_allocated_sheet_uuid(
    ::TSP::UUID* sheet_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uuid_);
  }
  sheet_uuid_ = sheet_uuid;
  if (sheet_uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UUIDSheetUIStateDictionaryArchive.sheet_uuid)
}
inline ::TSP::UUID* UUIDSheetUIStateDictionaryArchive::release_sheet_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uuid_;
  sheet_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* UUIDSheetUIStateDictionaryArchive::unsafe_arena_release_sheet_uuid() {
  // @@protoc_insertion_point(field_release:TN.UUIDSheetUIStateDictionaryArchive.sheet_uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uuid_;
  sheet_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* UUIDSheetUIStateDictionaryArchive::_internal_mutable_sheet_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uuid_ = p;
  }
  return sheet_uuid_;
}
inline ::TSP::UUID* UUIDSheetUIStateDictionaryArchive::mutable_sheet_uuid() {
  // @@protoc_insertion_point(field_mutable:TN.UUIDSheetUIStateDictionaryArchive.sheet_uuid)
  return _internal_mutable_sheet_uuid();
}
inline void UUIDSheetUIStateDictionaryArchive::set_allocated_sheet_uuid(::TSP::UUID* sheet_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uuid_);
  }
  if (sheet_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_uuid_ = sheet_uuid;
  // @@protoc_insertion_point(field_set_allocated:TN.UUIDSheetUIStateDictionaryArchive.sheet_uuid)
}

// required .TN.SheetUIStateArchive sheet_uistate = 2;
inline bool UUIDSheetUIStateDictionaryArchive::_internal_has_sheet_uistate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uistate_ != nullptr);
  return value;
}
inline bool UUIDSheetUIStateDictionaryArchive::has_sheet_uistate() const {
  return _internal_has_sheet_uistate();
}
inline void UUIDSheetUIStateDictionaryArchive::clear_sheet_uistate() {
  if (sheet_uistate_ != nullptr) sheet_uistate_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TN::SheetUIStateArchive& UUIDSheetUIStateDictionaryArchive::_internal_sheet_uistate() const {
  const ::TN::SheetUIStateArchive* p = sheet_uistate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::SheetUIStateArchive&>(
      ::TN::_SheetUIStateArchive_default_instance_);
}
inline const ::TN::SheetUIStateArchive& UUIDSheetUIStateDictionaryArchive::sheet_uistate() const {
  // @@protoc_insertion_point(field_get:TN.UUIDSheetUIStateDictionaryArchive.sheet_uistate)
  return _internal_sheet_uistate();
}
inline void UUIDSheetUIStateDictionaryArchive::unsafe_arena_set_allocated_sheet_uistate(
    ::TN::SheetUIStateArchive* sheet_uistate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uistate_);
  }
  sheet_uistate_ = sheet_uistate;
  if (sheet_uistate) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UUIDSheetUIStateDictionaryArchive.sheet_uistate)
}
inline ::TN::SheetUIStateArchive* UUIDSheetUIStateDictionaryArchive::release_sheet_uistate() {
  _has_bits_[0] &= ~0x00000002u;
  ::TN::SheetUIStateArchive* temp = sheet_uistate_;
  sheet_uistate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::SheetUIStateArchive* UUIDSheetUIStateDictionaryArchive::unsafe_arena_release_sheet_uistate() {
  // @@protoc_insertion_point(field_release:TN.UUIDSheetUIStateDictionaryArchive.sheet_uistate)
  _has_bits_[0] &= ~0x00000002u;
  ::TN::SheetUIStateArchive* temp = sheet_uistate_;
  sheet_uistate_ = nullptr;
  return temp;
}
inline ::TN::SheetUIStateArchive* UUIDSheetUIStateDictionaryArchive::_internal_mutable_sheet_uistate() {
  _has_bits_[0] |= 0x00000002u;
  if (sheet_uistate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::SheetUIStateArchive>(GetArena());
    sheet_uistate_ = p;
  }
  return sheet_uistate_;
}
inline ::TN::SheetUIStateArchive* UUIDSheetUIStateDictionaryArchive::mutable_sheet_uistate() {
  // @@protoc_insertion_point(field_mutable:TN.UUIDSheetUIStateDictionaryArchive.sheet_uistate)
  return _internal_mutable_sheet_uistate();
}
inline void UUIDSheetUIStateDictionaryArchive::set_allocated_sheet_uistate(::TN::SheetUIStateArchive* sheet_uistate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sheet_uistate_;
  }
  if (sheet_uistate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sheet_uistate);
    if (message_arena != submessage_arena) {
      sheet_uistate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uistate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sheet_uistate_ = sheet_uistate;
  // @@protoc_insertion_point(field_set_allocated:TN.UUIDSheetUIStateDictionaryArchive.sheet_uistate)
}

// -------------------------------------------------------------------

// UIStateArchive

// required uint32 active_sheet_index = 1 [deprecated = true];
inline bool UIStateArchive::_internal_has_active_sheet_index() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UIStateArchive::has_active_sheet_index() const {
  return _internal_has_active_sheet_index();
}
inline void UIStateArchive::clear_active_sheet_index() {
  active_sheet_index_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::_internal_active_sheet_index() const {
  return active_sheet_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::active_sheet_index() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.active_sheet_index)
  return _internal_active_sheet_index();
}
inline void UIStateArchive::_internal_set_active_sheet_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  active_sheet_index_ = value;
}
inline void UIStateArchive::set_active_sheet_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_active_sheet_index(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.active_sheet_index)
}

// repeated .TSP.Reference selected_info = 2 [deprecated = true];
inline int UIStateArchive::_internal_selected_info_size() const {
  return selected_info_.size();
}
inline int UIStateArchive::selected_info_size() const {
  return _internal_selected_info_size();
}
inline ::TSP::Reference* UIStateArchive::mutable_selected_info(int index) {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.selected_info)
  return selected_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateArchive::mutable_selected_info() {
  // @@protoc_insertion_point(field_mutable_list:TN.UIStateArchive.selected_info)
  return &selected_info_;
}
inline const ::TSP::Reference& UIStateArchive::_internal_selected_info(int index) const {
  return selected_info_.Get(index);
}
inline const ::TSP::Reference& UIStateArchive::selected_info(int index) const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.selected_info)
  return _internal_selected_info(index);
}
inline ::TSP::Reference* UIStateArchive::_internal_add_selected_info() {
  return selected_info_.Add();
}
inline ::TSP::Reference* UIStateArchive::add_selected_info() {
  // @@protoc_insertion_point(field_add:TN.UIStateArchive.selected_info)
  return _internal_add_selected_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateArchive::selected_info() const {
  // @@protoc_insertion_point(field_list:TN.UIStateArchive.selected_info)
  return selected_info_;
}

// repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3 [deprecated = true];
inline int UIStateArchive::_internal_sheet_uistate_dictionary_entry_size() const {
  return sheet_uistate_dictionary_entry_.size();
}
inline int UIStateArchive::sheet_uistate_dictionary_entry_size() const {
  return _internal_sheet_uistate_dictionary_entry_size();
}
inline void UIStateArchive::clear_sheet_uistate_dictionary_entry() {
  sheet_uistate_dictionary_entry_.Clear();
}
inline ::TN::SheetUIStateDictionaryEntryArchive* UIStateArchive::mutable_sheet_uistate_dictionary_entry(int index) {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.sheet_uistate_dictionary_entry)
  return sheet_uistate_dictionary_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >*
UIStateArchive::mutable_sheet_uistate_dictionary_entry() {
  // @@protoc_insertion_point(field_mutable_list:TN.UIStateArchive.sheet_uistate_dictionary_entry)
  return &sheet_uistate_dictionary_entry_;
}
inline const ::TN::SheetUIStateDictionaryEntryArchive& UIStateArchive::_internal_sheet_uistate_dictionary_entry(int index) const {
  return sheet_uistate_dictionary_entry_.Get(index);
}
inline const ::TN::SheetUIStateDictionaryEntryArchive& UIStateArchive::sheet_uistate_dictionary_entry(int index) const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.sheet_uistate_dictionary_entry)
  return _internal_sheet_uistate_dictionary_entry(index);
}
inline ::TN::SheetUIStateDictionaryEntryArchive* UIStateArchive::_internal_add_sheet_uistate_dictionary_entry() {
  return sheet_uistate_dictionary_entry_.Add();
}
inline ::TN::SheetUIStateDictionaryEntryArchive* UIStateArchive::add_sheet_uistate_dictionary_entry() {
  // @@protoc_insertion_point(field_add:TN.UIStateArchive.sheet_uistate_dictionary_entry)
  return _internal_add_sheet_uistate_dictionary_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >&
UIStateArchive::sheet_uistate_dictionary_entry() const {
  // @@protoc_insertion_point(field_list:TN.UIStateArchive.sheet_uistate_dictionary_entry)
  return sheet_uistate_dictionary_entry_;
}

// optional .TST.SelectionArchive table_selection = 4 [deprecated = true];
inline bool UIStateArchive::_internal_has_table_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_selection_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_table_selection() const {
  return _internal_has_table_selection();
}
inline const ::TST::SelectionArchive& UIStateArchive::_internal_table_selection() const {
  const ::TST::SelectionArchive* p = table_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& UIStateArchive::table_selection() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.table_selection)
  return _internal_table_selection();
}
inline void UIStateArchive::unsafe_arena_set_allocated_table_selection(
    ::TST::SelectionArchive* table_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_selection_);
  }
  table_selection_ = table_selection;
  if (table_selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UIStateArchive.table_selection)
}
inline ::TST::SelectionArchive* UIStateArchive::release_table_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = table_selection_;
  table_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::SelectionArchive* UIStateArchive::unsafe_arena_release_table_selection() {
  // @@protoc_insertion_point(field_release:TN.UIStateArchive.table_selection)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = table_selection_;
  table_selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* UIStateArchive::_internal_mutable_table_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (table_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArena());
    table_selection_ = p;
  }
  return table_selection_;
}
inline ::TST::SelectionArchive* UIStateArchive::mutable_table_selection() {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.table_selection)
  return _internal_mutable_table_selection();
}
inline void UIStateArchive::set_allocated_table_selection(::TST::SelectionArchive* table_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_selection_);
  }
  if (table_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_selection)->GetArena();
    if (message_arena != submessage_arena) {
      table_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_selection_ = table_selection;
  // @@protoc_insertion_point(field_set_allocated:TN.UIStateArchive.table_selection)
}

// optional uint32 editing_sheet_index = 5 [deprecated = true];
inline bool UIStateArchive::_internal_has_editing_sheet_index() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UIStateArchive::has_editing_sheet_index() const {
  return _internal_has_editing_sheet_index();
}
inline void UIStateArchive::clear_editing_sheet_index() {
  editing_sheet_index_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::_internal_editing_sheet_index() const {
  return editing_sheet_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::editing_sheet_index() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.editing_sheet_index)
  return _internal_editing_sheet_index();
}
inline void UIStateArchive::_internal_set_editing_sheet_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  editing_sheet_index_ = value;
}
inline void UIStateArchive::set_editing_sheet_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_editing_sheet_index(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.editing_sheet_index)
}

// optional int32 document_mode = 6;
inline bool UIStateArchive::_internal_has_document_mode() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UIStateArchive::has_document_mode() const {
  return _internal_has_document_mode();
}
inline void UIStateArchive::clear_document_mode() {
  document_mode_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UIStateArchive::_internal_document_mode() const {
  return document_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UIStateArchive::document_mode() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.document_mode)
  return _internal_document_mode();
}
inline void UIStateArchive::_internal_set_document_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  document_mode_ = value;
}
inline void UIStateArchive::set_document_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_document_mode(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.document_mode)
}

// repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7 [deprecated = true];
inline int UIStateArchive::_internal_edit_mode_sheet_uistate_dictionary_entry_size() const {
  return edit_mode_sheet_uistate_dictionary_entry_.size();
}
inline int UIStateArchive::edit_mode_sheet_uistate_dictionary_entry_size() const {
  return _internal_edit_mode_sheet_uistate_dictionary_entry_size();
}
inline void UIStateArchive::clear_edit_mode_sheet_uistate_dictionary_entry() {
  edit_mode_sheet_uistate_dictionary_entry_.Clear();
}
inline ::TN::SheetUIStateDictionaryEntryArchive* UIStateArchive::mutable_edit_mode_sheet_uistate_dictionary_entry(int index) {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.edit_mode_sheet_uistate_dictionary_entry)
  return edit_mode_sheet_uistate_dictionary_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >*
UIStateArchive::mutable_edit_mode_sheet_uistate_dictionary_entry() {
  // @@protoc_insertion_point(field_mutable_list:TN.UIStateArchive.edit_mode_sheet_uistate_dictionary_entry)
  return &edit_mode_sheet_uistate_dictionary_entry_;
}
inline const ::TN::SheetUIStateDictionaryEntryArchive& UIStateArchive::_internal_edit_mode_sheet_uistate_dictionary_entry(int index) const {
  return edit_mode_sheet_uistate_dictionary_entry_.Get(index);
}
inline const ::TN::SheetUIStateDictionaryEntryArchive& UIStateArchive::edit_mode_sheet_uistate_dictionary_entry(int index) const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.edit_mode_sheet_uistate_dictionary_entry)
  return _internal_edit_mode_sheet_uistate_dictionary_entry(index);
}
inline ::TN::SheetUIStateDictionaryEntryArchive* UIStateArchive::_internal_add_edit_mode_sheet_uistate_dictionary_entry() {
  return edit_mode_sheet_uistate_dictionary_entry_.Add();
}
inline ::TN::SheetUIStateDictionaryEntryArchive* UIStateArchive::add_edit_mode_sheet_uistate_dictionary_entry() {
  // @@protoc_insertion_point(field_add:TN.UIStateArchive.edit_mode_sheet_uistate_dictionary_entry)
  return _internal_add_edit_mode_sheet_uistate_dictionary_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetUIStateDictionaryEntryArchive >&
UIStateArchive::edit_mode_sheet_uistate_dictionary_entry() const {
  // @@protoc_insertion_point(field_list:TN.UIStateArchive.edit_mode_sheet_uistate_dictionary_entry)
  return edit_mode_sheet_uistate_dictionary_entry_;
}

// optional int32 table_editing_mode = 8 [deprecated = true];
inline bool UIStateArchive::_internal_has_table_editing_mode() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool UIStateArchive::has_table_editing_mode() const {
  return _internal_has_table_editing_mode();
}
inline void UIStateArchive::clear_table_editing_mode() {
  table_editing_mode_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UIStateArchive::_internal_table_editing_mode() const {
  return table_editing_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UIStateArchive::table_editing_mode() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.table_editing_mode)
  return _internal_table_editing_mode();
}
inline void UIStateArchive::_internal_set_table_editing_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  table_editing_mode_ = value;
}
inline void UIStateArchive::set_table_editing_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_editing_mode(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.table_editing_mode)
}

// optional uint32 form_focused_record_index = 9 [deprecated = true];
inline bool UIStateArchive::_internal_has_form_focused_record_index() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool UIStateArchive::has_form_focused_record_index() const {
  return _internal_has_form_focused_record_index();
}
inline void UIStateArchive::clear_form_focused_record_index() {
  form_focused_record_index_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::_internal_form_focused_record_index() const {
  return form_focused_record_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::form_focused_record_index() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.form_focused_record_index)
  return _internal_form_focused_record_index();
}
inline void UIStateArchive::_internal_set_form_focused_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  form_focused_record_index_ = value;
}
inline void UIStateArchive::set_form_focused_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_form_focused_record_index(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.form_focused_record_index)
}

// optional uint32 form_focused_field_index = 10 [deprecated = true];
inline bool UIStateArchive::_internal_has_form_focused_field_index() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool UIStateArchive::has_form_focused_field_index() const {
  return _internal_has_form_focused_field_index();
}
inline void UIStateArchive::clear_form_focused_field_index() {
  form_focused_field_index_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::_internal_form_focused_field_index() const {
  return form_focused_field_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::form_focused_field_index() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.form_focused_field_index)
  return _internal_form_focused_field_index();
}
inline void UIStateArchive::_internal_set_form_focused_field_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  form_focused_field_index_ = value;
}
inline void UIStateArchive::set_form_focused_field_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_form_focused_field_index(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.form_focused_field_index)
}

// optional bool in_chart_mode = 11;
inline bool UIStateArchive::_internal_has_in_chart_mode() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool UIStateArchive::has_in_chart_mode() const {
  return _internal_has_in_chart_mode();
}
inline void UIStateArchive::clear_in_chart_mode() {
  in_chart_mode_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool UIStateArchive::_internal_in_chart_mode() const {
  return in_chart_mode_;
}
inline bool UIStateArchive::in_chart_mode() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.in_chart_mode)
  return _internal_in_chart_mode();
}
inline void UIStateArchive::_internal_set_in_chart_mode(bool value) {
  _has_bits_[0] |= 0x00010000u;
  in_chart_mode_ = value;
}
inline void UIStateArchive::set_in_chart_mode(bool value) {
  _internal_set_in_chart_mode(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.in_chart_mode)
}

// optional .TN.ChartSelectionArchive chart_selection = 12 [deprecated = true];
inline bool UIStateArchive::_internal_has_chart_selection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || chart_selection_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_chart_selection() const {
  return _internal_has_chart_selection();
}
inline void UIStateArchive::clear_chart_selection() {
  if (chart_selection_ != nullptr) chart_selection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TN::ChartSelectionArchive& UIStateArchive::_internal_chart_selection() const {
  const ::TN::ChartSelectionArchive* p = chart_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::ChartSelectionArchive&>(
      ::TN::_ChartSelectionArchive_default_instance_);
}
inline const ::TN::ChartSelectionArchive& UIStateArchive::chart_selection() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.chart_selection)
  return _internal_chart_selection();
}
inline void UIStateArchive::unsafe_arena_set_allocated_chart_selection(
    ::TN::ChartSelectionArchive* chart_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_selection_);
  }
  chart_selection_ = chart_selection;
  if (chart_selection) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UIStateArchive.chart_selection)
}
inline ::TN::ChartSelectionArchive* UIStateArchive::release_chart_selection() {
  _has_bits_[0] &= ~0x00000002u;
  ::TN::ChartSelectionArchive* temp = chart_selection_;
  chart_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::ChartSelectionArchive* UIStateArchive::unsafe_arena_release_chart_selection() {
  // @@protoc_insertion_point(field_release:TN.UIStateArchive.chart_selection)
  _has_bits_[0] &= ~0x00000002u;
  ::TN::ChartSelectionArchive* temp = chart_selection_;
  chart_selection_ = nullptr;
  return temp;
}
inline ::TN::ChartSelectionArchive* UIStateArchive::_internal_mutable_chart_selection() {
  _has_bits_[0] |= 0x00000002u;
  if (chart_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::ChartSelectionArchive>(GetArena());
    chart_selection_ = p;
  }
  return chart_selection_;
}
inline ::TN::ChartSelectionArchive* UIStateArchive::mutable_chart_selection() {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.chart_selection)
  return _internal_mutable_chart_selection();
}
inline void UIStateArchive::set_allocated_chart_selection(::TN::ChartSelectionArchive* chart_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chart_selection_;
  }
  if (chart_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chart_selection);
    if (message_arena != submessage_arena) {
      chart_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chart_selection_ = chart_selection;
  // @@protoc_insertion_point(field_set_allocated:TN.UIStateArchive.chart_selection)
}

// optional .TSP.Reference sheet_selection = 13 [deprecated = true];
inline bool UIStateArchive::_internal_has_sheet_selection() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || sheet_selection_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_sheet_selection() const {
  return _internal_has_sheet_selection();
}
inline const ::TSP::Reference& UIStateArchive::_internal_sheet_selection() const {
  const ::TSP::Reference* p = sheet_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::sheet_selection() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.sheet_selection)
  return _internal_sheet_selection();
}
inline void UIStateArchive::unsafe_arena_set_allocated_sheet_selection(
    ::TSP::Reference* sheet_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_selection_);
  }
  sheet_selection_ = sheet_selection;
  if (sheet_selection) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UIStateArchive.sheet_selection)
}
inline ::TSP::Reference* UIStateArchive::release_sheet_selection() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = sheet_selection_;
  sheet_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_sheet_selection() {
  // @@protoc_insertion_point(field_release:TN.UIStateArchive.sheet_selection)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = sheet_selection_;
  sheet_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_sheet_selection() {
  _has_bits_[0] |= 0x00000004u;
  if (sheet_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    sheet_selection_ = p;
  }
  return sheet_selection_;
}
inline ::TSP::Reference* UIStateArchive::mutable_sheet_selection() {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.sheet_selection)
  return _internal_mutable_sheet_selection();
}
inline void UIStateArchive::set_allocated_sheet_selection(::TSP::Reference* sheet_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_selection_);
  }
  if (sheet_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_selection)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sheet_selection_ = sheet_selection;
  // @@protoc_insertion_point(field_set_allocated:TN.UIStateArchive.sheet_selection)
}

// optional bool inspector_pane_visible = 14 [default = true];
inline bool UIStateArchive::_internal_has_inspector_pane_visible() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_inspector_pane_visible() const {
  return _internal_has_inspector_pane_visible();
}
inline void UIStateArchive::clear_inspector_pane_visible() {
  inspector_pane_visible_ = true;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool UIStateArchive::_internal_inspector_pane_visible() const {
  return inspector_pane_visible_;
}
inline bool UIStateArchive::inspector_pane_visible() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.inspector_pane_visible)
  return _internal_inspector_pane_visible();
}
inline void UIStateArchive::_internal_set_inspector_pane_visible(bool value) {
  _has_bits_[0] |= 0x01000000u;
  inspector_pane_visible_ = value;
}
inline void UIStateArchive::set_inspector_pane_visible(bool value) {
  _internal_set_inspector_pane_visible(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.inspector_pane_visible)
}

// optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
inline bool UIStateArchive::_internal_has_inspector_pane_view_mode() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool UIStateArchive::has_inspector_pane_view_mode() const {
  return _internal_has_inspector_pane_view_mode();
}
inline void UIStateArchive::clear_inspector_pane_view_mode() {
  inspector_pane_view_mode_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::TN::UIStateArchive_InspectorPaneViewMode UIStateArchive::_internal_inspector_pane_view_mode() const {
  return static_cast< ::TN::UIStateArchive_InspectorPaneViewMode >(inspector_pane_view_mode_);
}
inline ::TN::UIStateArchive_InspectorPaneViewMode UIStateArchive::inspector_pane_view_mode() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.inspector_pane_view_mode)
  return _internal_inspector_pane_view_mode();
}
inline void UIStateArchive::_internal_set_inspector_pane_view_mode(::TN::UIStateArchive_InspectorPaneViewMode value) {
  assert(::TN::UIStateArchive_InspectorPaneViewMode_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  inspector_pane_view_mode_ = value;
}
inline void UIStateArchive::set_inspector_pane_view_mode(::TN::UIStateArchive_InspectorPaneViewMode value) {
  _internal_set_inspector_pane_view_mode(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.inspector_pane_view_mode)
}

// repeated uint32 selected_quick_calc_functions = 16;
inline int UIStateArchive::_internal_selected_quick_calc_functions_size() const {
  return selected_quick_calc_functions_.size();
}
inline int UIStateArchive::selected_quick_calc_functions_size() const {
  return _internal_selected_quick_calc_functions_size();
}
inline void UIStateArchive::clear_selected_quick_calc_functions() {
  selected_quick_calc_functions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::_internal_selected_quick_calc_functions(int index) const {
  return selected_quick_calc_functions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::selected_quick_calc_functions(int index) const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.selected_quick_calc_functions)
  return _internal_selected_quick_calc_functions(index);
}
inline void UIStateArchive::set_selected_quick_calc_functions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  selected_quick_calc_functions_.Set(index, value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.selected_quick_calc_functions)
}
inline void UIStateArchive::_internal_add_selected_quick_calc_functions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  selected_quick_calc_functions_.Add(value);
}
inline void UIStateArchive::add_selected_quick_calc_functions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_selected_quick_calc_functions(value);
  // @@protoc_insertion_point(field_add:TN.UIStateArchive.selected_quick_calc_functions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UIStateArchive::_internal_selected_quick_calc_functions() const {
  return selected_quick_calc_functions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UIStateArchive::selected_quick_calc_functions() const {
  // @@protoc_insertion_point(field_list:TN.UIStateArchive.selected_quick_calc_functions)
  return _internal_selected_quick_calc_functions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UIStateArchive::_internal_mutable_selected_quick_calc_functions() {
  return &selected_quick_calc_functions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UIStateArchive::mutable_selected_quick_calc_functions() {
  // @@protoc_insertion_point(field_mutable_list:TN.UIStateArchive.selected_quick_calc_functions)
  return _internal_mutable_selected_quick_calc_functions();
}

// optional bool removed_all_quick_calc_functions = 17;
inline bool UIStateArchive::_internal_has_removed_all_quick_calc_functions() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool UIStateArchive::has_removed_all_quick_calc_functions() const {
  return _internal_has_removed_all_quick_calc_functions();
}
inline void UIStateArchive::clear_removed_all_quick_calc_functions() {
  removed_all_quick_calc_functions_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool UIStateArchive::_internal_removed_all_quick_calc_functions() const {
  return removed_all_quick_calc_functions_;
}
inline bool UIStateArchive::removed_all_quick_calc_functions() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.removed_all_quick_calc_functions)
  return _internal_removed_all_quick_calc_functions();
}
inline void UIStateArchive::_internal_set_removed_all_quick_calc_functions(bool value) {
  _has_bits_[0] |= 0x00020000u;
  removed_all_quick_calc_functions_ = value;
}
inline void UIStateArchive::set_removed_all_quick_calc_functions(bool value) {
  _internal_set_removed_all_quick_calc_functions(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.removed_all_quick_calc_functions)
}

// optional bool show_canvas_guides = 18;
inline bool UIStateArchive::_internal_has_show_canvas_guides() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool UIStateArchive::has_show_canvas_guides() const {
  return _internal_has_show_canvas_guides();
}
inline void UIStateArchive::clear_show_canvas_guides() {
  show_canvas_guides_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool UIStateArchive::_internal_show_canvas_guides() const {
  return show_canvas_guides_;
}
inline bool UIStateArchive::show_canvas_guides() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.show_canvas_guides)
  return _internal_show_canvas_guides();
}
inline void UIStateArchive::_internal_set_show_canvas_guides(bool value) {
  _has_bits_[0] |= 0x00040000u;
  show_canvas_guides_ = value;
}
inline void UIStateArchive::set_show_canvas_guides(bool value) {
  _internal_set_show_canvas_guides(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.show_canvas_guides)
}

// optional bool shows_comments = 19;
inline bool UIStateArchive::_internal_has_shows_comments() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_comments() const {
  return _internal_has_shows_comments();
}
inline void UIStateArchive::clear_shows_comments() {
  shows_comments_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool UIStateArchive::_internal_shows_comments() const {
  return shows_comments_;
}
inline bool UIStateArchive::shows_comments() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.shows_comments)
  return _internal_shows_comments();
}
inline void UIStateArchive::_internal_set_shows_comments(bool value) {
  _has_bits_[0] |= 0x00080000u;
  shows_comments_ = value;
}
inline void UIStateArchive::set_shows_comments(bool value) {
  _internal_set_shows_comments(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.shows_comments)
}

// optional .TSP.Point desktop_window_origin = 20;
inline bool UIStateArchive::_internal_has_desktop_window_origin() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || desktop_window_origin_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_desktop_window_origin() const {
  return _internal_has_desktop_window_origin();
}
inline const ::TSP::Point& UIStateArchive::_internal_desktop_window_origin() const {
  const ::TSP::Point* p = desktop_window_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::desktop_window_origin() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.desktop_window_origin)
  return _internal_desktop_window_origin();
}
inline void UIStateArchive::unsafe_arena_set_allocated_desktop_window_origin(
    ::TSP::Point* desktop_window_origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_window_origin_);
  }
  desktop_window_origin_ = desktop_window_origin;
  if (desktop_window_origin) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UIStateArchive.desktop_window_origin)
}
inline ::TSP::Point* UIStateArchive::release_desktop_window_origin() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Point* temp = desktop_window_origin_;
  desktop_window_origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_desktop_window_origin() {
  // @@protoc_insertion_point(field_release:TN.UIStateArchive.desktop_window_origin)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Point* temp = desktop_window_origin_;
  desktop_window_origin_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_desktop_window_origin() {
  _has_bits_[0] |= 0x00000008u;
  if (desktop_window_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArena());
    desktop_window_origin_ = p;
  }
  return desktop_window_origin_;
}
inline ::TSP::Point* UIStateArchive::mutable_desktop_window_origin() {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.desktop_window_origin)
  return _internal_mutable_desktop_window_origin();
}
inline void UIStateArchive::set_allocated_desktop_window_origin(::TSP::Point* desktop_window_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_window_origin_);
  }
  if (desktop_window_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_window_origin)->GetArena();
    if (message_arena != submessage_arena) {
      desktop_window_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desktop_window_origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  desktop_window_origin_ = desktop_window_origin;
  // @@protoc_insertion_point(field_set_allocated:TN.UIStateArchive.desktop_window_origin)
}

// optional .TSP.Size desktop_window_size = 21;
inline bool UIStateArchive::_internal_has_desktop_window_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || desktop_window_size_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_desktop_window_size() const {
  return _internal_has_desktop_window_size();
}
inline const ::TSP::Size& UIStateArchive::_internal_desktop_window_size() const {
  const ::TSP::Size* p = desktop_window_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& UIStateArchive::desktop_window_size() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.desktop_window_size)
  return _internal_desktop_window_size();
}
inline void UIStateArchive::unsafe_arena_set_allocated_desktop_window_size(
    ::TSP::Size* desktop_window_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_window_size_);
  }
  desktop_window_size_ = desktop_window_size;
  if (desktop_window_size) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UIStateArchive.desktop_window_size)
}
inline ::TSP::Size* UIStateArchive::release_desktop_window_size() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Size* temp = desktop_window_size_;
  desktop_window_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* UIStateArchive::unsafe_arena_release_desktop_window_size() {
  // @@protoc_insertion_point(field_release:TN.UIStateArchive.desktop_window_size)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Size* temp = desktop_window_size_;
  desktop_window_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* UIStateArchive::_internal_mutable_desktop_window_size() {
  _has_bits_[0] |= 0x00000010u;
  if (desktop_window_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    desktop_window_size_ = p;
  }
  return desktop_window_size_;
}
inline ::TSP::Size* UIStateArchive::mutable_desktop_window_size() {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.desktop_window_size)
  return _internal_mutable_desktop_window_size();
}
inline void UIStateArchive::set_allocated_desktop_window_size(::TSP::Size* desktop_window_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_window_size_);
  }
  if (desktop_window_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_window_size)->GetArena();
    if (message_arena != submessage_arena) {
      desktop_window_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desktop_window_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  desktop_window_size_ = desktop_window_size;
  // @@protoc_insertion_point(field_set_allocated:TN.UIStateArchive.desktop_window_size)
}

// optional .TSP.Size desktop_screen_size = 22;
inline bool UIStateArchive::_internal_has_desktop_screen_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || desktop_screen_size_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_desktop_screen_size() const {
  return _internal_has_desktop_screen_size();
}
inline const ::TSP::Size& UIStateArchive::_internal_desktop_screen_size() const {
  const ::TSP::Size* p = desktop_screen_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& UIStateArchive::desktop_screen_size() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.desktop_screen_size)
  return _internal_desktop_screen_size();
}
inline void UIStateArchive::unsafe_arena_set_allocated_desktop_screen_size(
    ::TSP::Size* desktop_screen_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_screen_size_);
  }
  desktop_screen_size_ = desktop_screen_size;
  if (desktop_screen_size) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UIStateArchive.desktop_screen_size)
}
inline ::TSP::Size* UIStateArchive::release_desktop_screen_size() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Size* temp = desktop_screen_size_;
  desktop_screen_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* UIStateArchive::unsafe_arena_release_desktop_screen_size() {
  // @@protoc_insertion_point(field_release:TN.UIStateArchive.desktop_screen_size)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Size* temp = desktop_screen_size_;
  desktop_screen_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* UIStateArchive::_internal_mutable_desktop_screen_size() {
  _has_bits_[0] |= 0x00000020u;
  if (desktop_screen_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    desktop_screen_size_ = p;
  }
  return desktop_screen_size_;
}
inline ::TSP::Size* UIStateArchive::mutable_desktop_screen_size() {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.desktop_screen_size)
  return _internal_mutable_desktop_screen_size();
}
inline void UIStateArchive::set_allocated_desktop_screen_size(::TSP::Size* desktop_screen_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_screen_size_);
  }
  if (desktop_screen_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desktop_screen_size)->GetArena();
    if (message_arena != submessage_arena) {
      desktop_screen_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desktop_screen_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  desktop_screen_size_ = desktop_screen_size;
  // @@protoc_insertion_point(field_set_allocated:TN.UIStateArchive.desktop_screen_size)
}

// repeated .TSCH.ChartUIState chart_ui_state = 23;
inline int UIStateArchive::_internal_chart_ui_state_size() const {
  return chart_ui_state_.size();
}
inline int UIStateArchive::chart_ui_state_size() const {
  return _internal_chart_ui_state_size();
}
inline ::TSCH::ChartUIState* UIStateArchive::mutable_chart_ui_state(int index) {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.chart_ui_state)
  return chart_ui_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >*
UIStateArchive::mutable_chart_ui_state() {
  // @@protoc_insertion_point(field_mutable_list:TN.UIStateArchive.chart_ui_state)
  return &chart_ui_state_;
}
inline const ::TSCH::ChartUIState& UIStateArchive::_internal_chart_ui_state(int index) const {
  return chart_ui_state_.Get(index);
}
inline const ::TSCH::ChartUIState& UIStateArchive::chart_ui_state(int index) const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.chart_ui_state)
  return _internal_chart_ui_state(index);
}
inline ::TSCH::ChartUIState* UIStateArchive::_internal_add_chart_ui_state() {
  return chart_ui_state_.Add();
}
inline ::TSCH::ChartUIState* UIStateArchive::add_chart_ui_state() {
  // @@protoc_insertion_point(field_add:TN.UIStateArchive.chart_ui_state)
  return _internal_add_chart_ui_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >&
UIStateArchive::chart_ui_state() const {
  // @@protoc_insertion_point(field_list:TN.UIStateArchive.chart_ui_state)
  return chart_ui_state_;
}

// optional .TSK.SelectionPathArchive selection_path = 24;
inline bool UIStateArchive::_internal_has_selection_path() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || selection_path_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_selection_path() const {
  return _internal_has_selection_path();
}
inline const ::TSK::SelectionPathArchive& UIStateArchive::_internal_selection_path() const {
  const ::TSK::SelectionPathArchive* p = selection_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::SelectionPathArchive&>(
      ::TSK::_SelectionPathArchive_default_instance_);
}
inline const ::TSK::SelectionPathArchive& UIStateArchive::selection_path() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.selection_path)
  return _internal_selection_path();
}
inline void UIStateArchive::unsafe_arena_set_allocated_selection_path(
    ::TSK::SelectionPathArchive* selection_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_);
  }
  selection_path_ = selection_path;
  if (selection_path) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UIStateArchive.selection_path)
}
inline ::TSK::SelectionPathArchive* UIStateArchive::release_selection_path() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::SelectionPathArchive* temp = selection_path_;
  selection_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::unsafe_arena_release_selection_path() {
  // @@protoc_insertion_point(field_release:TN.UIStateArchive.selection_path)
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::SelectionPathArchive* temp = selection_path_;
  selection_path_ = nullptr;
  return temp;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::_internal_mutable_selection_path() {
  _has_bits_[0] |= 0x00000040u;
  if (selection_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::SelectionPathArchive>(GetArena());
    selection_path_ = p;
  }
  return selection_path_;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::mutable_selection_path() {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.selection_path)
  return _internal_mutable_selection_path();
}
inline void UIStateArchive::set_allocated_selection_path(::TSK::SelectionPathArchive* selection_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_);
  }
  if (selection_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path)->GetArena();
    if (message_arena != submessage_arena) {
      selection_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  selection_path_ = selection_path;
  // @@protoc_insertion_point(field_set_allocated:TN.UIStateArchive.selection_path)
}

// optional bool inspector_pane_autohidden = 25;
inline bool UIStateArchive::_internal_has_inspector_pane_autohidden() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool UIStateArchive::has_inspector_pane_autohidden() const {
  return _internal_has_inspector_pane_autohidden();
}
inline void UIStateArchive::clear_inspector_pane_autohidden() {
  inspector_pane_autohidden_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool UIStateArchive::_internal_inspector_pane_autohidden() const {
  return inspector_pane_autohidden_;
}
inline bool UIStateArchive::inspector_pane_autohidden() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.inspector_pane_autohidden)
  return _internal_inspector_pane_autohidden();
}
inline void UIStateArchive::_internal_set_inspector_pane_autohidden(bool value) {
  _has_bits_[0] |= 0x00100000u;
  inspector_pane_autohidden_ = value;
}
inline void UIStateArchive::set_inspector_pane_autohidden(bool value) {
  _internal_set_inspector_pane_autohidden(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.inspector_pane_autohidden)
}

// optional bool shows_sidebar = 26 [deprecated = true];
inline bool UIStateArchive::_internal_has_shows_sidebar() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_sidebar() const {
  return _internal_has_shows_sidebar();
}
inline void UIStateArchive::clear_shows_sidebar() {
  shows_sidebar_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool UIStateArchive::_internal_shows_sidebar() const {
  return shows_sidebar_;
}
inline bool UIStateArchive::shows_sidebar() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.shows_sidebar)
  return _internal_shows_sidebar();
}
inline void UIStateArchive::_internal_set_shows_sidebar(bool value) {
  _has_bits_[0] |= 0x00200000u;
  shows_sidebar_ = value;
}
inline void UIStateArchive::set_shows_sidebar(bool value) {
  _internal_set_shows_sidebar(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.shows_sidebar)
}

// optional bool shows_rulers = 27;
inline bool UIStateArchive::_internal_has_shows_rulers() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_rulers() const {
  return _internal_has_shows_rulers();
}
inline void UIStateArchive::clear_shows_rulers() {
  shows_rulers_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool UIStateArchive::_internal_shows_rulers() const {
  return shows_rulers_;
}
inline bool UIStateArchive::shows_rulers() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.shows_rulers)
  return _internal_shows_rulers();
}
inline void UIStateArchive::_internal_set_shows_rulers(bool value) {
  _has_bits_[0] |= 0x00400000u;
  shows_rulers_ = value;
}
inline void UIStateArchive::set_shows_rulers(bool value) {
  _internal_set_shows_rulers(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.shows_rulers)
}

// repeated .TN.UUIDSheetUIStateDictionaryArchive uuid_sheet_uistate_dictionary = 28;
inline int UIStateArchive::_internal_uuid_sheet_uistate_dictionary_size() const {
  return uuid_sheet_uistate_dictionary_.size();
}
inline int UIStateArchive::uuid_sheet_uistate_dictionary_size() const {
  return _internal_uuid_sheet_uistate_dictionary_size();
}
inline void UIStateArchive::clear_uuid_sheet_uistate_dictionary() {
  uuid_sheet_uistate_dictionary_.Clear();
}
inline ::TN::UUIDSheetUIStateDictionaryArchive* UIStateArchive::mutable_uuid_sheet_uistate_dictionary(int index) {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.uuid_sheet_uistate_dictionary)
  return uuid_sheet_uistate_dictionary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >*
UIStateArchive::mutable_uuid_sheet_uistate_dictionary() {
  // @@protoc_insertion_point(field_mutable_list:TN.UIStateArchive.uuid_sheet_uistate_dictionary)
  return &uuid_sheet_uistate_dictionary_;
}
inline const ::TN::UUIDSheetUIStateDictionaryArchive& UIStateArchive::_internal_uuid_sheet_uistate_dictionary(int index) const {
  return uuid_sheet_uistate_dictionary_.Get(index);
}
inline const ::TN::UUIDSheetUIStateDictionaryArchive& UIStateArchive::uuid_sheet_uistate_dictionary(int index) const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.uuid_sheet_uistate_dictionary)
  return _internal_uuid_sheet_uistate_dictionary(index);
}
inline ::TN::UUIDSheetUIStateDictionaryArchive* UIStateArchive::_internal_add_uuid_sheet_uistate_dictionary() {
  return uuid_sheet_uistate_dictionary_.Add();
}
inline ::TN::UUIDSheetUIStateDictionaryArchive* UIStateArchive::add_uuid_sheet_uistate_dictionary() {
  // @@protoc_insertion_point(field_add:TN.UIStateArchive.uuid_sheet_uistate_dictionary)
  return _internal_add_uuid_sheet_uistate_dictionary();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >&
UIStateArchive::uuid_sheet_uistate_dictionary() const {
  // @@protoc_insertion_point(field_list:TN.UIStateArchive.uuid_sheet_uistate_dictionary)
  return uuid_sheet_uistate_dictionary_;
}

// optional .TSP.Reference freehand_drawing_toolkit_state = 29;
inline bool UIStateArchive::_internal_has_freehand_drawing_toolkit_state() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || freehand_drawing_toolkit_state_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_freehand_drawing_toolkit_state() const {
  return _internal_has_freehand_drawing_toolkit_state();
}
inline const ::TSP::Reference& UIStateArchive::_internal_freehand_drawing_toolkit_state() const {
  const ::TSP::Reference* p = freehand_drawing_toolkit_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::freehand_drawing_toolkit_state() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.freehand_drawing_toolkit_state)
  return _internal_freehand_drawing_toolkit_state();
}
inline void UIStateArchive::unsafe_arena_set_allocated_freehand_drawing_toolkit_state(
    ::TSP::Reference* freehand_drawing_toolkit_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freehand_drawing_toolkit_state_);
  }
  freehand_drawing_toolkit_state_ = freehand_drawing_toolkit_state;
  if (freehand_drawing_toolkit_state) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UIStateArchive.freehand_drawing_toolkit_state)
}
inline ::TSP::Reference* UIStateArchive::release_freehand_drawing_toolkit_state() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = freehand_drawing_toolkit_state_;
  freehand_drawing_toolkit_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_freehand_drawing_toolkit_state() {
  // @@protoc_insertion_point(field_release:TN.UIStateArchive.freehand_drawing_toolkit_state)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = freehand_drawing_toolkit_state_;
  freehand_drawing_toolkit_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_freehand_drawing_toolkit_state() {
  _has_bits_[0] |= 0x00000080u;
  if (freehand_drawing_toolkit_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    freehand_drawing_toolkit_state_ = p;
  }
  return freehand_drawing_toolkit_state_;
}
inline ::TSP::Reference* UIStateArchive::mutable_freehand_drawing_toolkit_state() {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.freehand_drawing_toolkit_state)
  return _internal_mutable_freehand_drawing_toolkit_state();
}
inline void UIStateArchive::set_allocated_freehand_drawing_toolkit_state(::TSP::Reference* freehand_drawing_toolkit_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(freehand_drawing_toolkit_state_);
  }
  if (freehand_drawing_toolkit_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freehand_drawing_toolkit_state)->GetArena();
    if (message_arena != submessage_arena) {
      freehand_drawing_toolkit_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freehand_drawing_toolkit_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  freehand_drawing_toolkit_state_ = freehand_drawing_toolkit_state;
  // @@protoc_insertion_point(field_set_allocated:TN.UIStateArchive.freehand_drawing_toolkit_state)
}

// optional .TSP.Reference selection_path_transformer = 30;
inline bool UIStateArchive::_internal_has_selection_path_transformer() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || selection_path_transformer_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_selection_path_transformer() const {
  return _internal_has_selection_path_transformer();
}
inline const ::TSP::Reference& UIStateArchive::_internal_selection_path_transformer() const {
  const ::TSP::Reference* p = selection_path_transformer_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::selection_path_transformer() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.selection_path_transformer)
  return _internal_selection_path_transformer();
}
inline void UIStateArchive::unsafe_arena_set_allocated_selection_path_transformer(
    ::TSP::Reference* selection_path_transformer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer_);
  }
  selection_path_transformer_ = selection_path_transformer;
  if (selection_path_transformer) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UIStateArchive.selection_path_transformer)
}
inline ::TSP::Reference* UIStateArchive::release_selection_path_transformer() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = selection_path_transformer_;
  selection_path_transformer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_selection_path_transformer() {
  // @@protoc_insertion_point(field_release:TN.UIStateArchive.selection_path_transformer)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = selection_path_transformer_;
  selection_path_transformer_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_selection_path_transformer() {
  _has_bits_[0] |= 0x00000100u;
  if (selection_path_transformer_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    selection_path_transformer_ = p;
  }
  return selection_path_transformer_;
}
inline ::TSP::Reference* UIStateArchive::mutable_selection_path_transformer() {
  // @@protoc_insertion_point(field_mutable:TN.UIStateArchive.selection_path_transformer)
  return _internal_mutable_selection_path_transformer();
}
inline void UIStateArchive::set_allocated_selection_path_transformer(::TSP::Reference* selection_path_transformer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer_);
  }
  if (selection_path_transformer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer)->GetArena();
    if (message_arena != submessage_arena) {
      selection_path_transformer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_path_transformer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  selection_path_transformer_ = selection_path_transformer;
  // @@protoc_insertion_point(field_set_allocated:TN.UIStateArchive.selection_path_transformer)
}

// optional bool editing_disabled = 31;
inline bool UIStateArchive::_internal_has_editing_disabled() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool UIStateArchive::has_editing_disabled() const {
  return _internal_has_editing_disabled();
}
inline void UIStateArchive::clear_editing_disabled() {
  editing_disabled_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool UIStateArchive::_internal_editing_disabled() const {
  return editing_disabled_;
}
inline bool UIStateArchive::editing_disabled() const {
  // @@protoc_insertion_point(field_get:TN.UIStateArchive.editing_disabled)
  return _internal_editing_disabled();
}
inline void UIStateArchive::_internal_set_editing_disabled(bool value) {
  _has_bits_[0] |= 0x00800000u;
  editing_disabled_ = value;
}
inline void UIStateArchive::set_editing_disabled(bool value) {
  _internal_set_editing_disabled(value);
  // @@protoc_insertion_point(field_set:TN.UIStateArchive.editing_disabled)
}

// -------------------------------------------------------------------

// SheetSelectionArchive

// optional .TSP.Reference sheet = 1;
inline bool SheetSelectionArchive::_internal_has_sheet() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_ != nullptr);
  return value;
}
inline bool SheetSelectionArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& SheetSelectionArchive::_internal_sheet() const {
  const ::TSP::Reference* p = sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SheetSelectionArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.SheetSelectionArchive.sheet)
  return _internal_sheet();
}
inline void SheetSelectionArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  sheet_ = sheet;
  if (sheet) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetSelectionArchive.sheet)
}
inline ::TSP::Reference* SheetSelectionArchive::release_sheet() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SheetSelectionArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.SheetSelectionArchive.sheet)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SheetSelectionArchive::_internal_mutable_sheet() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    sheet_ = p;
  }
  return sheet_;
}
inline ::TSP::Reference* SheetSelectionArchive::mutable_sheet() {
  // @@protoc_insertion_point(field_mutable:TN.SheetSelectionArchive.sheet)
  return _internal_mutable_sheet();
}
inline void SheetSelectionArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet)->GetArena();
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetSelectionArchive.sheet)
}

// optional bool paginated = 2;
inline bool SheetSelectionArchive::_internal_has_paginated() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SheetSelectionArchive::has_paginated() const {
  return _internal_has_paginated();
}
inline void SheetSelectionArchive::clear_paginated() {
  paginated_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SheetSelectionArchive::_internal_paginated() const {
  return paginated_;
}
inline bool SheetSelectionArchive::paginated() const {
  // @@protoc_insertion_point(field_get:TN.SheetSelectionArchive.paginated)
  return _internal_paginated();
}
inline void SheetSelectionArchive::_internal_set_paginated(bool value) {
  _has_bits_[0] |= 0x00000002u;
  paginated_ = value;
}
inline void SheetSelectionArchive::set_paginated(bool value) {
  _internal_set_paginated(value);
  // @@protoc_insertion_point(field_set:TN.SheetSelectionArchive.paginated)
}

// -------------------------------------------------------------------

// FormSelectionArchive

// required uint32 record_index = 1;
inline bool FormSelectionArchive::_internal_has_record_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormSelectionArchive::has_record_index() const {
  return _internal_has_record_index();
}
inline void FormSelectionArchive::clear_record_index() {
  record_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormSelectionArchive::_internal_record_index() const {
  return record_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormSelectionArchive::record_index() const {
  // @@protoc_insertion_point(field_get:TN.FormSelectionArchive.record_index)
  return _internal_record_index();
}
inline void FormSelectionArchive::_internal_set_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  record_index_ = value;
}
inline void FormSelectionArchive::set_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_record_index(value);
  // @@protoc_insertion_point(field_set:TN.FormSelectionArchive.record_index)
}

// required uint32 field_index = 2;
inline bool FormSelectionArchive::_internal_has_field_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormSelectionArchive::has_field_index() const {
  return _internal_has_field_index();
}
inline void FormSelectionArchive::clear_field_index() {
  field_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormSelectionArchive::_internal_field_index() const {
  return field_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormSelectionArchive::field_index() const {
  // @@protoc_insertion_point(field_get:TN.FormSelectionArchive.field_index)
  return _internal_field_index();
}
inline void FormSelectionArchive::_internal_set_field_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  field_index_ = value;
}
inline void FormSelectionArchive::set_field_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_field_index(value);
  // @@protoc_insertion_point(field_set:TN.FormSelectionArchive.field_index)
}

// -------------------------------------------------------------------

// FormBuilderSelectionArchive

// optional uint32 viewing_record_index = 1;
inline bool FormBuilderSelectionArchive::_internal_has_viewing_record_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormBuilderSelectionArchive::has_viewing_record_index() const {
  return _internal_has_viewing_record_index();
}
inline void FormBuilderSelectionArchive::clear_viewing_record_index() {
  viewing_record_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormBuilderSelectionArchive::_internal_viewing_record_index() const {
  return viewing_record_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormBuilderSelectionArchive::viewing_record_index() const {
  // @@protoc_insertion_point(field_get:TN.FormBuilderSelectionArchive.viewing_record_index)
  return _internal_viewing_record_index();
}
inline void FormBuilderSelectionArchive::_internal_set_viewing_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  viewing_record_index_ = value;
}
inline void FormBuilderSelectionArchive::set_viewing_record_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_viewing_record_index(value);
  // @@protoc_insertion_point(field_set:TN.FormBuilderSelectionArchive.viewing_record_index)
}

// -------------------------------------------------------------------

// FormTableChooserSelectionArchive

// -------------------------------------------------------------------

// UndoRedoStateArchive

// required .TN.UIStateArchive ui_state = 1;
inline bool UndoRedoStateArchive::_internal_has_ui_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ui_state_ != nullptr);
  return value;
}
inline bool UndoRedoStateArchive::has_ui_state() const {
  return _internal_has_ui_state();
}
inline void UndoRedoStateArchive::clear_ui_state() {
  if (ui_state_ != nullptr) ui_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TN::UIStateArchive& UndoRedoStateArchive::_internal_ui_state() const {
  const ::TN::UIStateArchive* p = ui_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::UIStateArchive&>(
      ::TN::_UIStateArchive_default_instance_);
}
inline const ::TN::UIStateArchive& UndoRedoStateArchive::ui_state() const {
  // @@protoc_insertion_point(field_get:TN.UndoRedoStateArchive.ui_state)
  return _internal_ui_state();
}
inline void UndoRedoStateArchive::unsafe_arena_set_allocated_ui_state(
    ::TN::UIStateArchive* ui_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ui_state_);
  }
  ui_state_ = ui_state;
  if (ui_state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.UndoRedoStateArchive.ui_state)
}
inline ::TN::UIStateArchive* UndoRedoStateArchive::release_ui_state() {
  _has_bits_[0] &= ~0x00000001u;
  ::TN::UIStateArchive* temp = ui_state_;
  ui_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::UIStateArchive* UndoRedoStateArchive::unsafe_arena_release_ui_state() {
  // @@protoc_insertion_point(field_release:TN.UndoRedoStateArchive.ui_state)
  _has_bits_[0] &= ~0x00000001u;
  ::TN::UIStateArchive* temp = ui_state_;
  ui_state_ = nullptr;
  return temp;
}
inline ::TN::UIStateArchive* UndoRedoStateArchive::_internal_mutable_ui_state() {
  _has_bits_[0] |= 0x00000001u;
  if (ui_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::UIStateArchive>(GetArena());
    ui_state_ = p;
  }
  return ui_state_;
}
inline ::TN::UIStateArchive* UndoRedoStateArchive::mutable_ui_state() {
  // @@protoc_insertion_point(field_mutable:TN.UndoRedoStateArchive.ui_state)
  return _internal_mutable_ui_state();
}
inline void UndoRedoStateArchive::set_allocated_ui_state(::TN::UIStateArchive* ui_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ui_state_;
  }
  if (ui_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ui_state);
    if (message_arena != submessage_arena) {
      ui_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ui_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ui_state_ = ui_state;
  // @@protoc_insertion_point(field_set_allocated:TN.UndoRedoStateArchive.ui_state)
}

// -------------------------------------------------------------------

// DocumentArchive

// repeated .TSP.Reference sheets = 1;
inline int DocumentArchive::_internal_sheets_size() const {
  return sheets_.size();
}
inline int DocumentArchive::sheets_size() const {
  return _internal_sheets_size();
}
inline ::TSP::Reference* DocumentArchive::mutable_sheets(int index) {
  // @@protoc_insertion_point(field_mutable:TN.DocumentArchive.sheets)
  return sheets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_sheets() {
  // @@protoc_insertion_point(field_mutable_list:TN.DocumentArchive.sheets)
  return &sheets_;
}
inline const ::TSP::Reference& DocumentArchive::_internal_sheets(int index) const {
  return sheets_.Get(index);
}
inline const ::TSP::Reference& DocumentArchive::sheets(int index) const {
  // @@protoc_insertion_point(field_get:TN.DocumentArchive.sheets)
  return _internal_sheets(index);
}
inline ::TSP::Reference* DocumentArchive::_internal_add_sheets() {
  return sheets_.Add();
}
inline ::TSP::Reference* DocumentArchive::add_sheets() {
  // @@protoc_insertion_point(field_add:TN.DocumentArchive.sheets)
  return _internal_add_sheets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::sheets() const {
  // @@protoc_insertion_point(field_list:TN.DocumentArchive.sheets)
  return sheets_;
}

// required .TSA.DocumentArchive super = 8;
inline bool DocumentArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSA::DocumentArchive& DocumentArchive::_internal_super() const {
  const ::TSA::DocumentArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSA::DocumentArchive&>(
      ::TSA::_DocumentArchive_default_instance_);
}
inline const ::TSA::DocumentArchive& DocumentArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.DocumentArchive.super)
  return _internal_super();
}
inline void DocumentArchive::unsafe_arena_set_allocated_super(
    ::TSA::DocumentArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.DocumentArchive.super)
}
inline ::TSA::DocumentArchive* DocumentArchive::release_super() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSA::DocumentArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSA::DocumentArchive* DocumentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.DocumentArchive.super)
  _has_bits_[0] &= ~0x00000080u;
  ::TSA::DocumentArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSA::DocumentArchive* DocumentArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000080u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSA::DocumentArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSA::DocumentArchive* DocumentArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.DocumentArchive.super)
  return _internal_mutable_super();
}
inline void DocumentArchive::set_allocated_super(::TSA::DocumentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.DocumentArchive.super)
}

// optional .TSP.Reference calculation_engine = 3 [deprecated = true];
inline bool DocumentArchive::_internal_has_calculation_engine() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || calculation_engine_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_calculation_engine() const {
  return _internal_has_calculation_engine();
}
inline const ::TSP::Reference& DocumentArchive::_internal_calculation_engine() const {
  const ::TSP::Reference* p = calculation_engine_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::calculation_engine() const {
  // @@protoc_insertion_point(field_get:TN.DocumentArchive.calculation_engine)
  return _internal_calculation_engine();
}
inline void DocumentArchive::unsafe_arena_set_allocated_calculation_engine(
    ::TSP::Reference* calculation_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calculation_engine_);
  }
  calculation_engine_ = calculation_engine;
  if (calculation_engine) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.DocumentArchive.calculation_engine)
}
inline ::TSP::Reference* DocumentArchive::release_calculation_engine() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = calculation_engine_;
  calculation_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_calculation_engine() {
  // @@protoc_insertion_point(field_release:TN.DocumentArchive.calculation_engine)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = calculation_engine_;
  calculation_engine_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_calculation_engine() {
  _has_bits_[0] |= 0x00000004u;
  if (calculation_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    calculation_engine_ = p;
  }
  return calculation_engine_;
}
inline ::TSP::Reference* DocumentArchive::mutable_calculation_engine() {
  // @@protoc_insertion_point(field_mutable:TN.DocumentArchive.calculation_engine)
  return _internal_mutable_calculation_engine();
}
inline void DocumentArchive::set_allocated_calculation_engine(::TSP::Reference* calculation_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(calculation_engine_);
  }
  if (calculation_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calculation_engine)->GetArena();
    if (message_arena != submessage_arena) {
      calculation_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calculation_engine, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  calculation_engine_ = calculation_engine;
  // @@protoc_insertion_point(field_set_allocated:TN.DocumentArchive.calculation_engine)
}

// required .TSP.Reference stylesheet = 4;
inline bool DocumentArchive::_internal_has_stylesheet() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || stylesheet_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_stylesheet() const {
  return _internal_has_stylesheet();
}
inline const ::TSP::Reference& DocumentArchive::_internal_stylesheet() const {
  const ::TSP::Reference* p = stylesheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::stylesheet() const {
  // @@protoc_insertion_point(field_get:TN.DocumentArchive.stylesheet)
  return _internal_stylesheet();
}
inline void DocumentArchive::unsafe_arena_set_allocated_stylesheet(
    ::TSP::Reference* stylesheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet_);
  }
  stylesheet_ = stylesheet;
  if (stylesheet) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.DocumentArchive.stylesheet)
}
inline ::TSP::Reference* DocumentArchive::release_stylesheet() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_stylesheet() {
  // @@protoc_insertion_point(field_release:TN.DocumentArchive.stylesheet)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_stylesheet() {
  _has_bits_[0] |= 0x00000008u;
  if (stylesheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    stylesheet_ = p;
  }
  return stylesheet_;
}
inline ::TSP::Reference* DocumentArchive::mutable_stylesheet() {
  // @@protoc_insertion_point(field_mutable:TN.DocumentArchive.stylesheet)
  return _internal_mutable_stylesheet();
}
inline void DocumentArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet_);
  }
  if (stylesheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet)->GetArena();
    if (message_arena != submessage_arena) {
      stylesheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylesheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  stylesheet_ = stylesheet;
  // @@protoc_insertion_point(field_set_allocated:TN.DocumentArchive.stylesheet)
}

// required .TSP.Reference sidebar_order = 5;
inline bool DocumentArchive::_internal_has_sidebar_order() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || sidebar_order_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_sidebar_order() const {
  return _internal_has_sidebar_order();
}
inline const ::TSP::Reference& DocumentArchive::_internal_sidebar_order() const {
  const ::TSP::Reference* p = sidebar_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::sidebar_order() const {
  // @@protoc_insertion_point(field_get:TN.DocumentArchive.sidebar_order)
  return _internal_sidebar_order();
}
inline void DocumentArchive::unsafe_arena_set_allocated_sidebar_order(
    ::TSP::Reference* sidebar_order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidebar_order_);
  }
  sidebar_order_ = sidebar_order;
  if (sidebar_order) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.DocumentArchive.sidebar_order)
}
inline ::TSP::Reference* DocumentArchive::release_sidebar_order() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = sidebar_order_;
  sidebar_order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_sidebar_order() {
  // @@protoc_insertion_point(field_release:TN.DocumentArchive.sidebar_order)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = sidebar_order_;
  sidebar_order_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_sidebar_order() {
  _has_bits_[0] |= 0x00000010u;
  if (sidebar_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    sidebar_order_ = p;
  }
  return sidebar_order_;
}
inline ::TSP::Reference* DocumentArchive::mutable_sidebar_order() {
  // @@protoc_insertion_point(field_mutable:TN.DocumentArchive.sidebar_order)
  return _internal_mutable_sidebar_order();
}
inline void DocumentArchive::set_allocated_sidebar_order(::TSP::Reference* sidebar_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidebar_order_);
  }
  if (sidebar_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidebar_order)->GetArena();
    if (message_arena != submessage_arena) {
      sidebar_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sidebar_order, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sidebar_order_ = sidebar_order;
  // @@protoc_insertion_point(field_set_allocated:TN.DocumentArchive.sidebar_order)
}

// required .TSP.Reference theme = 6;
inline bool DocumentArchive::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& DocumentArchive::_internal_theme() const {
  const ::TSP::Reference* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::theme() const {
  // @@protoc_insertion_point(field_get:TN.DocumentArchive.theme)
  return _internal_theme();
}
inline void DocumentArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.DocumentArchive.theme)
}
inline ::TSP::Reference* DocumentArchive::release_theme() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TN.DocumentArchive.theme)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000020u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    theme_ = p;
  }
  return theme_;
}
inline ::TSP::Reference* DocumentArchive::mutable_theme() {
  // @@protoc_insertion_point(field_mutable:TN.DocumentArchive.theme)
  return _internal_mutable_theme();
}
inline void DocumentArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme)->GetArena();
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TN.DocumentArchive.theme)
}

// optional .TN.UIStateArchive uistate = 7;
inline bool DocumentArchive::_internal_has_uistate() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || uistate_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_uistate() const {
  return _internal_has_uistate();
}
inline void DocumentArchive::clear_uistate() {
  if (uistate_ != nullptr) uistate_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TN::UIStateArchive& DocumentArchive::_internal_uistate() const {
  const ::TN::UIStateArchive* p = uistate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::UIStateArchive&>(
      ::TN::_UIStateArchive_default_instance_);
}
inline const ::TN::UIStateArchive& DocumentArchive::uistate() const {
  // @@protoc_insertion_point(field_get:TN.DocumentArchive.uistate)
  return _internal_uistate();
}
inline void DocumentArchive::unsafe_arena_set_allocated_uistate(
    ::TN::UIStateArchive* uistate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uistate_);
  }
  uistate_ = uistate;
  if (uistate) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.DocumentArchive.uistate)
}
inline ::TN::UIStateArchive* DocumentArchive::release_uistate() {
  _has_bits_[0] &= ~0x00000040u;
  ::TN::UIStateArchive* temp = uistate_;
  uistate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::UIStateArchive* DocumentArchive::unsafe_arena_release_uistate() {
  // @@protoc_insertion_point(field_release:TN.DocumentArchive.uistate)
  _has_bits_[0] &= ~0x00000040u;
  ::TN::UIStateArchive* temp = uistate_;
  uistate_ = nullptr;
  return temp;
}
inline ::TN::UIStateArchive* DocumentArchive::_internal_mutable_uistate() {
  _has_bits_[0] |= 0x00000040u;
  if (uistate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::UIStateArchive>(GetArena());
    uistate_ = p;
  }
  return uistate_;
}
inline ::TN::UIStateArchive* DocumentArchive::mutable_uistate() {
  // @@protoc_insertion_point(field_mutable:TN.DocumentArchive.uistate)
  return _internal_mutable_uistate();
}
inline void DocumentArchive::set_allocated_uistate(::TN::UIStateArchive* uistate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uistate_;
  }
  if (uistate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uistate);
    if (message_arena != submessage_arena) {
      uistate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uistate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  uistate_ = uistate;
  // @@protoc_insertion_point(field_set_allocated:TN.DocumentArchive.uistate)
}

// optional .TSP.Reference custom_format_list = 9;
inline bool DocumentArchive::_internal_has_custom_format_list() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || custom_format_list_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_custom_format_list() const {
  return _internal_has_custom_format_list();
}
inline const ::TSP::Reference& DocumentArchive::_internal_custom_format_list() const {
  const ::TSP::Reference* p = custom_format_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::custom_format_list() const {
  // @@protoc_insertion_point(field_get:TN.DocumentArchive.custom_format_list)
  return _internal_custom_format_list();
}
inline void DocumentArchive::unsafe_arena_set_allocated_custom_format_list(
    ::TSP::Reference* custom_format_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_list_);
  }
  custom_format_list_ = custom_format_list;
  if (custom_format_list) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.DocumentArchive.custom_format_list)
}
inline ::TSP::Reference* DocumentArchive::release_custom_format_list() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = custom_format_list_;
  custom_format_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_custom_format_list() {
  // @@protoc_insertion_point(field_release:TN.DocumentArchive.custom_format_list)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = custom_format_list_;
  custom_format_list_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_custom_format_list() {
  _has_bits_[0] |= 0x00000100u;
  if (custom_format_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    custom_format_list_ = p;
  }
  return custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::mutable_custom_format_list() {
  // @@protoc_insertion_point(field_mutable:TN.DocumentArchive.custom_format_list)
  return _internal_mutable_custom_format_list();
}
inline void DocumentArchive::set_allocated_custom_format_list(::TSP::Reference* custom_format_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_list_);
  }
  if (custom_format_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_list)->GetArena();
    if (message_arena != submessage_arena) {
      custom_format_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  custom_format_list_ = custom_format_list;
  // @@protoc_insertion_point(field_set_allocated:TN.DocumentArchive.custom_format_list)
}

// optional string printer_id = 10 [deprecated = true];
inline bool DocumentArchive::_internal_has_printer_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DocumentArchive::has_printer_id() const {
  return _internal_has_printer_id();
}
inline void DocumentArchive::clear_printer_id() {
  printer_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DocumentArchive::printer_id() const {
  // @@protoc_insertion_point(field_get:TN.DocumentArchive.printer_id)
  return _internal_printer_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DocumentArchive::set_printer_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 printer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TN.DocumentArchive.printer_id)
}
inline std::string* DocumentArchive::mutable_printer_id() {
  // @@protoc_insertion_point(field_mutable:TN.DocumentArchive.printer_id)
  return _internal_mutable_printer_id();
}
inline const std::string& DocumentArchive::_internal_printer_id() const {
  return printer_id_.Get();
}
inline void DocumentArchive::_internal_set_printer_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  printer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DocumentArchive::_internal_mutable_printer_id() {
  _has_bits_[0] |= 0x00000001u;
  return printer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DocumentArchive::release_printer_id() {
  // @@protoc_insertion_point(field_release:TN.DocumentArchive.printer_id)
  if (!_internal_has_printer_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return printer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentArchive::set_allocated_printer_id(std::string* printer_id) {
  if (printer_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  printer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), printer_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TN.DocumentArchive.printer_id)
}

// optional string paper_id = 11;
inline bool DocumentArchive::_internal_has_paper_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DocumentArchive::has_paper_id() const {
  return _internal_has_paper_id();
}
inline void DocumentArchive::clear_paper_id() {
  paper_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DocumentArchive::paper_id() const {
  // @@protoc_insertion_point(field_get:TN.DocumentArchive.paper_id)
  return _internal_paper_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DocumentArchive::set_paper_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 paper_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TN.DocumentArchive.paper_id)
}
inline std::string* DocumentArchive::mutable_paper_id() {
  // @@protoc_insertion_point(field_mutable:TN.DocumentArchive.paper_id)
  return _internal_mutable_paper_id();
}
inline const std::string& DocumentArchive::_internal_paper_id() const {
  return paper_id_.Get();
}
inline void DocumentArchive::_internal_set_paper_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  paper_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DocumentArchive::_internal_mutable_paper_id() {
  _has_bits_[0] |= 0x00000002u;
  return paper_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DocumentArchive::release_paper_id() {
  // @@protoc_insertion_point(field_release:TN.DocumentArchive.paper_id)
  if (!_internal_has_paper_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return paper_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentArchive::set_allocated_paper_id(std::string* paper_id) {
  if (paper_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  paper_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paper_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TN.DocumentArchive.paper_id)
}

// optional .TSP.Size page_size = 12;
inline bool DocumentArchive::_internal_has_page_size() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || page_size_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_page_size() const {
  return _internal_has_page_size();
}
inline const ::TSP::Size& DocumentArchive::_internal_page_size() const {
  const ::TSP::Size* p = page_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& DocumentArchive::page_size() const {
  // @@protoc_insertion_point(field_get:TN.DocumentArchive.page_size)
  return _internal_page_size();
}
inline void DocumentArchive::unsafe_arena_set_allocated_page_size(
    ::TSP::Size* page_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_size_);
  }
  page_size_ = page_size;
  if (page_size) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.DocumentArchive.page_size)
}
inline ::TSP::Size* DocumentArchive::release_page_size() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Size* temp = page_size_;
  page_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* DocumentArchive::unsafe_arena_release_page_size() {
  // @@protoc_insertion_point(field_release:TN.DocumentArchive.page_size)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Size* temp = page_size_;
  page_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* DocumentArchive::_internal_mutable_page_size() {
  _has_bits_[0] |= 0x00000200u;
  if (page_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    page_size_ = p;
  }
  return page_size_;
}
inline ::TSP::Size* DocumentArchive::mutable_page_size() {
  // @@protoc_insertion_point(field_mutable:TN.DocumentArchive.page_size)
  return _internal_mutable_page_size();
}
inline void DocumentArchive::set_allocated_page_size(::TSP::Size* page_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_size_);
  }
  if (page_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_size)->GetArena();
    if (message_arena != submessage_arena) {
      page_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  page_size_ = page_size;
  // @@protoc_insertion_point(field_set_allocated:TN.DocumentArchive.page_size)
}

// -------------------------------------------------------------------

// PlaceholderArchive

// required .TSWP.ShapeInfoArchive super = 1;
inline bool PlaceholderArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool PlaceholderArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::_internal_super() const {
  const ::TSWP::ShapeInfoArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeInfoArchive&>(
      ::TSWP::_ShapeInfoArchive_default_instance_);
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.PlaceholderArchive.super)
  return _internal_super();
}
inline void PlaceholderArchive::unsafe_arena_set_allocated_super(
    ::TSWP::ShapeInfoArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.PlaceholderArchive.super)
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.PlaceholderArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeInfoArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.PlaceholderArchive.super)
  return _internal_mutable_super();
}
inline void PlaceholderArchive::set_allocated_super(::TSWP::ShapeInfoArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.PlaceholderArchive.super)
}

// -------------------------------------------------------------------

// SheetArchive

// required string name = 1;
inline bool SheetArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SheetArchive::has_name() const {
  return _internal_has_name();
}
inline void SheetArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SheetArchive::name() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SheetArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TN.SheetArchive.name)
}
inline std::string* SheetArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TN.SheetArchive.name)
  return _internal_mutable_name();
}
inline const std::string& SheetArchive::_internal_name() const {
  return name_.Get();
}
inline void SheetArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SheetArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SheetArchive::release_name() {
  // @@protoc_insertion_point(field_release:TN.SheetArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SheetArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TN.SheetArchive.name)
}

// repeated .TSP.Reference drawable_infos = 2;
inline int SheetArchive::_internal_drawable_infos_size() const {
  return drawable_infos_.size();
}
inline int SheetArchive::drawable_infos_size() const {
  return _internal_drawable_infos_size();
}
inline ::TSP::Reference* SheetArchive::mutable_drawable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TN.SheetArchive.drawable_infos)
  return drawable_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SheetArchive::mutable_drawable_infos() {
  // @@protoc_insertion_point(field_mutable_list:TN.SheetArchive.drawable_infos)
  return &drawable_infos_;
}
inline const ::TSP::Reference& SheetArchive::_internal_drawable_infos(int index) const {
  return drawable_infos_.Get(index);
}
inline const ::TSP::Reference& SheetArchive::drawable_infos(int index) const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.drawable_infos)
  return _internal_drawable_infos(index);
}
inline ::TSP::Reference* SheetArchive::_internal_add_drawable_infos() {
  return drawable_infos_.Add();
}
inline ::TSP::Reference* SheetArchive::add_drawable_infos() {
  // @@protoc_insertion_point(field_add:TN.SheetArchive.drawable_infos)
  return _internal_add_drawable_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SheetArchive::drawable_infos() const {
  // @@protoc_insertion_point(field_list:TN.SheetArchive.drawable_infos)
  return drawable_infos_;
}

// optional bool in_portrait_page_orientation = 3;
inline bool SheetArchive::_internal_has_in_portrait_page_orientation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SheetArchive::has_in_portrait_page_orientation() const {
  return _internal_has_in_portrait_page_orientation();
}
inline void SheetArchive::clear_in_portrait_page_orientation() {
  in_portrait_page_orientation_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SheetArchive::_internal_in_portrait_page_orientation() const {
  return in_portrait_page_orientation_;
}
inline bool SheetArchive::in_portrait_page_orientation() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.in_portrait_page_orientation)
  return _internal_in_portrait_page_orientation();
}
inline void SheetArchive::_internal_set_in_portrait_page_orientation(bool value) {
  _has_bits_[0] |= 0x00000040u;
  in_portrait_page_orientation_ = value;
}
inline void SheetArchive::set_in_portrait_page_orientation(bool value) {
  _internal_set_in_portrait_page_orientation(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.in_portrait_page_orientation)
}

// optional bool show_repeating_headers = 4 [deprecated = true];
inline bool SheetArchive::_internal_has_show_repeating_headers() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SheetArchive::has_show_repeating_headers() const {
  return _internal_has_show_repeating_headers();
}
inline void SheetArchive::clear_show_repeating_headers() {
  show_repeating_headers_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool SheetArchive::_internal_show_repeating_headers() const {
  return show_repeating_headers_;
}
inline bool SheetArchive::show_repeating_headers() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.show_repeating_headers)
  return _internal_show_repeating_headers();
}
inline void SheetArchive::_internal_set_show_repeating_headers(bool value) {
  _has_bits_[0] |= 0x00000080u;
  show_repeating_headers_ = value;
}
inline void SheetArchive::set_show_repeating_headers(bool value) {
  _internal_set_show_repeating_headers(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.show_repeating_headers)
}

// optional bool show_page_numbers = 5;
inline bool SheetArchive::_internal_has_show_page_numbers() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SheetArchive::has_show_page_numbers() const {
  return _internal_has_show_page_numbers();
}
inline void SheetArchive::clear_show_page_numbers() {
  show_page_numbers_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool SheetArchive::_internal_show_page_numbers() const {
  return show_page_numbers_;
}
inline bool SheetArchive::show_page_numbers() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.show_page_numbers)
  return _internal_show_page_numbers();
}
inline void SheetArchive::_internal_set_show_page_numbers(bool value) {
  _has_bits_[0] |= 0x00000100u;
  show_page_numbers_ = value;
}
inline void SheetArchive::set_show_page_numbers(bool value) {
  _internal_set_show_page_numbers(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.show_page_numbers)
}

// optional bool is_autofit_on = 6;
inline bool SheetArchive::_internal_has_is_autofit_on() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SheetArchive::has_is_autofit_on() const {
  return _internal_has_is_autofit_on();
}
inline void SheetArchive::clear_is_autofit_on() {
  is_autofit_on_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool SheetArchive::_internal_is_autofit_on() const {
  return is_autofit_on_;
}
inline bool SheetArchive::is_autofit_on() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.is_autofit_on)
  return _internal_is_autofit_on();
}
inline void SheetArchive::_internal_set_is_autofit_on(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_autofit_on_ = value;
}
inline void SheetArchive::set_is_autofit_on(bool value) {
  _internal_set_is_autofit_on(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.is_autofit_on)
}

// optional float content_scale = 7;
inline bool SheetArchive::_internal_has_content_scale() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SheetArchive::has_content_scale() const {
  return _internal_has_content_scale();
}
inline void SheetArchive::clear_content_scale() {
  content_scale_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float SheetArchive::_internal_content_scale() const {
  return content_scale_;
}
inline float SheetArchive::content_scale() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.content_scale)
  return _internal_content_scale();
}
inline void SheetArchive::_internal_set_content_scale(float value) {
  _has_bits_[0] |= 0x00000400u;
  content_scale_ = value;
}
inline void SheetArchive::set_content_scale(float value) {
  _internal_set_content_scale(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.content_scale)
}

// optional .TN.PageOrder page_order = 8;
inline bool SheetArchive::_internal_has_page_order() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SheetArchive::has_page_order() const {
  return _internal_has_page_order();
}
inline void SheetArchive::clear_page_order() {
  page_order_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::TN::PageOrder SheetArchive::_internal_page_order() const {
  return static_cast< ::TN::PageOrder >(page_order_);
}
inline ::TN::PageOrder SheetArchive::page_order() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.page_order)
  return _internal_page_order();
}
inline void SheetArchive::_internal_set_page_order(::TN::PageOrder value) {
  assert(::TN::PageOrder_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  page_order_ = value;
}
inline void SheetArchive::set_page_order(::TN::PageOrder value) {
  _internal_set_page_order(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.page_order)
}

// optional .TSD.EdgeInsetsArchive print_margins = 10;
inline bool SheetArchive::_internal_has_print_margins() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || print_margins_ != nullptr);
  return value;
}
inline bool SheetArchive::has_print_margins() const {
  return _internal_has_print_margins();
}
inline const ::TSD::EdgeInsetsArchive& SheetArchive::_internal_print_margins() const {
  const ::TSD::EdgeInsetsArchive* p = print_margins_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::EdgeInsetsArchive&>(
      ::TSD::_EdgeInsetsArchive_default_instance_);
}
inline const ::TSD::EdgeInsetsArchive& SheetArchive::print_margins() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.print_margins)
  return _internal_print_margins();
}
inline void SheetArchive::unsafe_arena_set_allocated_print_margins(
    ::TSD::EdgeInsetsArchive* print_margins) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(print_margins_);
  }
  print_margins_ = print_margins;
  if (print_margins) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetArchive.print_margins)
}
inline ::TSD::EdgeInsetsArchive* SheetArchive::release_print_margins() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::EdgeInsetsArchive* temp = print_margins_;
  print_margins_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::EdgeInsetsArchive* SheetArchive::unsafe_arena_release_print_margins() {
  // @@protoc_insertion_point(field_release:TN.SheetArchive.print_margins)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::EdgeInsetsArchive* temp = print_margins_;
  print_margins_ = nullptr;
  return temp;
}
inline ::TSD::EdgeInsetsArchive* SheetArchive::_internal_mutable_print_margins() {
  _has_bits_[0] |= 0x00000002u;
  if (print_margins_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::EdgeInsetsArchive>(GetArena());
    print_margins_ = p;
  }
  return print_margins_;
}
inline ::TSD::EdgeInsetsArchive* SheetArchive::mutable_print_margins() {
  // @@protoc_insertion_point(field_mutable:TN.SheetArchive.print_margins)
  return _internal_mutable_print_margins();
}
inline void SheetArchive::set_allocated_print_margins(::TSD::EdgeInsetsArchive* print_margins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(print_margins_);
  }
  if (print_margins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(print_margins)->GetArena();
    if (message_arena != submessage_arena) {
      print_margins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, print_margins, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  print_margins_ = print_margins;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetArchive.print_margins)
}

// optional bool using_start_page_number = 11;
inline bool SheetArchive::_internal_has_using_start_page_number() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SheetArchive::has_using_start_page_number() const {
  return _internal_has_using_start_page_number();
}
inline void SheetArchive::clear_using_start_page_number() {
  using_start_page_number_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool SheetArchive::_internal_using_start_page_number() const {
  return using_start_page_number_;
}
inline bool SheetArchive::using_start_page_number() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.using_start_page_number)
  return _internal_using_start_page_number();
}
inline void SheetArchive::_internal_set_using_start_page_number(bool value) {
  _has_bits_[0] |= 0x00008000u;
  using_start_page_number_ = value;
}
inline void SheetArchive::set_using_start_page_number(bool value) {
  _internal_set_using_start_page_number(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.using_start_page_number)
}

// optional int32 start_page_number = 12;
inline bool SheetArchive::_internal_has_start_page_number() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SheetArchive::has_start_page_number() const {
  return _internal_has_start_page_number();
}
inline void SheetArchive::clear_start_page_number() {
  start_page_number_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SheetArchive::_internal_start_page_number() const {
  return start_page_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SheetArchive::start_page_number() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.start_page_number)
  return _internal_start_page_number();
}
inline void SheetArchive::_internal_set_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  start_page_number_ = value;
}
inline void SheetArchive::set_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_page_number(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.start_page_number)
}

// optional float page_header_inset = 13;
inline bool SheetArchive::_internal_has_page_header_inset() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SheetArchive::has_page_header_inset() const {
  return _internal_has_page_header_inset();
}
inline void SheetArchive::clear_page_header_inset() {
  page_header_inset_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float SheetArchive::_internal_page_header_inset() const {
  return page_header_inset_;
}
inline float SheetArchive::page_header_inset() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.page_header_inset)
  return _internal_page_header_inset();
}
inline void SheetArchive::_internal_set_page_header_inset(float value) {
  _has_bits_[0] |= 0x00002000u;
  page_header_inset_ = value;
}
inline void SheetArchive::set_page_header_inset(float value) {
  _internal_set_page_header_inset(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.page_header_inset)
}

// optional float page_footer_inset = 14;
inline bool SheetArchive::_internal_has_page_footer_inset() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SheetArchive::has_page_footer_inset() const {
  return _internal_has_page_footer_inset();
}
inline void SheetArchive::clear_page_footer_inset() {
  page_footer_inset_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float SheetArchive::_internal_page_footer_inset() const {
  return page_footer_inset_;
}
inline float SheetArchive::page_footer_inset() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.page_footer_inset)
  return _internal_page_footer_inset();
}
inline void SheetArchive::_internal_set_page_footer_inset(float value) {
  _has_bits_[0] |= 0x00004000u;
  page_footer_inset_ = value;
}
inline void SheetArchive::set_page_footer_inset(float value) {
  _internal_set_page_footer_inset(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.page_footer_inset)
}

// optional .TSP.Reference header_storage = 15 [deprecated = true];
inline bool SheetArchive::_internal_has_header_storage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || header_storage_ != nullptr);
  return value;
}
inline bool SheetArchive::has_header_storage() const {
  return _internal_has_header_storage();
}
inline const ::TSP::Reference& SheetArchive::_internal_header_storage() const {
  const ::TSP::Reference* p = header_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SheetArchive::header_storage() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.header_storage)
  return _internal_header_storage();
}
inline void SheetArchive::unsafe_arena_set_allocated_header_storage(
    ::TSP::Reference* header_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_storage_);
  }
  header_storage_ = header_storage;
  if (header_storage) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetArchive.header_storage)
}
inline ::TSP::Reference* SheetArchive::release_header_storage() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = header_storage_;
  header_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SheetArchive::unsafe_arena_release_header_storage() {
  // @@protoc_insertion_point(field_release:TN.SheetArchive.header_storage)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = header_storage_;
  header_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SheetArchive::_internal_mutable_header_storage() {
  _has_bits_[0] |= 0x00000004u;
  if (header_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    header_storage_ = p;
  }
  return header_storage_;
}
inline ::TSP::Reference* SheetArchive::mutable_header_storage() {
  // @@protoc_insertion_point(field_mutable:TN.SheetArchive.header_storage)
  return _internal_mutable_header_storage();
}
inline void SheetArchive::set_allocated_header_storage(::TSP::Reference* header_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_storage_);
  }
  if (header_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_storage)->GetArena();
    if (message_arena != submessage_arena) {
      header_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  header_storage_ = header_storage;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetArchive.header_storage)
}

// optional .TSP.Reference footer_storage = 16 [deprecated = true];
inline bool SheetArchive::_internal_has_footer_storage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || footer_storage_ != nullptr);
  return value;
}
inline bool SheetArchive::has_footer_storage() const {
  return _internal_has_footer_storage();
}
inline const ::TSP::Reference& SheetArchive::_internal_footer_storage() const {
  const ::TSP::Reference* p = footer_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SheetArchive::footer_storage() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.footer_storage)
  return _internal_footer_storage();
}
inline void SheetArchive::unsafe_arena_set_allocated_footer_storage(
    ::TSP::Reference* footer_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_storage_);
  }
  footer_storage_ = footer_storage;
  if (footer_storage) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetArchive.footer_storage)
}
inline ::TSP::Reference* SheetArchive::release_footer_storage() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = footer_storage_;
  footer_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SheetArchive::unsafe_arena_release_footer_storage() {
  // @@protoc_insertion_point(field_release:TN.SheetArchive.footer_storage)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = footer_storage_;
  footer_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SheetArchive::_internal_mutable_footer_storage() {
  _has_bits_[0] |= 0x00000008u;
  if (footer_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    footer_storage_ = p;
  }
  return footer_storage_;
}
inline ::TSP::Reference* SheetArchive::mutable_footer_storage() {
  // @@protoc_insertion_point(field_mutable:TN.SheetArchive.footer_storage)
  return _internal_mutable_footer_storage();
}
inline void SheetArchive::set_allocated_footer_storage(::TSP::Reference* footer_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_storage_);
  }
  if (footer_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_storage)->GetArena();
    if (message_arena != submessage_arena) {
      footer_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  footer_storage_ = footer_storage;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetArchive.footer_storage)
}

// optional .TSP.Reference userDefinedGuideStorage = 17;
inline bool SheetArchive::_internal_has_userdefinedguidestorage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || userdefinedguidestorage_ != nullptr);
  return value;
}
inline bool SheetArchive::has_userdefinedguidestorage() const {
  return _internal_has_userdefinedguidestorage();
}
inline const ::TSP::Reference& SheetArchive::_internal_userdefinedguidestorage() const {
  const ::TSP::Reference* p = userdefinedguidestorage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SheetArchive::userdefinedguidestorage() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.userDefinedGuideStorage)
  return _internal_userdefinedguidestorage();
}
inline void SheetArchive::unsafe_arena_set_allocated_userdefinedguidestorage(
    ::TSP::Reference* userdefinedguidestorage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdefinedguidestorage_);
  }
  userdefinedguidestorage_ = userdefinedguidestorage;
  if (userdefinedguidestorage) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetArchive.userDefinedGuideStorage)
}
inline ::TSP::Reference* SheetArchive::release_userdefinedguidestorage() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = userdefinedguidestorage_;
  userdefinedguidestorage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SheetArchive::unsafe_arena_release_userdefinedguidestorage() {
  // @@protoc_insertion_point(field_release:TN.SheetArchive.userDefinedGuideStorage)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = userdefinedguidestorage_;
  userdefinedguidestorage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SheetArchive::_internal_mutable_userdefinedguidestorage() {
  _has_bits_[0] |= 0x00000010u;
  if (userdefinedguidestorage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    userdefinedguidestorage_ = p;
  }
  return userdefinedguidestorage_;
}
inline ::TSP::Reference* SheetArchive::mutable_userdefinedguidestorage() {
  // @@protoc_insertion_point(field_mutable:TN.SheetArchive.userDefinedGuideStorage)
  return _internal_mutable_userdefinedguidestorage();
}
inline void SheetArchive::set_allocated_userdefinedguidestorage(::TSP::Reference* userdefinedguidestorage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdefinedguidestorage_);
  }
  if (userdefinedguidestorage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userdefinedguidestorage)->GetArena();
    if (message_arena != submessage_arena) {
      userdefinedguidestorage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userdefinedguidestorage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  userdefinedguidestorage_ = userdefinedguidestorage;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetArchive.userDefinedGuideStorage)
}

// repeated .TSP.Reference headers = 18;
inline int SheetArchive::_internal_headers_size() const {
  return headers_.size();
}
inline int SheetArchive::headers_size() const {
  return _internal_headers_size();
}
inline ::TSP::Reference* SheetArchive::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:TN.SheetArchive.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SheetArchive::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:TN.SheetArchive.headers)
  return &headers_;
}
inline const ::TSP::Reference& SheetArchive::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::TSP::Reference& SheetArchive::headers(int index) const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.headers)
  return _internal_headers(index);
}
inline ::TSP::Reference* SheetArchive::_internal_add_headers() {
  return headers_.Add();
}
inline ::TSP::Reference* SheetArchive::add_headers() {
  // @@protoc_insertion_point(field_add:TN.SheetArchive.headers)
  return _internal_add_headers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SheetArchive::headers() const {
  // @@protoc_insertion_point(field_list:TN.SheetArchive.headers)
  return headers_;
}

// repeated .TSP.Reference footers = 19;
inline int SheetArchive::_internal_footers_size() const {
  return footers_.size();
}
inline int SheetArchive::footers_size() const {
  return _internal_footers_size();
}
inline ::TSP::Reference* SheetArchive::mutable_footers(int index) {
  // @@protoc_insertion_point(field_mutable:TN.SheetArchive.footers)
  return footers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SheetArchive::mutable_footers() {
  // @@protoc_insertion_point(field_mutable_list:TN.SheetArchive.footers)
  return &footers_;
}
inline const ::TSP::Reference& SheetArchive::_internal_footers(int index) const {
  return footers_.Get(index);
}
inline const ::TSP::Reference& SheetArchive::footers(int index) const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.footers)
  return _internal_footers(index);
}
inline ::TSP::Reference* SheetArchive::_internal_add_footers() {
  return footers_.Add();
}
inline ::TSP::Reference* SheetArchive::add_footers() {
  // @@protoc_insertion_point(field_add:TN.SheetArchive.footers)
  return _internal_add_footers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SheetArchive::footers() const {
  // @@protoc_insertion_point(field_list:TN.SheetArchive.footers)
  return footers_;
}

// optional bool uses_single_header_footer = 20;
inline bool SheetArchive::_internal_has_uses_single_header_footer() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SheetArchive::has_uses_single_header_footer() const {
  return _internal_has_uses_single_header_footer();
}
inline void SheetArchive::clear_uses_single_header_footer() {
  uses_single_header_footer_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool SheetArchive::_internal_uses_single_header_footer() const {
  return uses_single_header_footer_;
}
inline bool SheetArchive::uses_single_header_footer() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.uses_single_header_footer)
  return _internal_uses_single_header_footer();
}
inline void SheetArchive::_internal_set_uses_single_header_footer(bool value) {
  _has_bits_[0] |= 0x00010000u;
  uses_single_header_footer_ = value;
}
inline void SheetArchive::set_uses_single_header_footer(bool value) {
  _internal_set_uses_single_header_footer(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.uses_single_header_footer)
}

// optional .TN.PageLayoutDirection layout_direction = 21 [default = PageLayoutDirectionLeftToRight];
inline bool SheetArchive::_internal_has_layout_direction() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SheetArchive::has_layout_direction() const {
  return _internal_has_layout_direction();
}
inline void SheetArchive::clear_layout_direction() {
  layout_direction_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::TN::PageLayoutDirection SheetArchive::_internal_layout_direction() const {
  return static_cast< ::TN::PageLayoutDirection >(layout_direction_);
}
inline ::TN::PageLayoutDirection SheetArchive::layout_direction() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.layout_direction)
  return _internal_layout_direction();
}
inline void SheetArchive::_internal_set_layout_direction(::TN::PageLayoutDirection value) {
  assert(::TN::PageLayoutDirection_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  layout_direction_ = value;
}
inline void SheetArchive::set_layout_direction(::TN::PageLayoutDirection value) {
  _internal_set_layout_direction(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.layout_direction)
}

// optional .TSP.Reference style = 22;
inline bool SheetArchive::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || style_ != nullptr);
  return value;
}
inline bool SheetArchive::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& SheetArchive::_internal_style() const {
  const ::TSP::Reference* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SheetArchive::style() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.style)
  return _internal_style();
}
inline void SheetArchive::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetArchive.style)
}
inline ::TSP::Reference* SheetArchive::release_style() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SheetArchive::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TN.SheetArchive.style)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SheetArchive::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000020u;
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    style_ = p;
  }
  return style_;
}
inline ::TSP::Reference* SheetArchive::mutable_style() {
  // @@protoc_insertion_point(field_mutable:TN.SheetArchive.style)
  return _internal_mutable_style();
}
inline void SheetArchive::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style)->GetArena();
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetArchive.style)
}

// optional bool print_backgrounds = 23;
inline bool SheetArchive::_internal_has_print_backgrounds() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SheetArchive::has_print_backgrounds() const {
  return _internal_has_print_backgrounds();
}
inline void SheetArchive::clear_print_backgrounds() {
  print_backgrounds_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool SheetArchive::_internal_print_backgrounds() const {
  return print_backgrounds_;
}
inline bool SheetArchive::print_backgrounds() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.print_backgrounds)
  return _internal_print_backgrounds();
}
inline void SheetArchive::_internal_set_print_backgrounds(bool value) {
  _has_bits_[0] |= 0x00020000u;
  print_backgrounds_ = value;
}
inline void SheetArchive::set_print_backgrounds(bool value) {
  _internal_set_print_backgrounds(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.print_backgrounds)
}

// optional bool should_print_comments = 24;
inline bool SheetArchive::_internal_has_should_print_comments() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SheetArchive::has_should_print_comments() const {
  return _internal_has_should_print_comments();
}
inline void SheetArchive::clear_should_print_comments() {
  should_print_comments_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool SheetArchive::_internal_should_print_comments() const {
  return should_print_comments_;
}
inline bool SheetArchive::should_print_comments() const {
  // @@protoc_insertion_point(field_get:TN.SheetArchive.should_print_comments)
  return _internal_should_print_comments();
}
inline void SheetArchive::_internal_set_should_print_comments(bool value) {
  _has_bits_[0] |= 0x00040000u;
  should_print_comments_ = value;
}
inline void SheetArchive::set_should_print_comments(bool value) {
  _internal_set_should_print_comments(value);
  // @@protoc_insertion_point(field_set:TN.SheetArchive.should_print_comments)
}

// -------------------------------------------------------------------

// SheetStylePropertiesArchive

// optional .TSD.FillArchive fill = 1;
inline bool SheetStylePropertiesArchive::_internal_has_fill() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || fill_ != nullptr);
  return value;
}
inline bool SheetStylePropertiesArchive::has_fill() const {
  return _internal_has_fill();
}
inline const ::TSD::FillArchive& SheetStylePropertiesArchive::_internal_fill() const {
  const ::TSD::FillArchive* p = fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& SheetStylePropertiesArchive::fill() const {
  // @@protoc_insertion_point(field_get:TN.SheetStylePropertiesArchive.fill)
  return _internal_fill();
}
inline void SheetStylePropertiesArchive::unsafe_arena_set_allocated_fill(
    ::TSD::FillArchive* fill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_);
  }
  fill_ = fill;
  if (fill) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetStylePropertiesArchive.fill)
}
inline ::TSD::FillArchive* SheetStylePropertiesArchive::release_fill() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = fill_;
  fill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* SheetStylePropertiesArchive::unsafe_arena_release_fill() {
  // @@protoc_insertion_point(field_release:TN.SheetStylePropertiesArchive.fill)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = fill_;
  fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* SheetStylePropertiesArchive::_internal_mutable_fill() {
  _has_bits_[0] |= 0x00000001u;
  if (fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    fill_ = p;
  }
  return fill_;
}
inline ::TSD::FillArchive* SheetStylePropertiesArchive::mutable_fill() {
  // @@protoc_insertion_point(field_mutable:TN.SheetStylePropertiesArchive.fill)
  return _internal_mutable_fill();
}
inline void SheetStylePropertiesArchive::set_allocated_fill(::TSD::FillArchive* fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_);
  }
  if (fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill)->GetArena();
    if (message_arena != submessage_arena) {
      fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fill_ = fill;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetStylePropertiesArchive.fill)
}

// -------------------------------------------------------------------

// SheetStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool SheetStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool SheetStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& SheetStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& SheetStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.SheetStyleArchive.super)
  return _internal_super();
}
inline void SheetStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetStyleArchive.super)
}
inline ::TSS::StyleArchive* SheetStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* SheetStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.SheetStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* SheetStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* SheetStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.SheetStyleArchive.super)
  return _internal_mutable_super();
}
inline void SheetStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetStyleArchive.super)
}

// optional uint32 override_count = 2;
inline bool SheetStyleArchive::_internal_has_override_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SheetStyleArchive::has_override_count() const {
  return _internal_has_override_count();
}
inline void SheetStyleArchive::clear_override_count() {
  override_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SheetStyleArchive::_internal_override_count() const {
  return override_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SheetStyleArchive::override_count() const {
  // @@protoc_insertion_point(field_get:TN.SheetStyleArchive.override_count)
  return _internal_override_count();
}
inline void SheetStyleArchive::_internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  override_count_ = value;
}
inline void SheetStyleArchive::set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_override_count(value);
  // @@protoc_insertion_point(field_set:TN.SheetStyleArchive.override_count)
}

// optional .TN.SheetStylePropertiesArchive sheet_properties = 3;
inline bool SheetStyleArchive::_internal_has_sheet_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sheet_properties_ != nullptr);
  return value;
}
inline bool SheetStyleArchive::has_sheet_properties() const {
  return _internal_has_sheet_properties();
}
inline void SheetStyleArchive::clear_sheet_properties() {
  if (sheet_properties_ != nullptr) sheet_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TN::SheetStylePropertiesArchive& SheetStyleArchive::_internal_sheet_properties() const {
  const ::TN::SheetStylePropertiesArchive* p = sheet_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::SheetStylePropertiesArchive&>(
      ::TN::_SheetStylePropertiesArchive_default_instance_);
}
inline const ::TN::SheetStylePropertiesArchive& SheetStyleArchive::sheet_properties() const {
  // @@protoc_insertion_point(field_get:TN.SheetStyleArchive.sheet_properties)
  return _internal_sheet_properties();
}
inline void SheetStyleArchive::unsafe_arena_set_allocated_sheet_properties(
    ::TN::SheetStylePropertiesArchive* sheet_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_properties_);
  }
  sheet_properties_ = sheet_properties;
  if (sheet_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetStyleArchive.sheet_properties)
}
inline ::TN::SheetStylePropertiesArchive* SheetStyleArchive::release_sheet_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::TN::SheetStylePropertiesArchive* temp = sheet_properties_;
  sheet_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::SheetStylePropertiesArchive* SheetStyleArchive::unsafe_arena_release_sheet_properties() {
  // @@protoc_insertion_point(field_release:TN.SheetStyleArchive.sheet_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::TN::SheetStylePropertiesArchive* temp = sheet_properties_;
  sheet_properties_ = nullptr;
  return temp;
}
inline ::TN::SheetStylePropertiesArchive* SheetStyleArchive::_internal_mutable_sheet_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (sheet_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::SheetStylePropertiesArchive>(GetArena());
    sheet_properties_ = p;
  }
  return sheet_properties_;
}
inline ::TN::SheetStylePropertiesArchive* SheetStyleArchive::mutable_sheet_properties() {
  // @@protoc_insertion_point(field_mutable:TN.SheetStyleArchive.sheet_properties)
  return _internal_mutable_sheet_properties();
}
inline void SheetStyleArchive::set_allocated_sheet_properties(::TN::SheetStylePropertiesArchive* sheet_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sheet_properties_;
  }
  if (sheet_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sheet_properties);
    if (message_arena != submessage_arena) {
      sheet_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sheet_properties_ = sheet_properties;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetStyleArchive.sheet_properties)
}

// -------------------------------------------------------------------

// FormBasedSheetArchive

// required .TN.SheetArchive super = 1;
inline bool FormBasedSheetArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool FormBasedSheetArchive::has_super() const {
  return _internal_has_super();
}
inline void FormBasedSheetArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TN::SheetArchive& FormBasedSheetArchive::_internal_super() const {
  const ::TN::SheetArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::SheetArchive&>(
      ::TN::_SheetArchive_default_instance_);
}
inline const ::TN::SheetArchive& FormBasedSheetArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.FormBasedSheetArchive.super)
  return _internal_super();
}
inline void FormBasedSheetArchive::unsafe_arena_set_allocated_super(
    ::TN::SheetArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.FormBasedSheetArchive.super)
}
inline ::TN::SheetArchive* FormBasedSheetArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TN::SheetArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::SheetArchive* FormBasedSheetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.FormBasedSheetArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TN::SheetArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TN::SheetArchive* FormBasedSheetArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::SheetArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TN::SheetArchive* FormBasedSheetArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.FormBasedSheetArchive.super)
  return _internal_mutable_super();
}
inline void FormBasedSheetArchive::set_allocated_super(::TN::SheetArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.FormBasedSheetArchive.super)
}

// optional .TSP.CFUUIDArchive table_id = 2;
inline bool FormBasedSheetArchive::_internal_has_table_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || table_id_ != nullptr);
  return value;
}
inline bool FormBasedSheetArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::TSP::CFUUIDArchive& FormBasedSheetArchive::_internal_table_id() const {
  const ::TSP::CFUUIDArchive* p = table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& FormBasedSheetArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TN.FormBasedSheetArchive.table_id)
  return _internal_table_id();
}
inline void FormBasedSheetArchive::unsafe_arena_set_allocated_table_id(
    ::TSP::CFUUIDArchive* table_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  table_id_ = table_id;
  if (table_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.FormBasedSheetArchive.table_id)
}
inline ::TSP::CFUUIDArchive* FormBasedSheetArchive::release_table_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* FormBasedSheetArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TN.FormBasedSheetArchive.table_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* FormBasedSheetArchive::_internal_mutable_table_id() {
  _has_bits_[0] |= 0x00000002u;
  if (table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    table_id_ = p;
  }
  return table_id_;
}
inline ::TSP::CFUUIDArchive* FormBasedSheetArchive::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:TN.FormBasedSheetArchive.table_id)
  return _internal_mutable_table_id();
}
inline void FormBasedSheetArchive::set_allocated_table_id(::TSP::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id)->GetArena();
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TN.FormBasedSheetArchive.table_id)
}

// -------------------------------------------------------------------

// ThemeArchive

// required .TSS.ThemeArchive super = 1;
inline bool ThemeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ThemeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ThemeArchive& ThemeArchive::_internal_super() const {
  const ::TSS::ThemeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ThemeArchive&>(
      ::TSS::_ThemeArchive_default_instance_);
}
inline const ::TSS::ThemeArchive& ThemeArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.ThemeArchive.super)
  return _internal_super();
}
inline void ThemeArchive::unsafe_arena_set_allocated_super(
    ::TSS::ThemeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ThemeArchive.super)
}
inline ::TSS::ThemeArchive* ThemeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::ThemeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::ThemeArchive* ThemeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.ThemeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::ThemeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::ThemeArchive* ThemeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ThemeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::ThemeArchive* ThemeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.ThemeArchive.super)
  return _internal_mutable_super();
}
inline void ThemeArchive::set_allocated_super(::TSS::ThemeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.ThemeArchive.super)
}

// repeated .TSP.Reference prototypes = 2;
inline int ThemeArchive::_internal_prototypes_size() const {
  return prototypes_.size();
}
inline int ThemeArchive::prototypes_size() const {
  return _internal_prototypes_size();
}
inline ::TSP::Reference* ThemeArchive::mutable_prototypes(int index) {
  // @@protoc_insertion_point(field_mutable:TN.ThemeArchive.prototypes)
  return prototypes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemeArchive::mutable_prototypes() {
  // @@protoc_insertion_point(field_mutable_list:TN.ThemeArchive.prototypes)
  return &prototypes_;
}
inline const ::TSP::Reference& ThemeArchive::_internal_prototypes(int index) const {
  return prototypes_.Get(index);
}
inline const ::TSP::Reference& ThemeArchive::prototypes(int index) const {
  // @@protoc_insertion_point(field_get:TN.ThemeArchive.prototypes)
  return _internal_prototypes(index);
}
inline ::TSP::Reference* ThemeArchive::_internal_add_prototypes() {
  return prototypes_.Add();
}
inline ::TSP::Reference* ThemeArchive::add_prototypes() {
  // @@protoc_insertion_point(field_add:TN.ThemeArchive.prototypes)
  return _internal_add_prototypes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemeArchive::prototypes() const {
  // @@protoc_insertion_point(field_list:TN.ThemeArchive.prototypes)
  return prototypes_;
}

// -------------------------------------------------------------------

// PasteboardNativeStorageArchive

// optional .TSP.Reference sheet = 1;
inline bool PasteboardNativeStorageArchive::_internal_has_sheet() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_ != nullptr);
  return value;
}
inline bool PasteboardNativeStorageArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::_internal_sheet() const {
  const ::TSP::Reference* p = sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PasteboardNativeStorageArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.PasteboardNativeStorageArchive.sheet)
  return _internal_sheet();
}
inline void PasteboardNativeStorageArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  sheet_ = sheet;
  if (sheet) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.PasteboardNativeStorageArchive.sheet)
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::release_sheet() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.PasteboardNativeStorageArchive.sheet)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::_internal_mutable_sheet() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    sheet_ = p;
  }
  return sheet_;
}
inline ::TSP::Reference* PasteboardNativeStorageArchive::mutable_sheet() {
  // @@protoc_insertion_point(field_mutable:TN.PasteboardNativeStorageArchive.sheet)
  return _internal_mutable_sheet();
}
inline void PasteboardNativeStorageArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet)->GetArena();
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.PasteboardNativeStorageArchive.sheet)
}

// optional .TN.SheetUIStateArchive ui_state = 2;
inline bool PasteboardNativeStorageArchive::_internal_has_ui_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ui_state_ != nullptr);
  return value;
}
inline bool PasteboardNativeStorageArchive::has_ui_state() const {
  return _internal_has_ui_state();
}
inline void PasteboardNativeStorageArchive::clear_ui_state() {
  if (ui_state_ != nullptr) ui_state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TN::SheetUIStateArchive& PasteboardNativeStorageArchive::_internal_ui_state() const {
  const ::TN::SheetUIStateArchive* p = ui_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::SheetUIStateArchive&>(
      ::TN::_SheetUIStateArchive_default_instance_);
}
inline const ::TN::SheetUIStateArchive& PasteboardNativeStorageArchive::ui_state() const {
  // @@protoc_insertion_point(field_get:TN.PasteboardNativeStorageArchive.ui_state)
  return _internal_ui_state();
}
inline void PasteboardNativeStorageArchive::unsafe_arena_set_allocated_ui_state(
    ::TN::SheetUIStateArchive* ui_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ui_state_);
  }
  ui_state_ = ui_state;
  if (ui_state) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.PasteboardNativeStorageArchive.ui_state)
}
inline ::TN::SheetUIStateArchive* PasteboardNativeStorageArchive::release_ui_state() {
  _has_bits_[0] &= ~0x00000002u;
  ::TN::SheetUIStateArchive* temp = ui_state_;
  ui_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::SheetUIStateArchive* PasteboardNativeStorageArchive::unsafe_arena_release_ui_state() {
  // @@protoc_insertion_point(field_release:TN.PasteboardNativeStorageArchive.ui_state)
  _has_bits_[0] &= ~0x00000002u;
  ::TN::SheetUIStateArchive* temp = ui_state_;
  ui_state_ = nullptr;
  return temp;
}
inline ::TN::SheetUIStateArchive* PasteboardNativeStorageArchive::_internal_mutable_ui_state() {
  _has_bits_[0] |= 0x00000002u;
  if (ui_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::SheetUIStateArchive>(GetArena());
    ui_state_ = p;
  }
  return ui_state_;
}
inline ::TN::SheetUIStateArchive* PasteboardNativeStorageArchive::mutable_ui_state() {
  // @@protoc_insertion_point(field_mutable:TN.PasteboardNativeStorageArchive.ui_state)
  return _internal_mutable_ui_state();
}
inline void PasteboardNativeStorageArchive::set_allocated_ui_state(::TN::SheetUIStateArchive* ui_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ui_state_;
  }
  if (ui_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ui_state);
    if (message_arena != submessage_arena) {
      ui_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ui_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ui_state_ = ui_state;
  // @@protoc_insertion_point(field_set_allocated:TN.PasteboardNativeStorageArchive.ui_state)
}

// -------------------------------------------------------------------

// ChartMediatorFormulaStorage

// repeated .TSCE.FormulaArchive data_formulae = 1;
inline int ChartMediatorFormulaStorage::_internal_data_formulae_size() const {
  return data_formulae_.size();
}
inline int ChartMediatorFormulaStorage::data_formulae_size() const {
  return _internal_data_formulae_size();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_data_formulae(int index) {
  // @@protoc_insertion_point(field_mutable:TN.ChartMediatorFormulaStorage.data_formulae)
  return data_formulae_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_data_formulae() {
  // @@protoc_insertion_point(field_mutable_list:TN.ChartMediatorFormulaStorage.data_formulae)
  return &data_formulae_;
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::_internal_data_formulae(int index) const {
  return data_formulae_.Get(index);
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::data_formulae(int index) const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorFormulaStorage.data_formulae)
  return _internal_data_formulae(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::_internal_add_data_formulae() {
  return data_formulae_.Add();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_data_formulae() {
  // @@protoc_insertion_point(field_add:TN.ChartMediatorFormulaStorage.data_formulae)
  return _internal_add_data_formulae();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::data_formulae() const {
  // @@protoc_insertion_point(field_list:TN.ChartMediatorFormulaStorage.data_formulae)
  return data_formulae_;
}

// repeated .TSCE.FormulaArchive row_label_formulae = 3;
inline int ChartMediatorFormulaStorage::_internal_row_label_formulae_size() const {
  return row_label_formulae_.size();
}
inline int ChartMediatorFormulaStorage::row_label_formulae_size() const {
  return _internal_row_label_formulae_size();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_row_label_formulae(int index) {
  // @@protoc_insertion_point(field_mutable:TN.ChartMediatorFormulaStorage.row_label_formulae)
  return row_label_formulae_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_row_label_formulae() {
  // @@protoc_insertion_point(field_mutable_list:TN.ChartMediatorFormulaStorage.row_label_formulae)
  return &row_label_formulae_;
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::_internal_row_label_formulae(int index) const {
  return row_label_formulae_.Get(index);
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::row_label_formulae(int index) const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorFormulaStorage.row_label_formulae)
  return _internal_row_label_formulae(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::_internal_add_row_label_formulae() {
  return row_label_formulae_.Add();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_row_label_formulae() {
  // @@protoc_insertion_point(field_add:TN.ChartMediatorFormulaStorage.row_label_formulae)
  return _internal_add_row_label_formulae();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::row_label_formulae() const {
  // @@protoc_insertion_point(field_list:TN.ChartMediatorFormulaStorage.row_label_formulae)
  return row_label_formulae_;
}

// repeated .TSCE.FormulaArchive col_label_formulae = 4;
inline int ChartMediatorFormulaStorage::_internal_col_label_formulae_size() const {
  return col_label_formulae_.size();
}
inline int ChartMediatorFormulaStorage::col_label_formulae_size() const {
  return _internal_col_label_formulae_size();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_col_label_formulae(int index) {
  // @@protoc_insertion_point(field_mutable:TN.ChartMediatorFormulaStorage.col_label_formulae)
  return col_label_formulae_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_col_label_formulae() {
  // @@protoc_insertion_point(field_mutable_list:TN.ChartMediatorFormulaStorage.col_label_formulae)
  return &col_label_formulae_;
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::_internal_col_label_formulae(int index) const {
  return col_label_formulae_.Get(index);
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::col_label_formulae(int index) const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorFormulaStorage.col_label_formulae)
  return _internal_col_label_formulae(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::_internal_add_col_label_formulae() {
  return col_label_formulae_.Add();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_col_label_formulae() {
  // @@protoc_insertion_point(field_add:TN.ChartMediatorFormulaStorage.col_label_formulae)
  return _internal_add_col_label_formulae();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::col_label_formulae() const {
  // @@protoc_insertion_point(field_list:TN.ChartMediatorFormulaStorage.col_label_formulae)
  return col_label_formulae_;
}

// optional int32 direction = 5;
inline bool ChartMediatorFormulaStorage::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartMediatorFormulaStorage::has_direction() const {
  return _internal_has_direction();
}
inline void ChartMediatorFormulaStorage::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartMediatorFormulaStorage::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartMediatorFormulaStorage::direction() const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorFormulaStorage.direction)
  return _internal_direction();
}
inline void ChartMediatorFormulaStorage::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  direction_ = value;
}
inline void ChartMediatorFormulaStorage::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TN.ChartMediatorFormulaStorage.direction)
}

// repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
inline int ChartMediatorFormulaStorage::_internal_error_custom_pos_formulae_size() const {
  return error_custom_pos_formulae_.size();
}
inline int ChartMediatorFormulaStorage::error_custom_pos_formulae_size() const {
  return _internal_error_custom_pos_formulae_size();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_error_custom_pos_formulae(int index) {
  // @@protoc_insertion_point(field_mutable:TN.ChartMediatorFormulaStorage.error_custom_pos_formulae)
  return error_custom_pos_formulae_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_error_custom_pos_formulae() {
  // @@protoc_insertion_point(field_mutable_list:TN.ChartMediatorFormulaStorage.error_custom_pos_formulae)
  return &error_custom_pos_formulae_;
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::_internal_error_custom_pos_formulae(int index) const {
  return error_custom_pos_formulae_.Get(index);
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::error_custom_pos_formulae(int index) const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorFormulaStorage.error_custom_pos_formulae)
  return _internal_error_custom_pos_formulae(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::_internal_add_error_custom_pos_formulae() {
  return error_custom_pos_formulae_.Add();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_error_custom_pos_formulae() {
  // @@protoc_insertion_point(field_add:TN.ChartMediatorFormulaStorage.error_custom_pos_formulae)
  return _internal_add_error_custom_pos_formulae();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::error_custom_pos_formulae() const {
  // @@protoc_insertion_point(field_list:TN.ChartMediatorFormulaStorage.error_custom_pos_formulae)
  return error_custom_pos_formulae_;
}

// repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
inline int ChartMediatorFormulaStorage::_internal_error_custom_neg_formulae_size() const {
  return error_custom_neg_formulae_.size();
}
inline int ChartMediatorFormulaStorage::error_custom_neg_formulae_size() const {
  return _internal_error_custom_neg_formulae_size();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_error_custom_neg_formulae(int index) {
  // @@protoc_insertion_point(field_mutable:TN.ChartMediatorFormulaStorage.error_custom_neg_formulae)
  return error_custom_neg_formulae_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_error_custom_neg_formulae() {
  // @@protoc_insertion_point(field_mutable_list:TN.ChartMediatorFormulaStorage.error_custom_neg_formulae)
  return &error_custom_neg_formulae_;
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::_internal_error_custom_neg_formulae(int index) const {
  return error_custom_neg_formulae_.Get(index);
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::error_custom_neg_formulae(int index) const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorFormulaStorage.error_custom_neg_formulae)
  return _internal_error_custom_neg_formulae(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::_internal_add_error_custom_neg_formulae() {
  return error_custom_neg_formulae_.Add();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_error_custom_neg_formulae() {
  // @@protoc_insertion_point(field_add:TN.ChartMediatorFormulaStorage.error_custom_neg_formulae)
  return _internal_add_error_custom_neg_formulae();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::error_custom_neg_formulae() const {
  // @@protoc_insertion_point(field_list:TN.ChartMediatorFormulaStorage.error_custom_neg_formulae)
  return error_custom_neg_formulae_;
}

// repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
inline int ChartMediatorFormulaStorage::_internal_error_custom_pos_scatterx_formulae_size() const {
  return error_custom_pos_scatterx_formulae_.size();
}
inline int ChartMediatorFormulaStorage::error_custom_pos_scatterx_formulae_size() const {
  return _internal_error_custom_pos_scatterx_formulae_size();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_error_custom_pos_scatterx_formulae(int index) {
  // @@protoc_insertion_point(field_mutable:TN.ChartMediatorFormulaStorage.error_custom_pos_scatterX_formulae)
  return error_custom_pos_scatterx_formulae_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_error_custom_pos_scatterx_formulae() {
  // @@protoc_insertion_point(field_mutable_list:TN.ChartMediatorFormulaStorage.error_custom_pos_scatterX_formulae)
  return &error_custom_pos_scatterx_formulae_;
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::_internal_error_custom_pos_scatterx_formulae(int index) const {
  return error_custom_pos_scatterx_formulae_.Get(index);
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::error_custom_pos_scatterx_formulae(int index) const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorFormulaStorage.error_custom_pos_scatterX_formulae)
  return _internal_error_custom_pos_scatterx_formulae(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::_internal_add_error_custom_pos_scatterx_formulae() {
  return error_custom_pos_scatterx_formulae_.Add();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_error_custom_pos_scatterx_formulae() {
  // @@protoc_insertion_point(field_add:TN.ChartMediatorFormulaStorage.error_custom_pos_scatterX_formulae)
  return _internal_add_error_custom_pos_scatterx_formulae();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::error_custom_pos_scatterx_formulae() const {
  // @@protoc_insertion_point(field_list:TN.ChartMediatorFormulaStorage.error_custom_pos_scatterX_formulae)
  return error_custom_pos_scatterx_formulae_;
}

// repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
inline int ChartMediatorFormulaStorage::_internal_error_custom_neg_scatterx_formulae_size() const {
  return error_custom_neg_scatterx_formulae_.size();
}
inline int ChartMediatorFormulaStorage::error_custom_neg_scatterx_formulae_size() const {
  return _internal_error_custom_neg_scatterx_formulae_size();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::mutable_error_custom_neg_scatterx_formulae(int index) {
  // @@protoc_insertion_point(field_mutable:TN.ChartMediatorFormulaStorage.error_custom_neg_scatterX_formulae)
  return error_custom_neg_scatterx_formulae_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
ChartMediatorFormulaStorage::mutable_error_custom_neg_scatterx_formulae() {
  // @@protoc_insertion_point(field_mutable_list:TN.ChartMediatorFormulaStorage.error_custom_neg_scatterX_formulae)
  return &error_custom_neg_scatterx_formulae_;
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::_internal_error_custom_neg_scatterx_formulae(int index) const {
  return error_custom_neg_scatterx_formulae_.Get(index);
}
inline const ::TSCE::FormulaArchive& ChartMediatorFormulaStorage::error_custom_neg_scatterx_formulae(int index) const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorFormulaStorage.error_custom_neg_scatterX_formulae)
  return _internal_error_custom_neg_scatterx_formulae(index);
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::_internal_add_error_custom_neg_scatterx_formulae() {
  return error_custom_neg_scatterx_formulae_.Add();
}
inline ::TSCE::FormulaArchive* ChartMediatorFormulaStorage::add_error_custom_neg_scatterx_formulae() {
  // @@protoc_insertion_point(field_add:TN.ChartMediatorFormulaStorage.error_custom_neg_scatterX_formulae)
  return _internal_add_error_custom_neg_scatterx_formulae();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
ChartMediatorFormulaStorage::error_custom_neg_scatterx_formulae() const {
  // @@protoc_insertion_point(field_list:TN.ChartMediatorFormulaStorage.error_custom_neg_scatterX_formulae)
  return error_custom_neg_scatterx_formulae_;
}

// -------------------------------------------------------------------

// ChartMediatorArchive

// required .TSCH.ChartMediatorArchive super = 1;
inline bool ChartMediatorArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartMediatorArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSCH::ChartMediatorArchive& ChartMediatorArchive::_internal_super() const {
  const ::TSCH::ChartMediatorArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartMediatorArchive&>(
      ::TSCH::_ChartMediatorArchive_default_instance_);
}
inline const ::TSCH::ChartMediatorArchive& ChartMediatorArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorArchive.super)
  return _internal_super();
}
inline void ChartMediatorArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartMediatorArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartMediatorArchive.super)
}
inline ::TSCH::ChartMediatorArchive* ChartMediatorArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartMediatorArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartMediatorArchive* ChartMediatorArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.ChartMediatorArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartMediatorArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartMediatorArchive* ChartMediatorArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartMediatorArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartMediatorArchive* ChartMediatorArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.ChartMediatorArchive.super)
  return _internal_mutable_super();
}
inline void ChartMediatorArchive::set_allocated_super(::TSCH::ChartMediatorArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartMediatorArchive.super)
}

// required string entity_id = 2;
inline bool ChartMediatorArchive::_internal_has_entity_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartMediatorArchive::has_entity_id() const {
  return _internal_has_entity_id();
}
inline void ChartMediatorArchive::clear_entity_id() {
  entity_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartMediatorArchive::entity_id() const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorArchive.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ChartMediatorArchive::set_entity_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TN.ChartMediatorArchive.entity_id)
}
inline std::string* ChartMediatorArchive::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:TN.ChartMediatorArchive.entity_id)
  return _internal_mutable_entity_id();
}
inline const std::string& ChartMediatorArchive::_internal_entity_id() const {
  return entity_id_.Get();
}
inline void ChartMediatorArchive::_internal_set_entity_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ChartMediatorArchive::_internal_mutable_entity_id() {
  _has_bits_[0] |= 0x00000001u;
  return entity_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChartMediatorArchive::release_entity_id() {
  // @@protoc_insertion_point(field_release:TN.ChartMediatorArchive.entity_id)
  if (!_internal_has_entity_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return entity_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartMediatorArchive::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TN.ChartMediatorArchive.entity_id)
}

// optional .TN.ChartMediatorFormulaStorage formulas = 3;
inline bool ChartMediatorArchive::_internal_has_formulas() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || formulas_ != nullptr);
  return value;
}
inline bool ChartMediatorArchive::has_formulas() const {
  return _internal_has_formulas();
}
inline void ChartMediatorArchive::clear_formulas() {
  if (formulas_ != nullptr) formulas_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TN::ChartMediatorFormulaStorage& ChartMediatorArchive::_internal_formulas() const {
  const ::TN::ChartMediatorFormulaStorage* p = formulas_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::ChartMediatorFormulaStorage&>(
      ::TN::_ChartMediatorFormulaStorage_default_instance_);
}
inline const ::TN::ChartMediatorFormulaStorage& ChartMediatorArchive::formulas() const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorArchive.formulas)
  return _internal_formulas();
}
inline void ChartMediatorArchive::unsafe_arena_set_allocated_formulas(
    ::TN::ChartMediatorFormulaStorage* formulas) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulas_);
  }
  formulas_ = formulas;
  if (formulas) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartMediatorArchive.formulas)
}
inline ::TN::ChartMediatorFormulaStorage* ChartMediatorArchive::release_formulas() {
  _has_bits_[0] &= ~0x00000004u;
  ::TN::ChartMediatorFormulaStorage* temp = formulas_;
  formulas_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* ChartMediatorArchive::unsafe_arena_release_formulas() {
  // @@protoc_insertion_point(field_release:TN.ChartMediatorArchive.formulas)
  _has_bits_[0] &= ~0x00000004u;
  ::TN::ChartMediatorFormulaStorage* temp = formulas_;
  formulas_ = nullptr;
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* ChartMediatorArchive::_internal_mutable_formulas() {
  _has_bits_[0] |= 0x00000004u;
  if (formulas_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::ChartMediatorFormulaStorage>(GetArena());
    formulas_ = p;
  }
  return formulas_;
}
inline ::TN::ChartMediatorFormulaStorage* ChartMediatorArchive::mutable_formulas() {
  // @@protoc_insertion_point(field_mutable:TN.ChartMediatorArchive.formulas)
  return _internal_mutable_formulas();
}
inline void ChartMediatorArchive::set_allocated_formulas(::TN::ChartMediatorFormulaStorage* formulas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete formulas_;
  }
  if (formulas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(formulas);
    if (message_arena != submessage_arena) {
      formulas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formulas, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  formulas_ = formulas;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartMediatorArchive.formulas)
}

// optional bool columns_are_series = 4;
inline bool ChartMediatorArchive::_internal_has_columns_are_series() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChartMediatorArchive::has_columns_are_series() const {
  return _internal_has_columns_are_series();
}
inline void ChartMediatorArchive::clear_columns_are_series() {
  columns_are_series_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ChartMediatorArchive::_internal_columns_are_series() const {
  return columns_are_series_;
}
inline bool ChartMediatorArchive::columns_are_series() const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorArchive.columns_are_series)
  return _internal_columns_are_series();
}
inline void ChartMediatorArchive::_internal_set_columns_are_series(bool value) {
  _has_bits_[0] |= 0x00000008u;
  columns_are_series_ = value;
}
inline void ChartMediatorArchive::set_columns_are_series(bool value) {
  _internal_set_columns_are_series(value);
  // @@protoc_insertion_point(field_set:TN.ChartMediatorArchive.columns_are_series)
}

// optional bool is_registered_with_calc_engine = 5 [deprecated = true];
inline bool ChartMediatorArchive::_internal_has_is_registered_with_calc_engine() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChartMediatorArchive::has_is_registered_with_calc_engine() const {
  return _internal_has_is_registered_with_calc_engine();
}
inline void ChartMediatorArchive::clear_is_registered_with_calc_engine() {
  is_registered_with_calc_engine_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ChartMediatorArchive::_internal_is_registered_with_calc_engine() const {
  return is_registered_with_calc_engine_;
}
inline bool ChartMediatorArchive::is_registered_with_calc_engine() const {
  // @@protoc_insertion_point(field_get:TN.ChartMediatorArchive.is_registered_with_calc_engine)
  return _internal_is_registered_with_calc_engine();
}
inline void ChartMediatorArchive::_internal_set_is_registered_with_calc_engine(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_registered_with_calc_engine_ = value;
}
inline void ChartMediatorArchive::set_is_registered_with_calc_engine(bool value) {
  _internal_set_is_registered_with_calc_engine(value);
  // @@protoc_insertion_point(field_set:TN.ChartMediatorArchive.is_registered_with_calc_engine)
}

// -------------------------------------------------------------------

// ChartSelectionArchive

// optional .TSCE.RangeReferenceArchive reference = 1;
inline bool ChartSelectionArchive::_internal_has_reference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || reference_ != nullptr);
  return value;
}
inline bool ChartSelectionArchive::has_reference() const {
  return _internal_has_reference();
}
inline const ::TSCE::RangeReferenceArchive& ChartSelectionArchive::_internal_reference() const {
  const ::TSCE::RangeReferenceArchive* p = reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& ChartSelectionArchive::reference() const {
  // @@protoc_insertion_point(field_get:TN.ChartSelectionArchive.reference)
  return _internal_reference();
}
inline void ChartSelectionArchive::unsafe_arena_set_allocated_reference(
    ::TSCE::RangeReferenceArchive* reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_);
  }
  reference_ = reference;
  if (reference) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartSelectionArchive.reference)
}
inline ::TSCE::RangeReferenceArchive* ChartSelectionArchive::release_reference() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeReferenceArchive* temp = reference_;
  reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeReferenceArchive* ChartSelectionArchive::unsafe_arena_release_reference() {
  // @@protoc_insertion_point(field_release:TN.ChartSelectionArchive.reference)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::RangeReferenceArchive* temp = reference_;
  reference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* ChartSelectionArchive::_internal_mutable_reference() {
  _has_bits_[0] |= 0x00000001u;
  if (reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArena());
    reference_ = p;
  }
  return reference_;
}
inline ::TSCE::RangeReferenceArchive* ChartSelectionArchive::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:TN.ChartSelectionArchive.reference)
  return _internal_mutable_reference();
}
inline void ChartSelectionArchive::set_allocated_reference(::TSCE::RangeReferenceArchive* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_);
  }
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference)->GetArena();
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reference_ = reference;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartSelectionArchive.reference)
}

// optional .TSCH.ChartSelectionArchive deprecated_super = 2 [deprecated = true];
inline bool ChartSelectionArchive::_internal_has_deprecated_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_super_ != nullptr);
  return value;
}
inline bool ChartSelectionArchive::has_deprecated_super() const {
  return _internal_has_deprecated_super();
}
inline const ::TSCH::ChartSelectionArchive& ChartSelectionArchive::_internal_deprecated_super() const {
  const ::TSCH::ChartSelectionArchive* p = deprecated_super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartSelectionArchive&>(
      ::TSCH::_ChartSelectionArchive_default_instance_);
}
inline const ::TSCH::ChartSelectionArchive& ChartSelectionArchive::deprecated_super() const {
  // @@protoc_insertion_point(field_get:TN.ChartSelectionArchive.deprecated_super)
  return _internal_deprecated_super();
}
inline void ChartSelectionArchive::unsafe_arena_set_allocated_deprecated_super(
    ::TSCH::ChartSelectionArchive* deprecated_super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_super_);
  }
  deprecated_super_ = deprecated_super;
  if (deprecated_super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartSelectionArchive.deprecated_super)
}
inline ::TSCH::ChartSelectionArchive* ChartSelectionArchive::release_deprecated_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartSelectionArchive* temp = deprecated_super_;
  deprecated_super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartSelectionArchive* ChartSelectionArchive::unsafe_arena_release_deprecated_super() {
  // @@protoc_insertion_point(field_release:TN.ChartSelectionArchive.deprecated_super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartSelectionArchive* temp = deprecated_super_;
  deprecated_super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartSelectionArchive* ChartSelectionArchive::_internal_mutable_deprecated_super() {
  _has_bits_[0] |= 0x00000002u;
  if (deprecated_super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartSelectionArchive>(GetArena());
    deprecated_super_ = p;
  }
  return deprecated_super_;
}
inline ::TSCH::ChartSelectionArchive* ChartSelectionArchive::mutable_deprecated_super() {
  // @@protoc_insertion_point(field_mutable:TN.ChartSelectionArchive.deprecated_super)
  return _internal_mutable_deprecated_super();
}
inline void ChartSelectionArchive::set_allocated_deprecated_super(::TSCH::ChartSelectionArchive* deprecated_super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_super_);
  }
  if (deprecated_super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_super)->GetArena();
    if (message_arena != submessage_arena) {
      deprecated_super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  deprecated_super_ = deprecated_super;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartSelectionArchive.deprecated_super)
}

// optional .TSP.Reference chart = 3;
inline bool ChartSelectionArchive::_internal_has_chart() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || chart_ != nullptr);
  return value;
}
inline bool ChartSelectionArchive::has_chart() const {
  return _internal_has_chart();
}
inline const ::TSP::Reference& ChartSelectionArchive::_internal_chart() const {
  const ::TSP::Reference* p = chart_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartSelectionArchive::chart() const {
  // @@protoc_insertion_point(field_get:TN.ChartSelectionArchive.chart)
  return _internal_chart();
}
inline void ChartSelectionArchive::unsafe_arena_set_allocated_chart(
    ::TSP::Reference* chart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_);
  }
  chart_ = chart;
  if (chart) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartSelectionArchive.chart)
}
inline ::TSP::Reference* ChartSelectionArchive::release_chart() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = chart_;
  chart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChartSelectionArchive::unsafe_arena_release_chart() {
  // @@protoc_insertion_point(field_release:TN.ChartSelectionArchive.chart)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = chart_;
  chart_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartSelectionArchive::_internal_mutable_chart() {
  _has_bits_[0] |= 0x00000004u;
  if (chart_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    chart_ = p;
  }
  return chart_;
}
inline ::TSP::Reference* ChartSelectionArchive::mutable_chart() {
  // @@protoc_insertion_point(field_mutable:TN.ChartSelectionArchive.chart)
  return _internal_mutable_chart();
}
inline void ChartSelectionArchive::set_allocated_chart(::TSP::Reference* chart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_);
  }
  if (chart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart)->GetArena();
    if (message_arena != submessage_arena) {
      chart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  chart_ = chart;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartSelectionArchive.chart)
}

// optional .TSD.DrawableSelectionArchive super = 4;
inline bool ChartSelectionArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartSelectionArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::DrawableSelectionArchive& ChartSelectionArchive::_internal_super() const {
  const ::TSD::DrawableSelectionArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableSelectionArchive&>(
      ::TSD::_DrawableSelectionArchive_default_instance_);
}
inline const ::TSD::DrawableSelectionArchive& ChartSelectionArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.ChartSelectionArchive.super)
  return _internal_super();
}
inline void ChartSelectionArchive::unsafe_arena_set_allocated_super(
    ::TSD::DrawableSelectionArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.ChartSelectionArchive.super)
}
inline ::TSD::DrawableSelectionArchive* ChartSelectionArchive::release_super() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::DrawableSelectionArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::DrawableSelectionArchive* ChartSelectionArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.ChartSelectionArchive.super)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::DrawableSelectionArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableSelectionArchive* ChartSelectionArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000008u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableSelectionArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::DrawableSelectionArchive* ChartSelectionArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.ChartSelectionArchive.super)
  return _internal_mutable_super();
}
inline void ChartSelectionArchive::set_allocated_super(::TSD::DrawableSelectionArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.ChartSelectionArchive.super)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TN

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TN::UIStateArchive_InspectorPaneViewMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TN::UIStateArchive_InspectorPaneViewMode>() {
  return ::TN::UIStateArchive_InspectorPaneViewMode_descriptor();
}
template <> struct is_proto_enum< ::TN::PageOrder> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TN::PageOrder>() {
  return ::TN::PageOrder_descriptor();
}
template <> struct is_proto_enum< ::TN::PageLayoutDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TN::PageLayoutDirection>() {
  return ::TN::PageLayoutDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TNArchives_2eproto
