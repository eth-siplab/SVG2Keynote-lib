// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TNCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TNCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TNCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSCHArchives.pb.h"
#include "TSCHCommandArchives.pb.h"
#include "TSCEArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSDCommandArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSAArchives.pb.h"
#include "TSTArchives.pb.h"
#include "TNArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TNCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TNCommandArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[37]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TNCommandArchives_2eproto;
namespace TN {
class CanvasSelectionTransformerArchive;
struct CanvasSelectionTransformerArchiveDefaultTypeInternal;
extern CanvasSelectionTransformerArchiveDefaultTypeInternal _CanvasSelectionTransformerArchive_default_instance_;
class CommandChartMediatorSetEditingState;
struct CommandChartMediatorSetEditingStateDefaultTypeInternal;
extern CommandChartMediatorSetEditingStateDefaultTypeInternal _CommandChartMediatorSetEditingState_default_instance_;
class CommandChartMediatorSetFormula;
struct CommandChartMediatorSetFormulaDefaultTypeInternal;
extern CommandChartMediatorSetFormulaDefaultTypeInternal _CommandChartMediatorSetFormula_default_instance_;
class CommandChartMediatorSetGridDirection;
struct CommandChartMediatorSetGridDirectionDefaultTypeInternal;
extern CommandChartMediatorSetGridDirectionDefaultTypeInternal _CommandChartMediatorSetGridDirection_default_instance_;
class CommandChartMediatorSetSeriesOrder;
struct CommandChartMediatorSetSeriesOrderDefaultTypeInternal;
extern CommandChartMediatorSetSeriesOrderDefaultTypeInternal _CommandChartMediatorSetSeriesOrder_default_instance_;
class CommandChartMediatorUpdateForEntityDelete;
struct CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal;
extern CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal _CommandChartMediatorUpdateForEntityDelete_default_instance_;
class CommandDocumentInsertSheetArchive;
struct CommandDocumentInsertSheetArchiveDefaultTypeInternal;
extern CommandDocumentInsertSheetArchiveDefaultTypeInternal _CommandDocumentInsertSheetArchive_default_instance_;
class CommandDocumentRemoveSheetArchive;
struct CommandDocumentRemoveSheetArchiveDefaultTypeInternal;
extern CommandDocumentRemoveSheetArchiveDefaultTypeInternal _CommandDocumentRemoveSheetArchive_default_instance_;
class CommandDocumentReorderSheetArchive;
struct CommandDocumentReorderSheetArchiveDefaultTypeInternal;
extern CommandDocumentReorderSheetArchiveDefaultTypeInternal _CommandDocumentReorderSheetArchive_default_instance_;
class CommandEnterPrintPreviewModeArchive;
struct CommandEnterPrintPreviewModeArchiveDefaultTypeInternal;
extern CommandEnterPrintPreviewModeArchiveDefaultTypeInternal _CommandEnterPrintPreviewModeArchive_default_instance_;
class CommandExitPrintPreviewModeArchive;
struct CommandExitPrintPreviewModeArchiveDefaultTypeInternal;
extern CommandExitPrintPreviewModeArchiveDefaultTypeInternal _CommandExitPrintPreviewModeArchive_default_instance_;
class CommandFormChooseTargetTableArchive;
struct CommandFormChooseTargetTableArchiveDefaultTypeInternal;
extern CommandFormChooseTargetTableArchiveDefaultTypeInternal _CommandFormChooseTargetTableArchive_default_instance_;
class CommandInducedSheetChangeArchive;
struct CommandInducedSheetChangeArchiveDefaultTypeInternal;
extern CommandInducedSheetChangeArchiveDefaultTypeInternal _CommandInducedSheetChangeArchive_default_instance_;
class CommandReorderSidebarItemChildrenAchive;
struct CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal;
extern CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal _CommandReorderSidebarItemChildrenAchive_default_instance_;
class CommandSetContentScaleArchive;
struct CommandSetContentScaleArchiveDefaultTypeInternal;
extern CommandSetContentScaleArchiveDefaultTypeInternal _CommandSetContentScaleArchive_default_instance_;
class CommandSetDocumentPaperSize;
struct CommandSetDocumentPaperSizeDefaultTypeInternal;
extern CommandSetDocumentPaperSizeDefaultTypeInternal _CommandSetDocumentPaperSize_default_instance_;
class CommandSetHeaderFooterInsetsArchive;
struct CommandSetHeaderFooterInsetsArchiveDefaultTypeInternal;
extern CommandSetHeaderFooterInsetsArchiveDefaultTypeInternal _CommandSetHeaderFooterInsetsArchive_default_instance_;
class CommandSetPageOrderArchive;
struct CommandSetPageOrderArchiveDefaultTypeInternal;
extern CommandSetPageOrderArchiveDefaultTypeInternal _CommandSetPageOrderArchive_default_instance_;
class CommandSetPageOrientationArchive;
struct CommandSetPageOrientationArchiveDefaultTypeInternal;
extern CommandSetPageOrientationArchiveDefaultTypeInternal _CommandSetPageOrientationArchive_default_instance_;
class CommandSetPrintBackgroundsArchive;
struct CommandSetPrintBackgroundsArchiveDefaultTypeInternal;
extern CommandSetPrintBackgroundsArchiveDefaultTypeInternal _CommandSetPrintBackgroundsArchive_default_instance_;
class CommandSetPrinterMarginsArchive;
struct CommandSetPrinterMarginsArchiveDefaultTypeInternal;
extern CommandSetPrinterMarginsArchiveDefaultTypeInternal _CommandSetPrinterMarginsArchive_default_instance_;
class CommandSetRepeatingHeadersValueArchive;
struct CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal;
extern CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal _CommandSetRepeatingHeadersValueArchive_default_instance_;
class CommandSetSheetDirectionArchive;
struct CommandSetSheetDirectionArchiveDefaultTypeInternal;
extern CommandSetSheetDirectionArchiveDefaultTypeInternal _CommandSetSheetDirectionArchive_default_instance_;
class CommandSetSheetNameArchive;
struct CommandSetSheetNameArchiveDefaultTypeInternal;
extern CommandSetSheetNameArchiveDefaultTypeInternal _CommandSetSheetNameArchive_default_instance_;
class CommandSetSheetShouldPrintCommentsArchive;
struct CommandSetSheetShouldPrintCommentsArchiveDefaultTypeInternal;
extern CommandSetSheetShouldPrintCommentsArchiveDefaultTypeInternal _CommandSetSheetShouldPrintCommentsArchive_default_instance_;
class CommandSetShowPageNumbersValueArchive;
struct CommandSetShowPageNumbersValueArchiveDefaultTypeInternal;
extern CommandSetShowPageNumbersValueArchiveDefaultTypeInternal _CommandSetShowPageNumbersValueArchive_default_instance_;
class CommandSetStartPageNumberArchive;
struct CommandSetStartPageNumberArchiveDefaultTypeInternal;
extern CommandSetStartPageNumberArchiveDefaultTypeInternal _CommandSetStartPageNumberArchive_default_instance_;
class CommandSetUsingStartPageNumberArchive;
struct CommandSetUsingStartPageNumberArchiveDefaultTypeInternal;
extern CommandSetUsingStartPageNumberArchiveDefaultTypeInternal _CommandSetUsingStartPageNumberArchive_default_instance_;
class CommandSheetInsertDrawablesArchive;
struct CommandSheetInsertDrawablesArchiveDefaultTypeInternal;
extern CommandSheetInsertDrawablesArchiveDefaultTypeInternal _CommandSheetInsertDrawablesArchive_default_instance_;
class CommandSheetMoveDrawableZOrderArchive;
struct CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal;
extern CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal _CommandSheetMoveDrawableZOrderArchive_default_instance_;
class CommandSheetRemoveDrawablesArchive;
struct CommandSheetRemoveDrawablesArchiveDefaultTypeInternal;
extern CommandSheetRemoveDrawablesArchiveDefaultTypeInternal _CommandSheetRemoveDrawablesArchive_default_instance_;
class CommandSheetSetBackgroundFillArchive;
struct CommandSheetSetBackgroundFillArchiveDefaultTypeInternal;
extern CommandSheetSetBackgroundFillArchiveDefaultTypeInternal _CommandSheetSetBackgroundFillArchive_default_instance_;
class CommandSheetSetStyleArchive;
struct CommandSheetSetStyleArchiveDefaultTypeInternal;
extern CommandSheetSetStyleArchiveDefaultTypeInternal _CommandSheetSetStyleArchive_default_instance_;
class DocumentSelectionTransformerArchive;
struct DocumentSelectionTransformerArchiveDefaultTypeInternal;
extern DocumentSelectionTransformerArchiveDefaultTypeInternal _DocumentSelectionTransformerArchive_default_instance_;
class SheetChangeBaseArchive;
struct SheetChangeBaseArchiveDefaultTypeInternal;
extern SheetChangeBaseArchiveDefaultTypeInternal _SheetChangeBaseArchive_default_instance_;
class SheetChangeSheetNameArchive;
struct SheetChangeSheetNameArchiveDefaultTypeInternal;
extern SheetChangeSheetNameArchiveDefaultTypeInternal _SheetChangeSheetNameArchive_default_instance_;
class SheetSelectionTransformerArchive;
struct SheetSelectionTransformerArchiveDefaultTypeInternal;
extern SheetSelectionTransformerArchiveDefaultTypeInternal _SheetSelectionTransformerArchive_default_instance_;
}  // namespace TN
PROTOBUF_NAMESPACE_OPEN
template<> ::TN::CanvasSelectionTransformerArchive* Arena::CreateMaybeMessage<::TN::CanvasSelectionTransformerArchive>(Arena*);
template<> ::TN::CommandChartMediatorSetEditingState* Arena::CreateMaybeMessage<::TN::CommandChartMediatorSetEditingState>(Arena*);
template<> ::TN::CommandChartMediatorSetFormula* Arena::CreateMaybeMessage<::TN::CommandChartMediatorSetFormula>(Arena*);
template<> ::TN::CommandChartMediatorSetGridDirection* Arena::CreateMaybeMessage<::TN::CommandChartMediatorSetGridDirection>(Arena*);
template<> ::TN::CommandChartMediatorSetSeriesOrder* Arena::CreateMaybeMessage<::TN::CommandChartMediatorSetSeriesOrder>(Arena*);
template<> ::TN::CommandChartMediatorUpdateForEntityDelete* Arena::CreateMaybeMessage<::TN::CommandChartMediatorUpdateForEntityDelete>(Arena*);
template<> ::TN::CommandDocumentInsertSheetArchive* Arena::CreateMaybeMessage<::TN::CommandDocumentInsertSheetArchive>(Arena*);
template<> ::TN::CommandDocumentRemoveSheetArchive* Arena::CreateMaybeMessage<::TN::CommandDocumentRemoveSheetArchive>(Arena*);
template<> ::TN::CommandDocumentReorderSheetArchive* Arena::CreateMaybeMessage<::TN::CommandDocumentReorderSheetArchive>(Arena*);
template<> ::TN::CommandEnterPrintPreviewModeArchive* Arena::CreateMaybeMessage<::TN::CommandEnterPrintPreviewModeArchive>(Arena*);
template<> ::TN::CommandExitPrintPreviewModeArchive* Arena::CreateMaybeMessage<::TN::CommandExitPrintPreviewModeArchive>(Arena*);
template<> ::TN::CommandFormChooseTargetTableArchive* Arena::CreateMaybeMessage<::TN::CommandFormChooseTargetTableArchive>(Arena*);
template<> ::TN::CommandInducedSheetChangeArchive* Arena::CreateMaybeMessage<::TN::CommandInducedSheetChangeArchive>(Arena*);
template<> ::TN::CommandReorderSidebarItemChildrenAchive* Arena::CreateMaybeMessage<::TN::CommandReorderSidebarItemChildrenAchive>(Arena*);
template<> ::TN::CommandSetContentScaleArchive* Arena::CreateMaybeMessage<::TN::CommandSetContentScaleArchive>(Arena*);
template<> ::TN::CommandSetDocumentPaperSize* Arena::CreateMaybeMessage<::TN::CommandSetDocumentPaperSize>(Arena*);
template<> ::TN::CommandSetHeaderFooterInsetsArchive* Arena::CreateMaybeMessage<::TN::CommandSetHeaderFooterInsetsArchive>(Arena*);
template<> ::TN::CommandSetPageOrderArchive* Arena::CreateMaybeMessage<::TN::CommandSetPageOrderArchive>(Arena*);
template<> ::TN::CommandSetPageOrientationArchive* Arena::CreateMaybeMessage<::TN::CommandSetPageOrientationArchive>(Arena*);
template<> ::TN::CommandSetPrintBackgroundsArchive* Arena::CreateMaybeMessage<::TN::CommandSetPrintBackgroundsArchive>(Arena*);
template<> ::TN::CommandSetPrinterMarginsArchive* Arena::CreateMaybeMessage<::TN::CommandSetPrinterMarginsArchive>(Arena*);
template<> ::TN::CommandSetRepeatingHeadersValueArchive* Arena::CreateMaybeMessage<::TN::CommandSetRepeatingHeadersValueArchive>(Arena*);
template<> ::TN::CommandSetSheetDirectionArchive* Arena::CreateMaybeMessage<::TN::CommandSetSheetDirectionArchive>(Arena*);
template<> ::TN::CommandSetSheetNameArchive* Arena::CreateMaybeMessage<::TN::CommandSetSheetNameArchive>(Arena*);
template<> ::TN::CommandSetSheetShouldPrintCommentsArchive* Arena::CreateMaybeMessage<::TN::CommandSetSheetShouldPrintCommentsArchive>(Arena*);
template<> ::TN::CommandSetShowPageNumbersValueArchive* Arena::CreateMaybeMessage<::TN::CommandSetShowPageNumbersValueArchive>(Arena*);
template<> ::TN::CommandSetStartPageNumberArchive* Arena::CreateMaybeMessage<::TN::CommandSetStartPageNumberArchive>(Arena*);
template<> ::TN::CommandSetUsingStartPageNumberArchive* Arena::CreateMaybeMessage<::TN::CommandSetUsingStartPageNumberArchive>(Arena*);
template<> ::TN::CommandSheetInsertDrawablesArchive* Arena::CreateMaybeMessage<::TN::CommandSheetInsertDrawablesArchive>(Arena*);
template<> ::TN::CommandSheetMoveDrawableZOrderArchive* Arena::CreateMaybeMessage<::TN::CommandSheetMoveDrawableZOrderArchive>(Arena*);
template<> ::TN::CommandSheetRemoveDrawablesArchive* Arena::CreateMaybeMessage<::TN::CommandSheetRemoveDrawablesArchive>(Arena*);
template<> ::TN::CommandSheetSetBackgroundFillArchive* Arena::CreateMaybeMessage<::TN::CommandSheetSetBackgroundFillArchive>(Arena*);
template<> ::TN::CommandSheetSetStyleArchive* Arena::CreateMaybeMessage<::TN::CommandSheetSetStyleArchive>(Arena*);
template<> ::TN::DocumentSelectionTransformerArchive* Arena::CreateMaybeMessage<::TN::DocumentSelectionTransformerArchive>(Arena*);
template<> ::TN::SheetChangeBaseArchive* Arena::CreateMaybeMessage<::TN::SheetChangeBaseArchive>(Arena*);
template<> ::TN::SheetChangeSheetNameArchive* Arena::CreateMaybeMessage<::TN::SheetChangeSheetNameArchive>(Arena*);
template<> ::TN::SheetSelectionTransformerArchive* Arena::CreateMaybeMessage<::TN::SheetSelectionTransformerArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TN {

// ===================================================================

class CommandFormChooseTargetTableArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandFormChooseTargetTableArchive) */ {
 public:
  inline CommandFormChooseTargetTableArchive() : CommandFormChooseTargetTableArchive(nullptr) {}
  ~CommandFormChooseTargetTableArchive() override;
  explicit constexpr CommandFormChooseTargetTableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandFormChooseTargetTableArchive(const CommandFormChooseTargetTableArchive& from);
  CommandFormChooseTargetTableArchive(CommandFormChooseTargetTableArchive&& from) noexcept
    : CommandFormChooseTargetTableArchive() {
    *this = ::std::move(from);
  }

  inline CommandFormChooseTargetTableArchive& operator=(const CommandFormChooseTargetTableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandFormChooseTargetTableArchive& operator=(CommandFormChooseTargetTableArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandFormChooseTargetTableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandFormChooseTargetTableArchive* internal_default_instance() {
    return reinterpret_cast<const CommandFormChooseTargetTableArchive*>(
               &_CommandFormChooseTargetTableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandFormChooseTargetTableArchive& a, CommandFormChooseTargetTableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandFormChooseTargetTableArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandFormChooseTargetTableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandFormChooseTargetTableArchive* New() const final {
    return CreateMaybeMessage<CommandFormChooseTargetTableArchive>(nullptr);
  }

  CommandFormChooseTargetTableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandFormChooseTargetTableArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandFormChooseTargetTableArchive& from);
  void MergeFrom(const CommandFormChooseTargetTableArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandFormChooseTargetTableArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandFormChooseTargetTableArchive";
  }
  protected:
  explicit CommandFormChooseTargetTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetNameFieldNumber = 4,
    kPreviousSheetNameFieldNumber = 5,
    kSuperFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kPreviousTableIdFieldNumber = 3,
    kSheetFieldNumber = 6,
  };
  // optional string sheet_name = 4;
  bool has_sheet_name() const;
  private:
  bool _internal_has_sheet_name() const;
  public:
  void clear_sheet_name();
  const std::string& sheet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sheet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sheet_name();
  std::string* release_sheet_name();
  void set_allocated_sheet_name(std::string* sheet_name);
  private:
  const std::string& _internal_sheet_name() const;
  void _internal_set_sheet_name(const std::string& value);
  std::string* _internal_mutable_sheet_name();
  public:

  // optional string previous_sheet_name = 5;
  bool has_previous_sheet_name() const;
  private:
  bool _internal_has_previous_sheet_name() const;
  public:
  void clear_previous_sheet_name();
  const std::string& previous_sheet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_sheet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_sheet_name();
  std::string* release_previous_sheet_name();
  void set_allocated_previous_sheet_name(std::string* previous_sheet_name);
  private:
  const std::string& _internal_previous_sheet_name() const;
  void _internal_set_previous_sheet_name(const std::string& value);
  std::string* _internal_mutable_previous_sheet_name();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.CFUUIDArchive table_id = 2;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSP::CFUUIDArchive& table_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_table_id();
  ::TSP::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSP::CFUUIDArchive* table_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_table_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSP::CFUUIDArchive* table_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_table_id();

  // optional .TSP.CFUUIDArchive previous_table_id = 3;
  bool has_previous_table_id() const;
  private:
  bool _internal_has_previous_table_id() const;
  public:
  void clear_previous_table_id();
  const ::TSP::CFUUIDArchive& previous_table_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_previous_table_id();
  ::TSP::CFUUIDArchive* mutable_previous_table_id();
  void set_allocated_previous_table_id(::TSP::CFUUIDArchive* previous_table_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_previous_table_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_previous_table_id();
  public:
  void unsafe_arena_set_allocated_previous_table_id(
      ::TSP::CFUUIDArchive* previous_table_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_previous_table_id();

  // required .TSP.Reference sheet = 6;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // @@protoc_insertion_point(class_scope:TN.CommandFormChooseTargetTableArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sheet_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_sheet_name_;
  ::TSK::CommandArchive* super_;
  ::TSP::CFUUIDArchive* table_id_;
  ::TSP::CFUUIDArchive* previous_table_id_;
  ::TSP::Reference* sheet_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSheetInsertDrawablesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSheetInsertDrawablesArchive) */ {
 public:
  inline CommandSheetInsertDrawablesArchive() : CommandSheetInsertDrawablesArchive(nullptr) {}
  ~CommandSheetInsertDrawablesArchive() override;
  explicit constexpr CommandSheetInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSheetInsertDrawablesArchive(const CommandSheetInsertDrawablesArchive& from);
  CommandSheetInsertDrawablesArchive(CommandSheetInsertDrawablesArchive&& from) noexcept
    : CommandSheetInsertDrawablesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSheetInsertDrawablesArchive& operator=(const CommandSheetInsertDrawablesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSheetInsertDrawablesArchive& operator=(CommandSheetInsertDrawablesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSheetInsertDrawablesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSheetInsertDrawablesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSheetInsertDrawablesArchive*>(
               &_CommandSheetInsertDrawablesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandSheetInsertDrawablesArchive& a, CommandSheetInsertDrawablesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSheetInsertDrawablesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSheetInsertDrawablesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSheetInsertDrawablesArchive* New() const final {
    return CreateMaybeMessage<CommandSheetInsertDrawablesArchive>(nullptr);
  }

  CommandSheetInsertDrawablesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSheetInsertDrawablesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSheetInsertDrawablesArchive& from);
  void MergeFrom(const CommandSheetInsertDrawablesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSheetInsertDrawablesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSheetInsertDrawablesArchive";
  }
  protected:
  explicit CommandSheetInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 3,
    kArgsListFieldNumber = 4,
    kCustomFormatKeysFieldNumber = 6,
    kChartEntityUidForBackingTablesFieldNumber = 11,
    kBackingTablesFieldNumber = 12,
    kSuperFieldNumber = 1,
    kSheetIdFieldNumber = 2,
    kDrawableUndoObjectFieldNumber = 7,
    kFormulaRewriteCommandForUndoFieldNumber = 9,
    kForPasteFieldNumber = 5,
    kSavedNextUntitledResolverIndexFieldNumber = 10,
  };
  // repeated .TSP.Reference drawables = 3;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // repeated .TSK.AddIdOperationArgs args_list = 4;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::AddIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::AddIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::AddIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::AddIdOperationArgs& args_list(int index) const;
  ::TSK::AddIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
      args_list() const;

  // repeated .TSP.UUID custom_format_keys = 6;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // repeated .TSP.UUID chart_entity_uid_for_backing_tables = 11;
  int chart_entity_uid_for_backing_tables_size() const;
  private:
  int _internal_chart_entity_uid_for_backing_tables_size() const;
  public:
  void clear_chart_entity_uid_for_backing_tables();
  ::TSP::UUID* mutable_chart_entity_uid_for_backing_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_chart_entity_uid_for_backing_tables();
  private:
  const ::TSP::UUID& _internal_chart_entity_uid_for_backing_tables(int index) const;
  ::TSP::UUID* _internal_add_chart_entity_uid_for_backing_tables();
  public:
  const ::TSP::UUID& chart_entity_uid_for_backing_tables(int index) const;
  ::TSP::UUID* add_chart_entity_uid_for_backing_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      chart_entity_uid_for_backing_tables() const;

  // repeated .TSP.Reference backing_tables = 12;
  int backing_tables_size() const;
  private:
  int _internal_backing_tables_size() const;
  public:
  void clear_backing_tables();
  ::TSP::Reference* mutable_backing_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_backing_tables();
  private:
  const ::TSP::Reference& _internal_backing_tables(int index) const;
  ::TSP::Reference* _internal_add_backing_tables();
  public:
  const ::TSP::Reference& backing_tables(int index) const;
  ::TSP::Reference* add_backing_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      backing_tables() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID sheet_id = 2;
  bool has_sheet_id() const;
  private:
  bool _internal_has_sheet_id() const;
  public:
  void clear_sheet_id();
  const ::TSP::UUID& sheet_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_id();
  ::TSP::UUID* mutable_sheet_id();
  void set_allocated_sheet_id(::TSP::UUID* sheet_id);
  private:
  const ::TSP::UUID& _internal_sheet_id() const;
  ::TSP::UUID* _internal_mutable_sheet_id();
  public:
  void unsafe_arena_set_allocated_sheet_id(
      ::TSP::UUID* sheet_id);
  ::TSP::UUID* unsafe_arena_release_sheet_id();

  // optional .TSP.Reference drawable_undo_object = 7;
  bool has_drawable_undo_object() const;
  private:
  bool _internal_has_drawable_undo_object() const;
  public:
  void clear_drawable_undo_object();
  const ::TSP::Reference& drawable_undo_object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_drawable_undo_object();
  ::TSP::Reference* mutable_drawable_undo_object();
  void set_allocated_drawable_undo_object(::TSP::Reference* drawable_undo_object);
  private:
  const ::TSP::Reference& _internal_drawable_undo_object() const;
  ::TSP::Reference* _internal_mutable_drawable_undo_object();
  public:
  void unsafe_arena_set_allocated_drawable_undo_object(
      ::TSP::Reference* drawable_undo_object);
  ::TSP::Reference* unsafe_arena_release_drawable_undo_object();

  // optional .TSP.Reference formula_rewrite_command_for_undo = 9;
  bool has_formula_rewrite_command_for_undo() const;
  private:
  bool _internal_has_formula_rewrite_command_for_undo() const;
  public:
  void clear_formula_rewrite_command_for_undo();
  const ::TSP::Reference& formula_rewrite_command_for_undo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_formula_rewrite_command_for_undo();
  ::TSP::Reference* mutable_formula_rewrite_command_for_undo();
  void set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command_for_undo() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command_for_undo();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
      ::TSP::Reference* formula_rewrite_command_for_undo);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command_for_undo();

  // optional bool forPaste = 5;
  bool has_forpaste() const;
  private:
  bool _internal_has_forpaste() const;
  public:
  void clear_forpaste();
  bool forpaste() const;
  void set_forpaste(bool value);
  private:
  bool _internal_forpaste() const;
  void _internal_set_forpaste(bool value);
  public:

  // optional uint32 saved_next_untitled_resolver_index = 10;
  bool has_saved_next_untitled_resolver_index() const;
  private:
  bool _internal_has_saved_next_untitled_resolver_index() const;
  public:
  void clear_saved_next_untitled_resolver_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 saved_next_untitled_resolver_index() const;
  void set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_saved_next_untitled_resolver_index() const;
  void _internal_set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSheetInsertDrawablesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs > args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > chart_entity_uid_for_backing_tables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > backing_tables_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* sheet_id_;
  ::TSP::Reference* drawable_undo_object_;
  ::TSP::Reference* formula_rewrite_command_for_undo_;
  bool forpaste_;
  ::PROTOBUF_NAMESPACE_ID::uint32 saved_next_untitled_resolver_index_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSheetRemoveDrawablesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSheetRemoveDrawablesArchive) */ {
 public:
  inline CommandSheetRemoveDrawablesArchive() : CommandSheetRemoveDrawablesArchive(nullptr) {}
  ~CommandSheetRemoveDrawablesArchive() override;
  explicit constexpr CommandSheetRemoveDrawablesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSheetRemoveDrawablesArchive(const CommandSheetRemoveDrawablesArchive& from);
  CommandSheetRemoveDrawablesArchive(CommandSheetRemoveDrawablesArchive&& from) noexcept
    : CommandSheetRemoveDrawablesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSheetRemoveDrawablesArchive& operator=(const CommandSheetRemoveDrawablesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSheetRemoveDrawablesArchive& operator=(CommandSheetRemoveDrawablesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSheetRemoveDrawablesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSheetRemoveDrawablesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSheetRemoveDrawablesArchive*>(
               &_CommandSheetRemoveDrawablesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandSheetRemoveDrawablesArchive& a, CommandSheetRemoveDrawablesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSheetRemoveDrawablesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSheetRemoveDrawablesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSheetRemoveDrawablesArchive* New() const final {
    return CreateMaybeMessage<CommandSheetRemoveDrawablesArchive>(nullptr);
  }

  CommandSheetRemoveDrawablesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSheetRemoveDrawablesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSheetRemoveDrawablesArchive& from);
  void MergeFrom(const CommandSheetRemoveDrawablesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSheetRemoveDrawablesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSheetRemoveDrawablesArchive";
  }
  protected:
  explicit CommandSheetRemoveDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 3,
    kDrawablesFieldNumber = 4,
    kOldSheetSidebarOrderFieldNumber = 5,
    kChartEntityUidForBackingTablesFieldNumber = 6,
    kBackingTableUidsFieldNumber = 7,
    kSuperFieldNumber = 1,
    kSheetIdFieldNumber = 2,
  };
  // repeated .TSK.RemoveIdOperationArgs args_list = 3;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::RemoveIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::RemoveIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::RemoveIdOperationArgs& args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
      args_list() const;

  // repeated .TSP.Reference drawables = 4;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // repeated .TSP.Reference old_sheet_sidebar_order = 5;
  int old_sheet_sidebar_order_size() const;
  private:
  int _internal_old_sheet_sidebar_order_size() const;
  public:
  void clear_old_sheet_sidebar_order();
  ::TSP::Reference* mutable_old_sheet_sidebar_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_sheet_sidebar_order();
  private:
  const ::TSP::Reference& _internal_old_sheet_sidebar_order(int index) const;
  ::TSP::Reference* _internal_add_old_sheet_sidebar_order();
  public:
  const ::TSP::Reference& old_sheet_sidebar_order(int index) const;
  ::TSP::Reference* add_old_sheet_sidebar_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_sheet_sidebar_order() const;

  // repeated .TSP.UUID chart_entity_uid_for_backing_tables = 6;
  int chart_entity_uid_for_backing_tables_size() const;
  private:
  int _internal_chart_entity_uid_for_backing_tables_size() const;
  public:
  void clear_chart_entity_uid_for_backing_tables();
  ::TSP::UUID* mutable_chart_entity_uid_for_backing_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_chart_entity_uid_for_backing_tables();
  private:
  const ::TSP::UUID& _internal_chart_entity_uid_for_backing_tables(int index) const;
  ::TSP::UUID* _internal_add_chart_entity_uid_for_backing_tables();
  public:
  const ::TSP::UUID& chart_entity_uid_for_backing_tables(int index) const;
  ::TSP::UUID* add_chart_entity_uid_for_backing_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      chart_entity_uid_for_backing_tables() const;

  // repeated .TSP.UUID backing_table_uids = 7;
  int backing_table_uids_size() const;
  private:
  int _internal_backing_table_uids_size() const;
  public:
  void clear_backing_table_uids();
  ::TSP::UUID* mutable_backing_table_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_backing_table_uids();
  private:
  const ::TSP::UUID& _internal_backing_table_uids(int index) const;
  ::TSP::UUID* _internal_add_backing_table_uids();
  public:
  const ::TSP::UUID& backing_table_uids(int index) const;
  ::TSP::UUID* add_backing_table_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      backing_table_uids() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID sheet_id = 2;
  bool has_sheet_id() const;
  private:
  bool _internal_has_sheet_id() const;
  public:
  void clear_sheet_id();
  const ::TSP::UUID& sheet_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_id();
  ::TSP::UUID* mutable_sheet_id();
  void set_allocated_sheet_id(::TSP::UUID* sheet_id);
  private:
  const ::TSP::UUID& _internal_sheet_id() const;
  ::TSP::UUID* _internal_mutable_sheet_id();
  public:
  void unsafe_arena_set_allocated_sheet_id(
      ::TSP::UUID* sheet_id);
  ::TSP::UUID* unsafe_arena_release_sheet_id();

  // @@protoc_insertion_point(class_scope:TN.CommandSheetRemoveDrawablesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs > args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_sheet_sidebar_order_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > chart_entity_uid_for_backing_tables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > backing_table_uids_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* sheet_id_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSheetMoveDrawableZOrderArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSheetMoveDrawableZOrderArchive) */ {
 public:
  inline CommandSheetMoveDrawableZOrderArchive() : CommandSheetMoveDrawableZOrderArchive(nullptr) {}
  ~CommandSheetMoveDrawableZOrderArchive() override;
  explicit constexpr CommandSheetMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSheetMoveDrawableZOrderArchive(const CommandSheetMoveDrawableZOrderArchive& from);
  CommandSheetMoveDrawableZOrderArchive(CommandSheetMoveDrawableZOrderArchive&& from) noexcept
    : CommandSheetMoveDrawableZOrderArchive() {
    *this = ::std::move(from);
  }

  inline CommandSheetMoveDrawableZOrderArchive& operator=(const CommandSheetMoveDrawableZOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSheetMoveDrawableZOrderArchive& operator=(CommandSheetMoveDrawableZOrderArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSheetMoveDrawableZOrderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSheetMoveDrawableZOrderArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSheetMoveDrawableZOrderArchive*>(
               &_CommandSheetMoveDrawableZOrderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommandSheetMoveDrawableZOrderArchive& a, CommandSheetMoveDrawableZOrderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSheetMoveDrawableZOrderArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSheetMoveDrawableZOrderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSheetMoveDrawableZOrderArchive* New() const final {
    return CreateMaybeMessage<CommandSheetMoveDrawableZOrderArchive>(nullptr);
  }

  CommandSheetMoveDrawableZOrderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSheetMoveDrawableZOrderArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSheetMoveDrawableZOrderArchive& from);
  void MergeFrom(const CommandSheetMoveDrawableZOrderArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSheetMoveDrawableZOrderArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSheetMoveDrawableZOrderArchive";
  }
  protected:
  explicit CommandSheetMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSheetIdFieldNumber = 2,
  };
  // repeated .TSK.RearrangeIdOperationArgs args_list = 3;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::RearrangeIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::RearrangeIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::RearrangeIdOperationArgs& args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
      args_list() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID sheet_id = 2;
  bool has_sheet_id() const;
  private:
  bool _internal_has_sheet_id() const;
  public:
  void clear_sheet_id();
  const ::TSP::UUID& sheet_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_id();
  ::TSP::UUID* mutable_sheet_id();
  void set_allocated_sheet_id(::TSP::UUID* sheet_id);
  private:
  const ::TSP::UUID& _internal_sheet_id() const;
  ::TSP::UUID* _internal_mutable_sheet_id();
  public:
  void unsafe_arena_set_allocated_sheet_id(
      ::TSP::UUID* sheet_id);
  ::TSP::UUID* unsafe_arena_release_sheet_id();

  // @@protoc_insertion_point(class_scope:TN.CommandSheetMoveDrawableZOrderArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs > args_list_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* sheet_id_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDocumentInsertSheetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandDocumentInsertSheetArchive) */ {
 public:
  inline CommandDocumentInsertSheetArchive() : CommandDocumentInsertSheetArchive(nullptr) {}
  ~CommandDocumentInsertSheetArchive() override;
  explicit constexpr CommandDocumentInsertSheetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDocumentInsertSheetArchive(const CommandDocumentInsertSheetArchive& from);
  CommandDocumentInsertSheetArchive(CommandDocumentInsertSheetArchive&& from) noexcept
    : CommandDocumentInsertSheetArchive() {
    *this = ::std::move(from);
  }

  inline CommandDocumentInsertSheetArchive& operator=(const CommandDocumentInsertSheetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDocumentInsertSheetArchive& operator=(CommandDocumentInsertSheetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDocumentInsertSheetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDocumentInsertSheetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDocumentInsertSheetArchive*>(
               &_CommandDocumentInsertSheetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommandDocumentInsertSheetArchive& a, CommandDocumentInsertSheetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDocumentInsertSheetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDocumentInsertSheetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandDocumentInsertSheetArchive* New() const final {
    return CreateMaybeMessage<CommandDocumentInsertSheetArchive>(nullptr);
  }

  CommandDocumentInsertSheetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandDocumentInsertSheetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandDocumentInsertSheetArchive& from);
  void MergeFrom(const CommandDocumentInsertSheetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDocumentInsertSheetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandDocumentInsertSheetArchive";
  }
  protected:
  explicit CommandDocumentInsertSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 2,
    kSheetsFieldNumber = 3,
    kCustomFormatKeysFieldNumber = 5,
    kSheetUistatesFieldNumber = 7,
    kSuperFieldNumber = 1,
    kDrawableUndoObjectFieldNumber = 6,
    kAllowSameSheetNameAsFormsFieldNumber = 4,
    kForPasteFieldNumber = 8,
  };
  // repeated .TSK.AddIdOperationArgs argsList = 2;
  int argslist_size() const;
  private:
  int _internal_argslist_size() const;
  public:
  void clear_argslist();
  ::TSK::AddIdOperationArgs* mutable_argslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
      mutable_argslist();
  private:
  const ::TSK::AddIdOperationArgs& _internal_argslist(int index) const;
  ::TSK::AddIdOperationArgs* _internal_add_argslist();
  public:
  const ::TSK::AddIdOperationArgs& argslist(int index) const;
  ::TSK::AddIdOperationArgs* add_argslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
      argslist() const;

  // repeated .TSP.Reference sheets = 3;
  int sheets_size() const;
  private:
  int _internal_sheets_size() const;
  public:
  void clear_sheets();
  ::TSP::Reference* mutable_sheets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_sheets();
  private:
  const ::TSP::Reference& _internal_sheets(int index) const;
  ::TSP::Reference* _internal_add_sheets();
  public:
  const ::TSP::Reference& sheets(int index) const;
  ::TSP::Reference* add_sheets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      sheets() const;

  // repeated .TSP.UUID custom_format_keys = 5;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // repeated .TN.UUIDSheetUIStateDictionaryArchive sheet_uistates = 7;
  int sheet_uistates_size() const;
  private:
  int _internal_sheet_uistates_size() const;
  public:
  void clear_sheet_uistates();
  ::TN::UUIDSheetUIStateDictionaryArchive* mutable_sheet_uistates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >*
      mutable_sheet_uistates();
  private:
  const ::TN::UUIDSheetUIStateDictionaryArchive& _internal_sheet_uistates(int index) const;
  ::TN::UUIDSheetUIStateDictionaryArchive* _internal_add_sheet_uistates();
  public:
  const ::TN::UUIDSheetUIStateDictionaryArchive& sheet_uistates(int index) const;
  ::TN::UUIDSheetUIStateDictionaryArchive* add_sheet_uistates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >&
      sheet_uistates() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference drawable_undo_object = 6;
  bool has_drawable_undo_object() const;
  private:
  bool _internal_has_drawable_undo_object() const;
  public:
  void clear_drawable_undo_object();
  const ::TSP::Reference& drawable_undo_object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_drawable_undo_object();
  ::TSP::Reference* mutable_drawable_undo_object();
  void set_allocated_drawable_undo_object(::TSP::Reference* drawable_undo_object);
  private:
  const ::TSP::Reference& _internal_drawable_undo_object() const;
  ::TSP::Reference* _internal_mutable_drawable_undo_object();
  public:
  void unsafe_arena_set_allocated_drawable_undo_object(
      ::TSP::Reference* drawable_undo_object);
  ::TSP::Reference* unsafe_arena_release_drawable_undo_object();

  // optional bool allowSameSheetNameAsForms = 4;
  bool has_allowsamesheetnameasforms() const;
  private:
  bool _internal_has_allowsamesheetnameasforms() const;
  public:
  void clear_allowsamesheetnameasforms();
  bool allowsamesheetnameasforms() const;
  void set_allowsamesheetnameasforms(bool value);
  private:
  bool _internal_allowsamesheetnameasforms() const;
  void _internal_set_allowsamesheetnameasforms(bool value);
  public:

  // optional bool for_paste = 8;
  bool has_for_paste() const;
  private:
  bool _internal_has_for_paste() const;
  public:
  void clear_for_paste();
  bool for_paste() const;
  void set_for_paste(bool value);
  private:
  bool _internal_for_paste() const;
  void _internal_set_for_paste(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandDocumentInsertSheetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs > argslist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > sheets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive > sheet_uistates_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* drawable_undo_object_;
  bool allowsamesheetnameasforms_;
  bool for_paste_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDocumentRemoveSheetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandDocumentRemoveSheetArchive) */ {
 public:
  inline CommandDocumentRemoveSheetArchive() : CommandDocumentRemoveSheetArchive(nullptr) {}
  ~CommandDocumentRemoveSheetArchive() override;
  explicit constexpr CommandDocumentRemoveSheetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDocumentRemoveSheetArchive(const CommandDocumentRemoveSheetArchive& from);
  CommandDocumentRemoveSheetArchive(CommandDocumentRemoveSheetArchive&& from) noexcept
    : CommandDocumentRemoveSheetArchive() {
    *this = ::std::move(from);
  }

  inline CommandDocumentRemoveSheetArchive& operator=(const CommandDocumentRemoveSheetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDocumentRemoveSheetArchive& operator=(CommandDocumentRemoveSheetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDocumentRemoveSheetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDocumentRemoveSheetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDocumentRemoveSheetArchive*>(
               &_CommandDocumentRemoveSheetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandDocumentRemoveSheetArchive& a, CommandDocumentRemoveSheetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDocumentRemoveSheetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDocumentRemoveSheetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandDocumentRemoveSheetArchive* New() const final {
    return CreateMaybeMessage<CommandDocumentRemoveSheetArchive>(nullptr);
  }

  CommandDocumentRemoveSheetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandDocumentRemoveSheetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandDocumentRemoveSheetArchive& from);
  void MergeFrom(const CommandDocumentRemoveSheetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDocumentRemoveSheetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandDocumentRemoveSheetArchive";
  }
  protected:
  explicit CommandDocumentRemoveSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 2,
    kSheetsFieldNumber = 3,
    kSheetUistatesFieldNumber = 5,
    kRescueIdFieldNumber = 4,
    kSuperFieldNumber = 1,
    kIsUndoPasteFieldNumber = 6,
  };
  // repeated .TSK.RemoveIdOperationArgs argsList = 2;
  int argslist_size() const;
  private:
  int _internal_argslist_size() const;
  public:
  void clear_argslist();
  ::TSK::RemoveIdOperationArgs* mutable_argslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
      mutable_argslist();
  private:
  const ::TSK::RemoveIdOperationArgs& _internal_argslist(int index) const;
  ::TSK::RemoveIdOperationArgs* _internal_add_argslist();
  public:
  const ::TSK::RemoveIdOperationArgs& argslist(int index) const;
  ::TSK::RemoveIdOperationArgs* add_argslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
      argslist() const;

  // repeated .TSP.Reference sheets = 3;
  int sheets_size() const;
  private:
  int _internal_sheets_size() const;
  public:
  void clear_sheets();
  ::TSP::Reference* mutable_sheets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_sheets();
  private:
  const ::TSP::Reference& _internal_sheets(int index) const;
  ::TSP::Reference* _internal_add_sheets();
  public:
  const ::TSP::Reference& sheets(int index) const;
  ::TSP::Reference* add_sheets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      sheets() const;

  // repeated .TN.UUIDSheetUIStateDictionaryArchive sheet_uistates = 5;
  int sheet_uistates_size() const;
  private:
  int _internal_sheet_uistates_size() const;
  public:
  void clear_sheet_uistates();
  ::TN::UUIDSheetUIStateDictionaryArchive* mutable_sheet_uistates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >*
      mutable_sheet_uistates();
  private:
  const ::TN::UUIDSheetUIStateDictionaryArchive& _internal_sheet_uistates(int index) const;
  ::TN::UUIDSheetUIStateDictionaryArchive* _internal_add_sheet_uistates();
  public:
  const ::TN::UUIDSheetUIStateDictionaryArchive& sheet_uistates(int index) const;
  ::TN::UUIDSheetUIStateDictionaryArchive* add_sheet_uistates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >&
      sheet_uistates() const;

  // required string rescueId = 4;
  bool has_rescueid() const;
  private:
  bool _internal_has_rescueid() const;
  public:
  void clear_rescueid();
  const std::string& rescueid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rescueid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rescueid();
  std::string* release_rescueid();
  void set_allocated_rescueid(std::string* rescueid);
  private:
  const std::string& _internal_rescueid() const;
  void _internal_set_rescueid(const std::string& value);
  std::string* _internal_mutable_rescueid();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional bool is_undo_paste = 6;
  bool has_is_undo_paste() const;
  private:
  bool _internal_has_is_undo_paste() const;
  public:
  void clear_is_undo_paste();
  bool is_undo_paste() const;
  void set_is_undo_paste(bool value);
  private:
  bool _internal_is_undo_paste() const;
  void _internal_set_is_undo_paste(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandDocumentRemoveSheetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs > argslist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > sheets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive > sheet_uistates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rescueid_;
  ::TSK::CommandArchive* super_;
  bool is_undo_paste_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDocumentReorderSheetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandDocumentReorderSheetArchive) */ {
 public:
  inline CommandDocumentReorderSheetArchive() : CommandDocumentReorderSheetArchive(nullptr) {}
  ~CommandDocumentReorderSheetArchive() override;
  explicit constexpr CommandDocumentReorderSheetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDocumentReorderSheetArchive(const CommandDocumentReorderSheetArchive& from);
  CommandDocumentReorderSheetArchive(CommandDocumentReorderSheetArchive&& from) noexcept
    : CommandDocumentReorderSheetArchive() {
    *this = ::std::move(from);
  }

  inline CommandDocumentReorderSheetArchive& operator=(const CommandDocumentReorderSheetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDocumentReorderSheetArchive& operator=(CommandDocumentReorderSheetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDocumentReorderSheetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDocumentReorderSheetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDocumentReorderSheetArchive*>(
               &_CommandDocumentReorderSheetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommandDocumentReorderSheetArchive& a, CommandDocumentReorderSheetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDocumentReorderSheetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDocumentReorderSheetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandDocumentReorderSheetArchive* New() const final {
    return CreateMaybeMessage<CommandDocumentReorderSheetArchive>(nullptr);
  }

  CommandDocumentReorderSheetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandDocumentReorderSheetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandDocumentReorderSheetArchive& from);
  void MergeFrom(const CommandDocumentReorderSheetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDocumentReorderSheetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandDocumentReorderSheetArchive";
  }
  protected:
  explicit CommandDocumentReorderSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 1,
    kSuperFieldNumber = 2,
  };
  // repeated .TSK.RearrangeIdOperationArgs argsList = 1;
  int argslist_size() const;
  private:
  int _internal_argslist_size() const;
  public:
  void clear_argslist();
  ::TSK::RearrangeIdOperationArgs* mutable_argslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
      mutable_argslist();
  private:
  const ::TSK::RearrangeIdOperationArgs& _internal_argslist(int index) const;
  ::TSK::RearrangeIdOperationArgs* _internal_add_argslist();
  public:
  const ::TSK::RearrangeIdOperationArgs& argslist(int index) const;
  ::TSK::RearrangeIdOperationArgs* add_argslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
      argslist() const;

  // required .TSK.CommandArchive super = 2;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.CommandDocumentReorderSheetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs > argslist_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetSheetNameArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetSheetNameArchive) */ {
 public:
  inline CommandSetSheetNameArchive() : CommandSetSheetNameArchive(nullptr) {}
  ~CommandSetSheetNameArchive() override;
  explicit constexpr CommandSetSheetNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetSheetNameArchive(const CommandSetSheetNameArchive& from);
  CommandSetSheetNameArchive(CommandSetSheetNameArchive&& from) noexcept
    : CommandSetSheetNameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetSheetNameArchive& operator=(const CommandSetSheetNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetSheetNameArchive& operator=(CommandSetSheetNameArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetSheetNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetSheetNameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetSheetNameArchive*>(
               &_CommandSetSheetNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommandSetSheetNameArchive& a, CommandSetSheetNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetSheetNameArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetSheetNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetSheetNameArchive* New() const final {
    return CreateMaybeMessage<CommandSetSheetNameArchive>(nullptr);
  }

  CommandSetSheetNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetSheetNameArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetSheetNameArchive& from);
  void MergeFrom(const CommandSetSheetNameArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetSheetNameArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetSheetNameArchive";
  }
  protected:
  explicit CommandSetSheetNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewnameFieldNumber = 2,
    kOldnameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kSheetUidFieldNumber = 3,
  };
  // required string newname = 2;
  bool has_newname() const;
  private:
  bool _internal_has_newname() const;
  public:
  void clear_newname();
  const std::string& newname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newname();
  std::string* release_newname();
  void set_allocated_newname(std::string* newname);
  private:
  const std::string& _internal_newname() const;
  void _internal_set_newname(const std::string& value);
  std::string* _internal_mutable_newname();
  public:

  // optional string oldname = 4;
  bool has_oldname() const;
  private:
  bool _internal_has_oldname() const;
  public:
  void clear_oldname();
  const std::string& oldname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldname();
  std::string* release_oldname();
  void set_allocated_oldname(std::string* oldname);
  private:
  const std::string& _internal_oldname() const;
  void _internal_set_oldname(const std::string& value);
  std::string* _internal_mutable_oldname();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID sheet_uid = 3;
  bool has_sheet_uid() const;
  private:
  bool _internal_has_sheet_uid() const;
  public:
  void clear_sheet_uid();
  const ::TSP::UUID& sheet_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uid();
  ::TSP::UUID* mutable_sheet_uid();
  void set_allocated_sheet_uid(::TSP::UUID* sheet_uid);
  private:
  const ::TSP::UUID& _internal_sheet_uid() const;
  ::TSP::UUID* _internal_mutable_sheet_uid();
  public:
  void unsafe_arena_set_allocated_sheet_uid(
      ::TSP::UUID* sheet_uid);
  ::TSP::UUID* unsafe_arena_release_sheet_uid();

  // @@protoc_insertion_point(class_scope:TN.CommandSetSheetNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldname_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* sheet_uid_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetSheetShouldPrintCommentsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetSheetShouldPrintCommentsArchive) */ {
 public:
  inline CommandSetSheetShouldPrintCommentsArchive() : CommandSetSheetShouldPrintCommentsArchive(nullptr) {}
  ~CommandSetSheetShouldPrintCommentsArchive() override;
  explicit constexpr CommandSetSheetShouldPrintCommentsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetSheetShouldPrintCommentsArchive(const CommandSetSheetShouldPrintCommentsArchive& from);
  CommandSetSheetShouldPrintCommentsArchive(CommandSetSheetShouldPrintCommentsArchive&& from) noexcept
    : CommandSetSheetShouldPrintCommentsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetSheetShouldPrintCommentsArchive& operator=(const CommandSetSheetShouldPrintCommentsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetSheetShouldPrintCommentsArchive& operator=(CommandSetSheetShouldPrintCommentsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetSheetShouldPrintCommentsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetSheetShouldPrintCommentsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetSheetShouldPrintCommentsArchive*>(
               &_CommandSetSheetShouldPrintCommentsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CommandSetSheetShouldPrintCommentsArchive& a, CommandSetSheetShouldPrintCommentsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetSheetShouldPrintCommentsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetSheetShouldPrintCommentsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetSheetShouldPrintCommentsArchive* New() const final {
    return CreateMaybeMessage<CommandSetSheetShouldPrintCommentsArchive>(nullptr);
  }

  CommandSetSheetShouldPrintCommentsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetSheetShouldPrintCommentsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetSheetShouldPrintCommentsArchive& from);
  void MergeFrom(const CommandSetSheetShouldPrintCommentsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetSheetShouldPrintCommentsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetSheetShouldPrintCommentsArchive";
  }
  protected:
  explicit CommandSetSheetShouldPrintCommentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSheetUidFieldNumber = 3,
    kNewShouldPrintCommentsFieldNumber = 2,
    kOldShouldPrintCommentsFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID sheet_uid = 3;
  bool has_sheet_uid() const;
  private:
  bool _internal_has_sheet_uid() const;
  public:
  void clear_sheet_uid();
  const ::TSP::UUID& sheet_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uid();
  ::TSP::UUID* mutable_sheet_uid();
  void set_allocated_sheet_uid(::TSP::UUID* sheet_uid);
  private:
  const ::TSP::UUID& _internal_sheet_uid() const;
  ::TSP::UUID* _internal_mutable_sheet_uid();
  public:
  void unsafe_arena_set_allocated_sheet_uid(
      ::TSP::UUID* sheet_uid);
  ::TSP::UUID* unsafe_arena_release_sheet_uid();

  // required bool new_should_print_comments = 2;
  bool has_new_should_print_comments() const;
  private:
  bool _internal_has_new_should_print_comments() const;
  public:
  void clear_new_should_print_comments();
  bool new_should_print_comments() const;
  void set_new_should_print_comments(bool value);
  private:
  bool _internal_new_should_print_comments() const;
  void _internal_set_new_should_print_comments(bool value);
  public:

  // required bool old_should_print_comments = 4;
  bool has_old_should_print_comments() const;
  private:
  bool _internal_has_old_should_print_comments() const;
  public:
  void clear_old_should_print_comments();
  bool old_should_print_comments() const;
  void set_old_should_print_comments(bool value);
  private:
  bool _internal_old_should_print_comments() const;
  void _internal_set_old_should_print_comments(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetSheetShouldPrintCommentsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* sheet_uid_;
  bool new_should_print_comments_;
  bool old_should_print_comments_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetSheetDirectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetSheetDirectionArchive) */ {
 public:
  inline CommandSetSheetDirectionArchive() : CommandSetSheetDirectionArchive(nullptr) {}
  ~CommandSetSheetDirectionArchive() override;
  explicit constexpr CommandSetSheetDirectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetSheetDirectionArchive(const CommandSetSheetDirectionArchive& from);
  CommandSetSheetDirectionArchive(CommandSetSheetDirectionArchive&& from) noexcept
    : CommandSetSheetDirectionArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetSheetDirectionArchive& operator=(const CommandSetSheetDirectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetSheetDirectionArchive& operator=(CommandSetSheetDirectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetSheetDirectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetSheetDirectionArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetSheetDirectionArchive*>(
               &_CommandSetSheetDirectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CommandSetSheetDirectionArchive& a, CommandSetSheetDirectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetSheetDirectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetSheetDirectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetSheetDirectionArchive* New() const final {
    return CreateMaybeMessage<CommandSetSheetDirectionArchive>(nullptr);
  }

  CommandSetSheetDirectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetSheetDirectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetSheetDirectionArchive& from);
  void MergeFrom(const CommandSetSheetDirectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetSheetDirectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetSheetDirectionArchive";
  }
  protected:
  explicit CommandSetSheetDirectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSheetUidFieldNumber = 3,
    kNewDirectionFieldNumber = 2,
    kOldDirectionFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID sheet_uid = 3;
  bool has_sheet_uid() const;
  private:
  bool _internal_has_sheet_uid() const;
  public:
  void clear_sheet_uid();
  const ::TSP::UUID& sheet_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uid();
  ::TSP::UUID* mutable_sheet_uid();
  void set_allocated_sheet_uid(::TSP::UUID* sheet_uid);
  private:
  const ::TSP::UUID& _internal_sheet_uid() const;
  ::TSP::UUID* _internal_mutable_sheet_uid();
  public:
  void unsafe_arena_set_allocated_sheet_uid(
      ::TSP::UUID* sheet_uid);
  ::TSP::UUID* unsafe_arena_release_sheet_uid();

  // required .TN.PageLayoutDirection newDirection = 2;
  bool has_newdirection() const;
  private:
  bool _internal_has_newdirection() const;
  public:
  void clear_newdirection();
  ::TN::PageLayoutDirection newdirection() const;
  void set_newdirection(::TN::PageLayoutDirection value);
  private:
  ::TN::PageLayoutDirection _internal_newdirection() const;
  void _internal_set_newdirection(::TN::PageLayoutDirection value);
  public:

  // optional .TN.PageLayoutDirection oldDirection = 4;
  bool has_olddirection() const;
  private:
  bool _internal_has_olddirection() const;
  public:
  void clear_olddirection();
  ::TN::PageLayoutDirection olddirection() const;
  void set_olddirection(::TN::PageLayoutDirection value);
  private:
  ::TN::PageLayoutDirection _internal_olddirection() const;
  void _internal_set_olddirection(::TN::PageLayoutDirection value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetSheetDirectionArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* sheet_uid_;
  int newdirection_;
  int olddirection_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetPageOrientationArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetPageOrientationArchive) */ {
 public:
  inline CommandSetPageOrientationArchive() : CommandSetPageOrientationArchive(nullptr) {}
  ~CommandSetPageOrientationArchive() override;
  explicit constexpr CommandSetPageOrientationArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetPageOrientationArchive(const CommandSetPageOrientationArchive& from);
  CommandSetPageOrientationArchive(CommandSetPageOrientationArchive&& from) noexcept
    : CommandSetPageOrientationArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetPageOrientationArchive& operator=(const CommandSetPageOrientationArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetPageOrientationArchive& operator=(CommandSetPageOrientationArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetPageOrientationArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetPageOrientationArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetPageOrientationArchive*>(
               &_CommandSetPageOrientationArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommandSetPageOrientationArchive& a, CommandSetPageOrientationArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetPageOrientationArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetPageOrientationArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetPageOrientationArchive* New() const final {
    return CreateMaybeMessage<CommandSetPageOrientationArchive>(nullptr);
  }

  CommandSetPageOrientationArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetPageOrientationArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetPageOrientationArchive& from);
  void MergeFrom(const CommandSetPageOrientationArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetPageOrientationArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetPageOrientationArchive";
  }
  protected:
  explicit CommandSetPageOrientationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetUidFieldNumber = 2,
    kSuperFieldNumber = 3,
    kInPortraitPageOrientationFieldNumber = 1,
    kPrevInPortraitPageOrientationFieldNumber = 4,
  };
  // required .TSP.UUID sheet_uid = 2;
  bool has_sheet_uid() const;
  private:
  bool _internal_has_sheet_uid() const;
  public:
  void clear_sheet_uid();
  const ::TSP::UUID& sheet_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uid();
  ::TSP::UUID* mutable_sheet_uid();
  void set_allocated_sheet_uid(::TSP::UUID* sheet_uid);
  private:
  const ::TSP::UUID& _internal_sheet_uid() const;
  ::TSP::UUID* _internal_mutable_sheet_uid();
  public:
  void unsafe_arena_set_allocated_sheet_uid(
      ::TSP::UUID* sheet_uid);
  ::TSP::UUID* unsafe_arena_release_sheet_uid();

  // required .TSK.CommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool in_portrait_page_orientation = 1;
  bool has_in_portrait_page_orientation() const;
  private:
  bool _internal_has_in_portrait_page_orientation() const;
  public:
  void clear_in_portrait_page_orientation();
  bool in_portrait_page_orientation() const;
  void set_in_portrait_page_orientation(bool value);
  private:
  bool _internal_in_portrait_page_orientation() const;
  void _internal_set_in_portrait_page_orientation(bool value);
  public:

  // required bool prev_in_portrait_page_orientation = 4;
  bool has_prev_in_portrait_page_orientation() const;
  private:
  bool _internal_has_prev_in_portrait_page_orientation() const;
  public:
  void clear_prev_in_portrait_page_orientation();
  bool prev_in_portrait_page_orientation() const;
  void set_prev_in_portrait_page_orientation(bool value);
  private:
  bool _internal_prev_in_portrait_page_orientation() const;
  void _internal_set_prev_in_portrait_page_orientation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetPageOrientationArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* sheet_uid_;
  ::TSK::CommandArchive* super_;
  bool in_portrait_page_orientation_;
  bool prev_in_portrait_page_orientation_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetShowPageNumbersValueArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetShowPageNumbersValueArchive) */ {
 public:
  inline CommandSetShowPageNumbersValueArchive() : CommandSetShowPageNumbersValueArchive(nullptr) {}
  ~CommandSetShowPageNumbersValueArchive() override;
  explicit constexpr CommandSetShowPageNumbersValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetShowPageNumbersValueArchive(const CommandSetShowPageNumbersValueArchive& from);
  CommandSetShowPageNumbersValueArchive(CommandSetShowPageNumbersValueArchive&& from) noexcept
    : CommandSetShowPageNumbersValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetShowPageNumbersValueArchive& operator=(const CommandSetShowPageNumbersValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetShowPageNumbersValueArchive& operator=(CommandSetShowPageNumbersValueArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetShowPageNumbersValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetShowPageNumbersValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetShowPageNumbersValueArchive*>(
               &_CommandSetShowPageNumbersValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CommandSetShowPageNumbersValueArchive& a, CommandSetShowPageNumbersValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetShowPageNumbersValueArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetShowPageNumbersValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetShowPageNumbersValueArchive* New() const final {
    return CreateMaybeMessage<CommandSetShowPageNumbersValueArchive>(nullptr);
  }

  CommandSetShowPageNumbersValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetShowPageNumbersValueArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetShowPageNumbersValueArchive& from);
  void MergeFrom(const CommandSetShowPageNumbersValueArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetShowPageNumbersValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetShowPageNumbersValueArchive";
  }
  protected:
  explicit CommandSetShowPageNumbersValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetFieldNumber = 2,
    kSuperFieldNumber = 3,
    kShowPageNumbersFieldNumber = 1,
  };
  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSK.CommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool show_page_numbers = 1;
  bool has_show_page_numbers() const;
  private:
  bool _internal_has_show_page_numbers() const;
  public:
  void clear_show_page_numbers();
  bool show_page_numbers() const;
  void set_show_page_numbers(bool value);
  private:
  bool _internal_show_page_numbers() const;
  void _internal_set_show_page_numbers(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetShowPageNumbersValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* sheet_;
  ::TSK::CommandArchive* super_;
  bool show_page_numbers_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetRepeatingHeadersValueArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetRepeatingHeadersValueArchive) */ {
 public:
  inline CommandSetRepeatingHeadersValueArchive() : CommandSetRepeatingHeadersValueArchive(nullptr) {}
  ~CommandSetRepeatingHeadersValueArchive() override;
  explicit constexpr CommandSetRepeatingHeadersValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetRepeatingHeadersValueArchive(const CommandSetRepeatingHeadersValueArchive& from);
  CommandSetRepeatingHeadersValueArchive(CommandSetRepeatingHeadersValueArchive&& from) noexcept
    : CommandSetRepeatingHeadersValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetRepeatingHeadersValueArchive& operator=(const CommandSetRepeatingHeadersValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetRepeatingHeadersValueArchive& operator=(CommandSetRepeatingHeadersValueArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetRepeatingHeadersValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetRepeatingHeadersValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetRepeatingHeadersValueArchive*>(
               &_CommandSetRepeatingHeadersValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CommandSetRepeatingHeadersValueArchive& a, CommandSetRepeatingHeadersValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetRepeatingHeadersValueArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetRepeatingHeadersValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetRepeatingHeadersValueArchive* New() const final {
    return CreateMaybeMessage<CommandSetRepeatingHeadersValueArchive>(nullptr);
  }

  CommandSetRepeatingHeadersValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetRepeatingHeadersValueArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetRepeatingHeadersValueArchive& from);
  void MergeFrom(const CommandSetRepeatingHeadersValueArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetRepeatingHeadersValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetRepeatingHeadersValueArchive";
  }
  protected:
  explicit CommandSetRepeatingHeadersValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetFieldNumber = 2,
    kSuperFieldNumber = 3,
    kShowRepeatingHeadersFieldNumber = 1,
  };
  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // required .TSK.CommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool show_repeating_headers = 1;
  bool has_show_repeating_headers() const;
  private:
  bool _internal_has_show_repeating_headers() const;
  public:
  void clear_show_repeating_headers();
  bool show_repeating_headers() const;
  void set_show_repeating_headers(bool value);
  private:
  bool _internal_show_repeating_headers() const;
  void _internal_set_show_repeating_headers(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetRepeatingHeadersValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* sheet_;
  ::TSK::CommandArchive* super_;
  bool show_repeating_headers_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetContentScaleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetContentScaleArchive) */ {
 public:
  inline CommandSetContentScaleArchive() : CommandSetContentScaleArchive(nullptr) {}
  ~CommandSetContentScaleArchive() override;
  explicit constexpr CommandSetContentScaleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetContentScaleArchive(const CommandSetContentScaleArchive& from);
  CommandSetContentScaleArchive(CommandSetContentScaleArchive&& from) noexcept
    : CommandSetContentScaleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetContentScaleArchive& operator=(const CommandSetContentScaleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetContentScaleArchive& operator=(CommandSetContentScaleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetContentScaleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetContentScaleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetContentScaleArchive*>(
               &_CommandSetContentScaleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CommandSetContentScaleArchive& a, CommandSetContentScaleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetContentScaleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetContentScaleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetContentScaleArchive* New() const final {
    return CreateMaybeMessage<CommandSetContentScaleArchive>(nullptr);
  }

  CommandSetContentScaleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetContentScaleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetContentScaleArchive& from);
  void MergeFrom(const CommandSetContentScaleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetContentScaleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetContentScaleArchive";
  }
  protected:
  explicit CommandSetContentScaleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetUidFieldNumber = 4,
    kSuperFieldNumber = 5,
    kOldContentScaleFieldNumber = 2,
    kContentScaleFieldNumber = 3,
    kToggledAutoFitFieldNumber = 6,
  };
  // required .TSP.UUID sheet_uid = 4;
  bool has_sheet_uid() const;
  private:
  bool _internal_has_sheet_uid() const;
  public:
  void clear_sheet_uid();
  const ::TSP::UUID& sheet_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uid();
  ::TSP::UUID* mutable_sheet_uid();
  void set_allocated_sheet_uid(::TSP::UUID* sheet_uid);
  private:
  const ::TSP::UUID& _internal_sheet_uid() const;
  ::TSP::UUID* _internal_mutable_sheet_uid();
  public:
  void unsafe_arena_set_allocated_sheet_uid(
      ::TSP::UUID* sheet_uid);
  ::TSP::UUID* unsafe_arena_release_sheet_uid();

  // required .TSK.CommandArchive super = 5;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional float old_content_scale = 2;
  bool has_old_content_scale() const;
  private:
  bool _internal_has_old_content_scale() const;
  public:
  void clear_old_content_scale();
  float old_content_scale() const;
  void set_old_content_scale(float value);
  private:
  float _internal_old_content_scale() const;
  void _internal_set_old_content_scale(float value);
  public:

  // required float content_scale = 3;
  bool has_content_scale() const;
  private:
  bool _internal_has_content_scale() const;
  public:
  void clear_content_scale();
  float content_scale() const;
  void set_content_scale(float value);
  private:
  float _internal_content_scale() const;
  void _internal_set_content_scale(float value);
  public:

  // required bool toggled_auto_fit = 6;
  bool has_toggled_auto_fit() const;
  private:
  bool _internal_has_toggled_auto_fit() const;
  public:
  void clear_toggled_auto_fit();
  bool toggled_auto_fit() const;
  void set_toggled_auto_fit(bool value);
  private:
  bool _internal_toggled_auto_fit() const;
  void _internal_set_toggled_auto_fit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetContentScaleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* sheet_uid_;
  ::TSK::CommandArchive* super_;
  float old_content_scale_;
  float content_scale_;
  bool toggled_auto_fit_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetDocumentPaperSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetDocumentPaperSize) */ {
 public:
  inline CommandSetDocumentPaperSize() : CommandSetDocumentPaperSize(nullptr) {}
  ~CommandSetDocumentPaperSize() override;
  explicit constexpr CommandSetDocumentPaperSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetDocumentPaperSize(const CommandSetDocumentPaperSize& from);
  CommandSetDocumentPaperSize(CommandSetDocumentPaperSize&& from) noexcept
    : CommandSetDocumentPaperSize() {
    *this = ::std::move(from);
  }

  inline CommandSetDocumentPaperSize& operator=(const CommandSetDocumentPaperSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetDocumentPaperSize& operator=(CommandSetDocumentPaperSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetDocumentPaperSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetDocumentPaperSize* internal_default_instance() {
    return reinterpret_cast<const CommandSetDocumentPaperSize*>(
               &_CommandSetDocumentPaperSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CommandSetDocumentPaperSize& a, CommandSetDocumentPaperSize& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetDocumentPaperSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetDocumentPaperSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetDocumentPaperSize* New() const final {
    return CreateMaybeMessage<CommandSetDocumentPaperSize>(nullptr);
  }

  CommandSetDocumentPaperSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetDocumentPaperSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetDocumentPaperSize& from);
  void MergeFrom(const CommandSetDocumentPaperSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetDocumentPaperSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetDocumentPaperSize";
  }
  protected:
  explicit CommandSetDocumentPaperSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaperIdFieldNumber = 1,
    kPageSizeFieldNumber = 2,
    kSuperFieldNumber = 3,
  };
  // required string paper_id = 1;
  bool has_paper_id() const;
  private:
  bool _internal_has_paper_id() const;
  public:
  void clear_paper_id();
  const std::string& paper_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paper_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paper_id();
  std::string* release_paper_id();
  void set_allocated_paper_id(std::string* paper_id);
  private:
  const std::string& _internal_paper_id() const;
  void _internal_set_paper_id(const std::string& value);
  std::string* _internal_mutable_paper_id();
  public:

  // required .TSP.Size page_size = 2;
  bool has_page_size() const;
  private:
  bool _internal_has_page_size() const;
  public:
  void clear_page_size();
  const ::TSP::Size& page_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_page_size();
  ::TSP::Size* mutable_page_size();
  void set_allocated_page_size(::TSP::Size* page_size);
  private:
  const ::TSP::Size& _internal_page_size() const;
  ::TSP::Size* _internal_mutable_page_size();
  public:
  void unsafe_arena_set_allocated_page_size(
      ::TSP::Size* page_size);
  ::TSP::Size* unsafe_arena_release_page_size();

  // required .TSK.CommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.CommandSetDocumentPaperSize)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paper_id_;
  ::TSP::Size* page_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandEnterPrintPreviewModeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandEnterPrintPreviewModeArchive) */ {
 public:
  inline CommandEnterPrintPreviewModeArchive() : CommandEnterPrintPreviewModeArchive(nullptr) {}
  ~CommandEnterPrintPreviewModeArchive() override;
  explicit constexpr CommandEnterPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandEnterPrintPreviewModeArchive(const CommandEnterPrintPreviewModeArchive& from);
  CommandEnterPrintPreviewModeArchive(CommandEnterPrintPreviewModeArchive&& from) noexcept
    : CommandEnterPrintPreviewModeArchive() {
    *this = ::std::move(from);
  }

  inline CommandEnterPrintPreviewModeArchive& operator=(const CommandEnterPrintPreviewModeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandEnterPrintPreviewModeArchive& operator=(CommandEnterPrintPreviewModeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandEnterPrintPreviewModeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandEnterPrintPreviewModeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandEnterPrintPreviewModeArchive*>(
               &_CommandEnterPrintPreviewModeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CommandEnterPrintPreviewModeArchive& a, CommandEnterPrintPreviewModeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandEnterPrintPreviewModeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandEnterPrintPreviewModeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandEnterPrintPreviewModeArchive* New() const final {
    return CreateMaybeMessage<CommandEnterPrintPreviewModeArchive>(nullptr);
  }

  CommandEnterPrintPreviewModeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandEnterPrintPreviewModeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandEnterPrintPreviewModeArchive& from);
  void MergeFrom(const CommandEnterPrintPreviewModeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandEnterPrintPreviewModeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandEnterPrintPreviewModeArchive";
  }
  protected:
  explicit CommandEnterPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.CommandEnterPrintPreviewModeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandExitPrintPreviewModeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandExitPrintPreviewModeArchive) */ {
 public:
  inline CommandExitPrintPreviewModeArchive() : CommandExitPrintPreviewModeArchive(nullptr) {}
  ~CommandExitPrintPreviewModeArchive() override;
  explicit constexpr CommandExitPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandExitPrintPreviewModeArchive(const CommandExitPrintPreviewModeArchive& from);
  CommandExitPrintPreviewModeArchive(CommandExitPrintPreviewModeArchive&& from) noexcept
    : CommandExitPrintPreviewModeArchive() {
    *this = ::std::move(from);
  }

  inline CommandExitPrintPreviewModeArchive& operator=(const CommandExitPrintPreviewModeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandExitPrintPreviewModeArchive& operator=(CommandExitPrintPreviewModeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandExitPrintPreviewModeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandExitPrintPreviewModeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandExitPrintPreviewModeArchive*>(
               &_CommandExitPrintPreviewModeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CommandExitPrintPreviewModeArchive& a, CommandExitPrintPreviewModeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandExitPrintPreviewModeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandExitPrintPreviewModeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandExitPrintPreviewModeArchive* New() const final {
    return CreateMaybeMessage<CommandExitPrintPreviewModeArchive>(nullptr);
  }

  CommandExitPrintPreviewModeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandExitPrintPreviewModeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandExitPrintPreviewModeArchive& from);
  void MergeFrom(const CommandExitPrintPreviewModeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandExitPrintPreviewModeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandExitPrintPreviewModeArchive";
  }
  protected:
  explicit CommandExitPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.CommandExitPrintPreviewModeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetPrinterMarginsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetPrinterMarginsArchive) */ {
 public:
  inline CommandSetPrinterMarginsArchive() : CommandSetPrinterMarginsArchive(nullptr) {}
  ~CommandSetPrinterMarginsArchive() override;
  explicit constexpr CommandSetPrinterMarginsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetPrinterMarginsArchive(const CommandSetPrinterMarginsArchive& from);
  CommandSetPrinterMarginsArchive(CommandSetPrinterMarginsArchive&& from) noexcept
    : CommandSetPrinterMarginsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetPrinterMarginsArchive& operator=(const CommandSetPrinterMarginsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetPrinterMarginsArchive& operator=(CommandSetPrinterMarginsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetPrinterMarginsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetPrinterMarginsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetPrinterMarginsArchive*>(
               &_CommandSetPrinterMarginsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CommandSetPrinterMarginsArchive& a, CommandSetPrinterMarginsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetPrinterMarginsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetPrinterMarginsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetPrinterMarginsArchive* New() const final {
    return CreateMaybeMessage<CommandSetPrinterMarginsArchive>(nullptr);
  }

  CommandSetPrinterMarginsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetPrinterMarginsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetPrinterMarginsArchive& from);
  void MergeFrom(const CommandSetPrinterMarginsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetPrinterMarginsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetPrinterMarginsArchive";
  }
  protected:
  explicit CommandSetPrinterMarginsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewPrintMarginsFieldNumber = 1,
    kOldPrintMarginsFieldNumber = 2,
    kSheetUidFieldNumber = 3,
    kSuperFieldNumber = 4,
  };
  // required .TSD.EdgeInsetsArchive new_print_margins = 1;
  bool has_new_print_margins() const;
  private:
  bool _internal_has_new_print_margins() const;
  public:
  void clear_new_print_margins();
  const ::TSD::EdgeInsetsArchive& new_print_margins() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::EdgeInsetsArchive* release_new_print_margins();
  ::TSD::EdgeInsetsArchive* mutable_new_print_margins();
  void set_allocated_new_print_margins(::TSD::EdgeInsetsArchive* new_print_margins);
  private:
  const ::TSD::EdgeInsetsArchive& _internal_new_print_margins() const;
  ::TSD::EdgeInsetsArchive* _internal_mutable_new_print_margins();
  public:
  void unsafe_arena_set_allocated_new_print_margins(
      ::TSD::EdgeInsetsArchive* new_print_margins);
  ::TSD::EdgeInsetsArchive* unsafe_arena_release_new_print_margins();

  // optional .TSD.EdgeInsetsArchive old_print_margins = 2;
  bool has_old_print_margins() const;
  private:
  bool _internal_has_old_print_margins() const;
  public:
  void clear_old_print_margins();
  const ::TSD::EdgeInsetsArchive& old_print_margins() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::EdgeInsetsArchive* release_old_print_margins();
  ::TSD::EdgeInsetsArchive* mutable_old_print_margins();
  void set_allocated_old_print_margins(::TSD::EdgeInsetsArchive* old_print_margins);
  private:
  const ::TSD::EdgeInsetsArchive& _internal_old_print_margins() const;
  ::TSD::EdgeInsetsArchive* _internal_mutable_old_print_margins();
  public:
  void unsafe_arena_set_allocated_old_print_margins(
      ::TSD::EdgeInsetsArchive* old_print_margins);
  ::TSD::EdgeInsetsArchive* unsafe_arena_release_old_print_margins();

  // required .TSP.UUID sheet_uid = 3;
  bool has_sheet_uid() const;
  private:
  bool _internal_has_sheet_uid() const;
  public:
  void clear_sheet_uid();
  const ::TSP::UUID& sheet_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uid();
  ::TSP::UUID* mutable_sheet_uid();
  void set_allocated_sheet_uid(::TSP::UUID* sheet_uid);
  private:
  const ::TSP::UUID& _internal_sheet_uid() const;
  ::TSP::UUID* _internal_mutable_sheet_uid();
  public:
  void unsafe_arena_set_allocated_sheet_uid(
      ::TSP::UUID* sheet_uid);
  ::TSP::UUID* unsafe_arena_release_sheet_uid();

  // required .TSK.CommandArchive super = 4;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.CommandSetPrinterMarginsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::EdgeInsetsArchive* new_print_margins_;
  ::TSD::EdgeInsetsArchive* old_print_margins_;
  ::TSP::UUID* sheet_uid_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetPrintBackgroundsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetPrintBackgroundsArchive) */ {
 public:
  inline CommandSetPrintBackgroundsArchive() : CommandSetPrintBackgroundsArchive(nullptr) {}
  ~CommandSetPrintBackgroundsArchive() override;
  explicit constexpr CommandSetPrintBackgroundsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetPrintBackgroundsArchive(const CommandSetPrintBackgroundsArchive& from);
  CommandSetPrintBackgroundsArchive(CommandSetPrintBackgroundsArchive&& from) noexcept
    : CommandSetPrintBackgroundsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetPrintBackgroundsArchive& operator=(const CommandSetPrintBackgroundsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetPrintBackgroundsArchive& operator=(CommandSetPrintBackgroundsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetPrintBackgroundsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetPrintBackgroundsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetPrintBackgroundsArchive*>(
               &_CommandSetPrintBackgroundsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommandSetPrintBackgroundsArchive& a, CommandSetPrintBackgroundsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetPrintBackgroundsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetPrintBackgroundsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetPrintBackgroundsArchive* New() const final {
    return CreateMaybeMessage<CommandSetPrintBackgroundsArchive>(nullptr);
  }

  CommandSetPrintBackgroundsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetPrintBackgroundsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetPrintBackgroundsArchive& from);
  void MergeFrom(const CommandSetPrintBackgroundsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetPrintBackgroundsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetPrintBackgroundsArchive";
  }
  protected:
  explicit CommandSetPrintBackgroundsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetUidFieldNumber = 1,
    kSuperFieldNumber = 4,
    kPrintBackgroundsFieldNumber = 2,
    kOldPrintBackgroundsFieldNumber = 3,
  };
  // required .TSP.UUID sheet_uid = 1;
  bool has_sheet_uid() const;
  private:
  bool _internal_has_sheet_uid() const;
  public:
  void clear_sheet_uid();
  const ::TSP::UUID& sheet_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uid();
  ::TSP::UUID* mutable_sheet_uid();
  void set_allocated_sheet_uid(::TSP::UUID* sheet_uid);
  private:
  const ::TSP::UUID& _internal_sheet_uid() const;
  ::TSP::UUID* _internal_mutable_sheet_uid();
  public:
  void unsafe_arena_set_allocated_sheet_uid(
      ::TSP::UUID* sheet_uid);
  ::TSP::UUID* unsafe_arena_release_sheet_uid();

  // required .TSK.CommandArchive super = 4;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool print_backgrounds = 2;
  bool has_print_backgrounds() const;
  private:
  bool _internal_has_print_backgrounds() const;
  public:
  void clear_print_backgrounds();
  bool print_backgrounds() const;
  void set_print_backgrounds(bool value);
  private:
  bool _internal_print_backgrounds() const;
  void _internal_set_print_backgrounds(bool value);
  public:

  // required bool old_print_backgrounds = 3;
  bool has_old_print_backgrounds() const;
  private:
  bool _internal_has_old_print_backgrounds() const;
  public:
  void clear_old_print_backgrounds();
  bool old_print_backgrounds() const;
  void set_old_print_backgrounds(bool value);
  private:
  bool _internal_old_print_backgrounds() const;
  void _internal_set_old_print_backgrounds(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetPrintBackgroundsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* sheet_uid_;
  ::TSK::CommandArchive* super_;
  bool print_backgrounds_;
  bool old_print_backgrounds_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetHeaderFooterInsetsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetHeaderFooterInsetsArchive) */ {
 public:
  inline CommandSetHeaderFooterInsetsArchive() : CommandSetHeaderFooterInsetsArchive(nullptr) {}
  ~CommandSetHeaderFooterInsetsArchive() override;
  explicit constexpr CommandSetHeaderFooterInsetsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetHeaderFooterInsetsArchive(const CommandSetHeaderFooterInsetsArchive& from);
  CommandSetHeaderFooterInsetsArchive(CommandSetHeaderFooterInsetsArchive&& from) noexcept
    : CommandSetHeaderFooterInsetsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetHeaderFooterInsetsArchive& operator=(const CommandSetHeaderFooterInsetsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetHeaderFooterInsetsArchive& operator=(CommandSetHeaderFooterInsetsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetHeaderFooterInsetsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetHeaderFooterInsetsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetHeaderFooterInsetsArchive*>(
               &_CommandSetHeaderFooterInsetsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommandSetHeaderFooterInsetsArchive& a, CommandSetHeaderFooterInsetsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetHeaderFooterInsetsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetHeaderFooterInsetsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetHeaderFooterInsetsArchive* New() const final {
    return CreateMaybeMessage<CommandSetHeaderFooterInsetsArchive>(nullptr);
  }

  CommandSetHeaderFooterInsetsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetHeaderFooterInsetsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetHeaderFooterInsetsArchive& from);
  void MergeFrom(const CommandSetHeaderFooterInsetsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetHeaderFooterInsetsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetHeaderFooterInsetsArchive";
  }
  protected:
  explicit CommandSetHeaderFooterInsetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetUidFieldNumber = 5,
    kSuperFieldNumber = 6,
    kOldHeaderInsetFieldNumber = 1,
    kOldFooterInsetFieldNumber = 2,
    kHeaderInsetFieldNumber = 3,
    kFooterInsetFieldNumber = 4,
  };
  // required .TSP.UUID sheet_uid = 5;
  bool has_sheet_uid() const;
  private:
  bool _internal_has_sheet_uid() const;
  public:
  void clear_sheet_uid();
  const ::TSP::UUID& sheet_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uid();
  ::TSP::UUID* mutable_sheet_uid();
  void set_allocated_sheet_uid(::TSP::UUID* sheet_uid);
  private:
  const ::TSP::UUID& _internal_sheet_uid() const;
  ::TSP::UUID* _internal_mutable_sheet_uid();
  public:
  void unsafe_arena_set_allocated_sheet_uid(
      ::TSP::UUID* sheet_uid);
  ::TSP::UUID* unsafe_arena_release_sheet_uid();

  // required .TSK.CommandArchive super = 6;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional float old_header_inset = 1;
  bool has_old_header_inset() const;
  private:
  bool _internal_has_old_header_inset() const;
  public:
  void clear_old_header_inset();
  float old_header_inset() const;
  void set_old_header_inset(float value);
  private:
  float _internal_old_header_inset() const;
  void _internal_set_old_header_inset(float value);
  public:

  // optional float old_footer_inset = 2;
  bool has_old_footer_inset() const;
  private:
  bool _internal_has_old_footer_inset() const;
  public:
  void clear_old_footer_inset();
  float old_footer_inset() const;
  void set_old_footer_inset(float value);
  private:
  float _internal_old_footer_inset() const;
  void _internal_set_old_footer_inset(float value);
  public:

  // required float header_inset = 3;
  bool has_header_inset() const;
  private:
  bool _internal_has_header_inset() const;
  public:
  void clear_header_inset();
  float header_inset() const;
  void set_header_inset(float value);
  private:
  float _internal_header_inset() const;
  void _internal_set_header_inset(float value);
  public:

  // required float footer_inset = 4;
  bool has_footer_inset() const;
  private:
  bool _internal_has_footer_inset() const;
  public:
  void clear_footer_inset();
  float footer_inset() const;
  void set_footer_inset(float value);
  private:
  float _internal_footer_inset() const;
  void _internal_set_footer_inset(float value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetHeaderFooterInsetsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* sheet_uid_;
  ::TSK::CommandArchive* super_;
  float old_header_inset_;
  float old_footer_inset_;
  float header_inset_;
  float footer_inset_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetPageOrderArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetPageOrderArchive) */ {
 public:
  inline CommandSetPageOrderArchive() : CommandSetPageOrderArchive(nullptr) {}
  ~CommandSetPageOrderArchive() override;
  explicit constexpr CommandSetPageOrderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetPageOrderArchive(const CommandSetPageOrderArchive& from);
  CommandSetPageOrderArchive(CommandSetPageOrderArchive&& from) noexcept
    : CommandSetPageOrderArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetPageOrderArchive& operator=(const CommandSetPageOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetPageOrderArchive& operator=(CommandSetPageOrderArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetPageOrderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetPageOrderArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetPageOrderArchive*>(
               &_CommandSetPageOrderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CommandSetPageOrderArchive& a, CommandSetPageOrderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetPageOrderArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetPageOrderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetPageOrderArchive* New() const final {
    return CreateMaybeMessage<CommandSetPageOrderArchive>(nullptr);
  }

  CommandSetPageOrderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetPageOrderArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetPageOrderArchive& from);
  void MergeFrom(const CommandSetPageOrderArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetPageOrderArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetPageOrderArchive";
  }
  protected:
  explicit CommandSetPageOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetUidFieldNumber = 3,
    kSuperFieldNumber = 4,
    kOldPageOrderFieldNumber = 1,
    kPageOrderFieldNumber = 2,
  };
  // required .TSP.UUID sheet_uid = 3;
  bool has_sheet_uid() const;
  private:
  bool _internal_has_sheet_uid() const;
  public:
  void clear_sheet_uid();
  const ::TSP::UUID& sheet_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uid();
  ::TSP::UUID* mutable_sheet_uid();
  void set_allocated_sheet_uid(::TSP::UUID* sheet_uid);
  private:
  const ::TSP::UUID& _internal_sheet_uid() const;
  ::TSP::UUID* _internal_mutable_sheet_uid();
  public:
  void unsafe_arena_set_allocated_sheet_uid(
      ::TSP::UUID* sheet_uid);
  ::TSP::UUID* unsafe_arena_release_sheet_uid();

  // required .TSK.CommandArchive super = 4;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required uint32 old_page_order = 1;
  bool has_old_page_order() const;
  private:
  bool _internal_has_old_page_order() const;
  public:
  void clear_old_page_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_page_order() const;
  void set_old_page_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_page_order() const;
  void _internal_set_old_page_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 page_order = 2;
  bool has_page_order() const;
  private:
  bool _internal_has_page_order() const;
  public:
  void clear_page_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_order() const;
  void set_page_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_order() const;
  void _internal_set_page_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetPageOrderArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* sheet_uid_;
  ::TSK::CommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_page_order_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_order_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetUsingStartPageNumberArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetUsingStartPageNumberArchive) */ {
 public:
  inline CommandSetUsingStartPageNumberArchive() : CommandSetUsingStartPageNumberArchive(nullptr) {}
  ~CommandSetUsingStartPageNumberArchive() override;
  explicit constexpr CommandSetUsingStartPageNumberArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetUsingStartPageNumberArchive(const CommandSetUsingStartPageNumberArchive& from);
  CommandSetUsingStartPageNumberArchive(CommandSetUsingStartPageNumberArchive&& from) noexcept
    : CommandSetUsingStartPageNumberArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetUsingStartPageNumberArchive& operator=(const CommandSetUsingStartPageNumberArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetUsingStartPageNumberArchive& operator=(CommandSetUsingStartPageNumberArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetUsingStartPageNumberArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetUsingStartPageNumberArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetUsingStartPageNumberArchive*>(
               &_CommandSetUsingStartPageNumberArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CommandSetUsingStartPageNumberArchive& a, CommandSetUsingStartPageNumberArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetUsingStartPageNumberArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetUsingStartPageNumberArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetUsingStartPageNumberArchive* New() const final {
    return CreateMaybeMessage<CommandSetUsingStartPageNumberArchive>(nullptr);
  }

  CommandSetUsingStartPageNumberArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetUsingStartPageNumberArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetUsingStartPageNumberArchive& from);
  void MergeFrom(const CommandSetUsingStartPageNumberArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetUsingStartPageNumberArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetUsingStartPageNumberArchive";
  }
  protected:
  explicit CommandSetUsingStartPageNumberArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetUidFieldNumber = 2,
    kSuperFieldNumber = 3,
    kUsingStartPageNumberFieldNumber = 1,
    kPrevUsingStartPageNumberFieldNumber = 4,
  };
  // required .TSP.UUID sheet_uid = 2;
  bool has_sheet_uid() const;
  private:
  bool _internal_has_sheet_uid() const;
  public:
  void clear_sheet_uid();
  const ::TSP::UUID& sheet_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uid();
  ::TSP::UUID* mutable_sheet_uid();
  void set_allocated_sheet_uid(::TSP::UUID* sheet_uid);
  private:
  const ::TSP::UUID& _internal_sheet_uid() const;
  ::TSP::UUID* _internal_mutable_sheet_uid();
  public:
  void unsafe_arena_set_allocated_sheet_uid(
      ::TSP::UUID* sheet_uid);
  ::TSP::UUID* unsafe_arena_release_sheet_uid();

  // required .TSK.CommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool using_start_page_number = 1;
  bool has_using_start_page_number() const;
  private:
  bool _internal_has_using_start_page_number() const;
  public:
  void clear_using_start_page_number();
  bool using_start_page_number() const;
  void set_using_start_page_number(bool value);
  private:
  bool _internal_using_start_page_number() const;
  void _internal_set_using_start_page_number(bool value);
  public:

  // required bool prev_using_start_page_number = 4;
  bool has_prev_using_start_page_number() const;
  private:
  bool _internal_has_prev_using_start_page_number() const;
  public:
  void clear_prev_using_start_page_number();
  bool prev_using_start_page_number() const;
  void set_prev_using_start_page_number(bool value);
  private:
  bool _internal_prev_using_start_page_number() const;
  void _internal_set_prev_using_start_page_number(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetUsingStartPageNumberArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* sheet_uid_;
  ::TSK::CommandArchive* super_;
  bool using_start_page_number_;
  bool prev_using_start_page_number_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetStartPageNumberArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSetStartPageNumberArchive) */ {
 public:
  inline CommandSetStartPageNumberArchive() : CommandSetStartPageNumberArchive(nullptr) {}
  ~CommandSetStartPageNumberArchive() override;
  explicit constexpr CommandSetStartPageNumberArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetStartPageNumberArchive(const CommandSetStartPageNumberArchive& from);
  CommandSetStartPageNumberArchive(CommandSetStartPageNumberArchive&& from) noexcept
    : CommandSetStartPageNumberArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetStartPageNumberArchive& operator=(const CommandSetStartPageNumberArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetStartPageNumberArchive& operator=(CommandSetStartPageNumberArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetStartPageNumberArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetStartPageNumberArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetStartPageNumberArchive*>(
               &_CommandSetStartPageNumberArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CommandSetStartPageNumberArchive& a, CommandSetStartPageNumberArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetStartPageNumberArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetStartPageNumberArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetStartPageNumberArchive* New() const final {
    return CreateMaybeMessage<CommandSetStartPageNumberArchive>(nullptr);
  }

  CommandSetStartPageNumberArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetStartPageNumberArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSetStartPageNumberArchive& from);
  void MergeFrom(const CommandSetStartPageNumberArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetStartPageNumberArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSetStartPageNumberArchive";
  }
  protected:
  explicit CommandSetStartPageNumberArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetUidFieldNumber = 3,
    kSuperFieldNumber = 4,
    kOldStartPageNumberFieldNumber = 1,
    kStartPageNumberFieldNumber = 2,
  };
  // required .TSP.UUID sheet_uid = 3;
  bool has_sheet_uid() const;
  private:
  bool _internal_has_sheet_uid() const;
  public:
  void clear_sheet_uid();
  const ::TSP::UUID& sheet_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uid();
  ::TSP::UUID* mutable_sheet_uid();
  void set_allocated_sheet_uid(::TSP::UUID* sheet_uid);
  private:
  const ::TSP::UUID& _internal_sheet_uid() const;
  ::TSP::UUID* _internal_mutable_sheet_uid();
  public:
  void unsafe_arena_set_allocated_sheet_uid(
      ::TSP::UUID* sheet_uid);
  ::TSP::UUID* unsafe_arena_release_sheet_uid();

  // required .TSK.CommandArchive super = 4;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required int32 old_start_page_number = 1;
  bool has_old_start_page_number() const;
  private:
  bool _internal_has_old_start_page_number() const;
  public:
  void clear_old_start_page_number();
  ::PROTOBUF_NAMESPACE_ID::int32 old_start_page_number() const;
  void set_old_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_old_start_page_number() const;
  void _internal_set_old_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 start_page_number = 2;
  bool has_start_page_number() const;
  private:
  bool _internal_has_start_page_number() const;
  public:
  void clear_start_page_number();
  ::PROTOBUF_NAMESPACE_ID::int32 start_page_number() const;
  void set_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_page_number() const;
  void _internal_set_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandSetStartPageNumberArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* sheet_uid_;
  ::TSK::CommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::int32 old_start_page_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_page_number_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReorderSidebarItemChildrenAchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandReorderSidebarItemChildrenAchive) */ {
 public:
  inline CommandReorderSidebarItemChildrenAchive() : CommandReorderSidebarItemChildrenAchive(nullptr) {}
  ~CommandReorderSidebarItemChildrenAchive() override;
  explicit constexpr CommandReorderSidebarItemChildrenAchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReorderSidebarItemChildrenAchive(const CommandReorderSidebarItemChildrenAchive& from);
  CommandReorderSidebarItemChildrenAchive(CommandReorderSidebarItemChildrenAchive&& from) noexcept
    : CommandReorderSidebarItemChildrenAchive() {
    *this = ::std::move(from);
  }

  inline CommandReorderSidebarItemChildrenAchive& operator=(const CommandReorderSidebarItemChildrenAchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReorderSidebarItemChildrenAchive& operator=(CommandReorderSidebarItemChildrenAchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReorderSidebarItemChildrenAchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReorderSidebarItemChildrenAchive* internal_default_instance() {
    return reinterpret_cast<const CommandReorderSidebarItemChildrenAchive*>(
               &_CommandReorderSidebarItemChildrenAchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CommandReorderSidebarItemChildrenAchive& a, CommandReorderSidebarItemChildrenAchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReorderSidebarItemChildrenAchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReorderSidebarItemChildrenAchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandReorderSidebarItemChildrenAchive* New() const final {
    return CreateMaybeMessage<CommandReorderSidebarItemChildrenAchive>(nullptr);
  }

  CommandReorderSidebarItemChildrenAchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandReorderSidebarItemChildrenAchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandReorderSidebarItemChildrenAchive& from);
  void MergeFrom(const CommandReorderSidebarItemChildrenAchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReorderSidebarItemChildrenAchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandReorderSidebarItemChildrenAchive";
  }
  protected:
  explicit CommandReorderSidebarItemChildrenAchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldChildrenFieldNumber = 3,
    kNewChildrenFieldNumber = 4,
    kSuperFieldNumber = 1,
    kSheetFieldNumber = 2,
  };
  // repeated .TSP.Reference old_children = 3;
  int old_children_size() const;
  private:
  int _internal_old_children_size() const;
  public:
  void clear_old_children();
  ::TSP::Reference* mutable_old_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_children();
  private:
  const ::TSP::Reference& _internal_old_children(int index) const;
  ::TSP::Reference* _internal_add_old_children();
  public:
  const ::TSP::Reference& old_children(int index) const;
  ::TSP::Reference* add_old_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_children() const;

  // repeated .TSP.Reference new_children = 4;
  int new_children_size() const;
  private:
  int _internal_new_children_size() const;
  public:
  void clear_new_children();
  ::TSP::Reference* mutable_new_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_new_children();
  private:
  const ::TSP::Reference& _internal_new_children(int index) const;
  ::TSP::Reference* _internal_add_new_children();
  public:
  const ::TSP::Reference& new_children(int index) const;
  ::TSP::Reference* add_new_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      new_children() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const ::TSP::Reference& sheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_sheet();
  ::TSP::Reference* mutable_sheet();
  void set_allocated_sheet(::TSP::Reference* sheet);
  private:
  const ::TSP::Reference& _internal_sheet() const;
  ::TSP::Reference* _internal_mutable_sheet();
  public:
  void unsafe_arena_set_allocated_sheet(
      ::TSP::Reference* sheet);
  ::TSP::Reference* unsafe_arena_release_sheet();

  // @@protoc_insertion_point(class_scope:TN.CommandReorderSidebarItemChildrenAchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_children_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > new_children_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* sheet_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChartMediatorSetEditingState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandChartMediatorSetEditingState) */ {
 public:
  inline CommandChartMediatorSetEditingState() : CommandChartMediatorSetEditingState(nullptr) {}
  ~CommandChartMediatorSetEditingState() override;
  explicit constexpr CommandChartMediatorSetEditingState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChartMediatorSetEditingState(const CommandChartMediatorSetEditingState& from);
  CommandChartMediatorSetEditingState(CommandChartMediatorSetEditingState&& from) noexcept
    : CommandChartMediatorSetEditingState() {
    *this = ::std::move(from);
  }

  inline CommandChartMediatorSetEditingState& operator=(const CommandChartMediatorSetEditingState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChartMediatorSetEditingState& operator=(CommandChartMediatorSetEditingState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChartMediatorSetEditingState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChartMediatorSetEditingState* internal_default_instance() {
    return reinterpret_cast<const CommandChartMediatorSetEditingState*>(
               &_CommandChartMediatorSetEditingState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CommandChartMediatorSetEditingState& a, CommandChartMediatorSetEditingState& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChartMediatorSetEditingState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChartMediatorSetEditingState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandChartMediatorSetEditingState* New() const final {
    return CreateMaybeMessage<CommandChartMediatorSetEditingState>(nullptr);
  }

  CommandChartMediatorSetEditingState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandChartMediatorSetEditingState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandChartMediatorSetEditingState& from);
  void MergeFrom(const CommandChartMediatorSetEditingState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChartMediatorSetEditingState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandChartMediatorSetEditingState";
  }
  protected:
  explicit CommandChartMediatorSetEditingState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldFormulasFieldNumber = 3,
    kNewFormulasFieldNumber = 4,
    kOldDirectionFieldNumber = 5,
    kNewDirectionFieldNumber = 6,
    kOldScatterFormatFieldNumber = 7,
    kNewScatterFormatFieldNumber = 8,
    kForFormulaRewriteFieldNumber = 9,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
  bool has_old_formulas() const;
  private:
  bool _internal_has_old_formulas() const;
  public:
  void clear_old_formulas();
  const ::TN::ChartMediatorFormulaStorage& old_formulas() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::ChartMediatorFormulaStorage* release_old_formulas();
  ::TN::ChartMediatorFormulaStorage* mutable_old_formulas();
  void set_allocated_old_formulas(::TN::ChartMediatorFormulaStorage* old_formulas);
  private:
  const ::TN::ChartMediatorFormulaStorage& _internal_old_formulas() const;
  ::TN::ChartMediatorFormulaStorage* _internal_mutable_old_formulas();
  public:
  void unsafe_arena_set_allocated_old_formulas(
      ::TN::ChartMediatorFormulaStorage* old_formulas);
  ::TN::ChartMediatorFormulaStorage* unsafe_arena_release_old_formulas();

  // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
  bool has_new_formulas() const;
  private:
  bool _internal_has_new_formulas() const;
  public:
  void clear_new_formulas();
  const ::TN::ChartMediatorFormulaStorage& new_formulas() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::ChartMediatorFormulaStorage* release_new_formulas();
  ::TN::ChartMediatorFormulaStorage* mutable_new_formulas();
  void set_allocated_new_formulas(::TN::ChartMediatorFormulaStorage* new_formulas);
  private:
  const ::TN::ChartMediatorFormulaStorage& _internal_new_formulas() const;
  ::TN::ChartMediatorFormulaStorage* _internal_mutable_new_formulas();
  public:
  void unsafe_arena_set_allocated_new_formulas(
      ::TN::ChartMediatorFormulaStorage* new_formulas);
  ::TN::ChartMediatorFormulaStorage* unsafe_arena_release_new_formulas();

  // optional int32 old_direction = 5;
  bool has_old_direction() const;
  private:
  bool _internal_has_old_direction() const;
  public:
  void clear_old_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 old_direction() const;
  void set_old_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_old_direction() const;
  void _internal_set_old_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 new_direction = 6;
  bool has_new_direction() const;
  private:
  bool _internal_has_new_direction() const;
  public:
  void clear_new_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 new_direction() const;
  void set_new_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_direction() const;
  void _internal_set_new_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 old_scatter_format = 7;
  bool has_old_scatter_format() const;
  private:
  bool _internal_has_old_scatter_format() const;
  public:
  void clear_old_scatter_format();
  ::PROTOBUF_NAMESPACE_ID::int32 old_scatter_format() const;
  void set_old_scatter_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_old_scatter_format() const;
  void _internal_set_old_scatter_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 new_scatter_format = 8;
  bool has_new_scatter_format() const;
  private:
  bool _internal_has_new_scatter_format() const;
  public:
  void clear_new_scatter_format();
  ::PROTOBUF_NAMESPACE_ID::int32 new_scatter_format() const;
  void set_new_scatter_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_scatter_format() const;
  void _internal_set_new_scatter_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool for_formula_rewrite = 9;
  bool has_for_formula_rewrite() const;
  private:
  bool _internal_has_for_formula_rewrite() const;
  public:
  void clear_for_formula_rewrite();
  bool for_formula_rewrite() const;
  void set_for_formula_rewrite(bool value);
  private:
  bool _internal_for_formula_rewrite() const;
  void _internal_set_for_formula_rewrite(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandChartMediatorSetEditingState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::TN::ChartMediatorFormulaStorage* old_formulas_;
  ::TN::ChartMediatorFormulaStorage* new_formulas_;
  ::PROTOBUF_NAMESPACE_ID::int32 old_direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 old_scatter_format_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_scatter_format_;
  bool for_formula_rewrite_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChartMediatorSetGridDirection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandChartMediatorSetGridDirection) */ {
 public:
  inline CommandChartMediatorSetGridDirection() : CommandChartMediatorSetGridDirection(nullptr) {}
  ~CommandChartMediatorSetGridDirection() override;
  explicit constexpr CommandChartMediatorSetGridDirection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChartMediatorSetGridDirection(const CommandChartMediatorSetGridDirection& from);
  CommandChartMediatorSetGridDirection(CommandChartMediatorSetGridDirection&& from) noexcept
    : CommandChartMediatorSetGridDirection() {
    *this = ::std::move(from);
  }

  inline CommandChartMediatorSetGridDirection& operator=(const CommandChartMediatorSetGridDirection& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChartMediatorSetGridDirection& operator=(CommandChartMediatorSetGridDirection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChartMediatorSetGridDirection& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChartMediatorSetGridDirection* internal_default_instance() {
    return reinterpret_cast<const CommandChartMediatorSetGridDirection*>(
               &_CommandChartMediatorSetGridDirection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CommandChartMediatorSetGridDirection& a, CommandChartMediatorSetGridDirection& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChartMediatorSetGridDirection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChartMediatorSetGridDirection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandChartMediatorSetGridDirection* New() const final {
    return CreateMaybeMessage<CommandChartMediatorSetGridDirection>(nullptr);
  }

  CommandChartMediatorSetGridDirection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandChartMediatorSetGridDirection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandChartMediatorSetGridDirection& from);
  void MergeFrom(const CommandChartMediatorSetGridDirection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChartMediatorSetGridDirection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandChartMediatorSetGridDirection";
  }
  protected:
  explicit CommandChartMediatorSetGridDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldFormulaStorageFieldNumber = 4,
    kOldDirectionFieldNumber = 2,
    kNewDirectionFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TN.ChartMediatorFormulaStorage old_formula_storage = 4;
  bool has_old_formula_storage() const;
  private:
  bool _internal_has_old_formula_storage() const;
  public:
  void clear_old_formula_storage();
  const ::TN::ChartMediatorFormulaStorage& old_formula_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::ChartMediatorFormulaStorage* release_old_formula_storage();
  ::TN::ChartMediatorFormulaStorage* mutable_old_formula_storage();
  void set_allocated_old_formula_storage(::TN::ChartMediatorFormulaStorage* old_formula_storage);
  private:
  const ::TN::ChartMediatorFormulaStorage& _internal_old_formula_storage() const;
  ::TN::ChartMediatorFormulaStorage* _internal_mutable_old_formula_storage();
  public:
  void unsafe_arena_set_allocated_old_formula_storage(
      ::TN::ChartMediatorFormulaStorage* old_formula_storage);
  ::TN::ChartMediatorFormulaStorage* unsafe_arena_release_old_formula_storage();

  // required uint32 old_direction = 2;
  bool has_old_direction() const;
  private:
  bool _internal_has_old_direction() const;
  public:
  void clear_old_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_direction() const;
  void set_old_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_direction() const;
  void _internal_set_old_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 new_direction = 3;
  bool has_new_direction() const;
  private:
  bool _internal_has_new_direction() const;
  public:
  void clear_new_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_direction() const;
  void set_new_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_direction() const;
  void _internal_set_new_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandChartMediatorSetGridDirection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::TN::ChartMediatorFormulaStorage* old_formula_storage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_direction_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChartMediatorSetSeriesOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandChartMediatorSetSeriesOrder) */ {
 public:
  inline CommandChartMediatorSetSeriesOrder() : CommandChartMediatorSetSeriesOrder(nullptr) {}
  ~CommandChartMediatorSetSeriesOrder() override;
  explicit constexpr CommandChartMediatorSetSeriesOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChartMediatorSetSeriesOrder(const CommandChartMediatorSetSeriesOrder& from);
  CommandChartMediatorSetSeriesOrder(CommandChartMediatorSetSeriesOrder&& from) noexcept
    : CommandChartMediatorSetSeriesOrder() {
    *this = ::std::move(from);
  }

  inline CommandChartMediatorSetSeriesOrder& operator=(const CommandChartMediatorSetSeriesOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChartMediatorSetSeriesOrder& operator=(CommandChartMediatorSetSeriesOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChartMediatorSetSeriesOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChartMediatorSetSeriesOrder* internal_default_instance() {
    return reinterpret_cast<const CommandChartMediatorSetSeriesOrder*>(
               &_CommandChartMediatorSetSeriesOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CommandChartMediatorSetSeriesOrder& a, CommandChartMediatorSetSeriesOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChartMediatorSetSeriesOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChartMediatorSetSeriesOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandChartMediatorSetSeriesOrder* New() const final {
    return CreateMaybeMessage<CommandChartMediatorSetSeriesOrder>(nullptr);
  }

  CommandChartMediatorSetSeriesOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandChartMediatorSetSeriesOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandChartMediatorSetSeriesOrder& from);
  void MergeFrom(const CommandChartMediatorSetSeriesOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChartMediatorSetSeriesOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandChartMediatorSetSeriesOrder";
  }
  protected:
  explicit CommandChartMediatorSetSeriesOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSeriesIdFieldNumber = 2,
    kPrecedingSeriesIdFieldNumber = 3,
    kInverseSeriesIdFieldNumber = 4,
    kInversePrecedingSeriesIdFieldNumber = 5,
    kOldFormulaStorageFieldNumber = 8,
    kUndoCurrentIndexFieldNumber = 6,
    kUndoNewIndexFieldNumber = 7,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUID series_id = 2;
  bool has_series_id() const;
  private:
  bool _internal_has_series_id() const;
  public:
  void clear_series_id();
  const ::TSP::UUID& series_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_series_id();
  ::TSP::UUID* mutable_series_id();
  void set_allocated_series_id(::TSP::UUID* series_id);
  private:
  const ::TSP::UUID& _internal_series_id() const;
  ::TSP::UUID* _internal_mutable_series_id();
  public:
  void unsafe_arena_set_allocated_series_id(
      ::TSP::UUID* series_id);
  ::TSP::UUID* unsafe_arena_release_series_id();

  // optional .TSP.UUID preceding_series_id = 3;
  bool has_preceding_series_id() const;
  private:
  bool _internal_has_preceding_series_id() const;
  public:
  void clear_preceding_series_id();
  const ::TSP::UUID& preceding_series_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_preceding_series_id();
  ::TSP::UUID* mutable_preceding_series_id();
  void set_allocated_preceding_series_id(::TSP::UUID* preceding_series_id);
  private:
  const ::TSP::UUID& _internal_preceding_series_id() const;
  ::TSP::UUID* _internal_mutable_preceding_series_id();
  public:
  void unsafe_arena_set_allocated_preceding_series_id(
      ::TSP::UUID* preceding_series_id);
  ::TSP::UUID* unsafe_arena_release_preceding_series_id();

  // optional .TSP.UUID inverse_series_id = 4;
  bool has_inverse_series_id() const;
  private:
  bool _internal_has_inverse_series_id() const;
  public:
  void clear_inverse_series_id();
  const ::TSP::UUID& inverse_series_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_inverse_series_id();
  ::TSP::UUID* mutable_inverse_series_id();
  void set_allocated_inverse_series_id(::TSP::UUID* inverse_series_id);
  private:
  const ::TSP::UUID& _internal_inverse_series_id() const;
  ::TSP::UUID* _internal_mutable_inverse_series_id();
  public:
  void unsafe_arena_set_allocated_inverse_series_id(
      ::TSP::UUID* inverse_series_id);
  ::TSP::UUID* unsafe_arena_release_inverse_series_id();

  // optional .TSP.UUID inverse_preceding_series_id = 5;
  bool has_inverse_preceding_series_id() const;
  private:
  bool _internal_has_inverse_preceding_series_id() const;
  public:
  void clear_inverse_preceding_series_id();
  const ::TSP::UUID& inverse_preceding_series_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_inverse_preceding_series_id();
  ::TSP::UUID* mutable_inverse_preceding_series_id();
  void set_allocated_inverse_preceding_series_id(::TSP::UUID* inverse_preceding_series_id);
  private:
  const ::TSP::UUID& _internal_inverse_preceding_series_id() const;
  ::TSP::UUID* _internal_mutable_inverse_preceding_series_id();
  public:
  void unsafe_arena_set_allocated_inverse_preceding_series_id(
      ::TSP::UUID* inverse_preceding_series_id);
  ::TSP::UUID* unsafe_arena_release_inverse_preceding_series_id();

  // optional .TN.ChartMediatorFormulaStorage old_formula_storage = 8;
  bool has_old_formula_storage() const;
  private:
  bool _internal_has_old_formula_storage() const;
  public:
  void clear_old_formula_storage();
  const ::TN::ChartMediatorFormulaStorage& old_formula_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::ChartMediatorFormulaStorage* release_old_formula_storage();
  ::TN::ChartMediatorFormulaStorage* mutable_old_formula_storage();
  void set_allocated_old_formula_storage(::TN::ChartMediatorFormulaStorage* old_formula_storage);
  private:
  const ::TN::ChartMediatorFormulaStorage& _internal_old_formula_storage() const;
  ::TN::ChartMediatorFormulaStorage* _internal_mutable_old_formula_storage();
  public:
  void unsafe_arena_set_allocated_old_formula_storage(
      ::TN::ChartMediatorFormulaStorage* old_formula_storage);
  ::TN::ChartMediatorFormulaStorage* unsafe_arena_release_old_formula_storage();

  // required int32 undo_current_index = 6;
  bool has_undo_current_index() const;
  private:
  bool _internal_has_undo_current_index() const;
  public:
  void clear_undo_current_index();
  ::PROTOBUF_NAMESPACE_ID::int32 undo_current_index() const;
  void set_undo_current_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_undo_current_index() const;
  void _internal_set_undo_current_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 undo_new_index = 7;
  bool has_undo_new_index() const;
  private:
  bool _internal_has_undo_new_index() const;
  public:
  void clear_undo_new_index();
  ::PROTOBUF_NAMESPACE_ID::int32 undo_new_index() const;
  void set_undo_new_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_undo_new_index() const;
  void _internal_set_undo_new_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandChartMediatorSetSeriesOrder)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::UUID* series_id_;
  ::TSP::UUID* preceding_series_id_;
  ::TSP::UUID* inverse_series_id_;
  ::TSP::UUID* inverse_preceding_series_id_;
  ::TN::ChartMediatorFormulaStorage* old_formula_storage_;
  ::PROTOBUF_NAMESPACE_ID::int32 undo_current_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 undo_new_index_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChartMediatorUpdateForEntityDelete PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandChartMediatorUpdateForEntityDelete) */ {
 public:
  inline CommandChartMediatorUpdateForEntityDelete() : CommandChartMediatorUpdateForEntityDelete(nullptr) {}
  ~CommandChartMediatorUpdateForEntityDelete() override;
  explicit constexpr CommandChartMediatorUpdateForEntityDelete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChartMediatorUpdateForEntityDelete(const CommandChartMediatorUpdateForEntityDelete& from);
  CommandChartMediatorUpdateForEntityDelete(CommandChartMediatorUpdateForEntityDelete&& from) noexcept
    : CommandChartMediatorUpdateForEntityDelete() {
    *this = ::std::move(from);
  }

  inline CommandChartMediatorUpdateForEntityDelete& operator=(const CommandChartMediatorUpdateForEntityDelete& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChartMediatorUpdateForEntityDelete& operator=(CommandChartMediatorUpdateForEntityDelete&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChartMediatorUpdateForEntityDelete& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChartMediatorUpdateForEntityDelete* internal_default_instance() {
    return reinterpret_cast<const CommandChartMediatorUpdateForEntityDelete*>(
               &_CommandChartMediatorUpdateForEntityDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CommandChartMediatorUpdateForEntityDelete& a, CommandChartMediatorUpdateForEntityDelete& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChartMediatorUpdateForEntityDelete* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChartMediatorUpdateForEntityDelete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandChartMediatorUpdateForEntityDelete* New() const final {
    return CreateMaybeMessage<CommandChartMediatorUpdateForEntityDelete>(nullptr);
  }

  CommandChartMediatorUpdateForEntityDelete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandChartMediatorUpdateForEntityDelete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandChartMediatorUpdateForEntityDelete& from);
  void MergeFrom(const CommandChartMediatorUpdateForEntityDelete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChartMediatorUpdateForEntityDelete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandChartMediatorUpdateForEntityDelete";
  }
  protected:
  explicit CommandChartMediatorUpdateForEntityDelete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCmdFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference cmd = 3;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  const ::TSP::Reference& cmd() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_cmd();
  ::TSP::Reference* mutable_cmd();
  void set_allocated_cmd(::TSP::Reference* cmd);
  private:
  const ::TSP::Reference& _internal_cmd() const;
  ::TSP::Reference* _internal_mutable_cmd();
  public:
  void unsafe_arena_set_allocated_cmd(
      ::TSP::Reference* cmd);
  ::TSP::Reference* unsafe_arena_release_cmd();

  // @@protoc_insertion_point(class_scope:TN.CommandChartMediatorUpdateForEntityDelete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::ChartCommandArchive* super_;
  ::TSP::Reference* cmd_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChartMediatorSetFormula PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandChartMediatorSetFormula) */ {
 public:
  inline CommandChartMediatorSetFormula() : CommandChartMediatorSetFormula(nullptr) {}
  ~CommandChartMediatorSetFormula() override;
  explicit constexpr CommandChartMediatorSetFormula(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChartMediatorSetFormula(const CommandChartMediatorSetFormula& from);
  CommandChartMediatorSetFormula(CommandChartMediatorSetFormula&& from) noexcept
    : CommandChartMediatorSetFormula() {
    *this = ::std::move(from);
  }

  inline CommandChartMediatorSetFormula& operator=(const CommandChartMediatorSetFormula& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChartMediatorSetFormula& operator=(CommandChartMediatorSetFormula&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChartMediatorSetFormula& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChartMediatorSetFormula* internal_default_instance() {
    return reinterpret_cast<const CommandChartMediatorSetFormula*>(
               &_CommandChartMediatorSetFormula_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CommandChartMediatorSetFormula& a, CommandChartMediatorSetFormula& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChartMediatorSetFormula* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChartMediatorSetFormula* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandChartMediatorSetFormula* New() const final {
    return CreateMaybeMessage<CommandChartMediatorSetFormula>(nullptr);
  }

  CommandChartMediatorSetFormula* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandChartMediatorSetFormula>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandChartMediatorSetFormula& from);
  void MergeFrom(const CommandChartMediatorSetFormula& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChartMediatorSetFormula* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandChartMediatorSetFormula";
  }
  protected:
  explicit CommandChartMediatorSetFormula(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaeFieldNumber = 3,
    kOldFormulaeFieldNumber = 4,
    kSuperFieldNumber = 1,
    kModelUpdateDataTypeFieldNumber = 2,
    kSeriesIndexFieldNumber = 5,
    kAxisTypeFieldNumber = 6,
  };
  // repeated .TSCE.FormulaArchive formulae = 3;
  int formulae_size() const;
  private:
  int _internal_formulae_size() const;
  public:
  void clear_formulae();
  ::TSCE::FormulaArchive* mutable_formulae(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_formulae();
  private:
  const ::TSCE::FormulaArchive& _internal_formulae(int index) const;
  ::TSCE::FormulaArchive* _internal_add_formulae();
  public:
  const ::TSCE::FormulaArchive& formulae(int index) const;
  ::TSCE::FormulaArchive* add_formulae();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      formulae() const;

  // repeated .TSCE.FormulaArchive old_formulae = 4;
  int old_formulae_size() const;
  private:
  int _internal_old_formulae_size() const;
  public:
  void clear_old_formulae();
  ::TSCE::FormulaArchive* mutable_old_formulae(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_old_formulae();
  private:
  const ::TSCE::FormulaArchive& _internal_old_formulae(int index) const;
  ::TSCE::FormulaArchive* _internal_add_old_formulae();
  public:
  const ::TSCE::FormulaArchive& old_formulae(int index) const;
  ::TSCE::FormulaArchive* add_old_formulae();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      old_formulae() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required int32 model_update_data_type = 2;
  bool has_model_update_data_type() const;
  private:
  bool _internal_has_model_update_data_type() const;
  public:
  void clear_model_update_data_type();
  ::PROTOBUF_NAMESPACE_ID::int32 model_update_data_type() const;
  void set_model_update_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_update_data_type() const;
  void _internal_set_model_update_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 series_index = 5;
  bool has_series_index() const;
  private:
  bool _internal_has_series_index() const;
  public:
  void clear_series_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_index() const;
  void set_series_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_index() const;
  void _internal_set_series_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 axis_type = 6;
  bool has_axis_type() const;
  private:
  bool _internal_has_axis_type() const;
  public:
  void clear_axis_type();
  ::PROTOBUF_NAMESPACE_ID::int32 axis_type() const;
  void set_axis_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis_type() const;
  void _internal_set_axis_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TN.CommandChartMediatorSetFormula)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > formulae_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > old_formulae_;
  ::TSCH::ChartCommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_update_data_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_type_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSheetSetBackgroundFillArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSheetSetBackgroundFillArchive) */ {
 public:
  inline CommandSheetSetBackgroundFillArchive() : CommandSheetSetBackgroundFillArchive(nullptr) {}
  ~CommandSheetSetBackgroundFillArchive() override;
  explicit constexpr CommandSheetSetBackgroundFillArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSheetSetBackgroundFillArchive(const CommandSheetSetBackgroundFillArchive& from);
  CommandSheetSetBackgroundFillArchive(CommandSheetSetBackgroundFillArchive&& from) noexcept
    : CommandSheetSetBackgroundFillArchive() {
    *this = ::std::move(from);
  }

  inline CommandSheetSetBackgroundFillArchive& operator=(const CommandSheetSetBackgroundFillArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSheetSetBackgroundFillArchive& operator=(CommandSheetSetBackgroundFillArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSheetSetBackgroundFillArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSheetSetBackgroundFillArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSheetSetBackgroundFillArchive*>(
               &_CommandSheetSetBackgroundFillArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CommandSheetSetBackgroundFillArchive& a, CommandSheetSetBackgroundFillArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSheetSetBackgroundFillArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSheetSetBackgroundFillArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSheetSetBackgroundFillArchive* New() const final {
    return CreateMaybeMessage<CommandSheetSetBackgroundFillArchive>(nullptr);
  }

  CommandSheetSetBackgroundFillArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSheetSetBackgroundFillArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSheetSetBackgroundFillArchive& from);
  void MergeFrom(const CommandSheetSetBackgroundFillArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSheetSetBackgroundFillArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSheetSetBackgroundFillArchive";
  }
  protected:
  explicit CommandSheetSetBackgroundFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSheetIdFieldNumber = 2,
    kNewFillFieldNumber = 3,
    kOldFillFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID sheet_id = 2;
  bool has_sheet_id() const;
  private:
  bool _internal_has_sheet_id() const;
  public:
  void clear_sheet_id();
  const ::TSP::UUID& sheet_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_id();
  ::TSP::UUID* mutable_sheet_id();
  void set_allocated_sheet_id(::TSP::UUID* sheet_id);
  private:
  const ::TSP::UUID& _internal_sheet_id() const;
  ::TSP::UUID* _internal_mutable_sheet_id();
  public:
  void unsafe_arena_set_allocated_sheet_id(
      ::TSP::UUID* sheet_id);
  ::TSP::UUID* unsafe_arena_release_sheet_id();

  // required .TSD.FillArchive new_fill = 3;
  bool has_new_fill() const;
  private:
  bool _internal_has_new_fill() const;
  public:
  void clear_new_fill();
  const ::TSD::FillArchive& new_fill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_new_fill();
  ::TSD::FillArchive* mutable_new_fill();
  void set_allocated_new_fill(::TSD::FillArchive* new_fill);
  private:
  const ::TSD::FillArchive& _internal_new_fill() const;
  ::TSD::FillArchive* _internal_mutable_new_fill();
  public:
  void unsafe_arena_set_allocated_new_fill(
      ::TSD::FillArchive* new_fill);
  ::TSD::FillArchive* unsafe_arena_release_new_fill();

  // required .TSD.FillArchive old_fill = 4;
  bool has_old_fill() const;
  private:
  bool _internal_has_old_fill() const;
  public:
  void clear_old_fill();
  const ::TSD::FillArchive& old_fill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_old_fill();
  ::TSD::FillArchive* mutable_old_fill();
  void set_allocated_old_fill(::TSD::FillArchive* old_fill);
  private:
  const ::TSD::FillArchive& _internal_old_fill() const;
  ::TSD::FillArchive* _internal_mutable_old_fill();
  public:
  void unsafe_arena_set_allocated_old_fill(
      ::TSD::FillArchive* old_fill);
  ::TSD::FillArchive* unsafe_arena_release_old_fill();

  // @@protoc_insertion_point(class_scope:TN.CommandSheetSetBackgroundFillArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* sheet_id_;
  ::TSD::FillArchive* new_fill_;
  ::TSD::FillArchive* old_fill_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSheetSetStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandSheetSetStyleArchive) */ {
 public:
  inline CommandSheetSetStyleArchive() : CommandSheetSetStyleArchive(nullptr) {}
  ~CommandSheetSetStyleArchive() override;
  explicit constexpr CommandSheetSetStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSheetSetStyleArchive(const CommandSheetSetStyleArchive& from);
  CommandSheetSetStyleArchive(CommandSheetSetStyleArchive&& from) noexcept
    : CommandSheetSetStyleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSheetSetStyleArchive& operator=(const CommandSheetSetStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSheetSetStyleArchive& operator=(CommandSheetSetStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSheetSetStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSheetSetStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSheetSetStyleArchive*>(
               &_CommandSheetSetStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CommandSheetSetStyleArchive& a, CommandSheetSetStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSheetSetStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSheetSetStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSheetSetStyleArchive* New() const final {
    return CreateMaybeMessage<CommandSheetSetStyleArchive>(nullptr);
  }

  CommandSheetSetStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSheetSetStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSheetSetStyleArchive& from);
  void MergeFrom(const CommandSheetSetStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSheetSetStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandSheetSetStyleArchive";
  }
  protected:
  explicit CommandSheetSetStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSheetIdFieldNumber = 2,
    kSheetStyleFieldNumber = 3,
    kOldSheetStyleFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID sheet_id = 2;
  bool has_sheet_id() const;
  private:
  bool _internal_has_sheet_id() const;
  public:
  void clear_sheet_id();
  const ::TSP::UUID& sheet_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_id();
  ::TSP::UUID* mutable_sheet_id();
  void set_allocated_sheet_id(::TSP::UUID* sheet_id);
  private:
  const ::TSP::UUID& _internal_sheet_id() const;
  ::TSP::UUID* _internal_mutable_sheet_id();
  public:
  void unsafe_arena_set_allocated_sheet_id(
      ::TSP::UUID* sheet_id);
  ::TSP::UUID* unsafe_arena_release_sheet_id();

  // required .TSP.Reference sheet_style = 3;
  bool has_sheet_style() const;
  private:
  bool _internal_has_sheet_style() const;
  public:
  void clear_sheet_style();
  const ::TSP::Reference& sheet_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_sheet_style();
  ::TSP::Reference* mutable_sheet_style();
  void set_allocated_sheet_style(::TSP::Reference* sheet_style);
  private:
  const ::TSP::Reference& _internal_sheet_style() const;
  ::TSP::Reference* _internal_mutable_sheet_style();
  public:
  void unsafe_arena_set_allocated_sheet_style(
      ::TSP::Reference* sheet_style);
  ::TSP::Reference* unsafe_arena_release_sheet_style();

  // optional .TSP.Reference old_sheet_style = 4;
  bool has_old_sheet_style() const;
  private:
  bool _internal_has_old_sheet_style() const;
  public:
  void clear_old_sheet_style();
  const ::TSP::Reference& old_sheet_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_old_sheet_style();
  ::TSP::Reference* mutable_old_sheet_style();
  void set_allocated_old_sheet_style(::TSP::Reference* old_sheet_style);
  private:
  const ::TSP::Reference& _internal_old_sheet_style() const;
  ::TSP::Reference* _internal_mutable_old_sheet_style();
  public:
  void unsafe_arena_set_allocated_old_sheet_style(
      ::TSP::Reference* old_sheet_style);
  ::TSP::Reference* unsafe_arena_release_old_sheet_style();

  // @@protoc_insertion_point(class_scope:TN.CommandSheetSetStyleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* sheet_id_;
  ::TSP::Reference* sheet_style_;
  ::TSP::Reference* old_sheet_style_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DocumentSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.DocumentSelectionTransformerArchive) */ {
 public:
  inline DocumentSelectionTransformerArchive() : DocumentSelectionTransformerArchive(nullptr) {}
  ~DocumentSelectionTransformerArchive() override;
  explicit constexpr DocumentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentSelectionTransformerArchive(const DocumentSelectionTransformerArchive& from);
  DocumentSelectionTransformerArchive(DocumentSelectionTransformerArchive&& from) noexcept
    : DocumentSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline DocumentSelectionTransformerArchive& operator=(const DocumentSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentSelectionTransformerArchive& operator=(DocumentSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentSelectionTransformerArchive*>(
               &_DocumentSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(DocumentSelectionTransformerArchive& a, DocumentSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<DocumentSelectionTransformerArchive>(nullptr);
  }

  DocumentSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentSelectionTransformerArchive& from);
  void MergeFrom(const DocumentSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.DocumentSelectionTransformerArchive";
  }
  protected:
  explicit DocumentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentSelectionFieldNumber = 1,
  };
  // optional .TSP.Reference document_selection = 1;
  bool has_document_selection() const;
  private:
  bool _internal_has_document_selection() const;
  public:
  void clear_document_selection();
  const ::TSP::Reference& document_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_document_selection();
  ::TSP::Reference* mutable_document_selection();
  void set_allocated_document_selection(::TSP::Reference* document_selection);
  private:
  const ::TSP::Reference& _internal_document_selection() const;
  ::TSP::Reference* _internal_mutable_document_selection();
  public:
  void unsafe_arena_set_allocated_document_selection(
      ::TSP::Reference* document_selection);
  ::TSP::Reference* unsafe_arena_release_document_selection();

  // @@protoc_insertion_point(class_scope:TN.DocumentSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* document_selection_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SheetSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.SheetSelectionTransformerArchive) */ {
 public:
  inline SheetSelectionTransformerArchive() : SheetSelectionTransformerArchive(nullptr) {}
  ~SheetSelectionTransformerArchive() override;
  explicit constexpr SheetSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SheetSelectionTransformerArchive(const SheetSelectionTransformerArchive& from);
  SheetSelectionTransformerArchive(SheetSelectionTransformerArchive&& from) noexcept
    : SheetSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline SheetSelectionTransformerArchive& operator=(const SheetSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SheetSelectionTransformerArchive& operator=(SheetSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SheetSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SheetSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const SheetSelectionTransformerArchive*>(
               &_SheetSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SheetSelectionTransformerArchive& a, SheetSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SheetSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SheetSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SheetSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<SheetSelectionTransformerArchive>(nullptr);
  }

  SheetSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SheetSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SheetSelectionTransformerArchive& from);
  void MergeFrom(const SheetSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SheetSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.SheetSelectionTransformerArchive";
  }
  protected:
  explicit SheetSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetUuidFieldNumber = 1,
    kPaginatedFieldNumber = 2,
  };
  // optional .TSP.UUID sheet_uuid = 1;
  bool has_sheet_uuid() const;
  private:
  bool _internal_has_sheet_uuid() const;
  public:
  void clear_sheet_uuid();
  const ::TSP::UUID& sheet_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_uuid();
  ::TSP::UUID* mutable_sheet_uuid();
  void set_allocated_sheet_uuid(::TSP::UUID* sheet_uuid);
  private:
  const ::TSP::UUID& _internal_sheet_uuid() const;
  ::TSP::UUID* _internal_mutable_sheet_uuid();
  public:
  void unsafe_arena_set_allocated_sheet_uuid(
      ::TSP::UUID* sheet_uuid);
  ::TSP::UUID* unsafe_arena_release_sheet_uuid();

  // required bool paginated = 2;
  bool has_paginated() const;
  private:
  bool _internal_has_paginated() const;
  public:
  void clear_paginated();
  bool paginated() const;
  void set_paginated(bool value);
  private:
  bool _internal_paginated() const;
  void _internal_set_paginated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TN.SheetSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* sheet_uuid_;
  bool paginated_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CanvasSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CanvasSelectionTransformerArchive) */ {
 public:
  inline CanvasSelectionTransformerArchive() : CanvasSelectionTransformerArchive(nullptr) {}
  ~CanvasSelectionTransformerArchive() override;
  explicit constexpr CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanvasSelectionTransformerArchive(const CanvasSelectionTransformerArchive& from);
  CanvasSelectionTransformerArchive(CanvasSelectionTransformerArchive&& from) noexcept
    : CanvasSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline CanvasSelectionTransformerArchive& operator=(const CanvasSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanvasSelectionTransformerArchive& operator=(CanvasSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanvasSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanvasSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const CanvasSelectionTransformerArchive*>(
               &_CanvasSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CanvasSelectionTransformerArchive& a, CanvasSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanvasSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<CanvasSelectionTransformerArchive>(nullptr);
  }

  CanvasSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanvasSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanvasSelectionTransformerArchive& from);
  void MergeFrom(const CanvasSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanvasSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CanvasSelectionTransformerArchive";
  }
  protected:
  explicit CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformerHelperFieldNumber = 1,
    kHeaderStorageUuidPathFieldNumber = 2,
  };
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  bool has_transformer_helper() const;
  private:
  bool _internal_has_transformer_helper() const;
  public:
  void clear_transformer_helper();
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCollectionSelectionTransformerHelperArchive* release_transformer_helper();
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* mutable_transformer_helper();
  void set_allocated_transformer_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper);
  private:
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& _internal_transformer_helper() const;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* _internal_mutable_transformer_helper();
  public:
  void unsafe_arena_set_allocated_transformer_helper(
      ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper);
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* unsafe_arena_release_transformer_helper();

  // optional .TSP.UUIDPath header_storage_uuid_path = 2;
  bool has_header_storage_uuid_path() const;
  private:
  bool _internal_has_header_storage_uuid_path() const;
  public:
  void clear_header_storage_uuid_path();
  const ::TSP::UUIDPath& header_storage_uuid_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_header_storage_uuid_path();
  ::TSP::UUIDPath* mutable_header_storage_uuid_path();
  void set_allocated_header_storage_uuid_path(::TSP::UUIDPath* header_storage_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_header_storage_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_header_storage_uuid_path();
  public:
  void unsafe_arena_set_allocated_header_storage_uuid_path(
      ::TSP::UUIDPath* header_storage_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_header_storage_uuid_path();

  // @@protoc_insertion_point(class_scope:TN.CanvasSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper_;
  ::TSP::UUIDPath* header_storage_uuid_path_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SheetChangeBaseArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.SheetChangeBaseArchive) */ {
 public:
  inline SheetChangeBaseArchive() : SheetChangeBaseArchive(nullptr) {}
  ~SheetChangeBaseArchive() override;
  explicit constexpr SheetChangeBaseArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SheetChangeBaseArchive(const SheetChangeBaseArchive& from);
  SheetChangeBaseArchive(SheetChangeBaseArchive&& from) noexcept
    : SheetChangeBaseArchive() {
    *this = ::std::move(from);
  }

  inline SheetChangeBaseArchive& operator=(const SheetChangeBaseArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SheetChangeBaseArchive& operator=(SheetChangeBaseArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SheetChangeBaseArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SheetChangeBaseArchive* internal_default_instance() {
    return reinterpret_cast<const SheetChangeBaseArchive*>(
               &_SheetChangeBaseArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SheetChangeBaseArchive& a, SheetChangeBaseArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SheetChangeBaseArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SheetChangeBaseArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SheetChangeBaseArchive* New() const final {
    return CreateMaybeMessage<SheetChangeBaseArchive>(nullptr);
  }

  SheetChangeBaseArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SheetChangeBaseArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SheetChangeBaseArchive& from);
  void MergeFrom(const SheetChangeBaseArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SheetChangeBaseArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.SheetChangeBaseArchive";
  }
  protected:
  explicit SheetChangeBaseArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetIdFieldNumber = 1,
  };
  // required .TSP.UUID sheet_id = 1;
  bool has_sheet_id() const;
  private:
  bool _internal_has_sheet_id() const;
  public:
  void clear_sheet_id();
  const ::TSP::UUID& sheet_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_sheet_id();
  ::TSP::UUID* mutable_sheet_id();
  void set_allocated_sheet_id(::TSP::UUID* sheet_id);
  private:
  const ::TSP::UUID& _internal_sheet_id() const;
  ::TSP::UUID* _internal_mutable_sheet_id();
  public:
  void unsafe_arena_set_allocated_sheet_id(
      ::TSP::UUID* sheet_id);
  ::TSP::UUID* unsafe_arena_release_sheet_id();

  // @@protoc_insertion_point(class_scope:TN.SheetChangeBaseArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* sheet_id_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SheetChangeSheetNameArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.SheetChangeSheetNameArchive) */ {
 public:
  inline SheetChangeSheetNameArchive() : SheetChangeSheetNameArchive(nullptr) {}
  ~SheetChangeSheetNameArchive() override;
  explicit constexpr SheetChangeSheetNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SheetChangeSheetNameArchive(const SheetChangeSheetNameArchive& from);
  SheetChangeSheetNameArchive(SheetChangeSheetNameArchive&& from) noexcept
    : SheetChangeSheetNameArchive() {
    *this = ::std::move(from);
  }

  inline SheetChangeSheetNameArchive& operator=(const SheetChangeSheetNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SheetChangeSheetNameArchive& operator=(SheetChangeSheetNameArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SheetChangeSheetNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SheetChangeSheetNameArchive* internal_default_instance() {
    return reinterpret_cast<const SheetChangeSheetNameArchive*>(
               &_SheetChangeSheetNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SheetChangeSheetNameArchive& a, SheetChangeSheetNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SheetChangeSheetNameArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SheetChangeSheetNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SheetChangeSheetNameArchive* New() const final {
    return CreateMaybeMessage<SheetChangeSheetNameArchive>(nullptr);
  }

  SheetChangeSheetNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SheetChangeSheetNameArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SheetChangeSheetNameArchive& from);
  void MergeFrom(const SheetChangeSheetNameArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SheetChangeSheetNameArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.SheetChangeSheetNameArchive";
  }
  protected:
  explicit SheetChangeSheetNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetNameFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // required string sheet_name = 2;
  bool has_sheet_name() const;
  private:
  bool _internal_has_sheet_name() const;
  public:
  void clear_sheet_name();
  const std::string& sheet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sheet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sheet_name();
  std::string* release_sheet_name();
  void set_allocated_sheet_name(std::string* sheet_name);
  private:
  const std::string& _internal_sheet_name() const;
  void _internal_set_sheet_name(const std::string& value);
  std::string* _internal_mutable_sheet_name();
  public:

  // required .TN.SheetChangeBaseArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TN::SheetChangeBaseArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TN::SheetChangeBaseArchive* release_super();
  ::TN::SheetChangeBaseArchive* mutable_super();
  void set_allocated_super(::TN::SheetChangeBaseArchive* super);
  private:
  const ::TN::SheetChangeBaseArchive& _internal_super() const;
  ::TN::SheetChangeBaseArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TN::SheetChangeBaseArchive* super);
  ::TN::SheetChangeBaseArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.SheetChangeSheetNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sheet_name_;
  ::TN::SheetChangeBaseArchive* super_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandInducedSheetChangeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TN.CommandInducedSheetChangeArchive) */ {
 public:
  inline CommandInducedSheetChangeArchive() : CommandInducedSheetChangeArchive(nullptr) {}
  ~CommandInducedSheetChangeArchive() override;
  explicit constexpr CommandInducedSheetChangeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInducedSheetChangeArchive(const CommandInducedSheetChangeArchive& from);
  CommandInducedSheetChangeArchive(CommandInducedSheetChangeArchive&& from) noexcept
    : CommandInducedSheetChangeArchive() {
    *this = ::std::move(from);
  }

  inline CommandInducedSheetChangeArchive& operator=(const CommandInducedSheetChangeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInducedSheetChangeArchive& operator=(CommandInducedSheetChangeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInducedSheetChangeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInducedSheetChangeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandInducedSheetChangeArchive*>(
               &_CommandInducedSheetChangeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CommandInducedSheetChangeArchive& a, CommandInducedSheetChangeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInducedSheetChangeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInducedSheetChangeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandInducedSheetChangeArchive* New() const final {
    return CreateMaybeMessage<CommandInducedSheetChangeArchive>(nullptr);
  }

  CommandInducedSheetChangeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandInducedSheetChangeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandInducedSheetChangeArchive& from);
  void MergeFrom(const CommandInducedSheetChangeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInducedSheetChangeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TN.CommandInducedSheetChangeArchive";
  }
  protected:
  explicit CommandInducedSheetChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSheetChangesFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TN.SheetChangeSheetNameArchive sheet_changes = 2;
  int sheet_changes_size() const;
  private:
  int _internal_sheet_changes_size() const;
  public:
  void clear_sheet_changes();
  ::TN::SheetChangeSheetNameArchive* mutable_sheet_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetChangeSheetNameArchive >*
      mutable_sheet_changes();
  private:
  const ::TN::SheetChangeSheetNameArchive& _internal_sheet_changes(int index) const;
  ::TN::SheetChangeSheetNameArchive* _internal_add_sheet_changes();
  public:
  const ::TN::SheetChangeSheetNameArchive& sheet_changes(int index) const;
  ::TN::SheetChangeSheetNameArchive* add_sheet_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetChangeSheetNameArchive >&
      sheet_changes() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TN.CommandInducedSheetChangeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetChangeSheetNameArchive > sheet_changes_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TNCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandFormChooseTargetTableArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandFormChooseTargetTableArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandFormChooseTargetTableArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandFormChooseTargetTableArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.super)
  return _internal_super();
}
inline void CommandFormChooseTargetTableArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandFormChooseTargetTableArchive.super)
}
inline ::TSK::CommandArchive* CommandFormChooseTargetTableArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandFormChooseTargetTableArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandFormChooseTargetTableArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandFormChooseTargetTableArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.super)
  return _internal_mutable_super();
}
inline void CommandFormChooseTargetTableArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.super)
}

// optional .TSP.CFUUIDArchive table_id = 2;
inline bool CommandFormChooseTargetTableArchive::_internal_has_table_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || table_id_ != nullptr);
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::TSP::CFUUIDArchive& CommandFormChooseTargetTableArchive::_internal_table_id() const {
  const ::TSP::CFUUIDArchive* p = table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& CommandFormChooseTargetTableArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.table_id)
  return _internal_table_id();
}
inline void CommandFormChooseTargetTableArchive::unsafe_arena_set_allocated_table_id(
    ::TSP::CFUUIDArchive* table_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  table_id_ = table_id;
  if (table_id) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandFormChooseTargetTableArchive.table_id)
}
inline ::TSP::CFUUIDArchive* CommandFormChooseTargetTableArchive::release_table_id() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* CommandFormChooseTargetTableArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.table_id)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::CFUUIDArchive* temp = table_id_;
  table_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* CommandFormChooseTargetTableArchive::_internal_mutable_table_id() {
  _has_bits_[0] |= 0x00000008u;
  if (table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    table_id_ = p;
  }
  return table_id_;
}
inline ::TSP::CFUUIDArchive* CommandFormChooseTargetTableArchive::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.table_id)
  return _internal_mutable_table_id();
}
inline void CommandFormChooseTargetTableArchive::set_allocated_table_id(::TSP::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id)->GetArena();
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.table_id)
}

// optional .TSP.CFUUIDArchive previous_table_id = 3;
inline bool CommandFormChooseTargetTableArchive::_internal_has_previous_table_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || previous_table_id_ != nullptr);
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_previous_table_id() const {
  return _internal_has_previous_table_id();
}
inline const ::TSP::CFUUIDArchive& CommandFormChooseTargetTableArchive::_internal_previous_table_id() const {
  const ::TSP::CFUUIDArchive* p = previous_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& CommandFormChooseTargetTableArchive::previous_table_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.previous_table_id)
  return _internal_previous_table_id();
}
inline void CommandFormChooseTargetTableArchive::unsafe_arena_set_allocated_previous_table_id(
    ::TSP::CFUUIDArchive* previous_table_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_table_id_);
  }
  previous_table_id_ = previous_table_id;
  if (previous_table_id) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandFormChooseTargetTableArchive.previous_table_id)
}
inline ::TSP::CFUUIDArchive* CommandFormChooseTargetTableArchive::release_previous_table_id() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::CFUUIDArchive* temp = previous_table_id_;
  previous_table_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* CommandFormChooseTargetTableArchive::unsafe_arena_release_previous_table_id() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.previous_table_id)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::CFUUIDArchive* temp = previous_table_id_;
  previous_table_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* CommandFormChooseTargetTableArchive::_internal_mutable_previous_table_id() {
  _has_bits_[0] |= 0x00000010u;
  if (previous_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    previous_table_id_ = p;
  }
  return previous_table_id_;
}
inline ::TSP::CFUUIDArchive* CommandFormChooseTargetTableArchive::mutable_previous_table_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.previous_table_id)
  return _internal_mutable_previous_table_id();
}
inline void CommandFormChooseTargetTableArchive::set_allocated_previous_table_id(::TSP::CFUUIDArchive* previous_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_table_id_);
  }
  if (previous_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_table_id)->GetArena();
    if (message_arena != submessage_arena) {
      previous_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_table_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  previous_table_id_ = previous_table_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.previous_table_id)
}

// optional string sheet_name = 4;
inline bool CommandFormChooseTargetTableArchive::_internal_has_sheet_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_sheet_name() const {
  return _internal_has_sheet_name();
}
inline void CommandFormChooseTargetTableArchive::clear_sheet_name() {
  sheet_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandFormChooseTargetTableArchive::sheet_name() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.sheet_name)
  return _internal_sheet_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CommandFormChooseTargetTableArchive::set_sheet_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TN.CommandFormChooseTargetTableArchive.sheet_name)
}
inline std::string* CommandFormChooseTargetTableArchive::mutable_sheet_name() {
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.sheet_name)
  return _internal_mutable_sheet_name();
}
inline const std::string& CommandFormChooseTargetTableArchive::_internal_sheet_name() const {
  return sheet_name_.Get();
}
inline void CommandFormChooseTargetTableArchive::_internal_set_sheet_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CommandFormChooseTargetTableArchive::_internal_mutable_sheet_name() {
  _has_bits_[0] |= 0x00000001u;
  return sheet_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandFormChooseTargetTableArchive::release_sheet_name() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.sheet_name)
  if (!_internal_has_sheet_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sheet_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandFormChooseTargetTableArchive::set_allocated_sheet_name(std::string* sheet_name) {
  if (sheet_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sheet_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.sheet_name)
}

// optional string previous_sheet_name = 5;
inline bool CommandFormChooseTargetTableArchive::_internal_has_previous_sheet_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_previous_sheet_name() const {
  return _internal_has_previous_sheet_name();
}
inline void CommandFormChooseTargetTableArchive::clear_previous_sheet_name() {
  previous_sheet_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandFormChooseTargetTableArchive::previous_sheet_name() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.previous_sheet_name)
  return _internal_previous_sheet_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CommandFormChooseTargetTableArchive::set_previous_sheet_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 previous_sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TN.CommandFormChooseTargetTableArchive.previous_sheet_name)
}
inline std::string* CommandFormChooseTargetTableArchive::mutable_previous_sheet_name() {
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.previous_sheet_name)
  return _internal_mutable_previous_sheet_name();
}
inline const std::string& CommandFormChooseTargetTableArchive::_internal_previous_sheet_name() const {
  return previous_sheet_name_.Get();
}
inline void CommandFormChooseTargetTableArchive::_internal_set_previous_sheet_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  previous_sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CommandFormChooseTargetTableArchive::_internal_mutable_previous_sheet_name() {
  _has_bits_[0] |= 0x00000002u;
  return previous_sheet_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandFormChooseTargetTableArchive::release_previous_sheet_name() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.previous_sheet_name)
  if (!_internal_has_previous_sheet_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return previous_sheet_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandFormChooseTargetTableArchive::set_allocated_previous_sheet_name(std::string* previous_sheet_name) {
  if (previous_sheet_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  previous_sheet_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_sheet_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.previous_sheet_name)
}

// required .TSP.Reference sheet = 6;
inline bool CommandFormChooseTargetTableArchive::_internal_has_sheet() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || sheet_ != nullptr);
  return value;
}
inline bool CommandFormChooseTargetTableArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandFormChooseTargetTableArchive::_internal_sheet() const {
  const ::TSP::Reference* p = sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandFormChooseTargetTableArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandFormChooseTargetTableArchive.sheet)
  return _internal_sheet();
}
inline void CommandFormChooseTargetTableArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  sheet_ = sheet;
  if (sheet) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandFormChooseTargetTableArchive.sheet)
}
inline ::TSP::Reference* CommandFormChooseTargetTableArchive::release_sheet() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandFormChooseTargetTableArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandFormChooseTargetTableArchive.sheet)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandFormChooseTargetTableArchive::_internal_mutable_sheet() {
  _has_bits_[0] |= 0x00000020u;
  if (sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    sheet_ = p;
  }
  return sheet_;
}
inline ::TSP::Reference* CommandFormChooseTargetTableArchive::mutable_sheet() {
  // @@protoc_insertion_point(field_mutable:TN.CommandFormChooseTargetTableArchive.sheet)
  return _internal_mutable_sheet();
}
inline void CommandFormChooseTargetTableArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet)->GetArena();
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandFormChooseTargetTableArchive.sheet)
}

// -------------------------------------------------------------------

// CommandSheetInsertDrawablesArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSheetInsertDrawablesArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSheetInsertDrawablesArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.super)
  return _internal_super();
}
inline void CommandSheetInsertDrawablesArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetInsertDrawablesArchive.super)
}
inline ::TSK::CommandArchive* CommandSheetInsertDrawablesArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetInsertDrawablesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetInsertDrawablesArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetInsertDrawablesArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSheetInsertDrawablesArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.super)
  return _internal_mutable_super();
}
inline void CommandSheetInsertDrawablesArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetInsertDrawablesArchive.super)
}

// required .TSP.UUID sheet_id = 2;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_sheet_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sheet_id_ != nullptr);
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_sheet_id() const {
  return _internal_has_sheet_id();
}
inline const ::TSP::UUID& CommandSheetInsertDrawablesArchive::_internal_sheet_id() const {
  const ::TSP::UUID* p = sheet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSheetInsertDrawablesArchive::sheet_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.sheet_id)
  return _internal_sheet_id();
}
inline void CommandSheetInsertDrawablesArchive::unsafe_arena_set_allocated_sheet_id(
    ::TSP::UUID* sheet_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  sheet_id_ = sheet_id;
  if (sheet_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetInsertDrawablesArchive.sheet_id)
}
inline ::TSP::UUID* CommandSheetInsertDrawablesArchive::release_sheet_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSheetInsertDrawablesArchive::unsafe_arena_release_sheet_id() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetInsertDrawablesArchive.sheet_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSheetInsertDrawablesArchive::_internal_mutable_sheet_id() {
  _has_bits_[0] |= 0x00000002u;
  if (sheet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_id_ = p;
  }
  return sheet_id_;
}
inline ::TSP::UUID* CommandSheetInsertDrawablesArchive::mutable_sheet_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.sheet_id)
  return _internal_mutable_sheet_id();
}
inline void CommandSheetInsertDrawablesArchive::set_allocated_sheet_id(::TSP::UUID* sheet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  if (sheet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sheet_id_ = sheet_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetInsertDrawablesArchive.sheet_id)
}

// repeated .TSP.Reference drawables = 3;
inline int CommandSheetInsertDrawablesArchive::_internal_drawables_size() const {
  return drawables_.size();
}
inline int CommandSheetInsertDrawablesArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.drawables)
  return drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSheetInsertDrawablesArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetInsertDrawablesArchive.drawables)
  return &drawables_;
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::_internal_drawables(int index) const {
  return drawables_.Get(index);
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::_internal_add_drawables() {
  return drawables_.Add();
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::add_drawables() {
  // @@protoc_insertion_point(field_add:TN.CommandSheetInsertDrawablesArchive.drawables)
  return _internal_add_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSheetInsertDrawablesArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetInsertDrawablesArchive.drawables)
  return drawables_;
}

// repeated .TSK.AddIdOperationArgs args_list = 4;
inline int CommandSheetInsertDrawablesArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int CommandSheetInsertDrawablesArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::AddIdOperationArgs* CommandSheetInsertDrawablesArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
CommandSheetInsertDrawablesArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetInsertDrawablesArchive.args_list)
  return &args_list_;
}
inline const ::TSK::AddIdOperationArgs& CommandSheetInsertDrawablesArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::AddIdOperationArgs& CommandSheetInsertDrawablesArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::AddIdOperationArgs* CommandSheetInsertDrawablesArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::AddIdOperationArgs* CommandSheetInsertDrawablesArchive::add_args_list() {
  // @@protoc_insertion_point(field_add:TN.CommandSheetInsertDrawablesArchive.args_list)
  return _internal_add_args_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
CommandSheetInsertDrawablesArchive::args_list() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetInsertDrawablesArchive.args_list)
  return args_list_;
}

// optional bool forPaste = 5;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_forpaste() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_forpaste() const {
  return _internal_has_forpaste();
}
inline void CommandSheetInsertDrawablesArchive::clear_forpaste() {
  forpaste_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSheetInsertDrawablesArchive::_internal_forpaste() const {
  return forpaste_;
}
inline bool CommandSheetInsertDrawablesArchive::forpaste() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.forPaste)
  return _internal_forpaste();
}
inline void CommandSheetInsertDrawablesArchive::_internal_set_forpaste(bool value) {
  _has_bits_[0] |= 0x00000010u;
  forpaste_ = value;
}
inline void CommandSheetInsertDrawablesArchive::set_forpaste(bool value) {
  _internal_set_forpaste(value);
  // @@protoc_insertion_point(field_set:TN.CommandSheetInsertDrawablesArchive.forPaste)
}

// repeated .TSP.UUID custom_format_keys = 6;
inline int CommandSheetInsertDrawablesArchive::_internal_custom_format_keys_size() const {
  return custom_format_keys_.size();
}
inline int CommandSheetInsertDrawablesArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* CommandSheetInsertDrawablesArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.custom_format_keys)
  return custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSheetInsertDrawablesArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetInsertDrawablesArchive.custom_format_keys)
  return &custom_format_keys_;
}
inline const ::TSP::UUID& CommandSheetInsertDrawablesArchive::_internal_custom_format_keys(int index) const {
  return custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& CommandSheetInsertDrawablesArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* CommandSheetInsertDrawablesArchive::_internal_add_custom_format_keys() {
  return custom_format_keys_.Add();
}
inline ::TSP::UUID* CommandSheetInsertDrawablesArchive::add_custom_format_keys() {
  // @@protoc_insertion_point(field_add:TN.CommandSheetInsertDrawablesArchive.custom_format_keys)
  return _internal_add_custom_format_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSheetInsertDrawablesArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetInsertDrawablesArchive.custom_format_keys)
  return custom_format_keys_;
}

// optional .TSP.Reference drawable_undo_object = 7;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_drawable_undo_object() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || drawable_undo_object_ != nullptr);
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_drawable_undo_object() const {
  return _internal_has_drawable_undo_object();
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::_internal_drawable_undo_object() const {
  const ::TSP::Reference* p = drawable_undo_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::drawable_undo_object() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.drawable_undo_object)
  return _internal_drawable_undo_object();
}
inline void CommandSheetInsertDrawablesArchive::unsafe_arena_set_allocated_drawable_undo_object(
    ::TSP::Reference* drawable_undo_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_undo_object_);
  }
  drawable_undo_object_ = drawable_undo_object;
  if (drawable_undo_object) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetInsertDrawablesArchive.drawable_undo_object)
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::release_drawable_undo_object() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = drawable_undo_object_;
  drawable_undo_object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::unsafe_arena_release_drawable_undo_object() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetInsertDrawablesArchive.drawable_undo_object)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = drawable_undo_object_;
  drawable_undo_object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::_internal_mutable_drawable_undo_object() {
  _has_bits_[0] |= 0x00000004u;
  if (drawable_undo_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    drawable_undo_object_ = p;
  }
  return drawable_undo_object_;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::mutable_drawable_undo_object() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.drawable_undo_object)
  return _internal_mutable_drawable_undo_object();
}
inline void CommandSheetInsertDrawablesArchive::set_allocated_drawable_undo_object(::TSP::Reference* drawable_undo_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_undo_object_);
  }
  if (drawable_undo_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_undo_object)->GetArena();
    if (message_arena != submessage_arena) {
      drawable_undo_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable_undo_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  drawable_undo_object_ = drawable_undo_object;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetInsertDrawablesArchive.drawable_undo_object)
}

// optional .TSP.Reference formula_rewrite_command_for_undo = 9;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_formula_rewrite_command_for_undo() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || formula_rewrite_command_for_undo_ != nullptr);
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_formula_rewrite_command_for_undo() const {
  return _internal_has_formula_rewrite_command_for_undo();
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::_internal_formula_rewrite_command_for_undo() const {
  const ::TSP::Reference* p = formula_rewrite_command_for_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::formula_rewrite_command_for_undo() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.formula_rewrite_command_for_undo)
  return _internal_formula_rewrite_command_for_undo();
}
inline void CommandSheetInsertDrawablesArchive::unsafe_arena_set_allocated_formula_rewrite_command_for_undo(
    ::TSP::Reference* formula_rewrite_command_for_undo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command_for_undo_);
  }
  formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  if (formula_rewrite_command_for_undo) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetInsertDrawablesArchive.formula_rewrite_command_for_undo)
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::release_formula_rewrite_command_for_undo() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = formula_rewrite_command_for_undo_;
  formula_rewrite_command_for_undo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::unsafe_arena_release_formula_rewrite_command_for_undo() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetInsertDrawablesArchive.formula_rewrite_command_for_undo)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = formula_rewrite_command_for_undo_;
  formula_rewrite_command_for_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::_internal_mutable_formula_rewrite_command_for_undo() {
  _has_bits_[0] |= 0x00000008u;
  if (formula_rewrite_command_for_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    formula_rewrite_command_for_undo_ = p;
  }
  return formula_rewrite_command_for_undo_;
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::mutable_formula_rewrite_command_for_undo() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.formula_rewrite_command_for_undo)
  return _internal_mutable_formula_rewrite_command_for_undo();
}
inline void CommandSheetInsertDrawablesArchive::set_allocated_formula_rewrite_command_for_undo(::TSP::Reference* formula_rewrite_command_for_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command_for_undo_);
  }
  if (formula_rewrite_command_for_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command_for_undo)->GetArena();
    if (message_arena != submessage_arena) {
      formula_rewrite_command_for_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command_for_undo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  formula_rewrite_command_for_undo_ = formula_rewrite_command_for_undo;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetInsertDrawablesArchive.formula_rewrite_command_for_undo)
}

// optional uint32 saved_next_untitled_resolver_index = 10;
inline bool CommandSheetInsertDrawablesArchive::_internal_has_saved_next_untitled_resolver_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSheetInsertDrawablesArchive::has_saved_next_untitled_resolver_index() const {
  return _internal_has_saved_next_untitled_resolver_index();
}
inline void CommandSheetInsertDrawablesArchive::clear_saved_next_untitled_resolver_index() {
  saved_next_untitled_resolver_index_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSheetInsertDrawablesArchive::_internal_saved_next_untitled_resolver_index() const {
  return saved_next_untitled_resolver_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSheetInsertDrawablesArchive::saved_next_untitled_resolver_index() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.saved_next_untitled_resolver_index)
  return _internal_saved_next_untitled_resolver_index();
}
inline void CommandSheetInsertDrawablesArchive::_internal_set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  saved_next_untitled_resolver_index_ = value;
}
inline void CommandSheetInsertDrawablesArchive::set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_saved_next_untitled_resolver_index(value);
  // @@protoc_insertion_point(field_set:TN.CommandSheetInsertDrawablesArchive.saved_next_untitled_resolver_index)
}

// repeated .TSP.UUID chart_entity_uid_for_backing_tables = 11;
inline int CommandSheetInsertDrawablesArchive::_internal_chart_entity_uid_for_backing_tables_size() const {
  return chart_entity_uid_for_backing_tables_.size();
}
inline int CommandSheetInsertDrawablesArchive::chart_entity_uid_for_backing_tables_size() const {
  return _internal_chart_entity_uid_for_backing_tables_size();
}
inline ::TSP::UUID* CommandSheetInsertDrawablesArchive::mutable_chart_entity_uid_for_backing_tables(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.chart_entity_uid_for_backing_tables)
  return chart_entity_uid_for_backing_tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSheetInsertDrawablesArchive::mutable_chart_entity_uid_for_backing_tables() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetInsertDrawablesArchive.chart_entity_uid_for_backing_tables)
  return &chart_entity_uid_for_backing_tables_;
}
inline const ::TSP::UUID& CommandSheetInsertDrawablesArchive::_internal_chart_entity_uid_for_backing_tables(int index) const {
  return chart_entity_uid_for_backing_tables_.Get(index);
}
inline const ::TSP::UUID& CommandSheetInsertDrawablesArchive::chart_entity_uid_for_backing_tables(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.chart_entity_uid_for_backing_tables)
  return _internal_chart_entity_uid_for_backing_tables(index);
}
inline ::TSP::UUID* CommandSheetInsertDrawablesArchive::_internal_add_chart_entity_uid_for_backing_tables() {
  return chart_entity_uid_for_backing_tables_.Add();
}
inline ::TSP::UUID* CommandSheetInsertDrawablesArchive::add_chart_entity_uid_for_backing_tables() {
  // @@protoc_insertion_point(field_add:TN.CommandSheetInsertDrawablesArchive.chart_entity_uid_for_backing_tables)
  return _internal_add_chart_entity_uid_for_backing_tables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSheetInsertDrawablesArchive::chart_entity_uid_for_backing_tables() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetInsertDrawablesArchive.chart_entity_uid_for_backing_tables)
  return chart_entity_uid_for_backing_tables_;
}

// repeated .TSP.Reference backing_tables = 12;
inline int CommandSheetInsertDrawablesArchive::_internal_backing_tables_size() const {
  return backing_tables_.size();
}
inline int CommandSheetInsertDrawablesArchive::backing_tables_size() const {
  return _internal_backing_tables_size();
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::mutable_backing_tables(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetInsertDrawablesArchive.backing_tables)
  return backing_tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSheetInsertDrawablesArchive::mutable_backing_tables() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetInsertDrawablesArchive.backing_tables)
  return &backing_tables_;
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::_internal_backing_tables(int index) const {
  return backing_tables_.Get(index);
}
inline const ::TSP::Reference& CommandSheetInsertDrawablesArchive::backing_tables(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetInsertDrawablesArchive.backing_tables)
  return _internal_backing_tables(index);
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::_internal_add_backing_tables() {
  return backing_tables_.Add();
}
inline ::TSP::Reference* CommandSheetInsertDrawablesArchive::add_backing_tables() {
  // @@protoc_insertion_point(field_add:TN.CommandSheetInsertDrawablesArchive.backing_tables)
  return _internal_add_backing_tables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSheetInsertDrawablesArchive::backing_tables() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetInsertDrawablesArchive.backing_tables)
  return backing_tables_;
}

// -------------------------------------------------------------------

// CommandSheetRemoveDrawablesArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSheetRemoveDrawablesArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSheetRemoveDrawablesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSheetRemoveDrawablesArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSheetRemoveDrawablesArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.super)
  return _internal_super();
}
inline void CommandSheetRemoveDrawablesArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetRemoveDrawablesArchive.super)
}
inline ::TSK::CommandArchive* CommandSheetRemoveDrawablesArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetRemoveDrawablesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetRemoveDrawablesArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetRemoveDrawablesArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSheetRemoveDrawablesArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.super)
  return _internal_mutable_super();
}
inline void CommandSheetRemoveDrawablesArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetRemoveDrawablesArchive.super)
}

// required .TSP.UUID sheet_id = 2;
inline bool CommandSheetRemoveDrawablesArchive::_internal_has_sheet_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sheet_id_ != nullptr);
  return value;
}
inline bool CommandSheetRemoveDrawablesArchive::has_sheet_id() const {
  return _internal_has_sheet_id();
}
inline const ::TSP::UUID& CommandSheetRemoveDrawablesArchive::_internal_sheet_id() const {
  const ::TSP::UUID* p = sheet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSheetRemoveDrawablesArchive::sheet_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.sheet_id)
  return _internal_sheet_id();
}
inline void CommandSheetRemoveDrawablesArchive::unsafe_arena_set_allocated_sheet_id(
    ::TSP::UUID* sheet_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  sheet_id_ = sheet_id;
  if (sheet_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetRemoveDrawablesArchive.sheet_id)
}
inline ::TSP::UUID* CommandSheetRemoveDrawablesArchive::release_sheet_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSheetRemoveDrawablesArchive::unsafe_arena_release_sheet_id() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetRemoveDrawablesArchive.sheet_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSheetRemoveDrawablesArchive::_internal_mutable_sheet_id() {
  _has_bits_[0] |= 0x00000002u;
  if (sheet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_id_ = p;
  }
  return sheet_id_;
}
inline ::TSP::UUID* CommandSheetRemoveDrawablesArchive::mutable_sheet_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.sheet_id)
  return _internal_mutable_sheet_id();
}
inline void CommandSheetRemoveDrawablesArchive::set_allocated_sheet_id(::TSP::UUID* sheet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  if (sheet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sheet_id_ = sheet_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetRemoveDrawablesArchive.sheet_id)
}

// repeated .TSK.RemoveIdOperationArgs args_list = 3;
inline int CommandSheetRemoveDrawablesArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int CommandSheetRemoveDrawablesArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::RemoveIdOperationArgs* CommandSheetRemoveDrawablesArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
CommandSheetRemoveDrawablesArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetRemoveDrawablesArchive.args_list)
  return &args_list_;
}
inline const ::TSK::RemoveIdOperationArgs& CommandSheetRemoveDrawablesArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::RemoveIdOperationArgs& CommandSheetRemoveDrawablesArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::RemoveIdOperationArgs* CommandSheetRemoveDrawablesArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::RemoveIdOperationArgs* CommandSheetRemoveDrawablesArchive::add_args_list() {
  // @@protoc_insertion_point(field_add:TN.CommandSheetRemoveDrawablesArchive.args_list)
  return _internal_add_args_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
CommandSheetRemoveDrawablesArchive::args_list() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetRemoveDrawablesArchive.args_list)
  return args_list_;
}

// repeated .TSP.Reference drawables = 4;
inline int CommandSheetRemoveDrawablesArchive::_internal_drawables_size() const {
  return drawables_.size();
}
inline int CommandSheetRemoveDrawablesArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.drawables)
  return drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSheetRemoveDrawablesArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetRemoveDrawablesArchive.drawables)
  return &drawables_;
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::_internal_drawables(int index) const {
  return drawables_.Get(index);
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::_internal_add_drawables() {
  return drawables_.Add();
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::add_drawables() {
  // @@protoc_insertion_point(field_add:TN.CommandSheetRemoveDrawablesArchive.drawables)
  return _internal_add_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSheetRemoveDrawablesArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetRemoveDrawablesArchive.drawables)
  return drawables_;
}

// repeated .TSP.Reference old_sheet_sidebar_order = 5;
inline int CommandSheetRemoveDrawablesArchive::_internal_old_sheet_sidebar_order_size() const {
  return old_sheet_sidebar_order_.size();
}
inline int CommandSheetRemoveDrawablesArchive::old_sheet_sidebar_order_size() const {
  return _internal_old_sheet_sidebar_order_size();
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::mutable_old_sheet_sidebar_order(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.old_sheet_sidebar_order)
  return old_sheet_sidebar_order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSheetRemoveDrawablesArchive::mutable_old_sheet_sidebar_order() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetRemoveDrawablesArchive.old_sheet_sidebar_order)
  return &old_sheet_sidebar_order_;
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::_internal_old_sheet_sidebar_order(int index) const {
  return old_sheet_sidebar_order_.Get(index);
}
inline const ::TSP::Reference& CommandSheetRemoveDrawablesArchive::old_sheet_sidebar_order(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.old_sheet_sidebar_order)
  return _internal_old_sheet_sidebar_order(index);
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::_internal_add_old_sheet_sidebar_order() {
  return old_sheet_sidebar_order_.Add();
}
inline ::TSP::Reference* CommandSheetRemoveDrawablesArchive::add_old_sheet_sidebar_order() {
  // @@protoc_insertion_point(field_add:TN.CommandSheetRemoveDrawablesArchive.old_sheet_sidebar_order)
  return _internal_add_old_sheet_sidebar_order();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSheetRemoveDrawablesArchive::old_sheet_sidebar_order() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetRemoveDrawablesArchive.old_sheet_sidebar_order)
  return old_sheet_sidebar_order_;
}

// repeated .TSP.UUID chart_entity_uid_for_backing_tables = 6;
inline int CommandSheetRemoveDrawablesArchive::_internal_chart_entity_uid_for_backing_tables_size() const {
  return chart_entity_uid_for_backing_tables_.size();
}
inline int CommandSheetRemoveDrawablesArchive::chart_entity_uid_for_backing_tables_size() const {
  return _internal_chart_entity_uid_for_backing_tables_size();
}
inline ::TSP::UUID* CommandSheetRemoveDrawablesArchive::mutable_chart_entity_uid_for_backing_tables(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.chart_entity_uid_for_backing_tables)
  return chart_entity_uid_for_backing_tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSheetRemoveDrawablesArchive::mutable_chart_entity_uid_for_backing_tables() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetRemoveDrawablesArchive.chart_entity_uid_for_backing_tables)
  return &chart_entity_uid_for_backing_tables_;
}
inline const ::TSP::UUID& CommandSheetRemoveDrawablesArchive::_internal_chart_entity_uid_for_backing_tables(int index) const {
  return chart_entity_uid_for_backing_tables_.Get(index);
}
inline const ::TSP::UUID& CommandSheetRemoveDrawablesArchive::chart_entity_uid_for_backing_tables(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.chart_entity_uid_for_backing_tables)
  return _internal_chart_entity_uid_for_backing_tables(index);
}
inline ::TSP::UUID* CommandSheetRemoveDrawablesArchive::_internal_add_chart_entity_uid_for_backing_tables() {
  return chart_entity_uid_for_backing_tables_.Add();
}
inline ::TSP::UUID* CommandSheetRemoveDrawablesArchive::add_chart_entity_uid_for_backing_tables() {
  // @@protoc_insertion_point(field_add:TN.CommandSheetRemoveDrawablesArchive.chart_entity_uid_for_backing_tables)
  return _internal_add_chart_entity_uid_for_backing_tables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSheetRemoveDrawablesArchive::chart_entity_uid_for_backing_tables() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetRemoveDrawablesArchive.chart_entity_uid_for_backing_tables)
  return chart_entity_uid_for_backing_tables_;
}

// repeated .TSP.UUID backing_table_uids = 7;
inline int CommandSheetRemoveDrawablesArchive::_internal_backing_table_uids_size() const {
  return backing_table_uids_.size();
}
inline int CommandSheetRemoveDrawablesArchive::backing_table_uids_size() const {
  return _internal_backing_table_uids_size();
}
inline ::TSP::UUID* CommandSheetRemoveDrawablesArchive::mutable_backing_table_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetRemoveDrawablesArchive.backing_table_uids)
  return backing_table_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSheetRemoveDrawablesArchive::mutable_backing_table_uids() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetRemoveDrawablesArchive.backing_table_uids)
  return &backing_table_uids_;
}
inline const ::TSP::UUID& CommandSheetRemoveDrawablesArchive::_internal_backing_table_uids(int index) const {
  return backing_table_uids_.Get(index);
}
inline const ::TSP::UUID& CommandSheetRemoveDrawablesArchive::backing_table_uids(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetRemoveDrawablesArchive.backing_table_uids)
  return _internal_backing_table_uids(index);
}
inline ::TSP::UUID* CommandSheetRemoveDrawablesArchive::_internal_add_backing_table_uids() {
  return backing_table_uids_.Add();
}
inline ::TSP::UUID* CommandSheetRemoveDrawablesArchive::add_backing_table_uids() {
  // @@protoc_insertion_point(field_add:TN.CommandSheetRemoveDrawablesArchive.backing_table_uids)
  return _internal_add_backing_table_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSheetRemoveDrawablesArchive::backing_table_uids() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetRemoveDrawablesArchive.backing_table_uids)
  return backing_table_uids_;
}

// -------------------------------------------------------------------

// CommandSheetMoveDrawableZOrderArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSheetMoveDrawableZOrderArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSheetMoveDrawableZOrderArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSheetMoveDrawableZOrderArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSheetMoveDrawableZOrderArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetMoveDrawableZOrderArchive.super)
  return _internal_super();
}
inline void CommandSheetMoveDrawableZOrderArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetMoveDrawableZOrderArchive.super)
}
inline ::TSK::CommandArchive* CommandSheetMoveDrawableZOrderArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetMoveDrawableZOrderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetMoveDrawableZOrderArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetMoveDrawableZOrderArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSheetMoveDrawableZOrderArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetMoveDrawableZOrderArchive.super)
  return _internal_mutable_super();
}
inline void CommandSheetMoveDrawableZOrderArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetMoveDrawableZOrderArchive.super)
}

// required .TSP.UUID sheet_id = 2;
inline bool CommandSheetMoveDrawableZOrderArchive::_internal_has_sheet_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sheet_id_ != nullptr);
  return value;
}
inline bool CommandSheetMoveDrawableZOrderArchive::has_sheet_id() const {
  return _internal_has_sheet_id();
}
inline const ::TSP::UUID& CommandSheetMoveDrawableZOrderArchive::_internal_sheet_id() const {
  const ::TSP::UUID* p = sheet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSheetMoveDrawableZOrderArchive::sheet_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetMoveDrawableZOrderArchive.sheet_id)
  return _internal_sheet_id();
}
inline void CommandSheetMoveDrawableZOrderArchive::unsafe_arena_set_allocated_sheet_id(
    ::TSP::UUID* sheet_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  sheet_id_ = sheet_id;
  if (sheet_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetMoveDrawableZOrderArchive.sheet_id)
}
inline ::TSP::UUID* CommandSheetMoveDrawableZOrderArchive::release_sheet_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSheetMoveDrawableZOrderArchive::unsafe_arena_release_sheet_id() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetMoveDrawableZOrderArchive.sheet_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSheetMoveDrawableZOrderArchive::_internal_mutable_sheet_id() {
  _has_bits_[0] |= 0x00000002u;
  if (sheet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_id_ = p;
  }
  return sheet_id_;
}
inline ::TSP::UUID* CommandSheetMoveDrawableZOrderArchive::mutable_sheet_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetMoveDrawableZOrderArchive.sheet_id)
  return _internal_mutable_sheet_id();
}
inline void CommandSheetMoveDrawableZOrderArchive::set_allocated_sheet_id(::TSP::UUID* sheet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  if (sheet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sheet_id_ = sheet_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetMoveDrawableZOrderArchive.sheet_id)
}

// repeated .TSK.RearrangeIdOperationArgs args_list = 3;
inline int CommandSheetMoveDrawableZOrderArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int CommandSheetMoveDrawableZOrderArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::RearrangeIdOperationArgs* CommandSheetMoveDrawableZOrderArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetMoveDrawableZOrderArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
CommandSheetMoveDrawableZOrderArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandSheetMoveDrawableZOrderArchive.args_list)
  return &args_list_;
}
inline const ::TSK::RearrangeIdOperationArgs& CommandSheetMoveDrawableZOrderArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::RearrangeIdOperationArgs& CommandSheetMoveDrawableZOrderArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetMoveDrawableZOrderArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::RearrangeIdOperationArgs* CommandSheetMoveDrawableZOrderArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::RearrangeIdOperationArgs* CommandSheetMoveDrawableZOrderArchive::add_args_list() {
  // @@protoc_insertion_point(field_add:TN.CommandSheetMoveDrawableZOrderArchive.args_list)
  return _internal_add_args_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
CommandSheetMoveDrawableZOrderArchive::args_list() const {
  // @@protoc_insertion_point(field_list:TN.CommandSheetMoveDrawableZOrderArchive.args_list)
  return args_list_;
}

// -------------------------------------------------------------------

// CommandDocumentInsertSheetArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandDocumentInsertSheetArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandDocumentInsertSheetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandDocumentInsertSheetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandDocumentInsertSheetArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentInsertSheetArchive.super)
  return _internal_super();
}
inline void CommandDocumentInsertSheetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentInsertSheetArchive.super)
}
inline ::TSK::CommandArchive* CommandDocumentInsertSheetArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentInsertSheetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentInsertSheetArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentInsertSheetArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandDocumentInsertSheetArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentInsertSheetArchive.super)
  return _internal_mutable_super();
}
inline void CommandDocumentInsertSheetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentInsertSheetArchive.super)
}

// repeated .TSK.AddIdOperationArgs argsList = 2;
inline int CommandDocumentInsertSheetArchive::_internal_argslist_size() const {
  return argslist_.size();
}
inline int CommandDocumentInsertSheetArchive::argslist_size() const {
  return _internal_argslist_size();
}
inline ::TSK::AddIdOperationArgs* CommandDocumentInsertSheetArchive::mutable_argslist(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentInsertSheetArchive.argsList)
  return argslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
CommandDocumentInsertSheetArchive::mutable_argslist() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandDocumentInsertSheetArchive.argsList)
  return &argslist_;
}
inline const ::TSK::AddIdOperationArgs& CommandDocumentInsertSheetArchive::_internal_argslist(int index) const {
  return argslist_.Get(index);
}
inline const ::TSK::AddIdOperationArgs& CommandDocumentInsertSheetArchive::argslist(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentInsertSheetArchive.argsList)
  return _internal_argslist(index);
}
inline ::TSK::AddIdOperationArgs* CommandDocumentInsertSheetArchive::_internal_add_argslist() {
  return argslist_.Add();
}
inline ::TSK::AddIdOperationArgs* CommandDocumentInsertSheetArchive::add_argslist() {
  // @@protoc_insertion_point(field_add:TN.CommandDocumentInsertSheetArchive.argsList)
  return _internal_add_argslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
CommandDocumentInsertSheetArchive::argslist() const {
  // @@protoc_insertion_point(field_list:TN.CommandDocumentInsertSheetArchive.argsList)
  return argslist_;
}

// repeated .TSP.Reference sheets = 3;
inline int CommandDocumentInsertSheetArchive::_internal_sheets_size() const {
  return sheets_.size();
}
inline int CommandDocumentInsertSheetArchive::sheets_size() const {
  return _internal_sheets_size();
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::mutable_sheets(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentInsertSheetArchive.sheets)
  return sheets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandDocumentInsertSheetArchive::mutable_sheets() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandDocumentInsertSheetArchive.sheets)
  return &sheets_;
}
inline const ::TSP::Reference& CommandDocumentInsertSheetArchive::_internal_sheets(int index) const {
  return sheets_.Get(index);
}
inline const ::TSP::Reference& CommandDocumentInsertSheetArchive::sheets(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentInsertSheetArchive.sheets)
  return _internal_sheets(index);
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::_internal_add_sheets() {
  return sheets_.Add();
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::add_sheets() {
  // @@protoc_insertion_point(field_add:TN.CommandDocumentInsertSheetArchive.sheets)
  return _internal_add_sheets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandDocumentInsertSheetArchive::sheets() const {
  // @@protoc_insertion_point(field_list:TN.CommandDocumentInsertSheetArchive.sheets)
  return sheets_;
}

// optional bool allowSameSheetNameAsForms = 4;
inline bool CommandDocumentInsertSheetArchive::_internal_has_allowsamesheetnameasforms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandDocumentInsertSheetArchive::has_allowsamesheetnameasforms() const {
  return _internal_has_allowsamesheetnameasforms();
}
inline void CommandDocumentInsertSheetArchive::clear_allowsamesheetnameasforms() {
  allowsamesheetnameasforms_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandDocumentInsertSheetArchive::_internal_allowsamesheetnameasforms() const {
  return allowsamesheetnameasforms_;
}
inline bool CommandDocumentInsertSheetArchive::allowsamesheetnameasforms() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentInsertSheetArchive.allowSameSheetNameAsForms)
  return _internal_allowsamesheetnameasforms();
}
inline void CommandDocumentInsertSheetArchive::_internal_set_allowsamesheetnameasforms(bool value) {
  _has_bits_[0] |= 0x00000004u;
  allowsamesheetnameasforms_ = value;
}
inline void CommandDocumentInsertSheetArchive::set_allowsamesheetnameasforms(bool value) {
  _internal_set_allowsamesheetnameasforms(value);
  // @@protoc_insertion_point(field_set:TN.CommandDocumentInsertSheetArchive.allowSameSheetNameAsForms)
}

// repeated .TSP.UUID custom_format_keys = 5;
inline int CommandDocumentInsertSheetArchive::_internal_custom_format_keys_size() const {
  return custom_format_keys_.size();
}
inline int CommandDocumentInsertSheetArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* CommandDocumentInsertSheetArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentInsertSheetArchive.custom_format_keys)
  return custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandDocumentInsertSheetArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandDocumentInsertSheetArchive.custom_format_keys)
  return &custom_format_keys_;
}
inline const ::TSP::UUID& CommandDocumentInsertSheetArchive::_internal_custom_format_keys(int index) const {
  return custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& CommandDocumentInsertSheetArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentInsertSheetArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* CommandDocumentInsertSheetArchive::_internal_add_custom_format_keys() {
  return custom_format_keys_.Add();
}
inline ::TSP::UUID* CommandDocumentInsertSheetArchive::add_custom_format_keys() {
  // @@protoc_insertion_point(field_add:TN.CommandDocumentInsertSheetArchive.custom_format_keys)
  return _internal_add_custom_format_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandDocumentInsertSheetArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:TN.CommandDocumentInsertSheetArchive.custom_format_keys)
  return custom_format_keys_;
}

// optional .TSP.Reference drawable_undo_object = 6;
inline bool CommandDocumentInsertSheetArchive::_internal_has_drawable_undo_object() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || drawable_undo_object_ != nullptr);
  return value;
}
inline bool CommandDocumentInsertSheetArchive::has_drawable_undo_object() const {
  return _internal_has_drawable_undo_object();
}
inline const ::TSP::Reference& CommandDocumentInsertSheetArchive::_internal_drawable_undo_object() const {
  const ::TSP::Reference* p = drawable_undo_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandDocumentInsertSheetArchive::drawable_undo_object() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentInsertSheetArchive.drawable_undo_object)
  return _internal_drawable_undo_object();
}
inline void CommandDocumentInsertSheetArchive::unsafe_arena_set_allocated_drawable_undo_object(
    ::TSP::Reference* drawable_undo_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_undo_object_);
  }
  drawable_undo_object_ = drawable_undo_object;
  if (drawable_undo_object) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentInsertSheetArchive.drawable_undo_object)
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::release_drawable_undo_object() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = drawable_undo_object_;
  drawable_undo_object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::unsafe_arena_release_drawable_undo_object() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentInsertSheetArchive.drawable_undo_object)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = drawable_undo_object_;
  drawable_undo_object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::_internal_mutable_drawable_undo_object() {
  _has_bits_[0] |= 0x00000002u;
  if (drawable_undo_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    drawable_undo_object_ = p;
  }
  return drawable_undo_object_;
}
inline ::TSP::Reference* CommandDocumentInsertSheetArchive::mutable_drawable_undo_object() {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentInsertSheetArchive.drawable_undo_object)
  return _internal_mutable_drawable_undo_object();
}
inline void CommandDocumentInsertSheetArchive::set_allocated_drawable_undo_object(::TSP::Reference* drawable_undo_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_undo_object_);
  }
  if (drawable_undo_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_undo_object)->GetArena();
    if (message_arena != submessage_arena) {
      drawable_undo_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable_undo_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  drawable_undo_object_ = drawable_undo_object;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentInsertSheetArchive.drawable_undo_object)
}

// repeated .TN.UUIDSheetUIStateDictionaryArchive sheet_uistates = 7;
inline int CommandDocumentInsertSheetArchive::_internal_sheet_uistates_size() const {
  return sheet_uistates_.size();
}
inline int CommandDocumentInsertSheetArchive::sheet_uistates_size() const {
  return _internal_sheet_uistates_size();
}
inline ::TN::UUIDSheetUIStateDictionaryArchive* CommandDocumentInsertSheetArchive::mutable_sheet_uistates(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentInsertSheetArchive.sheet_uistates)
  return sheet_uistates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >*
CommandDocumentInsertSheetArchive::mutable_sheet_uistates() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandDocumentInsertSheetArchive.sheet_uistates)
  return &sheet_uistates_;
}
inline const ::TN::UUIDSheetUIStateDictionaryArchive& CommandDocumentInsertSheetArchive::_internal_sheet_uistates(int index) const {
  return sheet_uistates_.Get(index);
}
inline const ::TN::UUIDSheetUIStateDictionaryArchive& CommandDocumentInsertSheetArchive::sheet_uistates(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentInsertSheetArchive.sheet_uistates)
  return _internal_sheet_uistates(index);
}
inline ::TN::UUIDSheetUIStateDictionaryArchive* CommandDocumentInsertSheetArchive::_internal_add_sheet_uistates() {
  return sheet_uistates_.Add();
}
inline ::TN::UUIDSheetUIStateDictionaryArchive* CommandDocumentInsertSheetArchive::add_sheet_uistates() {
  // @@protoc_insertion_point(field_add:TN.CommandDocumentInsertSheetArchive.sheet_uistates)
  return _internal_add_sheet_uistates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >&
CommandDocumentInsertSheetArchive::sheet_uistates() const {
  // @@protoc_insertion_point(field_list:TN.CommandDocumentInsertSheetArchive.sheet_uistates)
  return sheet_uistates_;
}

// optional bool for_paste = 8;
inline bool CommandDocumentInsertSheetArchive::_internal_has_for_paste() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandDocumentInsertSheetArchive::has_for_paste() const {
  return _internal_has_for_paste();
}
inline void CommandDocumentInsertSheetArchive::clear_for_paste() {
  for_paste_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CommandDocumentInsertSheetArchive::_internal_for_paste() const {
  return for_paste_;
}
inline bool CommandDocumentInsertSheetArchive::for_paste() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentInsertSheetArchive.for_paste)
  return _internal_for_paste();
}
inline void CommandDocumentInsertSheetArchive::_internal_set_for_paste(bool value) {
  _has_bits_[0] |= 0x00000008u;
  for_paste_ = value;
}
inline void CommandDocumentInsertSheetArchive::set_for_paste(bool value) {
  _internal_set_for_paste(value);
  // @@protoc_insertion_point(field_set:TN.CommandDocumentInsertSheetArchive.for_paste)
}

// -------------------------------------------------------------------

// CommandDocumentRemoveSheetArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandDocumentRemoveSheetArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandDocumentRemoveSheetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandDocumentRemoveSheetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandDocumentRemoveSheetArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.super)
  return _internal_super();
}
inline void CommandDocumentRemoveSheetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentRemoveSheetArchive.super)
}
inline ::TSK::CommandArchive* CommandDocumentRemoveSheetArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentRemoveSheetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentRemoveSheetArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentRemoveSheetArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandDocumentRemoveSheetArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentRemoveSheetArchive.super)
  return _internal_mutable_super();
}
inline void CommandDocumentRemoveSheetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentRemoveSheetArchive.super)
}

// repeated .TSK.RemoveIdOperationArgs argsList = 2;
inline int CommandDocumentRemoveSheetArchive::_internal_argslist_size() const {
  return argslist_.size();
}
inline int CommandDocumentRemoveSheetArchive::argslist_size() const {
  return _internal_argslist_size();
}
inline ::TSK::RemoveIdOperationArgs* CommandDocumentRemoveSheetArchive::mutable_argslist(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentRemoveSheetArchive.argsList)
  return argslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
CommandDocumentRemoveSheetArchive::mutable_argslist() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandDocumentRemoveSheetArchive.argsList)
  return &argslist_;
}
inline const ::TSK::RemoveIdOperationArgs& CommandDocumentRemoveSheetArchive::_internal_argslist(int index) const {
  return argslist_.Get(index);
}
inline const ::TSK::RemoveIdOperationArgs& CommandDocumentRemoveSheetArchive::argslist(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.argsList)
  return _internal_argslist(index);
}
inline ::TSK::RemoveIdOperationArgs* CommandDocumentRemoveSheetArchive::_internal_add_argslist() {
  return argslist_.Add();
}
inline ::TSK::RemoveIdOperationArgs* CommandDocumentRemoveSheetArchive::add_argslist() {
  // @@protoc_insertion_point(field_add:TN.CommandDocumentRemoveSheetArchive.argsList)
  return _internal_add_argslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
CommandDocumentRemoveSheetArchive::argslist() const {
  // @@protoc_insertion_point(field_list:TN.CommandDocumentRemoveSheetArchive.argsList)
  return argslist_;
}

// repeated .TSP.Reference sheets = 3;
inline int CommandDocumentRemoveSheetArchive::_internal_sheets_size() const {
  return sheets_.size();
}
inline int CommandDocumentRemoveSheetArchive::sheets_size() const {
  return _internal_sheets_size();
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::mutable_sheets(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentRemoveSheetArchive.sheets)
  return sheets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandDocumentRemoveSheetArchive::mutable_sheets() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandDocumentRemoveSheetArchive.sheets)
  return &sheets_;
}
inline const ::TSP::Reference& CommandDocumentRemoveSheetArchive::_internal_sheets(int index) const {
  return sheets_.Get(index);
}
inline const ::TSP::Reference& CommandDocumentRemoveSheetArchive::sheets(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.sheets)
  return _internal_sheets(index);
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::_internal_add_sheets() {
  return sheets_.Add();
}
inline ::TSP::Reference* CommandDocumentRemoveSheetArchive::add_sheets() {
  // @@protoc_insertion_point(field_add:TN.CommandDocumentRemoveSheetArchive.sheets)
  return _internal_add_sheets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandDocumentRemoveSheetArchive::sheets() const {
  // @@protoc_insertion_point(field_list:TN.CommandDocumentRemoveSheetArchive.sheets)
  return sheets_;
}

// required string rescueId = 4;
inline bool CommandDocumentRemoveSheetArchive::_internal_has_rescueid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandDocumentRemoveSheetArchive::has_rescueid() const {
  return _internal_has_rescueid();
}
inline void CommandDocumentRemoveSheetArchive::clear_rescueid() {
  rescueid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandDocumentRemoveSheetArchive::rescueid() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.rescueId)
  return _internal_rescueid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CommandDocumentRemoveSheetArchive::set_rescueid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 rescueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TN.CommandDocumentRemoveSheetArchive.rescueId)
}
inline std::string* CommandDocumentRemoveSheetArchive::mutable_rescueid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentRemoveSheetArchive.rescueId)
  return _internal_mutable_rescueid();
}
inline const std::string& CommandDocumentRemoveSheetArchive::_internal_rescueid() const {
  return rescueid_.Get();
}
inline void CommandDocumentRemoveSheetArchive::_internal_set_rescueid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rescueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CommandDocumentRemoveSheetArchive::_internal_mutable_rescueid() {
  _has_bits_[0] |= 0x00000001u;
  return rescueid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandDocumentRemoveSheetArchive::release_rescueid() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentRemoveSheetArchive.rescueId)
  if (!_internal_has_rescueid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rescueid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandDocumentRemoveSheetArchive::set_allocated_rescueid(std::string* rescueid) {
  if (rescueid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rescueid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rescueid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentRemoveSheetArchive.rescueId)
}

// repeated .TN.UUIDSheetUIStateDictionaryArchive sheet_uistates = 5;
inline int CommandDocumentRemoveSheetArchive::_internal_sheet_uistates_size() const {
  return sheet_uistates_.size();
}
inline int CommandDocumentRemoveSheetArchive::sheet_uistates_size() const {
  return _internal_sheet_uistates_size();
}
inline ::TN::UUIDSheetUIStateDictionaryArchive* CommandDocumentRemoveSheetArchive::mutable_sheet_uistates(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentRemoveSheetArchive.sheet_uistates)
  return sheet_uistates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >*
CommandDocumentRemoveSheetArchive::mutable_sheet_uistates() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandDocumentRemoveSheetArchive.sheet_uistates)
  return &sheet_uistates_;
}
inline const ::TN::UUIDSheetUIStateDictionaryArchive& CommandDocumentRemoveSheetArchive::_internal_sheet_uistates(int index) const {
  return sheet_uistates_.Get(index);
}
inline const ::TN::UUIDSheetUIStateDictionaryArchive& CommandDocumentRemoveSheetArchive::sheet_uistates(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.sheet_uistates)
  return _internal_sheet_uistates(index);
}
inline ::TN::UUIDSheetUIStateDictionaryArchive* CommandDocumentRemoveSheetArchive::_internal_add_sheet_uistates() {
  return sheet_uistates_.Add();
}
inline ::TN::UUIDSheetUIStateDictionaryArchive* CommandDocumentRemoveSheetArchive::add_sheet_uistates() {
  // @@protoc_insertion_point(field_add:TN.CommandDocumentRemoveSheetArchive.sheet_uistates)
  return _internal_add_sheet_uistates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::UUIDSheetUIStateDictionaryArchive >&
CommandDocumentRemoveSheetArchive::sheet_uistates() const {
  // @@protoc_insertion_point(field_list:TN.CommandDocumentRemoveSheetArchive.sheet_uistates)
  return sheet_uistates_;
}

// optional bool is_undo_paste = 6;
inline bool CommandDocumentRemoveSheetArchive::_internal_has_is_undo_paste() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandDocumentRemoveSheetArchive::has_is_undo_paste() const {
  return _internal_has_is_undo_paste();
}
inline void CommandDocumentRemoveSheetArchive::clear_is_undo_paste() {
  is_undo_paste_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandDocumentRemoveSheetArchive::_internal_is_undo_paste() const {
  return is_undo_paste_;
}
inline bool CommandDocumentRemoveSheetArchive::is_undo_paste() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentRemoveSheetArchive.is_undo_paste)
  return _internal_is_undo_paste();
}
inline void CommandDocumentRemoveSheetArchive::_internal_set_is_undo_paste(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_undo_paste_ = value;
}
inline void CommandDocumentRemoveSheetArchive::set_is_undo_paste(bool value) {
  _internal_set_is_undo_paste(value);
  // @@protoc_insertion_point(field_set:TN.CommandDocumentRemoveSheetArchive.is_undo_paste)
}

// -------------------------------------------------------------------

// CommandDocumentReorderSheetArchive

// repeated .TSK.RearrangeIdOperationArgs argsList = 1;
inline int CommandDocumentReorderSheetArchive::_internal_argslist_size() const {
  return argslist_.size();
}
inline int CommandDocumentReorderSheetArchive::argslist_size() const {
  return _internal_argslist_size();
}
inline ::TSK::RearrangeIdOperationArgs* CommandDocumentReorderSheetArchive::mutable_argslist(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentReorderSheetArchive.argsList)
  return argslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
CommandDocumentReorderSheetArchive::mutable_argslist() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandDocumentReorderSheetArchive.argsList)
  return &argslist_;
}
inline const ::TSK::RearrangeIdOperationArgs& CommandDocumentReorderSheetArchive::_internal_argslist(int index) const {
  return argslist_.Get(index);
}
inline const ::TSK::RearrangeIdOperationArgs& CommandDocumentReorderSheetArchive::argslist(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReorderSheetArchive.argsList)
  return _internal_argslist(index);
}
inline ::TSK::RearrangeIdOperationArgs* CommandDocumentReorderSheetArchive::_internal_add_argslist() {
  return argslist_.Add();
}
inline ::TSK::RearrangeIdOperationArgs* CommandDocumentReorderSheetArchive::add_argslist() {
  // @@protoc_insertion_point(field_add:TN.CommandDocumentReorderSheetArchive.argsList)
  return _internal_add_argslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
CommandDocumentReorderSheetArchive::argslist() const {
  // @@protoc_insertion_point(field_list:TN.CommandDocumentReorderSheetArchive.argsList)
  return argslist_;
}

// required .TSK.CommandArchive super = 2;
inline bool CommandDocumentReorderSheetArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandDocumentReorderSheetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandDocumentReorderSheetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandDocumentReorderSheetArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandDocumentReorderSheetArchive.super)
  return _internal_super();
}
inline void CommandDocumentReorderSheetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandDocumentReorderSheetArchive.super)
}
inline ::TSK::CommandArchive* CommandDocumentReorderSheetArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentReorderSheetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandDocumentReorderSheetArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandDocumentReorderSheetArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandDocumentReorderSheetArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandDocumentReorderSheetArchive.super)
  return _internal_mutable_super();
}
inline void CommandDocumentReorderSheetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandDocumentReorderSheetArchive.super)
}

// -------------------------------------------------------------------

// CommandSetSheetNameArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSetSheetNameArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetSheetNameArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetSheetNameArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetSheetNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetNameArchive.super)
  return _internal_super();
}
inline void CommandSetSheetNameArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetSheetNameArchive.super)
}
inline ::TSK::CommandArchive* CommandSetSheetNameArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetSheetNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetNameArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetSheetNameArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetSheetNameArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetNameArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetSheetNameArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetNameArchive.super)
}

// required string newname = 2;
inline bool CommandSetSheetNameArchive::_internal_has_newname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetSheetNameArchive::has_newname() const {
  return _internal_has_newname();
}
inline void CommandSetSheetNameArchive::clear_newname() {
  newname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetSheetNameArchive::newname() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetNameArchive.newname)
  return _internal_newname();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CommandSetSheetNameArchive::set_newname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TN.CommandSetSheetNameArchive.newname)
}
inline std::string* CommandSetSheetNameArchive::mutable_newname() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetNameArchive.newname)
  return _internal_mutable_newname();
}
inline const std::string& CommandSetSheetNameArchive::_internal_newname() const {
  return newname_.Get();
}
inline void CommandSetSheetNameArchive::_internal_set_newname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CommandSetSheetNameArchive::_internal_mutable_newname() {
  _has_bits_[0] |= 0x00000001u;
  return newname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandSetSheetNameArchive::release_newname() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetNameArchive.newname)
  if (!_internal_has_newname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return newname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandSetSheetNameArchive::set_allocated_newname(std::string* newname) {
  if (newname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  newname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetNameArchive.newname)
}

// required .TSP.UUID sheet_uid = 3;
inline bool CommandSetSheetNameArchive::_internal_has_sheet_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uid_ != nullptr);
  return value;
}
inline bool CommandSetSheetNameArchive::has_sheet_uid() const {
  return _internal_has_sheet_uid();
}
inline const ::TSP::UUID& CommandSetSheetNameArchive::_internal_sheet_uid() const {
  const ::TSP::UUID* p = sheet_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetSheetNameArchive::sheet_uid() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetNameArchive.sheet_uid)
  return _internal_sheet_uid();
}
inline void CommandSetSheetNameArchive::unsafe_arena_set_allocated_sheet_uid(
    ::TSP::UUID* sheet_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  sheet_uid_ = sheet_uid;
  if (sheet_uid) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetSheetNameArchive.sheet_uid)
}
inline ::TSP::UUID* CommandSetSheetNameArchive::release_sheet_uid() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSetSheetNameArchive::unsafe_arena_release_sheet_uid() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetNameArchive.sheet_uid)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetSheetNameArchive::_internal_mutable_sheet_uid() {
  _has_bits_[0] |= 0x00000008u;
  if (sheet_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uid_ = p;
  }
  return sheet_uid_;
}
inline ::TSP::UUID* CommandSetSheetNameArchive::mutable_sheet_uid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetNameArchive.sheet_uid)
  return _internal_mutable_sheet_uid();
}
inline void CommandSetSheetNameArchive::set_allocated_sheet_uid(::TSP::UUID* sheet_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  if (sheet_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sheet_uid_ = sheet_uid;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetNameArchive.sheet_uid)
}

// optional string oldname = 4;
inline bool CommandSetSheetNameArchive::_internal_has_oldname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetSheetNameArchive::has_oldname() const {
  return _internal_has_oldname();
}
inline void CommandSetSheetNameArchive::clear_oldname() {
  oldname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetSheetNameArchive::oldname() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetNameArchive.oldname)
  return _internal_oldname();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CommandSetSheetNameArchive::set_oldname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 oldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TN.CommandSetSheetNameArchive.oldname)
}
inline std::string* CommandSetSheetNameArchive::mutable_oldname() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetNameArchive.oldname)
  return _internal_mutable_oldname();
}
inline const std::string& CommandSetSheetNameArchive::_internal_oldname() const {
  return oldname_.Get();
}
inline void CommandSetSheetNameArchive::_internal_set_oldname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  oldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CommandSetSheetNameArchive::_internal_mutable_oldname() {
  _has_bits_[0] |= 0x00000002u;
  return oldname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandSetSheetNameArchive::release_oldname() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetNameArchive.oldname)
  if (!_internal_has_oldname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return oldname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandSetSheetNameArchive::set_allocated_oldname(std::string* oldname) {
  if (oldname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  oldname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetNameArchive.oldname)
}

// -------------------------------------------------------------------

// CommandSetSheetShouldPrintCommentsArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSetSheetShouldPrintCommentsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetSheetShouldPrintCommentsArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetSheetShouldPrintCommentsArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetSheetShouldPrintCommentsArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetShouldPrintCommentsArchive.super)
  return _internal_super();
}
inline void CommandSetSheetShouldPrintCommentsArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetSheetShouldPrintCommentsArchive.super)
}
inline ::TSK::CommandArchive* CommandSetSheetShouldPrintCommentsArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetSheetShouldPrintCommentsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetShouldPrintCommentsArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetSheetShouldPrintCommentsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetSheetShouldPrintCommentsArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetShouldPrintCommentsArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetSheetShouldPrintCommentsArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetShouldPrintCommentsArchive.super)
}

// required bool new_should_print_comments = 2;
inline bool CommandSetSheetShouldPrintCommentsArchive::_internal_has_new_should_print_comments() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetSheetShouldPrintCommentsArchive::has_new_should_print_comments() const {
  return _internal_has_new_should_print_comments();
}
inline void CommandSetSheetShouldPrintCommentsArchive::clear_new_should_print_comments() {
  new_should_print_comments_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetSheetShouldPrintCommentsArchive::_internal_new_should_print_comments() const {
  return new_should_print_comments_;
}
inline bool CommandSetSheetShouldPrintCommentsArchive::new_should_print_comments() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetShouldPrintCommentsArchive.new_should_print_comments)
  return _internal_new_should_print_comments();
}
inline void CommandSetSheetShouldPrintCommentsArchive::_internal_set_new_should_print_comments(bool value) {
  _has_bits_[0] |= 0x00000004u;
  new_should_print_comments_ = value;
}
inline void CommandSetSheetShouldPrintCommentsArchive::set_new_should_print_comments(bool value) {
  _internal_set_new_should_print_comments(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetSheetShouldPrintCommentsArchive.new_should_print_comments)
}

// required .TSP.UUID sheet_uid = 3;
inline bool CommandSetSheetShouldPrintCommentsArchive::_internal_has_sheet_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uid_ != nullptr);
  return value;
}
inline bool CommandSetSheetShouldPrintCommentsArchive::has_sheet_uid() const {
  return _internal_has_sheet_uid();
}
inline const ::TSP::UUID& CommandSetSheetShouldPrintCommentsArchive::_internal_sheet_uid() const {
  const ::TSP::UUID* p = sheet_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetSheetShouldPrintCommentsArchive::sheet_uid() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetShouldPrintCommentsArchive.sheet_uid)
  return _internal_sheet_uid();
}
inline void CommandSetSheetShouldPrintCommentsArchive::unsafe_arena_set_allocated_sheet_uid(
    ::TSP::UUID* sheet_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  sheet_uid_ = sheet_uid;
  if (sheet_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetSheetShouldPrintCommentsArchive.sheet_uid)
}
inline ::TSP::UUID* CommandSetSheetShouldPrintCommentsArchive::release_sheet_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSetSheetShouldPrintCommentsArchive::unsafe_arena_release_sheet_uid() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetShouldPrintCommentsArchive.sheet_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetSheetShouldPrintCommentsArchive::_internal_mutable_sheet_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (sheet_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uid_ = p;
  }
  return sheet_uid_;
}
inline ::TSP::UUID* CommandSetSheetShouldPrintCommentsArchive::mutable_sheet_uid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetShouldPrintCommentsArchive.sheet_uid)
  return _internal_mutable_sheet_uid();
}
inline void CommandSetSheetShouldPrintCommentsArchive::set_allocated_sheet_uid(::TSP::UUID* sheet_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  if (sheet_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sheet_uid_ = sheet_uid;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetShouldPrintCommentsArchive.sheet_uid)
}

// required bool old_should_print_comments = 4;
inline bool CommandSetSheetShouldPrintCommentsArchive::_internal_has_old_should_print_comments() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetSheetShouldPrintCommentsArchive::has_old_should_print_comments() const {
  return _internal_has_old_should_print_comments();
}
inline void CommandSetSheetShouldPrintCommentsArchive::clear_old_should_print_comments() {
  old_should_print_comments_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CommandSetSheetShouldPrintCommentsArchive::_internal_old_should_print_comments() const {
  return old_should_print_comments_;
}
inline bool CommandSetSheetShouldPrintCommentsArchive::old_should_print_comments() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetShouldPrintCommentsArchive.old_should_print_comments)
  return _internal_old_should_print_comments();
}
inline void CommandSetSheetShouldPrintCommentsArchive::_internal_set_old_should_print_comments(bool value) {
  _has_bits_[0] |= 0x00000008u;
  old_should_print_comments_ = value;
}
inline void CommandSetSheetShouldPrintCommentsArchive::set_old_should_print_comments(bool value) {
  _internal_set_old_should_print_comments(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetSheetShouldPrintCommentsArchive.old_should_print_comments)
}

// -------------------------------------------------------------------

// CommandSetSheetDirectionArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSetSheetDirectionArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetSheetDirectionArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetSheetDirectionArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetSheetDirectionArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetDirectionArchive.super)
  return _internal_super();
}
inline void CommandSetSheetDirectionArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetSheetDirectionArchive.super)
}
inline ::TSK::CommandArchive* CommandSetSheetDirectionArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetSheetDirectionArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetDirectionArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetSheetDirectionArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetSheetDirectionArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetDirectionArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetSheetDirectionArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetDirectionArchive.super)
}

// required .TN.PageLayoutDirection newDirection = 2;
inline bool CommandSetSheetDirectionArchive::_internal_has_newdirection() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetSheetDirectionArchive::has_newdirection() const {
  return _internal_has_newdirection();
}
inline void CommandSetSheetDirectionArchive::clear_newdirection() {
  newdirection_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TN::PageLayoutDirection CommandSetSheetDirectionArchive::_internal_newdirection() const {
  return static_cast< ::TN::PageLayoutDirection >(newdirection_);
}
inline ::TN::PageLayoutDirection CommandSetSheetDirectionArchive::newdirection() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetDirectionArchive.newDirection)
  return _internal_newdirection();
}
inline void CommandSetSheetDirectionArchive::_internal_set_newdirection(::TN::PageLayoutDirection value) {
  assert(::TN::PageLayoutDirection_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  newdirection_ = value;
}
inline void CommandSetSheetDirectionArchive::set_newdirection(::TN::PageLayoutDirection value) {
  _internal_set_newdirection(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetSheetDirectionArchive.newDirection)
}

// required .TSP.UUID sheet_uid = 3;
inline bool CommandSetSheetDirectionArchive::_internal_has_sheet_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uid_ != nullptr);
  return value;
}
inline bool CommandSetSheetDirectionArchive::has_sheet_uid() const {
  return _internal_has_sheet_uid();
}
inline const ::TSP::UUID& CommandSetSheetDirectionArchive::_internal_sheet_uid() const {
  const ::TSP::UUID* p = sheet_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetSheetDirectionArchive::sheet_uid() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetDirectionArchive.sheet_uid)
  return _internal_sheet_uid();
}
inline void CommandSetSheetDirectionArchive::unsafe_arena_set_allocated_sheet_uid(
    ::TSP::UUID* sheet_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  sheet_uid_ = sheet_uid;
  if (sheet_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetSheetDirectionArchive.sheet_uid)
}
inline ::TSP::UUID* CommandSetSheetDirectionArchive::release_sheet_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSetSheetDirectionArchive::unsafe_arena_release_sheet_uid() {
  // @@protoc_insertion_point(field_release:TN.CommandSetSheetDirectionArchive.sheet_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetSheetDirectionArchive::_internal_mutable_sheet_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (sheet_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uid_ = p;
  }
  return sheet_uid_;
}
inline ::TSP::UUID* CommandSetSheetDirectionArchive::mutable_sheet_uid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetSheetDirectionArchive.sheet_uid)
  return _internal_mutable_sheet_uid();
}
inline void CommandSetSheetDirectionArchive::set_allocated_sheet_uid(::TSP::UUID* sheet_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  if (sheet_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sheet_uid_ = sheet_uid;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetSheetDirectionArchive.sheet_uid)
}

// optional .TN.PageLayoutDirection oldDirection = 4;
inline bool CommandSetSheetDirectionArchive::_internal_has_olddirection() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetSheetDirectionArchive::has_olddirection() const {
  return _internal_has_olddirection();
}
inline void CommandSetSheetDirectionArchive::clear_olddirection() {
  olddirection_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TN::PageLayoutDirection CommandSetSheetDirectionArchive::_internal_olddirection() const {
  return static_cast< ::TN::PageLayoutDirection >(olddirection_);
}
inline ::TN::PageLayoutDirection CommandSetSheetDirectionArchive::olddirection() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetSheetDirectionArchive.oldDirection)
  return _internal_olddirection();
}
inline void CommandSetSheetDirectionArchive::_internal_set_olddirection(::TN::PageLayoutDirection value) {
  assert(::TN::PageLayoutDirection_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  olddirection_ = value;
}
inline void CommandSetSheetDirectionArchive::set_olddirection(::TN::PageLayoutDirection value) {
  _internal_set_olddirection(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetSheetDirectionArchive.oldDirection)
}

// -------------------------------------------------------------------

// CommandSetPageOrientationArchive

// required bool in_portrait_page_orientation = 1;
inline bool CommandSetPageOrientationArchive::_internal_has_in_portrait_page_orientation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetPageOrientationArchive::has_in_portrait_page_orientation() const {
  return _internal_has_in_portrait_page_orientation();
}
inline void CommandSetPageOrientationArchive::clear_in_portrait_page_orientation() {
  in_portrait_page_orientation_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetPageOrientationArchive::_internal_in_portrait_page_orientation() const {
  return in_portrait_page_orientation_;
}
inline bool CommandSetPageOrientationArchive::in_portrait_page_orientation() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPageOrientationArchive.in_portrait_page_orientation)
  return _internal_in_portrait_page_orientation();
}
inline void CommandSetPageOrientationArchive::_internal_set_in_portrait_page_orientation(bool value) {
  _has_bits_[0] |= 0x00000004u;
  in_portrait_page_orientation_ = value;
}
inline void CommandSetPageOrientationArchive::set_in_portrait_page_orientation(bool value) {
  _internal_set_in_portrait_page_orientation(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetPageOrientationArchive.in_portrait_page_orientation)
}

// required .TSP.UUID sheet_uid = 2;
inline bool CommandSetPageOrientationArchive::_internal_has_sheet_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uid_ != nullptr);
  return value;
}
inline bool CommandSetPageOrientationArchive::has_sheet_uid() const {
  return _internal_has_sheet_uid();
}
inline const ::TSP::UUID& CommandSetPageOrientationArchive::_internal_sheet_uid() const {
  const ::TSP::UUID* p = sheet_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetPageOrientationArchive::sheet_uid() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPageOrientationArchive.sheet_uid)
  return _internal_sheet_uid();
}
inline void CommandSetPageOrientationArchive::unsafe_arena_set_allocated_sheet_uid(
    ::TSP::UUID* sheet_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  sheet_uid_ = sheet_uid;
  if (sheet_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPageOrientationArchive.sheet_uid)
}
inline ::TSP::UUID* CommandSetPageOrientationArchive::release_sheet_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSetPageOrientationArchive::unsafe_arena_release_sheet_uid() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPageOrientationArchive.sheet_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetPageOrientationArchive::_internal_mutable_sheet_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uid_ = p;
  }
  return sheet_uid_;
}
inline ::TSP::UUID* CommandSetPageOrientationArchive::mutable_sheet_uid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPageOrientationArchive.sheet_uid)
  return _internal_mutable_sheet_uid();
}
inline void CommandSetPageOrientationArchive::set_allocated_sheet_uid(::TSP::UUID* sheet_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  if (sheet_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_uid_ = sheet_uid;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPageOrientationArchive.sheet_uid)
}

// required .TSK.CommandArchive super = 3;
inline bool CommandSetPageOrientationArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetPageOrientationArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetPageOrientationArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetPageOrientationArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPageOrientationArchive.super)
  return _internal_super();
}
inline void CommandSetPageOrientationArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPageOrientationArchive.super)
}
inline ::TSK::CommandArchive* CommandSetPageOrientationArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetPageOrientationArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPageOrientationArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetPageOrientationArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetPageOrientationArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPageOrientationArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetPageOrientationArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPageOrientationArchive.super)
}

// required bool prev_in_portrait_page_orientation = 4;
inline bool CommandSetPageOrientationArchive::_internal_has_prev_in_portrait_page_orientation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetPageOrientationArchive::has_prev_in_portrait_page_orientation() const {
  return _internal_has_prev_in_portrait_page_orientation();
}
inline void CommandSetPageOrientationArchive::clear_prev_in_portrait_page_orientation() {
  prev_in_portrait_page_orientation_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CommandSetPageOrientationArchive::_internal_prev_in_portrait_page_orientation() const {
  return prev_in_portrait_page_orientation_;
}
inline bool CommandSetPageOrientationArchive::prev_in_portrait_page_orientation() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPageOrientationArchive.prev_in_portrait_page_orientation)
  return _internal_prev_in_portrait_page_orientation();
}
inline void CommandSetPageOrientationArchive::_internal_set_prev_in_portrait_page_orientation(bool value) {
  _has_bits_[0] |= 0x00000008u;
  prev_in_portrait_page_orientation_ = value;
}
inline void CommandSetPageOrientationArchive::set_prev_in_portrait_page_orientation(bool value) {
  _internal_set_prev_in_portrait_page_orientation(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetPageOrientationArchive.prev_in_portrait_page_orientation)
}

// -------------------------------------------------------------------

// CommandSetShowPageNumbersValueArchive

// required bool show_page_numbers = 1;
inline bool CommandSetShowPageNumbersValueArchive::_internal_has_show_page_numbers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetShowPageNumbersValueArchive::has_show_page_numbers() const {
  return _internal_has_show_page_numbers();
}
inline void CommandSetShowPageNumbersValueArchive::clear_show_page_numbers() {
  show_page_numbers_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetShowPageNumbersValueArchive::_internal_show_page_numbers() const {
  return show_page_numbers_;
}
inline bool CommandSetShowPageNumbersValueArchive::show_page_numbers() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetShowPageNumbersValueArchive.show_page_numbers)
  return _internal_show_page_numbers();
}
inline void CommandSetShowPageNumbersValueArchive::_internal_set_show_page_numbers(bool value) {
  _has_bits_[0] |= 0x00000004u;
  show_page_numbers_ = value;
}
inline void CommandSetShowPageNumbersValueArchive::set_show_page_numbers(bool value) {
  _internal_set_show_page_numbers(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetShowPageNumbersValueArchive.show_page_numbers)
}

// required .TSP.Reference sheet = 2;
inline bool CommandSetShowPageNumbersValueArchive::_internal_has_sheet() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_ != nullptr);
  return value;
}
inline bool CommandSetShowPageNumbersValueArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandSetShowPageNumbersValueArchive::_internal_sheet() const {
  const ::TSP::Reference* p = sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetShowPageNumbersValueArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetShowPageNumbersValueArchive.sheet)
  return _internal_sheet();
}
inline void CommandSetShowPageNumbersValueArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  sheet_ = sheet;
  if (sheet) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetShowPageNumbersValueArchive.sheet)
}
inline ::TSP::Reference* CommandSetShowPageNumbersValueArchive::release_sheet() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandSetShowPageNumbersValueArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandSetShowPageNumbersValueArchive.sheet)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetShowPageNumbersValueArchive::_internal_mutable_sheet() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    sheet_ = p;
  }
  return sheet_;
}
inline ::TSP::Reference* CommandSetShowPageNumbersValueArchive::mutable_sheet() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetShowPageNumbersValueArchive.sheet)
  return _internal_mutable_sheet();
}
inline void CommandSetShowPageNumbersValueArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet)->GetArena();
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetShowPageNumbersValueArchive.sheet)
}

// required .TSK.CommandArchive super = 3;
inline bool CommandSetShowPageNumbersValueArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetShowPageNumbersValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetShowPageNumbersValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetShowPageNumbersValueArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetShowPageNumbersValueArchive.super)
  return _internal_super();
}
inline void CommandSetShowPageNumbersValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetShowPageNumbersValueArchive.super)
}
inline ::TSK::CommandArchive* CommandSetShowPageNumbersValueArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetShowPageNumbersValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetShowPageNumbersValueArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetShowPageNumbersValueArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetShowPageNumbersValueArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetShowPageNumbersValueArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetShowPageNumbersValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetShowPageNumbersValueArchive.super)
}

// -------------------------------------------------------------------

// CommandSetRepeatingHeadersValueArchive

// required bool show_repeating_headers = 1;
inline bool CommandSetRepeatingHeadersValueArchive::_internal_has_show_repeating_headers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetRepeatingHeadersValueArchive::has_show_repeating_headers() const {
  return _internal_has_show_repeating_headers();
}
inline void CommandSetRepeatingHeadersValueArchive::clear_show_repeating_headers() {
  show_repeating_headers_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetRepeatingHeadersValueArchive::_internal_show_repeating_headers() const {
  return show_repeating_headers_;
}
inline bool CommandSetRepeatingHeadersValueArchive::show_repeating_headers() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetRepeatingHeadersValueArchive.show_repeating_headers)
  return _internal_show_repeating_headers();
}
inline void CommandSetRepeatingHeadersValueArchive::_internal_set_show_repeating_headers(bool value) {
  _has_bits_[0] |= 0x00000004u;
  show_repeating_headers_ = value;
}
inline void CommandSetRepeatingHeadersValueArchive::set_show_repeating_headers(bool value) {
  _internal_set_show_repeating_headers(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetRepeatingHeadersValueArchive.show_repeating_headers)
}

// required .TSP.Reference sheet = 2;
inline bool CommandSetRepeatingHeadersValueArchive::_internal_has_sheet() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_ != nullptr);
  return value;
}
inline bool CommandSetRepeatingHeadersValueArchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandSetRepeatingHeadersValueArchive::_internal_sheet() const {
  const ::TSP::Reference* p = sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetRepeatingHeadersValueArchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetRepeatingHeadersValueArchive.sheet)
  return _internal_sheet();
}
inline void CommandSetRepeatingHeadersValueArchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  sheet_ = sheet;
  if (sheet) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetRepeatingHeadersValueArchive.sheet)
}
inline ::TSP::Reference* CommandSetRepeatingHeadersValueArchive::release_sheet() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandSetRepeatingHeadersValueArchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandSetRepeatingHeadersValueArchive.sheet)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetRepeatingHeadersValueArchive::_internal_mutable_sheet() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    sheet_ = p;
  }
  return sheet_;
}
inline ::TSP::Reference* CommandSetRepeatingHeadersValueArchive::mutable_sheet() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetRepeatingHeadersValueArchive.sheet)
  return _internal_mutable_sheet();
}
inline void CommandSetRepeatingHeadersValueArchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet)->GetArena();
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetRepeatingHeadersValueArchive.sheet)
}

// required .TSK.CommandArchive super = 3;
inline bool CommandSetRepeatingHeadersValueArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetRepeatingHeadersValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetRepeatingHeadersValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetRepeatingHeadersValueArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetRepeatingHeadersValueArchive.super)
  return _internal_super();
}
inline void CommandSetRepeatingHeadersValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetRepeatingHeadersValueArchive.super)
}
inline ::TSK::CommandArchive* CommandSetRepeatingHeadersValueArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetRepeatingHeadersValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetRepeatingHeadersValueArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetRepeatingHeadersValueArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetRepeatingHeadersValueArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetRepeatingHeadersValueArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetRepeatingHeadersValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetRepeatingHeadersValueArchive.super)
}

// -------------------------------------------------------------------

// CommandSetContentScaleArchive

// optional float old_content_scale = 2;
inline bool CommandSetContentScaleArchive::_internal_has_old_content_scale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetContentScaleArchive::has_old_content_scale() const {
  return _internal_has_old_content_scale();
}
inline void CommandSetContentScaleArchive::clear_old_content_scale() {
  old_content_scale_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CommandSetContentScaleArchive::_internal_old_content_scale() const {
  return old_content_scale_;
}
inline float CommandSetContentScaleArchive::old_content_scale() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetContentScaleArchive.old_content_scale)
  return _internal_old_content_scale();
}
inline void CommandSetContentScaleArchive::_internal_set_old_content_scale(float value) {
  _has_bits_[0] |= 0x00000004u;
  old_content_scale_ = value;
}
inline void CommandSetContentScaleArchive::set_old_content_scale(float value) {
  _internal_set_old_content_scale(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetContentScaleArchive.old_content_scale)
}

// required float content_scale = 3;
inline bool CommandSetContentScaleArchive::_internal_has_content_scale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetContentScaleArchive::has_content_scale() const {
  return _internal_has_content_scale();
}
inline void CommandSetContentScaleArchive::clear_content_scale() {
  content_scale_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CommandSetContentScaleArchive::_internal_content_scale() const {
  return content_scale_;
}
inline float CommandSetContentScaleArchive::content_scale() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetContentScaleArchive.content_scale)
  return _internal_content_scale();
}
inline void CommandSetContentScaleArchive::_internal_set_content_scale(float value) {
  _has_bits_[0] |= 0x00000008u;
  content_scale_ = value;
}
inline void CommandSetContentScaleArchive::set_content_scale(float value) {
  _internal_set_content_scale(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetContentScaleArchive.content_scale)
}

// required .TSP.UUID sheet_uid = 4;
inline bool CommandSetContentScaleArchive::_internal_has_sheet_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uid_ != nullptr);
  return value;
}
inline bool CommandSetContentScaleArchive::has_sheet_uid() const {
  return _internal_has_sheet_uid();
}
inline const ::TSP::UUID& CommandSetContentScaleArchive::_internal_sheet_uid() const {
  const ::TSP::UUID* p = sheet_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetContentScaleArchive::sheet_uid() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetContentScaleArchive.sheet_uid)
  return _internal_sheet_uid();
}
inline void CommandSetContentScaleArchive::unsafe_arena_set_allocated_sheet_uid(
    ::TSP::UUID* sheet_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  sheet_uid_ = sheet_uid;
  if (sheet_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetContentScaleArchive.sheet_uid)
}
inline ::TSP::UUID* CommandSetContentScaleArchive::release_sheet_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSetContentScaleArchive::unsafe_arena_release_sheet_uid() {
  // @@protoc_insertion_point(field_release:TN.CommandSetContentScaleArchive.sheet_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetContentScaleArchive::_internal_mutable_sheet_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uid_ = p;
  }
  return sheet_uid_;
}
inline ::TSP::UUID* CommandSetContentScaleArchive::mutable_sheet_uid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetContentScaleArchive.sheet_uid)
  return _internal_mutable_sheet_uid();
}
inline void CommandSetContentScaleArchive::set_allocated_sheet_uid(::TSP::UUID* sheet_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  if (sheet_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_uid_ = sheet_uid;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetContentScaleArchive.sheet_uid)
}

// required .TSK.CommandArchive super = 5;
inline bool CommandSetContentScaleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetContentScaleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetContentScaleArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetContentScaleArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetContentScaleArchive.super)
  return _internal_super();
}
inline void CommandSetContentScaleArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetContentScaleArchive.super)
}
inline ::TSK::CommandArchive* CommandSetContentScaleArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetContentScaleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetContentScaleArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetContentScaleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetContentScaleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetContentScaleArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetContentScaleArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetContentScaleArchive.super)
}

// required bool toggled_auto_fit = 6;
inline bool CommandSetContentScaleArchive::_internal_has_toggled_auto_fit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetContentScaleArchive::has_toggled_auto_fit() const {
  return _internal_has_toggled_auto_fit();
}
inline void CommandSetContentScaleArchive::clear_toggled_auto_fit() {
  toggled_auto_fit_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSetContentScaleArchive::_internal_toggled_auto_fit() const {
  return toggled_auto_fit_;
}
inline bool CommandSetContentScaleArchive::toggled_auto_fit() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetContentScaleArchive.toggled_auto_fit)
  return _internal_toggled_auto_fit();
}
inline void CommandSetContentScaleArchive::_internal_set_toggled_auto_fit(bool value) {
  _has_bits_[0] |= 0x00000010u;
  toggled_auto_fit_ = value;
}
inline void CommandSetContentScaleArchive::set_toggled_auto_fit(bool value) {
  _internal_set_toggled_auto_fit(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetContentScaleArchive.toggled_auto_fit)
}

// -------------------------------------------------------------------

// CommandSetDocumentPaperSize

// required string paper_id = 1;
inline bool CommandSetDocumentPaperSize::_internal_has_paper_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetDocumentPaperSize::has_paper_id() const {
  return _internal_has_paper_id();
}
inline void CommandSetDocumentPaperSize::clear_paper_id() {
  paper_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetDocumentPaperSize::paper_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetDocumentPaperSize.paper_id)
  return _internal_paper_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CommandSetDocumentPaperSize::set_paper_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 paper_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TN.CommandSetDocumentPaperSize.paper_id)
}
inline std::string* CommandSetDocumentPaperSize::mutable_paper_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetDocumentPaperSize.paper_id)
  return _internal_mutable_paper_id();
}
inline const std::string& CommandSetDocumentPaperSize::_internal_paper_id() const {
  return paper_id_.Get();
}
inline void CommandSetDocumentPaperSize::_internal_set_paper_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  paper_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CommandSetDocumentPaperSize::_internal_mutable_paper_id() {
  _has_bits_[0] |= 0x00000001u;
  return paper_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandSetDocumentPaperSize::release_paper_id() {
  // @@protoc_insertion_point(field_release:TN.CommandSetDocumentPaperSize.paper_id)
  if (!_internal_has_paper_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return paper_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandSetDocumentPaperSize::set_allocated_paper_id(std::string* paper_id) {
  if (paper_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  paper_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paper_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetDocumentPaperSize.paper_id)
}

// required .TSP.Size page_size = 2;
inline bool CommandSetDocumentPaperSize::_internal_has_page_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || page_size_ != nullptr);
  return value;
}
inline bool CommandSetDocumentPaperSize::has_page_size() const {
  return _internal_has_page_size();
}
inline const ::TSP::Size& CommandSetDocumentPaperSize::_internal_page_size() const {
  const ::TSP::Size* p = page_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& CommandSetDocumentPaperSize::page_size() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetDocumentPaperSize.page_size)
  return _internal_page_size();
}
inline void CommandSetDocumentPaperSize::unsafe_arena_set_allocated_page_size(
    ::TSP::Size* page_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_size_);
  }
  page_size_ = page_size;
  if (page_size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetDocumentPaperSize.page_size)
}
inline ::TSP::Size* CommandSetDocumentPaperSize::release_page_size() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = page_size_;
  page_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* CommandSetDocumentPaperSize::unsafe_arena_release_page_size() {
  // @@protoc_insertion_point(field_release:TN.CommandSetDocumentPaperSize.page_size)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = page_size_;
  page_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* CommandSetDocumentPaperSize::_internal_mutable_page_size() {
  _has_bits_[0] |= 0x00000002u;
  if (page_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    page_size_ = p;
  }
  return page_size_;
}
inline ::TSP::Size* CommandSetDocumentPaperSize::mutable_page_size() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetDocumentPaperSize.page_size)
  return _internal_mutable_page_size();
}
inline void CommandSetDocumentPaperSize::set_allocated_page_size(::TSP::Size* page_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_size_);
  }
  if (page_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_size)->GetArena();
    if (message_arena != submessage_arena) {
      page_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  page_size_ = page_size;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetDocumentPaperSize.page_size)
}

// required .TSK.CommandArchive super = 3;
inline bool CommandSetDocumentPaperSize::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetDocumentPaperSize::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetDocumentPaperSize::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetDocumentPaperSize::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetDocumentPaperSize.super)
  return _internal_super();
}
inline void CommandSetDocumentPaperSize::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetDocumentPaperSize.super)
}
inline ::TSK::CommandArchive* CommandSetDocumentPaperSize::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetDocumentPaperSize::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetDocumentPaperSize.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetDocumentPaperSize::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetDocumentPaperSize::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetDocumentPaperSize.super)
  return _internal_mutable_super();
}
inline void CommandSetDocumentPaperSize::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetDocumentPaperSize.super)
}

// -------------------------------------------------------------------

// CommandEnterPrintPreviewModeArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandEnterPrintPreviewModeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandEnterPrintPreviewModeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandEnterPrintPreviewModeArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandEnterPrintPreviewModeArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandEnterPrintPreviewModeArchive.super)
  return _internal_super();
}
inline void CommandEnterPrintPreviewModeArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandEnterPrintPreviewModeArchive.super)
}
inline ::TSK::CommandArchive* CommandEnterPrintPreviewModeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandEnterPrintPreviewModeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandEnterPrintPreviewModeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandEnterPrintPreviewModeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandEnterPrintPreviewModeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandEnterPrintPreviewModeArchive.super)
  return _internal_mutable_super();
}
inline void CommandEnterPrintPreviewModeArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandEnterPrintPreviewModeArchive.super)
}

// -------------------------------------------------------------------

// CommandExitPrintPreviewModeArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandExitPrintPreviewModeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandExitPrintPreviewModeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandExitPrintPreviewModeArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandExitPrintPreviewModeArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandExitPrintPreviewModeArchive.super)
  return _internal_super();
}
inline void CommandExitPrintPreviewModeArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandExitPrintPreviewModeArchive.super)
}
inline ::TSK::CommandArchive* CommandExitPrintPreviewModeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandExitPrintPreviewModeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandExitPrintPreviewModeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandExitPrintPreviewModeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandExitPrintPreviewModeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandExitPrintPreviewModeArchive.super)
  return _internal_mutable_super();
}
inline void CommandExitPrintPreviewModeArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandExitPrintPreviewModeArchive.super)
}

// -------------------------------------------------------------------

// CommandSetPrinterMarginsArchive

// required .TSD.EdgeInsetsArchive new_print_margins = 1;
inline bool CommandSetPrinterMarginsArchive::_internal_has_new_print_margins() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || new_print_margins_ != nullptr);
  return value;
}
inline bool CommandSetPrinterMarginsArchive::has_new_print_margins() const {
  return _internal_has_new_print_margins();
}
inline const ::TSD::EdgeInsetsArchive& CommandSetPrinterMarginsArchive::_internal_new_print_margins() const {
  const ::TSD::EdgeInsetsArchive* p = new_print_margins_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::EdgeInsetsArchive&>(
      ::TSD::_EdgeInsetsArchive_default_instance_);
}
inline const ::TSD::EdgeInsetsArchive& CommandSetPrinterMarginsArchive::new_print_margins() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPrinterMarginsArchive.new_print_margins)
  return _internal_new_print_margins();
}
inline void CommandSetPrinterMarginsArchive::unsafe_arena_set_allocated_new_print_margins(
    ::TSD::EdgeInsetsArchive* new_print_margins) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_print_margins_);
  }
  new_print_margins_ = new_print_margins;
  if (new_print_margins) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPrinterMarginsArchive.new_print_margins)
}
inline ::TSD::EdgeInsetsArchive* CommandSetPrinterMarginsArchive::release_new_print_margins() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::EdgeInsetsArchive* temp = new_print_margins_;
  new_print_margins_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::EdgeInsetsArchive* CommandSetPrinterMarginsArchive::unsafe_arena_release_new_print_margins() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPrinterMarginsArchive.new_print_margins)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::EdgeInsetsArchive* temp = new_print_margins_;
  new_print_margins_ = nullptr;
  return temp;
}
inline ::TSD::EdgeInsetsArchive* CommandSetPrinterMarginsArchive::_internal_mutable_new_print_margins() {
  _has_bits_[0] |= 0x00000001u;
  if (new_print_margins_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::EdgeInsetsArchive>(GetArena());
    new_print_margins_ = p;
  }
  return new_print_margins_;
}
inline ::TSD::EdgeInsetsArchive* CommandSetPrinterMarginsArchive::mutable_new_print_margins() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPrinterMarginsArchive.new_print_margins)
  return _internal_mutable_new_print_margins();
}
inline void CommandSetPrinterMarginsArchive::set_allocated_new_print_margins(::TSD::EdgeInsetsArchive* new_print_margins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_print_margins_);
  }
  if (new_print_margins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_print_margins)->GetArena();
    if (message_arena != submessage_arena) {
      new_print_margins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_print_margins, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  new_print_margins_ = new_print_margins;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPrinterMarginsArchive.new_print_margins)
}

// optional .TSD.EdgeInsetsArchive old_print_margins = 2;
inline bool CommandSetPrinterMarginsArchive::_internal_has_old_print_margins() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_print_margins_ != nullptr);
  return value;
}
inline bool CommandSetPrinterMarginsArchive::has_old_print_margins() const {
  return _internal_has_old_print_margins();
}
inline const ::TSD::EdgeInsetsArchive& CommandSetPrinterMarginsArchive::_internal_old_print_margins() const {
  const ::TSD::EdgeInsetsArchive* p = old_print_margins_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::EdgeInsetsArchive&>(
      ::TSD::_EdgeInsetsArchive_default_instance_);
}
inline const ::TSD::EdgeInsetsArchive& CommandSetPrinterMarginsArchive::old_print_margins() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPrinterMarginsArchive.old_print_margins)
  return _internal_old_print_margins();
}
inline void CommandSetPrinterMarginsArchive::unsafe_arena_set_allocated_old_print_margins(
    ::TSD::EdgeInsetsArchive* old_print_margins) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_print_margins_);
  }
  old_print_margins_ = old_print_margins;
  if (old_print_margins) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPrinterMarginsArchive.old_print_margins)
}
inline ::TSD::EdgeInsetsArchive* CommandSetPrinterMarginsArchive::release_old_print_margins() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::EdgeInsetsArchive* temp = old_print_margins_;
  old_print_margins_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::EdgeInsetsArchive* CommandSetPrinterMarginsArchive::unsafe_arena_release_old_print_margins() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPrinterMarginsArchive.old_print_margins)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::EdgeInsetsArchive* temp = old_print_margins_;
  old_print_margins_ = nullptr;
  return temp;
}
inline ::TSD::EdgeInsetsArchive* CommandSetPrinterMarginsArchive::_internal_mutable_old_print_margins() {
  _has_bits_[0] |= 0x00000002u;
  if (old_print_margins_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::EdgeInsetsArchive>(GetArena());
    old_print_margins_ = p;
  }
  return old_print_margins_;
}
inline ::TSD::EdgeInsetsArchive* CommandSetPrinterMarginsArchive::mutable_old_print_margins() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPrinterMarginsArchive.old_print_margins)
  return _internal_mutable_old_print_margins();
}
inline void CommandSetPrinterMarginsArchive::set_allocated_old_print_margins(::TSD::EdgeInsetsArchive* old_print_margins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_print_margins_);
  }
  if (old_print_margins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_print_margins)->GetArena();
    if (message_arena != submessage_arena) {
      old_print_margins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_print_margins, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_print_margins_ = old_print_margins;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPrinterMarginsArchive.old_print_margins)
}

// required .TSP.UUID sheet_uid = 3;
inline bool CommandSetPrinterMarginsArchive::_internal_has_sheet_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uid_ != nullptr);
  return value;
}
inline bool CommandSetPrinterMarginsArchive::has_sheet_uid() const {
  return _internal_has_sheet_uid();
}
inline const ::TSP::UUID& CommandSetPrinterMarginsArchive::_internal_sheet_uid() const {
  const ::TSP::UUID* p = sheet_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetPrinterMarginsArchive::sheet_uid() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPrinterMarginsArchive.sheet_uid)
  return _internal_sheet_uid();
}
inline void CommandSetPrinterMarginsArchive::unsafe_arena_set_allocated_sheet_uid(
    ::TSP::UUID* sheet_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  sheet_uid_ = sheet_uid;
  if (sheet_uid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPrinterMarginsArchive.sheet_uid)
}
inline ::TSP::UUID* CommandSetPrinterMarginsArchive::release_sheet_uid() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSetPrinterMarginsArchive::unsafe_arena_release_sheet_uid() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPrinterMarginsArchive.sheet_uid)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetPrinterMarginsArchive::_internal_mutable_sheet_uid() {
  _has_bits_[0] |= 0x00000004u;
  if (sheet_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uid_ = p;
  }
  return sheet_uid_;
}
inline ::TSP::UUID* CommandSetPrinterMarginsArchive::mutable_sheet_uid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPrinterMarginsArchive.sheet_uid)
  return _internal_mutable_sheet_uid();
}
inline void CommandSetPrinterMarginsArchive::set_allocated_sheet_uid(::TSP::UUID* sheet_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  if (sheet_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sheet_uid_ = sheet_uid;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPrinterMarginsArchive.sheet_uid)
}

// required .TSK.CommandArchive super = 4;
inline bool CommandSetPrinterMarginsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetPrinterMarginsArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetPrinterMarginsArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetPrinterMarginsArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPrinterMarginsArchive.super)
  return _internal_super();
}
inline void CommandSetPrinterMarginsArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPrinterMarginsArchive.super)
}
inline ::TSK::CommandArchive* CommandSetPrinterMarginsArchive::release_super() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetPrinterMarginsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPrinterMarginsArchive.super)
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetPrinterMarginsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000008u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetPrinterMarginsArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPrinterMarginsArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetPrinterMarginsArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPrinterMarginsArchive.super)
}

// -------------------------------------------------------------------

// CommandSetPrintBackgroundsArchive

// required .TSP.UUID sheet_uid = 1;
inline bool CommandSetPrintBackgroundsArchive::_internal_has_sheet_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uid_ != nullptr);
  return value;
}
inline bool CommandSetPrintBackgroundsArchive::has_sheet_uid() const {
  return _internal_has_sheet_uid();
}
inline const ::TSP::UUID& CommandSetPrintBackgroundsArchive::_internal_sheet_uid() const {
  const ::TSP::UUID* p = sheet_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetPrintBackgroundsArchive::sheet_uid() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPrintBackgroundsArchive.sheet_uid)
  return _internal_sheet_uid();
}
inline void CommandSetPrintBackgroundsArchive::unsafe_arena_set_allocated_sheet_uid(
    ::TSP::UUID* sheet_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  sheet_uid_ = sheet_uid;
  if (sheet_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPrintBackgroundsArchive.sheet_uid)
}
inline ::TSP::UUID* CommandSetPrintBackgroundsArchive::release_sheet_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSetPrintBackgroundsArchive::unsafe_arena_release_sheet_uid() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPrintBackgroundsArchive.sheet_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetPrintBackgroundsArchive::_internal_mutable_sheet_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uid_ = p;
  }
  return sheet_uid_;
}
inline ::TSP::UUID* CommandSetPrintBackgroundsArchive::mutable_sheet_uid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPrintBackgroundsArchive.sheet_uid)
  return _internal_mutable_sheet_uid();
}
inline void CommandSetPrintBackgroundsArchive::set_allocated_sheet_uid(::TSP::UUID* sheet_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  if (sheet_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_uid_ = sheet_uid;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPrintBackgroundsArchive.sheet_uid)
}

// required bool print_backgrounds = 2;
inline bool CommandSetPrintBackgroundsArchive::_internal_has_print_backgrounds() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetPrintBackgroundsArchive::has_print_backgrounds() const {
  return _internal_has_print_backgrounds();
}
inline void CommandSetPrintBackgroundsArchive::clear_print_backgrounds() {
  print_backgrounds_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetPrintBackgroundsArchive::_internal_print_backgrounds() const {
  return print_backgrounds_;
}
inline bool CommandSetPrintBackgroundsArchive::print_backgrounds() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPrintBackgroundsArchive.print_backgrounds)
  return _internal_print_backgrounds();
}
inline void CommandSetPrintBackgroundsArchive::_internal_set_print_backgrounds(bool value) {
  _has_bits_[0] |= 0x00000004u;
  print_backgrounds_ = value;
}
inline void CommandSetPrintBackgroundsArchive::set_print_backgrounds(bool value) {
  _internal_set_print_backgrounds(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetPrintBackgroundsArchive.print_backgrounds)
}

// required bool old_print_backgrounds = 3;
inline bool CommandSetPrintBackgroundsArchive::_internal_has_old_print_backgrounds() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetPrintBackgroundsArchive::has_old_print_backgrounds() const {
  return _internal_has_old_print_backgrounds();
}
inline void CommandSetPrintBackgroundsArchive::clear_old_print_backgrounds() {
  old_print_backgrounds_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CommandSetPrintBackgroundsArchive::_internal_old_print_backgrounds() const {
  return old_print_backgrounds_;
}
inline bool CommandSetPrintBackgroundsArchive::old_print_backgrounds() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPrintBackgroundsArchive.old_print_backgrounds)
  return _internal_old_print_backgrounds();
}
inline void CommandSetPrintBackgroundsArchive::_internal_set_old_print_backgrounds(bool value) {
  _has_bits_[0] |= 0x00000008u;
  old_print_backgrounds_ = value;
}
inline void CommandSetPrintBackgroundsArchive::set_old_print_backgrounds(bool value) {
  _internal_set_old_print_backgrounds(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetPrintBackgroundsArchive.old_print_backgrounds)
}

// required .TSK.CommandArchive super = 4;
inline bool CommandSetPrintBackgroundsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetPrintBackgroundsArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetPrintBackgroundsArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetPrintBackgroundsArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPrintBackgroundsArchive.super)
  return _internal_super();
}
inline void CommandSetPrintBackgroundsArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPrintBackgroundsArchive.super)
}
inline ::TSK::CommandArchive* CommandSetPrintBackgroundsArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetPrintBackgroundsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPrintBackgroundsArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetPrintBackgroundsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetPrintBackgroundsArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPrintBackgroundsArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetPrintBackgroundsArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPrintBackgroundsArchive.super)
}

// -------------------------------------------------------------------

// CommandSetHeaderFooterInsetsArchive

// optional float old_header_inset = 1;
inline bool CommandSetHeaderFooterInsetsArchive::_internal_has_old_header_inset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetHeaderFooterInsetsArchive::has_old_header_inset() const {
  return _internal_has_old_header_inset();
}
inline void CommandSetHeaderFooterInsetsArchive::clear_old_header_inset() {
  old_header_inset_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CommandSetHeaderFooterInsetsArchive::_internal_old_header_inset() const {
  return old_header_inset_;
}
inline float CommandSetHeaderFooterInsetsArchive::old_header_inset() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetHeaderFooterInsetsArchive.old_header_inset)
  return _internal_old_header_inset();
}
inline void CommandSetHeaderFooterInsetsArchive::_internal_set_old_header_inset(float value) {
  _has_bits_[0] |= 0x00000004u;
  old_header_inset_ = value;
}
inline void CommandSetHeaderFooterInsetsArchive::set_old_header_inset(float value) {
  _internal_set_old_header_inset(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetHeaderFooterInsetsArchive.old_header_inset)
}

// optional float old_footer_inset = 2;
inline bool CommandSetHeaderFooterInsetsArchive::_internal_has_old_footer_inset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetHeaderFooterInsetsArchive::has_old_footer_inset() const {
  return _internal_has_old_footer_inset();
}
inline void CommandSetHeaderFooterInsetsArchive::clear_old_footer_inset() {
  old_footer_inset_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CommandSetHeaderFooterInsetsArchive::_internal_old_footer_inset() const {
  return old_footer_inset_;
}
inline float CommandSetHeaderFooterInsetsArchive::old_footer_inset() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetHeaderFooterInsetsArchive.old_footer_inset)
  return _internal_old_footer_inset();
}
inline void CommandSetHeaderFooterInsetsArchive::_internal_set_old_footer_inset(float value) {
  _has_bits_[0] |= 0x00000008u;
  old_footer_inset_ = value;
}
inline void CommandSetHeaderFooterInsetsArchive::set_old_footer_inset(float value) {
  _internal_set_old_footer_inset(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetHeaderFooterInsetsArchive.old_footer_inset)
}

// required float header_inset = 3;
inline bool CommandSetHeaderFooterInsetsArchive::_internal_has_header_inset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetHeaderFooterInsetsArchive::has_header_inset() const {
  return _internal_has_header_inset();
}
inline void CommandSetHeaderFooterInsetsArchive::clear_header_inset() {
  header_inset_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CommandSetHeaderFooterInsetsArchive::_internal_header_inset() const {
  return header_inset_;
}
inline float CommandSetHeaderFooterInsetsArchive::header_inset() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetHeaderFooterInsetsArchive.header_inset)
  return _internal_header_inset();
}
inline void CommandSetHeaderFooterInsetsArchive::_internal_set_header_inset(float value) {
  _has_bits_[0] |= 0x00000010u;
  header_inset_ = value;
}
inline void CommandSetHeaderFooterInsetsArchive::set_header_inset(float value) {
  _internal_set_header_inset(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetHeaderFooterInsetsArchive.header_inset)
}

// required float footer_inset = 4;
inline bool CommandSetHeaderFooterInsetsArchive::_internal_has_footer_inset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSetHeaderFooterInsetsArchive::has_footer_inset() const {
  return _internal_has_footer_inset();
}
inline void CommandSetHeaderFooterInsetsArchive::clear_footer_inset() {
  footer_inset_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CommandSetHeaderFooterInsetsArchive::_internal_footer_inset() const {
  return footer_inset_;
}
inline float CommandSetHeaderFooterInsetsArchive::footer_inset() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetHeaderFooterInsetsArchive.footer_inset)
  return _internal_footer_inset();
}
inline void CommandSetHeaderFooterInsetsArchive::_internal_set_footer_inset(float value) {
  _has_bits_[0] |= 0x00000020u;
  footer_inset_ = value;
}
inline void CommandSetHeaderFooterInsetsArchive::set_footer_inset(float value) {
  _internal_set_footer_inset(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetHeaderFooterInsetsArchive.footer_inset)
}

// required .TSP.UUID sheet_uid = 5;
inline bool CommandSetHeaderFooterInsetsArchive::_internal_has_sheet_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uid_ != nullptr);
  return value;
}
inline bool CommandSetHeaderFooterInsetsArchive::has_sheet_uid() const {
  return _internal_has_sheet_uid();
}
inline const ::TSP::UUID& CommandSetHeaderFooterInsetsArchive::_internal_sheet_uid() const {
  const ::TSP::UUID* p = sheet_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetHeaderFooterInsetsArchive::sheet_uid() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetHeaderFooterInsetsArchive.sheet_uid)
  return _internal_sheet_uid();
}
inline void CommandSetHeaderFooterInsetsArchive::unsafe_arena_set_allocated_sheet_uid(
    ::TSP::UUID* sheet_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  sheet_uid_ = sheet_uid;
  if (sheet_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetHeaderFooterInsetsArchive.sheet_uid)
}
inline ::TSP::UUID* CommandSetHeaderFooterInsetsArchive::release_sheet_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSetHeaderFooterInsetsArchive::unsafe_arena_release_sheet_uid() {
  // @@protoc_insertion_point(field_release:TN.CommandSetHeaderFooterInsetsArchive.sheet_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetHeaderFooterInsetsArchive::_internal_mutable_sheet_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uid_ = p;
  }
  return sheet_uid_;
}
inline ::TSP::UUID* CommandSetHeaderFooterInsetsArchive::mutable_sheet_uid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetHeaderFooterInsetsArchive.sheet_uid)
  return _internal_mutable_sheet_uid();
}
inline void CommandSetHeaderFooterInsetsArchive::set_allocated_sheet_uid(::TSP::UUID* sheet_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  if (sheet_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_uid_ = sheet_uid;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetHeaderFooterInsetsArchive.sheet_uid)
}

// required .TSK.CommandArchive super = 6;
inline bool CommandSetHeaderFooterInsetsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetHeaderFooterInsetsArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetHeaderFooterInsetsArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetHeaderFooterInsetsArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetHeaderFooterInsetsArchive.super)
  return _internal_super();
}
inline void CommandSetHeaderFooterInsetsArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetHeaderFooterInsetsArchive.super)
}
inline ::TSK::CommandArchive* CommandSetHeaderFooterInsetsArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetHeaderFooterInsetsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetHeaderFooterInsetsArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetHeaderFooterInsetsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetHeaderFooterInsetsArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetHeaderFooterInsetsArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetHeaderFooterInsetsArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetHeaderFooterInsetsArchive.super)
}

// -------------------------------------------------------------------

// CommandSetPageOrderArchive

// required uint32 old_page_order = 1;
inline bool CommandSetPageOrderArchive::_internal_has_old_page_order() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetPageOrderArchive::has_old_page_order() const {
  return _internal_has_old_page_order();
}
inline void CommandSetPageOrderArchive::clear_old_page_order() {
  old_page_order_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetPageOrderArchive::_internal_old_page_order() const {
  return old_page_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetPageOrderArchive::old_page_order() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPageOrderArchive.old_page_order)
  return _internal_old_page_order();
}
inline void CommandSetPageOrderArchive::_internal_set_old_page_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  old_page_order_ = value;
}
inline void CommandSetPageOrderArchive::set_old_page_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_page_order(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetPageOrderArchive.old_page_order)
}

// required uint32 page_order = 2;
inline bool CommandSetPageOrderArchive::_internal_has_page_order() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetPageOrderArchive::has_page_order() const {
  return _internal_has_page_order();
}
inline void CommandSetPageOrderArchive::clear_page_order() {
  page_order_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetPageOrderArchive::_internal_page_order() const {
  return page_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSetPageOrderArchive::page_order() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPageOrderArchive.page_order)
  return _internal_page_order();
}
inline void CommandSetPageOrderArchive::_internal_set_page_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  page_order_ = value;
}
inline void CommandSetPageOrderArchive::set_page_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_order(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetPageOrderArchive.page_order)
}

// required .TSP.UUID sheet_uid = 3;
inline bool CommandSetPageOrderArchive::_internal_has_sheet_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uid_ != nullptr);
  return value;
}
inline bool CommandSetPageOrderArchive::has_sheet_uid() const {
  return _internal_has_sheet_uid();
}
inline const ::TSP::UUID& CommandSetPageOrderArchive::_internal_sheet_uid() const {
  const ::TSP::UUID* p = sheet_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetPageOrderArchive::sheet_uid() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPageOrderArchive.sheet_uid)
  return _internal_sheet_uid();
}
inline void CommandSetPageOrderArchive::unsafe_arena_set_allocated_sheet_uid(
    ::TSP::UUID* sheet_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  sheet_uid_ = sheet_uid;
  if (sheet_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPageOrderArchive.sheet_uid)
}
inline ::TSP::UUID* CommandSetPageOrderArchive::release_sheet_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSetPageOrderArchive::unsafe_arena_release_sheet_uid() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPageOrderArchive.sheet_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetPageOrderArchive::_internal_mutable_sheet_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uid_ = p;
  }
  return sheet_uid_;
}
inline ::TSP::UUID* CommandSetPageOrderArchive::mutable_sheet_uid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPageOrderArchive.sheet_uid)
  return _internal_mutable_sheet_uid();
}
inline void CommandSetPageOrderArchive::set_allocated_sheet_uid(::TSP::UUID* sheet_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  if (sheet_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_uid_ = sheet_uid;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPageOrderArchive.sheet_uid)
}

// required .TSK.CommandArchive super = 4;
inline bool CommandSetPageOrderArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetPageOrderArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetPageOrderArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetPageOrderArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetPageOrderArchive.super)
  return _internal_super();
}
inline void CommandSetPageOrderArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetPageOrderArchive.super)
}
inline ::TSK::CommandArchive* CommandSetPageOrderArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetPageOrderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetPageOrderArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetPageOrderArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetPageOrderArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetPageOrderArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetPageOrderArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetPageOrderArchive.super)
}

// -------------------------------------------------------------------

// CommandSetUsingStartPageNumberArchive

// required bool using_start_page_number = 1;
inline bool CommandSetUsingStartPageNumberArchive::_internal_has_using_start_page_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetUsingStartPageNumberArchive::has_using_start_page_number() const {
  return _internal_has_using_start_page_number();
}
inline void CommandSetUsingStartPageNumberArchive::clear_using_start_page_number() {
  using_start_page_number_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetUsingStartPageNumberArchive::_internal_using_start_page_number() const {
  return using_start_page_number_;
}
inline bool CommandSetUsingStartPageNumberArchive::using_start_page_number() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetUsingStartPageNumberArchive.using_start_page_number)
  return _internal_using_start_page_number();
}
inline void CommandSetUsingStartPageNumberArchive::_internal_set_using_start_page_number(bool value) {
  _has_bits_[0] |= 0x00000004u;
  using_start_page_number_ = value;
}
inline void CommandSetUsingStartPageNumberArchive::set_using_start_page_number(bool value) {
  _internal_set_using_start_page_number(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetUsingStartPageNumberArchive.using_start_page_number)
}

// required .TSP.UUID sheet_uid = 2;
inline bool CommandSetUsingStartPageNumberArchive::_internal_has_sheet_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uid_ != nullptr);
  return value;
}
inline bool CommandSetUsingStartPageNumberArchive::has_sheet_uid() const {
  return _internal_has_sheet_uid();
}
inline const ::TSP::UUID& CommandSetUsingStartPageNumberArchive::_internal_sheet_uid() const {
  const ::TSP::UUID* p = sheet_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetUsingStartPageNumberArchive::sheet_uid() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetUsingStartPageNumberArchive.sheet_uid)
  return _internal_sheet_uid();
}
inline void CommandSetUsingStartPageNumberArchive::unsafe_arena_set_allocated_sheet_uid(
    ::TSP::UUID* sheet_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  sheet_uid_ = sheet_uid;
  if (sheet_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetUsingStartPageNumberArchive.sheet_uid)
}
inline ::TSP::UUID* CommandSetUsingStartPageNumberArchive::release_sheet_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSetUsingStartPageNumberArchive::unsafe_arena_release_sheet_uid() {
  // @@protoc_insertion_point(field_release:TN.CommandSetUsingStartPageNumberArchive.sheet_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetUsingStartPageNumberArchive::_internal_mutable_sheet_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uid_ = p;
  }
  return sheet_uid_;
}
inline ::TSP::UUID* CommandSetUsingStartPageNumberArchive::mutable_sheet_uid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetUsingStartPageNumberArchive.sheet_uid)
  return _internal_mutable_sheet_uid();
}
inline void CommandSetUsingStartPageNumberArchive::set_allocated_sheet_uid(::TSP::UUID* sheet_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  if (sheet_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_uid_ = sheet_uid;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetUsingStartPageNumberArchive.sheet_uid)
}

// required .TSK.CommandArchive super = 3;
inline bool CommandSetUsingStartPageNumberArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetUsingStartPageNumberArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetUsingStartPageNumberArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetUsingStartPageNumberArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetUsingStartPageNumberArchive.super)
  return _internal_super();
}
inline void CommandSetUsingStartPageNumberArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetUsingStartPageNumberArchive.super)
}
inline ::TSK::CommandArchive* CommandSetUsingStartPageNumberArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetUsingStartPageNumberArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetUsingStartPageNumberArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetUsingStartPageNumberArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetUsingStartPageNumberArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetUsingStartPageNumberArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetUsingStartPageNumberArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetUsingStartPageNumberArchive.super)
}

// required bool prev_using_start_page_number = 4;
inline bool CommandSetUsingStartPageNumberArchive::_internal_has_prev_using_start_page_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetUsingStartPageNumberArchive::has_prev_using_start_page_number() const {
  return _internal_has_prev_using_start_page_number();
}
inline void CommandSetUsingStartPageNumberArchive::clear_prev_using_start_page_number() {
  prev_using_start_page_number_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CommandSetUsingStartPageNumberArchive::_internal_prev_using_start_page_number() const {
  return prev_using_start_page_number_;
}
inline bool CommandSetUsingStartPageNumberArchive::prev_using_start_page_number() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetUsingStartPageNumberArchive.prev_using_start_page_number)
  return _internal_prev_using_start_page_number();
}
inline void CommandSetUsingStartPageNumberArchive::_internal_set_prev_using_start_page_number(bool value) {
  _has_bits_[0] |= 0x00000008u;
  prev_using_start_page_number_ = value;
}
inline void CommandSetUsingStartPageNumberArchive::set_prev_using_start_page_number(bool value) {
  _internal_set_prev_using_start_page_number(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetUsingStartPageNumberArchive.prev_using_start_page_number)
}

// -------------------------------------------------------------------

// CommandSetStartPageNumberArchive

// required int32 old_start_page_number = 1;
inline bool CommandSetStartPageNumberArchive::_internal_has_old_start_page_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetStartPageNumberArchive::has_old_start_page_number() const {
  return _internal_has_old_start_page_number();
}
inline void CommandSetStartPageNumberArchive::clear_old_start_page_number() {
  old_start_page_number_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandSetStartPageNumberArchive::_internal_old_start_page_number() const {
  return old_start_page_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandSetStartPageNumberArchive::old_start_page_number() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetStartPageNumberArchive.old_start_page_number)
  return _internal_old_start_page_number();
}
inline void CommandSetStartPageNumberArchive::_internal_set_old_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  old_start_page_number_ = value;
}
inline void CommandSetStartPageNumberArchive::set_old_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_old_start_page_number(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetStartPageNumberArchive.old_start_page_number)
}

// required int32 start_page_number = 2;
inline bool CommandSetStartPageNumberArchive::_internal_has_start_page_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetStartPageNumberArchive::has_start_page_number() const {
  return _internal_has_start_page_number();
}
inline void CommandSetStartPageNumberArchive::clear_start_page_number() {
  start_page_number_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandSetStartPageNumberArchive::_internal_start_page_number() const {
  return start_page_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandSetStartPageNumberArchive::start_page_number() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetStartPageNumberArchive.start_page_number)
  return _internal_start_page_number();
}
inline void CommandSetStartPageNumberArchive::_internal_set_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_page_number_ = value;
}
inline void CommandSetStartPageNumberArchive::set_start_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_page_number(value);
  // @@protoc_insertion_point(field_set:TN.CommandSetStartPageNumberArchive.start_page_number)
}

// required .TSP.UUID sheet_uid = 3;
inline bool CommandSetStartPageNumberArchive::_internal_has_sheet_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uid_ != nullptr);
  return value;
}
inline bool CommandSetStartPageNumberArchive::has_sheet_uid() const {
  return _internal_has_sheet_uid();
}
inline const ::TSP::UUID& CommandSetStartPageNumberArchive::_internal_sheet_uid() const {
  const ::TSP::UUID* p = sheet_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSetStartPageNumberArchive::sheet_uid() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetStartPageNumberArchive.sheet_uid)
  return _internal_sheet_uid();
}
inline void CommandSetStartPageNumberArchive::unsafe_arena_set_allocated_sheet_uid(
    ::TSP::UUID* sheet_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  sheet_uid_ = sheet_uid;
  if (sheet_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetStartPageNumberArchive.sheet_uid)
}
inline ::TSP::UUID* CommandSetStartPageNumberArchive::release_sheet_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSetStartPageNumberArchive::unsafe_arena_release_sheet_uid() {
  // @@protoc_insertion_point(field_release:TN.CommandSetStartPageNumberArchive.sheet_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uid_;
  sheet_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSetStartPageNumberArchive::_internal_mutable_sheet_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uid_ = p;
  }
  return sheet_uid_;
}
inline ::TSP::UUID* CommandSetStartPageNumberArchive::mutable_sheet_uid() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetStartPageNumberArchive.sheet_uid)
  return _internal_mutable_sheet_uid();
}
inline void CommandSetStartPageNumberArchive::set_allocated_sheet_uid(::TSP::UUID* sheet_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid_);
  }
  if (sheet_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_uid_ = sheet_uid;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetStartPageNumberArchive.sheet_uid)
}

// required .TSK.CommandArchive super = 4;
inline bool CommandSetStartPageNumberArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetStartPageNumberArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetStartPageNumberArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetStartPageNumberArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSetStartPageNumberArchive.super)
  return _internal_super();
}
inline void CommandSetStartPageNumberArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSetStartPageNumberArchive.super)
}
inline ::TSK::CommandArchive* CommandSetStartPageNumberArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSetStartPageNumberArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSetStartPageNumberArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetStartPageNumberArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetStartPageNumberArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSetStartPageNumberArchive.super)
  return _internal_mutable_super();
}
inline void CommandSetStartPageNumberArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSetStartPageNumberArchive.super)
}

// -------------------------------------------------------------------

// CommandReorderSidebarItemChildrenAchive

// required .TSK.CommandArchive super = 1;
inline bool CommandReorderSidebarItemChildrenAchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandReorderSidebarItemChildrenAchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandReorderSidebarItemChildrenAchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandReorderSidebarItemChildrenAchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandReorderSidebarItemChildrenAchive.super)
  return _internal_super();
}
inline void CommandReorderSidebarItemChildrenAchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandReorderSidebarItemChildrenAchive.super)
}
inline ::TSK::CommandArchive* CommandReorderSidebarItemChildrenAchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandReorderSidebarItemChildrenAchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandReorderSidebarItemChildrenAchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandReorderSidebarItemChildrenAchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandReorderSidebarItemChildrenAchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandReorderSidebarItemChildrenAchive.super)
  return _internal_mutable_super();
}
inline void CommandReorderSidebarItemChildrenAchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandReorderSidebarItemChildrenAchive.super)
}

// required .TSP.Reference sheet = 2;
inline bool CommandReorderSidebarItemChildrenAchive::_internal_has_sheet() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sheet_ != nullptr);
  return value;
}
inline bool CommandReorderSidebarItemChildrenAchive::has_sheet() const {
  return _internal_has_sheet();
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::_internal_sheet() const {
  const ::TSP::Reference* p = sheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::sheet() const {
  // @@protoc_insertion_point(field_get:TN.CommandReorderSidebarItemChildrenAchive.sheet)
  return _internal_sheet();
}
inline void CommandReorderSidebarItemChildrenAchive::unsafe_arena_set_allocated_sheet(
    ::TSP::Reference* sheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  sheet_ = sheet;
  if (sheet) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandReorderSidebarItemChildrenAchive.sheet)
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::release_sheet() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::unsafe_arena_release_sheet() {
  // @@protoc_insertion_point(field_release:TN.CommandReorderSidebarItemChildrenAchive.sheet)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = sheet_;
  sheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::_internal_mutable_sheet() {
  _has_bits_[0] |= 0x00000002u;
  if (sheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    sheet_ = p;
  }
  return sheet_;
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::mutable_sheet() {
  // @@protoc_insertion_point(field_mutable:TN.CommandReorderSidebarItemChildrenAchive.sheet)
  return _internal_mutable_sheet();
}
inline void CommandReorderSidebarItemChildrenAchive::set_allocated_sheet(::TSP::Reference* sheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_);
  }
  if (sheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet)->GetArena();
    if (message_arena != submessage_arena) {
      sheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sheet_ = sheet;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandReorderSidebarItemChildrenAchive.sheet)
}

// repeated .TSP.Reference old_children = 3;
inline int CommandReorderSidebarItemChildrenAchive::_internal_old_children_size() const {
  return old_children_.size();
}
inline int CommandReorderSidebarItemChildrenAchive::old_children_size() const {
  return _internal_old_children_size();
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::mutable_old_children(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandReorderSidebarItemChildrenAchive.old_children)
  return old_children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandReorderSidebarItemChildrenAchive::mutable_old_children() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandReorderSidebarItemChildrenAchive.old_children)
  return &old_children_;
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::_internal_old_children(int index) const {
  return old_children_.Get(index);
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::old_children(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandReorderSidebarItemChildrenAchive.old_children)
  return _internal_old_children(index);
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::_internal_add_old_children() {
  return old_children_.Add();
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::add_old_children() {
  // @@protoc_insertion_point(field_add:TN.CommandReorderSidebarItemChildrenAchive.old_children)
  return _internal_add_old_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandReorderSidebarItemChildrenAchive::old_children() const {
  // @@protoc_insertion_point(field_list:TN.CommandReorderSidebarItemChildrenAchive.old_children)
  return old_children_;
}

// repeated .TSP.Reference new_children = 4;
inline int CommandReorderSidebarItemChildrenAchive::_internal_new_children_size() const {
  return new_children_.size();
}
inline int CommandReorderSidebarItemChildrenAchive::new_children_size() const {
  return _internal_new_children_size();
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::mutable_new_children(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandReorderSidebarItemChildrenAchive.new_children)
  return new_children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandReorderSidebarItemChildrenAchive::mutable_new_children() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandReorderSidebarItemChildrenAchive.new_children)
  return &new_children_;
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::_internal_new_children(int index) const {
  return new_children_.Get(index);
}
inline const ::TSP::Reference& CommandReorderSidebarItemChildrenAchive::new_children(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandReorderSidebarItemChildrenAchive.new_children)
  return _internal_new_children(index);
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::_internal_add_new_children() {
  return new_children_.Add();
}
inline ::TSP::Reference* CommandReorderSidebarItemChildrenAchive::add_new_children() {
  // @@protoc_insertion_point(field_add:TN.CommandReorderSidebarItemChildrenAchive.new_children)
  return _internal_add_new_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandReorderSidebarItemChildrenAchive::new_children() const {
  // @@protoc_insertion_point(field_list:TN.CommandReorderSidebarItemChildrenAchive.new_children)
  return new_children_;
}

// -------------------------------------------------------------------

// CommandChartMediatorSetEditingState

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandChartMediatorSetEditingState::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_super() const {
  return _internal_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorSetEditingState::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorSetEditingState::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.super)
  return _internal_super();
}
inline void CommandChartMediatorSetEditingState::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetEditingState.super)
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetEditingState::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetEditingState::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetEditingState.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetEditingState::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetEditingState::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetEditingState.super)
  return _internal_mutable_super();
}
inline void CommandChartMediatorSetEditingState::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetEditingState.super)
}

// optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
inline bool CommandChartMediatorSetEditingState::_internal_has_old_formulas() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_formulas_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_old_formulas() const {
  return _internal_has_old_formulas();
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetEditingState::_internal_old_formulas() const {
  const ::TN::ChartMediatorFormulaStorage* p = old_formulas_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::ChartMediatorFormulaStorage&>(
      ::TN::_ChartMediatorFormulaStorage_default_instance_);
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetEditingState::old_formulas() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.old_formulas)
  return _internal_old_formulas();
}
inline void CommandChartMediatorSetEditingState::unsafe_arena_set_allocated_old_formulas(
    ::TN::ChartMediatorFormulaStorage* old_formulas) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formulas_);
  }
  old_formulas_ = old_formulas;
  if (old_formulas) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetEditingState.old_formulas)
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::release_old_formulas() {
  _has_bits_[0] &= ~0x00000002u;
  ::TN::ChartMediatorFormulaStorage* temp = old_formulas_;
  old_formulas_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::unsafe_arena_release_old_formulas() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetEditingState.old_formulas)
  _has_bits_[0] &= ~0x00000002u;
  ::TN::ChartMediatorFormulaStorage* temp = old_formulas_;
  old_formulas_ = nullptr;
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::_internal_mutable_old_formulas() {
  _has_bits_[0] |= 0x00000002u;
  if (old_formulas_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::ChartMediatorFormulaStorage>(GetArena());
    old_formulas_ = p;
  }
  return old_formulas_;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::mutable_old_formulas() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetEditingState.old_formulas)
  return _internal_mutable_old_formulas();
}
inline void CommandChartMediatorSetEditingState::set_allocated_old_formulas(::TN::ChartMediatorFormulaStorage* old_formulas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formulas_);
  }
  if (old_formulas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formulas)->GetArena();
    if (message_arena != submessage_arena) {
      old_formulas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_formulas, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_formulas_ = old_formulas;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetEditingState.old_formulas)
}

// optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
inline bool CommandChartMediatorSetEditingState::_internal_has_new_formulas() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || new_formulas_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_new_formulas() const {
  return _internal_has_new_formulas();
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetEditingState::_internal_new_formulas() const {
  const ::TN::ChartMediatorFormulaStorage* p = new_formulas_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::ChartMediatorFormulaStorage&>(
      ::TN::_ChartMediatorFormulaStorage_default_instance_);
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetEditingState::new_formulas() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.new_formulas)
  return _internal_new_formulas();
}
inline void CommandChartMediatorSetEditingState::unsafe_arena_set_allocated_new_formulas(
    ::TN::ChartMediatorFormulaStorage* new_formulas) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_formulas_);
  }
  new_formulas_ = new_formulas;
  if (new_formulas) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetEditingState.new_formulas)
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::release_new_formulas() {
  _has_bits_[0] &= ~0x00000004u;
  ::TN::ChartMediatorFormulaStorage* temp = new_formulas_;
  new_formulas_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::unsafe_arena_release_new_formulas() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetEditingState.new_formulas)
  _has_bits_[0] &= ~0x00000004u;
  ::TN::ChartMediatorFormulaStorage* temp = new_formulas_;
  new_formulas_ = nullptr;
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::_internal_mutable_new_formulas() {
  _has_bits_[0] |= 0x00000004u;
  if (new_formulas_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::ChartMediatorFormulaStorage>(GetArena());
    new_formulas_ = p;
  }
  return new_formulas_;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetEditingState::mutable_new_formulas() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetEditingState.new_formulas)
  return _internal_mutable_new_formulas();
}
inline void CommandChartMediatorSetEditingState::set_allocated_new_formulas(::TN::ChartMediatorFormulaStorage* new_formulas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_formulas_);
  }
  if (new_formulas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_formulas)->GetArena();
    if (message_arena != submessage_arena) {
      new_formulas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_formulas, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_formulas_ = new_formulas;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetEditingState.new_formulas)
}

// optional int32 old_direction = 5;
inline bool CommandChartMediatorSetEditingState::_internal_has_old_direction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_old_direction() const {
  return _internal_has_old_direction();
}
inline void CommandChartMediatorSetEditingState::clear_old_direction() {
  old_direction_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetEditingState::_internal_old_direction() const {
  return old_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetEditingState::old_direction() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.old_direction)
  return _internal_old_direction();
}
inline void CommandChartMediatorSetEditingState::_internal_set_old_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  old_direction_ = value;
}
inline void CommandChartMediatorSetEditingState::set_old_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_old_direction(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetEditingState.old_direction)
}

// optional int32 new_direction = 6;
inline bool CommandChartMediatorSetEditingState::_internal_has_new_direction() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_new_direction() const {
  return _internal_has_new_direction();
}
inline void CommandChartMediatorSetEditingState::clear_new_direction() {
  new_direction_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetEditingState::_internal_new_direction() const {
  return new_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetEditingState::new_direction() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.new_direction)
  return _internal_new_direction();
}
inline void CommandChartMediatorSetEditingState::_internal_set_new_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  new_direction_ = value;
}
inline void CommandChartMediatorSetEditingState::set_new_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_direction(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetEditingState.new_direction)
}

// optional int32 old_scatter_format = 7;
inline bool CommandChartMediatorSetEditingState::_internal_has_old_scatter_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_old_scatter_format() const {
  return _internal_has_old_scatter_format();
}
inline void CommandChartMediatorSetEditingState::clear_old_scatter_format() {
  old_scatter_format_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetEditingState::_internal_old_scatter_format() const {
  return old_scatter_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetEditingState::old_scatter_format() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.old_scatter_format)
  return _internal_old_scatter_format();
}
inline void CommandChartMediatorSetEditingState::_internal_set_old_scatter_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  old_scatter_format_ = value;
}
inline void CommandChartMediatorSetEditingState::set_old_scatter_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_old_scatter_format(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetEditingState.old_scatter_format)
}

// optional int32 new_scatter_format = 8;
inline bool CommandChartMediatorSetEditingState::_internal_has_new_scatter_format() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_new_scatter_format() const {
  return _internal_has_new_scatter_format();
}
inline void CommandChartMediatorSetEditingState::clear_new_scatter_format() {
  new_scatter_format_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetEditingState::_internal_new_scatter_format() const {
  return new_scatter_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetEditingState::new_scatter_format() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.new_scatter_format)
  return _internal_new_scatter_format();
}
inline void CommandChartMediatorSetEditingState::_internal_set_new_scatter_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  new_scatter_format_ = value;
}
inline void CommandChartMediatorSetEditingState::set_new_scatter_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_scatter_format(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetEditingState.new_scatter_format)
}

// optional bool for_formula_rewrite = 9;
inline bool CommandChartMediatorSetEditingState::_internal_has_for_formula_rewrite() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandChartMediatorSetEditingState::has_for_formula_rewrite() const {
  return _internal_has_for_formula_rewrite();
}
inline void CommandChartMediatorSetEditingState::clear_for_formula_rewrite() {
  for_formula_rewrite_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CommandChartMediatorSetEditingState::_internal_for_formula_rewrite() const {
  return for_formula_rewrite_;
}
inline bool CommandChartMediatorSetEditingState::for_formula_rewrite() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetEditingState.for_formula_rewrite)
  return _internal_for_formula_rewrite();
}
inline void CommandChartMediatorSetEditingState::_internal_set_for_formula_rewrite(bool value) {
  _has_bits_[0] |= 0x00000080u;
  for_formula_rewrite_ = value;
}
inline void CommandChartMediatorSetEditingState::set_for_formula_rewrite(bool value) {
  _internal_set_for_formula_rewrite(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetEditingState.for_formula_rewrite)
}

// -------------------------------------------------------------------

// CommandChartMediatorSetGridDirection

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandChartMediatorSetGridDirection::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetGridDirection::has_super() const {
  return _internal_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorSetGridDirection::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorSetGridDirection::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetGridDirection.super)
  return _internal_super();
}
inline void CommandChartMediatorSetGridDirection::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetGridDirection.super)
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetGridDirection::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetGridDirection::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetGridDirection.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetGridDirection::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetGridDirection::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetGridDirection.super)
  return _internal_mutable_super();
}
inline void CommandChartMediatorSetGridDirection::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetGridDirection.super)
}

// required uint32 old_direction = 2;
inline bool CommandChartMediatorSetGridDirection::_internal_has_old_direction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandChartMediatorSetGridDirection::has_old_direction() const {
  return _internal_has_old_direction();
}
inline void CommandChartMediatorSetGridDirection::clear_old_direction() {
  old_direction_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandChartMediatorSetGridDirection::_internal_old_direction() const {
  return old_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandChartMediatorSetGridDirection::old_direction() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetGridDirection.old_direction)
  return _internal_old_direction();
}
inline void CommandChartMediatorSetGridDirection::_internal_set_old_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  old_direction_ = value;
}
inline void CommandChartMediatorSetGridDirection::set_old_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_direction(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetGridDirection.old_direction)
}

// required uint32 new_direction = 3;
inline bool CommandChartMediatorSetGridDirection::_internal_has_new_direction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandChartMediatorSetGridDirection::has_new_direction() const {
  return _internal_has_new_direction();
}
inline void CommandChartMediatorSetGridDirection::clear_new_direction() {
  new_direction_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandChartMediatorSetGridDirection::_internal_new_direction() const {
  return new_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandChartMediatorSetGridDirection::new_direction() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetGridDirection.new_direction)
  return _internal_new_direction();
}
inline void CommandChartMediatorSetGridDirection::_internal_set_new_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  new_direction_ = value;
}
inline void CommandChartMediatorSetGridDirection::set_new_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_direction(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetGridDirection.new_direction)
}

// optional .TN.ChartMediatorFormulaStorage old_formula_storage = 4;
inline bool CommandChartMediatorSetGridDirection::_internal_has_old_formula_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_formula_storage_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetGridDirection::has_old_formula_storage() const {
  return _internal_has_old_formula_storage();
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetGridDirection::_internal_old_formula_storage() const {
  const ::TN::ChartMediatorFormulaStorage* p = old_formula_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::ChartMediatorFormulaStorage&>(
      ::TN::_ChartMediatorFormulaStorage_default_instance_);
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetGridDirection::old_formula_storage() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetGridDirection.old_formula_storage)
  return _internal_old_formula_storage();
}
inline void CommandChartMediatorSetGridDirection::unsafe_arena_set_allocated_old_formula_storage(
    ::TN::ChartMediatorFormulaStorage* old_formula_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formula_storage_);
  }
  old_formula_storage_ = old_formula_storage;
  if (old_formula_storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetGridDirection.old_formula_storage)
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetGridDirection::release_old_formula_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TN::ChartMediatorFormulaStorage* temp = old_formula_storage_;
  old_formula_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetGridDirection::unsafe_arena_release_old_formula_storage() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetGridDirection.old_formula_storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TN::ChartMediatorFormulaStorage* temp = old_formula_storage_;
  old_formula_storage_ = nullptr;
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetGridDirection::_internal_mutable_old_formula_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (old_formula_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::ChartMediatorFormulaStorage>(GetArena());
    old_formula_storage_ = p;
  }
  return old_formula_storage_;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetGridDirection::mutable_old_formula_storage() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetGridDirection.old_formula_storage)
  return _internal_mutable_old_formula_storage();
}
inline void CommandChartMediatorSetGridDirection::set_allocated_old_formula_storage(::TN::ChartMediatorFormulaStorage* old_formula_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formula_storage_);
  }
  if (old_formula_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formula_storage)->GetArena();
    if (message_arena != submessage_arena) {
      old_formula_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_formula_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_formula_storage_ = old_formula_storage;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetGridDirection.old_formula_storage)
}

// -------------------------------------------------------------------

// CommandChartMediatorSetSeriesOrder

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandChartMediatorSetSeriesOrder::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetSeriesOrder::has_super() const {
  return _internal_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorSetSeriesOrder::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorSetSeriesOrder::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetSeriesOrder.super)
  return _internal_super();
}
inline void CommandChartMediatorSetSeriesOrder::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetSeriesOrder.super)
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetSeriesOrder::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetSeriesOrder::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetSeriesOrder.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetSeriesOrder::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetSeriesOrder::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetSeriesOrder.super)
  return _internal_mutable_super();
}
inline void CommandChartMediatorSetSeriesOrder::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetSeriesOrder.super)
}

// optional .TSP.UUID series_id = 2;
inline bool CommandChartMediatorSetSeriesOrder::_internal_has_series_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || series_id_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetSeriesOrder::has_series_id() const {
  return _internal_has_series_id();
}
inline const ::TSP::UUID& CommandChartMediatorSetSeriesOrder::_internal_series_id() const {
  const ::TSP::UUID* p = series_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandChartMediatorSetSeriesOrder::series_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetSeriesOrder.series_id)
  return _internal_series_id();
}
inline void CommandChartMediatorSetSeriesOrder::unsafe_arena_set_allocated_series_id(
    ::TSP::UUID* series_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_id_);
  }
  series_id_ = series_id;
  if (series_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetSeriesOrder.series_id)
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::release_series_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = series_id_;
  series_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::unsafe_arena_release_series_id() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetSeriesOrder.series_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = series_id_;
  series_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::_internal_mutable_series_id() {
  _has_bits_[0] |= 0x00000002u;
  if (series_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    series_id_ = p;
  }
  return series_id_;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::mutable_series_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetSeriesOrder.series_id)
  return _internal_mutable_series_id();
}
inline void CommandChartMediatorSetSeriesOrder::set_allocated_series_id(::TSP::UUID* series_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_id_);
  }
  if (series_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_id)->GetArena();
    if (message_arena != submessage_arena) {
      series_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  series_id_ = series_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetSeriesOrder.series_id)
}

// optional .TSP.UUID preceding_series_id = 3;
inline bool CommandChartMediatorSetSeriesOrder::_internal_has_preceding_series_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || preceding_series_id_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetSeriesOrder::has_preceding_series_id() const {
  return _internal_has_preceding_series_id();
}
inline const ::TSP::UUID& CommandChartMediatorSetSeriesOrder::_internal_preceding_series_id() const {
  const ::TSP::UUID* p = preceding_series_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandChartMediatorSetSeriesOrder::preceding_series_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetSeriesOrder.preceding_series_id)
  return _internal_preceding_series_id();
}
inline void CommandChartMediatorSetSeriesOrder::unsafe_arena_set_allocated_preceding_series_id(
    ::TSP::UUID* preceding_series_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preceding_series_id_);
  }
  preceding_series_id_ = preceding_series_id;
  if (preceding_series_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetSeriesOrder.preceding_series_id)
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::release_preceding_series_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = preceding_series_id_;
  preceding_series_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::unsafe_arena_release_preceding_series_id() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetSeriesOrder.preceding_series_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = preceding_series_id_;
  preceding_series_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::_internal_mutable_preceding_series_id() {
  _has_bits_[0] |= 0x00000004u;
  if (preceding_series_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    preceding_series_id_ = p;
  }
  return preceding_series_id_;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::mutable_preceding_series_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetSeriesOrder.preceding_series_id)
  return _internal_mutable_preceding_series_id();
}
inline void CommandChartMediatorSetSeriesOrder::set_allocated_preceding_series_id(::TSP::UUID* preceding_series_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preceding_series_id_);
  }
  if (preceding_series_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preceding_series_id)->GetArena();
    if (message_arena != submessage_arena) {
      preceding_series_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preceding_series_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preceding_series_id_ = preceding_series_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetSeriesOrder.preceding_series_id)
}

// optional .TSP.UUID inverse_series_id = 4;
inline bool CommandChartMediatorSetSeriesOrder::_internal_has_inverse_series_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || inverse_series_id_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetSeriesOrder::has_inverse_series_id() const {
  return _internal_has_inverse_series_id();
}
inline const ::TSP::UUID& CommandChartMediatorSetSeriesOrder::_internal_inverse_series_id() const {
  const ::TSP::UUID* p = inverse_series_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandChartMediatorSetSeriesOrder::inverse_series_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetSeriesOrder.inverse_series_id)
  return _internal_inverse_series_id();
}
inline void CommandChartMediatorSetSeriesOrder::unsafe_arena_set_allocated_inverse_series_id(
    ::TSP::UUID* inverse_series_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_series_id_);
  }
  inverse_series_id_ = inverse_series_id;
  if (inverse_series_id) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetSeriesOrder.inverse_series_id)
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::release_inverse_series_id() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = inverse_series_id_;
  inverse_series_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::unsafe_arena_release_inverse_series_id() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetSeriesOrder.inverse_series_id)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = inverse_series_id_;
  inverse_series_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::_internal_mutable_inverse_series_id() {
  _has_bits_[0] |= 0x00000008u;
  if (inverse_series_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    inverse_series_id_ = p;
  }
  return inverse_series_id_;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::mutable_inverse_series_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetSeriesOrder.inverse_series_id)
  return _internal_mutable_inverse_series_id();
}
inline void CommandChartMediatorSetSeriesOrder::set_allocated_inverse_series_id(::TSP::UUID* inverse_series_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_series_id_);
  }
  if (inverse_series_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_series_id)->GetArena();
    if (message_arena != submessage_arena) {
      inverse_series_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_series_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  inverse_series_id_ = inverse_series_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetSeriesOrder.inverse_series_id)
}

// optional .TSP.UUID inverse_preceding_series_id = 5;
inline bool CommandChartMediatorSetSeriesOrder::_internal_has_inverse_preceding_series_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || inverse_preceding_series_id_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetSeriesOrder::has_inverse_preceding_series_id() const {
  return _internal_has_inverse_preceding_series_id();
}
inline const ::TSP::UUID& CommandChartMediatorSetSeriesOrder::_internal_inverse_preceding_series_id() const {
  const ::TSP::UUID* p = inverse_preceding_series_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandChartMediatorSetSeriesOrder::inverse_preceding_series_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetSeriesOrder.inverse_preceding_series_id)
  return _internal_inverse_preceding_series_id();
}
inline void CommandChartMediatorSetSeriesOrder::unsafe_arena_set_allocated_inverse_preceding_series_id(
    ::TSP::UUID* inverse_preceding_series_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_preceding_series_id_);
  }
  inverse_preceding_series_id_ = inverse_preceding_series_id;
  if (inverse_preceding_series_id) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetSeriesOrder.inverse_preceding_series_id)
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::release_inverse_preceding_series_id() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = inverse_preceding_series_id_;
  inverse_preceding_series_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::unsafe_arena_release_inverse_preceding_series_id() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetSeriesOrder.inverse_preceding_series_id)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = inverse_preceding_series_id_;
  inverse_preceding_series_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::_internal_mutable_inverse_preceding_series_id() {
  _has_bits_[0] |= 0x00000010u;
  if (inverse_preceding_series_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    inverse_preceding_series_id_ = p;
  }
  return inverse_preceding_series_id_;
}
inline ::TSP::UUID* CommandChartMediatorSetSeriesOrder::mutable_inverse_preceding_series_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetSeriesOrder.inverse_preceding_series_id)
  return _internal_mutable_inverse_preceding_series_id();
}
inline void CommandChartMediatorSetSeriesOrder::set_allocated_inverse_preceding_series_id(::TSP::UUID* inverse_preceding_series_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_preceding_series_id_);
  }
  if (inverse_preceding_series_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inverse_preceding_series_id)->GetArena();
    if (message_arena != submessage_arena) {
      inverse_preceding_series_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse_preceding_series_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  inverse_preceding_series_id_ = inverse_preceding_series_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetSeriesOrder.inverse_preceding_series_id)
}

// required int32 undo_current_index = 6;
inline bool CommandChartMediatorSetSeriesOrder::_internal_has_undo_current_index() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandChartMediatorSetSeriesOrder::has_undo_current_index() const {
  return _internal_has_undo_current_index();
}
inline void CommandChartMediatorSetSeriesOrder::clear_undo_current_index() {
  undo_current_index_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetSeriesOrder::_internal_undo_current_index() const {
  return undo_current_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetSeriesOrder::undo_current_index() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetSeriesOrder.undo_current_index)
  return _internal_undo_current_index();
}
inline void CommandChartMediatorSetSeriesOrder::_internal_set_undo_current_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  undo_current_index_ = value;
}
inline void CommandChartMediatorSetSeriesOrder::set_undo_current_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_undo_current_index(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetSeriesOrder.undo_current_index)
}

// required int32 undo_new_index = 7;
inline bool CommandChartMediatorSetSeriesOrder::_internal_has_undo_new_index() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandChartMediatorSetSeriesOrder::has_undo_new_index() const {
  return _internal_has_undo_new_index();
}
inline void CommandChartMediatorSetSeriesOrder::clear_undo_new_index() {
  undo_new_index_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetSeriesOrder::_internal_undo_new_index() const {
  return undo_new_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetSeriesOrder::undo_new_index() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetSeriesOrder.undo_new_index)
  return _internal_undo_new_index();
}
inline void CommandChartMediatorSetSeriesOrder::_internal_set_undo_new_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  undo_new_index_ = value;
}
inline void CommandChartMediatorSetSeriesOrder::set_undo_new_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_undo_new_index(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetSeriesOrder.undo_new_index)
}

// optional .TN.ChartMediatorFormulaStorage old_formula_storage = 8;
inline bool CommandChartMediatorSetSeriesOrder::_internal_has_old_formula_storage() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || old_formula_storage_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetSeriesOrder::has_old_formula_storage() const {
  return _internal_has_old_formula_storage();
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetSeriesOrder::_internal_old_formula_storage() const {
  const ::TN::ChartMediatorFormulaStorage* p = old_formula_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::ChartMediatorFormulaStorage&>(
      ::TN::_ChartMediatorFormulaStorage_default_instance_);
}
inline const ::TN::ChartMediatorFormulaStorage& CommandChartMediatorSetSeriesOrder::old_formula_storage() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetSeriesOrder.old_formula_storage)
  return _internal_old_formula_storage();
}
inline void CommandChartMediatorSetSeriesOrder::unsafe_arena_set_allocated_old_formula_storage(
    ::TN::ChartMediatorFormulaStorage* old_formula_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formula_storage_);
  }
  old_formula_storage_ = old_formula_storage;
  if (old_formula_storage) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetSeriesOrder.old_formula_storage)
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetSeriesOrder::release_old_formula_storage() {
  _has_bits_[0] &= ~0x00000020u;
  ::TN::ChartMediatorFormulaStorage* temp = old_formula_storage_;
  old_formula_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetSeriesOrder::unsafe_arena_release_old_formula_storage() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetSeriesOrder.old_formula_storage)
  _has_bits_[0] &= ~0x00000020u;
  ::TN::ChartMediatorFormulaStorage* temp = old_formula_storage_;
  old_formula_storage_ = nullptr;
  return temp;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetSeriesOrder::_internal_mutable_old_formula_storage() {
  _has_bits_[0] |= 0x00000020u;
  if (old_formula_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::ChartMediatorFormulaStorage>(GetArena());
    old_formula_storage_ = p;
  }
  return old_formula_storage_;
}
inline ::TN::ChartMediatorFormulaStorage* CommandChartMediatorSetSeriesOrder::mutable_old_formula_storage() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetSeriesOrder.old_formula_storage)
  return _internal_mutable_old_formula_storage();
}
inline void CommandChartMediatorSetSeriesOrder::set_allocated_old_formula_storage(::TN::ChartMediatorFormulaStorage* old_formula_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formula_storage_);
  }
  if (old_formula_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formula_storage)->GetArena();
    if (message_arena != submessage_arena) {
      old_formula_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_formula_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  old_formula_storage_ = old_formula_storage;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetSeriesOrder.old_formula_storage)
}

// -------------------------------------------------------------------

// CommandChartMediatorUpdateForEntityDelete

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandChartMediatorUpdateForEntityDelete::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandChartMediatorUpdateForEntityDelete::has_super() const {
  return _internal_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorUpdateForEntityDelete::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorUpdateForEntityDelete::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorUpdateForEntityDelete.super)
  return _internal_super();
}
inline void CommandChartMediatorUpdateForEntityDelete::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorUpdateForEntityDelete.super)
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorUpdateForEntityDelete::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorUpdateForEntityDelete::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorUpdateForEntityDelete.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorUpdateForEntityDelete::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorUpdateForEntityDelete::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorUpdateForEntityDelete.super)
  return _internal_mutable_super();
}
inline void CommandChartMediatorUpdateForEntityDelete::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorUpdateForEntityDelete.super)
}

// optional .TSP.Reference cmd = 3;
inline bool CommandChartMediatorUpdateForEntityDelete::_internal_has_cmd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cmd_ != nullptr);
  return value;
}
inline bool CommandChartMediatorUpdateForEntityDelete::has_cmd() const {
  return _internal_has_cmd();
}
inline const ::TSP::Reference& CommandChartMediatorUpdateForEntityDelete::_internal_cmd() const {
  const ::TSP::Reference* p = cmd_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartMediatorUpdateForEntityDelete::cmd() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorUpdateForEntityDelete.cmd)
  return _internal_cmd();
}
inline void CommandChartMediatorUpdateForEntityDelete::unsafe_arena_set_allocated_cmd(
    ::TSP::Reference* cmd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_);
  }
  cmd_ = cmd;
  if (cmd) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorUpdateForEntityDelete.cmd)
}
inline ::TSP::Reference* CommandChartMediatorUpdateForEntityDelete::release_cmd() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = cmd_;
  cmd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandChartMediatorUpdateForEntityDelete::unsafe_arena_release_cmd() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorUpdateForEntityDelete.cmd)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = cmd_;
  cmd_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartMediatorUpdateForEntityDelete::_internal_mutable_cmd() {
  _has_bits_[0] |= 0x00000002u;
  if (cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    cmd_ = p;
  }
  return cmd_;
}
inline ::TSP::Reference* CommandChartMediatorUpdateForEntityDelete::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorUpdateForEntityDelete.cmd)
  return _internal_mutable_cmd();
}
inline void CommandChartMediatorUpdateForEntityDelete::set_allocated_cmd(::TSP::Reference* cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_);
  }
  if (cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd)->GetArena();
    if (message_arena != submessage_arena) {
      cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cmd_ = cmd;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorUpdateForEntityDelete.cmd)
}

// -------------------------------------------------------------------

// CommandChartMediatorSetFormula

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandChartMediatorSetFormula::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandChartMediatorSetFormula::has_super() const {
  return _internal_has_super();
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorSetFormula::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandChartMediatorSetFormula::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetFormula.super)
  return _internal_super();
}
inline void CommandChartMediatorSetFormula::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandChartMediatorSetFormula.super)
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetFormula::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetFormula::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandChartMediatorSetFormula.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetFormula::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSCH::ChartCommandArchive* CommandChartMediatorSetFormula::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetFormula.super)
  return _internal_mutable_super();
}
inline void CommandChartMediatorSetFormula::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandChartMediatorSetFormula.super)
}

// required int32 model_update_data_type = 2;
inline bool CommandChartMediatorSetFormula::_internal_has_model_update_data_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandChartMediatorSetFormula::has_model_update_data_type() const {
  return _internal_has_model_update_data_type();
}
inline void CommandChartMediatorSetFormula::clear_model_update_data_type() {
  model_update_data_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetFormula::_internal_model_update_data_type() const {
  return model_update_data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetFormula::model_update_data_type() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetFormula.model_update_data_type)
  return _internal_model_update_data_type();
}
inline void CommandChartMediatorSetFormula::_internal_set_model_update_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  model_update_data_type_ = value;
}
inline void CommandChartMediatorSetFormula::set_model_update_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_update_data_type(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetFormula.model_update_data_type)
}

// repeated .TSCE.FormulaArchive formulae = 3;
inline int CommandChartMediatorSetFormula::_internal_formulae_size() const {
  return formulae_.size();
}
inline int CommandChartMediatorSetFormula::formulae_size() const {
  return _internal_formulae_size();
}
inline ::TSCE::FormulaArchive* CommandChartMediatorSetFormula::mutable_formulae(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetFormula.formulae)
  return formulae_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
CommandChartMediatorSetFormula::mutable_formulae() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandChartMediatorSetFormula.formulae)
  return &formulae_;
}
inline const ::TSCE::FormulaArchive& CommandChartMediatorSetFormula::_internal_formulae(int index) const {
  return formulae_.Get(index);
}
inline const ::TSCE::FormulaArchive& CommandChartMediatorSetFormula::formulae(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetFormula.formulae)
  return _internal_formulae(index);
}
inline ::TSCE::FormulaArchive* CommandChartMediatorSetFormula::_internal_add_formulae() {
  return formulae_.Add();
}
inline ::TSCE::FormulaArchive* CommandChartMediatorSetFormula::add_formulae() {
  // @@protoc_insertion_point(field_add:TN.CommandChartMediatorSetFormula.formulae)
  return _internal_add_formulae();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
CommandChartMediatorSetFormula::formulae() const {
  // @@protoc_insertion_point(field_list:TN.CommandChartMediatorSetFormula.formulae)
  return formulae_;
}

// repeated .TSCE.FormulaArchive old_formulae = 4;
inline int CommandChartMediatorSetFormula::_internal_old_formulae_size() const {
  return old_formulae_.size();
}
inline int CommandChartMediatorSetFormula::old_formulae_size() const {
  return _internal_old_formulae_size();
}
inline ::TSCE::FormulaArchive* CommandChartMediatorSetFormula::mutable_old_formulae(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandChartMediatorSetFormula.old_formulae)
  return old_formulae_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
CommandChartMediatorSetFormula::mutable_old_formulae() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandChartMediatorSetFormula.old_formulae)
  return &old_formulae_;
}
inline const ::TSCE::FormulaArchive& CommandChartMediatorSetFormula::_internal_old_formulae(int index) const {
  return old_formulae_.Get(index);
}
inline const ::TSCE::FormulaArchive& CommandChartMediatorSetFormula::old_formulae(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetFormula.old_formulae)
  return _internal_old_formulae(index);
}
inline ::TSCE::FormulaArchive* CommandChartMediatorSetFormula::_internal_add_old_formulae() {
  return old_formulae_.Add();
}
inline ::TSCE::FormulaArchive* CommandChartMediatorSetFormula::add_old_formulae() {
  // @@protoc_insertion_point(field_add:TN.CommandChartMediatorSetFormula.old_formulae)
  return _internal_add_old_formulae();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
CommandChartMediatorSetFormula::old_formulae() const {
  // @@protoc_insertion_point(field_list:TN.CommandChartMediatorSetFormula.old_formulae)
  return old_formulae_;
}

// required uint32 series_index = 5;
inline bool CommandChartMediatorSetFormula::_internal_has_series_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandChartMediatorSetFormula::has_series_index() const {
  return _internal_has_series_index();
}
inline void CommandChartMediatorSetFormula::clear_series_index() {
  series_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandChartMediatorSetFormula::_internal_series_index() const {
  return series_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandChartMediatorSetFormula::series_index() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetFormula.series_index)
  return _internal_series_index();
}
inline void CommandChartMediatorSetFormula::_internal_set_series_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  series_index_ = value;
}
inline void CommandChartMediatorSetFormula::set_series_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_index(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetFormula.series_index)
}

// required int32 axis_type = 6;
inline bool CommandChartMediatorSetFormula::_internal_has_axis_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandChartMediatorSetFormula::has_axis_type() const {
  return _internal_has_axis_type();
}
inline void CommandChartMediatorSetFormula::clear_axis_type() {
  axis_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetFormula::_internal_axis_type() const {
  return axis_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandChartMediatorSetFormula::axis_type() const {
  // @@protoc_insertion_point(field_get:TN.CommandChartMediatorSetFormula.axis_type)
  return _internal_axis_type();
}
inline void CommandChartMediatorSetFormula::_internal_set_axis_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  axis_type_ = value;
}
inline void CommandChartMediatorSetFormula::set_axis_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis_type(value);
  // @@protoc_insertion_point(field_set:TN.CommandChartMediatorSetFormula.axis_type)
}

// -------------------------------------------------------------------

// CommandSheetSetBackgroundFillArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSheetSetBackgroundFillArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSheetSetBackgroundFillArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSheetSetBackgroundFillArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSheetSetBackgroundFillArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetSetBackgroundFillArchive.super)
  return _internal_super();
}
inline void CommandSheetSetBackgroundFillArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetSetBackgroundFillArchive.super)
}
inline ::TSK::CommandArchive* CommandSheetSetBackgroundFillArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetSetBackgroundFillArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetSetBackgroundFillArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetSetBackgroundFillArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSheetSetBackgroundFillArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetSetBackgroundFillArchive.super)
  return _internal_mutable_super();
}
inline void CommandSheetSetBackgroundFillArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetSetBackgroundFillArchive.super)
}

// required .TSP.UUID sheet_id = 2;
inline bool CommandSheetSetBackgroundFillArchive::_internal_has_sheet_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sheet_id_ != nullptr);
  return value;
}
inline bool CommandSheetSetBackgroundFillArchive::has_sheet_id() const {
  return _internal_has_sheet_id();
}
inline const ::TSP::UUID& CommandSheetSetBackgroundFillArchive::_internal_sheet_id() const {
  const ::TSP::UUID* p = sheet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSheetSetBackgroundFillArchive::sheet_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetSetBackgroundFillArchive.sheet_id)
  return _internal_sheet_id();
}
inline void CommandSheetSetBackgroundFillArchive::unsafe_arena_set_allocated_sheet_id(
    ::TSP::UUID* sheet_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  sheet_id_ = sheet_id;
  if (sheet_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetSetBackgroundFillArchive.sheet_id)
}
inline ::TSP::UUID* CommandSheetSetBackgroundFillArchive::release_sheet_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSheetSetBackgroundFillArchive::unsafe_arena_release_sheet_id() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetSetBackgroundFillArchive.sheet_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSheetSetBackgroundFillArchive::_internal_mutable_sheet_id() {
  _has_bits_[0] |= 0x00000002u;
  if (sheet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_id_ = p;
  }
  return sheet_id_;
}
inline ::TSP::UUID* CommandSheetSetBackgroundFillArchive::mutable_sheet_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetSetBackgroundFillArchive.sheet_id)
  return _internal_mutable_sheet_id();
}
inline void CommandSheetSetBackgroundFillArchive::set_allocated_sheet_id(::TSP::UUID* sheet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  if (sheet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sheet_id_ = sheet_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetSetBackgroundFillArchive.sheet_id)
}

// required .TSD.FillArchive new_fill = 3;
inline bool CommandSheetSetBackgroundFillArchive::_internal_has_new_fill() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || new_fill_ != nullptr);
  return value;
}
inline bool CommandSheetSetBackgroundFillArchive::has_new_fill() const {
  return _internal_has_new_fill();
}
inline const ::TSD::FillArchive& CommandSheetSetBackgroundFillArchive::_internal_new_fill() const {
  const ::TSD::FillArchive* p = new_fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& CommandSheetSetBackgroundFillArchive::new_fill() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetSetBackgroundFillArchive.new_fill)
  return _internal_new_fill();
}
inline void CommandSheetSetBackgroundFillArchive::unsafe_arena_set_allocated_new_fill(
    ::TSD::FillArchive* new_fill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_fill_);
  }
  new_fill_ = new_fill;
  if (new_fill) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetSetBackgroundFillArchive.new_fill)
}
inline ::TSD::FillArchive* CommandSheetSetBackgroundFillArchive::release_new_fill() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::FillArchive* temp = new_fill_;
  new_fill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* CommandSheetSetBackgroundFillArchive::unsafe_arena_release_new_fill() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetSetBackgroundFillArchive.new_fill)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::FillArchive* temp = new_fill_;
  new_fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* CommandSheetSetBackgroundFillArchive::_internal_mutable_new_fill() {
  _has_bits_[0] |= 0x00000004u;
  if (new_fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    new_fill_ = p;
  }
  return new_fill_;
}
inline ::TSD::FillArchive* CommandSheetSetBackgroundFillArchive::mutable_new_fill() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetSetBackgroundFillArchive.new_fill)
  return _internal_mutable_new_fill();
}
inline void CommandSheetSetBackgroundFillArchive::set_allocated_new_fill(::TSD::FillArchive* new_fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_fill_);
  }
  if (new_fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_fill)->GetArena();
    if (message_arena != submessage_arena) {
      new_fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_fill_ = new_fill;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetSetBackgroundFillArchive.new_fill)
}

// required .TSD.FillArchive old_fill = 4;
inline bool CommandSheetSetBackgroundFillArchive::_internal_has_old_fill() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_fill_ != nullptr);
  return value;
}
inline bool CommandSheetSetBackgroundFillArchive::has_old_fill() const {
  return _internal_has_old_fill();
}
inline const ::TSD::FillArchive& CommandSheetSetBackgroundFillArchive::_internal_old_fill() const {
  const ::TSD::FillArchive* p = old_fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& CommandSheetSetBackgroundFillArchive::old_fill() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetSetBackgroundFillArchive.old_fill)
  return _internal_old_fill();
}
inline void CommandSheetSetBackgroundFillArchive::unsafe_arena_set_allocated_old_fill(
    ::TSD::FillArchive* old_fill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_fill_);
  }
  old_fill_ = old_fill;
  if (old_fill) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetSetBackgroundFillArchive.old_fill)
}
inline ::TSD::FillArchive* CommandSheetSetBackgroundFillArchive::release_old_fill() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::FillArchive* temp = old_fill_;
  old_fill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* CommandSheetSetBackgroundFillArchive::unsafe_arena_release_old_fill() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetSetBackgroundFillArchive.old_fill)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::FillArchive* temp = old_fill_;
  old_fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* CommandSheetSetBackgroundFillArchive::_internal_mutable_old_fill() {
  _has_bits_[0] |= 0x00000008u;
  if (old_fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    old_fill_ = p;
  }
  return old_fill_;
}
inline ::TSD::FillArchive* CommandSheetSetBackgroundFillArchive::mutable_old_fill() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetSetBackgroundFillArchive.old_fill)
  return _internal_mutable_old_fill();
}
inline void CommandSheetSetBackgroundFillArchive::set_allocated_old_fill(::TSD::FillArchive* old_fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_fill_);
  }
  if (old_fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_fill)->GetArena();
    if (message_arena != submessage_arena) {
      old_fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_fill_ = old_fill;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetSetBackgroundFillArchive.old_fill)
}

// -------------------------------------------------------------------

// CommandSheetSetStyleArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSheetSetStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSheetSetStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSheetSetStyleArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSheetSetStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetSetStyleArchive.super)
  return _internal_super();
}
inline void CommandSheetSetStyleArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetSetStyleArchive.super)
}
inline ::TSK::CommandArchive* CommandSheetSetStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetSetStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetSetStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSheetSetStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSheetSetStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetSetStyleArchive.super)
  return _internal_mutable_super();
}
inline void CommandSheetSetStyleArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetSetStyleArchive.super)
}

// required .TSP.UUID sheet_id = 2;
inline bool CommandSheetSetStyleArchive::_internal_has_sheet_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sheet_id_ != nullptr);
  return value;
}
inline bool CommandSheetSetStyleArchive::has_sheet_id() const {
  return _internal_has_sheet_id();
}
inline const ::TSP::UUID& CommandSheetSetStyleArchive::_internal_sheet_id() const {
  const ::TSP::UUID* p = sheet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSheetSetStyleArchive::sheet_id() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetSetStyleArchive.sheet_id)
  return _internal_sheet_id();
}
inline void CommandSheetSetStyleArchive::unsafe_arena_set_allocated_sheet_id(
    ::TSP::UUID* sheet_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  sheet_id_ = sheet_id;
  if (sheet_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetSetStyleArchive.sheet_id)
}
inline ::TSP::UUID* CommandSheetSetStyleArchive::release_sheet_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CommandSheetSetStyleArchive::unsafe_arena_release_sheet_id() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetSetStyleArchive.sheet_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSheetSetStyleArchive::_internal_mutable_sheet_id() {
  _has_bits_[0] |= 0x00000002u;
  if (sheet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_id_ = p;
  }
  return sheet_id_;
}
inline ::TSP::UUID* CommandSheetSetStyleArchive::mutable_sheet_id() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetSetStyleArchive.sheet_id)
  return _internal_mutable_sheet_id();
}
inline void CommandSheetSetStyleArchive::set_allocated_sheet_id(::TSP::UUID* sheet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  if (sheet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sheet_id_ = sheet_id;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetSetStyleArchive.sheet_id)
}

// required .TSP.Reference sheet_style = 3;
inline bool CommandSheetSetStyleArchive::_internal_has_sheet_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || sheet_style_ != nullptr);
  return value;
}
inline bool CommandSheetSetStyleArchive::has_sheet_style() const {
  return _internal_has_sheet_style();
}
inline const ::TSP::Reference& CommandSheetSetStyleArchive::_internal_sheet_style() const {
  const ::TSP::Reference* p = sheet_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSheetSetStyleArchive::sheet_style() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetSetStyleArchive.sheet_style)
  return _internal_sheet_style();
}
inline void CommandSheetSetStyleArchive::unsafe_arena_set_allocated_sheet_style(
    ::TSP::Reference* sheet_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_style_);
  }
  sheet_style_ = sheet_style;
  if (sheet_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetSetStyleArchive.sheet_style)
}
inline ::TSP::Reference* CommandSheetSetStyleArchive::release_sheet_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = sheet_style_;
  sheet_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandSheetSetStyleArchive::unsafe_arena_release_sheet_style() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetSetStyleArchive.sheet_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = sheet_style_;
  sheet_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSheetSetStyleArchive::_internal_mutable_sheet_style() {
  _has_bits_[0] |= 0x00000004u;
  if (sheet_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    sheet_style_ = p;
  }
  return sheet_style_;
}
inline ::TSP::Reference* CommandSheetSetStyleArchive::mutable_sheet_style() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetSetStyleArchive.sheet_style)
  return _internal_mutable_sheet_style();
}
inline void CommandSheetSetStyleArchive::set_allocated_sheet_style(::TSP::Reference* sheet_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_style_);
  }
  if (sheet_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_style)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sheet_style_ = sheet_style;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetSetStyleArchive.sheet_style)
}

// optional .TSP.Reference old_sheet_style = 4;
inline bool CommandSheetSetStyleArchive::_internal_has_old_sheet_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_sheet_style_ != nullptr);
  return value;
}
inline bool CommandSheetSetStyleArchive::has_old_sheet_style() const {
  return _internal_has_old_sheet_style();
}
inline const ::TSP::Reference& CommandSheetSetStyleArchive::_internal_old_sheet_style() const {
  const ::TSP::Reference* p = old_sheet_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSheetSetStyleArchive::old_sheet_style() const {
  // @@protoc_insertion_point(field_get:TN.CommandSheetSetStyleArchive.old_sheet_style)
  return _internal_old_sheet_style();
}
inline void CommandSheetSetStyleArchive::unsafe_arena_set_allocated_old_sheet_style(
    ::TSP::Reference* old_sheet_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_sheet_style_);
  }
  old_sheet_style_ = old_sheet_style;
  if (old_sheet_style) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandSheetSetStyleArchive.old_sheet_style)
}
inline ::TSP::Reference* CommandSheetSetStyleArchive::release_old_sheet_style() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_sheet_style_;
  old_sheet_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandSheetSetStyleArchive::unsafe_arena_release_old_sheet_style() {
  // @@protoc_insertion_point(field_release:TN.CommandSheetSetStyleArchive.old_sheet_style)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_sheet_style_;
  old_sheet_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSheetSetStyleArchive::_internal_mutable_old_sheet_style() {
  _has_bits_[0] |= 0x00000008u;
  if (old_sheet_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    old_sheet_style_ = p;
  }
  return old_sheet_style_;
}
inline ::TSP::Reference* CommandSheetSetStyleArchive::mutable_old_sheet_style() {
  // @@protoc_insertion_point(field_mutable:TN.CommandSheetSetStyleArchive.old_sheet_style)
  return _internal_mutable_old_sheet_style();
}
inline void CommandSheetSetStyleArchive::set_allocated_old_sheet_style(::TSP::Reference* old_sheet_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_sheet_style_);
  }
  if (old_sheet_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_sheet_style)->GetArena();
    if (message_arena != submessage_arena) {
      old_sheet_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_sheet_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_sheet_style_ = old_sheet_style;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandSheetSetStyleArchive.old_sheet_style)
}

// -------------------------------------------------------------------

// DocumentSelectionTransformerArchive

// optional .TSP.Reference document_selection = 1;
inline bool DocumentSelectionTransformerArchive::_internal_has_document_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || document_selection_ != nullptr);
  return value;
}
inline bool DocumentSelectionTransformerArchive::has_document_selection() const {
  return _internal_has_document_selection();
}
inline const ::TSP::Reference& DocumentSelectionTransformerArchive::_internal_document_selection() const {
  const ::TSP::Reference* p = document_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSelectionTransformerArchive::document_selection() const {
  // @@protoc_insertion_point(field_get:TN.DocumentSelectionTransformerArchive.document_selection)
  return _internal_document_selection();
}
inline void DocumentSelectionTransformerArchive::unsafe_arena_set_allocated_document_selection(
    ::TSP::Reference* document_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_selection_);
  }
  document_selection_ = document_selection;
  if (document_selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.DocumentSelectionTransformerArchive.document_selection)
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::release_document_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = document_selection_;
  document_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::unsafe_arena_release_document_selection() {
  // @@protoc_insertion_point(field_release:TN.DocumentSelectionTransformerArchive.document_selection)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = document_selection_;
  document_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::_internal_mutable_document_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (document_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    document_selection_ = p;
  }
  return document_selection_;
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::mutable_document_selection() {
  // @@protoc_insertion_point(field_mutable:TN.DocumentSelectionTransformerArchive.document_selection)
  return _internal_mutable_document_selection();
}
inline void DocumentSelectionTransformerArchive::set_allocated_document_selection(::TSP::Reference* document_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_selection_);
  }
  if (document_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_selection)->GetArena();
    if (message_arena != submessage_arena) {
      document_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  document_selection_ = document_selection;
  // @@protoc_insertion_point(field_set_allocated:TN.DocumentSelectionTransformerArchive.document_selection)
}

// -------------------------------------------------------------------

// SheetSelectionTransformerArchive

// optional .TSP.UUID sheet_uuid = 1;
inline bool SheetSelectionTransformerArchive::_internal_has_sheet_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_uuid_ != nullptr);
  return value;
}
inline bool SheetSelectionTransformerArchive::has_sheet_uuid() const {
  return _internal_has_sheet_uuid();
}
inline const ::TSP::UUID& SheetSelectionTransformerArchive::_internal_sheet_uuid() const {
  const ::TSP::UUID* p = sheet_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& SheetSelectionTransformerArchive::sheet_uuid() const {
  // @@protoc_insertion_point(field_get:TN.SheetSelectionTransformerArchive.sheet_uuid)
  return _internal_sheet_uuid();
}
inline void SheetSelectionTransformerArchive::unsafe_arena_set_allocated_sheet_uuid(
    ::TSP::UUID* sheet_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uuid_);
  }
  sheet_uuid_ = sheet_uuid;
  if (sheet_uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetSelectionTransformerArchive.sheet_uuid)
}
inline ::TSP::UUID* SheetSelectionTransformerArchive::release_sheet_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uuid_;
  sheet_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* SheetSelectionTransformerArchive::unsafe_arena_release_sheet_uuid() {
  // @@protoc_insertion_point(field_release:TN.SheetSelectionTransformerArchive.sheet_uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_uuid_;
  sheet_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* SheetSelectionTransformerArchive::_internal_mutable_sheet_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_uuid_ = p;
  }
  return sheet_uuid_;
}
inline ::TSP::UUID* SheetSelectionTransformerArchive::mutable_sheet_uuid() {
  // @@protoc_insertion_point(field_mutable:TN.SheetSelectionTransformerArchive.sheet_uuid)
  return _internal_mutable_sheet_uuid();
}
inline void SheetSelectionTransformerArchive::set_allocated_sheet_uuid(::TSP::UUID* sheet_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uuid_);
  }
  if (sheet_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_uuid_ = sheet_uuid;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetSelectionTransformerArchive.sheet_uuid)
}

// required bool paginated = 2;
inline bool SheetSelectionTransformerArchive::_internal_has_paginated() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SheetSelectionTransformerArchive::has_paginated() const {
  return _internal_has_paginated();
}
inline void SheetSelectionTransformerArchive::clear_paginated() {
  paginated_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SheetSelectionTransformerArchive::_internal_paginated() const {
  return paginated_;
}
inline bool SheetSelectionTransformerArchive::paginated() const {
  // @@protoc_insertion_point(field_get:TN.SheetSelectionTransformerArchive.paginated)
  return _internal_paginated();
}
inline void SheetSelectionTransformerArchive::_internal_set_paginated(bool value) {
  _has_bits_[0] |= 0x00000002u;
  paginated_ = value;
}
inline void SheetSelectionTransformerArchive::set_paginated(bool value) {
  _internal_set_paginated(value);
  // @@protoc_insertion_point(field_set:TN.SheetSelectionTransformerArchive.paginated)
}

// -------------------------------------------------------------------

// CanvasSelectionTransformerArchive

// required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
inline bool CanvasSelectionTransformerArchive::_internal_has_transformer_helper() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || transformer_helper_ != nullptr);
  return value;
}
inline bool CanvasSelectionTransformerArchive::has_transformer_helper() const {
  return _internal_has_transformer_helper();
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::_internal_transformer_helper() const {
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive* p = transformer_helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCollectionSelectionTransformerHelperArchive&>(
      ::TSD::_InfoCollectionSelectionTransformerHelperArchive_default_instance_);
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::transformer_helper() const {
  // @@protoc_insertion_point(field_get:TN.CanvasSelectionTransformerArchive.transformer_helper)
  return _internal_transformer_helper();
}
inline void CanvasSelectionTransformerArchive::unsafe_arena_set_allocated_transformer_helper(
    ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper_);
  }
  transformer_helper_ = transformer_helper;
  if (transformer_helper) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CanvasSelectionTransformerArchive.transformer_helper)
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::release_transformer_helper() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::unsafe_arena_release_transformer_helper() {
  // @@protoc_insertion_point(field_release:TN.CanvasSelectionTransformerArchive.transformer_helper)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::_internal_mutable_transformer_helper() {
  _has_bits_[0] |= 0x00000001u;
  if (transformer_helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCollectionSelectionTransformerHelperArchive>(GetArena());
    transformer_helper_ = p;
  }
  return transformer_helper_;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::mutable_transformer_helper() {
  // @@protoc_insertion_point(field_mutable:TN.CanvasSelectionTransformerArchive.transformer_helper)
  return _internal_mutable_transformer_helper();
}
inline void CanvasSelectionTransformerArchive::set_allocated_transformer_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper_);
  }
  if (transformer_helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper)->GetArena();
    if (message_arena != submessage_arena) {
      transformer_helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformer_helper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transformer_helper_ = transformer_helper;
  // @@protoc_insertion_point(field_set_allocated:TN.CanvasSelectionTransformerArchive.transformer_helper)
}

// optional .TSP.UUIDPath header_storage_uuid_path = 2;
inline bool CanvasSelectionTransformerArchive::_internal_has_header_storage_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_storage_uuid_path_ != nullptr);
  return value;
}
inline bool CanvasSelectionTransformerArchive::has_header_storage_uuid_path() const {
  return _internal_has_header_storage_uuid_path();
}
inline const ::TSP::UUIDPath& CanvasSelectionTransformerArchive::_internal_header_storage_uuid_path() const {
  const ::TSP::UUIDPath* p = header_storage_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& CanvasSelectionTransformerArchive::header_storage_uuid_path() const {
  // @@protoc_insertion_point(field_get:TN.CanvasSelectionTransformerArchive.header_storage_uuid_path)
  return _internal_header_storage_uuid_path();
}
inline void CanvasSelectionTransformerArchive::unsafe_arena_set_allocated_header_storage_uuid_path(
    ::TSP::UUIDPath* header_storage_uuid_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_storage_uuid_path_);
  }
  header_storage_uuid_path_ = header_storage_uuid_path;
  if (header_storage_uuid_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CanvasSelectionTransformerArchive.header_storage_uuid_path)
}
inline ::TSP::UUIDPath* CanvasSelectionTransformerArchive::release_header_storage_uuid_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = header_storage_uuid_path_;
  header_storage_uuid_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* CanvasSelectionTransformerArchive::unsafe_arena_release_header_storage_uuid_path() {
  // @@protoc_insertion_point(field_release:TN.CanvasSelectionTransformerArchive.header_storage_uuid_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = header_storage_uuid_path_;
  header_storage_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* CanvasSelectionTransformerArchive::_internal_mutable_header_storage_uuid_path() {
  _has_bits_[0] |= 0x00000002u;
  if (header_storage_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    header_storage_uuid_path_ = p;
  }
  return header_storage_uuid_path_;
}
inline ::TSP::UUIDPath* CanvasSelectionTransformerArchive::mutable_header_storage_uuid_path() {
  // @@protoc_insertion_point(field_mutable:TN.CanvasSelectionTransformerArchive.header_storage_uuid_path)
  return _internal_mutable_header_storage_uuid_path();
}
inline void CanvasSelectionTransformerArchive::set_allocated_header_storage_uuid_path(::TSP::UUIDPath* header_storage_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_storage_uuid_path_);
  }
  if (header_storage_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_storage_uuid_path)->GetArena();
    if (message_arena != submessage_arena) {
      header_storage_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_storage_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_storage_uuid_path_ = header_storage_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TN.CanvasSelectionTransformerArchive.header_storage_uuid_path)
}

// -------------------------------------------------------------------

// SheetChangeBaseArchive

// required .TSP.UUID sheet_id = 1;
inline bool SheetChangeBaseArchive::_internal_has_sheet_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sheet_id_ != nullptr);
  return value;
}
inline bool SheetChangeBaseArchive::has_sheet_id() const {
  return _internal_has_sheet_id();
}
inline const ::TSP::UUID& SheetChangeBaseArchive::_internal_sheet_id() const {
  const ::TSP::UUID* p = sheet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& SheetChangeBaseArchive::sheet_id() const {
  // @@protoc_insertion_point(field_get:TN.SheetChangeBaseArchive.sheet_id)
  return _internal_sheet_id();
}
inline void SheetChangeBaseArchive::unsafe_arena_set_allocated_sheet_id(
    ::TSP::UUID* sheet_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  sheet_id_ = sheet_id;
  if (sheet_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetChangeBaseArchive.sheet_id)
}
inline ::TSP::UUID* SheetChangeBaseArchive::release_sheet_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* SheetChangeBaseArchive::unsafe_arena_release_sheet_id() {
  // @@protoc_insertion_point(field_release:TN.SheetChangeBaseArchive.sheet_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = sheet_id_;
  sheet_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* SheetChangeBaseArchive::_internal_mutable_sheet_id() {
  _has_bits_[0] |= 0x00000001u;
  if (sheet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    sheet_id_ = p;
  }
  return sheet_id_;
}
inline ::TSP::UUID* SheetChangeBaseArchive::mutable_sheet_id() {
  // @@protoc_insertion_point(field_mutable:TN.SheetChangeBaseArchive.sheet_id)
  return _internal_mutable_sheet_id();
}
inline void SheetChangeBaseArchive::set_allocated_sheet_id(::TSP::UUID* sheet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id_);
  }
  if (sheet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sheet_id)->GetArena();
    if (message_arena != submessage_arena) {
      sheet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sheet_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_id_ = sheet_id;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetChangeBaseArchive.sheet_id)
}

// -------------------------------------------------------------------

// SheetChangeSheetNameArchive

// required .TN.SheetChangeBaseArchive super = 1;
inline bool SheetChangeSheetNameArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool SheetChangeSheetNameArchive::has_super() const {
  return _internal_has_super();
}
inline void SheetChangeSheetNameArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TN::SheetChangeBaseArchive& SheetChangeSheetNameArchive::_internal_super() const {
  const ::TN::SheetChangeBaseArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TN::SheetChangeBaseArchive&>(
      ::TN::_SheetChangeBaseArchive_default_instance_);
}
inline const ::TN::SheetChangeBaseArchive& SheetChangeSheetNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.SheetChangeSheetNameArchive.super)
  return _internal_super();
}
inline void SheetChangeSheetNameArchive::unsafe_arena_set_allocated_super(
    ::TN::SheetChangeBaseArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.SheetChangeSheetNameArchive.super)
}
inline ::TN::SheetChangeBaseArchive* SheetChangeSheetNameArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TN::SheetChangeBaseArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TN::SheetChangeBaseArchive* SheetChangeSheetNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.SheetChangeSheetNameArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TN::SheetChangeBaseArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TN::SheetChangeBaseArchive* SheetChangeSheetNameArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TN::SheetChangeBaseArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TN::SheetChangeBaseArchive* SheetChangeSheetNameArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.SheetChangeSheetNameArchive.super)
  return _internal_mutable_super();
}
inline void SheetChangeSheetNameArchive::set_allocated_super(::TN::SheetChangeBaseArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.SheetChangeSheetNameArchive.super)
}

// required string sheet_name = 2;
inline bool SheetChangeSheetNameArchive::_internal_has_sheet_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SheetChangeSheetNameArchive::has_sheet_name() const {
  return _internal_has_sheet_name();
}
inline void SheetChangeSheetNameArchive::clear_sheet_name() {
  sheet_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SheetChangeSheetNameArchive::sheet_name() const {
  // @@protoc_insertion_point(field_get:TN.SheetChangeSheetNameArchive.sheet_name)
  return _internal_sheet_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SheetChangeSheetNameArchive::set_sheet_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TN.SheetChangeSheetNameArchive.sheet_name)
}
inline std::string* SheetChangeSheetNameArchive::mutable_sheet_name() {
  // @@protoc_insertion_point(field_mutable:TN.SheetChangeSheetNameArchive.sheet_name)
  return _internal_mutable_sheet_name();
}
inline const std::string& SheetChangeSheetNameArchive::_internal_sheet_name() const {
  return sheet_name_.Get();
}
inline void SheetChangeSheetNameArchive::_internal_set_sheet_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SheetChangeSheetNameArchive::_internal_mutable_sheet_name() {
  _has_bits_[0] |= 0x00000001u;
  return sheet_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SheetChangeSheetNameArchive::release_sheet_name() {
  // @@protoc_insertion_point(field_release:TN.SheetChangeSheetNameArchive.sheet_name)
  if (!_internal_has_sheet_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sheet_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SheetChangeSheetNameArchive::set_allocated_sheet_name(std::string* sheet_name) {
  if (sheet_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sheet_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sheet_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TN.SheetChangeSheetNameArchive.sheet_name)
}

// -------------------------------------------------------------------

// CommandInducedSheetChangeArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandInducedSheetChangeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandInducedSheetChangeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandInducedSheetChangeArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandInducedSheetChangeArchive::super() const {
  // @@protoc_insertion_point(field_get:TN.CommandInducedSheetChangeArchive.super)
  return _internal_super();
}
inline void CommandInducedSheetChangeArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TN.CommandInducedSheetChangeArchive.super)
}
inline ::TSK::CommandArchive* CommandInducedSheetChangeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandInducedSheetChangeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TN.CommandInducedSheetChangeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandInducedSheetChangeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandInducedSheetChangeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TN.CommandInducedSheetChangeArchive.super)
  return _internal_mutable_super();
}
inline void CommandInducedSheetChangeArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TN.CommandInducedSheetChangeArchive.super)
}

// repeated .TN.SheetChangeSheetNameArchive sheet_changes = 2;
inline int CommandInducedSheetChangeArchive::_internal_sheet_changes_size() const {
  return sheet_changes_.size();
}
inline int CommandInducedSheetChangeArchive::sheet_changes_size() const {
  return _internal_sheet_changes_size();
}
inline void CommandInducedSheetChangeArchive::clear_sheet_changes() {
  sheet_changes_.Clear();
}
inline ::TN::SheetChangeSheetNameArchive* CommandInducedSheetChangeArchive::mutable_sheet_changes(int index) {
  // @@protoc_insertion_point(field_mutable:TN.CommandInducedSheetChangeArchive.sheet_changes)
  return sheet_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetChangeSheetNameArchive >*
CommandInducedSheetChangeArchive::mutable_sheet_changes() {
  // @@protoc_insertion_point(field_mutable_list:TN.CommandInducedSheetChangeArchive.sheet_changes)
  return &sheet_changes_;
}
inline const ::TN::SheetChangeSheetNameArchive& CommandInducedSheetChangeArchive::_internal_sheet_changes(int index) const {
  return sheet_changes_.Get(index);
}
inline const ::TN::SheetChangeSheetNameArchive& CommandInducedSheetChangeArchive::sheet_changes(int index) const {
  // @@protoc_insertion_point(field_get:TN.CommandInducedSheetChangeArchive.sheet_changes)
  return _internal_sheet_changes(index);
}
inline ::TN::SheetChangeSheetNameArchive* CommandInducedSheetChangeArchive::_internal_add_sheet_changes() {
  return sheet_changes_.Add();
}
inline ::TN::SheetChangeSheetNameArchive* CommandInducedSheetChangeArchive::add_sheet_changes() {
  // @@protoc_insertion_point(field_add:TN.CommandInducedSheetChangeArchive.sheet_changes)
  return _internal_add_sheet_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TN::SheetChangeSheetNameArchive >&
CommandInducedSheetChangeArchive::sheet_changes() const {
  // @@protoc_insertion_point(field_list:TN.CommandInducedSheetChangeArchive.sheet_changes)
  return sheet_changes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TN

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TNCommandArchives_2eproto
