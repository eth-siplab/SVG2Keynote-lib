// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TNArchives.proto

#include "TNArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TN {
constexpr SheetUIStateArchive::SheetUIStateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scroll_position_(nullptr)
  , previous_scroll_position_(nullptr)
  , visible_size_(nullptr)
  , previous_visible_size_(nullptr)
  , selection_path_(nullptr)
  , selection_path_transformer_(nullptr)
  , view_scale_(0)
  , previous_view_scale_(0)
  , scroll_position_is_unscaled_(false)
  , scroll_position_valid_(false)
  , previous_scroll_position_valid_(false)
  , device_idiom_(0u){}
struct SheetUIStateArchiveDefaultTypeInternal {
  constexpr SheetUIStateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SheetUIStateArchiveDefaultTypeInternal() {}
  union {
    SheetUIStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SheetUIStateArchiveDefaultTypeInternal _SheetUIStateArchive_default_instance_;
constexpr SheetUIStateDictionaryEntryArchive::SheetUIStateDictionaryEntryArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_(nullptr)
  , sheet_uistate_(nullptr){}
struct SheetUIStateDictionaryEntryArchiveDefaultTypeInternal {
  constexpr SheetUIStateDictionaryEntryArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SheetUIStateDictionaryEntryArchiveDefaultTypeInternal() {}
  union {
    SheetUIStateDictionaryEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SheetUIStateDictionaryEntryArchiveDefaultTypeInternal _SheetUIStateDictionaryEntryArchive_default_instance_;
constexpr UUIDSheetUIStateDictionaryArchive::UUIDSheetUIStateDictionaryArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_uuid_(nullptr)
  , sheet_uistate_(nullptr){}
struct UUIDSheetUIStateDictionaryArchiveDefaultTypeInternal {
  constexpr UUIDSheetUIStateDictionaryArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UUIDSheetUIStateDictionaryArchiveDefaultTypeInternal() {}
  union {
    UUIDSheetUIStateDictionaryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UUIDSheetUIStateDictionaryArchiveDefaultTypeInternal _UUIDSheetUIStateDictionaryArchive_default_instance_;
constexpr UIStateArchive::UIStateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selected_info_()
  , sheet_uistate_dictionary_entry_()
  , edit_mode_sheet_uistate_dictionary_entry_()
  , selected_quick_calc_functions_()
  , chart_ui_state_()
  , uuid_sheet_uistate_dictionary_()
  , table_selection_(nullptr)
  , chart_selection_(nullptr)
  , sheet_selection_(nullptr)
  , desktop_window_origin_(nullptr)
  , desktop_window_size_(nullptr)
  , desktop_screen_size_(nullptr)
  , selection_path_(nullptr)
  , freehand_drawing_toolkit_state_(nullptr)
  , selection_path_transformer_(nullptr)
  , active_sheet_index_(0u)
  , editing_sheet_index_(0u)
  , document_mode_(0)
  , table_editing_mode_(0)
  , form_focused_record_index_(0u)
  , form_focused_field_index_(0u)
  , inspector_pane_view_mode_(0)

  , in_chart_mode_(false)
  , removed_all_quick_calc_functions_(false)
  , show_canvas_guides_(false)
  , shows_comments_(false)
  , inspector_pane_autohidden_(false)
  , shows_sidebar_(false)
  , shows_rulers_(false)
  , editing_disabled_(false)
  , inspector_pane_visible_(true){}
struct UIStateArchiveDefaultTypeInternal {
  constexpr UIStateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UIStateArchiveDefaultTypeInternal() {}
  union {
    UIStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
constexpr SheetSelectionArchive::SheetSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_(nullptr)
  , paginated_(false){}
struct SheetSelectionArchiveDefaultTypeInternal {
  constexpr SheetSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SheetSelectionArchiveDefaultTypeInternal() {}
  union {
    SheetSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SheetSelectionArchiveDefaultTypeInternal _SheetSelectionArchive_default_instance_;
constexpr FormSelectionArchive::FormSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_index_(0u)
  , field_index_(0u){}
struct FormSelectionArchiveDefaultTypeInternal {
  constexpr FormSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormSelectionArchiveDefaultTypeInternal() {}
  union {
    FormSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormSelectionArchiveDefaultTypeInternal _FormSelectionArchive_default_instance_;
constexpr FormBuilderSelectionArchive::FormBuilderSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : viewing_record_index_(0u){}
struct FormBuilderSelectionArchiveDefaultTypeInternal {
  constexpr FormBuilderSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormBuilderSelectionArchiveDefaultTypeInternal() {}
  union {
    FormBuilderSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormBuilderSelectionArchiveDefaultTypeInternal _FormBuilderSelectionArchive_default_instance_;
constexpr FormTableChooserSelectionArchive::FormTableChooserSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FormTableChooserSelectionArchiveDefaultTypeInternal {
  constexpr FormTableChooserSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormTableChooserSelectionArchiveDefaultTypeInternal() {}
  union {
    FormTableChooserSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormTableChooserSelectionArchiveDefaultTypeInternal _FormTableChooserSelectionArchive_default_instance_;
constexpr UndoRedoStateArchive::UndoRedoStateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ui_state_(nullptr){}
struct UndoRedoStateArchiveDefaultTypeInternal {
  constexpr UndoRedoStateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoRedoStateArchiveDefaultTypeInternal() {}
  union {
    UndoRedoStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoRedoStateArchiveDefaultTypeInternal _UndoRedoStateArchive_default_instance_;
constexpr DocumentArchive::DocumentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheets_()
  , printer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , paper_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , calculation_engine_(nullptr)
  , stylesheet_(nullptr)
  , sidebar_order_(nullptr)
  , theme_(nullptr)
  , uistate_(nullptr)
  , super_(nullptr)
  , custom_format_list_(nullptr)
  , page_size_(nullptr){}
struct DocumentArchiveDefaultTypeInternal {
  constexpr DocumentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentArchiveDefaultTypeInternal() {}
  union {
    DocumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
constexpr PlaceholderArchive::PlaceholderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct PlaceholderArchiveDefaultTypeInternal {
  constexpr PlaceholderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceholderArchiveDefaultTypeInternal() {}
  union {
    PlaceholderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
constexpr SheetArchive::SheetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawable_infos_()
  , headers_()
  , footers_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , print_margins_(nullptr)
  , header_storage_(nullptr)
  , footer_storage_(nullptr)
  , userdefinedguidestorage_(nullptr)
  , style_(nullptr)
  , in_portrait_page_orientation_(false)
  , show_repeating_headers_(false)
  , show_page_numbers_(false)
  , is_autofit_on_(false)
  , content_scale_(0)
  , page_order_(0)

  , start_page_number_(0)
  , page_header_inset_(0)
  , page_footer_inset_(0)
  , using_start_page_number_(false)
  , uses_single_header_footer_(false)
  , print_backgrounds_(false)
  , should_print_comments_(false)
  , layout_direction_(0)
{}
struct SheetArchiveDefaultTypeInternal {
  constexpr SheetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SheetArchiveDefaultTypeInternal() {}
  union {
    SheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SheetArchiveDefaultTypeInternal _SheetArchive_default_instance_;
constexpr SheetStylePropertiesArchive::SheetStylePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fill_(nullptr){}
struct SheetStylePropertiesArchiveDefaultTypeInternal {
  constexpr SheetStylePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SheetStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    SheetStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SheetStylePropertiesArchiveDefaultTypeInternal _SheetStylePropertiesArchive_default_instance_;
constexpr SheetStyleArchive::SheetStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , sheet_properties_(nullptr)
  , override_count_(0u){}
struct SheetStyleArchiveDefaultTypeInternal {
  constexpr SheetStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SheetStyleArchiveDefaultTypeInternal() {}
  union {
    SheetStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SheetStyleArchiveDefaultTypeInternal _SheetStyleArchive_default_instance_;
constexpr FormBasedSheetArchive::FormBasedSheetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , table_id_(nullptr){}
struct FormBasedSheetArchiveDefaultTypeInternal {
  constexpr FormBasedSheetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormBasedSheetArchiveDefaultTypeInternal() {}
  union {
    FormBasedSheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormBasedSheetArchiveDefaultTypeInternal _FormBasedSheetArchive_default_instance_;
constexpr ThemeArchive::ThemeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prototypes_()
  , super_(nullptr){}
struct ThemeArchiveDefaultTypeInternal {
  constexpr ThemeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThemeArchiveDefaultTypeInternal() {}
  union {
    ThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
constexpr PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_(nullptr)
  , ui_state_(nullptr){}
struct PasteboardNativeStorageArchiveDefaultTypeInternal {
  constexpr PasteboardNativeStorageArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PasteboardNativeStorageArchiveDefaultTypeInternal() {}
  union {
    PasteboardNativeStorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PasteboardNativeStorageArchiveDefaultTypeInternal _PasteboardNativeStorageArchive_default_instance_;
constexpr ChartMediatorFormulaStorage::ChartMediatorFormulaStorage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_formulae_()
  , row_label_formulae_()
  , col_label_formulae_()
  , error_custom_pos_formulae_()
  , error_custom_neg_formulae_()
  , error_custom_pos_scatterx_formulae_()
  , error_custom_neg_scatterx_formulae_()
  , direction_(0){}
struct ChartMediatorFormulaStorageDefaultTypeInternal {
  constexpr ChartMediatorFormulaStorageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartMediatorFormulaStorageDefaultTypeInternal() {}
  union {
    ChartMediatorFormulaStorage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartMediatorFormulaStorageDefaultTypeInternal _ChartMediatorFormulaStorage_default_instance_;
constexpr ChartMediatorArchive::ChartMediatorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , formulas_(nullptr)
  , columns_are_series_(false)
  , is_registered_with_calc_engine_(false){}
struct ChartMediatorArchiveDefaultTypeInternal {
  constexpr ChartMediatorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartMediatorArchiveDefaultTypeInternal() {}
  union {
    ChartMediatorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartMediatorArchiveDefaultTypeInternal _ChartMediatorArchive_default_instance_;
constexpr ChartSelectionArchive::ChartSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_(nullptr)
  , deprecated_super_(nullptr)
  , chart_(nullptr)
  , super_(nullptr){}
struct ChartSelectionArchiveDefaultTypeInternal {
  constexpr ChartSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSelectionArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSelectionArchiveDefaultTypeInternal _ChartSelectionArchive_default_instance_;
}  // namespace TN
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TNArchives_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TNArchives_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TNArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TNArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, view_scale_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, scroll_position_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, previous_view_scale_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, scroll_position_is_unscaled_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, previous_scroll_position_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, scroll_position_valid_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, previous_scroll_position_valid_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, visible_size_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, previous_visible_size_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, device_idiom_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, selection_path_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateArchive, selection_path_transformer_),
  6,
  0,
  7,
  8,
  1,
  9,
  10,
  2,
  3,
  11,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateDictionaryEntryArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateDictionaryEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateDictionaryEntryArchive, sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetUIStateDictionaryEntryArchive, sheet_uistate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::UUIDSheetUIStateDictionaryArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::UUIDSheetUIStateDictionaryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::UUIDSheetUIStateDictionaryArchive, sheet_uuid_),
  PROTOBUF_FIELD_OFFSET(::TN::UUIDSheetUIStateDictionaryArchive, sheet_uistate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, active_sheet_index_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, selected_info_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, sheet_uistate_dictionary_entry_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, table_selection_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, editing_sheet_index_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, document_mode_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, edit_mode_sheet_uistate_dictionary_entry_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, table_editing_mode_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, form_focused_record_index_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, form_focused_field_index_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, in_chart_mode_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, chart_selection_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, sheet_selection_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, inspector_pane_visible_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, inspector_pane_view_mode_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, selected_quick_calc_functions_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, removed_all_quick_calc_functions_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, show_canvas_guides_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, shows_comments_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, desktop_window_origin_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, desktop_window_size_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, desktop_screen_size_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, chart_ui_state_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, selection_path_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, inspector_pane_autohidden_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, shows_sidebar_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, shows_rulers_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, uuid_sheet_uistate_dictionary_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, freehand_drawing_toolkit_state_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, selection_path_transformer_),
  PROTOBUF_FIELD_OFFSET(::TN::UIStateArchive, editing_disabled_),
  9,
  ~0u,
  ~0u,
  0,
  10,
  11,
  ~0u,
  12,
  13,
  14,
  16,
  1,
  2,
  24,
  15,
  ~0u,
  17,
  18,
  19,
  3,
  4,
  5,
  ~0u,
  6,
  20,
  21,
  22,
  ~0u,
  7,
  8,
  23,
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionArchive, sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionArchive, paginated_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::FormSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::FormSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::FormSelectionArchive, record_index_),
  PROTOBUF_FIELD_OFFSET(::TN::FormSelectionArchive, field_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::FormBuilderSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::FormBuilderSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::FormBuilderSelectionArchive, viewing_record_index_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TN::FormTableChooserSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::UndoRedoStateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::UndoRedoStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::UndoRedoStateArchive, ui_state_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, sheets_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, calculation_engine_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, stylesheet_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, sidebar_order_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, theme_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, uistate_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, custom_format_list_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, printer_id_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, paper_id_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentArchive, page_size_),
  ~0u,
  7,
  2,
  3,
  4,
  5,
  6,
  8,
  0,
  1,
  9,
  PROTOBUF_FIELD_OFFSET(::TN::PlaceholderArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::PlaceholderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::PlaceholderArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, name_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, drawable_infos_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, in_portrait_page_orientation_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, show_repeating_headers_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, show_page_numbers_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, is_autofit_on_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, content_scale_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, page_order_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, print_margins_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, using_start_page_number_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, start_page_number_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, page_header_inset_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, page_footer_inset_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, header_storage_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, footer_storage_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, userdefinedguidestorage_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, headers_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, footers_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, uses_single_header_footer_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, layout_direction_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, style_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, print_backgrounds_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetArchive, should_print_comments_),
  0,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  11,
  1,
  15,
  12,
  13,
  14,
  2,
  3,
  4,
  ~0u,
  ~0u,
  16,
  19,
  5,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::TN::SheetStylePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::SheetStylePropertiesArchive, fill_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::SheetStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::SheetStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetStyleArchive, sheet_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::FormBasedSheetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::FormBasedSheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::FormBasedSheetArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::FormBasedSheetArchive, table_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::ThemeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::ThemeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::ThemeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::ThemeArchive, prototypes_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TN::PasteboardNativeStorageArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::PasteboardNativeStorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::PasteboardNativeStorageArchive, sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::PasteboardNativeStorageArchive, ui_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, data_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, row_label_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, col_label_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, direction_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, error_custom_pos_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, error_custom_neg_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, error_custom_pos_scatterx_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorFormulaStorage, error_custom_neg_scatterx_formulae_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, entity_id_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, formulas_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, columns_are_series_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartMediatorArchive, is_registered_with_calc_engine_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TN::ChartSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::ChartSelectionArchive, reference_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartSelectionArchive, deprecated_super_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartSelectionArchive, chart_),
  PROTOBUF_FIELD_OFFSET(::TN::ChartSelectionArchive, super_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::TN::SheetUIStateArchive)},
  { 29, 36, sizeof(::TN::SheetUIStateDictionaryEntryArchive)},
  { 38, 45, sizeof(::TN::UUIDSheetUIStateDictionaryArchive)},
  { 47, 83, sizeof(::TN::UIStateArchive)},
  { 114, 121, sizeof(::TN::SheetSelectionArchive)},
  { 123, 130, sizeof(::TN::FormSelectionArchive)},
  { 132, 138, sizeof(::TN::FormBuilderSelectionArchive)},
  { 139, -1, sizeof(::TN::FormTableChooserSelectionArchive)},
  { 144, 150, sizeof(::TN::UndoRedoStateArchive)},
  { 151, 167, sizeof(::TN::DocumentArchive)},
  { 178, 184, sizeof(::TN::PlaceholderArchive)},
  { 185, 213, sizeof(::TN::SheetArchive)},
  { 236, 242, sizeof(::TN::SheetStylePropertiesArchive)},
  { 243, 251, sizeof(::TN::SheetStyleArchive)},
  { 254, 261, sizeof(::TN::FormBasedSheetArchive)},
  { 263, 270, sizeof(::TN::ThemeArchive)},
  { 272, 279, sizeof(::TN::PasteboardNativeStorageArchive)},
  { 281, 294, sizeof(::TN::ChartMediatorFormulaStorage)},
  { 302, 312, sizeof(::TN::ChartMediatorArchive)},
  { 317, 326, sizeof(::TN::ChartSelectionArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_SheetUIStateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_SheetUIStateDictionaryEntryArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_UUIDSheetUIStateDictionaryArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_UIStateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_SheetSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_FormSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_FormBuilderSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_FormTableChooserSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_UndoRedoStateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_DocumentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_PlaceholderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_SheetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_SheetStylePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_SheetStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_FormBasedSheetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_ThemeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_PasteboardNativeStorageArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_ChartMediatorFormulaStorage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_ChartMediatorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_ChartSelectionArchive_default_instance_),
};

const char descriptor_table_protodef_TNArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020TNArchives.proto\022\002TN\032\021TSPMessages.prot"
  "o\032\021TSKArchives.proto\032\022TSCHArchives.proto"
  "\032\022TSCEArchives.proto\032\021TSSArchives.proto\032"
  "\021TSDArchives.proto\032\022TSWPArchives.proto\032\021"
  "TSAArchives.proto\032\021TSTArchives.proto\"\315\003\n"
  "\023SheetUIStateArchive\022\022\n\nview_scale\030\001 \002(\002"
  "\022#\n\017scroll_position\030\002 \002(\0132\n.TSP.Point\022\033\n"
  "\023previous_view_scale\030\003 \001(\002\022#\n\033scroll_pos"
  "ition_is_unscaled\030\004 \001(\010\022,\n\030previous_scro"
  "ll_position\030\005 \001(\0132\n.TSP.Point\022\035\n\025scroll_"
  "position_valid\030\006 \001(\010\022&\n\036previous_scroll_"
  "position_valid\030\007 \001(\010\022\037\n\014visible_size\030\010 \001"
  "(\0132\t.TSP.Size\022(\n\025previous_visible_size\030\t"
  " \001(\0132\t.TSP.Size\022\024\n\014device_idiom\030\n \001(\r\0221\n"
  "\016selection_path\030\013 \001(\0132\031.TSK.SelectionPat"
  "hArchive\0222\n\032selection_path_transformer\030\014"
  " \001(\0132\016.TSP.Reference\"s\n\"SheetUIStateDict"
  "ionaryEntryArchive\022\035\n\005sheet\030\001 \002(\0132\016.TSP."
  "Reference\022.\n\rsheet_uistate\030\002 \002(\0132\027.TN.Sh"
  "eetUIStateArchive\"r\n!UUIDSheetUIStateDic"
  "tionaryArchive\022\035\n\nsheet_uuid\030\001 \002(\0132\t.TSP"
  ".UUID\022.\n\rsheet_uistate\030\002 \002(\0132\027.TN.SheetU"
  "IStateArchive\"\326\013\n\016UIStateArchive\022\036\n\022acti"
  "ve_sheet_index\030\001 \002(\rB\002\030\001\022)\n\rselected_inf"
  "o\030\002 \003(\0132\016.TSP.ReferenceB\002\030\001\022R\n\036sheet_uis"
  "tate_dictionary_entry\030\003 \003(\0132&.TN.SheetUI"
  "StateDictionaryEntryArchiveB\002\030\001\0222\n\017table"
  "_selection\030\004 \001(\0132\025.TST.SelectionArchiveB"
  "\002\030\001\022\037\n\023editing_sheet_index\030\005 \001(\rB\002\030\001\022\025\n\r"
  "document_mode\030\006 \001(\005\022\\\n(edit_mode_sheet_u"
  "istate_dictionary_entry\030\007 \003(\0132&.TN.Sheet"
  "UIStateDictionaryEntryArchiveB\002\030\001\022\036\n\022tab"
  "le_editing_mode\030\010 \001(\005B\002\030\001\022%\n\031form_focuse"
  "d_record_index\030\t \001(\rB\002\030\001\022$\n\030form_focused"
  "_field_index\030\n \001(\rB\002\030\001\022\025\n\rin_chart_mode\030"
  "\013 \001(\010\0226\n\017chart_selection\030\014 \001(\0132\031.TN.Char"
  "tSelectionArchiveB\002\030\001\022+\n\017sheet_selection"
  "\030\r \001(\0132\016.TSP.ReferenceB\002\030\001\022$\n\026inspector_"
  "pane_visible\030\016 \001(\010:\004true\022h\n\030inspector_pa"
  "ne_view_mode\030\017 \001(\0162(.TN.UIStateArchive.I"
  "nspectorPaneViewMode:\034kInspectorPaneView"
  "ModeFormat\022%\n\035selected_quick_calc_functi"
  "ons\030\020 \003(\r\022(\n removed_all_quick_calc_func"
  "tions\030\021 \001(\010\022\032\n\022show_canvas_guides\030\022 \001(\010\022"
  "\026\n\016shows_comments\030\023 \001(\010\022)\n\025desktop_windo"
  "w_origin\030\024 \001(\0132\n.TSP.Point\022&\n\023desktop_wi"
  "ndow_size\030\025 \001(\0132\t.TSP.Size\022&\n\023desktop_sc"
  "reen_size\030\026 \001(\0132\t.TSP.Size\022*\n\016chart_ui_s"
  "tate\030\027 \003(\0132\022.TSCH.ChartUIState\0221\n\016select"
  "ion_path\030\030 \001(\0132\031.TSK.SelectionPathArchiv"
  "e\022!\n\031inspector_pane_autohidden\030\031 \001(\010\022\031\n\r"
  "shows_sidebar\030\032 \001(\010B\002\030\001\022\024\n\014shows_rulers\030"
  "\033 \001(\010\022L\n\035uuid_sheet_uistate_dictionary\030\034"
  " \003(\0132%.TN.UUIDSheetUIStateDictionaryArch"
  "ive\0226\n\036freehand_drawing_toolkit_state\030\035 "
  "\001(\0132\016.TSP.Reference\0222\n\032selection_path_tr"
  "ansformer\030\036 \001(\0132\016.TSP.Reference\022\030\n\020editi"
  "ng_disabled\030\037 \001(\010\"[\n\025InspectorPaneViewMo"
  "de\022 \n\034kInspectorPaneViewModeFormat\020\000\022 \n\034"
  "kInspectorPaneViewModeFilter\020\001\"I\n\025SheetS"
  "electionArchive\022\035\n\005sheet\030\001 \001(\0132\016.TSP.Ref"
  "erence\022\021\n\tpaginated\030\002 \001(\010\"A\n\024FormSelecti"
  "onArchive\022\024\n\014record_index\030\001 \002(\r\022\023\n\013field"
  "_index\030\002 \002(\r\";\n\033FormBuilderSelectionArch"
  "ive\022\034\n\024viewing_record_index\030\001 \001(\r\"\"\n For"
  "mTableChooserSelectionArchive\"<\n\024UndoRed"
  "oStateArchive\022$\n\010ui_state\030\001 \002(\0132\022.TN.UIS"
  "tateArchive\"\211\003\n\017DocumentArchive\022\036\n\006sheet"
  "s\030\001 \003(\0132\016.TSP.Reference\022#\n\005super\030\010 \002(\0132\024"
  ".TSA.DocumentArchive\022.\n\022calculation_engi"
  "ne\030\003 \001(\0132\016.TSP.ReferenceB\002\030\001\022\"\n\nstyleshe"
  "et\030\004 \002(\0132\016.TSP.Reference\022%\n\rsidebar_orde"
  "r\030\005 \002(\0132\016.TSP.Reference\022\035\n\005theme\030\006 \002(\0132\016"
  ".TSP.Reference\022#\n\007uistate\030\007 \001(\0132\022.TN.UIS"
  "tateArchive\022*\n\022custom_format_list\030\t \001(\0132"
  "\016.TSP.Reference\022\026\n\nprinter_id\030\n \001(\tB\002\030\001\022"
  "\020\n\010paper_id\030\013 \001(\t\022\034\n\tpage_size\030\014 \001(\0132\t.T"
  "SP.Size\";\n\022PlaceholderArchive\022%\n\005super\030\001"
  " \002(\0132\026.TSWP.ShapeInfoArchive\"\265\006\n\014SheetAr"
  "chive\022\014\n\004name\030\001 \002(\t\022&\n\016drawable_infos\030\002 "
  "\003(\0132\016.TSP.Reference\022$\n\034in_portrait_page_"
  "orientation\030\003 \001(\010\022\"\n\026show_repeating_head"
  "ers\030\004 \001(\010B\002\030\001\022\031\n\021show_page_numbers\030\005 \001(\010"
  "\022\025\n\ris_autofit_on\030\006 \001(\010\022\025\n\rcontent_scale"
  "\030\007 \001(\002\022!\n\npage_order\030\010 \001(\0162\r.TN.PageOrde"
  "r\022-\n\rprint_margins\030\n \001(\0132\026.TSD.EdgeInset"
  "sArchive\022\037\n\027using_start_page_number\030\013 \001("
  "\010\022\031\n\021start_page_number\030\014 \001(\005\022\031\n\021page_hea"
  "der_inset\030\r \001(\002\022\031\n\021page_footer_inset\030\016 \001"
  "(\002\022*\n\016header_storage\030\017 \001(\0132\016.TSP.Referen"
  "ceB\002\030\001\022*\n\016footer_storage\030\020 \001(\0132\016.TSP.Ref"
  "erenceB\002\030\001\022/\n\027userDefinedGuideStorage\030\021 "
  "\001(\0132\016.TSP.Reference\022\037\n\007headers\030\022 \003(\0132\016.T"
  "SP.Reference\022\037\n\007footers\030\023 \003(\0132\016.TSP.Refe"
  "rence\022!\n\031uses_single_header_footer\030\024 \001(\010"
  "\022Q\n\020layout_direction\030\025 \001(\0162\027.TN.PageLayo"
  "utDirection:\036PageLayoutDirectionLeftToRi"
  "ght\022\035\n\005style\030\026 \001(\0132\016.TSP.Reference\022\031\n\021pr"
  "int_backgrounds\030\027 \001(\010\022\035\n\025should_print_co"
  "mments\030\030 \001(\010\"=\n\033SheetStylePropertiesArch"
  "ive\022\036\n\004fill\030\001 \001(\0132\020.TSD.FillArchive\"\210\001\n\021"
  "SheetStyleArchive\022 \n\005super\030\001 \002(\0132\021.TSS.S"
  "tyleArchive\022\026\n\016override_count\030\002 \001(\r\0229\n\020s"
  "heet_properties\030\003 \001(\0132\037.TN.SheetStylePro"
  "pertiesArchive\"^\n\025FormBasedSheetArchive\022"
  "\037\n\005super\030\001 \002(\0132\020.TN.SheetArchive\022$\n\010tabl"
  "e_id\030\002 \001(\0132\022.TSP.CFUUIDArchive\"T\n\014ThemeA"
  "rchive\022 \n\005super\030\001 \002(\0132\021.TSS.ThemeArchive"
  "\022\"\n\nprototypes\030\002 \003(\0132\016.TSP.Reference\"j\n\036"
  "PasteboardNativeStorageArchive\022\035\n\005sheet\030"
  "\001 \001(\0132\016.TSP.Reference\022)\n\010ui_state\030\002 \001(\0132"
  "\027.TN.SheetUIStateArchive\"\267\003\n\033ChartMediat"
  "orFormulaStorage\022+\n\rdata_formulae\030\001 \003(\0132"
  "\024.TSCE.FormulaArchive\0220\n\022row_label_formu"
  "lae\030\003 \003(\0132\024.TSCE.FormulaArchive\0220\n\022col_l"
  "abel_formulae\030\004 \003(\0132\024.TSCE.FormulaArchiv"
  "e\022\021\n\tdirection\030\005 \001(\005\0227\n\031error_custom_pos"
  "_formulae\030\006 \003(\0132\024.TSCE.FormulaArchive\0227\n"
  "\031error_custom_neg_formulae\030\007 \003(\0132\024.TSCE."
  "FormulaArchive\022@\n\"error_custom_pos_scatt"
  "erX_formulae\030\010 \003(\0132\024.TSCE.FormulaArchive"
  "\022@\n\"error_custom_neg_scatterX_formulae\030\t"
  " \003(\0132\024.TSCE.FormulaArchive\"\317\001\n\024ChartMedi"
  "atorArchive\022)\n\005super\030\001 \002(\0132\032.TSCH.ChartM"
  "ediatorArchive\022\021\n\tentity_id\030\002 \002(\t\0221\n\010for"
  "mulas\030\003 \001(\0132\037.TN.ChartMediatorFormulaSto"
  "rage\022\032\n\022columns_are_series\030\004 \001(\010\022*\n\036is_r"
  "egistered_with_calc_engine\030\005 \001(\010B\002\030\001\"\317\001\n"
  "\025ChartSelectionArchive\022.\n\treference\030\001 \001("
  "\0132\033.TSCE.RangeReferenceArchive\0229\n\020deprec"
  "ated_super\030\002 \001(\0132\033.TSCH.ChartSelectionAr"
  "chiveB\002\030\001\022\035\n\005chart\030\003 \001(\0132\016.TSP.Reference"
  "\022,\n\005super\030\004 \001(\0132\035.TSD.DrawableSelectionA"
  "rchive*\?\n\tPageOrder\022\030\n\024PageOrderTopToBot"
  "tom\020\000\022\030\n\024PageOrderLeftToRight\020\001*]\n\023PageL"
  "ayoutDirection\022\"\n\036PageLayoutDirectionLef"
  "tToRight\020\000\022\"\n\036PageLayoutDirectionRightTo"
  "Left\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TNArchives_2eproto_deps[9] = {
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSCEArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSTArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TNArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TNArchives_2eproto = {
  false, false, 5486, descriptor_table_protodef_TNArchives_2eproto, "TNArchives.proto", 
  &descriptor_table_TNArchives_2eproto_once, descriptor_table_TNArchives_2eproto_deps, 9, 20,
  schemas, file_default_instances, TableStruct_TNArchives_2eproto::offsets,
  file_level_metadata_TNArchives_2eproto, file_level_enum_descriptors_TNArchives_2eproto, file_level_service_descriptors_TNArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TNArchives_2eproto_getter() {
  return &descriptor_table_TNArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TNArchives_2eproto(&descriptor_table_TNArchives_2eproto);
namespace TN {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UIStateArchive_InspectorPaneViewMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TNArchives_2eproto);
  return file_level_enum_descriptors_TNArchives_2eproto[0];
}
bool UIStateArchive_InspectorPaneViewMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UIStateArchive_InspectorPaneViewMode UIStateArchive::kInspectorPaneViewModeFormat;
constexpr UIStateArchive_InspectorPaneViewMode UIStateArchive::kInspectorPaneViewModeFilter;
constexpr UIStateArchive_InspectorPaneViewMode UIStateArchive::InspectorPaneViewMode_MIN;
constexpr UIStateArchive_InspectorPaneViewMode UIStateArchive::InspectorPaneViewMode_MAX;
constexpr int UIStateArchive::InspectorPaneViewMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TNArchives_2eproto);
  return file_level_enum_descriptors_TNArchives_2eproto[1];
}
bool PageOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageLayoutDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TNArchives_2eproto);
  return file_level_enum_descriptors_TNArchives_2eproto[2];
}
bool PageLayoutDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SheetUIStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetUIStateArchive>()._has_bits_);
  static void set_has_view_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Point& scroll_position(const SheetUIStateArchive* msg);
  static void set_has_scroll_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_view_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scroll_position_is_unscaled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Point& previous_scroll_position(const SheetUIStateArchive* msg);
  static void set_has_previous_scroll_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scroll_position_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_previous_scroll_position_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Size& visible_size(const SheetUIStateArchive* msg);
  static void set_has_visible_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Size& previous_visible_size(const SheetUIStateArchive* msg);
  static void set_has_previous_visible_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_device_idiom(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSK::SelectionPathArchive& selection_path(const SheetUIStateArchive* msg);
  static void set_has_selection_path(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& selection_path_transformer(const SheetUIStateArchive* msg);
  static void set_has_selection_path_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000041) ^ 0x00000041) != 0;
  }
};

const ::TSP::Point&
SheetUIStateArchive::_Internal::scroll_position(const SheetUIStateArchive* msg) {
  return *msg->scroll_position_;
}
const ::TSP::Point&
SheetUIStateArchive::_Internal::previous_scroll_position(const SheetUIStateArchive* msg) {
  return *msg->previous_scroll_position_;
}
const ::TSP::Size&
SheetUIStateArchive::_Internal::visible_size(const SheetUIStateArchive* msg) {
  return *msg->visible_size_;
}
const ::TSP::Size&
SheetUIStateArchive::_Internal::previous_visible_size(const SheetUIStateArchive* msg) {
  return *msg->previous_visible_size_;
}
const ::TSK::SelectionPathArchive&
SheetUIStateArchive::_Internal::selection_path(const SheetUIStateArchive* msg) {
  return *msg->selection_path_;
}
const ::TSP::Reference&
SheetUIStateArchive::_Internal::selection_path_transformer(const SheetUIStateArchive* msg) {
  return *msg->selection_path_transformer_;
}
void SheetUIStateArchive::clear_scroll_position() {
  if (scroll_position_ != nullptr) scroll_position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SheetUIStateArchive::clear_previous_scroll_position() {
  if (previous_scroll_position_ != nullptr) previous_scroll_position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SheetUIStateArchive::clear_visible_size() {
  if (visible_size_ != nullptr) visible_size_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SheetUIStateArchive::clear_previous_visible_size() {
  if (previous_visible_size_ != nullptr) previous_visible_size_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SheetUIStateArchive::clear_selection_path() {
  if (selection_path_ != nullptr) selection_path_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SheetUIStateArchive::clear_selection_path_transformer() {
  if (selection_path_transformer_ != nullptr) selection_path_transformer_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
SheetUIStateArchive::SheetUIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.SheetUIStateArchive)
}
SheetUIStateArchive::SheetUIStateArchive(const SheetUIStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scroll_position()) {
    scroll_position_ = new ::TSP::Point(*from.scroll_position_);
  } else {
    scroll_position_ = nullptr;
  }
  if (from._internal_has_previous_scroll_position()) {
    previous_scroll_position_ = new ::TSP::Point(*from.previous_scroll_position_);
  } else {
    previous_scroll_position_ = nullptr;
  }
  if (from._internal_has_visible_size()) {
    visible_size_ = new ::TSP::Size(*from.visible_size_);
  } else {
    visible_size_ = nullptr;
  }
  if (from._internal_has_previous_visible_size()) {
    previous_visible_size_ = new ::TSP::Size(*from.previous_visible_size_);
  } else {
    previous_visible_size_ = nullptr;
  }
  if (from._internal_has_selection_path()) {
    selection_path_ = new ::TSK::SelectionPathArchive(*from.selection_path_);
  } else {
    selection_path_ = nullptr;
  }
  if (from._internal_has_selection_path_transformer()) {
    selection_path_transformer_ = new ::TSP::Reference(*from.selection_path_transformer_);
  } else {
    selection_path_transformer_ = nullptr;
  }
  ::memcpy(&view_scale_, &from.view_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_idiom_) -
    reinterpret_cast<char*>(&view_scale_)) + sizeof(device_idiom_));
  // @@protoc_insertion_point(copy_constructor:TN.SheetUIStateArchive)
}

void SheetUIStateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scroll_position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_idiom_) -
    reinterpret_cast<char*>(&scroll_position_)) + sizeof(device_idiom_));
}

SheetUIStateArchive::~SheetUIStateArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetUIStateArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetUIStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scroll_position_;
  if (this != internal_default_instance()) delete previous_scroll_position_;
  if (this != internal_default_instance()) delete visible_size_;
  if (this != internal_default_instance()) delete previous_visible_size_;
  if (this != internal_default_instance()) delete selection_path_;
  if (this != internal_default_instance()) delete selection_path_transformer_;
}

void SheetUIStateArchive::ArenaDtor(void* object) {
  SheetUIStateArchive* _this = reinterpret_cast< SheetUIStateArchive* >(object);
  (void)_this;
}
void SheetUIStateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetUIStateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SheetUIStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetUIStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(scroll_position_ != nullptr);
      scroll_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(previous_scroll_position_ != nullptr);
      previous_scroll_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(visible_size_ != nullptr);
      visible_size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(previous_visible_size_ != nullptr);
      previous_visible_size_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(selection_path_ != nullptr);
      selection_path_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(selection_path_transformer_ != nullptr);
      selection_path_transformer_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&view_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&previous_view_scale_) -
        reinterpret_cast<char*>(&view_scale_)) + sizeof(previous_view_scale_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&scroll_position_is_unscaled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_idiom_) -
        reinterpret_cast<char*>(&scroll_position_is_unscaled_)) + sizeof(device_idiom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetUIStateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float view_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_view_scale(&has_bits);
          view_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required .TSP.Point scroll_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scroll_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float previous_view_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_previous_view_scale(&has_bits);
          previous_view_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool scroll_position_is_unscaled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_scroll_position_is_unscaled(&has_bits);
          scroll_position_is_unscaled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point previous_scroll_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_scroll_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool scroll_position_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_scroll_position_valid(&has_bits);
          scroll_position_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool previous_scroll_position_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_previous_scroll_position_valid(&has_bits);
          previous_scroll_position_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size visible_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_visible_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size previous_visible_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_visible_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 device_idiom = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_device_idiom(&has_bits);
          device_idiom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive selection_path = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference selection_path_transformer = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_path_transformer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetUIStateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetUIStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float view_scale = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_view_scale(), target);
  }

  // required .TSP.Point scroll_position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scroll_position(this), target, stream);
  }

  // optional float previous_view_scale = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_previous_view_scale(), target);
  }

  // optional bool scroll_position_is_unscaled = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_scroll_position_is_unscaled(), target);
  }

  // optional .TSP.Point previous_scroll_position = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::previous_scroll_position(this), target, stream);
  }

  // optional bool scroll_position_valid = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_scroll_position_valid(), target);
  }

  // optional bool previous_scroll_position_valid = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_previous_scroll_position_valid(), target);
  }

  // optional .TSP.Size visible_size = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::visible_size(this), target, stream);
  }

  // optional .TSP.Size previous_visible_size = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::previous_visible_size(this), target, stream);
  }

  // optional uint32 device_idiom = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_device_idiom(), target);
  }

  // optional .TSK.SelectionPathArchive selection_path = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::selection_path(this), target, stream);
  }

  // optional .TSP.Reference selection_path_transformer = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::selection_path_transformer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetUIStateArchive)
  return target;
}

size_t SheetUIStateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.SheetUIStateArchive)
  size_t total_size = 0;

  if (_internal_has_scroll_position()) {
    // required .TSP.Point scroll_position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scroll_position_);
  }

  if (_internal_has_view_scale()) {
    // required float view_scale = 1;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SheetUIStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetUIStateArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000041) ^ 0x00000041) == 0) {  // All required fields are present.
    // required .TSP.Point scroll_position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scroll_position_);

    // required float view_scale = 1;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSP.Point previous_scroll_position = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *previous_scroll_position_);
    }

    // optional .TSP.Size visible_size = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visible_size_);
    }

    // optional .TSP.Size previous_visible_size = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *previous_visible_size_);
    }

    // optional .TSK.SelectionPathArchive selection_path = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_path_);
    }

    // optional .TSP.Reference selection_path_transformer = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_path_transformer_);
    }

  }
  // optional float previous_view_scale = 3;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 4;
  }

  if (cached_has_bits & 0x00000f00u) {
    // optional bool scroll_position_is_unscaled = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool scroll_position_valid = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool previous_scroll_position_valid = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 device_idiom = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_device_idiom());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetUIStateArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.SheetUIStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetUIStateArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetUIStateArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.SheetUIStateArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.SheetUIStateArchive)
    MergeFrom(*source);
  }
}

void SheetUIStateArchive::MergeFrom(const SheetUIStateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetUIStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scroll_position()->::TSP::Point::MergeFrom(from._internal_scroll_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_previous_scroll_position()->::TSP::Point::MergeFrom(from._internal_previous_scroll_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_visible_size()->::TSP::Size::MergeFrom(from._internal_visible_size());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_previous_visible_size()->::TSP::Size::MergeFrom(from._internal_previous_visible_size());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_selection_path()->::TSK::SelectionPathArchive::MergeFrom(from._internal_selection_path());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_selection_path_transformer()->::TSP::Reference::MergeFrom(from._internal_selection_path_transformer());
    }
    if (cached_has_bits & 0x00000040u) {
      view_scale_ = from.view_scale_;
    }
    if (cached_has_bits & 0x00000080u) {
      previous_view_scale_ = from.previous_view_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      scroll_position_is_unscaled_ = from.scroll_position_is_unscaled_;
    }
    if (cached_has_bits & 0x00000200u) {
      scroll_position_valid_ = from.scroll_position_valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      previous_scroll_position_valid_ = from.previous_scroll_position_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      device_idiom_ = from.device_idiom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SheetUIStateArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.SheetUIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetUIStateArchive::CopyFrom(const SheetUIStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetUIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetUIStateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_scroll_position()) {
    if (!scroll_position_->IsInitialized()) return false;
  }
  if (_internal_has_previous_scroll_position()) {
    if (!previous_scroll_position_->IsInitialized()) return false;
  }
  if (_internal_has_visible_size()) {
    if (!visible_size_->IsInitialized()) return false;
  }
  if (_internal_has_previous_visible_size()) {
    if (!previous_visible_size_->IsInitialized()) return false;
  }
  if (_internal_has_selection_path()) {
    if (!selection_path_->IsInitialized()) return false;
  }
  if (_internal_has_selection_path_transformer()) {
    if (!selection_path_transformer_->IsInitialized()) return false;
  }
  return true;
}

void SheetUIStateArchive::InternalSwap(SheetUIStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SheetUIStateArchive, device_idiom_)
      + sizeof(SheetUIStateArchive::device_idiom_)
      - PROTOBUF_FIELD_OFFSET(SheetUIStateArchive, scroll_position_)>(
          reinterpret_cast<char*>(&scroll_position_),
          reinterpret_cast<char*>(&other->scroll_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetUIStateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[0]);
}

// ===================================================================

class SheetUIStateDictionaryEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetUIStateDictionaryEntryArchive>()._has_bits_);
  static const ::TSP::Reference& sheet(const SheetUIStateDictionaryEntryArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TN::SheetUIStateArchive& sheet_uistate(const SheetUIStateDictionaryEntryArchive* msg);
  static void set_has_sheet_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
SheetUIStateDictionaryEntryArchive::_Internal::sheet(const SheetUIStateDictionaryEntryArchive* msg) {
  return *msg->sheet_;
}
const ::TN::SheetUIStateArchive&
SheetUIStateDictionaryEntryArchive::_Internal::sheet_uistate(const SheetUIStateDictionaryEntryArchive* msg) {
  return *msg->sheet_uistate_;
}
void SheetUIStateDictionaryEntryArchive::clear_sheet() {
  if (sheet_ != nullptr) sheet_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SheetUIStateDictionaryEntryArchive::SheetUIStateDictionaryEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.SheetUIStateDictionaryEntryArchive)
}
SheetUIStateDictionaryEntryArchive::SheetUIStateDictionaryEntryArchive(const SheetUIStateDictionaryEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    sheet_ = new ::TSP::Reference(*from.sheet_);
  } else {
    sheet_ = nullptr;
  }
  if (from._internal_has_sheet_uistate()) {
    sheet_uistate_ = new ::TN::SheetUIStateArchive(*from.sheet_uistate_);
  } else {
    sheet_uistate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.SheetUIStateDictionaryEntryArchive)
}

void SheetUIStateDictionaryEntryArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sheet_uistate_) -
    reinterpret_cast<char*>(&sheet_)) + sizeof(sheet_uistate_));
}

SheetUIStateDictionaryEntryArchive::~SheetUIStateDictionaryEntryArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetUIStateDictionaryEntryArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetUIStateDictionaryEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_;
  if (this != internal_default_instance()) delete sheet_uistate_;
}

void SheetUIStateDictionaryEntryArchive::ArenaDtor(void* object) {
  SheetUIStateDictionaryEntryArchive* _this = reinterpret_cast< SheetUIStateDictionaryEntryArchive* >(object);
  (void)_this;
}
void SheetUIStateDictionaryEntryArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetUIStateDictionaryEntryArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SheetUIStateDictionaryEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetUIStateDictionaryEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_ != nullptr);
      sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sheet_uistate_ != nullptr);
      sheet_uistate_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetUIStateDictionaryEntryArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference sheet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TN.SheetUIStateArchive sheet_uistate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uistate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetUIStateDictionaryEntryArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetUIStateDictionaryEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference sheet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sheet(this), target, stream);
  }

  // required .TN.SheetUIStateArchive sheet_uistate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet_uistate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetUIStateDictionaryEntryArchive)
  return target;
}

size_t SheetUIStateDictionaryEntryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.SheetUIStateDictionaryEntryArchive)
  size_t total_size = 0;

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_);
  }

  if (_internal_has_sheet_uistate()) {
    // required .TN.SheetUIStateArchive sheet_uistate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uistate_);
  }

  return total_size;
}
size_t SheetUIStateDictionaryEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetUIStateDictionaryEntryArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference sheet = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_);

    // required .TN.SheetUIStateArchive sheet_uistate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uistate_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetUIStateDictionaryEntryArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.SheetUIStateDictionaryEntryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetUIStateDictionaryEntryArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetUIStateDictionaryEntryArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.SheetUIStateDictionaryEntryArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.SheetUIStateDictionaryEntryArchive)
    MergeFrom(*source);
  }
}

void SheetUIStateDictionaryEntryArchive::MergeFrom(const SheetUIStateDictionaryEntryArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetUIStateDictionaryEntryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet()->::TSP::Reference::MergeFrom(from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sheet_uistate()->::TN::SheetUIStateArchive::MergeFrom(from._internal_sheet_uistate());
    }
  }
}

void SheetUIStateDictionaryEntryArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.SheetUIStateDictionaryEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetUIStateDictionaryEntryArchive::CopyFrom(const SheetUIStateDictionaryEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetUIStateDictionaryEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetUIStateDictionaryEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet()) {
    if (!sheet_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_uistate()) {
    if (!sheet_uistate_->IsInitialized()) return false;
  }
  return true;
}

void SheetUIStateDictionaryEntryArchive::InternalSwap(SheetUIStateDictionaryEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SheetUIStateDictionaryEntryArchive, sheet_uistate_)
      + sizeof(SheetUIStateDictionaryEntryArchive::sheet_uistate_)
      - PROTOBUF_FIELD_OFFSET(SheetUIStateDictionaryEntryArchive, sheet_)>(
          reinterpret_cast<char*>(&sheet_),
          reinterpret_cast<char*>(&other->sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetUIStateDictionaryEntryArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[1]);
}

// ===================================================================

class UUIDSheetUIStateDictionaryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UUIDSheetUIStateDictionaryArchive>()._has_bits_);
  static const ::TSP::UUID& sheet_uuid(const UUIDSheetUIStateDictionaryArchive* msg);
  static void set_has_sheet_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TN::SheetUIStateArchive& sheet_uistate(const UUIDSheetUIStateDictionaryArchive* msg);
  static void set_has_sheet_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
UUIDSheetUIStateDictionaryArchive::_Internal::sheet_uuid(const UUIDSheetUIStateDictionaryArchive* msg) {
  return *msg->sheet_uuid_;
}
const ::TN::SheetUIStateArchive&
UUIDSheetUIStateDictionaryArchive::_Internal::sheet_uistate(const UUIDSheetUIStateDictionaryArchive* msg) {
  return *msg->sheet_uistate_;
}
void UUIDSheetUIStateDictionaryArchive::clear_sheet_uuid() {
  if (sheet_uuid_ != nullptr) sheet_uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UUIDSheetUIStateDictionaryArchive::UUIDSheetUIStateDictionaryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.UUIDSheetUIStateDictionaryArchive)
}
UUIDSheetUIStateDictionaryArchive::UUIDSheetUIStateDictionaryArchive(const UUIDSheetUIStateDictionaryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet_uuid()) {
    sheet_uuid_ = new ::TSP::UUID(*from.sheet_uuid_);
  } else {
    sheet_uuid_ = nullptr;
  }
  if (from._internal_has_sheet_uistate()) {
    sheet_uistate_ = new ::TN::SheetUIStateArchive(*from.sheet_uistate_);
  } else {
    sheet_uistate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.UUIDSheetUIStateDictionaryArchive)
}

void UUIDSheetUIStateDictionaryArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sheet_uistate_) -
    reinterpret_cast<char*>(&sheet_uuid_)) + sizeof(sheet_uistate_));
}

UUIDSheetUIStateDictionaryArchive::~UUIDSheetUIStateDictionaryArchive() {
  // @@protoc_insertion_point(destructor:TN.UUIDSheetUIStateDictionaryArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UUIDSheetUIStateDictionaryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_uuid_;
  if (this != internal_default_instance()) delete sheet_uistate_;
}

void UUIDSheetUIStateDictionaryArchive::ArenaDtor(void* object) {
  UUIDSheetUIStateDictionaryArchive* _this = reinterpret_cast< UUIDSheetUIStateDictionaryArchive* >(object);
  (void)_this;
}
void UUIDSheetUIStateDictionaryArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UUIDSheetUIStateDictionaryArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UUIDSheetUIStateDictionaryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.UUIDSheetUIStateDictionaryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_uuid_ != nullptr);
      sheet_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sheet_uistate_ != nullptr);
      sheet_uistate_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UUIDSheetUIStateDictionaryArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID sheet_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TN.SheetUIStateArchive sheet_uistate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uistate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UUIDSheetUIStateDictionaryArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.UUIDSheetUIStateDictionaryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID sheet_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sheet_uuid(this), target, stream);
  }

  // required .TN.SheetUIStateArchive sheet_uistate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet_uistate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.UUIDSheetUIStateDictionaryArchive)
  return target;
}

size_t UUIDSheetUIStateDictionaryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.UUIDSheetUIStateDictionaryArchive)
  size_t total_size = 0;

  if (_internal_has_sheet_uuid()) {
    // required .TSP.UUID sheet_uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uuid_);
  }

  if (_internal_has_sheet_uistate()) {
    // required .TN.SheetUIStateArchive sheet_uistate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uistate_);
  }

  return total_size;
}
size_t UUIDSheetUIStateDictionaryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.UUIDSheetUIStateDictionaryArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID sheet_uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uuid_);

    // required .TN.SheetUIStateArchive sheet_uistate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uistate_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UUIDSheetUIStateDictionaryArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.UUIDSheetUIStateDictionaryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UUIDSheetUIStateDictionaryArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UUIDSheetUIStateDictionaryArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.UUIDSheetUIStateDictionaryArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.UUIDSheetUIStateDictionaryArchive)
    MergeFrom(*source);
  }
}

void UUIDSheetUIStateDictionaryArchive::MergeFrom(const UUIDSheetUIStateDictionaryArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.UUIDSheetUIStateDictionaryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet_uuid()->::TSP::UUID::MergeFrom(from._internal_sheet_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sheet_uistate()->::TN::SheetUIStateArchive::MergeFrom(from._internal_sheet_uistate());
    }
  }
}

void UUIDSheetUIStateDictionaryArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.UUIDSheetUIStateDictionaryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUIDSheetUIStateDictionaryArchive::CopyFrom(const UUIDSheetUIStateDictionaryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.UUIDSheetUIStateDictionaryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUIDSheetUIStateDictionaryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet_uuid()) {
    if (!sheet_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_uistate()) {
    if (!sheet_uistate_->IsInitialized()) return false;
  }
  return true;
}

void UUIDSheetUIStateDictionaryArchive::InternalSwap(UUIDSheetUIStateDictionaryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UUIDSheetUIStateDictionaryArchive, sheet_uistate_)
      + sizeof(UUIDSheetUIStateDictionaryArchive::sheet_uistate_)
      - PROTOBUF_FIELD_OFFSET(UUIDSheetUIStateDictionaryArchive, sheet_uuid_)>(
          reinterpret_cast<char*>(&sheet_uuid_),
          reinterpret_cast<char*>(&other->sheet_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UUIDSheetUIStateDictionaryArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[2]);
}

// ===================================================================

class UIStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UIStateArchive>()._has_bits_);
  static void set_has_active_sheet_index(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TST::SelectionArchive& table_selection(const UIStateArchive* msg);
  static void set_has_table_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_editing_sheet_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_document_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_table_editing_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_form_focused_record_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_form_focused_field_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_in_chart_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TN::ChartSelectionArchive& chart_selection(const UIStateArchive* msg);
  static void set_has_chart_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& sheet_selection(const UIStateArchive* msg);
  static void set_has_sheet_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inspector_pane_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_inspector_pane_view_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_removed_all_quick_calc_functions(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_show_canvas_guides(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_shows_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::Point& desktop_window_origin(const UIStateArchive* msg);
  static void set_has_desktop_window_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Size& desktop_window_size(const UIStateArchive* msg);
  static void set_has_desktop_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Size& desktop_screen_size(const UIStateArchive* msg);
  static void set_has_desktop_screen_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::SelectionPathArchive& selection_path(const UIStateArchive* msg);
  static void set_has_selection_path(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inspector_pane_autohidden(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_shows_sidebar(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_shows_rulers(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSP::Reference& freehand_drawing_toolkit_state(const UIStateArchive* msg);
  static void set_has_freehand_drawing_toolkit_state(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& selection_path_transformer(const UIStateArchive* msg);
  static void set_has_selection_path_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_editing_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000200) ^ 0x00000200) != 0;
  }
};

const ::TST::SelectionArchive&
UIStateArchive::_Internal::table_selection(const UIStateArchive* msg) {
  return *msg->table_selection_;
}
const ::TN::ChartSelectionArchive&
UIStateArchive::_Internal::chart_selection(const UIStateArchive* msg) {
  return *msg->chart_selection_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::sheet_selection(const UIStateArchive* msg) {
  return *msg->sheet_selection_;
}
const ::TSP::Point&
UIStateArchive::_Internal::desktop_window_origin(const UIStateArchive* msg) {
  return *msg->desktop_window_origin_;
}
const ::TSP::Size&
UIStateArchive::_Internal::desktop_window_size(const UIStateArchive* msg) {
  return *msg->desktop_window_size_;
}
const ::TSP::Size&
UIStateArchive::_Internal::desktop_screen_size(const UIStateArchive* msg) {
  return *msg->desktop_screen_size_;
}
const ::TSK::SelectionPathArchive&
UIStateArchive::_Internal::selection_path(const UIStateArchive* msg) {
  return *msg->selection_path_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::freehand_drawing_toolkit_state(const UIStateArchive* msg) {
  return *msg->freehand_drawing_toolkit_state_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::selection_path_transformer(const UIStateArchive* msg) {
  return *msg->selection_path_transformer_;
}
void UIStateArchive::clear_selected_info() {
  selected_info_.Clear();
}
void UIStateArchive::clear_table_selection() {
  if (table_selection_ != nullptr) table_selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UIStateArchive::clear_sheet_selection() {
  if (sheet_selection_ != nullptr) sheet_selection_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void UIStateArchive::clear_desktop_window_origin() {
  if (desktop_window_origin_ != nullptr) desktop_window_origin_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void UIStateArchive::clear_desktop_window_size() {
  if (desktop_window_size_ != nullptr) desktop_window_size_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void UIStateArchive::clear_desktop_screen_size() {
  if (desktop_screen_size_ != nullptr) desktop_screen_size_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void UIStateArchive::clear_chart_ui_state() {
  chart_ui_state_.Clear();
}
void UIStateArchive::clear_selection_path() {
  if (selection_path_ != nullptr) selection_path_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void UIStateArchive::clear_freehand_drawing_toolkit_state() {
  if (freehand_drawing_toolkit_state_ != nullptr) freehand_drawing_toolkit_state_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void UIStateArchive::clear_selection_path_transformer() {
  if (selection_path_transformer_ != nullptr) selection_path_transformer_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
UIStateArchive::UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  selected_info_(arena),
  sheet_uistate_dictionary_entry_(arena),
  edit_mode_sheet_uistate_dictionary_entry_(arena),
  selected_quick_calc_functions_(arena),
  chart_ui_state_(arena),
  uuid_sheet_uistate_dictionary_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.UIStateArchive)
}
UIStateArchive::UIStateArchive(const UIStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      selected_info_(from.selected_info_),
      sheet_uistate_dictionary_entry_(from.sheet_uistate_dictionary_entry_),
      edit_mode_sheet_uistate_dictionary_entry_(from.edit_mode_sheet_uistate_dictionary_entry_),
      selected_quick_calc_functions_(from.selected_quick_calc_functions_),
      chart_ui_state_(from.chart_ui_state_),
      uuid_sheet_uistate_dictionary_(from.uuid_sheet_uistate_dictionary_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_selection()) {
    table_selection_ = new ::TST::SelectionArchive(*from.table_selection_);
  } else {
    table_selection_ = nullptr;
  }
  if (from._internal_has_chart_selection()) {
    chart_selection_ = new ::TN::ChartSelectionArchive(*from.chart_selection_);
  } else {
    chart_selection_ = nullptr;
  }
  if (from._internal_has_sheet_selection()) {
    sheet_selection_ = new ::TSP::Reference(*from.sheet_selection_);
  } else {
    sheet_selection_ = nullptr;
  }
  if (from._internal_has_desktop_window_origin()) {
    desktop_window_origin_ = new ::TSP::Point(*from.desktop_window_origin_);
  } else {
    desktop_window_origin_ = nullptr;
  }
  if (from._internal_has_desktop_window_size()) {
    desktop_window_size_ = new ::TSP::Size(*from.desktop_window_size_);
  } else {
    desktop_window_size_ = nullptr;
  }
  if (from._internal_has_desktop_screen_size()) {
    desktop_screen_size_ = new ::TSP::Size(*from.desktop_screen_size_);
  } else {
    desktop_screen_size_ = nullptr;
  }
  if (from._internal_has_selection_path()) {
    selection_path_ = new ::TSK::SelectionPathArchive(*from.selection_path_);
  } else {
    selection_path_ = nullptr;
  }
  if (from._internal_has_freehand_drawing_toolkit_state()) {
    freehand_drawing_toolkit_state_ = new ::TSP::Reference(*from.freehand_drawing_toolkit_state_);
  } else {
    freehand_drawing_toolkit_state_ = nullptr;
  }
  if (from._internal_has_selection_path_transformer()) {
    selection_path_transformer_ = new ::TSP::Reference(*from.selection_path_transformer_);
  } else {
    selection_path_transformer_ = nullptr;
  }
  ::memcpy(&active_sheet_index_, &from.active_sheet_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&inspector_pane_visible_) -
    reinterpret_cast<char*>(&active_sheet_index_)) + sizeof(inspector_pane_visible_));
  // @@protoc_insertion_point(copy_constructor:TN.UIStateArchive)
}

void UIStateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_selection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&editing_disabled_) -
    reinterpret_cast<char*>(&table_selection_)) + sizeof(editing_disabled_));
inspector_pane_visible_ = true;
}

UIStateArchive::~UIStateArchive() {
  // @@protoc_insertion_point(destructor:TN.UIStateArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UIStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_selection_;
  if (this != internal_default_instance()) delete chart_selection_;
  if (this != internal_default_instance()) delete sheet_selection_;
  if (this != internal_default_instance()) delete desktop_window_origin_;
  if (this != internal_default_instance()) delete desktop_window_size_;
  if (this != internal_default_instance()) delete desktop_screen_size_;
  if (this != internal_default_instance()) delete selection_path_;
  if (this != internal_default_instance()) delete freehand_drawing_toolkit_state_;
  if (this != internal_default_instance()) delete selection_path_transformer_;
}

void UIStateArchive::ArenaDtor(void* object) {
  UIStateArchive* _this = reinterpret_cast< UIStateArchive* >(object);
  (void)_this;
}
void UIStateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UIStateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UIStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.UIStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_info_.Clear();
  sheet_uistate_dictionary_entry_.Clear();
  edit_mode_sheet_uistate_dictionary_entry_.Clear();
  selected_quick_calc_functions_.Clear();
  chart_ui_state_.Clear();
  uuid_sheet_uistate_dictionary_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_selection_ != nullptr);
      table_selection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chart_selection_ != nullptr);
      chart_selection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sheet_selection_ != nullptr);
      sheet_selection_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(desktop_window_origin_ != nullptr);
      desktop_window_origin_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(desktop_window_size_ != nullptr);
      desktop_window_size_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(desktop_screen_size_ != nullptr);
      desktop_screen_size_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(selection_path_ != nullptr);
      selection_path_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(freehand_drawing_toolkit_state_ != nullptr);
      freehand_drawing_toolkit_state_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(selection_path_transformer_ != nullptr);
    selection_path_transformer_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&active_sheet_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inspector_pane_view_mode_) -
        reinterpret_cast<char*>(&active_sheet_index_)) + sizeof(inspector_pane_view_mode_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&in_chart_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&editing_disabled_) -
        reinterpret_cast<char*>(&in_chart_mode_)) + sizeof(editing_disabled_));
  }
  inspector_pane_visible_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIStateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 active_sheet_index = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_active_sheet_index(&has_bits);
          active_sheet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference selected_info = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selected_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheet_uistate_dictionary_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TST.SelectionArchive table_selection = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 editing_sheet_index = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_editing_sheet_index(&has_bits);
          editing_sheet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 document_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_document_mode(&has_bits);
          document_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edit_mode_sheet_uistate_dictionary_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 table_editing_mode = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_table_editing_mode(&has_bits);
          table_editing_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 form_focused_record_index = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_form_focused_record_index(&has_bits);
          form_focused_record_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 form_focused_field_index = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_form_focused_field_index(&has_bits);
          form_focused_field_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_chart_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_in_chart_mode(&has_bits);
          in_chart_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.ChartSelectionArchive chart_selection = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference sheet_selection = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inspector_pane_visible = 14 [default = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_inspector_pane_visible(&has_bits);
          inspector_pane_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TN::UIStateArchive_InspectorPaneViewMode_IsValid(val))) {
            _internal_set_inspector_pane_view_mode(static_cast<::TN::UIStateArchive_InspectorPaneViewMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 selected_quick_calc_functions = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_selected_quick_calc_functions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_selected_quick_calc_functions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool removed_all_quick_calc_functions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_removed_all_quick_calc_functions(&has_bits);
          removed_all_quick_calc_functions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_canvas_guides = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_show_canvas_guides(&has_bits);
          show_canvas_guides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shows_comments = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_shows_comments(&has_bits);
          shows_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point desktop_window_origin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_window_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size desktop_window_size = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_window_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size desktop_screen_size = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_screen_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.ChartUIState chart_ui_state = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chart_ui_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive selection_path = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inspector_pane_autohidden = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_inspector_pane_autohidden(&has_bits);
          inspector_pane_autohidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shows_sidebar = 26 [deprecated = true];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_shows_sidebar(&has_bits);
          shows_sidebar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shows_rulers = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_shows_rulers(&has_bits);
          shows_rulers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TN.UUIDSheetUIStateDictionaryArchive uuid_sheet_uistate_dictionary = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_uuid_sheet_uistate_dictionary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference freehand_drawing_toolkit_state = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_freehand_drawing_toolkit_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference selection_path_transformer = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_path_transformer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool editing_disabled = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_editing_disabled(&has_bits);
          editing_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UIStateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.UIStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 active_sheet_index = 1 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_active_sheet_index(), target);
  }

  // repeated .TSP.Reference selected_info = 2 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selected_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_selected_info(i), target, stream);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sheet_uistate_dictionary_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sheet_uistate_dictionary_entry(i), target, stream);
  }

  // optional .TST.SelectionArchive table_selection = 4 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::table_selection(this), target, stream);
  }

  // optional uint32 editing_sheet_index = 5 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_editing_sheet_index(), target);
  }

  // optional int32 document_mode = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_document_mode(), target);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edit_mode_sheet_uistate_dictionary_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_edit_mode_sheet_uistate_dictionary_entry(i), target, stream);
  }

  // optional int32 table_editing_mode = 8 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_table_editing_mode(), target);
  }

  // optional uint32 form_focused_record_index = 9 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_form_focused_record_index(), target);
  }

  // optional uint32 form_focused_field_index = 10 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_form_focused_field_index(), target);
  }

  // optional bool in_chart_mode = 11;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_in_chart_mode(), target);
  }

  // optional .TN.ChartSelectionArchive chart_selection = 12 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::chart_selection(this), target, stream);
  }

  // optional .TSP.Reference sheet_selection = 13 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sheet_selection(this), target, stream);
  }

  // optional bool inspector_pane_visible = 14 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_inspector_pane_visible(), target);
  }

  // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_inspector_pane_view_mode(), target);
  }

  // repeated uint32 selected_quick_calc_functions = 16;
  for (int i = 0, n = this->_internal_selected_quick_calc_functions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_selected_quick_calc_functions(i), target);
  }

  // optional bool removed_all_quick_calc_functions = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_removed_all_quick_calc_functions(), target);
  }

  // optional bool show_canvas_guides = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_show_canvas_guides(), target);
  }

  // optional bool shows_comments = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_shows_comments(), target);
  }

  // optional .TSP.Point desktop_window_origin = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::desktop_window_origin(this), target, stream);
  }

  // optional .TSP.Size desktop_window_size = 21;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::desktop_window_size(this), target, stream);
  }

  // optional .TSP.Size desktop_screen_size = 22;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::desktop_screen_size(this), target, stream);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chart_ui_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_chart_ui_state(i), target, stream);
  }

  // optional .TSK.SelectionPathArchive selection_path = 24;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::selection_path(this), target, stream);
  }

  // optional bool inspector_pane_autohidden = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_inspector_pane_autohidden(), target);
  }

  // optional bool shows_sidebar = 26 [deprecated = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_shows_sidebar(), target);
  }

  // optional bool shows_rulers = 27;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_shows_rulers(), target);
  }

  // repeated .TN.UUIDSheetUIStateDictionaryArchive uuid_sheet_uistate_dictionary = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uuid_sheet_uistate_dictionary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_uuid_sheet_uistate_dictionary(i), target, stream);
  }

  // optional .TSP.Reference freehand_drawing_toolkit_state = 29;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::freehand_drawing_toolkit_state(this), target, stream);
  }

  // optional .TSP.Reference selection_path_transformer = 30;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::selection_path_transformer(this), target, stream);
  }

  // optional bool editing_disabled = 31;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_editing_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.UIStateArchive)
  return target;
}

size_t UIStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.UIStateArchive)
  size_t total_size = 0;

  // required uint32 active_sheet_index = 1 [deprecated = true];
  if (_internal_has_active_sheet_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active_sheet_index());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference selected_info = 2 [deprecated = true];
  total_size += 1UL * this->_internal_selected_info_size();
  for (const auto& msg : this->selected_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive sheet_uistate_dictionary_entry = 3 [deprecated = true];
  total_size += 1UL * this->_internal_sheet_uistate_dictionary_entry_size();
  for (const auto& msg : this->sheet_uistate_dictionary_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TN.SheetUIStateDictionaryEntryArchive edit_mode_sheet_uistate_dictionary_entry = 7 [deprecated = true];
  total_size += 1UL * this->_internal_edit_mode_sheet_uistate_dictionary_entry_size();
  for (const auto& msg : this->edit_mode_sheet_uistate_dictionary_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 selected_quick_calc_functions = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->selected_quick_calc_functions_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_selected_quick_calc_functions_size());
    total_size += data_size;
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 23;
  total_size += 2UL * this->_internal_chart_ui_state_size();
  for (const auto& msg : this->chart_ui_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TN.UUIDSheetUIStateDictionaryArchive uuid_sheet_uistate_dictionary = 28;
  total_size += 2UL * this->_internal_uuid_sheet_uistate_dictionary_size();
  for (const auto& msg : this->uuid_sheet_uistate_dictionary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TST.SelectionArchive table_selection = 4 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_selection_);
    }

    // optional .TN.ChartSelectionArchive chart_selection = 12 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_selection_);
    }

    // optional .TSP.Reference sheet_selection = 13 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sheet_selection_);
    }

    // optional .TSP.Point desktop_window_origin = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desktop_window_origin_);
    }

    // optional .TSP.Size desktop_window_size = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desktop_window_size_);
    }

    // optional .TSP.Size desktop_screen_size = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desktop_screen_size_);
    }

    // optional .TSK.SelectionPathArchive selection_path = 24;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_path_);
    }

    // optional .TSP.Reference freehand_drawing_toolkit_state = 29;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *freehand_drawing_toolkit_state_);
    }

  }
  // optional .TSP.Reference selection_path_transformer = 30;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selection_path_transformer_);
  }

  if (cached_has_bits & 0x0000fc00u) {
    // optional uint32 editing_sheet_index = 5 [deprecated = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_editing_sheet_index());
    }

    // optional int32 document_mode = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_document_mode());
    }

    // optional int32 table_editing_mode = 8 [deprecated = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_table_editing_mode());
    }

    // optional uint32 form_focused_record_index = 9 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_form_focused_record_index());
    }

    // optional uint32 form_focused_field_index = 10 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_form_focused_field_index());
    }

    // optional .TN.UIStateArchive.InspectorPaneViewMode inspector_pane_view_mode = 15 [default = kInspectorPaneViewModeFormat];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inspector_pane_view_mode());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool in_chart_mode = 11;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool removed_all_quick_calc_functions = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool show_canvas_guides = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool shows_comments = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool inspector_pane_autohidden = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool shows_sidebar = 26 [deprecated = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool shows_rulers = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool editing_disabled = 31;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  // optional bool inspector_pane_visible = 14 [default = true];
  if (cached_has_bits & 0x01000000u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UIStateArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.UIStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UIStateArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UIStateArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.UIStateArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.UIStateArchive)
    MergeFrom(*source);
  }
}

void UIStateArchive::MergeFrom(const UIStateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.UIStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selected_info_.MergeFrom(from.selected_info_);
  sheet_uistate_dictionary_entry_.MergeFrom(from.sheet_uistate_dictionary_entry_);
  edit_mode_sheet_uistate_dictionary_entry_.MergeFrom(from.edit_mode_sheet_uistate_dictionary_entry_);
  selected_quick_calc_functions_.MergeFrom(from.selected_quick_calc_functions_);
  chart_ui_state_.MergeFrom(from.chart_ui_state_);
  uuid_sheet_uistate_dictionary_.MergeFrom(from.uuid_sheet_uistate_dictionary_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_selection()->::TST::SelectionArchive::MergeFrom(from._internal_table_selection());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chart_selection()->::TN::ChartSelectionArchive::MergeFrom(from._internal_chart_selection());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sheet_selection()->::TSP::Reference::MergeFrom(from._internal_sheet_selection());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_desktop_window_origin()->::TSP::Point::MergeFrom(from._internal_desktop_window_origin());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_desktop_window_size()->::TSP::Size::MergeFrom(from._internal_desktop_window_size());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_desktop_screen_size()->::TSP::Size::MergeFrom(from._internal_desktop_screen_size());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_selection_path()->::TSK::SelectionPathArchive::MergeFrom(from._internal_selection_path());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_freehand_drawing_toolkit_state()->::TSP::Reference::MergeFrom(from._internal_freehand_drawing_toolkit_state());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_selection_path_transformer()->::TSP::Reference::MergeFrom(from._internal_selection_path_transformer());
    }
    if (cached_has_bits & 0x00000200u) {
      active_sheet_index_ = from.active_sheet_index_;
    }
    if (cached_has_bits & 0x00000400u) {
      editing_sheet_index_ = from.editing_sheet_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      document_mode_ = from.document_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      table_editing_mode_ = from.table_editing_mode_;
    }
    if (cached_has_bits & 0x00002000u) {
      form_focused_record_index_ = from.form_focused_record_index_;
    }
    if (cached_has_bits & 0x00004000u) {
      form_focused_field_index_ = from.form_focused_field_index_;
    }
    if (cached_has_bits & 0x00008000u) {
      inspector_pane_view_mode_ = from.inspector_pane_view_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      in_chart_mode_ = from.in_chart_mode_;
    }
    if (cached_has_bits & 0x00020000u) {
      removed_all_quick_calc_functions_ = from.removed_all_quick_calc_functions_;
    }
    if (cached_has_bits & 0x00040000u) {
      show_canvas_guides_ = from.show_canvas_guides_;
    }
    if (cached_has_bits & 0x00080000u) {
      shows_comments_ = from.shows_comments_;
    }
    if (cached_has_bits & 0x00100000u) {
      inspector_pane_autohidden_ = from.inspector_pane_autohidden_;
    }
    if (cached_has_bits & 0x00200000u) {
      shows_sidebar_ = from.shows_sidebar_;
    }
    if (cached_has_bits & 0x00400000u) {
      shows_rulers_ = from.shows_rulers_;
    }
    if (cached_has_bits & 0x00800000u) {
      editing_disabled_ = from.editing_disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_inspector_pane_visible(from._internal_inspector_pane_visible());
  }
}

void UIStateArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.UIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIStateArchive::CopyFrom(const UIStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.UIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(selected_info_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sheet_uistate_dictionary_entry_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(edit_mode_sheet_uistate_dictionary_entry_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chart_ui_state_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uuid_sheet_uistate_dictionary_)) return false;
  if (_internal_has_table_selection()) {
    if (!table_selection_->IsInitialized()) return false;
  }
  if (_internal_has_chart_selection()) {
    if (!chart_selection_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_selection()) {
    if (!sheet_selection_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_window_origin()) {
    if (!desktop_window_origin_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_window_size()) {
    if (!desktop_window_size_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_screen_size()) {
    if (!desktop_screen_size_->IsInitialized()) return false;
  }
  if (_internal_has_selection_path()) {
    if (!selection_path_->IsInitialized()) return false;
  }
  if (_internal_has_freehand_drawing_toolkit_state()) {
    if (!freehand_drawing_toolkit_state_->IsInitialized()) return false;
  }
  if (_internal_has_selection_path_transformer()) {
    if (!selection_path_transformer_->IsInitialized()) return false;
  }
  return true;
}

void UIStateArchive::InternalSwap(UIStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  selected_info_.InternalSwap(&other->selected_info_);
  sheet_uistate_dictionary_entry_.InternalSwap(&other->sheet_uistate_dictionary_entry_);
  edit_mode_sheet_uistate_dictionary_entry_.InternalSwap(&other->edit_mode_sheet_uistate_dictionary_entry_);
  selected_quick_calc_functions_.InternalSwap(&other->selected_quick_calc_functions_);
  chart_ui_state_.InternalSwap(&other->chart_ui_state_);
  uuid_sheet_uistate_dictionary_.InternalSwap(&other->uuid_sheet_uistate_dictionary_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIStateArchive, editing_disabled_)
      + sizeof(UIStateArchive::editing_disabled_)
      - PROTOBUF_FIELD_OFFSET(UIStateArchive, table_selection_)>(
          reinterpret_cast<char*>(&table_selection_),
          reinterpret_cast<char*>(&other->table_selection_));
  swap(inspector_pane_visible_, other->inspector_pane_visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UIStateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[3]);
}

// ===================================================================

class SheetSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetSelectionArchive>()._has_bits_);
  static const ::TSP::Reference& sheet(const SheetSelectionArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paginated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
SheetSelectionArchive::_Internal::sheet(const SheetSelectionArchive* msg) {
  return *msg->sheet_;
}
void SheetSelectionArchive::clear_sheet() {
  if (sheet_ != nullptr) sheet_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SheetSelectionArchive::SheetSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.SheetSelectionArchive)
}
SheetSelectionArchive::SheetSelectionArchive(const SheetSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    sheet_ = new ::TSP::Reference(*from.sheet_);
  } else {
    sheet_ = nullptr;
  }
  paginated_ = from.paginated_;
  // @@protoc_insertion_point(copy_constructor:TN.SheetSelectionArchive)
}

void SheetSelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&paginated_) -
    reinterpret_cast<char*>(&sheet_)) + sizeof(paginated_));
}

SheetSelectionArchive::~SheetSelectionArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_;
}

void SheetSelectionArchive::ArenaDtor(void* object) {
  SheetSelectionArchive* _this = reinterpret_cast< SheetSelectionArchive* >(object);
  (void)_this;
}
void SheetSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SheetSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sheet_ != nullptr);
    sheet_->Clear();
  }
  paginated_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference sheet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool paginated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_paginated(&has_bits);
          paginated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference sheet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sheet(this), target, stream);
  }

  // optional bool paginated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_paginated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetSelectionArchive)
  return target;
}

size_t SheetSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference sheet = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sheet_);
    }

    // optional bool paginated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.SheetSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.SheetSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.SheetSelectionArchive)
    MergeFrom(*source);
  }
}

void SheetSelectionArchive::MergeFrom(const SheetSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet()->::TSP::Reference::MergeFrom(from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      paginated_ = from.paginated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SheetSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.SheetSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetSelectionArchive::CopyFrom(const SheetSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetSelectionArchive::IsInitialized() const {
  if (_internal_has_sheet()) {
    if (!sheet_->IsInitialized()) return false;
  }
  return true;
}

void SheetSelectionArchive::InternalSwap(SheetSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SheetSelectionArchive, paginated_)
      + sizeof(SheetSelectionArchive::paginated_)
      - PROTOBUF_FIELD_OFFSET(SheetSelectionArchive, sheet_)>(
          reinterpret_cast<char*>(&sheet_),
          reinterpret_cast<char*>(&other->sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[4]);
}

// ===================================================================

class FormSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormSelectionArchive>()._has_bits_);
  static void set_has_record_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FormSelectionArchive::FormSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.FormSelectionArchive)
}
FormSelectionArchive::FormSelectionArchive(const FormSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&record_index_, &from.record_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_index_) -
    reinterpret_cast<char*>(&record_index_)) + sizeof(field_index_));
  // @@protoc_insertion_point(copy_constructor:TN.FormSelectionArchive)
}

void FormSelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&record_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field_index_) -
    reinterpret_cast<char*>(&record_index_)) + sizeof(field_index_));
}

FormSelectionArchive::~FormSelectionArchive() {
  // @@protoc_insertion_point(destructor:TN.FormSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FormSelectionArchive::ArenaDtor(void* object) {
  FormSelectionArchive* _this = reinterpret_cast< FormSelectionArchive* >(object);
  (void)_this;
}
void FormSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.FormSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&record_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_index_) -
        reinterpret_cast<char*>(&record_index_)) + sizeof(field_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 record_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_record_index(&has_bits);
          record_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 field_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_field_index(&has_bits);
          field_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.FormSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 record_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_record_index(), target);
  }

  // required uint32 field_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_field_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.FormSelectionArchive)
  return target;
}

size_t FormSelectionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.FormSelectionArchive)
  size_t total_size = 0;

  if (_internal_has_record_index()) {
    // required uint32 record_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_index());
  }

  if (_internal_has_field_index()) {
    // required uint32 field_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_field_index());
  }

  return total_size;
}
size_t FormSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.FormSelectionArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 record_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_index());

    // required uint32 field_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_field_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.FormSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.FormSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.FormSelectionArchive)
    MergeFrom(*source);
  }
}

void FormSelectionArchive::MergeFrom(const FormSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.FormSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      record_index_ = from.record_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_index_ = from.field_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FormSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.FormSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormSelectionArchive::CopyFrom(const FormSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.FormSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormSelectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FormSelectionArchive::InternalSwap(FormSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormSelectionArchive, field_index_)
      + sizeof(FormSelectionArchive::field_index_)
      - PROTOBUF_FIELD_OFFSET(FormSelectionArchive, record_index_)>(
          reinterpret_cast<char*>(&record_index_),
          reinterpret_cast<char*>(&other->record_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[5]);
}

// ===================================================================

class FormBuilderSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormBuilderSelectionArchive>()._has_bits_);
  static void set_has_viewing_record_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FormBuilderSelectionArchive::FormBuilderSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.FormBuilderSelectionArchive)
}
FormBuilderSelectionArchive::FormBuilderSelectionArchive(const FormBuilderSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  viewing_record_index_ = from.viewing_record_index_;
  // @@protoc_insertion_point(copy_constructor:TN.FormBuilderSelectionArchive)
}

void FormBuilderSelectionArchive::SharedCtor() {
viewing_record_index_ = 0u;
}

FormBuilderSelectionArchive::~FormBuilderSelectionArchive() {
  // @@protoc_insertion_point(destructor:TN.FormBuilderSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormBuilderSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FormBuilderSelectionArchive::ArenaDtor(void* object) {
  FormBuilderSelectionArchive* _this = reinterpret_cast< FormBuilderSelectionArchive* >(object);
  (void)_this;
}
void FormBuilderSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormBuilderSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormBuilderSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.FormBuilderSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  viewing_record_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormBuilderSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 viewing_record_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_viewing_record_index(&has_bits);
          viewing_record_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormBuilderSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.FormBuilderSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 viewing_record_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_viewing_record_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.FormBuilderSelectionArchive)
  return target;
}

size_t FormBuilderSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.FormBuilderSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 viewing_record_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_viewing_record_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormBuilderSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.FormBuilderSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormBuilderSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormBuilderSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.FormBuilderSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.FormBuilderSelectionArchive)
    MergeFrom(*source);
  }
}

void FormBuilderSelectionArchive::MergeFrom(const FormBuilderSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.FormBuilderSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_viewing_record_index()) {
    _internal_set_viewing_record_index(from._internal_viewing_record_index());
  }
}

void FormBuilderSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.FormBuilderSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormBuilderSelectionArchive::CopyFrom(const FormBuilderSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.FormBuilderSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormBuilderSelectionArchive::IsInitialized() const {
  return true;
}

void FormBuilderSelectionArchive::InternalSwap(FormBuilderSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(viewing_record_index_, other->viewing_record_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormBuilderSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[6]);
}

// ===================================================================

class FormTableChooserSelectionArchive::_Internal {
 public:
};

FormTableChooserSelectionArchive::FormTableChooserSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.FormTableChooserSelectionArchive)
}
FormTableChooserSelectionArchive::FormTableChooserSelectionArchive(const FormTableChooserSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TN.FormTableChooserSelectionArchive)
}

void FormTableChooserSelectionArchive::SharedCtor() {
}

FormTableChooserSelectionArchive::~FormTableChooserSelectionArchive() {
  // @@protoc_insertion_point(destructor:TN.FormTableChooserSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormTableChooserSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FormTableChooserSelectionArchive::ArenaDtor(void* object) {
  FormTableChooserSelectionArchive* _this = reinterpret_cast< FormTableChooserSelectionArchive* >(object);
  (void)_this;
}
void FormTableChooserSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormTableChooserSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormTableChooserSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.FormTableChooserSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormTableChooserSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormTableChooserSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.FormTableChooserSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.FormTableChooserSelectionArchive)
  return target;
}

size_t FormTableChooserSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.FormTableChooserSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormTableChooserSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.FormTableChooserSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormTableChooserSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormTableChooserSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.FormTableChooserSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.FormTableChooserSelectionArchive)
    MergeFrom(*source);
  }
}

void FormTableChooserSelectionArchive::MergeFrom(const FormTableChooserSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.FormTableChooserSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FormTableChooserSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.FormTableChooserSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormTableChooserSelectionArchive::CopyFrom(const FormTableChooserSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.FormTableChooserSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormTableChooserSelectionArchive::IsInitialized() const {
  return true;
}

void FormTableChooserSelectionArchive::InternalSwap(FormTableChooserSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormTableChooserSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[7]);
}

// ===================================================================

class UndoRedoStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoRedoStateArchive>()._has_bits_);
  static const ::TN::UIStateArchive& ui_state(const UndoRedoStateArchive* msg);
  static void set_has_ui_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TN::UIStateArchive&
UndoRedoStateArchive::_Internal::ui_state(const UndoRedoStateArchive* msg) {
  return *msg->ui_state_;
}
UndoRedoStateArchive::UndoRedoStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.UndoRedoStateArchive)
}
UndoRedoStateArchive::UndoRedoStateArchive(const UndoRedoStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ui_state()) {
    ui_state_ = new ::TN::UIStateArchive(*from.ui_state_);
  } else {
    ui_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.UndoRedoStateArchive)
}

void UndoRedoStateArchive::SharedCtor() {
ui_state_ = nullptr;
}

UndoRedoStateArchive::~UndoRedoStateArchive() {
  // @@protoc_insertion_point(destructor:TN.UndoRedoStateArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UndoRedoStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ui_state_;
}

void UndoRedoStateArchive::ArenaDtor(void* object) {
  UndoRedoStateArchive* _this = reinterpret_cast< UndoRedoStateArchive* >(object);
  (void)_this;
}
void UndoRedoStateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoRedoStateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoRedoStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.UndoRedoStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ui_state_ != nullptr);
    ui_state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoRedoStateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TN.UIStateArchive ui_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ui_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoRedoStateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.UndoRedoStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TN.UIStateArchive ui_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ui_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.UndoRedoStateArchive)
  return target;
}

size_t UndoRedoStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.UndoRedoStateArchive)
  size_t total_size = 0;

  // required .TN.UIStateArchive ui_state = 1;
  if (_internal_has_ui_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ui_state_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UndoRedoStateArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.UndoRedoStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UndoRedoStateArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UndoRedoStateArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.UndoRedoStateArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.UndoRedoStateArchive)
    MergeFrom(*source);
  }
}

void UndoRedoStateArchive::MergeFrom(const UndoRedoStateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.UndoRedoStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ui_state()) {
    _internal_mutable_ui_state()->::TN::UIStateArchive::MergeFrom(from._internal_ui_state());
  }
}

void UndoRedoStateArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.UndoRedoStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoRedoStateArchive::CopyFrom(const UndoRedoStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.UndoRedoStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoRedoStateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_ui_state()) {
    if (!ui_state_->IsInitialized()) return false;
  }
  return true;
}

void UndoRedoStateArchive::InternalSwap(UndoRedoStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ui_state_, other->ui_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoRedoStateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[8]);
}

// ===================================================================

class DocumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentArchive>()._has_bits_);
  static const ::TSA::DocumentArchive& super(const DocumentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& calculation_engine(const DocumentArchive* msg);
  static void set_has_calculation_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& stylesheet(const DocumentArchive* msg);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& sidebar_order(const DocumentArchive* msg);
  static void set_has_sidebar_order(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& theme(const DocumentArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TN::UIStateArchive& uistate(const DocumentArchive* msg);
  static void set_has_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& custom_format_list(const DocumentArchive* msg);
  static void set_has_custom_format_list(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_printer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paper_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& page_size(const DocumentArchive* msg);
  static void set_has_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000b8) ^ 0x000000b8) != 0;
  }
};

const ::TSA::DocumentArchive&
DocumentArchive::_Internal::super(const DocumentArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::calculation_engine(const DocumentArchive* msg) {
  return *msg->calculation_engine_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::stylesheet(const DocumentArchive* msg) {
  return *msg->stylesheet_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::sidebar_order(const DocumentArchive* msg) {
  return *msg->sidebar_order_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::theme(const DocumentArchive* msg) {
  return *msg->theme_;
}
const ::TN::UIStateArchive&
DocumentArchive::_Internal::uistate(const DocumentArchive* msg) {
  return *msg->uistate_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::custom_format_list(const DocumentArchive* msg) {
  return *msg->custom_format_list_;
}
const ::TSP::Size&
DocumentArchive::_Internal::page_size(const DocumentArchive* msg) {
  return *msg->page_size_;
}
void DocumentArchive::clear_sheets() {
  sheets_.Clear();
}
void DocumentArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void DocumentArchive::clear_calculation_engine() {
  if (calculation_engine_ != nullptr) calculation_engine_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentArchive::clear_stylesheet() {
  if (stylesheet_ != nullptr) stylesheet_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentArchive::clear_sidebar_order() {
  if (sidebar_order_ != nullptr) sidebar_order_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentArchive::clear_theme() {
  if (theme_ != nullptr) theme_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void DocumentArchive::clear_custom_format_list() {
  if (custom_format_list_ != nullptr) custom_format_list_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void DocumentArchive::clear_page_size() {
  if (page_size_ != nullptr) page_size_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
DocumentArchive::DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sheets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.DocumentArchive)
}
DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sheets_(from.sheets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  printer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_printer_id()) {
    printer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_printer_id(), 
      GetArena());
  }
  paper_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paper_id()) {
    paper_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_paper_id(), 
      GetArena());
  }
  if (from._internal_has_calculation_engine()) {
    calculation_engine_ = new ::TSP::Reference(*from.calculation_engine_);
  } else {
    calculation_engine_ = nullptr;
  }
  if (from._internal_has_stylesheet()) {
    stylesheet_ = new ::TSP::Reference(*from.stylesheet_);
  } else {
    stylesheet_ = nullptr;
  }
  if (from._internal_has_sidebar_order()) {
    sidebar_order_ = new ::TSP::Reference(*from.sidebar_order_);
  } else {
    sidebar_order_ = nullptr;
  }
  if (from._internal_has_theme()) {
    theme_ = new ::TSP::Reference(*from.theme_);
  } else {
    theme_ = nullptr;
  }
  if (from._internal_has_uistate()) {
    uistate_ = new ::TN::UIStateArchive(*from.uistate_);
  } else {
    uistate_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSA::DocumentArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_custom_format_list()) {
    custom_format_list_ = new ::TSP::Reference(*from.custom_format_list_);
  } else {
    custom_format_list_ = nullptr;
  }
  if (from._internal_has_page_size()) {
    page_size_ = new ::TSP::Size(*from.page_size_);
  } else {
    page_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.DocumentArchive)
}

void DocumentArchive::SharedCtor() {
printer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
paper_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&calculation_engine_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&calculation_engine_)) + sizeof(page_size_));
}

DocumentArchive::~DocumentArchive() {
  // @@protoc_insertion_point(destructor:TN.DocumentArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DocumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  printer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paper_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete calculation_engine_;
  if (this != internal_default_instance()) delete stylesheet_;
  if (this != internal_default_instance()) delete sidebar_order_;
  if (this != internal_default_instance()) delete theme_;
  if (this != internal_default_instance()) delete uistate_;
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete custom_format_list_;
  if (this != internal_default_instance()) delete page_size_;
}

void DocumentArchive::ArenaDtor(void* object) {
  DocumentArchive* _this = reinterpret_cast< DocumentArchive* >(object);
  (void)_this;
}
void DocumentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.DocumentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sheets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      printer_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      paper_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(calculation_engine_ != nullptr);
      calculation_engine_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stylesheet_ != nullptr);
      stylesheet_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sidebar_order_ != nullptr);
      sidebar_order_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(theme_ != nullptr);
      theme_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(uistate_ != nullptr);
      uistate_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(custom_format_list_ != nullptr);
      custom_format_list_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(page_size_ != nullptr);
      page_size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference sheets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_calculation_engine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference stylesheet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference sidebar_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sidebar_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.UIStateArchive uistate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_uistate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSA.DocumentArchive super = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference custom_format_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_format_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string printer_id = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_printer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TN.DocumentArchive.printer_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paper_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_paper_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TN.DocumentArchive.paper_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size page_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.DocumentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference sheets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sheets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sheets(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::calculation_engine(this), target, stream);
  }

  // required .TSP.Reference stylesheet = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stylesheet(this), target, stream);
  }

  // required .TSP.Reference sidebar_order = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sidebar_order(this), target, stream);
  }

  // required .TSP.Reference theme = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::theme(this), target, stream);
  }

  // optional .TN.UIStateArchive uistate = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::uistate(this), target, stream);
  }

  // required .TSA.DocumentArchive super = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference custom_format_list = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::custom_format_list(this), target, stream);
  }

  // optional string printer_id = 10 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_printer_id().data(), static_cast<int>(this->_internal_printer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.DocumentArchive.printer_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_printer_id(), target);
  }

  // optional string paper_id = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paper_id().data(), static_cast<int>(this->_internal_paper_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.DocumentArchive.paper_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_paper_id(), target);
  }

  // optional .TSP.Size page_size = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::page_size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.DocumentArchive)
  return target;
}

size_t DocumentArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.DocumentArchive)
  size_t total_size = 0;

  if (_internal_has_stylesheet()) {
    // required .TSP.Reference stylesheet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stylesheet_);
  }

  if (_internal_has_sidebar_order()) {
    // required .TSP.Reference sidebar_order = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sidebar_order_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);
  }

  if (_internal_has_super()) {
    // required .TSA.DocumentArchive super = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t DocumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.DocumentArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000b8) ^ 0x000000b8) == 0) {  // All required fields are present.
    // required .TSP.Reference stylesheet = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stylesheet_);

    // required .TSP.Reference sidebar_order = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sidebar_order_);

    // required .TSP.Reference theme = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);

    // required .TSA.DocumentArchive super = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference sheets = 1;
  total_size += 1UL * this->_internal_sheets_size();
  for (const auto& msg : this->sheets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string printer_id = 10 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_printer_id());
    }

    // optional string paper_id = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paper_id());
    }

    // optional .TSP.Reference calculation_engine = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *calculation_engine_);
    }

  }
  // optional .TN.UIStateArchive uistate = 7;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uistate_);
  }

  if (cached_has_bits & 0x00000300u) {
    // optional .TSP.Reference custom_format_list = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_format_list_);
    }

    // optional .TSP.Size page_size = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *page_size_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DocumentArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.DocumentArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.DocumentArchive)
    MergeFrom(*source);
  }
}

void DocumentArchive::MergeFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sheets_.MergeFrom(from.sheets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_printer_id(from._internal_printer_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_paper_id(from._internal_paper_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_calculation_engine()->::TSP::Reference::MergeFrom(from._internal_calculation_engine());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stylesheet()->::TSP::Reference::MergeFrom(from._internal_stylesheet());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_sidebar_order()->::TSP::Reference::MergeFrom(from._internal_sidebar_order());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_theme()->::TSP::Reference::MergeFrom(from._internal_theme());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_uistate()->::TN::UIStateArchive::MergeFrom(from._internal_uistate());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_super()->::TSA::DocumentArchive::MergeFrom(from._internal_super());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_custom_format_list()->::TSP::Reference::MergeFrom(from._internal_custom_format_list());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_page_size()->::TSP::Size::MergeFrom(from._internal_page_size());
    }
  }
}

void DocumentArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sheets_)) return false;
  if (_internal_has_calculation_engine()) {
    if (!calculation_engine_->IsInitialized()) return false;
  }
  if (_internal_has_stylesheet()) {
    if (!stylesheet_->IsInitialized()) return false;
  }
  if (_internal_has_sidebar_order()) {
    if (!sidebar_order_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!theme_->IsInitialized()) return false;
  }
  if (_internal_has_uistate()) {
    if (!uistate_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_custom_format_list()) {
    if (!custom_format_list_->IsInitialized()) return false;
  }
  if (_internal_has_page_size()) {
    if (!page_size_->IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::InternalSwap(DocumentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sheets_.InternalSwap(&other->sheets_);
  printer_id_.Swap(&other->printer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paper_id_.Swap(&other->paper_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentArchive, page_size_)
      + sizeof(DocumentArchive::page_size_)
      - PROTOBUF_FIELD_OFFSET(DocumentArchive, calculation_engine_)>(
          reinterpret_cast<char*>(&calculation_engine_),
          reinterpret_cast<char*>(&other->calculation_engine_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[9]);
}

// ===================================================================

class PlaceholderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaceholderArchive>()._has_bits_);
  static const ::TSWP::ShapeInfoArchive& super(const PlaceholderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ShapeInfoArchive&
PlaceholderArchive::_Internal::super(const PlaceholderArchive* msg) {
  return *msg->super_;
}
void PlaceholderArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PlaceholderArchive::PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.PlaceholderArchive)
}
PlaceholderArchive::PlaceholderArchive(const PlaceholderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::ShapeInfoArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.PlaceholderArchive)
}

void PlaceholderArchive::SharedCtor() {
super_ = nullptr;
}

PlaceholderArchive::~PlaceholderArchive() {
  // @@protoc_insertion_point(destructor:TN.PlaceholderArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceholderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void PlaceholderArchive::ArenaDtor(void* object) {
  PlaceholderArchive* _this = reinterpret_cast< PlaceholderArchive* >(object);
  (void)_this;
}
void PlaceholderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceholderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceholderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.PlaceholderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceholderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceholderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.PlaceholderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.ShapeInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.PlaceholderArchive)
  return target;
}

size_t PlaceholderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.PlaceholderArchive)
  size_t total_size = 0;

  // required .TSWP.ShapeInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceholderArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.PlaceholderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceholderArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceholderArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.PlaceholderArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.PlaceholderArchive)
    MergeFrom(*source);
  }
}

void PlaceholderArchive::MergeFrom(const PlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.PlaceholderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(from._internal_super());
  }
}

void PlaceholderArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.PlaceholderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceholderArchive::CopyFrom(const PlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.PlaceholderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void PlaceholderArchive::InternalSwap(PlaceholderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[10]);
}

// ===================================================================

class SheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetArchive>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_portrait_page_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_show_repeating_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_show_page_numbers(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_autofit_on(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_content_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_page_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::EdgeInsetsArchive& print_margins(const SheetArchive* msg);
  static void set_has_print_margins(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_using_start_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_start_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_page_header_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_page_footer_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& header_storage(const SheetArchive* msg);
  static void set_has_header_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& footer_storage(const SheetArchive* msg);
  static void set_has_footer_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& userdefinedguidestorage(const SheetArchive* msg);
  static void set_has_userdefinedguidestorage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uses_single_header_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_layout_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::Reference& style(const SheetArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_print_backgrounds(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_should_print_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::EdgeInsetsArchive&
SheetArchive::_Internal::print_margins(const SheetArchive* msg) {
  return *msg->print_margins_;
}
const ::TSP::Reference&
SheetArchive::_Internal::header_storage(const SheetArchive* msg) {
  return *msg->header_storage_;
}
const ::TSP::Reference&
SheetArchive::_Internal::footer_storage(const SheetArchive* msg) {
  return *msg->footer_storage_;
}
const ::TSP::Reference&
SheetArchive::_Internal::userdefinedguidestorage(const SheetArchive* msg) {
  return *msg->userdefinedguidestorage_;
}
const ::TSP::Reference&
SheetArchive::_Internal::style(const SheetArchive* msg) {
  return *msg->style_;
}
void SheetArchive::clear_drawable_infos() {
  drawable_infos_.Clear();
}
void SheetArchive::clear_print_margins() {
  if (print_margins_ != nullptr) print_margins_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SheetArchive::clear_header_storage() {
  if (header_storage_ != nullptr) header_storage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SheetArchive::clear_footer_storage() {
  if (footer_storage_ != nullptr) footer_storage_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SheetArchive::clear_userdefinedguidestorage() {
  if (userdefinedguidestorage_ != nullptr) userdefinedguidestorage_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SheetArchive::clear_headers() {
  headers_.Clear();
}
void SheetArchive::clear_footers() {
  footers_.Clear();
}
void SheetArchive::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
SheetArchive::SheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drawable_infos_(arena),
  headers_(arena),
  footers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.SheetArchive)
}
SheetArchive::SheetArchive(const SheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawable_infos_(from.drawable_infos_),
      headers_(from.headers_),
      footers_(from.footers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_print_margins()) {
    print_margins_ = new ::TSD::EdgeInsetsArchive(*from.print_margins_);
  } else {
    print_margins_ = nullptr;
  }
  if (from._internal_has_header_storage()) {
    header_storage_ = new ::TSP::Reference(*from.header_storage_);
  } else {
    header_storage_ = nullptr;
  }
  if (from._internal_has_footer_storage()) {
    footer_storage_ = new ::TSP::Reference(*from.footer_storage_);
  } else {
    footer_storage_ = nullptr;
  }
  if (from._internal_has_userdefinedguidestorage()) {
    userdefinedguidestorage_ = new ::TSP::Reference(*from.userdefinedguidestorage_);
  } else {
    userdefinedguidestorage_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  ::memcpy(&in_portrait_page_orientation_, &from.in_portrait_page_orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&layout_direction_) -
    reinterpret_cast<char*>(&in_portrait_page_orientation_)) + sizeof(layout_direction_));
  // @@protoc_insertion_point(copy_constructor:TN.SheetArchive)
}

void SheetArchive::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&print_margins_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layout_direction_) -
    reinterpret_cast<char*>(&print_margins_)) + sizeof(layout_direction_));
}

SheetArchive::~SheetArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete print_margins_;
  if (this != internal_default_instance()) delete header_storage_;
  if (this != internal_default_instance()) delete footer_storage_;
  if (this != internal_default_instance()) delete userdefinedguidestorage_;
  if (this != internal_default_instance()) delete style_;
}

void SheetArchive::ArenaDtor(void* object) {
  SheetArchive* _this = reinterpret_cast< SheetArchive* >(object);
  (void)_this;
}
void SheetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawable_infos_.Clear();
  headers_.Clear();
  footers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(print_margins_ != nullptr);
      print_margins_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_storage_ != nullptr);
      header_storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(footer_storage_ != nullptr);
      footer_storage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(userdefinedguidestorage_ != nullptr);
      userdefinedguidestorage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&in_portrait_page_orientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_repeating_headers_) -
        reinterpret_cast<char*>(&in_portrait_page_orientation_)) + sizeof(show_repeating_headers_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&show_page_numbers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&using_start_page_number_) -
        reinterpret_cast<char*>(&show_page_numbers_)) + sizeof(using_start_page_number_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&uses_single_header_footer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&layout_direction_) -
        reinterpret_cast<char*>(&uses_single_header_footer_)) + sizeof(layout_direction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TN.SheetArchive.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawable_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool in_portrait_page_orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_in_portrait_page_orientation(&has_bits);
          in_portrait_page_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_repeating_headers = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_show_repeating_headers(&has_bits);
          show_repeating_headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_page_numbers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_show_page_numbers(&has_bits);
          show_page_numbers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_autofit_on = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_autofit_on(&has_bits);
          is_autofit_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float content_scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_content_scale(&has_bits);
          content_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TN.PageOrder page_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TN::PageOrder_IsValid(val))) {
            _internal_set_page_order(static_cast<::TN::PageOrder>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSD.EdgeInsetsArchive print_margins = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_print_margins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool using_start_page_number = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_using_start_page_number(&has_bits);
          using_start_page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_page_number = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_start_page_number(&has_bits);
          start_page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float page_header_inset = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_page_header_inset(&has_bits);
          page_header_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float page_footer_inset = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_page_footer_inset(&has_bits);
          page_footer_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference header_storage = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference footer_storage = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference userDefinedGuideStorage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_userdefinedguidestorage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference headers = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference footers = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_footers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool uses_single_header_footer = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_uses_single_header_footer(&has_bits);
          uses_single_header_footer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.PageLayoutDirection layout_direction = 21 [default = PageLayoutDirectionLeftToRight];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TN::PageLayoutDirection_IsValid(val))) {
            _internal_set_layout_direction(static_cast<::TN::PageLayoutDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool print_backgrounds = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_print_backgrounds(&has_bits);
          print_backgrounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_print_comments = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_should_print_comments(&has_bits);
          should_print_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.SheetArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .TSP.Reference drawable_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawable_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_drawable_infos(i), target, stream);
  }

  // optional bool in_portrait_page_orientation = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_in_portrait_page_orientation(), target);
  }

  // optional bool show_repeating_headers = 4 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_show_repeating_headers(), target);
  }

  // optional bool show_page_numbers = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_show_page_numbers(), target);
  }

  // optional bool is_autofit_on = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_autofit_on(), target);
  }

  // optional float content_scale = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_content_scale(), target);
  }

  // optional .TN.PageOrder page_order = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_page_order(), target);
  }

  // optional .TSD.EdgeInsetsArchive print_margins = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::print_margins(this), target, stream);
  }

  // optional bool using_start_page_number = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_using_start_page_number(), target);
  }

  // optional int32 start_page_number = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_start_page_number(), target);
  }

  // optional float page_header_inset = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_page_header_inset(), target);
  }

  // optional float page_footer_inset = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_page_footer_inset(), target);
  }

  // optional .TSP.Reference header_storage = 15 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::header_storage(this), target, stream);
  }

  // optional .TSP.Reference footer_storage = 16 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::footer_storage(this), target, stream);
  }

  // optional .TSP.Reference userDefinedGuideStorage = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::userdefinedguidestorage(this), target, stream);
  }

  // repeated .TSP.Reference headers = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_headers(i), target, stream);
  }

  // repeated .TSP.Reference footers = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_footers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_footers(i), target, stream);
  }

  // optional bool uses_single_header_footer = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_uses_single_header_footer(), target);
  }

  // optional .TN.PageLayoutDirection layout_direction = 21 [default = PageLayoutDirectionLeftToRight];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_layout_direction(), target);
  }

  // optional .TSP.Reference style = 22;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::style(this), target, stream);
  }

  // optional bool print_backgrounds = 23;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_print_backgrounds(), target);
  }

  // optional bool should_print_comments = 24;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_should_print_comments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetArchive)
  return target;
}

size_t SheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetArchive)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawable_infos = 2;
  total_size += 1UL * this->_internal_drawable_infos_size();
  for (const auto& msg : this->drawable_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference headers = 18;
  total_size += 2UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference footers = 19;
  total_size += 2UL * this->_internal_footers_size();
  for (const auto& msg : this->footers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.EdgeInsetsArchive print_margins = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *print_margins_);
    }

    // optional .TSP.Reference header_storage = 15 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_storage_);
    }

    // optional .TSP.Reference footer_storage = 16 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *footer_storage_);
    }

    // optional .TSP.Reference userDefinedGuideStorage = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *userdefinedguidestorage_);
    }

    // optional .TSP.Reference style = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_);
    }

    // optional bool in_portrait_page_orientation = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool show_repeating_headers = 4 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool show_page_numbers = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_autofit_on = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional float content_scale = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional .TN.PageOrder page_order = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page_order());
    }

    // optional int32 start_page_number = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_page_number());
    }

    // optional float page_header_inset = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float page_footer_inset = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional bool using_start_page_number = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool uses_single_header_footer = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool print_backgrounds = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool should_print_comments = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional .TN.PageLayoutDirection layout_direction = 21 [default = PageLayoutDirectionLeftToRight];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layout_direction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.SheetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.SheetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.SheetArchive)
    MergeFrom(*source);
  }
}

void SheetArchive::MergeFrom(const SheetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawable_infos_.MergeFrom(from.drawable_infos_);
  headers_.MergeFrom(from.headers_);
  footers_.MergeFrom(from.footers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_print_margins()->::TSD::EdgeInsetsArchive::MergeFrom(from._internal_print_margins());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_header_storage()->::TSP::Reference::MergeFrom(from._internal_header_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_footer_storage()->::TSP::Reference::MergeFrom(from._internal_footer_storage());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_userdefinedguidestorage()->::TSP::Reference::MergeFrom(from._internal_userdefinedguidestorage());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
    if (cached_has_bits & 0x00000040u) {
      in_portrait_page_orientation_ = from.in_portrait_page_orientation_;
    }
    if (cached_has_bits & 0x00000080u) {
      show_repeating_headers_ = from.show_repeating_headers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      show_page_numbers_ = from.show_page_numbers_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_autofit_on_ = from.is_autofit_on_;
    }
    if (cached_has_bits & 0x00000400u) {
      content_scale_ = from.content_scale_;
    }
    if (cached_has_bits & 0x00000800u) {
      page_order_ = from.page_order_;
    }
    if (cached_has_bits & 0x00001000u) {
      start_page_number_ = from.start_page_number_;
    }
    if (cached_has_bits & 0x00002000u) {
      page_header_inset_ = from.page_header_inset_;
    }
    if (cached_has_bits & 0x00004000u) {
      page_footer_inset_ = from.page_footer_inset_;
    }
    if (cached_has_bits & 0x00008000u) {
      using_start_page_number_ = from.using_start_page_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      uses_single_header_footer_ = from.uses_single_header_footer_;
    }
    if (cached_has_bits & 0x00020000u) {
      print_backgrounds_ = from.print_backgrounds_;
    }
    if (cached_has_bits & 0x00040000u) {
      should_print_comments_ = from.should_print_comments_;
    }
    if (cached_has_bits & 0x00080000u) {
      layout_direction_ = from.layout_direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SheetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.SheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetArchive::CopyFrom(const SheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawable_infos_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(headers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(footers_)) return false;
  if (_internal_has_print_margins()) {
    if (!print_margins_->IsInitialized()) return false;
  }
  if (_internal_has_header_storage()) {
    if (!header_storage_->IsInitialized()) return false;
  }
  if (_internal_has_footer_storage()) {
    if (!footer_storage_->IsInitialized()) return false;
  }
  if (_internal_has_userdefinedguidestorage()) {
    if (!userdefinedguidestorage_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  return true;
}

void SheetArchive::InternalSwap(SheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawable_infos_.InternalSwap(&other->drawable_infos_);
  headers_.InternalSwap(&other->headers_);
  footers_.InternalSwap(&other->footers_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SheetArchive, layout_direction_)
      + sizeof(SheetArchive::layout_direction_)
      - PROTOBUF_FIELD_OFFSET(SheetArchive, print_margins_)>(
          reinterpret_cast<char*>(&print_margins_),
          reinterpret_cast<char*>(&other->print_margins_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[11]);
}

// ===================================================================

class SheetStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetStylePropertiesArchive>()._has_bits_);
  static const ::TSD::FillArchive& fill(const SheetStylePropertiesArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSD::FillArchive&
SheetStylePropertiesArchive::_Internal::fill(const SheetStylePropertiesArchive* msg) {
  return *msg->fill_;
}
void SheetStylePropertiesArchive::clear_fill() {
  if (fill_ != nullptr) fill_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SheetStylePropertiesArchive::SheetStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.SheetStylePropertiesArchive)
}
SheetStylePropertiesArchive::SheetStylePropertiesArchive(const SheetStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    fill_ = new ::TSD::FillArchive(*from.fill_);
  } else {
    fill_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.SheetStylePropertiesArchive)
}

void SheetStylePropertiesArchive::SharedCtor() {
fill_ = nullptr;
}

SheetStylePropertiesArchive::~SheetStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetStylePropertiesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fill_;
}

void SheetStylePropertiesArchive::ArenaDtor(void* object) {
  SheetStylePropertiesArchive* _this = reinterpret_cast< SheetStylePropertiesArchive* >(object);
  (void)_this;
}
void SheetStylePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetStylePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SheetStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fill_ != nullptr);
    fill_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetStylePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetStylePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fill(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetStylePropertiesArchive)
  return target;
}

size_t SheetStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetStylePropertiesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.FillArchive fill = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fill_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetStylePropertiesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.SheetStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetStylePropertiesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetStylePropertiesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.SheetStylePropertiesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.SheetStylePropertiesArchive)
    MergeFrom(*source);
  }
}

void SheetStylePropertiesArchive::MergeFrom(const SheetStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fill()) {
    _internal_mutable_fill()->::TSD::FillArchive::MergeFrom(from._internal_fill());
  }
}

void SheetStylePropertiesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.SheetStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetStylePropertiesArchive::CopyFrom(const SheetStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_fill()) {
    if (!fill_->IsInitialized()) return false;
  }
  return true;
}

void SheetStylePropertiesArchive::InternalSwap(SheetStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fill_, other->fill_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetStylePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[12]);
}

// ===================================================================

class SheetStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const SheetStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TN::SheetStylePropertiesArchive& sheet_properties(const SheetStyleArchive* msg);
  static void set_has_sheet_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
SheetStyleArchive::_Internal::super(const SheetStyleArchive* msg) {
  return *msg->super_;
}
const ::TN::SheetStylePropertiesArchive&
SheetStyleArchive::_Internal::sheet_properties(const SheetStyleArchive* msg) {
  return *msg->sheet_properties_;
}
void SheetStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SheetStyleArchive::SheetStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.SheetStyleArchive)
}
SheetStyleArchive::SheetStyleArchive(const SheetStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_sheet_properties()) {
    sheet_properties_ = new ::TN::SheetStylePropertiesArchive(*from.sheet_properties_);
  } else {
    sheet_properties_ = nullptr;
  }
  override_count_ = from.override_count_;
  // @@protoc_insertion_point(copy_constructor:TN.SheetStyleArchive)
}

void SheetStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(override_count_));
}

SheetStyleArchive::~SheetStyleArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete sheet_properties_;
}

void SheetStyleArchive::ArenaDtor(void* object) {
  SheetStyleArchive* _this = reinterpret_cast< SheetStyleArchive* >(object);
  (void)_this;
}
void SheetStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SheetStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sheet_properties_ != nullptr);
      sheet_properties_->Clear();
    }
  }
  override_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.SheetStylePropertiesArchive sheet_properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_override_count(), target);
  }

  // optional .TN.SheetStylePropertiesArchive sheet_properties = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sheet_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetStyleArchive)
  return target;
}

size_t SheetStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TN.SheetStylePropertiesArchive sheet_properties = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sheet_properties_);
    }

    // optional uint32 override_count = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.SheetStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.SheetStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.SheetStyleArchive)
    MergeFrom(*source);
  }
}

void SheetStyleArchive::MergeFrom(const SheetStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sheet_properties()->::TN::SheetStylePropertiesArchive::MergeFrom(from._internal_sheet_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      override_count_ = from.override_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SheetStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.SheetStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetStyleArchive::CopyFrom(const SheetStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_properties()) {
    if (!sheet_properties_->IsInitialized()) return false;
  }
  return true;
}

void SheetStyleArchive::InternalSwap(SheetStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SheetStyleArchive, override_count_)
      + sizeof(SheetStyleArchive::override_count_)
      - PROTOBUF_FIELD_OFFSET(SheetStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[13]);
}

// ===================================================================

class FormBasedSheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormBasedSheetArchive>()._has_bits_);
  static const ::TN::SheetArchive& super(const FormBasedSheetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::CFUUIDArchive& table_id(const FormBasedSheetArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TN::SheetArchive&
FormBasedSheetArchive::_Internal::super(const FormBasedSheetArchive* msg) {
  return *msg->super_;
}
const ::TSP::CFUUIDArchive&
FormBasedSheetArchive::_Internal::table_id(const FormBasedSheetArchive* msg) {
  return *msg->table_id_;
}
void FormBasedSheetArchive::clear_table_id() {
  if (table_id_ != nullptr) table_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
FormBasedSheetArchive::FormBasedSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.FormBasedSheetArchive)
}
FormBasedSheetArchive::FormBasedSheetArchive(const FormBasedSheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TN::SheetArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_table_id()) {
    table_id_ = new ::TSP::CFUUIDArchive(*from.table_id_);
  } else {
    table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.FormBasedSheetArchive)
}

void FormBasedSheetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(table_id_));
}

FormBasedSheetArchive::~FormBasedSheetArchive() {
  // @@protoc_insertion_point(destructor:TN.FormBasedSheetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormBasedSheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete table_id_;
}

void FormBasedSheetArchive::ArenaDtor(void* object) {
  FormBasedSheetArchive* _this = reinterpret_cast< FormBasedSheetArchive* >(object);
  (void)_this;
}
void FormBasedSheetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormBasedSheetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormBasedSheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.FormBasedSheetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_id_ != nullptr);
      table_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormBasedSheetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TN.SheetArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.CFUUIDArchive table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormBasedSheetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.FormBasedSheetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TN.SheetArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.CFUUIDArchive table_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.FormBasedSheetArchive)
  return target;
}

size_t FormBasedSheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.FormBasedSheetArchive)
  size_t total_size = 0;

  // required .TN.SheetArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.CFUUIDArchive table_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormBasedSheetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.FormBasedSheetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormBasedSheetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormBasedSheetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.FormBasedSheetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.FormBasedSheetArchive)
    MergeFrom(*source);
  }
}

void FormBasedSheetArchive::MergeFrom(const FormBasedSheetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.FormBasedSheetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TN::SheetArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_table_id());
    }
  }
}

void FormBasedSheetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.FormBasedSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormBasedSheetArchive::CopyFrom(const FormBasedSheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.FormBasedSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormBasedSheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void FormBasedSheetArchive::InternalSwap(FormBasedSheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormBasedSheetArchive, table_id_)
      + sizeof(FormBasedSheetArchive::table_id_)
      - PROTOBUF_FIELD_OFFSET(FormBasedSheetArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormBasedSheetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[14]);
}

// ===================================================================

class ThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeArchive>()._has_bits_);
  static const ::TSS::ThemeArchive& super(const ThemeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::ThemeArchive&
ThemeArchive::_Internal::super(const ThemeArchive* msg) {
  return *msg->super_;
}
void ThemeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ThemeArchive::clear_prototypes() {
  prototypes_.Clear();
}
ThemeArchive::ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prototypes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.ThemeArchive)
}
ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      prototypes_(from.prototypes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::ThemeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.ThemeArchive)
}

void ThemeArchive::SharedCtor() {
super_ = nullptr;
}

ThemeArchive::~ThemeArchive() {
  // @@protoc_insertion_point(destructor:TN.ThemeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ThemeArchive::ArenaDtor(void* object) {
  ThemeArchive* _this = reinterpret_cast< ThemeArchive* >(object);
  (void)_this;
}
void ThemeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThemeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.ThemeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prototypes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ThemeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference prototypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prototypes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThemeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.ThemeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.ThemeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference prototypes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prototypes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_prototypes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.ThemeArchive)
  return target;
}

size_t ThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.ThemeArchive)
  size_t total_size = 0;

  // required .TSS.ThemeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference prototypes = 2;
  total_size += 1UL * this->_internal_prototypes_size();
  for (const auto& msg : this->prototypes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThemeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.ThemeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ThemeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThemeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.ThemeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.ThemeArchive)
    MergeFrom(*source);
  }
}

void ThemeArchive::MergeFrom(const ThemeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.ThemeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prototypes_.MergeFrom(from.prototypes_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSS::ThemeArchive::MergeFrom(from._internal_super());
  }
}

void ThemeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.ThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.ThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(prototypes_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ThemeArchive::InternalSwap(ThemeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prototypes_.InternalSwap(&other->prototypes_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[15]);
}

// ===================================================================

class PasteboardNativeStorageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteboardNativeStorageArchive>()._has_bits_);
  static const ::TSP::Reference& sheet(const PasteboardNativeStorageArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TN::SheetUIStateArchive& ui_state(const PasteboardNativeStorageArchive* msg);
  static void set_has_ui_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
PasteboardNativeStorageArchive::_Internal::sheet(const PasteboardNativeStorageArchive* msg) {
  return *msg->sheet_;
}
const ::TN::SheetUIStateArchive&
PasteboardNativeStorageArchive::_Internal::ui_state(const PasteboardNativeStorageArchive* msg) {
  return *msg->ui_state_;
}
void PasteboardNativeStorageArchive::clear_sheet() {
  if (sheet_ != nullptr) sheet_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.PasteboardNativeStorageArchive)
}
PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(const PasteboardNativeStorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    sheet_ = new ::TSP::Reference(*from.sheet_);
  } else {
    sheet_ = nullptr;
  }
  if (from._internal_has_ui_state()) {
    ui_state_ = new ::TN::SheetUIStateArchive(*from.ui_state_);
  } else {
    ui_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.PasteboardNativeStorageArchive)
}

void PasteboardNativeStorageArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ui_state_) -
    reinterpret_cast<char*>(&sheet_)) + sizeof(ui_state_));
}

PasteboardNativeStorageArchive::~PasteboardNativeStorageArchive() {
  // @@protoc_insertion_point(destructor:TN.PasteboardNativeStorageArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PasteboardNativeStorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_;
  if (this != internal_default_instance()) delete ui_state_;
}

void PasteboardNativeStorageArchive::ArenaDtor(void* object) {
  PasteboardNativeStorageArchive* _this = reinterpret_cast< PasteboardNativeStorageArchive* >(object);
  (void)_this;
}
void PasteboardNativeStorageArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PasteboardNativeStorageArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PasteboardNativeStorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.PasteboardNativeStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_ != nullptr);
      sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ui_state_ != nullptr);
      ui_state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteboardNativeStorageArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference sheet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.SheetUIStateArchive ui_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ui_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PasteboardNativeStorageArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.PasteboardNativeStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference sheet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sheet(this), target, stream);
  }

  // optional .TN.SheetUIStateArchive ui_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ui_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.PasteboardNativeStorageArchive)
  return target;
}

size_t PasteboardNativeStorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.PasteboardNativeStorageArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference sheet = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sheet_);
    }

    // optional .TN.SheetUIStateArchive ui_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ui_state_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasteboardNativeStorageArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.PasteboardNativeStorageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PasteboardNativeStorageArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PasteboardNativeStorageArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.PasteboardNativeStorageArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.PasteboardNativeStorageArchive)
    MergeFrom(*source);
  }
}

void PasteboardNativeStorageArchive::MergeFrom(const PasteboardNativeStorageArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.PasteboardNativeStorageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet()->::TSP::Reference::MergeFrom(from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ui_state()->::TN::SheetUIStateArchive::MergeFrom(from._internal_ui_state());
    }
  }
}

void PasteboardNativeStorageArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.PasteboardNativeStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteboardNativeStorageArchive::CopyFrom(const PasteboardNativeStorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.PasteboardNativeStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteboardNativeStorageArchive::IsInitialized() const {
  if (_internal_has_sheet()) {
    if (!sheet_->IsInitialized()) return false;
  }
  if (_internal_has_ui_state()) {
    if (!ui_state_->IsInitialized()) return false;
  }
  return true;
}

void PasteboardNativeStorageArchive::InternalSwap(PasteboardNativeStorageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasteboardNativeStorageArchive, ui_state_)
      + sizeof(PasteboardNativeStorageArchive::ui_state_)
      - PROTOBUF_FIELD_OFFSET(PasteboardNativeStorageArchive, sheet_)>(
          reinterpret_cast<char*>(&sheet_),
          reinterpret_cast<char*>(&other->sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteboardNativeStorageArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[16]);
}

// ===================================================================

class ChartMediatorFormulaStorage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartMediatorFormulaStorage>()._has_bits_);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ChartMediatorFormulaStorage::clear_data_formulae() {
  data_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_row_label_formulae() {
  row_label_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_col_label_formulae() {
  col_label_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_error_custom_pos_formulae() {
  error_custom_pos_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_error_custom_neg_formulae() {
  error_custom_neg_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_error_custom_pos_scatterx_formulae() {
  error_custom_pos_scatterx_formulae_.Clear();
}
void ChartMediatorFormulaStorage::clear_error_custom_neg_scatterx_formulae() {
  error_custom_neg_scatterx_formulae_.Clear();
}
ChartMediatorFormulaStorage::ChartMediatorFormulaStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_formulae_(arena),
  row_label_formulae_(arena),
  col_label_formulae_(arena),
  error_custom_pos_formulae_(arena),
  error_custom_neg_formulae_(arena),
  error_custom_pos_scatterx_formulae_(arena),
  error_custom_neg_scatterx_formulae_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.ChartMediatorFormulaStorage)
}
ChartMediatorFormulaStorage::ChartMediatorFormulaStorage(const ChartMediatorFormulaStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_formulae_(from.data_formulae_),
      row_label_formulae_(from.row_label_formulae_),
      col_label_formulae_(from.col_label_formulae_),
      error_custom_pos_formulae_(from.error_custom_pos_formulae_),
      error_custom_neg_formulae_(from.error_custom_neg_formulae_),
      error_custom_pos_scatterx_formulae_(from.error_custom_pos_scatterx_formulae_),
      error_custom_neg_scatterx_formulae_(from.error_custom_neg_scatterx_formulae_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:TN.ChartMediatorFormulaStorage)
}

void ChartMediatorFormulaStorage::SharedCtor() {
direction_ = 0;
}

ChartMediatorFormulaStorage::~ChartMediatorFormulaStorage() {
  // @@protoc_insertion_point(destructor:TN.ChartMediatorFormulaStorage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartMediatorFormulaStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartMediatorFormulaStorage::ArenaDtor(void* object) {
  ChartMediatorFormulaStorage* _this = reinterpret_cast< ChartMediatorFormulaStorage* >(object);
  (void)_this;
}
void ChartMediatorFormulaStorage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartMediatorFormulaStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartMediatorFormulaStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.ChartMediatorFormulaStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_formulae_.Clear();
  row_label_formulae_.Clear();
  col_label_formulae_.Clear();
  error_custom_pos_formulae_.Clear();
  error_custom_neg_formulae_.Clear();
  error_custom_pos_scatterx_formulae_.Clear();
  error_custom_neg_scatterx_formulae_.Clear();
  direction_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartMediatorFormulaStorage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.FormulaArchive data_formulae = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive row_label_formulae = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_label_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive col_label_formulae = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_col_label_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error_custom_pos_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error_custom_neg_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error_custom_pos_scatterx_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error_custom_neg_scatterx_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartMediatorFormulaStorage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.ChartMediatorFormulaStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.FormulaArchive data_formulae = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_formulae_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_formulae(i), target, stream);
  }

  // repeated .TSCE.FormulaArchive row_label_formulae = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_label_formulae_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_row_label_formulae(i), target, stream);
  }

  // repeated .TSCE.FormulaArchive col_label_formulae = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_col_label_formulae_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_col_label_formulae(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 direction = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_direction(), target);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_error_custom_pos_formulae_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_error_custom_pos_formulae(i), target, stream);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_error_custom_neg_formulae_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_error_custom_neg_formulae(i), target, stream);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_error_custom_pos_scatterx_formulae_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_error_custom_pos_scatterx_formulae(i), target, stream);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_error_custom_neg_scatterx_formulae_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_error_custom_neg_scatterx_formulae(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.ChartMediatorFormulaStorage)
  return target;
}

size_t ChartMediatorFormulaStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.ChartMediatorFormulaStorage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.FormulaArchive data_formulae = 1;
  total_size += 1UL * this->_internal_data_formulae_size();
  for (const auto& msg : this->data_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive row_label_formulae = 3;
  total_size += 1UL * this->_internal_row_label_formulae_size();
  for (const auto& msg : this->row_label_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive col_label_formulae = 4;
  total_size += 1UL * this->_internal_col_label_formulae_size();
  for (const auto& msg : this->col_label_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_formulae = 6;
  total_size += 1UL * this->_internal_error_custom_pos_formulae_size();
  for (const auto& msg : this->error_custom_pos_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_formulae = 7;
  total_size += 1UL * this->_internal_error_custom_neg_formulae_size();
  for (const auto& msg : this->error_custom_neg_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive error_custom_pos_scatterX_formulae = 8;
  total_size += 1UL * this->_internal_error_custom_pos_scatterx_formulae_size();
  for (const auto& msg : this->error_custom_pos_scatterx_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive error_custom_neg_scatterX_formulae = 9;
  total_size += 1UL * this->_internal_error_custom_neg_scatterx_formulae_size();
  for (const auto& msg : this->error_custom_neg_scatterx_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 direction = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartMediatorFormulaStorage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.ChartMediatorFormulaStorage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartMediatorFormulaStorage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartMediatorFormulaStorage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.ChartMediatorFormulaStorage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.ChartMediatorFormulaStorage)
    MergeFrom(*source);
  }
}

void ChartMediatorFormulaStorage::MergeFrom(const ChartMediatorFormulaStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.ChartMediatorFormulaStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_formulae_.MergeFrom(from.data_formulae_);
  row_label_formulae_.MergeFrom(from.row_label_formulae_);
  col_label_formulae_.MergeFrom(from.col_label_formulae_);
  error_custom_pos_formulae_.MergeFrom(from.error_custom_pos_formulae_);
  error_custom_neg_formulae_.MergeFrom(from.error_custom_neg_formulae_);
  error_custom_pos_scatterx_formulae_.MergeFrom(from.error_custom_pos_scatterx_formulae_);
  error_custom_neg_scatterx_formulae_.MergeFrom(from.error_custom_neg_scatterx_formulae_);
  if (from._internal_has_direction()) {
    _internal_set_direction(from._internal_direction());
  }
}

void ChartMediatorFormulaStorage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.ChartMediatorFormulaStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartMediatorFormulaStorage::CopyFrom(const ChartMediatorFormulaStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.ChartMediatorFormulaStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMediatorFormulaStorage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(data_formulae_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_label_formulae_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(col_label_formulae_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_custom_pos_formulae_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_custom_neg_formulae_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_custom_pos_scatterx_formulae_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_custom_neg_scatterx_formulae_)) return false;
  return true;
}

void ChartMediatorFormulaStorage::InternalSwap(ChartMediatorFormulaStorage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_formulae_.InternalSwap(&other->data_formulae_);
  row_label_formulae_.InternalSwap(&other->row_label_formulae_);
  col_label_formulae_.InternalSwap(&other->col_label_formulae_);
  error_custom_pos_formulae_.InternalSwap(&other->error_custom_pos_formulae_);
  error_custom_neg_formulae_.InternalSwap(&other->error_custom_neg_formulae_);
  error_custom_pos_scatterx_formulae_.InternalSwap(&other->error_custom_pos_scatterx_formulae_);
  error_custom_neg_scatterx_formulae_.InternalSwap(&other->error_custom_neg_scatterx_formulae_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartMediatorFormulaStorage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[17]);
}

// ===================================================================

class ChartMediatorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartMediatorArchive>()._has_bits_);
  static const ::TSCH::ChartMediatorArchive& super(const ChartMediatorArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TN::ChartMediatorFormulaStorage& formulas(const ChartMediatorArchive* msg);
  static void set_has_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_columns_are_series(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_registered_with_calc_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCH::ChartMediatorArchive&
ChartMediatorArchive::_Internal::super(const ChartMediatorArchive* msg) {
  return *msg->super_;
}
const ::TN::ChartMediatorFormulaStorage&
ChartMediatorArchive::_Internal::formulas(const ChartMediatorArchive* msg) {
  return *msg->formulas_;
}
void ChartMediatorArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ChartMediatorArchive::ChartMediatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.ChartMediatorArchive)
}
ChartMediatorArchive::ChartMediatorArchive(const ChartMediatorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entity_id()) {
    entity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity_id(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartMediatorArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_formulas()) {
    formulas_ = new ::TN::ChartMediatorFormulaStorage(*from.formulas_);
  } else {
    formulas_ = nullptr;
  }
  ::memcpy(&columns_are_series_, &from.columns_are_series_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_registered_with_calc_engine_) -
    reinterpret_cast<char*>(&columns_are_series_)) + sizeof(is_registered_with_calc_engine_));
  // @@protoc_insertion_point(copy_constructor:TN.ChartMediatorArchive)
}

void ChartMediatorArchive::SharedCtor() {
entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_registered_with_calc_engine_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_registered_with_calc_engine_));
}

ChartMediatorArchive::~ChartMediatorArchive() {
  // @@protoc_insertion_point(destructor:TN.ChartMediatorArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartMediatorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entity_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete formulas_;
}

void ChartMediatorArchive::ArenaDtor(void* object) {
  ChartMediatorArchive* _this = reinterpret_cast< ChartMediatorArchive* >(object);
  (void)_this;
}
void ChartMediatorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartMediatorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartMediatorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.ChartMediatorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      entity_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(formulas_ != nullptr);
      formulas_->Clear();
    }
  }
  ::memset(&columns_are_series_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_registered_with_calc_engine_) -
      reinterpret_cast<char*>(&columns_are_series_)) + sizeof(is_registered_with_calc_engine_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartMediatorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartMediatorArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TN.ChartMediatorArchive.entity_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.ChartMediatorFormulaStorage formulas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool columns_are_series = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_columns_are_series(&has_bits);
          columns_are_series_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_registered_with_calc_engine(&has_bits);
          is_registered_with_calc_engine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartMediatorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.ChartMediatorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartMediatorArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required string entity_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.ChartMediatorArchive.entity_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entity_id(), target);
  }

  // optional .TN.ChartMediatorFormulaStorage formulas = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::formulas(this), target, stream);
  }

  // optional bool columns_are_series = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_columns_are_series(), target);
  }

  // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_registered_with_calc_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.ChartMediatorArchive)
  return target;
}

size_t ChartMediatorArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.ChartMediatorArchive)
  size_t total_size = 0;

  if (_internal_has_entity_id()) {
    // required string entity_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  if (_internal_has_super()) {
    // required .TSCH.ChartMediatorArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t ChartMediatorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.ChartMediatorArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string entity_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());

    // required .TSCH.ChartMediatorArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .TN.ChartMediatorFormulaStorage formulas = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formulas_);
    }

    // optional bool columns_are_series = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_registered_with_calc_engine = 5 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartMediatorArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.ChartMediatorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartMediatorArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartMediatorArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.ChartMediatorArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.ChartMediatorArchive)
    MergeFrom(*source);
  }
}

void ChartMediatorArchive::MergeFrom(const ChartMediatorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.ChartMediatorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_entity_id(from._internal_entity_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSCH::ChartMediatorArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_formulas()->::TN::ChartMediatorFormulaStorage::MergeFrom(from._internal_formulas());
    }
    if (cached_has_bits & 0x00000008u) {
      columns_are_series_ = from.columns_are_series_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_registered_with_calc_engine_ = from.is_registered_with_calc_engine_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartMediatorArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.ChartMediatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartMediatorArchive::CopyFrom(const ChartMediatorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.ChartMediatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMediatorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_formulas()) {
    if (!formulas_->IsInitialized()) return false;
  }
  return true;
}

void ChartMediatorArchive::InternalSwap(ChartMediatorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entity_id_.Swap(&other->entity_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartMediatorArchive, is_registered_with_calc_engine_)
      + sizeof(ChartMediatorArchive::is_registered_with_calc_engine_)
      - PROTOBUF_FIELD_OFFSET(ChartMediatorArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartMediatorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[18]);
}

// ===================================================================

class ChartSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionArchive>()._has_bits_);
  static const ::TSCE::RangeReferenceArchive& reference(const ChartSelectionArchive* msg);
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::ChartSelectionArchive& deprecated_super(const ChartSelectionArchive* msg);
  static void set_has_deprecated_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& chart(const ChartSelectionArchive* msg);
  static void set_has_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::DrawableSelectionArchive& super(const ChartSelectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSCE::RangeReferenceArchive&
ChartSelectionArchive::_Internal::reference(const ChartSelectionArchive* msg) {
  return *msg->reference_;
}
const ::TSCH::ChartSelectionArchive&
ChartSelectionArchive::_Internal::deprecated_super(const ChartSelectionArchive* msg) {
  return *msg->deprecated_super_;
}
const ::TSP::Reference&
ChartSelectionArchive::_Internal::chart(const ChartSelectionArchive* msg) {
  return *msg->chart_;
}
const ::TSD::DrawableSelectionArchive&
ChartSelectionArchive::_Internal::super(const ChartSelectionArchive* msg) {
  return *msg->super_;
}
void ChartSelectionArchive::clear_reference() {
  if (reference_ != nullptr) reference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartSelectionArchive::clear_deprecated_super() {
  if (deprecated_super_ != nullptr) deprecated_super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartSelectionArchive::clear_chart() {
  if (chart_ != nullptr) chart_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartSelectionArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ChartSelectionArchive::ChartSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.ChartSelectionArchive)
}
ChartSelectionArchive::ChartSelectionArchive(const ChartSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference()) {
    reference_ = new ::TSCE::RangeReferenceArchive(*from.reference_);
  } else {
    reference_ = nullptr;
  }
  if (from._internal_has_deprecated_super()) {
    deprecated_super_ = new ::TSCH::ChartSelectionArchive(*from.deprecated_super_);
  } else {
    deprecated_super_ = nullptr;
  }
  if (from._internal_has_chart()) {
    chart_ = new ::TSP::Reference(*from.chart_);
  } else {
    chart_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableSelectionArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.ChartSelectionArchive)
}

void ChartSelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&super_) -
    reinterpret_cast<char*>(&reference_)) + sizeof(super_));
}

ChartSelectionArchive::~ChartSelectionArchive() {
  // @@protoc_insertion_point(destructor:TN.ChartSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reference_;
  if (this != internal_default_instance()) delete deprecated_super_;
  if (this != internal_default_instance()) delete chart_;
  if (this != internal_default_instance()) delete super_;
}

void ChartSelectionArchive::ArenaDtor(void* object) {
  ChartSelectionArchive* _this = reinterpret_cast< ChartSelectionArchive* >(object);
  (void)_this;
}
void ChartSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.ChartSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(reference_ != nullptr);
      reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(deprecated_super_ != nullptr);
      deprecated_super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(chart_ != nullptr);
      chart_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.RangeReferenceArchive reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartSelectionArchive deprecated_super = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference chart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.DrawableSelectionArchive super = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.ChartSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.RangeReferenceArchive reference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reference(this), target, stream);
  }

  // optional .TSCH.ChartSelectionArchive deprecated_super = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::deprecated_super(this), target, stream);
  }

  // optional .TSP.Reference chart = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::chart(this), target, stream);
  }

  // optional .TSD.DrawableSelectionArchive super = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.ChartSelectionArchive)
  return target;
}

size_t ChartSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.ChartSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSCE.RangeReferenceArchive reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_);
    }

    // optional .TSCH.ChartSelectionArchive deprecated_super = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deprecated_super_);
    }

    // optional .TSP.Reference chart = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_);
    }

    // optional .TSD.DrawableSelectionArchive super = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.ChartSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.ChartSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.ChartSelectionArchive)
    MergeFrom(*source);
  }
}

void ChartSelectionArchive::MergeFrom(const ChartSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.ChartSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from._internal_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_deprecated_super()->::TSCH::ChartSelectionArchive::MergeFrom(from._internal_deprecated_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_chart()->::TSP::Reference::MergeFrom(from._internal_chart());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_super()->::TSD::DrawableSelectionArchive::MergeFrom(from._internal_super());
    }
  }
}

void ChartSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.ChartSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSelectionArchive::CopyFrom(const ChartSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.ChartSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionArchive::IsInitialized() const {
  if (_internal_has_reference()) {
    if (!reference_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_super()) {
    if (!deprecated_super_->IsInitialized()) return false;
  }
  if (_internal_has_chart()) {
    if (!chart_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ChartSelectionArchive::InternalSwap(ChartSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSelectionArchive, super_)
      + sizeof(ChartSelectionArchive::super_)
      - PROTOBUF_FIELD_OFFSET(ChartSelectionArchive, reference_)>(
          reinterpret_cast<char*>(&reference_),
          reinterpret_cast<char*>(&other->reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNArchives_2eproto_getter, &descriptor_table_TNArchives_2eproto_once,
      file_level_metadata_TNArchives_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TN::SheetUIStateArchive* Arena::CreateMaybeMessage< ::TN::SheetUIStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetUIStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::SheetUIStateDictionaryEntryArchive* Arena::CreateMaybeMessage< ::TN::SheetUIStateDictionaryEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetUIStateDictionaryEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::UUIDSheetUIStateDictionaryArchive* Arena::CreateMaybeMessage< ::TN::UUIDSheetUIStateDictionaryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::UUIDSheetUIStateDictionaryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::UIStateArchive* Arena::CreateMaybeMessage< ::TN::UIStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::UIStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::SheetSelectionArchive* Arena::CreateMaybeMessage< ::TN::SheetSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::FormSelectionArchive* Arena::CreateMaybeMessage< ::TN::FormSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::FormSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::FormBuilderSelectionArchive* Arena::CreateMaybeMessage< ::TN::FormBuilderSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::FormBuilderSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::FormTableChooserSelectionArchive* Arena::CreateMaybeMessage< ::TN::FormTableChooserSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::FormTableChooserSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::UndoRedoStateArchive* Arena::CreateMaybeMessage< ::TN::UndoRedoStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::UndoRedoStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::DocumentArchive* Arena::CreateMaybeMessage< ::TN::DocumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::DocumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::PlaceholderArchive* Arena::CreateMaybeMessage< ::TN::PlaceholderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::PlaceholderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::SheetArchive* Arena::CreateMaybeMessage< ::TN::SheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::SheetStylePropertiesArchive* Arena::CreateMaybeMessage< ::TN::SheetStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::SheetStyleArchive* Arena::CreateMaybeMessage< ::TN::SheetStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::FormBasedSheetArchive* Arena::CreateMaybeMessage< ::TN::FormBasedSheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::FormBasedSheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::ThemeArchive* Arena::CreateMaybeMessage< ::TN::ThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::ThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::PasteboardNativeStorageArchive* Arena::CreateMaybeMessage< ::TN::PasteboardNativeStorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::PasteboardNativeStorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::ChartMediatorFormulaStorage* Arena::CreateMaybeMessage< ::TN::ChartMediatorFormulaStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::ChartMediatorFormulaStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::ChartMediatorArchive* Arena::CreateMaybeMessage< ::TN::ChartMediatorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::ChartMediatorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::ChartSelectionArchive* Arena::CreateMaybeMessage< ::TN::ChartSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::ChartSelectionArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
