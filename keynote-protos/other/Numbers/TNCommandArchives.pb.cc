// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TNCommandArchives.proto

#include "TNCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TN {
constexpr CommandFormChooseTargetTableArchive::CommandFormChooseTargetTableArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previous_sheet_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , table_id_(nullptr)
  , previous_table_id_(nullptr)
  , sheet_(nullptr){}
struct CommandFormChooseTargetTableArchiveDefaultTypeInternal {
  constexpr CommandFormChooseTargetTableArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandFormChooseTargetTableArchiveDefaultTypeInternal() {}
  union {
    CommandFormChooseTargetTableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandFormChooseTargetTableArchiveDefaultTypeInternal _CommandFormChooseTargetTableArchive_default_instance_;
constexpr CommandSheetInsertDrawablesArchive::CommandSheetInsertDrawablesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawables_()
  , args_list_()
  , custom_format_keys_()
  , chart_entity_uid_for_backing_tables_()
  , backing_tables_()
  , super_(nullptr)
  , sheet_id_(nullptr)
  , drawable_undo_object_(nullptr)
  , formula_rewrite_command_for_undo_(nullptr)
  , forpaste_(false)
  , saved_next_untitled_resolver_index_(0u){}
struct CommandSheetInsertDrawablesArchiveDefaultTypeInternal {
  constexpr CommandSheetInsertDrawablesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSheetInsertDrawablesArchiveDefaultTypeInternal() {}
  union {
    CommandSheetInsertDrawablesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSheetInsertDrawablesArchiveDefaultTypeInternal _CommandSheetInsertDrawablesArchive_default_instance_;
constexpr CommandSheetRemoveDrawablesArchive::CommandSheetRemoveDrawablesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_()
  , drawables_()
  , old_sheet_sidebar_order_()
  , chart_entity_uid_for_backing_tables_()
  , backing_table_uids_()
  , super_(nullptr)
  , sheet_id_(nullptr){}
struct CommandSheetRemoveDrawablesArchiveDefaultTypeInternal {
  constexpr CommandSheetRemoveDrawablesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSheetRemoveDrawablesArchiveDefaultTypeInternal() {}
  union {
    CommandSheetRemoveDrawablesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSheetRemoveDrawablesArchiveDefaultTypeInternal _CommandSheetRemoveDrawablesArchive_default_instance_;
constexpr CommandSheetMoveDrawableZOrderArchive::CommandSheetMoveDrawableZOrderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_()
  , super_(nullptr)
  , sheet_id_(nullptr){}
struct CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal {
  constexpr CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal() {}
  union {
    CommandSheetMoveDrawableZOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSheetMoveDrawableZOrderArchiveDefaultTypeInternal _CommandSheetMoveDrawableZOrderArchive_default_instance_;
constexpr CommandDocumentInsertSheetArchive::CommandDocumentInsertSheetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argslist_()
  , sheets_()
  , custom_format_keys_()
  , sheet_uistates_()
  , super_(nullptr)
  , drawable_undo_object_(nullptr)
  , allowsamesheetnameasforms_(false)
  , for_paste_(false){}
struct CommandDocumentInsertSheetArchiveDefaultTypeInternal {
  constexpr CommandDocumentInsertSheetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDocumentInsertSheetArchiveDefaultTypeInternal() {}
  union {
    CommandDocumentInsertSheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDocumentInsertSheetArchiveDefaultTypeInternal _CommandDocumentInsertSheetArchive_default_instance_;
constexpr CommandDocumentRemoveSheetArchive::CommandDocumentRemoveSheetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argslist_()
  , sheets_()
  , sheet_uistates_()
  , rescueid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , is_undo_paste_(false){}
struct CommandDocumentRemoveSheetArchiveDefaultTypeInternal {
  constexpr CommandDocumentRemoveSheetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDocumentRemoveSheetArchiveDefaultTypeInternal() {}
  union {
    CommandDocumentRemoveSheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDocumentRemoveSheetArchiveDefaultTypeInternal _CommandDocumentRemoveSheetArchive_default_instance_;
constexpr CommandDocumentReorderSheetArchive::CommandDocumentReorderSheetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argslist_()
  , super_(nullptr){}
struct CommandDocumentReorderSheetArchiveDefaultTypeInternal {
  constexpr CommandDocumentReorderSheetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDocumentReorderSheetArchiveDefaultTypeInternal() {}
  union {
    CommandDocumentReorderSheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDocumentReorderSheetArchiveDefaultTypeInternal _CommandDocumentReorderSheetArchive_default_instance_;
constexpr CommandSetSheetNameArchive::CommandSetSheetNameArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : newname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , oldname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , sheet_uid_(nullptr){}
struct CommandSetSheetNameArchiveDefaultTypeInternal {
  constexpr CommandSetSheetNameArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetSheetNameArchiveDefaultTypeInternal() {}
  union {
    CommandSetSheetNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetSheetNameArchiveDefaultTypeInternal _CommandSetSheetNameArchive_default_instance_;
constexpr CommandSetSheetShouldPrintCommentsArchive::CommandSetSheetShouldPrintCommentsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , sheet_uid_(nullptr)
  , new_should_print_comments_(false)
  , old_should_print_comments_(false){}
struct CommandSetSheetShouldPrintCommentsArchiveDefaultTypeInternal {
  constexpr CommandSetSheetShouldPrintCommentsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetSheetShouldPrintCommentsArchiveDefaultTypeInternal() {}
  union {
    CommandSetSheetShouldPrintCommentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetSheetShouldPrintCommentsArchiveDefaultTypeInternal _CommandSetSheetShouldPrintCommentsArchive_default_instance_;
constexpr CommandSetSheetDirectionArchive::CommandSetSheetDirectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , sheet_uid_(nullptr)
  , newdirection_(0)

  , olddirection_(0)
{}
struct CommandSetSheetDirectionArchiveDefaultTypeInternal {
  constexpr CommandSetSheetDirectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetSheetDirectionArchiveDefaultTypeInternal() {}
  union {
    CommandSetSheetDirectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetSheetDirectionArchiveDefaultTypeInternal _CommandSetSheetDirectionArchive_default_instance_;
constexpr CommandSetPageOrientationArchive::CommandSetPageOrientationArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_uid_(nullptr)
  , super_(nullptr)
  , in_portrait_page_orientation_(false)
  , prev_in_portrait_page_orientation_(false){}
struct CommandSetPageOrientationArchiveDefaultTypeInternal {
  constexpr CommandSetPageOrientationArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetPageOrientationArchiveDefaultTypeInternal() {}
  union {
    CommandSetPageOrientationArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetPageOrientationArchiveDefaultTypeInternal _CommandSetPageOrientationArchive_default_instance_;
constexpr CommandSetShowPageNumbersValueArchive::CommandSetShowPageNumbersValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_(nullptr)
  , super_(nullptr)
  , show_page_numbers_(false){}
struct CommandSetShowPageNumbersValueArchiveDefaultTypeInternal {
  constexpr CommandSetShowPageNumbersValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetShowPageNumbersValueArchiveDefaultTypeInternal() {}
  union {
    CommandSetShowPageNumbersValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetShowPageNumbersValueArchiveDefaultTypeInternal _CommandSetShowPageNumbersValueArchive_default_instance_;
constexpr CommandSetRepeatingHeadersValueArchive::CommandSetRepeatingHeadersValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_(nullptr)
  , super_(nullptr)
  , show_repeating_headers_(false){}
struct CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal {
  constexpr CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal() {}
  union {
    CommandSetRepeatingHeadersValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetRepeatingHeadersValueArchiveDefaultTypeInternal _CommandSetRepeatingHeadersValueArchive_default_instance_;
constexpr CommandSetContentScaleArchive::CommandSetContentScaleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_uid_(nullptr)
  , super_(nullptr)
  , old_content_scale_(0)
  , content_scale_(0)
  , toggled_auto_fit_(false){}
struct CommandSetContentScaleArchiveDefaultTypeInternal {
  constexpr CommandSetContentScaleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetContentScaleArchiveDefaultTypeInternal() {}
  union {
    CommandSetContentScaleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetContentScaleArchiveDefaultTypeInternal _CommandSetContentScaleArchive_default_instance_;
constexpr CommandSetDocumentPaperSize::CommandSetDocumentPaperSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paper_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_size_(nullptr)
  , super_(nullptr){}
struct CommandSetDocumentPaperSizeDefaultTypeInternal {
  constexpr CommandSetDocumentPaperSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetDocumentPaperSizeDefaultTypeInternal() {}
  union {
    CommandSetDocumentPaperSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetDocumentPaperSizeDefaultTypeInternal _CommandSetDocumentPaperSize_default_instance_;
constexpr CommandEnterPrintPreviewModeArchive::CommandEnterPrintPreviewModeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct CommandEnterPrintPreviewModeArchiveDefaultTypeInternal {
  constexpr CommandEnterPrintPreviewModeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandEnterPrintPreviewModeArchiveDefaultTypeInternal() {}
  union {
    CommandEnterPrintPreviewModeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandEnterPrintPreviewModeArchiveDefaultTypeInternal _CommandEnterPrintPreviewModeArchive_default_instance_;
constexpr CommandExitPrintPreviewModeArchive::CommandExitPrintPreviewModeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct CommandExitPrintPreviewModeArchiveDefaultTypeInternal {
  constexpr CommandExitPrintPreviewModeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandExitPrintPreviewModeArchiveDefaultTypeInternal() {}
  union {
    CommandExitPrintPreviewModeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandExitPrintPreviewModeArchiveDefaultTypeInternal _CommandExitPrintPreviewModeArchive_default_instance_;
constexpr CommandSetPrinterMarginsArchive::CommandSetPrinterMarginsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_print_margins_(nullptr)
  , old_print_margins_(nullptr)
  , sheet_uid_(nullptr)
  , super_(nullptr){}
struct CommandSetPrinterMarginsArchiveDefaultTypeInternal {
  constexpr CommandSetPrinterMarginsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetPrinterMarginsArchiveDefaultTypeInternal() {}
  union {
    CommandSetPrinterMarginsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetPrinterMarginsArchiveDefaultTypeInternal _CommandSetPrinterMarginsArchive_default_instance_;
constexpr CommandSetPrintBackgroundsArchive::CommandSetPrintBackgroundsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_uid_(nullptr)
  , super_(nullptr)
  , print_backgrounds_(false)
  , old_print_backgrounds_(false){}
struct CommandSetPrintBackgroundsArchiveDefaultTypeInternal {
  constexpr CommandSetPrintBackgroundsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetPrintBackgroundsArchiveDefaultTypeInternal() {}
  union {
    CommandSetPrintBackgroundsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetPrintBackgroundsArchiveDefaultTypeInternal _CommandSetPrintBackgroundsArchive_default_instance_;
constexpr CommandSetHeaderFooterInsetsArchive::CommandSetHeaderFooterInsetsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_uid_(nullptr)
  , super_(nullptr)
  , old_header_inset_(0)
  , old_footer_inset_(0)
  , header_inset_(0)
  , footer_inset_(0){}
struct CommandSetHeaderFooterInsetsArchiveDefaultTypeInternal {
  constexpr CommandSetHeaderFooterInsetsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetHeaderFooterInsetsArchiveDefaultTypeInternal() {}
  union {
    CommandSetHeaderFooterInsetsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetHeaderFooterInsetsArchiveDefaultTypeInternal _CommandSetHeaderFooterInsetsArchive_default_instance_;
constexpr CommandSetPageOrderArchive::CommandSetPageOrderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_uid_(nullptr)
  , super_(nullptr)
  , old_page_order_(0u)
  , page_order_(0u){}
struct CommandSetPageOrderArchiveDefaultTypeInternal {
  constexpr CommandSetPageOrderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetPageOrderArchiveDefaultTypeInternal() {}
  union {
    CommandSetPageOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetPageOrderArchiveDefaultTypeInternal _CommandSetPageOrderArchive_default_instance_;
constexpr CommandSetUsingStartPageNumberArchive::CommandSetUsingStartPageNumberArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_uid_(nullptr)
  , super_(nullptr)
  , using_start_page_number_(false)
  , prev_using_start_page_number_(false){}
struct CommandSetUsingStartPageNumberArchiveDefaultTypeInternal {
  constexpr CommandSetUsingStartPageNumberArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetUsingStartPageNumberArchiveDefaultTypeInternal() {}
  union {
    CommandSetUsingStartPageNumberArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetUsingStartPageNumberArchiveDefaultTypeInternal _CommandSetUsingStartPageNumberArchive_default_instance_;
constexpr CommandSetStartPageNumberArchive::CommandSetStartPageNumberArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_uid_(nullptr)
  , super_(nullptr)
  , old_start_page_number_(0)
  , start_page_number_(0){}
struct CommandSetStartPageNumberArchiveDefaultTypeInternal {
  constexpr CommandSetStartPageNumberArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetStartPageNumberArchiveDefaultTypeInternal() {}
  union {
    CommandSetStartPageNumberArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetStartPageNumberArchiveDefaultTypeInternal _CommandSetStartPageNumberArchive_default_instance_;
constexpr CommandReorderSidebarItemChildrenAchive::CommandReorderSidebarItemChildrenAchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : old_children_()
  , new_children_()
  , super_(nullptr)
  , sheet_(nullptr){}
struct CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal {
  constexpr CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal() {}
  union {
    CommandReorderSidebarItemChildrenAchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandReorderSidebarItemChildrenAchiveDefaultTypeInternal _CommandReorderSidebarItemChildrenAchive_default_instance_;
constexpr CommandChartMediatorSetEditingState::CommandChartMediatorSetEditingState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_formulas_(nullptr)
  , new_formulas_(nullptr)
  , old_direction_(0)
  , new_direction_(0)
  , old_scatter_format_(0)
  , new_scatter_format_(0)
  , for_formula_rewrite_(false){}
struct CommandChartMediatorSetEditingStateDefaultTypeInternal {
  constexpr CommandChartMediatorSetEditingStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandChartMediatorSetEditingStateDefaultTypeInternal() {}
  union {
    CommandChartMediatorSetEditingState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandChartMediatorSetEditingStateDefaultTypeInternal _CommandChartMediatorSetEditingState_default_instance_;
constexpr CommandChartMediatorSetGridDirection::CommandChartMediatorSetGridDirection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_formula_storage_(nullptr)
  , old_direction_(0u)
  , new_direction_(0u){}
struct CommandChartMediatorSetGridDirectionDefaultTypeInternal {
  constexpr CommandChartMediatorSetGridDirectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandChartMediatorSetGridDirectionDefaultTypeInternal() {}
  union {
    CommandChartMediatorSetGridDirection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandChartMediatorSetGridDirectionDefaultTypeInternal _CommandChartMediatorSetGridDirection_default_instance_;
constexpr CommandChartMediatorSetSeriesOrder::CommandChartMediatorSetSeriesOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , series_id_(nullptr)
  , preceding_series_id_(nullptr)
  , inverse_series_id_(nullptr)
  , inverse_preceding_series_id_(nullptr)
  , old_formula_storage_(nullptr)
  , undo_current_index_(0)
  , undo_new_index_(0){}
struct CommandChartMediatorSetSeriesOrderDefaultTypeInternal {
  constexpr CommandChartMediatorSetSeriesOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandChartMediatorSetSeriesOrderDefaultTypeInternal() {}
  union {
    CommandChartMediatorSetSeriesOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandChartMediatorSetSeriesOrderDefaultTypeInternal _CommandChartMediatorSetSeriesOrder_default_instance_;
constexpr CommandChartMediatorUpdateForEntityDelete::CommandChartMediatorUpdateForEntityDelete(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cmd_(nullptr){}
struct CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal {
  constexpr CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal() {}
  union {
    CommandChartMediatorUpdateForEntityDelete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandChartMediatorUpdateForEntityDeleteDefaultTypeInternal _CommandChartMediatorUpdateForEntityDelete_default_instance_;
constexpr CommandChartMediatorSetFormula::CommandChartMediatorSetFormula(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formulae_()
  , old_formulae_()
  , super_(nullptr)
  , model_update_data_type_(0)
  , series_index_(0u)
  , axis_type_(0){}
struct CommandChartMediatorSetFormulaDefaultTypeInternal {
  constexpr CommandChartMediatorSetFormulaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandChartMediatorSetFormulaDefaultTypeInternal() {}
  union {
    CommandChartMediatorSetFormula _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandChartMediatorSetFormulaDefaultTypeInternal _CommandChartMediatorSetFormula_default_instance_;
constexpr CommandSheetSetBackgroundFillArchive::CommandSheetSetBackgroundFillArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , sheet_id_(nullptr)
  , new_fill_(nullptr)
  , old_fill_(nullptr){}
struct CommandSheetSetBackgroundFillArchiveDefaultTypeInternal {
  constexpr CommandSheetSetBackgroundFillArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSheetSetBackgroundFillArchiveDefaultTypeInternal() {}
  union {
    CommandSheetSetBackgroundFillArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSheetSetBackgroundFillArchiveDefaultTypeInternal _CommandSheetSetBackgroundFillArchive_default_instance_;
constexpr CommandSheetSetStyleArchive::CommandSheetSetStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , sheet_id_(nullptr)
  , sheet_style_(nullptr)
  , old_sheet_style_(nullptr){}
struct CommandSheetSetStyleArchiveDefaultTypeInternal {
  constexpr CommandSheetSetStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSheetSetStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSheetSetStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSheetSetStyleArchiveDefaultTypeInternal _CommandSheetSetStyleArchive_default_instance_;
constexpr DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_selection_(nullptr){}
struct DocumentSelectionTransformerArchiveDefaultTypeInternal {
  constexpr DocumentSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    DocumentSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentSelectionTransformerArchiveDefaultTypeInternal _DocumentSelectionTransformerArchive_default_instance_;
constexpr SheetSelectionTransformerArchive::SheetSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_uuid_(nullptr)
  , paginated_(false){}
struct SheetSelectionTransformerArchiveDefaultTypeInternal {
  constexpr SheetSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SheetSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    SheetSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SheetSelectionTransformerArchiveDefaultTypeInternal _SheetSelectionTransformerArchive_default_instance_;
constexpr CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transformer_helper_(nullptr)
  , header_storage_uuid_path_(nullptr){}
struct CanvasSelectionTransformerArchiveDefaultTypeInternal {
  constexpr CanvasSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanvasSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanvasSelectionTransformerArchiveDefaultTypeInternal _CanvasSelectionTransformerArchive_default_instance_;
constexpr SheetChangeBaseArchive::SheetChangeBaseArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_id_(nullptr){}
struct SheetChangeBaseArchiveDefaultTypeInternal {
  constexpr SheetChangeBaseArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SheetChangeBaseArchiveDefaultTypeInternal() {}
  union {
    SheetChangeBaseArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SheetChangeBaseArchiveDefaultTypeInternal _SheetChangeBaseArchive_default_instance_;
constexpr SheetChangeSheetNameArchive::SheetChangeSheetNameArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct SheetChangeSheetNameArchiveDefaultTypeInternal {
  constexpr SheetChangeSheetNameArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SheetChangeSheetNameArchiveDefaultTypeInternal() {}
  union {
    SheetChangeSheetNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SheetChangeSheetNameArchiveDefaultTypeInternal _SheetChangeSheetNameArchive_default_instance_;
constexpr CommandInducedSheetChangeArchive::CommandInducedSheetChangeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sheet_changes_()
  , super_(nullptr){}
struct CommandInducedSheetChangeArchiveDefaultTypeInternal {
  constexpr CommandInducedSheetChangeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandInducedSheetChangeArchiveDefaultTypeInternal() {}
  union {
    CommandInducedSheetChangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandInducedSheetChangeArchiveDefaultTypeInternal _CommandInducedSheetChangeArchive_default_instance_;
}  // namespace TN
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TNCommandArchives_2eproto[37];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TNCommandArchives_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TNCommandArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TNCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, table_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, previous_table_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, sheet_name_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, previous_sheet_name_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandFormChooseTargetTableArchive, sheet_),
  2,
  3,
  4,
  0,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, sheet_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, drawables_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, forpaste_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, drawable_undo_object_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, formula_rewrite_command_for_undo_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, saved_next_untitled_resolver_index_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, chart_entity_uid_for_backing_tables_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetInsertDrawablesArchive, backing_tables_),
  0,
  1,
  ~0u,
  ~0u,
  4,
  ~0u,
  2,
  3,
  5,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, sheet_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, drawables_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, old_sheet_sidebar_order_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, chart_entity_uid_for_backing_tables_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetRemoveDrawablesArchive, backing_table_uids_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetMoveDrawableZOrderArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetMoveDrawableZOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetMoveDrawableZOrderArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetMoveDrawableZOrderArchive, sheet_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetMoveDrawableZOrderArchive, args_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, argslist_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, sheets_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, allowsamesheetnameasforms_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, drawable_undo_object_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, sheet_uistates_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentInsertSheetArchive, for_paste_),
  0,
  ~0u,
  ~0u,
  2,
  ~0u,
  1,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, argslist_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, sheets_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, rescueid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, sheet_uistates_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentRemoveSheetArchive, is_undo_paste_),
  1,
  ~0u,
  ~0u,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReorderSheetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReorderSheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReorderSheetArchive, argslist_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandDocumentReorderSheetArchive, super_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, newname_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, sheet_uid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetNameArchive, oldname_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetShouldPrintCommentsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetShouldPrintCommentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetShouldPrintCommentsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetShouldPrintCommentsArchive, new_should_print_comments_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetShouldPrintCommentsArchive, sheet_uid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetShouldPrintCommentsArchive, old_should_print_comments_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetDirectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetDirectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetDirectionArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetDirectionArchive, newdirection_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetDirectionArchive, sheet_uid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetSheetDirectionArchive, olddirection_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrientationArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrientationArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrientationArchive, in_portrait_page_orientation_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrientationArchive, sheet_uid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrientationArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrientationArchive, prev_in_portrait_page_orientation_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetShowPageNumbersValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetShowPageNumbersValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetShowPageNumbersValueArchive, show_page_numbers_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetShowPageNumbersValueArchive, sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetShowPageNumbersValueArchive, super_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetRepeatingHeadersValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetRepeatingHeadersValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetRepeatingHeadersValueArchive, show_repeating_headers_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetRepeatingHeadersValueArchive, sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetRepeatingHeadersValueArchive, super_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, old_content_scale_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, content_scale_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, sheet_uid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetContentScaleArchive, toggled_auto_fit_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetDocumentPaperSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetDocumentPaperSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetDocumentPaperSize, paper_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetDocumentPaperSize, page_size_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetDocumentPaperSize, super_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TN::CommandEnterPrintPreviewModeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandEnterPrintPreviewModeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandEnterPrintPreviewModeArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::CommandExitPrintPreviewModeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandExitPrintPreviewModeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandExitPrintPreviewModeArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrinterMarginsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrinterMarginsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrinterMarginsArchive, new_print_margins_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrinterMarginsArchive, old_print_margins_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrinterMarginsArchive, sheet_uid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrinterMarginsArchive, super_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrintBackgroundsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrintBackgroundsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrintBackgroundsArchive, sheet_uid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrintBackgroundsArchive, print_backgrounds_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrintBackgroundsArchive, old_print_backgrounds_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPrintBackgroundsArchive, super_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetHeaderFooterInsetsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetHeaderFooterInsetsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetHeaderFooterInsetsArchive, old_header_inset_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetHeaderFooterInsetsArchive, old_footer_inset_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetHeaderFooterInsetsArchive, header_inset_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetHeaderFooterInsetsArchive, footer_inset_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetHeaderFooterInsetsArchive, sheet_uid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetHeaderFooterInsetsArchive, super_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrderArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrderArchive, old_page_order_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrderArchive, page_order_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrderArchive, sheet_uid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetPageOrderArchive, super_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetUsingStartPageNumberArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetUsingStartPageNumberArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetUsingStartPageNumberArchive, using_start_page_number_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetUsingStartPageNumberArchive, sheet_uid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetUsingStartPageNumberArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetUsingStartPageNumberArchive, prev_using_start_page_number_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetStartPageNumberArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetStartPageNumberArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetStartPageNumberArchive, old_start_page_number_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetStartPageNumberArchive, start_page_number_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetStartPageNumberArchive, sheet_uid_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSetStartPageNumberArchive, super_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, sheet_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, old_children_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandReorderSidebarItemChildrenAchive, new_children_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, old_formulas_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, new_formulas_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, old_direction_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, new_direction_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, old_scatter_format_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, new_scatter_format_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetEditingState, for_formula_rewrite_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetGridDirection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetGridDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetGridDirection, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetGridDirection, old_direction_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetGridDirection, new_direction_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetGridDirection, old_formula_storage_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetSeriesOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetSeriesOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetSeriesOrder, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetSeriesOrder, series_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetSeriesOrder, preceding_series_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetSeriesOrder, inverse_series_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetSeriesOrder, inverse_preceding_series_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetSeriesOrder, undo_current_index_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetSeriesOrder, undo_new_index_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetSeriesOrder, old_formula_storage_),
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorUpdateForEntityDelete, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorUpdateForEntityDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorUpdateForEntityDelete, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorUpdateForEntityDelete, cmd_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetFormula, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetFormula, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetFormula, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetFormula, model_update_data_type_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetFormula, formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetFormula, old_formulae_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetFormula, series_index_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandChartMediatorSetFormula, axis_type_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetBackgroundFillArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetBackgroundFillArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetBackgroundFillArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetBackgroundFillArchive, sheet_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetBackgroundFillArchive, new_fill_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetBackgroundFillArchive, old_fill_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetStyleArchive, sheet_id_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetStyleArchive, sheet_style_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandSheetSetStyleArchive, old_sheet_style_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TN::DocumentSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::DocumentSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::DocumentSelectionTransformerArchive, document_selection_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionTransformerArchive, sheet_uuid_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetSelectionTransformerArchive, paginated_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::CanvasSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CanvasSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CanvasSelectionTransformerArchive, transformer_helper_),
  PROTOBUF_FIELD_OFFSET(::TN::CanvasSelectionTransformerArchive, header_storage_uuid_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TN::SheetChangeBaseArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetChangeBaseArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::SheetChangeBaseArchive, sheet_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::TN::SheetChangeSheetNameArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetChangeSheetNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::SheetChangeSheetNameArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::SheetChangeSheetNameArchive, sheet_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TN::CommandInducedSheetChangeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandInducedSheetChangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TN::CommandInducedSheetChangeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TN::CommandInducedSheetChangeArchive, sheet_changes_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::TN::CommandFormChooseTargetTableArchive)},
  { 17, 33, sizeof(::TN::CommandSheetInsertDrawablesArchive)},
  { 44, 56, sizeof(::TN::CommandSheetRemoveDrawablesArchive)},
  { 63, 71, sizeof(::TN::CommandSheetMoveDrawableZOrderArchive)},
  { 74, 87, sizeof(::TN::CommandDocumentInsertSheetArchive)},
  { 95, 106, sizeof(::TN::CommandDocumentRemoveSheetArchive)},
  { 112, 119, sizeof(::TN::CommandDocumentReorderSheetArchive)},
  { 121, 130, sizeof(::TN::CommandSetSheetNameArchive)},
  { 134, 143, sizeof(::TN::CommandSetSheetShouldPrintCommentsArchive)},
  { 147, 156, sizeof(::TN::CommandSetSheetDirectionArchive)},
  { 160, 169, sizeof(::TN::CommandSetPageOrientationArchive)},
  { 173, 181, sizeof(::TN::CommandSetShowPageNumbersValueArchive)},
  { 184, 192, sizeof(::TN::CommandSetRepeatingHeadersValueArchive)},
  { 195, 205, sizeof(::TN::CommandSetContentScaleArchive)},
  { 210, 218, sizeof(::TN::CommandSetDocumentPaperSize)},
  { 221, 227, sizeof(::TN::CommandEnterPrintPreviewModeArchive)},
  { 228, 234, sizeof(::TN::CommandExitPrintPreviewModeArchive)},
  { 235, 244, sizeof(::TN::CommandSetPrinterMarginsArchive)},
  { 248, 257, sizeof(::TN::CommandSetPrintBackgroundsArchive)},
  { 261, 272, sizeof(::TN::CommandSetHeaderFooterInsetsArchive)},
  { 278, 287, sizeof(::TN::CommandSetPageOrderArchive)},
  { 291, 300, sizeof(::TN::CommandSetUsingStartPageNumberArchive)},
  { 304, 313, sizeof(::TN::CommandSetStartPageNumberArchive)},
  { 317, 326, sizeof(::TN::CommandReorderSidebarItemChildrenAchive)},
  { 330, 343, sizeof(::TN::CommandChartMediatorSetEditingState)},
  { 351, 360, sizeof(::TN::CommandChartMediatorSetGridDirection)},
  { 364, 377, sizeof(::TN::CommandChartMediatorSetSeriesOrder)},
  { 385, 392, sizeof(::TN::CommandChartMediatorUpdateForEntityDelete)},
  { 394, 405, sizeof(::TN::CommandChartMediatorSetFormula)},
  { 411, 420, sizeof(::TN::CommandSheetSetBackgroundFillArchive)},
  { 424, 433, sizeof(::TN::CommandSheetSetStyleArchive)},
  { 437, 443, sizeof(::TN::DocumentSelectionTransformerArchive)},
  { 444, 451, sizeof(::TN::SheetSelectionTransformerArchive)},
  { 453, 460, sizeof(::TN::CanvasSelectionTransformerArchive)},
  { 462, 468, sizeof(::TN::SheetChangeBaseArchive)},
  { 469, 476, sizeof(::TN::SheetChangeSheetNameArchive)},
  { 478, 485, sizeof(::TN::CommandInducedSheetChangeArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandFormChooseTargetTableArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSheetInsertDrawablesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSheetRemoveDrawablesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSheetMoveDrawableZOrderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandDocumentInsertSheetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandDocumentRemoveSheetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandDocumentReorderSheetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetSheetNameArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetSheetShouldPrintCommentsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetSheetDirectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetPageOrientationArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetShowPageNumbersValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetRepeatingHeadersValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetContentScaleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetDocumentPaperSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandEnterPrintPreviewModeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandExitPrintPreviewModeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetPrinterMarginsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetPrintBackgroundsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetHeaderFooterInsetsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetPageOrderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetUsingStartPageNumberArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSetStartPageNumberArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandReorderSidebarItemChildrenAchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandChartMediatorSetEditingState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandChartMediatorSetGridDirection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandChartMediatorSetSeriesOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandChartMediatorUpdateForEntityDelete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandChartMediatorSetFormula_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSheetSetBackgroundFillArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandSheetSetStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_DocumentSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_SheetSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CanvasSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_SheetChangeBaseArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_SheetChangeSheetNameArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TN::_CommandInducedSheetChangeArchive_default_instance_),
};

const char descriptor_table_protodef_TNCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027TNCommandArchives.proto\022\002TN\032\021TSPMessag"
  "es.proto\032\021TSKArchives.proto\032\022TSCHArchive"
  "s.proto\032\031TSCHCommandArchives.proto\032\022TSCE"
  "Archives.proto\032\021TSSArchives.proto\032\021TSDAr"
  "chives.proto\032\030TSDCommandArchives.proto\032\022"
  "TSWPArchives.proto\032\021TSAArchives.proto\032\021T"
  "STArchives.proto\032\020TNArchives.proto\"\356\001\n#C"
  "ommandFormChooseTargetTableArchive\022\"\n\005su"
  "per\030\001 \002(\0132\023.TSK.CommandArchive\022$\n\010table_"
  "id\030\002 \001(\0132\022.TSP.CFUUIDArchive\022-\n\021previous"
  "_table_id\030\003 \001(\0132\022.TSP.CFUUIDArchive\022\022\n\ns"
  "heet_name\030\004 \001(\t\022\033\n\023previous_sheet_name\030\005"
  " \001(\t\022\035\n\005sheet\030\006 \002(\0132\016.TSP.Reference\"\341\003\n\""
  "CommandSheetInsertDrawablesArchive\022\"\n\005su"
  "per\030\001 \002(\0132\023.TSK.CommandArchive\022\033\n\010sheet_"
  "id\030\002 \002(\0132\t.TSP.UUID\022!\n\tdrawables\030\003 \003(\0132\016"
  ".TSP.Reference\022*\n\targs_list\030\004 \003(\0132\027.TSK."
  "AddIdOperationArgs\022\020\n\010forPaste\030\005 \001(\010\022%\n\022"
  "custom_format_keys\030\006 \003(\0132\t.TSP.UUID\022,\n\024d"
  "rawable_undo_object\030\007 \001(\0132\016.TSP.Referenc"
  "e\0228\n formula_rewrite_command_for_undo\030\t "
  "\001(\0132\016.TSP.Reference\022*\n\"saved_next_untitl"
  "ed_resolver_index\030\n \001(\r\0226\n#chart_entity_"
  "uid_for_backing_tables\030\013 \003(\0132\t.TSP.UUID\022"
  "&\n\016backing_tables\030\014 \003(\0132\016.TSP.Reference\""
  "\307\002\n\"CommandSheetRemoveDrawablesArchive\022\""
  "\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\033\n\010sh"
  "eet_id\030\002 \002(\0132\t.TSP.UUID\022-\n\targs_list\030\003 \003"
  "(\0132\032.TSK.RemoveIdOperationArgs\022!\n\tdrawab"
  "les\030\004 \003(\0132\016.TSP.Reference\022/\n\027old_sheet_s"
  "idebar_order\030\005 \003(\0132\016.TSP.Reference\0226\n#ch"
  "art_entity_uid_for_backing_tables\030\006 \003(\0132"
  "\t.TSP.UUID\022%\n\022backing_table_uids\030\007 \003(\0132\t"
  ".TSP.UUID\"\232\001\n%CommandSheetMoveDrawableZO"
  "rderArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
  "Archive\022\033\n\010sheet_id\030\002 \002(\0132\t.TSP.UUID\0220\n\t"
  "args_list\030\003 \003(\0132\035.TSK.RearrangeIdOperati"
  "onArgs\"\334\002\n!CommandDocumentInsertSheetArc"
  "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
  "\022)\n\010argsList\030\002 \003(\0132\027.TSK.AddIdOperationA"
  "rgs\022\036\n\006sheets\030\003 \003(\0132\016.TSP.Reference\022!\n\031a"
  "llowSameSheetNameAsForms\030\004 \001(\010\022%\n\022custom"
  "_format_keys\030\005 \003(\0132\t.TSP.UUID\022,\n\024drawabl"
  "e_undo_object\030\006 \001(\0132\016.TSP.Reference\022=\n\016s"
  "heet_uistates\030\007 \003(\0132%.TN.UUIDSheetUIStat"
  "eDictionaryArchive\022\021\n\tfor_paste\030\010 \001(\010\"\375\001"
  "\n!CommandDocumentRemoveSheetArchive\022\"\n\005s"
  "uper\030\001 \002(\0132\023.TSK.CommandArchive\022,\n\010argsL"
  "ist\030\002 \003(\0132\032.TSK.RemoveIdOperationArgs\022\036\n"
  "\006sheets\030\003 \003(\0132\016.TSP.Reference\022\020\n\010rescueI"
  "d\030\004 \002(\t\022=\n\016sheet_uistates\030\005 \003(\0132%.TN.UUI"
  "DSheetUIStateDictionaryArchive\022\025\n\ris_und"
  "o_paste\030\006 \001(\010\"y\n\"CommandDocumentReorderS"
  "heetArchive\022/\n\010argsList\030\001 \003(\0132\035.TSK.Rear"
  "rangeIdOperationArgs\022\"\n\005super\030\002 \002(\0132\023.TS"
  "K.CommandArchive\"\200\001\n\032CommandSetSheetName"
  "Archive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArch"
  "ive\022\017\n\007newname\030\002 \002(\t\022\034\n\tsheet_uid\030\003 \002(\0132"
  "\t.TSP.UUID\022\017\n\007oldname\030\004 \001(\t\"\263\001\n)CommandS"
  "etSheetShouldPrintCommentsArchive\022\"\n\005sup"
  "er\030\001 \002(\0132\023.TSK.CommandArchive\022!\n\031new_sho"
  "uld_print_comments\030\002 \002(\010\022\034\n\tsheet_uid\030\003 "
  "\002(\0132\t.TSP.UUID\022!\n\031old_should_print_comme"
  "nts\030\004 \002(\010\"\301\001\n\037CommandSetSheetDirectionAr"
  "chive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchiv"
  "e\022-\n\014newDirection\030\002 \002(\0162\027.TN.PageLayoutD"
  "irection\022\034\n\tsheet_uid\030\003 \002(\0132\t.TSP.UUID\022-"
  "\n\014oldDirection\030\004 \001(\0162\027.TN.PageLayoutDire"
  "ction\"\265\001\n CommandSetPageOrientationArchi"
  "ve\022$\n\034in_portrait_page_orientation\030\001 \002(\010"
  "\022\034\n\tsheet_uid\030\002 \002(\0132\t.TSP.UUID\022\"\n\005super\030"
  "\003 \002(\0132\023.TSK.CommandArchive\022)\n!prev_in_po"
  "rtrait_page_orientation\030\004 \002(\010\"\205\001\n%Comman"
  "dSetShowPageNumbersValueArchive\022\031\n\021show_"
  "page_numbers\030\001 \002(\010\022\035\n\005sheet\030\002 \002(\0132\016.TSP."
  "Reference\022\"\n\005super\030\003 \002(\0132\023.TSK.CommandAr"
  "chive\"\213\001\n&CommandSetRepeatingHeadersValu"
  "eArchive\022\036\n\026show_repeating_headers\030\001 \002(\010"
  "\022\035\n\005sheet\030\002 \002(\0132\016.TSP.Reference\022\"\n\005super"
  "\030\003 \002(\0132\023.TSK.CommandArchive\"\255\001\n\035CommandS"
  "etContentScaleArchive\022\031\n\021old_content_sca"
  "le\030\002 \001(\002\022\025\n\rcontent_scale\030\003 \002(\002\022\034\n\tsheet"
  "_uid\030\004 \002(\0132\t.TSP.UUID\022\"\n\005super\030\005 \002(\0132\023.T"
  "SK.CommandArchive\022\030\n\020toggled_auto_fit\030\006 "
  "\002(\010\"q\n\033CommandSetDocumentPaperSize\022\020\n\010pa"
  "per_id\030\001 \002(\t\022\034\n\tpage_size\030\002 \002(\0132\t.TSP.Si"
  "ze\022\"\n\005super\030\003 \002(\0132\023.TSK.CommandArchive\"I"
  "\n#CommandEnterPrintPreviewModeArchive\022\"\n"
  "\005super\030\001 \002(\0132\023.TSK.CommandArchive\"H\n\"Com"
  "mandExitPrintPreviewModeArchive\022\"\n\005super"
  "\030\001 \002(\0132\023.TSK.CommandArchive\"\311\001\n\037CommandS"
  "etPrinterMarginsArchive\0221\n\021new_print_mar"
  "gins\030\001 \002(\0132\026.TSD.EdgeInsetsArchive\0221\n\021ol"
  "d_print_margins\030\002 \001(\0132\026.TSD.EdgeInsetsAr"
  "chive\022\034\n\tsheet_uid\030\003 \002(\0132\t.TSP.UUID\022\"\n\005s"
  "uper\030\004 \002(\0132\023.TSK.CommandArchive\"\237\001\n!Comm"
  "andSetPrintBackgroundsArchive\022\034\n\tsheet_u"
  "id\030\001 \002(\0132\t.TSP.UUID\022\031\n\021print_backgrounds"
  "\030\002 \002(\010\022\035\n\025old_print_backgrounds\030\003 \002(\010\022\"\n"
  "\005super\030\004 \002(\0132\023.TSK.CommandArchive\"\307\001\n#Co"
  "mmandSetHeaderFooterInsetsArchive\022\030\n\020old"
  "_header_inset\030\001 \001(\002\022\030\n\020old_footer_inset\030"
  "\002 \001(\002\022\024\n\014header_inset\030\003 \002(\002\022\024\n\014footer_in"
  "set\030\004 \002(\002\022\034\n\tsheet_uid\030\005 \002(\0132\t.TSP.UUID\022"
  "\"\n\005super\030\006 \002(\0132\023.TSK.CommandArchive\"\212\001\n\032"
  "CommandSetPageOrderArchive\022\026\n\016old_page_o"
  "rder\030\001 \002(\r\022\022\n\npage_order\030\002 \002(\r\022\034\n\tsheet_"
  "uid\030\003 \002(\0132\t.TSP.UUID\022\"\n\005super\030\004 \002(\0132\023.TS"
  "K.CommandArchive\"\260\001\n%CommandSetUsingStar"
  "tPageNumberArchive\022\037\n\027using_start_page_n"
  "umber\030\001 \002(\010\022\034\n\tsheet_uid\030\002 \002(\0132\t.TSP.UUI"
  "D\022\"\n\005super\030\003 \002(\0132\023.TSK.CommandArchive\022$\n"
  "\034prev_using_start_page_number\030\004 \002(\010\"\236\001\n "
  "CommandSetStartPageNumberArchive\022\035\n\025old_"
  "start_page_number\030\001 \002(\005\022\031\n\021start_page_nu"
  "mber\030\002 \002(\005\022\034\n\tsheet_uid\030\003 \002(\0132\t.TSP.UUID"
  "\022\"\n\005super\030\004 \002(\0132\023.TSK.CommandArchive\"\270\001\n"
  "\'CommandReorderSidebarItemChildrenAchive"
  "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005"
  "sheet\030\002 \002(\0132\016.TSP.Reference\022$\n\014old_child"
  "ren\030\003 \003(\0132\016.TSP.Reference\022$\n\014new_childre"
  "n\030\004 \003(\0132\016.TSP.Reference\"\300\002\n#CommandChart"
  "MediatorSetEditingState\022(\n\005super\030\001 \002(\0132\031"
  ".TSCH.ChartCommandArchive\0225\n\014old_formula"
  "s\030\003 \001(\0132\037.TN.ChartMediatorFormulaStorage"
  "\0225\n\014new_formulas\030\004 \001(\0132\037.TN.ChartMediato"
  "rFormulaStorage\022\025\n\rold_direction\030\005 \001(\005\022\025"
  "\n\rnew_direction\030\006 \001(\005\022\032\n\022old_scatter_for"
  "mat\030\007 \001(\005\022\032\n\022new_scatter_format\030\010 \001(\005\022\033\n"
  "\023for_formula_rewrite\030\t \001(\010\"\274\001\n$CommandCh"
  "artMediatorSetGridDirection\022(\n\005super\030\001 \002"
  "(\0132\031.TSCH.ChartCommandArchive\022\025\n\rold_dir"
  "ection\030\002 \002(\r\022\025\n\rnew_direction\030\003 \002(\r\022<\n\023o"
  "ld_formula_storage\030\004 \001(\0132\037.TN.ChartMedia"
  "torFormulaStorage\"\334\002\n\"CommandChartMediat"
  "orSetSeriesOrder\022(\n\005super\030\001 \002(\0132\031.TSCH.C"
  "hartCommandArchive\022\034\n\tseries_id\030\002 \001(\0132\t."
  "TSP.UUID\022&\n\023preceding_series_id\030\003 \001(\0132\t."
  "TSP.UUID\022$\n\021inverse_series_id\030\004 \001(\0132\t.TS"
  "P.UUID\022.\n\033inverse_preceding_series_id\030\005 "
  "\001(\0132\t.TSP.UUID\022\032\n\022undo_current_index\030\006 \002"
  "(\005\022\026\n\016undo_new_index\030\007 \002(\005\022<\n\023old_formul"
  "a_storage\030\010 \001(\0132\037.TN.ChartMediatorFormul"
  "aStorage\"r\n)CommandChartMediatorUpdateFo"
  "rEntityDelete\022(\n\005super\030\001 \002(\0132\031.TSCH.Char"
  "tCommandArchive\022\033\n\003cmd\030\003 \001(\0132\016.TSP.Refer"
  "ence\"\347\001\n\036CommandChartMediatorSetFormula\022"
  "(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArchiv"
  "e\022\036\n\026model_update_data_type\030\002 \002(\005\022&\n\010for"
  "mulae\030\003 \003(\0132\024.TSCE.FormulaArchive\022*\n\014old"
  "_formulae\030\004 \003(\0132\024.TSCE.FormulaArchive\022\024\n"
  "\014series_index\030\005 \002(\r\022\021\n\taxis_type\030\006 \002(\005\"\257"
  "\001\n$CommandSheetSetBackgroundFillArchive\022"
  "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\033\n\010s"
  "heet_id\030\002 \002(\0132\t.TSP.UUID\022\"\n\010new_fill\030\003 \002"
  "(\0132\020.TSD.FillArchive\022\"\n\010old_fill\030\004 \002(\0132\020"
  ".TSD.FillArchive\"\254\001\n\033CommandSheetSetStyl"
  "eArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArc"
  "hive\022\033\n\010sheet_id\030\002 \002(\0132\t.TSP.UUID\022#\n\013she"
  "et_style\030\003 \002(\0132\016.TSP.Reference\022\'\n\017old_sh"
  "eet_style\030\004 \001(\0132\016.TSP.Reference\"Q\n#Docum"
  "entSelectionTransformerArchive\022*\n\022docume"
  "nt_selection\030\001 \001(\0132\016.TSP.Reference\"T\n Sh"
  "eetSelectionTransformerArchive\022\035\n\nsheet_"
  "uuid\030\001 \001(\0132\t.TSP.UUID\022\021\n\tpaginated\030\002 \002(\010"
  "\"\246\001\n!CanvasSelectionTransformerArchive\022P"
  "\n\022transformer_helper\030\001 \002(\01324.TSD.InfoCol"
  "lectionSelectionTransformerHelperArchive"
  "\022/\n\030header_storage_uuid_path\030\002 \001(\0132\r.TSP"
  ".UUIDPath\"5\n\026SheetChangeBaseArchive\022\033\n\010s"
  "heet_id\030\001 \002(\0132\t.TSP.UUID\"\\\n\033SheetChangeS"
  "heetNameArchive\022)\n\005super\030\001 \002(\0132\032.TN.Shee"
  "tChangeBaseArchive\022\022\n\nsheet_name\030\002 \002(\t\"~"
  "\n CommandInducedSheetChangeArchive\022\"\n\005su"
  "per\030\001 \002(\0132\023.TSK.CommandArchive\0226\n\rsheet_"
  "changes\030\002 \003(\0132\037.TN.SheetChangeSheetNameA"
  "rchive"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TNCommandArchives_2eproto_deps[12] = {
  &::descriptor_table_TNArchives_2eproto,
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSCEArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eproto,
  &::descriptor_table_TSCHCommandArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSDCommandArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSTArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TNCommandArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TNCommandArchives_2eproto = {
  false, false, 7046, descriptor_table_protodef_TNCommandArchives_2eproto, "TNCommandArchives.proto", 
  &descriptor_table_TNCommandArchives_2eproto_once, descriptor_table_TNCommandArchives_2eproto_deps, 12, 37,
  schemas, file_default_instances, TableStruct_TNCommandArchives_2eproto::offsets,
  file_level_metadata_TNCommandArchives_2eproto, file_level_enum_descriptors_TNCommandArchives_2eproto, file_level_service_descriptors_TNCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TNCommandArchives_2eproto_getter() {
  return &descriptor_table_TNCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TNCommandArchives_2eproto(&descriptor_table_TNCommandArchives_2eproto);
namespace TN {

// ===================================================================

class CommandFormChooseTargetTableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandFormChooseTargetTableArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandFormChooseTargetTableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::CFUUIDArchive& table_id(const CommandFormChooseTargetTableArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::CFUUIDArchive& previous_table_id(const CommandFormChooseTargetTableArchive* msg);
  static void set_has_previous_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sheet_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_sheet_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& sheet(const CommandFormChooseTargetTableArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::TSK::CommandArchive&
CommandFormChooseTargetTableArchive::_Internal::super(const CommandFormChooseTargetTableArchive* msg) {
  return *msg->super_;
}
const ::TSP::CFUUIDArchive&
CommandFormChooseTargetTableArchive::_Internal::table_id(const CommandFormChooseTargetTableArchive* msg) {
  return *msg->table_id_;
}
const ::TSP::CFUUIDArchive&
CommandFormChooseTargetTableArchive::_Internal::previous_table_id(const CommandFormChooseTargetTableArchive* msg) {
  return *msg->previous_table_id_;
}
const ::TSP::Reference&
CommandFormChooseTargetTableArchive::_Internal::sheet(const CommandFormChooseTargetTableArchive* msg) {
  return *msg->sheet_;
}
void CommandFormChooseTargetTableArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandFormChooseTargetTableArchive::clear_table_id() {
  if (table_id_ != nullptr) table_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandFormChooseTargetTableArchive::clear_previous_table_id() {
  if (previous_table_id_ != nullptr) previous_table_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandFormChooseTargetTableArchive::clear_sheet() {
  if (sheet_ != nullptr) sheet_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CommandFormChooseTargetTableArchive::CommandFormChooseTargetTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandFormChooseTargetTableArchive)
}
CommandFormChooseTargetTableArchive::CommandFormChooseTargetTableArchive(const CommandFormChooseTargetTableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sheet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sheet_name()) {
    sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sheet_name(), 
      GetArena());
  }
  previous_sheet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_previous_sheet_name()) {
    previous_sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_sheet_name(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_table_id()) {
    table_id_ = new ::TSP::CFUUIDArchive(*from.table_id_);
  } else {
    table_id_ = nullptr;
  }
  if (from._internal_has_previous_table_id()) {
    previous_table_id_ = new ::TSP::CFUUIDArchive(*from.previous_table_id_);
  } else {
    previous_table_id_ = nullptr;
  }
  if (from._internal_has_sheet()) {
    sheet_ = new ::TSP::Reference(*from.sheet_);
  } else {
    sheet_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandFormChooseTargetTableArchive)
}

void CommandFormChooseTargetTableArchive::SharedCtor() {
sheet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previous_sheet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sheet_) -
    reinterpret_cast<char*>(&super_)) + sizeof(sheet_));
}

CommandFormChooseTargetTableArchive::~CommandFormChooseTargetTableArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandFormChooseTargetTableArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandFormChooseTargetTableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sheet_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_sheet_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete table_id_;
  if (this != internal_default_instance()) delete previous_table_id_;
  if (this != internal_default_instance()) delete sheet_;
}

void CommandFormChooseTargetTableArchive::ArenaDtor(void* object) {
  CommandFormChooseTargetTableArchive* _this = reinterpret_cast< CommandFormChooseTargetTableArchive* >(object);
  (void)_this;
}
void CommandFormChooseTargetTableArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandFormChooseTargetTableArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandFormChooseTargetTableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandFormChooseTargetTableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      sheet_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      previous_sheet_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(table_id_ != nullptr);
      table_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(previous_table_id_ != nullptr);
      previous_table_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(sheet_ != nullptr);
      sheet_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandFormChooseTargetTableArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.CFUUIDArchive table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.CFUUIDArchive previous_table_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sheet_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sheet_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TN.CommandFormChooseTargetTableArchive.sheet_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string previous_sheet_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_previous_sheet_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TN.CommandFormChooseTargetTableArchive.previous_sheet_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandFormChooseTargetTableArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandFormChooseTargetTableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.CFUUIDArchive table_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_id(this), target, stream);
  }

  // optional .TSP.CFUUIDArchive previous_table_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::previous_table_id(this), target, stream);
  }

  // optional string sheet_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sheet_name().data(), static_cast<int>(this->_internal_sheet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandFormChooseTargetTableArchive.sheet_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sheet_name(), target);
  }

  // optional string previous_sheet_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_previous_sheet_name().data(), static_cast<int>(this->_internal_previous_sheet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandFormChooseTargetTableArchive.previous_sheet_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_previous_sheet_name(), target);
  }

  // required .TSP.Reference sheet = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sheet(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandFormChooseTargetTableArchive)
  return target;
}

size_t CommandFormChooseTargetTableArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandFormChooseTargetTableArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_);
  }

  return total_size;
}
size_t CommandFormChooseTargetTableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandFormChooseTargetTableArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference sheet = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string sheet_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sheet_name());
    }

    // optional string previous_sheet_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_previous_sheet_name());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional .TSP.CFUUIDArchive table_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_id_);
    }

    // optional .TSP.CFUUIDArchive previous_table_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *previous_table_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandFormChooseTargetTableArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandFormChooseTargetTableArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandFormChooseTargetTableArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandFormChooseTargetTableArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandFormChooseTargetTableArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandFormChooseTargetTableArchive)
    MergeFrom(*source);
  }
}

void CommandFormChooseTargetTableArchive::MergeFrom(const CommandFormChooseTargetTableArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandFormChooseTargetTableArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sheet_name(from._internal_sheet_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_previous_sheet_name(from._internal_previous_sheet_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_table_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_previous_table_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_previous_table_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_sheet()->::TSP::Reference::MergeFrom(from._internal_sheet());
    }
  }
}

void CommandFormChooseTargetTableArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandFormChooseTargetTableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandFormChooseTargetTableArchive::CopyFrom(const CommandFormChooseTargetTableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandFormChooseTargetTableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandFormChooseTargetTableArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet()) {
    if (!sheet_->IsInitialized()) return false;
  }
  return true;
}

void CommandFormChooseTargetTableArchive::InternalSwap(CommandFormChooseTargetTableArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sheet_name_.Swap(&other->sheet_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previous_sheet_name_.Swap(&other->previous_sheet_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandFormChooseTargetTableArchive, sheet_)
      + sizeof(CommandFormChooseTargetTableArchive::sheet_)
      - PROTOBUF_FIELD_OFFSET(CommandFormChooseTargetTableArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandFormChooseTargetTableArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[0]);
}

// ===================================================================

class CommandSheetInsertDrawablesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSheetInsertDrawablesArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSheetInsertDrawablesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& sheet_id(const CommandSheetInsertDrawablesArchive* msg);
  static void set_has_sheet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_forpaste(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& drawable_undo_object(const CommandSheetInsertDrawablesArchive* msg);
  static void set_has_drawable_undo_object(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& formula_rewrite_command_for_undo(const CommandSheetInsertDrawablesArchive* msg);
  static void set_has_formula_rewrite_command_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_saved_next_untitled_resolver_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSheetInsertDrawablesArchive::_Internal::super(const CommandSheetInsertDrawablesArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSheetInsertDrawablesArchive::_Internal::sheet_id(const CommandSheetInsertDrawablesArchive* msg) {
  return *msg->sheet_id_;
}
const ::TSP::Reference&
CommandSheetInsertDrawablesArchive::_Internal::drawable_undo_object(const CommandSheetInsertDrawablesArchive* msg) {
  return *msg->drawable_undo_object_;
}
const ::TSP::Reference&
CommandSheetInsertDrawablesArchive::_Internal::formula_rewrite_command_for_undo(const CommandSheetInsertDrawablesArchive* msg) {
  return *msg->formula_rewrite_command_for_undo_;
}
void CommandSheetInsertDrawablesArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSheetInsertDrawablesArchive::clear_sheet_id() {
  if (sheet_id_ != nullptr) sheet_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSheetInsertDrawablesArchive::clear_drawables() {
  drawables_.Clear();
}
void CommandSheetInsertDrawablesArchive::clear_args_list() {
  args_list_.Clear();
}
void CommandSheetInsertDrawablesArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
void CommandSheetInsertDrawablesArchive::clear_drawable_undo_object() {
  if (drawable_undo_object_ != nullptr) drawable_undo_object_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSheetInsertDrawablesArchive::clear_formula_rewrite_command_for_undo() {
  if (formula_rewrite_command_for_undo_ != nullptr) formula_rewrite_command_for_undo_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandSheetInsertDrawablesArchive::clear_chart_entity_uid_for_backing_tables() {
  chart_entity_uid_for_backing_tables_.Clear();
}
void CommandSheetInsertDrawablesArchive::clear_backing_tables() {
  backing_tables_.Clear();
}
CommandSheetInsertDrawablesArchive::CommandSheetInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drawables_(arena),
  args_list_(arena),
  custom_format_keys_(arena),
  chart_entity_uid_for_backing_tables_(arena),
  backing_tables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSheetInsertDrawablesArchive)
}
CommandSheetInsertDrawablesArchive::CommandSheetInsertDrawablesArchive(const CommandSheetInsertDrawablesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawables_(from.drawables_),
      args_list_(from.args_list_),
      custom_format_keys_(from.custom_format_keys_),
      chart_entity_uid_for_backing_tables_(from.chart_entity_uid_for_backing_tables_),
      backing_tables_(from.backing_tables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_sheet_id()) {
    sheet_id_ = new ::TSP::UUID(*from.sheet_id_);
  } else {
    sheet_id_ = nullptr;
  }
  if (from._internal_has_drawable_undo_object()) {
    drawable_undo_object_ = new ::TSP::Reference(*from.drawable_undo_object_);
  } else {
    drawable_undo_object_ = nullptr;
  }
  if (from._internal_has_formula_rewrite_command_for_undo()) {
    formula_rewrite_command_for_undo_ = new ::TSP::Reference(*from.formula_rewrite_command_for_undo_);
  } else {
    formula_rewrite_command_for_undo_ = nullptr;
  }
  ::memcpy(&forpaste_, &from.forpaste_,
    static_cast<size_t>(reinterpret_cast<char*>(&saved_next_untitled_resolver_index_) -
    reinterpret_cast<char*>(&forpaste_)) + sizeof(saved_next_untitled_resolver_index_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSheetInsertDrawablesArchive)
}

void CommandSheetInsertDrawablesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&saved_next_untitled_resolver_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(saved_next_untitled_resolver_index_));
}

CommandSheetInsertDrawablesArchive::~CommandSheetInsertDrawablesArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSheetInsertDrawablesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSheetInsertDrawablesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete sheet_id_;
  if (this != internal_default_instance()) delete drawable_undo_object_;
  if (this != internal_default_instance()) delete formula_rewrite_command_for_undo_;
}

void CommandSheetInsertDrawablesArchive::ArenaDtor(void* object) {
  CommandSheetInsertDrawablesArchive* _this = reinterpret_cast< CommandSheetInsertDrawablesArchive* >(object);
  (void)_this;
}
void CommandSheetInsertDrawablesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSheetInsertDrawablesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSheetInsertDrawablesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSheetInsertDrawablesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawables_.Clear();
  args_list_.Clear();
  custom_format_keys_.Clear();
  chart_entity_uid_for_backing_tables_.Clear();
  backing_tables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sheet_id_ != nullptr);
      sheet_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(drawable_undo_object_ != nullptr);
      drawable_undo_object_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(formula_rewrite_command_for_undo_ != nullptr);
      formula_rewrite_command_for_undo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&forpaste_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&saved_next_untitled_resolver_index_) -
        reinterpret_cast<char*>(&forpaste_)) + sizeof(saved_next_untitled_resolver_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSheetInsertDrawablesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.AddIdOperationArgs args_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool forPaste = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_forpaste(&has_bits);
          forpaste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference drawable_undo_object = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_undo_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command_for_undo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command_for_undo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 saved_next_untitled_resolver_index = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_saved_next_untitled_resolver_index(&has_bits);
          saved_next_untitled_resolver_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID chart_entity_uid_for_backing_tables = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_entity_uid_for_backing_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference backing_tables = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_backing_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSheetInsertDrawablesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSheetInsertDrawablesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID sheet_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet_id(this), target, stream);
  }

  // repeated .TSP.Reference drawables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_drawables(i), target, stream);
  }

  // repeated .TSK.AddIdOperationArgs args_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_args_list(i), target, stream);
  }

  // optional bool forPaste = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_forpaste(), target);
  }

  // repeated .TSP.UUID custom_format_keys = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_custom_format_keys(i), target, stream);
  }

  // optional .TSP.Reference drawable_undo_object = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::drawable_undo_object(this), target, stream);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::formula_rewrite_command_for_undo(this), target, stream);
  }

  // optional uint32 saved_next_untitled_resolver_index = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_saved_next_untitled_resolver_index(), target);
  }

  // repeated .TSP.UUID chart_entity_uid_for_backing_tables = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chart_entity_uid_for_backing_tables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_chart_entity_uid_for_backing_tables(i), target, stream);
  }

  // repeated .TSP.Reference backing_tables = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_backing_tables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_backing_tables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSheetInsertDrawablesArchive)
  return target;
}

size_t CommandSheetInsertDrawablesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSheetInsertDrawablesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_sheet_id()) {
    // required .TSP.UUID sheet_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_id_);
  }

  return total_size;
}
size_t CommandSheetInsertDrawablesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSheetInsertDrawablesArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID sheet_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 3;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.AddIdOperationArgs args_list = 4;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID custom_format_keys = 6;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID chart_entity_uid_for_backing_tables = 11;
  total_size += 1UL * this->_internal_chart_entity_uid_for_backing_tables_size();
  for (const auto& msg : this->chart_entity_uid_for_backing_tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference backing_tables = 12;
  total_size += 1UL * this->_internal_backing_tables_size();
  for (const auto& msg : this->backing_tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSP.Reference drawable_undo_object = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_undo_object_);
    }

    // optional .TSP.Reference formula_rewrite_command_for_undo = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formula_rewrite_command_for_undo_);
    }

    // optional bool forPaste = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 saved_next_untitled_resolver_index = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_saved_next_untitled_resolver_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSheetInsertDrawablesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSheetInsertDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSheetInsertDrawablesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSheetInsertDrawablesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSheetInsertDrawablesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSheetInsertDrawablesArchive)
    MergeFrom(*source);
  }
}

void CommandSheetInsertDrawablesArchive::MergeFrom(const CommandSheetInsertDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSheetInsertDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawables_.MergeFrom(from.drawables_);
  args_list_.MergeFrom(from.args_list_);
  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  chart_entity_uid_for_backing_tables_.MergeFrom(from.chart_entity_uid_for_backing_tables_);
  backing_tables_.MergeFrom(from.backing_tables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sheet_id()->::TSP::UUID::MergeFrom(from._internal_sheet_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_drawable_undo_object()->::TSP::Reference::MergeFrom(from._internal_drawable_undo_object());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_formula_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(from._internal_formula_rewrite_command_for_undo());
    }
    if (cached_has_bits & 0x00000010u) {
      forpaste_ = from.forpaste_;
    }
    if (cached_has_bits & 0x00000020u) {
      saved_next_untitled_resolver_index_ = from.saved_next_untitled_resolver_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSheetInsertDrawablesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSheetInsertDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSheetInsertDrawablesArchive::CopyFrom(const CommandSheetInsertDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSheetInsertDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSheetInsertDrawablesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chart_entity_uid_for_backing_tables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(backing_tables_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_id()) {
    if (!sheet_id_->IsInitialized()) return false;
  }
  if (_internal_has_drawable_undo_object()) {
    if (!drawable_undo_object_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command_for_undo()) {
    if (!formula_rewrite_command_for_undo_->IsInitialized()) return false;
  }
  return true;
}

void CommandSheetInsertDrawablesArchive::InternalSwap(CommandSheetInsertDrawablesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawables_.InternalSwap(&other->drawables_);
  args_list_.InternalSwap(&other->args_list_);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  chart_entity_uid_for_backing_tables_.InternalSwap(&other->chart_entity_uid_for_backing_tables_);
  backing_tables_.InternalSwap(&other->backing_tables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, saved_next_untitled_resolver_index_)
      + sizeof(CommandSheetInsertDrawablesArchive::saved_next_untitled_resolver_index_)
      - PROTOBUF_FIELD_OFFSET(CommandSheetInsertDrawablesArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSheetInsertDrawablesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[1]);
}

// ===================================================================

class CommandSheetRemoveDrawablesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSheetRemoveDrawablesArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSheetRemoveDrawablesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& sheet_id(const CommandSheetRemoveDrawablesArchive* msg);
  static void set_has_sheet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSheetRemoveDrawablesArchive::_Internal::super(const CommandSheetRemoveDrawablesArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSheetRemoveDrawablesArchive::_Internal::sheet_id(const CommandSheetRemoveDrawablesArchive* msg) {
  return *msg->sheet_id_;
}
void CommandSheetRemoveDrawablesArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSheetRemoveDrawablesArchive::clear_sheet_id() {
  if (sheet_id_ != nullptr) sheet_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSheetRemoveDrawablesArchive::clear_args_list() {
  args_list_.Clear();
}
void CommandSheetRemoveDrawablesArchive::clear_drawables() {
  drawables_.Clear();
}
void CommandSheetRemoveDrawablesArchive::clear_old_sheet_sidebar_order() {
  old_sheet_sidebar_order_.Clear();
}
void CommandSheetRemoveDrawablesArchive::clear_chart_entity_uid_for_backing_tables() {
  chart_entity_uid_for_backing_tables_.Clear();
}
void CommandSheetRemoveDrawablesArchive::clear_backing_table_uids() {
  backing_table_uids_.Clear();
}
CommandSheetRemoveDrawablesArchive::CommandSheetRemoveDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena),
  drawables_(arena),
  old_sheet_sidebar_order_(arena),
  chart_entity_uid_for_backing_tables_(arena),
  backing_table_uids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSheetRemoveDrawablesArchive)
}
CommandSheetRemoveDrawablesArchive::CommandSheetRemoveDrawablesArchive(const CommandSheetRemoveDrawablesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_list_(from.args_list_),
      drawables_(from.drawables_),
      old_sheet_sidebar_order_(from.old_sheet_sidebar_order_),
      chart_entity_uid_for_backing_tables_(from.chart_entity_uid_for_backing_tables_),
      backing_table_uids_(from.backing_table_uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_sheet_id()) {
    sheet_id_ = new ::TSP::UUID(*from.sheet_id_);
  } else {
    sheet_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandSheetRemoveDrawablesArchive)
}

void CommandSheetRemoveDrawablesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sheet_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(sheet_id_));
}

CommandSheetRemoveDrawablesArchive::~CommandSheetRemoveDrawablesArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSheetRemoveDrawablesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSheetRemoveDrawablesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete sheet_id_;
}

void CommandSheetRemoveDrawablesArchive::ArenaDtor(void* object) {
  CommandSheetRemoveDrawablesArchive* _this = reinterpret_cast< CommandSheetRemoveDrawablesArchive* >(object);
  (void)_this;
}
void CommandSheetRemoveDrawablesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSheetRemoveDrawablesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSheetRemoveDrawablesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSheetRemoveDrawablesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  drawables_.Clear();
  old_sheet_sidebar_order_.Clear();
  chart_entity_uid_for_backing_tables_.Clear();
  backing_table_uids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sheet_id_ != nullptr);
      sheet_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSheetRemoveDrawablesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RemoveIdOperationArgs args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_sheet_sidebar_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_sheet_sidebar_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID chart_entity_uid_for_backing_tables = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_entity_uid_for_backing_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID backing_table_uids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_backing_table_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSheetRemoveDrawablesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSheetRemoveDrawablesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID sheet_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet_id(this), target, stream);
  }

  // repeated .TSK.RemoveIdOperationArgs args_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_args_list(i), target, stream);
  }

  // repeated .TSP.Reference drawables = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_drawables(i), target, stream);
  }

  // repeated .TSP.Reference old_sheet_sidebar_order = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_sheet_sidebar_order_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_old_sheet_sidebar_order(i), target, stream);
  }

  // repeated .TSP.UUID chart_entity_uid_for_backing_tables = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chart_entity_uid_for_backing_tables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_chart_entity_uid_for_backing_tables(i), target, stream);
  }

  // repeated .TSP.UUID backing_table_uids = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_backing_table_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_backing_table_uids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSheetRemoveDrawablesArchive)
  return target;
}

size_t CommandSheetRemoveDrawablesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSheetRemoveDrawablesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_sheet_id()) {
    // required .TSP.UUID sheet_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_id_);
  }

  return total_size;
}
size_t CommandSheetRemoveDrawablesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSheetRemoveDrawablesArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID sheet_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RemoveIdOperationArgs args_list = 3;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference drawables = 4;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_sheet_sidebar_order = 5;
  total_size += 1UL * this->_internal_old_sheet_sidebar_order_size();
  for (const auto& msg : this->old_sheet_sidebar_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID chart_entity_uid_for_backing_tables = 6;
  total_size += 1UL * this->_internal_chart_entity_uid_for_backing_tables_size();
  for (const auto& msg : this->chart_entity_uid_for_backing_tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID backing_table_uids = 7;
  total_size += 1UL * this->_internal_backing_table_uids_size();
  for (const auto& msg : this->backing_table_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSheetRemoveDrawablesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSheetRemoveDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSheetRemoveDrawablesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSheetRemoveDrawablesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSheetRemoveDrawablesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSheetRemoveDrawablesArchive)
    MergeFrom(*source);
  }
}

void CommandSheetRemoveDrawablesArchive::MergeFrom(const CommandSheetRemoveDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSheetRemoveDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
  drawables_.MergeFrom(from.drawables_);
  old_sheet_sidebar_order_.MergeFrom(from.old_sheet_sidebar_order_);
  chart_entity_uid_for_backing_tables_.MergeFrom(from.chart_entity_uid_for_backing_tables_);
  backing_table_uids_.MergeFrom(from.backing_table_uids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sheet_id()->::TSP::UUID::MergeFrom(from._internal_sheet_id());
    }
  }
}

void CommandSheetRemoveDrawablesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSheetRemoveDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSheetRemoveDrawablesArchive::CopyFrom(const CommandSheetRemoveDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSheetRemoveDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSheetRemoveDrawablesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_sheet_sidebar_order_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chart_entity_uid_for_backing_tables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(backing_table_uids_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_id()) {
    if (!sheet_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandSheetRemoveDrawablesArchive::InternalSwap(CommandSheetRemoveDrawablesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_list_.InternalSwap(&other->args_list_);
  drawables_.InternalSwap(&other->drawables_);
  old_sheet_sidebar_order_.InternalSwap(&other->old_sheet_sidebar_order_);
  chart_entity_uid_for_backing_tables_.InternalSwap(&other->chart_entity_uid_for_backing_tables_);
  backing_table_uids_.InternalSwap(&other->backing_table_uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, sheet_id_)
      + sizeof(CommandSheetRemoveDrawablesArchive::sheet_id_)
      - PROTOBUF_FIELD_OFFSET(CommandSheetRemoveDrawablesArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSheetRemoveDrawablesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[2]);
}

// ===================================================================

class CommandSheetMoveDrawableZOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSheetMoveDrawableZOrderArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSheetMoveDrawableZOrderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& sheet_id(const CommandSheetMoveDrawableZOrderArchive* msg);
  static void set_has_sheet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSheetMoveDrawableZOrderArchive::_Internal::super(const CommandSheetMoveDrawableZOrderArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSheetMoveDrawableZOrderArchive::_Internal::sheet_id(const CommandSheetMoveDrawableZOrderArchive* msg) {
  return *msg->sheet_id_;
}
void CommandSheetMoveDrawableZOrderArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSheetMoveDrawableZOrderArchive::clear_sheet_id() {
  if (sheet_id_ != nullptr) sheet_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSheetMoveDrawableZOrderArchive::clear_args_list() {
  args_list_.Clear();
}
CommandSheetMoveDrawableZOrderArchive::CommandSheetMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSheetMoveDrawableZOrderArchive)
}
CommandSheetMoveDrawableZOrderArchive::CommandSheetMoveDrawableZOrderArchive(const CommandSheetMoveDrawableZOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_list_(from.args_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_sheet_id()) {
    sheet_id_ = new ::TSP::UUID(*from.sheet_id_);
  } else {
    sheet_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandSheetMoveDrawableZOrderArchive)
}

void CommandSheetMoveDrawableZOrderArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sheet_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(sheet_id_));
}

CommandSheetMoveDrawableZOrderArchive::~CommandSheetMoveDrawableZOrderArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSheetMoveDrawableZOrderArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSheetMoveDrawableZOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete sheet_id_;
}

void CommandSheetMoveDrawableZOrderArchive::ArenaDtor(void* object) {
  CommandSheetMoveDrawableZOrderArchive* _this = reinterpret_cast< CommandSheetMoveDrawableZOrderArchive* >(object);
  (void)_this;
}
void CommandSheetMoveDrawableZOrderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSheetMoveDrawableZOrderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSheetMoveDrawableZOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSheetMoveDrawableZOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sheet_id_ != nullptr);
      sheet_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSheetMoveDrawableZOrderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RearrangeIdOperationArgs args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSheetMoveDrawableZOrderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSheetMoveDrawableZOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID sheet_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet_id(this), target, stream);
  }

  // repeated .TSK.RearrangeIdOperationArgs args_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_args_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSheetMoveDrawableZOrderArchive)
  return target;
}

size_t CommandSheetMoveDrawableZOrderArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSheetMoveDrawableZOrderArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_sheet_id()) {
    // required .TSP.UUID sheet_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_id_);
  }

  return total_size;
}
size_t CommandSheetMoveDrawableZOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSheetMoveDrawableZOrderArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID sheet_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RearrangeIdOperationArgs args_list = 3;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSheetMoveDrawableZOrderArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSheetMoveDrawableZOrderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSheetMoveDrawableZOrderArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSheetMoveDrawableZOrderArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSheetMoveDrawableZOrderArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSheetMoveDrawableZOrderArchive)
    MergeFrom(*source);
  }
}

void CommandSheetMoveDrawableZOrderArchive::MergeFrom(const CommandSheetMoveDrawableZOrderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSheetMoveDrawableZOrderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sheet_id()->::TSP::UUID::MergeFrom(from._internal_sheet_id());
    }
  }
}

void CommandSheetMoveDrawableZOrderArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSheetMoveDrawableZOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSheetMoveDrawableZOrderArchive::CopyFrom(const CommandSheetMoveDrawableZOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSheetMoveDrawableZOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSheetMoveDrawableZOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_id()) {
    if (!sheet_id_->IsInitialized()) return false;
  }
  return true;
}

void CommandSheetMoveDrawableZOrderArchive::InternalSwap(CommandSheetMoveDrawableZOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_list_.InternalSwap(&other->args_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSheetMoveDrawableZOrderArchive, sheet_id_)
      + sizeof(CommandSheetMoveDrawableZOrderArchive::sheet_id_)
      - PROTOBUF_FIELD_OFFSET(CommandSheetMoveDrawableZOrderArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSheetMoveDrawableZOrderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[3]);
}

// ===================================================================

class CommandDocumentInsertSheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDocumentInsertSheetArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandDocumentInsertSheetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allowsamesheetnameasforms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& drawable_undo_object(const CommandDocumentInsertSheetArchive* msg);
  static void set_has_drawable_undo_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_for_paste(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandDocumentInsertSheetArchive::_Internal::super(const CommandDocumentInsertSheetArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandDocumentInsertSheetArchive::_Internal::drawable_undo_object(const CommandDocumentInsertSheetArchive* msg) {
  return *msg->drawable_undo_object_;
}
void CommandDocumentInsertSheetArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandDocumentInsertSheetArchive::clear_argslist() {
  argslist_.Clear();
}
void CommandDocumentInsertSheetArchive::clear_sheets() {
  sheets_.Clear();
}
void CommandDocumentInsertSheetArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
void CommandDocumentInsertSheetArchive::clear_drawable_undo_object() {
  if (drawable_undo_object_ != nullptr) drawable_undo_object_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandDocumentInsertSheetArchive::clear_sheet_uistates() {
  sheet_uistates_.Clear();
}
CommandDocumentInsertSheetArchive::CommandDocumentInsertSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  argslist_(arena),
  sheets_(arena),
  custom_format_keys_(arena),
  sheet_uistates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandDocumentInsertSheetArchive)
}
CommandDocumentInsertSheetArchive::CommandDocumentInsertSheetArchive(const CommandDocumentInsertSheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argslist_(from.argslist_),
      sheets_(from.sheets_),
      custom_format_keys_(from.custom_format_keys_),
      sheet_uistates_(from.sheet_uistates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_drawable_undo_object()) {
    drawable_undo_object_ = new ::TSP::Reference(*from.drawable_undo_object_);
  } else {
    drawable_undo_object_ = nullptr;
  }
  ::memcpy(&allowsamesheetnameasforms_, &from.allowsamesheetnameasforms_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_paste_) -
    reinterpret_cast<char*>(&allowsamesheetnameasforms_)) + sizeof(for_paste_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandDocumentInsertSheetArchive)
}

void CommandDocumentInsertSheetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&for_paste_) -
    reinterpret_cast<char*>(&super_)) + sizeof(for_paste_));
}

CommandDocumentInsertSheetArchive::~CommandDocumentInsertSheetArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandDocumentInsertSheetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandDocumentInsertSheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete drawable_undo_object_;
}

void CommandDocumentInsertSheetArchive::ArenaDtor(void* object) {
  CommandDocumentInsertSheetArchive* _this = reinterpret_cast< CommandDocumentInsertSheetArchive* >(object);
  (void)_this;
}
void CommandDocumentInsertSheetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandDocumentInsertSheetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandDocumentInsertSheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandDocumentInsertSheetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  argslist_.Clear();
  sheets_.Clear();
  custom_format_keys_.Clear();
  sheet_uistates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(drawable_undo_object_ != nullptr);
      drawable_undo_object_->Clear();
    }
  }
  ::memset(&allowsamesheetnameasforms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_paste_) -
      reinterpret_cast<char*>(&allowsamesheetnameasforms_)) + sizeof(for_paste_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDocumentInsertSheetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.AddIdOperationArgs argsList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_argslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference sheets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool allowSameSheetNameAsForms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_allowsamesheetnameasforms(&has_bits);
          allowsamesheetnameasforms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference drawable_undo_object = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_undo_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TN.UUIDSheetUIStateDictionaryArchive sheet_uistates = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheet_uistates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool for_paste = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_for_paste(&has_bits);
          for_paste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandDocumentInsertSheetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandDocumentInsertSheetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSK.AddIdOperationArgs argsList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_argslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_argslist(i), target, stream);
  }

  // repeated .TSP.Reference sheets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sheets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sheets(i), target, stream);
  }

  // optional bool allowSameSheetNameAsForms = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_allowsamesheetnameasforms(), target);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_custom_format_keys(i), target, stream);
  }

  // optional .TSP.Reference drawable_undo_object = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::drawable_undo_object(this), target, stream);
  }

  // repeated .TN.UUIDSheetUIStateDictionaryArchive sheet_uistates = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sheet_uistates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_sheet_uistates(i), target, stream);
  }

  // optional bool for_paste = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_for_paste(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandDocumentInsertSheetArchive)
  return target;
}

size_t CommandDocumentInsertSheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandDocumentInsertSheetArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.AddIdOperationArgs argsList = 2;
  total_size += 1UL * this->_internal_argslist_size();
  for (const auto& msg : this->argslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference sheets = 3;
  total_size += 1UL * this->_internal_sheets_size();
  for (const auto& msg : this->sheets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TN.UUIDSheetUIStateDictionaryArchive sheet_uistates = 7;
  total_size += 1UL * this->_internal_sheet_uistates_size();
  for (const auto& msg : this->sheet_uistates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference drawable_undo_object = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_undo_object_);
    }

    // optional bool allowSameSheetNameAsForms = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool for_paste = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandDocumentInsertSheetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandDocumentInsertSheetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandDocumentInsertSheetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandDocumentInsertSheetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandDocumentInsertSheetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandDocumentInsertSheetArchive)
    MergeFrom(*source);
  }
}

void CommandDocumentInsertSheetArchive::MergeFrom(const CommandDocumentInsertSheetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandDocumentInsertSheetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  argslist_.MergeFrom(from.argslist_);
  sheets_.MergeFrom(from.sheets_);
  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  sheet_uistates_.MergeFrom(from.sheet_uistates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_drawable_undo_object()->::TSP::Reference::MergeFrom(from._internal_drawable_undo_object());
    }
    if (cached_has_bits & 0x00000004u) {
      allowsamesheetnameasforms_ = from.allowsamesheetnameasforms_;
    }
    if (cached_has_bits & 0x00000008u) {
      for_paste_ = from.for_paste_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandDocumentInsertSheetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandDocumentInsertSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDocumentInsertSheetArchive::CopyFrom(const CommandDocumentInsertSheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandDocumentInsertSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDocumentInsertSheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(argslist_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sheets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sheet_uistates_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_drawable_undo_object()) {
    if (!drawable_undo_object_->IsInitialized()) return false;
  }
  return true;
}

void CommandDocumentInsertSheetArchive::InternalSwap(CommandDocumentInsertSheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  argslist_.InternalSwap(&other->argslist_);
  sheets_.InternalSwap(&other->sheets_);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  sheet_uistates_.InternalSwap(&other->sheet_uistates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDocumentInsertSheetArchive, for_paste_)
      + sizeof(CommandDocumentInsertSheetArchive::for_paste_)
      - PROTOBUF_FIELD_OFFSET(CommandDocumentInsertSheetArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDocumentInsertSheetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[4]);
}

// ===================================================================

class CommandDocumentRemoveSheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDocumentRemoveSheetArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandDocumentRemoveSheetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rescueid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_undo_paste(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandDocumentRemoveSheetArchive::_Internal::super(const CommandDocumentRemoveSheetArchive* msg) {
  return *msg->super_;
}
void CommandDocumentRemoveSheetArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandDocumentRemoveSheetArchive::clear_argslist() {
  argslist_.Clear();
}
void CommandDocumentRemoveSheetArchive::clear_sheets() {
  sheets_.Clear();
}
void CommandDocumentRemoveSheetArchive::clear_sheet_uistates() {
  sheet_uistates_.Clear();
}
CommandDocumentRemoveSheetArchive::CommandDocumentRemoveSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  argslist_(arena),
  sheets_(arena),
  sheet_uistates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandDocumentRemoveSheetArchive)
}
CommandDocumentRemoveSheetArchive::CommandDocumentRemoveSheetArchive(const CommandDocumentRemoveSheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argslist_(from.argslist_),
      sheets_(from.sheets_),
      sheet_uistates_(from.sheet_uistates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rescueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rescueid()) {
    rescueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rescueid(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  is_undo_paste_ = from.is_undo_paste_;
  // @@protoc_insertion_point(copy_constructor:TN.CommandDocumentRemoveSheetArchive)
}

void CommandDocumentRemoveSheetArchive::SharedCtor() {
rescueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_undo_paste_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_undo_paste_));
}

CommandDocumentRemoveSheetArchive::~CommandDocumentRemoveSheetArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandDocumentRemoveSheetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandDocumentRemoveSheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rescueid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void CommandDocumentRemoveSheetArchive::ArenaDtor(void* object) {
  CommandDocumentRemoveSheetArchive* _this = reinterpret_cast< CommandDocumentRemoveSheetArchive* >(object);
  (void)_this;
}
void CommandDocumentRemoveSheetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandDocumentRemoveSheetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandDocumentRemoveSheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandDocumentRemoveSheetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  argslist_.Clear();
  sheets_.Clear();
  sheet_uistates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      rescueid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  is_undo_paste_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDocumentRemoveSheetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RemoveIdOperationArgs argsList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_argslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference sheets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required string rescueId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rescueid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TN.CommandDocumentRemoveSheetArchive.rescueId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TN.UUIDSheetUIStateDictionaryArchive sheet_uistates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheet_uistates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_undo_paste = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_undo_paste(&has_bits);
          is_undo_paste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandDocumentRemoveSheetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandDocumentRemoveSheetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSK.RemoveIdOperationArgs argsList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_argslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_argslist(i), target, stream);
  }

  // repeated .TSP.Reference sheets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sheets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sheets(i), target, stream);
  }

  // required string rescueId = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rescueid().data(), static_cast<int>(this->_internal_rescueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandDocumentRemoveSheetArchive.rescueId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rescueid(), target);
  }

  // repeated .TN.UUIDSheetUIStateDictionaryArchive sheet_uistates = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sheet_uistates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_sheet_uistates(i), target, stream);
  }

  // optional bool is_undo_paste = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_undo_paste(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandDocumentRemoveSheetArchive)
  return target;
}

size_t CommandDocumentRemoveSheetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandDocumentRemoveSheetArchive)
  size_t total_size = 0;

  if (_internal_has_rescueid()) {
    // required string rescueId = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rescueid());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t CommandDocumentRemoveSheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandDocumentRemoveSheetArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string rescueId = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rescueid());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RemoveIdOperationArgs argsList = 2;
  total_size += 1UL * this->_internal_argslist_size();
  for (const auto& msg : this->argslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference sheets = 3;
  total_size += 1UL * this->_internal_sheets_size();
  for (const auto& msg : this->sheets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TN.UUIDSheetUIStateDictionaryArchive sheet_uistates = 5;
  total_size += 1UL * this->_internal_sheet_uistates_size();
  for (const auto& msg : this->sheet_uistates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_undo_paste = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandDocumentRemoveSheetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandDocumentRemoveSheetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandDocumentRemoveSheetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandDocumentRemoveSheetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandDocumentRemoveSheetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandDocumentRemoveSheetArchive)
    MergeFrom(*source);
  }
}

void CommandDocumentRemoveSheetArchive::MergeFrom(const CommandDocumentRemoveSheetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandDocumentRemoveSheetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  argslist_.MergeFrom(from.argslist_);
  sheets_.MergeFrom(from.sheets_);
  sheet_uistates_.MergeFrom(from.sheet_uistates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rescueid(from._internal_rescueid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      is_undo_paste_ = from.is_undo_paste_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandDocumentRemoveSheetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandDocumentRemoveSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDocumentRemoveSheetArchive::CopyFrom(const CommandDocumentRemoveSheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandDocumentRemoveSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDocumentRemoveSheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(argslist_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sheets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sheet_uistates_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandDocumentRemoveSheetArchive::InternalSwap(CommandDocumentRemoveSheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  argslist_.InternalSwap(&other->argslist_);
  sheets_.InternalSwap(&other->sheets_);
  sheet_uistates_.InternalSwap(&other->sheet_uistates_);
  rescueid_.Swap(&other->rescueid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, is_undo_paste_)
      + sizeof(CommandDocumentRemoveSheetArchive::is_undo_paste_)
      - PROTOBUF_FIELD_OFFSET(CommandDocumentRemoveSheetArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDocumentRemoveSheetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[5]);
}

// ===================================================================

class CommandDocumentReorderSheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDocumentReorderSheetArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandDocumentReorderSheetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandDocumentReorderSheetArchive::_Internal::super(const CommandDocumentReorderSheetArchive* msg) {
  return *msg->super_;
}
void CommandDocumentReorderSheetArchive::clear_argslist() {
  argslist_.Clear();
}
void CommandDocumentReorderSheetArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandDocumentReorderSheetArchive::CommandDocumentReorderSheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  argslist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandDocumentReorderSheetArchive)
}
CommandDocumentReorderSheetArchive::CommandDocumentReorderSheetArchive(const CommandDocumentReorderSheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argslist_(from.argslist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandDocumentReorderSheetArchive)
}

void CommandDocumentReorderSheetArchive::SharedCtor() {
super_ = nullptr;
}

CommandDocumentReorderSheetArchive::~CommandDocumentReorderSheetArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandDocumentReorderSheetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandDocumentReorderSheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandDocumentReorderSheetArchive::ArenaDtor(void* object) {
  CommandDocumentReorderSheetArchive* _this = reinterpret_cast< CommandDocumentReorderSheetArchive* >(object);
  (void)_this;
}
void CommandDocumentReorderSheetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandDocumentReorderSheetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandDocumentReorderSheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandDocumentReorderSheetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  argslist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDocumentReorderSheetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSK.RearrangeIdOperationArgs argsList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_argslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandDocumentReorderSheetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandDocumentReorderSheetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSK.RearrangeIdOperationArgs argsList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_argslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_argslist(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandDocumentReorderSheetArchive)
  return target;
}

size_t CommandDocumentReorderSheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandDocumentReorderSheetArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 2;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RearrangeIdOperationArgs argsList = 1;
  total_size += 1UL * this->_internal_argslist_size();
  for (const auto& msg : this->argslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandDocumentReorderSheetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandDocumentReorderSheetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandDocumentReorderSheetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandDocumentReorderSheetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandDocumentReorderSheetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandDocumentReorderSheetArchive)
    MergeFrom(*source);
  }
}

void CommandDocumentReorderSheetArchive::MergeFrom(const CommandDocumentReorderSheetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandDocumentReorderSheetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  argslist_.MergeFrom(from.argslist_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
}

void CommandDocumentReorderSheetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandDocumentReorderSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDocumentReorderSheetArchive::CopyFrom(const CommandDocumentReorderSheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandDocumentReorderSheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDocumentReorderSheetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(argslist_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandDocumentReorderSheetArchive::InternalSwap(CommandDocumentReorderSheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  argslist_.InternalSwap(&other->argslist_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDocumentReorderSheetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[6]);
}

// ===================================================================

class CommandSetSheetNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetSheetNameArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSetSheetNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_newname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& sheet_uid(const CommandSetSheetNameArchive* msg);
  static void set_has_sheet_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_oldname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSetSheetNameArchive::_Internal::super(const CommandSetSheetNameArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSetSheetNameArchive::_Internal::sheet_uid(const CommandSetSheetNameArchive* msg) {
  return *msg->sheet_uid_;
}
void CommandSetSheetNameArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSetSheetNameArchive::clear_sheet_uid() {
  if (sheet_uid_ != nullptr) sheet_uid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandSetSheetNameArchive::CommandSetSheetNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetSheetNameArchive)
}
CommandSetSheetNameArchive::CommandSetSheetNameArchive(const CommandSetSheetNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  newname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_newname()) {
    newname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newname(), 
      GetArena());
  }
  oldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_oldname()) {
    oldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oldname(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_sheet_uid()) {
    sheet_uid_ = new ::TSP::UUID(*from.sheet_uid_);
  } else {
    sheet_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetSheetNameArchive)
}

void CommandSetSheetNameArchive::SharedCtor() {
newname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
oldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sheet_uid_) -
    reinterpret_cast<char*>(&super_)) + sizeof(sheet_uid_));
}

CommandSetSheetNameArchive::~CommandSetSheetNameArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetSheetNameArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetSheetNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  newname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete sheet_uid_;
}

void CommandSetSheetNameArchive::ArenaDtor(void* object) {
  CommandSetSheetNameArchive* _this = reinterpret_cast< CommandSetSheetNameArchive* >(object);
  (void)_this;
}
void CommandSetSheetNameArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetSheetNameArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetSheetNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetSheetNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      newname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      oldname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sheet_uid_ != nullptr);
      sheet_uid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetSheetNameArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string newname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_newname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TN.CommandSetSheetNameArchive.newname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string oldname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_oldname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TN.CommandSetSheetNameArchive.oldname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetSheetNameArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetSheetNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required string newname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newname().data(), static_cast<int>(this->_internal_newname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandSetSheetNameArchive.newname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newname(), target);
  }

  // required .TSP.UUID sheet_uid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sheet_uid(this), target, stream);
  }

  // optional string oldname = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oldname().data(), static_cast<int>(this->_internal_oldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandSetSheetNameArchive.oldname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_oldname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetSheetNameArchive)
  return target;
}

size_t CommandSetSheetNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetSheetNameArchive)
  size_t total_size = 0;

  if (_internal_has_newname()) {
    // required string newname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_sheet_uid()) {
    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);
  }

  return total_size;
}
size_t CommandSetSheetNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetSheetNameArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string newname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string oldname = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetSheetNameArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetSheetNameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetSheetNameArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetSheetNameArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetSheetNameArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetSheetNameArchive)
    MergeFrom(*source);
  }
}

void CommandSetSheetNameArchive::MergeFrom(const CommandSetSheetNameArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetSheetNameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_newname(from._internal_newname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_oldname(from._internal_oldname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_sheet_uid()->::TSP::UUID::MergeFrom(from._internal_sheet_uid());
    }
  }
}

void CommandSetSheetNameArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetSheetNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetSheetNameArchive::CopyFrom(const CommandSetSheetNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetSheetNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSheetNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_uid()) {
    if (!sheet_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetSheetNameArchive::InternalSwap(CommandSetSheetNameArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  newname_.Swap(&other->newname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  oldname_.Swap(&other->oldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetSheetNameArchive, sheet_uid_)
      + sizeof(CommandSetSheetNameArchive::sheet_uid_)
      - PROTOBUF_FIELD_OFFSET(CommandSetSheetNameArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetSheetNameArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[7]);
}

// ===================================================================

class CommandSetSheetShouldPrintCommentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetSheetShouldPrintCommentsArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSetSheetShouldPrintCommentsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_should_print_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& sheet_uid(const CommandSetSheetShouldPrintCommentsArchive* msg);
  static void set_has_sheet_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_should_print_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSetSheetShouldPrintCommentsArchive::_Internal::super(const CommandSetSheetShouldPrintCommentsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSetSheetShouldPrintCommentsArchive::_Internal::sheet_uid(const CommandSetSheetShouldPrintCommentsArchive* msg) {
  return *msg->sheet_uid_;
}
void CommandSetSheetShouldPrintCommentsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetSheetShouldPrintCommentsArchive::clear_sheet_uid() {
  if (sheet_uid_ != nullptr) sheet_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetSheetShouldPrintCommentsArchive::CommandSetSheetShouldPrintCommentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetSheetShouldPrintCommentsArchive)
}
CommandSetSheetShouldPrintCommentsArchive::CommandSetSheetShouldPrintCommentsArchive(const CommandSetSheetShouldPrintCommentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_sheet_uid()) {
    sheet_uid_ = new ::TSP::UUID(*from.sheet_uid_);
  } else {
    sheet_uid_ = nullptr;
  }
  ::memcpy(&new_should_print_comments_, &from.new_should_print_comments_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_should_print_comments_) -
    reinterpret_cast<char*>(&new_should_print_comments_)) + sizeof(old_should_print_comments_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetSheetShouldPrintCommentsArchive)
}

void CommandSetSheetShouldPrintCommentsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_should_print_comments_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_should_print_comments_));
}

CommandSetSheetShouldPrintCommentsArchive::~CommandSetSheetShouldPrintCommentsArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetSheetShouldPrintCommentsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetSheetShouldPrintCommentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete sheet_uid_;
}

void CommandSetSheetShouldPrintCommentsArchive::ArenaDtor(void* object) {
  CommandSetSheetShouldPrintCommentsArchive* _this = reinterpret_cast< CommandSetSheetShouldPrintCommentsArchive* >(object);
  (void)_this;
}
void CommandSetSheetShouldPrintCommentsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetSheetShouldPrintCommentsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetSheetShouldPrintCommentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetSheetShouldPrintCommentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sheet_uid_ != nullptr);
      sheet_uid_->Clear();
    }
  }
  ::memset(&new_should_print_comments_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_should_print_comments_) -
      reinterpret_cast<char*>(&new_should_print_comments_)) + sizeof(old_should_print_comments_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetSheetShouldPrintCommentsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool new_should_print_comments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_should_print_comments(&has_bits);
          new_should_print_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool old_should_print_comments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_old_should_print_comments(&has_bits);
          old_should_print_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetSheetShouldPrintCommentsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetSheetShouldPrintCommentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool new_should_print_comments = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_new_should_print_comments(), target);
  }

  // required .TSP.UUID sheet_uid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sheet_uid(this), target, stream);
  }

  // required bool old_should_print_comments = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_old_should_print_comments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetSheetShouldPrintCommentsArchive)
  return target;
}

size_t CommandSetSheetShouldPrintCommentsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetSheetShouldPrintCommentsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_sheet_uid()) {
    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);
  }

  if (_internal_has_new_should_print_comments()) {
    // required bool new_should_print_comments = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_old_should_print_comments()) {
    // required bool old_should_print_comments = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetSheetShouldPrintCommentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetSheetShouldPrintCommentsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);

    // required bool new_should_print_comments = 2;
    total_size += 1 + 1;

    // required bool old_should_print_comments = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetSheetShouldPrintCommentsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetSheetShouldPrintCommentsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetSheetShouldPrintCommentsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetSheetShouldPrintCommentsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetSheetShouldPrintCommentsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetSheetShouldPrintCommentsArchive)
    MergeFrom(*source);
  }
}

void CommandSetSheetShouldPrintCommentsArchive::MergeFrom(const CommandSetSheetShouldPrintCommentsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetSheetShouldPrintCommentsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sheet_uid()->::TSP::UUID::MergeFrom(from._internal_sheet_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      new_should_print_comments_ = from.new_should_print_comments_;
    }
    if (cached_has_bits & 0x00000008u) {
      old_should_print_comments_ = from.old_should_print_comments_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetSheetShouldPrintCommentsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetSheetShouldPrintCommentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetSheetShouldPrintCommentsArchive::CopyFrom(const CommandSetSheetShouldPrintCommentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetSheetShouldPrintCommentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSheetShouldPrintCommentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_uid()) {
    if (!sheet_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetSheetShouldPrintCommentsArchive::InternalSwap(CommandSetSheetShouldPrintCommentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetSheetShouldPrintCommentsArchive, old_should_print_comments_)
      + sizeof(CommandSetSheetShouldPrintCommentsArchive::old_should_print_comments_)
      - PROTOBUF_FIELD_OFFSET(CommandSetSheetShouldPrintCommentsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetSheetShouldPrintCommentsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[8]);
}

// ===================================================================

class CommandSetSheetDirectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetSheetDirectionArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSetSheetDirectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newdirection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& sheet_uid(const CommandSetSheetDirectionArchive* msg);
  static void set_has_sheet_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_olddirection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSetSheetDirectionArchive::_Internal::super(const CommandSetSheetDirectionArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSetSheetDirectionArchive::_Internal::sheet_uid(const CommandSetSheetDirectionArchive* msg) {
  return *msg->sheet_uid_;
}
void CommandSetSheetDirectionArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetSheetDirectionArchive::clear_sheet_uid() {
  if (sheet_uid_ != nullptr) sheet_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetSheetDirectionArchive::CommandSetSheetDirectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetSheetDirectionArchive)
}
CommandSetSheetDirectionArchive::CommandSetSheetDirectionArchive(const CommandSetSheetDirectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_sheet_uid()) {
    sheet_uid_ = new ::TSP::UUID(*from.sheet_uid_);
  } else {
    sheet_uid_ = nullptr;
  }
  ::memcpy(&newdirection_, &from.newdirection_,
    static_cast<size_t>(reinterpret_cast<char*>(&olddirection_) -
    reinterpret_cast<char*>(&newdirection_)) + sizeof(olddirection_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetSheetDirectionArchive)
}

void CommandSetSheetDirectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&olddirection_) -
    reinterpret_cast<char*>(&super_)) + sizeof(olddirection_));
}

CommandSetSheetDirectionArchive::~CommandSetSheetDirectionArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetSheetDirectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetSheetDirectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete sheet_uid_;
}

void CommandSetSheetDirectionArchive::ArenaDtor(void* object) {
  CommandSetSheetDirectionArchive* _this = reinterpret_cast< CommandSetSheetDirectionArchive* >(object);
  (void)_this;
}
void CommandSetSheetDirectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetSheetDirectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetSheetDirectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetSheetDirectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sheet_uid_ != nullptr);
      sheet_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&newdirection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&olddirection_) -
        reinterpret_cast<char*>(&newdirection_)) + sizeof(olddirection_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetSheetDirectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TN.PageLayoutDirection newDirection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TN::PageLayoutDirection_IsValid(val))) {
            _internal_set_newdirection(static_cast<::TN::PageLayoutDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.PageLayoutDirection oldDirection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TN::PageLayoutDirection_IsValid(val))) {
            _internal_set_olddirection(static_cast<::TN::PageLayoutDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetSheetDirectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetSheetDirectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TN.PageLayoutDirection newDirection = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_newdirection(), target);
  }

  // required .TSP.UUID sheet_uid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sheet_uid(this), target, stream);
  }

  // optional .TN.PageLayoutDirection oldDirection = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_olddirection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetSheetDirectionArchive)
  return target;
}

size_t CommandSetSheetDirectionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetSheetDirectionArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_sheet_uid()) {
    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);
  }

  if (_internal_has_newdirection()) {
    // required .TN.PageLayoutDirection newDirection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_newdirection());
  }

  return total_size;
}
size_t CommandSetSheetDirectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetSheetDirectionArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);

    // required .TN.PageLayoutDirection newDirection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_newdirection());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TN.PageLayoutDirection oldDirection = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_olddirection());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetSheetDirectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetSheetDirectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetSheetDirectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetSheetDirectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetSheetDirectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetSheetDirectionArchive)
    MergeFrom(*source);
  }
}

void CommandSetSheetDirectionArchive::MergeFrom(const CommandSetSheetDirectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetSheetDirectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sheet_uid()->::TSP::UUID::MergeFrom(from._internal_sheet_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      newdirection_ = from.newdirection_;
    }
    if (cached_has_bits & 0x00000008u) {
      olddirection_ = from.olddirection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetSheetDirectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetSheetDirectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetSheetDirectionArchive::CopyFrom(const CommandSetSheetDirectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetSheetDirectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSheetDirectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_uid()) {
    if (!sheet_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetSheetDirectionArchive::InternalSwap(CommandSetSheetDirectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetSheetDirectionArchive, olddirection_)
      + sizeof(CommandSetSheetDirectionArchive::olddirection_)
      - PROTOBUF_FIELD_OFFSET(CommandSetSheetDirectionArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetSheetDirectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[9]);
}

// ===================================================================

class CommandSetPageOrientationArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetPageOrientationArchive>()._has_bits_);
  static void set_has_in_portrait_page_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& sheet_uid(const CommandSetPageOrientationArchive* msg);
  static void set_has_sheet_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetPageOrientationArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prev_in_portrait_page_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::UUID&
CommandSetPageOrientationArchive::_Internal::sheet_uid(const CommandSetPageOrientationArchive* msg) {
  return *msg->sheet_uid_;
}
const ::TSK::CommandArchive&
CommandSetPageOrientationArchive::_Internal::super(const CommandSetPageOrientationArchive* msg) {
  return *msg->super_;
}
void CommandSetPageOrientationArchive::clear_sheet_uid() {
  if (sheet_uid_ != nullptr) sheet_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetPageOrientationArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetPageOrientationArchive::CommandSetPageOrientationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetPageOrientationArchive)
}
CommandSetPageOrientationArchive::CommandSetPageOrientationArchive(const CommandSetPageOrientationArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet_uid()) {
    sheet_uid_ = new ::TSP::UUID(*from.sheet_uid_);
  } else {
    sheet_uid_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&in_portrait_page_orientation_, &from.in_portrait_page_orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_in_portrait_page_orientation_) -
    reinterpret_cast<char*>(&in_portrait_page_orientation_)) + sizeof(prev_in_portrait_page_orientation_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetPageOrientationArchive)
}

void CommandSetPageOrientationArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_in_portrait_page_orientation_) -
    reinterpret_cast<char*>(&sheet_uid_)) + sizeof(prev_in_portrait_page_orientation_));
}

CommandSetPageOrientationArchive::~CommandSetPageOrientationArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetPageOrientationArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetPageOrientationArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_uid_;
  if (this != internal_default_instance()) delete super_;
}

void CommandSetPageOrientationArchive::ArenaDtor(void* object) {
  CommandSetPageOrientationArchive* _this = reinterpret_cast< CommandSetPageOrientationArchive* >(object);
  (void)_this;
}
void CommandSetPageOrientationArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetPageOrientationArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetPageOrientationArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetPageOrientationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_uid_ != nullptr);
      sheet_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  ::memset(&in_portrait_page_orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_in_portrait_page_orientation_) -
      reinterpret_cast<char*>(&in_portrait_page_orientation_)) + sizeof(prev_in_portrait_page_orientation_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetPageOrientationArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool in_portrait_page_orientation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_in_portrait_page_orientation(&has_bits);
          in_portrait_page_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool prev_in_portrait_page_orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prev_in_portrait_page_orientation(&has_bits);
          prev_in_portrait_page_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetPageOrientationArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetPageOrientationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool in_portrait_page_orientation = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_in_portrait_page_orientation(), target);
  }

  // required .TSP.UUID sheet_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet_uid(this), target, stream);
  }

  // required .TSK.CommandArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  // required bool prev_in_portrait_page_orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_prev_in_portrait_page_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetPageOrientationArchive)
  return target;
}

size_t CommandSetPageOrientationArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetPageOrientationArchive)
  size_t total_size = 0;

  if (_internal_has_sheet_uid()) {
    // required .TSP.UUID sheet_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_in_portrait_page_orientation()) {
    // required bool in_portrait_page_orientation = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_prev_in_portrait_page_orientation()) {
    // required bool prev_in_portrait_page_orientation = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetPageOrientationArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetPageOrientationArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.UUID sheet_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);

    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool in_portrait_page_orientation = 1;
    total_size += 1 + 1;

    // required bool prev_in_portrait_page_orientation = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetPageOrientationArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetPageOrientationArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetPageOrientationArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetPageOrientationArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetPageOrientationArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetPageOrientationArchive)
    MergeFrom(*source);
  }
}

void CommandSetPageOrientationArchive::MergeFrom(const CommandSetPageOrientationArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetPageOrientationArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet_uid()->::TSP::UUID::MergeFrom(from._internal_sheet_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      in_portrait_page_orientation_ = from.in_portrait_page_orientation_;
    }
    if (cached_has_bits & 0x00000008u) {
      prev_in_portrait_page_orientation_ = from.prev_in_portrait_page_orientation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetPageOrientationArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetPageOrientationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetPageOrientationArchive::CopyFrom(const CommandSetPageOrientationArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetPageOrientationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPageOrientationArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet_uid()) {
    if (!sheet_uid_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetPageOrientationArchive::InternalSwap(CommandSetPageOrientationArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetPageOrientationArchive, prev_in_portrait_page_orientation_)
      + sizeof(CommandSetPageOrientationArchive::prev_in_portrait_page_orientation_)
      - PROTOBUF_FIELD_OFFSET(CommandSetPageOrientationArchive, sheet_uid_)>(
          reinterpret_cast<char*>(&sheet_uid_),
          reinterpret_cast<char*>(&other->sheet_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetPageOrientationArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[10]);
}

// ===================================================================

class CommandSetShowPageNumbersValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetShowPageNumbersValueArchive>()._has_bits_);
  static void set_has_show_page_numbers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& sheet(const CommandSetShowPageNumbersValueArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetShowPageNumbersValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::Reference&
CommandSetShowPageNumbersValueArchive::_Internal::sheet(const CommandSetShowPageNumbersValueArchive* msg) {
  return *msg->sheet_;
}
const ::TSK::CommandArchive&
CommandSetShowPageNumbersValueArchive::_Internal::super(const CommandSetShowPageNumbersValueArchive* msg) {
  return *msg->super_;
}
void CommandSetShowPageNumbersValueArchive::clear_sheet() {
  if (sheet_ != nullptr) sheet_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetShowPageNumbersValueArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetShowPageNumbersValueArchive::CommandSetShowPageNumbersValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetShowPageNumbersValueArchive)
}
CommandSetShowPageNumbersValueArchive::CommandSetShowPageNumbersValueArchive(const CommandSetShowPageNumbersValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    sheet_ = new ::TSP::Reference(*from.sheet_);
  } else {
    sheet_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  show_page_numbers_ = from.show_page_numbers_;
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetShowPageNumbersValueArchive)
}

void CommandSetShowPageNumbersValueArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_page_numbers_) -
    reinterpret_cast<char*>(&sheet_)) + sizeof(show_page_numbers_));
}

CommandSetShowPageNumbersValueArchive::~CommandSetShowPageNumbersValueArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetShowPageNumbersValueArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetShowPageNumbersValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_;
  if (this != internal_default_instance()) delete super_;
}

void CommandSetShowPageNumbersValueArchive::ArenaDtor(void* object) {
  CommandSetShowPageNumbersValueArchive* _this = reinterpret_cast< CommandSetShowPageNumbersValueArchive* >(object);
  (void)_this;
}
void CommandSetShowPageNumbersValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetShowPageNumbersValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetShowPageNumbersValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetShowPageNumbersValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_ != nullptr);
      sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  show_page_numbers_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetShowPageNumbersValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool show_page_numbers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_show_page_numbers(&has_bits);
          show_page_numbers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetShowPageNumbersValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetShowPageNumbersValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool show_page_numbers = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_show_page_numbers(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet(this), target, stream);
  }

  // required .TSK.CommandArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetShowPageNumbersValueArchive)
  return target;
}

size_t CommandSetShowPageNumbersValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetShowPageNumbersValueArchive)
  size_t total_size = 0;

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_show_page_numbers()) {
    // required bool show_page_numbers = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetShowPageNumbersValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetShowPageNumbersValueArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_);

    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool show_page_numbers = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetShowPageNumbersValueArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetShowPageNumbersValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetShowPageNumbersValueArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetShowPageNumbersValueArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetShowPageNumbersValueArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetShowPageNumbersValueArchive)
    MergeFrom(*source);
  }
}

void CommandSetShowPageNumbersValueArchive::MergeFrom(const CommandSetShowPageNumbersValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetShowPageNumbersValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet()->::TSP::Reference::MergeFrom(from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      show_page_numbers_ = from.show_page_numbers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetShowPageNumbersValueArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetShowPageNumbersValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetShowPageNumbersValueArchive::CopyFrom(const CommandSetShowPageNumbersValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetShowPageNumbersValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetShowPageNumbersValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet()) {
    if (!sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetShowPageNumbersValueArchive::InternalSwap(CommandSetShowPageNumbersValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetShowPageNumbersValueArchive, show_page_numbers_)
      + sizeof(CommandSetShowPageNumbersValueArchive::show_page_numbers_)
      - PROTOBUF_FIELD_OFFSET(CommandSetShowPageNumbersValueArchive, sheet_)>(
          reinterpret_cast<char*>(&sheet_),
          reinterpret_cast<char*>(&other->sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetShowPageNumbersValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[11]);
}

// ===================================================================

class CommandSetRepeatingHeadersValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetRepeatingHeadersValueArchive>()._has_bits_);
  static void set_has_show_repeating_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& sheet(const CommandSetRepeatingHeadersValueArchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetRepeatingHeadersValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::Reference&
CommandSetRepeatingHeadersValueArchive::_Internal::sheet(const CommandSetRepeatingHeadersValueArchive* msg) {
  return *msg->sheet_;
}
const ::TSK::CommandArchive&
CommandSetRepeatingHeadersValueArchive::_Internal::super(const CommandSetRepeatingHeadersValueArchive* msg) {
  return *msg->super_;
}
void CommandSetRepeatingHeadersValueArchive::clear_sheet() {
  if (sheet_ != nullptr) sheet_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetRepeatingHeadersValueArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetRepeatingHeadersValueArchive::CommandSetRepeatingHeadersValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetRepeatingHeadersValueArchive)
}
CommandSetRepeatingHeadersValueArchive::CommandSetRepeatingHeadersValueArchive(const CommandSetRepeatingHeadersValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet()) {
    sheet_ = new ::TSP::Reference(*from.sheet_);
  } else {
    sheet_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  show_repeating_headers_ = from.show_repeating_headers_;
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetRepeatingHeadersValueArchive)
}

void CommandSetRepeatingHeadersValueArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_repeating_headers_) -
    reinterpret_cast<char*>(&sheet_)) + sizeof(show_repeating_headers_));
}

CommandSetRepeatingHeadersValueArchive::~CommandSetRepeatingHeadersValueArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetRepeatingHeadersValueArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetRepeatingHeadersValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_;
  if (this != internal_default_instance()) delete super_;
}

void CommandSetRepeatingHeadersValueArchive::ArenaDtor(void* object) {
  CommandSetRepeatingHeadersValueArchive* _this = reinterpret_cast< CommandSetRepeatingHeadersValueArchive* >(object);
  (void)_this;
}
void CommandSetRepeatingHeadersValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetRepeatingHeadersValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetRepeatingHeadersValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetRepeatingHeadersValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_ != nullptr);
      sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  show_repeating_headers_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetRepeatingHeadersValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool show_repeating_headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_show_repeating_headers(&has_bits);
          show_repeating_headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetRepeatingHeadersValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetRepeatingHeadersValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool show_repeating_headers = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_show_repeating_headers(), target);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet(this), target, stream);
  }

  // required .TSK.CommandArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetRepeatingHeadersValueArchive)
  return target;
}

size_t CommandSetRepeatingHeadersValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetRepeatingHeadersValueArchive)
  size_t total_size = 0;

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_show_repeating_headers()) {
    // required bool show_repeating_headers = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetRepeatingHeadersValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetRepeatingHeadersValueArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_);

    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool show_repeating_headers = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetRepeatingHeadersValueArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetRepeatingHeadersValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetRepeatingHeadersValueArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetRepeatingHeadersValueArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetRepeatingHeadersValueArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetRepeatingHeadersValueArchive)
    MergeFrom(*source);
  }
}

void CommandSetRepeatingHeadersValueArchive::MergeFrom(const CommandSetRepeatingHeadersValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetRepeatingHeadersValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet()->::TSP::Reference::MergeFrom(from._internal_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      show_repeating_headers_ = from.show_repeating_headers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetRepeatingHeadersValueArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetRepeatingHeadersValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetRepeatingHeadersValueArchive::CopyFrom(const CommandSetRepeatingHeadersValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetRepeatingHeadersValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetRepeatingHeadersValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet()) {
    if (!sheet_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetRepeatingHeadersValueArchive::InternalSwap(CommandSetRepeatingHeadersValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetRepeatingHeadersValueArchive, show_repeating_headers_)
      + sizeof(CommandSetRepeatingHeadersValueArchive::show_repeating_headers_)
      - PROTOBUF_FIELD_OFFSET(CommandSetRepeatingHeadersValueArchive, sheet_)>(
          reinterpret_cast<char*>(&sheet_),
          reinterpret_cast<char*>(&other->sheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetRepeatingHeadersValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[12]);
}

// ===================================================================

class CommandSetContentScaleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetContentScaleArchive>()._has_bits_);
  static void set_has_old_content_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_content_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& sheet_uid(const CommandSetContentScaleArchive* msg);
  static void set_has_sheet_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetContentScaleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_toggled_auto_fit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001b) ^ 0x0000001b) != 0;
  }
};

const ::TSP::UUID&
CommandSetContentScaleArchive::_Internal::sheet_uid(const CommandSetContentScaleArchive* msg) {
  return *msg->sheet_uid_;
}
const ::TSK::CommandArchive&
CommandSetContentScaleArchive::_Internal::super(const CommandSetContentScaleArchive* msg) {
  return *msg->super_;
}
void CommandSetContentScaleArchive::clear_sheet_uid() {
  if (sheet_uid_ != nullptr) sheet_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetContentScaleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetContentScaleArchive::CommandSetContentScaleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetContentScaleArchive)
}
CommandSetContentScaleArchive::CommandSetContentScaleArchive(const CommandSetContentScaleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet_uid()) {
    sheet_uid_ = new ::TSP::UUID(*from.sheet_uid_);
  } else {
    sheet_uid_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&old_content_scale_, &from.old_content_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&toggled_auto_fit_) -
    reinterpret_cast<char*>(&old_content_scale_)) + sizeof(toggled_auto_fit_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetContentScaleArchive)
}

void CommandSetContentScaleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&toggled_auto_fit_) -
    reinterpret_cast<char*>(&sheet_uid_)) + sizeof(toggled_auto_fit_));
}

CommandSetContentScaleArchive::~CommandSetContentScaleArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetContentScaleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetContentScaleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_uid_;
  if (this != internal_default_instance()) delete super_;
}

void CommandSetContentScaleArchive::ArenaDtor(void* object) {
  CommandSetContentScaleArchive* _this = reinterpret_cast< CommandSetContentScaleArchive* >(object);
  (void)_this;
}
void CommandSetContentScaleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetContentScaleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetContentScaleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetContentScaleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_uid_ != nullptr);
      sheet_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&old_content_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&toggled_auto_fit_) -
        reinterpret_cast<char*>(&old_content_scale_)) + sizeof(toggled_auto_fit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetContentScaleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float old_content_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_old_content_scale(&has_bits);
          old_content_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float content_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_content_scale(&has_bits);
          content_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool toggled_auto_fit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_toggled_auto_fit(&has_bits);
          toggled_auto_fit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetContentScaleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetContentScaleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float old_content_scale = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_old_content_scale(), target);
  }

  // required float content_scale = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_content_scale(), target);
  }

  // required .TSP.UUID sheet_uid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sheet_uid(this), target, stream);
  }

  // required .TSK.CommandArchive super = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::super(this), target, stream);
  }

  // required bool toggled_auto_fit = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_toggled_auto_fit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetContentScaleArchive)
  return target;
}

size_t CommandSetContentScaleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetContentScaleArchive)
  size_t total_size = 0;

  if (_internal_has_sheet_uid()) {
    // required .TSP.UUID sheet_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_content_scale()) {
    // required float content_scale = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_toggled_auto_fit()) {
    // required bool toggled_auto_fit = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetContentScaleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetContentScaleArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required .TSP.UUID sheet_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);

    // required .TSK.CommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required float content_scale = 3;
    total_size += 1 + 4;

    // required bool toggled_auto_fit = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float old_content_scale = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetContentScaleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetContentScaleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetContentScaleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetContentScaleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetContentScaleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetContentScaleArchive)
    MergeFrom(*source);
  }
}

void CommandSetContentScaleArchive::MergeFrom(const CommandSetContentScaleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetContentScaleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet_uid()->::TSP::UUID::MergeFrom(from._internal_sheet_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      old_content_scale_ = from.old_content_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      content_scale_ = from.content_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      toggled_auto_fit_ = from.toggled_auto_fit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetContentScaleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetContentScaleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetContentScaleArchive::CopyFrom(const CommandSetContentScaleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetContentScaleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetContentScaleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet_uid()) {
    if (!sheet_uid_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetContentScaleArchive::InternalSwap(CommandSetContentScaleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetContentScaleArchive, toggled_auto_fit_)
      + sizeof(CommandSetContentScaleArchive::toggled_auto_fit_)
      - PROTOBUF_FIELD_OFFSET(CommandSetContentScaleArchive, sheet_uid_)>(
          reinterpret_cast<char*>(&sheet_uid_),
          reinterpret_cast<char*>(&other->sheet_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetContentScaleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[13]);
}

// ===================================================================

class CommandSetDocumentPaperSize::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetDocumentPaperSize>()._has_bits_);
  static void set_has_paper_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& page_size(const CommandSetDocumentPaperSize* msg);
  static void set_has_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetDocumentPaperSize* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::Size&
CommandSetDocumentPaperSize::_Internal::page_size(const CommandSetDocumentPaperSize* msg) {
  return *msg->page_size_;
}
const ::TSK::CommandArchive&
CommandSetDocumentPaperSize::_Internal::super(const CommandSetDocumentPaperSize* msg) {
  return *msg->super_;
}
void CommandSetDocumentPaperSize::clear_page_size() {
  if (page_size_ != nullptr) page_size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetDocumentPaperSize::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandSetDocumentPaperSize::CommandSetDocumentPaperSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetDocumentPaperSize)
}
CommandSetDocumentPaperSize::CommandSetDocumentPaperSize(const CommandSetDocumentPaperSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  paper_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paper_id()) {
    paper_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_paper_id(), 
      GetArena());
  }
  if (from._internal_has_page_size()) {
    page_size_ = new ::TSP::Size(*from.page_size_);
  } else {
    page_size_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetDocumentPaperSize)
}

void CommandSetDocumentPaperSize::SharedCtor() {
paper_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&page_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&super_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(super_));
}

CommandSetDocumentPaperSize::~CommandSetDocumentPaperSize() {
  // @@protoc_insertion_point(destructor:TN.CommandSetDocumentPaperSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetDocumentPaperSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  paper_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete page_size_;
  if (this != internal_default_instance()) delete super_;
}

void CommandSetDocumentPaperSize::ArenaDtor(void* object) {
  CommandSetDocumentPaperSize* _this = reinterpret_cast< CommandSetDocumentPaperSize* >(object);
  (void)_this;
}
void CommandSetDocumentPaperSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetDocumentPaperSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetDocumentPaperSize::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetDocumentPaperSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      paper_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(page_size_ != nullptr);
      page_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetDocumentPaperSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string paper_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paper_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TN.CommandSetDocumentPaperSize.paper_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Size page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetDocumentPaperSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetDocumentPaperSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string paper_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paper_id().data(), static_cast<int>(this->_internal_paper_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.CommandSetDocumentPaperSize.paper_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_paper_id(), target);
  }

  // required .TSP.Size page_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::page_size(this), target, stream);
  }

  // required .TSK.CommandArchive super = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetDocumentPaperSize)
  return target;
}

size_t CommandSetDocumentPaperSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetDocumentPaperSize)
  size_t total_size = 0;

  if (_internal_has_paper_id()) {
    // required string paper_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paper_id());
  }

  if (_internal_has_page_size()) {
    // required .TSP.Size page_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *page_size_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t CommandSetDocumentPaperSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetDocumentPaperSize)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string paper_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paper_id());

    // required .TSP.Size page_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *page_size_);

    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetDocumentPaperSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetDocumentPaperSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetDocumentPaperSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetDocumentPaperSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetDocumentPaperSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetDocumentPaperSize)
    MergeFrom(*source);
  }
}

void CommandSetDocumentPaperSize::MergeFrom(const CommandSetDocumentPaperSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetDocumentPaperSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_paper_id(from._internal_paper_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_page_size()->::TSP::Size::MergeFrom(from._internal_page_size());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
  }
}

void CommandSetDocumentPaperSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetDocumentPaperSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetDocumentPaperSize::CopyFrom(const CommandSetDocumentPaperSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetDocumentPaperSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetDocumentPaperSize::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_page_size()) {
    if (!page_size_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetDocumentPaperSize::InternalSwap(CommandSetDocumentPaperSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  paper_id_.Swap(&other->paper_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetDocumentPaperSize, super_)
      + sizeof(CommandSetDocumentPaperSize::super_)
      - PROTOBUF_FIELD_OFFSET(CommandSetDocumentPaperSize, page_size_)>(
          reinterpret_cast<char*>(&page_size_),
          reinterpret_cast<char*>(&other->page_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetDocumentPaperSize::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[14]);
}

// ===================================================================

class CommandEnterPrintPreviewModeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandEnterPrintPreviewModeArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandEnterPrintPreviewModeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandEnterPrintPreviewModeArchive::_Internal::super(const CommandEnterPrintPreviewModeArchive* msg) {
  return *msg->super_;
}
void CommandEnterPrintPreviewModeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandEnterPrintPreviewModeArchive::CommandEnterPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandEnterPrintPreviewModeArchive)
}
CommandEnterPrintPreviewModeArchive::CommandEnterPrintPreviewModeArchive(const CommandEnterPrintPreviewModeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandEnterPrintPreviewModeArchive)
}

void CommandEnterPrintPreviewModeArchive::SharedCtor() {
super_ = nullptr;
}

CommandEnterPrintPreviewModeArchive::~CommandEnterPrintPreviewModeArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandEnterPrintPreviewModeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandEnterPrintPreviewModeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandEnterPrintPreviewModeArchive::ArenaDtor(void* object) {
  CommandEnterPrintPreviewModeArchive* _this = reinterpret_cast< CommandEnterPrintPreviewModeArchive* >(object);
  (void)_this;
}
void CommandEnterPrintPreviewModeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandEnterPrintPreviewModeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandEnterPrintPreviewModeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandEnterPrintPreviewModeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandEnterPrintPreviewModeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandEnterPrintPreviewModeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandEnterPrintPreviewModeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandEnterPrintPreviewModeArchive)
  return target;
}

size_t CommandEnterPrintPreviewModeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandEnterPrintPreviewModeArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandEnterPrintPreviewModeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandEnterPrintPreviewModeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandEnterPrintPreviewModeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandEnterPrintPreviewModeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandEnterPrintPreviewModeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandEnterPrintPreviewModeArchive)
    MergeFrom(*source);
  }
}

void CommandEnterPrintPreviewModeArchive::MergeFrom(const CommandEnterPrintPreviewModeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandEnterPrintPreviewModeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
}

void CommandEnterPrintPreviewModeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandEnterPrintPreviewModeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandEnterPrintPreviewModeArchive::CopyFrom(const CommandEnterPrintPreviewModeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandEnterPrintPreviewModeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandEnterPrintPreviewModeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandEnterPrintPreviewModeArchive::InternalSwap(CommandEnterPrintPreviewModeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandEnterPrintPreviewModeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[15]);
}

// ===================================================================

class CommandExitPrintPreviewModeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandExitPrintPreviewModeArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandExitPrintPreviewModeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandExitPrintPreviewModeArchive::_Internal::super(const CommandExitPrintPreviewModeArchive* msg) {
  return *msg->super_;
}
void CommandExitPrintPreviewModeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandExitPrintPreviewModeArchive::CommandExitPrintPreviewModeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandExitPrintPreviewModeArchive)
}
CommandExitPrintPreviewModeArchive::CommandExitPrintPreviewModeArchive(const CommandExitPrintPreviewModeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandExitPrintPreviewModeArchive)
}

void CommandExitPrintPreviewModeArchive::SharedCtor() {
super_ = nullptr;
}

CommandExitPrintPreviewModeArchive::~CommandExitPrintPreviewModeArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandExitPrintPreviewModeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandExitPrintPreviewModeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandExitPrintPreviewModeArchive::ArenaDtor(void* object) {
  CommandExitPrintPreviewModeArchive* _this = reinterpret_cast< CommandExitPrintPreviewModeArchive* >(object);
  (void)_this;
}
void CommandExitPrintPreviewModeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandExitPrintPreviewModeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandExitPrintPreviewModeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandExitPrintPreviewModeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandExitPrintPreviewModeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandExitPrintPreviewModeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandExitPrintPreviewModeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandExitPrintPreviewModeArchive)
  return target;
}

size_t CommandExitPrintPreviewModeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandExitPrintPreviewModeArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandExitPrintPreviewModeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandExitPrintPreviewModeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandExitPrintPreviewModeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandExitPrintPreviewModeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandExitPrintPreviewModeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandExitPrintPreviewModeArchive)
    MergeFrom(*source);
  }
}

void CommandExitPrintPreviewModeArchive::MergeFrom(const CommandExitPrintPreviewModeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandExitPrintPreviewModeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
}

void CommandExitPrintPreviewModeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandExitPrintPreviewModeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandExitPrintPreviewModeArchive::CopyFrom(const CommandExitPrintPreviewModeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandExitPrintPreviewModeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandExitPrintPreviewModeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandExitPrintPreviewModeArchive::InternalSwap(CommandExitPrintPreviewModeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandExitPrintPreviewModeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[16]);
}

// ===================================================================

class CommandSetPrinterMarginsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetPrinterMarginsArchive>()._has_bits_);
  static const ::TSD::EdgeInsetsArchive& new_print_margins(const CommandSetPrinterMarginsArchive* msg);
  static void set_has_new_print_margins(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::EdgeInsetsArchive& old_print_margins(const CommandSetPrinterMarginsArchive* msg);
  static void set_has_old_print_margins(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& sheet_uid(const CommandSetPrinterMarginsArchive* msg);
  static void set_has_sheet_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetPrinterMarginsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

const ::TSD::EdgeInsetsArchive&
CommandSetPrinterMarginsArchive::_Internal::new_print_margins(const CommandSetPrinterMarginsArchive* msg) {
  return *msg->new_print_margins_;
}
const ::TSD::EdgeInsetsArchive&
CommandSetPrinterMarginsArchive::_Internal::old_print_margins(const CommandSetPrinterMarginsArchive* msg) {
  return *msg->old_print_margins_;
}
const ::TSP::UUID&
CommandSetPrinterMarginsArchive::_Internal::sheet_uid(const CommandSetPrinterMarginsArchive* msg) {
  return *msg->sheet_uid_;
}
const ::TSK::CommandArchive&
CommandSetPrinterMarginsArchive::_Internal::super(const CommandSetPrinterMarginsArchive* msg) {
  return *msg->super_;
}
void CommandSetPrinterMarginsArchive::clear_new_print_margins() {
  if (new_print_margins_ != nullptr) new_print_margins_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetPrinterMarginsArchive::clear_old_print_margins() {
  if (old_print_margins_ != nullptr) old_print_margins_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetPrinterMarginsArchive::clear_sheet_uid() {
  if (sheet_uid_ != nullptr) sheet_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSetPrinterMarginsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandSetPrinterMarginsArchive::CommandSetPrinterMarginsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetPrinterMarginsArchive)
}
CommandSetPrinterMarginsArchive::CommandSetPrinterMarginsArchive(const CommandSetPrinterMarginsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_new_print_margins()) {
    new_print_margins_ = new ::TSD::EdgeInsetsArchive(*from.new_print_margins_);
  } else {
    new_print_margins_ = nullptr;
  }
  if (from._internal_has_old_print_margins()) {
    old_print_margins_ = new ::TSD::EdgeInsetsArchive(*from.old_print_margins_);
  } else {
    old_print_margins_ = nullptr;
  }
  if (from._internal_has_sheet_uid()) {
    sheet_uid_ = new ::TSP::UUID(*from.sheet_uid_);
  } else {
    sheet_uid_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetPrinterMarginsArchive)
}

void CommandSetPrinterMarginsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&new_print_margins_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&super_) -
    reinterpret_cast<char*>(&new_print_margins_)) + sizeof(super_));
}

CommandSetPrinterMarginsArchive::~CommandSetPrinterMarginsArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetPrinterMarginsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetPrinterMarginsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete new_print_margins_;
  if (this != internal_default_instance()) delete old_print_margins_;
  if (this != internal_default_instance()) delete sheet_uid_;
  if (this != internal_default_instance()) delete super_;
}

void CommandSetPrinterMarginsArchive::ArenaDtor(void* object) {
  CommandSetPrinterMarginsArchive* _this = reinterpret_cast< CommandSetPrinterMarginsArchive* >(object);
  (void)_this;
}
void CommandSetPrinterMarginsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetPrinterMarginsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetPrinterMarginsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetPrinterMarginsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(new_print_margins_ != nullptr);
      new_print_margins_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_print_margins_ != nullptr);
      old_print_margins_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sheet_uid_ != nullptr);
      sheet_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetPrinterMarginsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.EdgeInsetsArchive new_print_margins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_print_margins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.EdgeInsetsArchive old_print_margins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_print_margins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetPrinterMarginsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetPrinterMarginsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.EdgeInsetsArchive new_print_margins = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::new_print_margins(this), target, stream);
  }

  // optional .TSD.EdgeInsetsArchive old_print_margins = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::old_print_margins(this), target, stream);
  }

  // required .TSP.UUID sheet_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sheet_uid(this), target, stream);
  }

  // required .TSK.CommandArchive super = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetPrinterMarginsArchive)
  return target;
}

size_t CommandSetPrinterMarginsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetPrinterMarginsArchive)
  size_t total_size = 0;

  if (_internal_has_new_print_margins()) {
    // required .TSD.EdgeInsetsArchive new_print_margins = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_print_margins_);
  }

  if (_internal_has_sheet_uid()) {
    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t CommandSetPrinterMarginsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetPrinterMarginsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .TSD.EdgeInsetsArchive new_print_margins = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_print_margins_);

    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);

    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.EdgeInsetsArchive old_print_margins = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_print_margins_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetPrinterMarginsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetPrinterMarginsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetPrinterMarginsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetPrinterMarginsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetPrinterMarginsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetPrinterMarginsArchive)
    MergeFrom(*source);
  }
}

void CommandSetPrinterMarginsArchive::MergeFrom(const CommandSetPrinterMarginsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetPrinterMarginsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_new_print_margins()->::TSD::EdgeInsetsArchive::MergeFrom(from._internal_new_print_margins());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_print_margins()->::TSD::EdgeInsetsArchive::MergeFrom(from._internal_old_print_margins());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sheet_uid()->::TSP::UUID::MergeFrom(from._internal_sheet_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
  }
}

void CommandSetPrinterMarginsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetPrinterMarginsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetPrinterMarginsArchive::CopyFrom(const CommandSetPrinterMarginsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetPrinterMarginsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPrinterMarginsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_new_print_margins()) {
    if (!new_print_margins_->IsInitialized()) return false;
  }
  if (_internal_has_old_print_margins()) {
    if (!old_print_margins_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_uid()) {
    if (!sheet_uid_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetPrinterMarginsArchive::InternalSwap(CommandSetPrinterMarginsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetPrinterMarginsArchive, super_)
      + sizeof(CommandSetPrinterMarginsArchive::super_)
      - PROTOBUF_FIELD_OFFSET(CommandSetPrinterMarginsArchive, new_print_margins_)>(
          reinterpret_cast<char*>(&new_print_margins_),
          reinterpret_cast<char*>(&other->new_print_margins_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetPrinterMarginsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[17]);
}

// ===================================================================

class CommandSetPrintBackgroundsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetPrintBackgroundsArchive>()._has_bits_);
  static const ::TSP::UUID& sheet_uid(const CommandSetPrintBackgroundsArchive* msg);
  static void set_has_sheet_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_print_backgrounds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_old_print_backgrounds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetPrintBackgroundsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::UUID&
CommandSetPrintBackgroundsArchive::_Internal::sheet_uid(const CommandSetPrintBackgroundsArchive* msg) {
  return *msg->sheet_uid_;
}
const ::TSK::CommandArchive&
CommandSetPrintBackgroundsArchive::_Internal::super(const CommandSetPrintBackgroundsArchive* msg) {
  return *msg->super_;
}
void CommandSetPrintBackgroundsArchive::clear_sheet_uid() {
  if (sheet_uid_ != nullptr) sheet_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetPrintBackgroundsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetPrintBackgroundsArchive::CommandSetPrintBackgroundsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetPrintBackgroundsArchive)
}
CommandSetPrintBackgroundsArchive::CommandSetPrintBackgroundsArchive(const CommandSetPrintBackgroundsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet_uid()) {
    sheet_uid_ = new ::TSP::UUID(*from.sheet_uid_);
  } else {
    sheet_uid_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&print_backgrounds_, &from.print_backgrounds_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_print_backgrounds_) -
    reinterpret_cast<char*>(&print_backgrounds_)) + sizeof(old_print_backgrounds_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetPrintBackgroundsArchive)
}

void CommandSetPrintBackgroundsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_print_backgrounds_) -
    reinterpret_cast<char*>(&sheet_uid_)) + sizeof(old_print_backgrounds_));
}

CommandSetPrintBackgroundsArchive::~CommandSetPrintBackgroundsArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetPrintBackgroundsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetPrintBackgroundsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_uid_;
  if (this != internal_default_instance()) delete super_;
}

void CommandSetPrintBackgroundsArchive::ArenaDtor(void* object) {
  CommandSetPrintBackgroundsArchive* _this = reinterpret_cast< CommandSetPrintBackgroundsArchive* >(object);
  (void)_this;
}
void CommandSetPrintBackgroundsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetPrintBackgroundsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetPrintBackgroundsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetPrintBackgroundsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_uid_ != nullptr);
      sheet_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  ::memset(&print_backgrounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_print_backgrounds_) -
      reinterpret_cast<char*>(&print_backgrounds_)) + sizeof(old_print_backgrounds_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetPrintBackgroundsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID sheet_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool print_backgrounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_print_backgrounds(&has_bits);
          print_backgrounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool old_print_backgrounds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_old_print_backgrounds(&has_bits);
          old_print_backgrounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetPrintBackgroundsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetPrintBackgroundsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID sheet_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sheet_uid(this), target, stream);
  }

  // required bool print_backgrounds = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_print_backgrounds(), target);
  }

  // required bool old_print_backgrounds = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_old_print_backgrounds(), target);
  }

  // required .TSK.CommandArchive super = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetPrintBackgroundsArchive)
  return target;
}

size_t CommandSetPrintBackgroundsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetPrintBackgroundsArchive)
  size_t total_size = 0;

  if (_internal_has_sheet_uid()) {
    // required .TSP.UUID sheet_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_print_backgrounds()) {
    // required bool print_backgrounds = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_old_print_backgrounds()) {
    // required bool old_print_backgrounds = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetPrintBackgroundsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetPrintBackgroundsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.UUID sheet_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);

    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool print_backgrounds = 2;
    total_size += 1 + 1;

    // required bool old_print_backgrounds = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetPrintBackgroundsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetPrintBackgroundsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetPrintBackgroundsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetPrintBackgroundsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetPrintBackgroundsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetPrintBackgroundsArchive)
    MergeFrom(*source);
  }
}

void CommandSetPrintBackgroundsArchive::MergeFrom(const CommandSetPrintBackgroundsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetPrintBackgroundsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet_uid()->::TSP::UUID::MergeFrom(from._internal_sheet_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      print_backgrounds_ = from.print_backgrounds_;
    }
    if (cached_has_bits & 0x00000008u) {
      old_print_backgrounds_ = from.old_print_backgrounds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetPrintBackgroundsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetPrintBackgroundsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetPrintBackgroundsArchive::CopyFrom(const CommandSetPrintBackgroundsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetPrintBackgroundsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPrintBackgroundsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet_uid()) {
    if (!sheet_uid_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetPrintBackgroundsArchive::InternalSwap(CommandSetPrintBackgroundsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetPrintBackgroundsArchive, old_print_backgrounds_)
      + sizeof(CommandSetPrintBackgroundsArchive::old_print_backgrounds_)
      - PROTOBUF_FIELD_OFFSET(CommandSetPrintBackgroundsArchive, sheet_uid_)>(
          reinterpret_cast<char*>(&sheet_uid_),
          reinterpret_cast<char*>(&other->sheet_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetPrintBackgroundsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[18]);
}

// ===================================================================

class CommandSetHeaderFooterInsetsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetHeaderFooterInsetsArchive>()._has_bits_);
  static void set_has_old_header_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_old_footer_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_header_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_footer_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& sheet_uid(const CommandSetHeaderFooterInsetsArchive* msg);
  static void set_has_sheet_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetHeaderFooterInsetsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000033) ^ 0x00000033) != 0;
  }
};

const ::TSP::UUID&
CommandSetHeaderFooterInsetsArchive::_Internal::sheet_uid(const CommandSetHeaderFooterInsetsArchive* msg) {
  return *msg->sheet_uid_;
}
const ::TSK::CommandArchive&
CommandSetHeaderFooterInsetsArchive::_Internal::super(const CommandSetHeaderFooterInsetsArchive* msg) {
  return *msg->super_;
}
void CommandSetHeaderFooterInsetsArchive::clear_sheet_uid() {
  if (sheet_uid_ != nullptr) sheet_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetHeaderFooterInsetsArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetHeaderFooterInsetsArchive::CommandSetHeaderFooterInsetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetHeaderFooterInsetsArchive)
}
CommandSetHeaderFooterInsetsArchive::CommandSetHeaderFooterInsetsArchive(const CommandSetHeaderFooterInsetsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet_uid()) {
    sheet_uid_ = new ::TSP::UUID(*from.sheet_uid_);
  } else {
    sheet_uid_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&old_header_inset_, &from.old_header_inset_,
    static_cast<size_t>(reinterpret_cast<char*>(&footer_inset_) -
    reinterpret_cast<char*>(&old_header_inset_)) + sizeof(footer_inset_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetHeaderFooterInsetsArchive)
}

void CommandSetHeaderFooterInsetsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&footer_inset_) -
    reinterpret_cast<char*>(&sheet_uid_)) + sizeof(footer_inset_));
}

CommandSetHeaderFooterInsetsArchive::~CommandSetHeaderFooterInsetsArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetHeaderFooterInsetsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetHeaderFooterInsetsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_uid_;
  if (this != internal_default_instance()) delete super_;
}

void CommandSetHeaderFooterInsetsArchive::ArenaDtor(void* object) {
  CommandSetHeaderFooterInsetsArchive* _this = reinterpret_cast< CommandSetHeaderFooterInsetsArchive* >(object);
  (void)_this;
}
void CommandSetHeaderFooterInsetsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetHeaderFooterInsetsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetHeaderFooterInsetsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetHeaderFooterInsetsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_uid_ != nullptr);
      sheet_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&old_header_inset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&footer_inset_) -
        reinterpret_cast<char*>(&old_header_inset_)) + sizeof(footer_inset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetHeaderFooterInsetsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float old_header_inset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_old_header_inset(&has_bits);
          old_header_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float old_footer_inset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_old_footer_inset(&has_bits);
          old_footer_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float header_inset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_header_inset(&has_bits);
          header_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float footer_inset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_footer_inset(&has_bits);
          footer_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetHeaderFooterInsetsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetHeaderFooterInsetsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float old_header_inset = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_old_header_inset(), target);
  }

  // optional float old_footer_inset = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_old_footer_inset(), target);
  }

  // required float header_inset = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_header_inset(), target);
  }

  // required float footer_inset = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_footer_inset(), target);
  }

  // required .TSP.UUID sheet_uid = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sheet_uid(this), target, stream);
  }

  // required .TSK.CommandArchive super = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetHeaderFooterInsetsArchive)
  return target;
}

size_t CommandSetHeaderFooterInsetsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetHeaderFooterInsetsArchive)
  size_t total_size = 0;

  if (_internal_has_sheet_uid()) {
    // required .TSP.UUID sheet_uid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_header_inset()) {
    // required float header_inset = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_footer_inset()) {
    // required float footer_inset = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CommandSetHeaderFooterInsetsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetHeaderFooterInsetsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000033) ^ 0x00000033) == 0) {  // All required fields are present.
    // required .TSP.UUID sheet_uid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);

    // required .TSK.CommandArchive super = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required float header_inset = 3;
    total_size += 1 + 4;

    // required float footer_inset = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional float old_header_inset = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float old_footer_inset = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetHeaderFooterInsetsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetHeaderFooterInsetsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetHeaderFooterInsetsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetHeaderFooterInsetsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetHeaderFooterInsetsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetHeaderFooterInsetsArchive)
    MergeFrom(*source);
  }
}

void CommandSetHeaderFooterInsetsArchive::MergeFrom(const CommandSetHeaderFooterInsetsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetHeaderFooterInsetsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet_uid()->::TSP::UUID::MergeFrom(from._internal_sheet_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      old_header_inset_ = from.old_header_inset_;
    }
    if (cached_has_bits & 0x00000008u) {
      old_footer_inset_ = from.old_footer_inset_;
    }
    if (cached_has_bits & 0x00000010u) {
      header_inset_ = from.header_inset_;
    }
    if (cached_has_bits & 0x00000020u) {
      footer_inset_ = from.footer_inset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetHeaderFooterInsetsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetHeaderFooterInsetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetHeaderFooterInsetsArchive::CopyFrom(const CommandSetHeaderFooterInsetsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetHeaderFooterInsetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetHeaderFooterInsetsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet_uid()) {
    if (!sheet_uid_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetHeaderFooterInsetsArchive::InternalSwap(CommandSetHeaderFooterInsetsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetHeaderFooterInsetsArchive, footer_inset_)
      + sizeof(CommandSetHeaderFooterInsetsArchive::footer_inset_)
      - PROTOBUF_FIELD_OFFSET(CommandSetHeaderFooterInsetsArchive, sheet_uid_)>(
          reinterpret_cast<char*>(&sheet_uid_),
          reinterpret_cast<char*>(&other->sheet_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetHeaderFooterInsetsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[19]);
}

// ===================================================================

class CommandSetPageOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetPageOrderArchive>()._has_bits_);
  static void set_has_old_page_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_page_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& sheet_uid(const CommandSetPageOrderArchive* msg);
  static void set_has_sheet_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetPageOrderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::UUID&
CommandSetPageOrderArchive::_Internal::sheet_uid(const CommandSetPageOrderArchive* msg) {
  return *msg->sheet_uid_;
}
const ::TSK::CommandArchive&
CommandSetPageOrderArchive::_Internal::super(const CommandSetPageOrderArchive* msg) {
  return *msg->super_;
}
void CommandSetPageOrderArchive::clear_sheet_uid() {
  if (sheet_uid_ != nullptr) sheet_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetPageOrderArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetPageOrderArchive::CommandSetPageOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetPageOrderArchive)
}
CommandSetPageOrderArchive::CommandSetPageOrderArchive(const CommandSetPageOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet_uid()) {
    sheet_uid_ = new ::TSP::UUID(*from.sheet_uid_);
  } else {
    sheet_uid_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&old_page_order_, &from.old_page_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_order_) -
    reinterpret_cast<char*>(&old_page_order_)) + sizeof(page_order_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetPageOrderArchive)
}

void CommandSetPageOrderArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_order_) -
    reinterpret_cast<char*>(&sheet_uid_)) + sizeof(page_order_));
}

CommandSetPageOrderArchive::~CommandSetPageOrderArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetPageOrderArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetPageOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_uid_;
  if (this != internal_default_instance()) delete super_;
}

void CommandSetPageOrderArchive::ArenaDtor(void* object) {
  CommandSetPageOrderArchive* _this = reinterpret_cast< CommandSetPageOrderArchive* >(object);
  (void)_this;
}
void CommandSetPageOrderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetPageOrderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetPageOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetPageOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_uid_ != nullptr);
      sheet_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&old_page_order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&page_order_) -
        reinterpret_cast<char*>(&old_page_order_)) + sizeof(page_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetPageOrderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 old_page_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_old_page_order(&has_bits);
          old_page_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 page_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_page_order(&has_bits);
          page_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetPageOrderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetPageOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 old_page_order = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_old_page_order(), target);
  }

  // required uint32 page_order = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page_order(), target);
  }

  // required .TSP.UUID sheet_uid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sheet_uid(this), target, stream);
  }

  // required .TSK.CommandArchive super = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetPageOrderArchive)
  return target;
}

size_t CommandSetPageOrderArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetPageOrderArchive)
  size_t total_size = 0;

  if (_internal_has_sheet_uid()) {
    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_old_page_order()) {
    // required uint32 old_page_order = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_page_order());
  }

  if (_internal_has_page_order()) {
    // required uint32 page_order = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_order());
  }

  return total_size;
}
size_t CommandSetPageOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetPageOrderArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);

    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 old_page_order = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_page_order());

    // required uint32 page_order = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_order());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetPageOrderArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetPageOrderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetPageOrderArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetPageOrderArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetPageOrderArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetPageOrderArchive)
    MergeFrom(*source);
  }
}

void CommandSetPageOrderArchive::MergeFrom(const CommandSetPageOrderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetPageOrderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet_uid()->::TSP::UUID::MergeFrom(from._internal_sheet_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      old_page_order_ = from.old_page_order_;
    }
    if (cached_has_bits & 0x00000008u) {
      page_order_ = from.page_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetPageOrderArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetPageOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetPageOrderArchive::CopyFrom(const CommandSetPageOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetPageOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPageOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet_uid()) {
    if (!sheet_uid_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetPageOrderArchive::InternalSwap(CommandSetPageOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetPageOrderArchive, page_order_)
      + sizeof(CommandSetPageOrderArchive::page_order_)
      - PROTOBUF_FIELD_OFFSET(CommandSetPageOrderArchive, sheet_uid_)>(
          reinterpret_cast<char*>(&sheet_uid_),
          reinterpret_cast<char*>(&other->sheet_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetPageOrderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[20]);
}

// ===================================================================

class CommandSetUsingStartPageNumberArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetUsingStartPageNumberArchive>()._has_bits_);
  static void set_has_using_start_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& sheet_uid(const CommandSetUsingStartPageNumberArchive* msg);
  static void set_has_sheet_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetUsingStartPageNumberArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prev_using_start_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::UUID&
CommandSetUsingStartPageNumberArchive::_Internal::sheet_uid(const CommandSetUsingStartPageNumberArchive* msg) {
  return *msg->sheet_uid_;
}
const ::TSK::CommandArchive&
CommandSetUsingStartPageNumberArchive::_Internal::super(const CommandSetUsingStartPageNumberArchive* msg) {
  return *msg->super_;
}
void CommandSetUsingStartPageNumberArchive::clear_sheet_uid() {
  if (sheet_uid_ != nullptr) sheet_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetUsingStartPageNumberArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetUsingStartPageNumberArchive::CommandSetUsingStartPageNumberArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetUsingStartPageNumberArchive)
}
CommandSetUsingStartPageNumberArchive::CommandSetUsingStartPageNumberArchive(const CommandSetUsingStartPageNumberArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet_uid()) {
    sheet_uid_ = new ::TSP::UUID(*from.sheet_uid_);
  } else {
    sheet_uid_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&using_start_page_number_, &from.using_start_page_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_using_start_page_number_) -
    reinterpret_cast<char*>(&using_start_page_number_)) + sizeof(prev_using_start_page_number_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetUsingStartPageNumberArchive)
}

void CommandSetUsingStartPageNumberArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_using_start_page_number_) -
    reinterpret_cast<char*>(&sheet_uid_)) + sizeof(prev_using_start_page_number_));
}

CommandSetUsingStartPageNumberArchive::~CommandSetUsingStartPageNumberArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetUsingStartPageNumberArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetUsingStartPageNumberArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_uid_;
  if (this != internal_default_instance()) delete super_;
}

void CommandSetUsingStartPageNumberArchive::ArenaDtor(void* object) {
  CommandSetUsingStartPageNumberArchive* _this = reinterpret_cast< CommandSetUsingStartPageNumberArchive* >(object);
  (void)_this;
}
void CommandSetUsingStartPageNumberArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetUsingStartPageNumberArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetUsingStartPageNumberArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetUsingStartPageNumberArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_uid_ != nullptr);
      sheet_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  ::memset(&using_start_page_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_using_start_page_number_) -
      reinterpret_cast<char*>(&using_start_page_number_)) + sizeof(prev_using_start_page_number_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetUsingStartPageNumberArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool using_start_page_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_using_start_page_number(&has_bits);
          using_start_page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool prev_using_start_page_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prev_using_start_page_number(&has_bits);
          prev_using_start_page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetUsingStartPageNumberArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetUsingStartPageNumberArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool using_start_page_number = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_using_start_page_number(), target);
  }

  // required .TSP.UUID sheet_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet_uid(this), target, stream);
  }

  // required .TSK.CommandArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  // required bool prev_using_start_page_number = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_prev_using_start_page_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetUsingStartPageNumberArchive)
  return target;
}

size_t CommandSetUsingStartPageNumberArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetUsingStartPageNumberArchive)
  size_t total_size = 0;

  if (_internal_has_sheet_uid()) {
    // required .TSP.UUID sheet_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_using_start_page_number()) {
    // required bool using_start_page_number = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_prev_using_start_page_number()) {
    // required bool prev_using_start_page_number = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetUsingStartPageNumberArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetUsingStartPageNumberArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.UUID sheet_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);

    // required .TSK.CommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool using_start_page_number = 1;
    total_size += 1 + 1;

    // required bool prev_using_start_page_number = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetUsingStartPageNumberArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetUsingStartPageNumberArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetUsingStartPageNumberArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetUsingStartPageNumberArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetUsingStartPageNumberArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetUsingStartPageNumberArchive)
    MergeFrom(*source);
  }
}

void CommandSetUsingStartPageNumberArchive::MergeFrom(const CommandSetUsingStartPageNumberArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetUsingStartPageNumberArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet_uid()->::TSP::UUID::MergeFrom(from._internal_sheet_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      using_start_page_number_ = from.using_start_page_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      prev_using_start_page_number_ = from.prev_using_start_page_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetUsingStartPageNumberArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetUsingStartPageNumberArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetUsingStartPageNumberArchive::CopyFrom(const CommandSetUsingStartPageNumberArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetUsingStartPageNumberArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetUsingStartPageNumberArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet_uid()) {
    if (!sheet_uid_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetUsingStartPageNumberArchive::InternalSwap(CommandSetUsingStartPageNumberArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetUsingStartPageNumberArchive, prev_using_start_page_number_)
      + sizeof(CommandSetUsingStartPageNumberArchive::prev_using_start_page_number_)
      - PROTOBUF_FIELD_OFFSET(CommandSetUsingStartPageNumberArchive, sheet_uid_)>(
          reinterpret_cast<char*>(&sheet_uid_),
          reinterpret_cast<char*>(&other->sheet_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetUsingStartPageNumberArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[21]);
}

// ===================================================================

class CommandSetStartPageNumberArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetStartPageNumberArchive>()._has_bits_);
  static void set_has_old_start_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& sheet_uid(const CommandSetStartPageNumberArchive* msg);
  static void set_has_sheet_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const CommandSetStartPageNumberArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::UUID&
CommandSetStartPageNumberArchive::_Internal::sheet_uid(const CommandSetStartPageNumberArchive* msg) {
  return *msg->sheet_uid_;
}
const ::TSK::CommandArchive&
CommandSetStartPageNumberArchive::_Internal::super(const CommandSetStartPageNumberArchive* msg) {
  return *msg->super_;
}
void CommandSetStartPageNumberArchive::clear_sheet_uid() {
  if (sheet_uid_ != nullptr) sheet_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSetStartPageNumberArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSetStartPageNumberArchive::CommandSetStartPageNumberArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSetStartPageNumberArchive)
}
CommandSetStartPageNumberArchive::CommandSetStartPageNumberArchive(const CommandSetStartPageNumberArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet_uid()) {
    sheet_uid_ = new ::TSP::UUID(*from.sheet_uid_);
  } else {
    sheet_uid_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&old_start_page_number_, &from.old_start_page_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_page_number_) -
    reinterpret_cast<char*>(&old_start_page_number_)) + sizeof(start_page_number_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandSetStartPageNumberArchive)
}

void CommandSetStartPageNumberArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_page_number_) -
    reinterpret_cast<char*>(&sheet_uid_)) + sizeof(start_page_number_));
}

CommandSetStartPageNumberArchive::~CommandSetStartPageNumberArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSetStartPageNumberArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSetStartPageNumberArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_uid_;
  if (this != internal_default_instance()) delete super_;
}

void CommandSetStartPageNumberArchive::ArenaDtor(void* object) {
  CommandSetStartPageNumberArchive* _this = reinterpret_cast< CommandSetStartPageNumberArchive* >(object);
  (void)_this;
}
void CommandSetStartPageNumberArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetStartPageNumberArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetStartPageNumberArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSetStartPageNumberArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sheet_uid_ != nullptr);
      sheet_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&old_start_page_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_page_number_) -
        reinterpret_cast<char*>(&old_start_page_number_)) + sizeof(start_page_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetStartPageNumberArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 old_start_page_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_old_start_page_number(&has_bits);
          old_start_page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 start_page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_page_number(&has_bits);
          start_page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetStartPageNumberArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSetStartPageNumberArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 old_start_page_number = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_old_start_page_number(), target);
  }

  // required int32 start_page_number = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_start_page_number(), target);
  }

  // required .TSP.UUID sheet_uid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sheet_uid(this), target, stream);
  }

  // required .TSK.CommandArchive super = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSetStartPageNumberArchive)
  return target;
}

size_t CommandSetStartPageNumberArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSetStartPageNumberArchive)
  size_t total_size = 0;

  if (_internal_has_sheet_uid()) {
    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_old_start_page_number()) {
    // required int32 old_start_page_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_old_start_page_number());
  }

  if (_internal_has_start_page_number()) {
    // required int32 start_page_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_page_number());
  }

  return total_size;
}
size_t CommandSetStartPageNumberArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSetStartPageNumberArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.UUID sheet_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uid_);

    // required .TSK.CommandArchive super = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required int32 old_start_page_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_old_start_page_number());

    // required int32 start_page_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_page_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSetStartPageNumberArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSetStartPageNumberArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSetStartPageNumberArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSetStartPageNumberArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSetStartPageNumberArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSetStartPageNumberArchive)
    MergeFrom(*source);
  }
}

void CommandSetStartPageNumberArchive::MergeFrom(const CommandSetStartPageNumberArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSetStartPageNumberArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet_uid()->::TSP::UUID::MergeFrom(from._internal_sheet_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      old_start_page_number_ = from.old_start_page_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_page_number_ = from.start_page_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandSetStartPageNumberArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSetStartPageNumberArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetStartPageNumberArchive::CopyFrom(const CommandSetStartPageNumberArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSetStartPageNumberArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetStartPageNumberArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet_uid()) {
    if (!sheet_uid_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetStartPageNumberArchive::InternalSwap(CommandSetStartPageNumberArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetStartPageNumberArchive, start_page_number_)
      + sizeof(CommandSetStartPageNumberArchive::start_page_number_)
      - PROTOBUF_FIELD_OFFSET(CommandSetStartPageNumberArchive, sheet_uid_)>(
          reinterpret_cast<char*>(&sheet_uid_),
          reinterpret_cast<char*>(&other->sheet_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetStartPageNumberArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[22]);
}

// ===================================================================

class CommandReorderSidebarItemChildrenAchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReorderSidebarItemChildrenAchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandReorderSidebarItemChildrenAchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& sheet(const CommandReorderSidebarItemChildrenAchive* msg);
  static void set_has_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandReorderSidebarItemChildrenAchive::_Internal::super(const CommandReorderSidebarItemChildrenAchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandReorderSidebarItemChildrenAchive::_Internal::sheet(const CommandReorderSidebarItemChildrenAchive* msg) {
  return *msg->sheet_;
}
void CommandReorderSidebarItemChildrenAchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandReorderSidebarItemChildrenAchive::clear_sheet() {
  if (sheet_ != nullptr) sheet_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandReorderSidebarItemChildrenAchive::clear_old_children() {
  old_children_.Clear();
}
void CommandReorderSidebarItemChildrenAchive::clear_new_children() {
  new_children_.Clear();
}
CommandReorderSidebarItemChildrenAchive::CommandReorderSidebarItemChildrenAchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  old_children_(arena),
  new_children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandReorderSidebarItemChildrenAchive)
}
CommandReorderSidebarItemChildrenAchive::CommandReorderSidebarItemChildrenAchive(const CommandReorderSidebarItemChildrenAchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      old_children_(from.old_children_),
      new_children_(from.new_children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_sheet()) {
    sheet_ = new ::TSP::Reference(*from.sheet_);
  } else {
    sheet_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandReorderSidebarItemChildrenAchive)
}

void CommandReorderSidebarItemChildrenAchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sheet_) -
    reinterpret_cast<char*>(&super_)) + sizeof(sheet_));
}

CommandReorderSidebarItemChildrenAchive::~CommandReorderSidebarItemChildrenAchive() {
  // @@protoc_insertion_point(destructor:TN.CommandReorderSidebarItemChildrenAchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandReorderSidebarItemChildrenAchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete sheet_;
}

void CommandReorderSidebarItemChildrenAchive::ArenaDtor(void* object) {
  CommandReorderSidebarItemChildrenAchive* _this = reinterpret_cast< CommandReorderSidebarItemChildrenAchive* >(object);
  (void)_this;
}
void CommandReorderSidebarItemChildrenAchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReorderSidebarItemChildrenAchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandReorderSidebarItemChildrenAchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandReorderSidebarItemChildrenAchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_children_.Clear();
  new_children_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sheet_ != nullptr);
      sheet_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReorderSidebarItemChildrenAchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference new_children = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReorderSidebarItemChildrenAchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandReorderSidebarItemChildrenAchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference sheet = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet(this), target, stream);
  }

  // repeated .TSP.Reference old_children = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_old_children(i), target, stream);
  }

  // repeated .TSP.Reference new_children = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_new_children(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandReorderSidebarItemChildrenAchive)
  return target;
}

size_t CommandReorderSidebarItemChildrenAchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandReorderSidebarItemChildrenAchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_sheet()) {
    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_);
  }

  return total_size;
}
size_t CommandReorderSidebarItemChildrenAchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandReorderSidebarItemChildrenAchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference sheet = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference old_children = 3;
  total_size += 1UL * this->_internal_old_children_size();
  for (const auto& msg : this->old_children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference new_children = 4;
  total_size += 1UL * this->_internal_new_children_size();
  for (const auto& msg : this->new_children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandReorderSidebarItemChildrenAchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandReorderSidebarItemChildrenAchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReorderSidebarItemChildrenAchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandReorderSidebarItemChildrenAchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandReorderSidebarItemChildrenAchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandReorderSidebarItemChildrenAchive)
    MergeFrom(*source);
  }
}

void CommandReorderSidebarItemChildrenAchive::MergeFrom(const CommandReorderSidebarItemChildrenAchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandReorderSidebarItemChildrenAchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_children_.MergeFrom(from.old_children_);
  new_children_.MergeFrom(from.new_children_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sheet()->::TSP::Reference::MergeFrom(from._internal_sheet());
    }
  }
}

void CommandReorderSidebarItemChildrenAchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandReorderSidebarItemChildrenAchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReorderSidebarItemChildrenAchive::CopyFrom(const CommandReorderSidebarItemChildrenAchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandReorderSidebarItemChildrenAchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReorderSidebarItemChildrenAchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_children_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(new_children_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet()) {
    if (!sheet_->IsInitialized()) return false;
  }
  return true;
}

void CommandReorderSidebarItemChildrenAchive::InternalSwap(CommandReorderSidebarItemChildrenAchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  old_children_.InternalSwap(&other->old_children_);
  new_children_.InternalSwap(&other->new_children_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReorderSidebarItemChildrenAchive, sheet_)
      + sizeof(CommandReorderSidebarItemChildrenAchive::sheet_)
      - PROTOBUF_FIELD_OFFSET(CommandReorderSidebarItemChildrenAchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReorderSidebarItemChildrenAchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[23]);
}

// ===================================================================

class CommandChartMediatorSetEditingState::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChartMediatorSetEditingState>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandChartMediatorSetEditingState* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TN::ChartMediatorFormulaStorage& old_formulas(const CommandChartMediatorSetEditingState* msg);
  static void set_has_old_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TN::ChartMediatorFormulaStorage& new_formulas(const CommandChartMediatorSetEditingState* msg);
  static void set_has_new_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_old_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_new_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_old_scatter_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_new_scatter_format(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_for_formula_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandChartMediatorSetEditingState::_Internal::super(const CommandChartMediatorSetEditingState* msg) {
  return *msg->super_;
}
const ::TN::ChartMediatorFormulaStorage&
CommandChartMediatorSetEditingState::_Internal::old_formulas(const CommandChartMediatorSetEditingState* msg) {
  return *msg->old_formulas_;
}
const ::TN::ChartMediatorFormulaStorage&
CommandChartMediatorSetEditingState::_Internal::new_formulas(const CommandChartMediatorSetEditingState* msg) {
  return *msg->new_formulas_;
}
void CommandChartMediatorSetEditingState::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandChartMediatorSetEditingState::clear_old_formulas() {
  if (old_formulas_ != nullptr) old_formulas_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandChartMediatorSetEditingState::clear_new_formulas() {
  if (new_formulas_ != nullptr) new_formulas_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandChartMediatorSetEditingState::CommandChartMediatorSetEditingState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandChartMediatorSetEditingState)
}
CommandChartMediatorSetEditingState::CommandChartMediatorSetEditingState(const CommandChartMediatorSetEditingState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_formulas()) {
    old_formulas_ = new ::TN::ChartMediatorFormulaStorage(*from.old_formulas_);
  } else {
    old_formulas_ = nullptr;
  }
  if (from._internal_has_new_formulas()) {
    new_formulas_ = new ::TN::ChartMediatorFormulaStorage(*from.new_formulas_);
  } else {
    new_formulas_ = nullptr;
  }
  ::memcpy(&old_direction_, &from.old_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_formula_rewrite_) -
    reinterpret_cast<char*>(&old_direction_)) + sizeof(for_formula_rewrite_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandChartMediatorSetEditingState)
}

void CommandChartMediatorSetEditingState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&for_formula_rewrite_) -
    reinterpret_cast<char*>(&super_)) + sizeof(for_formula_rewrite_));
}

CommandChartMediatorSetEditingState::~CommandChartMediatorSetEditingState() {
  // @@protoc_insertion_point(destructor:TN.CommandChartMediatorSetEditingState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandChartMediatorSetEditingState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_formulas_;
  if (this != internal_default_instance()) delete new_formulas_;
}

void CommandChartMediatorSetEditingState::ArenaDtor(void* object) {
  CommandChartMediatorSetEditingState* _this = reinterpret_cast< CommandChartMediatorSetEditingState* >(object);
  (void)_this;
}
void CommandChartMediatorSetEditingState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandChartMediatorSetEditingState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandChartMediatorSetEditingState::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandChartMediatorSetEditingState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_formulas_ != nullptr);
      old_formulas_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_formulas_ != nullptr);
      new_formulas_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&old_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&for_formula_rewrite_) -
        reinterpret_cast<char*>(&old_direction_)) + sizeof(for_formula_rewrite_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChartMediatorSetEditingState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_formulas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_formulas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 old_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_old_direction(&has_bits);
          old_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 new_direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_new_direction(&has_bits);
          new_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 old_scatter_format = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_old_scatter_format(&has_bits);
          old_scatter_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 new_scatter_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_new_scatter_format(&has_bits);
          new_scatter_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool for_formula_rewrite = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_for_formula_rewrite(&has_bits);
          for_formula_rewrite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandChartMediatorSetEditingState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandChartMediatorSetEditingState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_formulas(this), target, stream);
  }

  // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::new_formulas(this), target, stream);
  }

  // optional int32 old_direction = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_old_direction(), target);
  }

  // optional int32 new_direction = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_new_direction(), target);
  }

  // optional int32 old_scatter_format = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_old_scatter_format(), target);
  }

  // optional int32 new_scatter_format = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_new_scatter_format(), target);
  }

  // optional bool for_formula_rewrite = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_for_formula_rewrite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandChartMediatorSetEditingState)
  return target;
}

size_t CommandChartMediatorSetEditingState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandChartMediatorSetEditingState)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TN.ChartMediatorFormulaStorage old_formulas = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_formulas_);
    }

    // optional .TN.ChartMediatorFormulaStorage new_formulas = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_formulas_);
    }

    // optional int32 old_direction = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_old_direction());
    }

    // optional int32 new_direction = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_new_direction());
    }

    // optional int32 old_scatter_format = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_old_scatter_format());
    }

    // optional int32 new_scatter_format = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_new_scatter_format());
    }

    // optional bool for_formula_rewrite = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandChartMediatorSetEditingState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandChartMediatorSetEditingState)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandChartMediatorSetEditingState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandChartMediatorSetEditingState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandChartMediatorSetEditingState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandChartMediatorSetEditingState)
    MergeFrom(*source);
  }
}

void CommandChartMediatorSetEditingState::MergeFrom(const CommandChartMediatorSetEditingState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandChartMediatorSetEditingState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_formulas()->::TN::ChartMediatorFormulaStorage::MergeFrom(from._internal_old_formulas());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_formulas()->::TN::ChartMediatorFormulaStorage::MergeFrom(from._internal_new_formulas());
    }
    if (cached_has_bits & 0x00000008u) {
      old_direction_ = from.old_direction_;
    }
    if (cached_has_bits & 0x00000010u) {
      new_direction_ = from.new_direction_;
    }
    if (cached_has_bits & 0x00000020u) {
      old_scatter_format_ = from.old_scatter_format_;
    }
    if (cached_has_bits & 0x00000040u) {
      new_scatter_format_ = from.new_scatter_format_;
    }
    if (cached_has_bits & 0x00000080u) {
      for_formula_rewrite_ = from.for_formula_rewrite_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandChartMediatorSetEditingState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandChartMediatorSetEditingState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChartMediatorSetEditingState::CopyFrom(const CommandChartMediatorSetEditingState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandChartMediatorSetEditingState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartMediatorSetEditingState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_old_formulas()) {
    if (!old_formulas_->IsInitialized()) return false;
  }
  if (_internal_has_new_formulas()) {
    if (!new_formulas_->IsInitialized()) return false;
  }
  return true;
}

void CommandChartMediatorSetEditingState::InternalSwap(CommandChartMediatorSetEditingState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChartMediatorSetEditingState, for_formula_rewrite_)
      + sizeof(CommandChartMediatorSetEditingState::for_formula_rewrite_)
      - PROTOBUF_FIELD_OFFSET(CommandChartMediatorSetEditingState, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChartMediatorSetEditingState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[24]);
}

// ===================================================================

class CommandChartMediatorSetGridDirection::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChartMediatorSetGridDirection>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandChartMediatorSetGridDirection* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TN::ChartMediatorFormulaStorage& old_formula_storage(const CommandChartMediatorSetGridDirection* msg);
  static void set_has_old_formula_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandChartMediatorSetGridDirection::_Internal::super(const CommandChartMediatorSetGridDirection* msg) {
  return *msg->super_;
}
const ::TN::ChartMediatorFormulaStorage&
CommandChartMediatorSetGridDirection::_Internal::old_formula_storage(const CommandChartMediatorSetGridDirection* msg) {
  return *msg->old_formula_storage_;
}
void CommandChartMediatorSetGridDirection::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandChartMediatorSetGridDirection::clear_old_formula_storage() {
  if (old_formula_storage_ != nullptr) old_formula_storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandChartMediatorSetGridDirection::CommandChartMediatorSetGridDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandChartMediatorSetGridDirection)
}
CommandChartMediatorSetGridDirection::CommandChartMediatorSetGridDirection(const CommandChartMediatorSetGridDirection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_formula_storage()) {
    old_formula_storage_ = new ::TN::ChartMediatorFormulaStorage(*from.old_formula_storage_);
  } else {
    old_formula_storage_ = nullptr;
  }
  ::memcpy(&old_direction_, &from.old_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_direction_) -
    reinterpret_cast<char*>(&old_direction_)) + sizeof(new_direction_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandChartMediatorSetGridDirection)
}

void CommandChartMediatorSetGridDirection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_direction_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_direction_));
}

CommandChartMediatorSetGridDirection::~CommandChartMediatorSetGridDirection() {
  // @@protoc_insertion_point(destructor:TN.CommandChartMediatorSetGridDirection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandChartMediatorSetGridDirection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_formula_storage_;
}

void CommandChartMediatorSetGridDirection::ArenaDtor(void* object) {
  CommandChartMediatorSetGridDirection* _this = reinterpret_cast< CommandChartMediatorSetGridDirection* >(object);
  (void)_this;
}
void CommandChartMediatorSetGridDirection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandChartMediatorSetGridDirection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandChartMediatorSetGridDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandChartMediatorSetGridDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_formula_storage_ != nullptr);
      old_formula_storage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&old_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_direction_) -
        reinterpret_cast<char*>(&old_direction_)) + sizeof(new_direction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChartMediatorSetGridDirection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 old_direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_old_direction(&has_bits);
          old_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 new_direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_new_direction(&has_bits);
          new_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.ChartMediatorFormulaStorage old_formula_storage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_formula_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandChartMediatorSetGridDirection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandChartMediatorSetGridDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 old_direction = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_old_direction(), target);
  }

  // required uint32 new_direction = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_new_direction(), target);
  }

  // optional .TN.ChartMediatorFormulaStorage old_formula_storage = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_formula_storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandChartMediatorSetGridDirection)
  return target;
}

size_t CommandChartMediatorSetGridDirection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandChartMediatorSetGridDirection)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_old_direction()) {
    // required uint32 old_direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_direction());
  }

  if (_internal_has_new_direction()) {
    // required uint32 new_direction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_new_direction());
  }

  return total_size;
}
size_t CommandChartMediatorSetGridDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandChartMediatorSetGridDirection)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 old_direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_direction());

    // required uint32 new_direction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_new_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TN.ChartMediatorFormulaStorage old_formula_storage = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_formula_storage_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandChartMediatorSetGridDirection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandChartMediatorSetGridDirection)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandChartMediatorSetGridDirection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandChartMediatorSetGridDirection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandChartMediatorSetGridDirection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandChartMediatorSetGridDirection)
    MergeFrom(*source);
  }
}

void CommandChartMediatorSetGridDirection::MergeFrom(const CommandChartMediatorSetGridDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandChartMediatorSetGridDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_formula_storage()->::TN::ChartMediatorFormulaStorage::MergeFrom(from._internal_old_formula_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      old_direction_ = from.old_direction_;
    }
    if (cached_has_bits & 0x00000008u) {
      new_direction_ = from.new_direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandChartMediatorSetGridDirection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandChartMediatorSetGridDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChartMediatorSetGridDirection::CopyFrom(const CommandChartMediatorSetGridDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandChartMediatorSetGridDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartMediatorSetGridDirection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_old_formula_storage()) {
    if (!old_formula_storage_->IsInitialized()) return false;
  }
  return true;
}

void CommandChartMediatorSetGridDirection::InternalSwap(CommandChartMediatorSetGridDirection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChartMediatorSetGridDirection, new_direction_)
      + sizeof(CommandChartMediatorSetGridDirection::new_direction_)
      - PROTOBUF_FIELD_OFFSET(CommandChartMediatorSetGridDirection, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChartMediatorSetGridDirection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[25]);
}

// ===================================================================

class CommandChartMediatorSetSeriesOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChartMediatorSetSeriesOrder>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandChartMediatorSetSeriesOrder* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& series_id(const CommandChartMediatorSetSeriesOrder* msg);
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& preceding_series_id(const CommandChartMediatorSetSeriesOrder* msg);
  static void set_has_preceding_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& inverse_series_id(const CommandChartMediatorSetSeriesOrder* msg);
  static void set_has_inverse_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& inverse_preceding_series_id(const CommandChartMediatorSetSeriesOrder* msg);
  static void set_has_inverse_preceding_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_undo_current_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_undo_new_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TN::ChartMediatorFormulaStorage& old_formula_storage(const CommandChartMediatorSetSeriesOrder* msg);
  static void set_has_old_formula_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000c1) ^ 0x000000c1) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandChartMediatorSetSeriesOrder::_Internal::super(const CommandChartMediatorSetSeriesOrder* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandChartMediatorSetSeriesOrder::_Internal::series_id(const CommandChartMediatorSetSeriesOrder* msg) {
  return *msg->series_id_;
}
const ::TSP::UUID&
CommandChartMediatorSetSeriesOrder::_Internal::preceding_series_id(const CommandChartMediatorSetSeriesOrder* msg) {
  return *msg->preceding_series_id_;
}
const ::TSP::UUID&
CommandChartMediatorSetSeriesOrder::_Internal::inverse_series_id(const CommandChartMediatorSetSeriesOrder* msg) {
  return *msg->inverse_series_id_;
}
const ::TSP::UUID&
CommandChartMediatorSetSeriesOrder::_Internal::inverse_preceding_series_id(const CommandChartMediatorSetSeriesOrder* msg) {
  return *msg->inverse_preceding_series_id_;
}
const ::TN::ChartMediatorFormulaStorage&
CommandChartMediatorSetSeriesOrder::_Internal::old_formula_storage(const CommandChartMediatorSetSeriesOrder* msg) {
  return *msg->old_formula_storage_;
}
void CommandChartMediatorSetSeriesOrder::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandChartMediatorSetSeriesOrder::clear_series_id() {
  if (series_id_ != nullptr) series_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandChartMediatorSetSeriesOrder::clear_preceding_series_id() {
  if (preceding_series_id_ != nullptr) preceding_series_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandChartMediatorSetSeriesOrder::clear_inverse_series_id() {
  if (inverse_series_id_ != nullptr) inverse_series_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandChartMediatorSetSeriesOrder::clear_inverse_preceding_series_id() {
  if (inverse_preceding_series_id_ != nullptr) inverse_preceding_series_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandChartMediatorSetSeriesOrder::clear_old_formula_storage() {
  if (old_formula_storage_ != nullptr) old_formula_storage_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CommandChartMediatorSetSeriesOrder::CommandChartMediatorSetSeriesOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandChartMediatorSetSeriesOrder)
}
CommandChartMediatorSetSeriesOrder::CommandChartMediatorSetSeriesOrder(const CommandChartMediatorSetSeriesOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_series_id()) {
    series_id_ = new ::TSP::UUID(*from.series_id_);
  } else {
    series_id_ = nullptr;
  }
  if (from._internal_has_preceding_series_id()) {
    preceding_series_id_ = new ::TSP::UUID(*from.preceding_series_id_);
  } else {
    preceding_series_id_ = nullptr;
  }
  if (from._internal_has_inverse_series_id()) {
    inverse_series_id_ = new ::TSP::UUID(*from.inverse_series_id_);
  } else {
    inverse_series_id_ = nullptr;
  }
  if (from._internal_has_inverse_preceding_series_id()) {
    inverse_preceding_series_id_ = new ::TSP::UUID(*from.inverse_preceding_series_id_);
  } else {
    inverse_preceding_series_id_ = nullptr;
  }
  if (from._internal_has_old_formula_storage()) {
    old_formula_storage_ = new ::TN::ChartMediatorFormulaStorage(*from.old_formula_storage_);
  } else {
    old_formula_storage_ = nullptr;
  }
  ::memcpy(&undo_current_index_, &from.undo_current_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_new_index_) -
    reinterpret_cast<char*>(&undo_current_index_)) + sizeof(undo_new_index_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandChartMediatorSetSeriesOrder)
}

void CommandChartMediatorSetSeriesOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_new_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_new_index_));
}

CommandChartMediatorSetSeriesOrder::~CommandChartMediatorSetSeriesOrder() {
  // @@protoc_insertion_point(destructor:TN.CommandChartMediatorSetSeriesOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandChartMediatorSetSeriesOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete series_id_;
  if (this != internal_default_instance()) delete preceding_series_id_;
  if (this != internal_default_instance()) delete inverse_series_id_;
  if (this != internal_default_instance()) delete inverse_preceding_series_id_;
  if (this != internal_default_instance()) delete old_formula_storage_;
}

void CommandChartMediatorSetSeriesOrder::ArenaDtor(void* object) {
  CommandChartMediatorSetSeriesOrder* _this = reinterpret_cast< CommandChartMediatorSetSeriesOrder* >(object);
  (void)_this;
}
void CommandChartMediatorSetSeriesOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandChartMediatorSetSeriesOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandChartMediatorSetSeriesOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandChartMediatorSetSeriesOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(series_id_ != nullptr);
      series_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(preceding_series_id_ != nullptr);
      preceding_series_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(inverse_series_id_ != nullptr);
      inverse_series_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(inverse_preceding_series_id_ != nullptr);
      inverse_preceding_series_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(old_formula_storage_ != nullptr);
      old_formula_storage_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&undo_current_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undo_new_index_) -
        reinterpret_cast<char*>(&undo_current_index_)) + sizeof(undo_new_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChartMediatorSetSeriesOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID series_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID preceding_series_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preceding_series_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID inverse_series_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_series_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID inverse_preceding_series_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_preceding_series_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 undo_current_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_undo_current_index(&has_bits);
          undo_current_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 undo_new_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_undo_new_index(&has_bits);
          undo_new_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TN.ChartMediatorFormulaStorage old_formula_storage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_formula_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandChartMediatorSetSeriesOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandChartMediatorSetSeriesOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUID series_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::series_id(this), target, stream);
  }

  // optional .TSP.UUID preceding_series_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::preceding_series_id(this), target, stream);
  }

  // optional .TSP.UUID inverse_series_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::inverse_series_id(this), target, stream);
  }

  // optional .TSP.UUID inverse_preceding_series_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::inverse_preceding_series_id(this), target, stream);
  }

  // required int32 undo_current_index = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_undo_current_index(), target);
  }

  // required int32 undo_new_index = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_undo_new_index(), target);
  }

  // optional .TN.ChartMediatorFormulaStorage old_formula_storage = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::old_formula_storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandChartMediatorSetSeriesOrder)
  return target;
}

size_t CommandChartMediatorSetSeriesOrder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandChartMediatorSetSeriesOrder)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_undo_current_index()) {
    // required int32 undo_current_index = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_undo_current_index());
  }

  if (_internal_has_undo_new_index()) {
    // required int32 undo_new_index = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_undo_new_index());
  }

  return total_size;
}
size_t CommandChartMediatorSetSeriesOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandChartMediatorSetSeriesOrder)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000c1) ^ 0x000000c1) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required int32 undo_current_index = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_undo_current_index());

    // required int32 undo_new_index = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_undo_new_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSP.UUID series_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *series_id_);
    }

    // optional .TSP.UUID preceding_series_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preceding_series_id_);
    }

    // optional .TSP.UUID inverse_series_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inverse_series_id_);
    }

    // optional .TSP.UUID inverse_preceding_series_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inverse_preceding_series_id_);
    }

    // optional .TN.ChartMediatorFormulaStorage old_formula_storage = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_formula_storage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandChartMediatorSetSeriesOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandChartMediatorSetSeriesOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandChartMediatorSetSeriesOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandChartMediatorSetSeriesOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandChartMediatorSetSeriesOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandChartMediatorSetSeriesOrder)
    MergeFrom(*source);
  }
}

void CommandChartMediatorSetSeriesOrder::MergeFrom(const CommandChartMediatorSetSeriesOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandChartMediatorSetSeriesOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_series_id()->::TSP::UUID::MergeFrom(from._internal_series_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_preceding_series_id()->::TSP::UUID::MergeFrom(from._internal_preceding_series_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_inverse_series_id()->::TSP::UUID::MergeFrom(from._internal_inverse_series_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_inverse_preceding_series_id()->::TSP::UUID::MergeFrom(from._internal_inverse_preceding_series_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_old_formula_storage()->::TN::ChartMediatorFormulaStorage::MergeFrom(from._internal_old_formula_storage());
    }
    if (cached_has_bits & 0x00000040u) {
      undo_current_index_ = from.undo_current_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      undo_new_index_ = from.undo_new_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandChartMediatorSetSeriesOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandChartMediatorSetSeriesOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChartMediatorSetSeriesOrder::CopyFrom(const CommandChartMediatorSetSeriesOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandChartMediatorSetSeriesOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartMediatorSetSeriesOrder::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_series_id()) {
    if (!series_id_->IsInitialized()) return false;
  }
  if (_internal_has_preceding_series_id()) {
    if (!preceding_series_id_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_series_id()) {
    if (!inverse_series_id_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_preceding_series_id()) {
    if (!inverse_preceding_series_id_->IsInitialized()) return false;
  }
  if (_internal_has_old_formula_storage()) {
    if (!old_formula_storage_->IsInitialized()) return false;
  }
  return true;
}

void CommandChartMediatorSetSeriesOrder::InternalSwap(CommandChartMediatorSetSeriesOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChartMediatorSetSeriesOrder, undo_new_index_)
      + sizeof(CommandChartMediatorSetSeriesOrder::undo_new_index_)
      - PROTOBUF_FIELD_OFFSET(CommandChartMediatorSetSeriesOrder, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChartMediatorSetSeriesOrder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[26]);
}

// ===================================================================

class CommandChartMediatorUpdateForEntityDelete::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChartMediatorUpdateForEntityDelete>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandChartMediatorUpdateForEntityDelete* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cmd(const CommandChartMediatorUpdateForEntityDelete* msg);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandChartMediatorUpdateForEntityDelete::_Internal::super(const CommandChartMediatorUpdateForEntityDelete* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandChartMediatorUpdateForEntityDelete::_Internal::cmd(const CommandChartMediatorUpdateForEntityDelete* msg) {
  return *msg->cmd_;
}
void CommandChartMediatorUpdateForEntityDelete::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandChartMediatorUpdateForEntityDelete::clear_cmd() {
  if (cmd_ != nullptr) cmd_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandChartMediatorUpdateForEntityDelete::CommandChartMediatorUpdateForEntityDelete(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandChartMediatorUpdateForEntityDelete)
}
CommandChartMediatorUpdateForEntityDelete::CommandChartMediatorUpdateForEntityDelete(const CommandChartMediatorUpdateForEntityDelete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cmd()) {
    cmd_ = new ::TSP::Reference(*from.cmd_);
  } else {
    cmd_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandChartMediatorUpdateForEntityDelete)
}

void CommandChartMediatorUpdateForEntityDelete::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&super_)) + sizeof(cmd_));
}

CommandChartMediatorUpdateForEntityDelete::~CommandChartMediatorUpdateForEntityDelete() {
  // @@protoc_insertion_point(destructor:TN.CommandChartMediatorUpdateForEntityDelete)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandChartMediatorUpdateForEntityDelete::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cmd_;
}

void CommandChartMediatorUpdateForEntityDelete::ArenaDtor(void* object) {
  CommandChartMediatorUpdateForEntityDelete* _this = reinterpret_cast< CommandChartMediatorUpdateForEntityDelete* >(object);
  (void)_this;
}
void CommandChartMediatorUpdateForEntityDelete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandChartMediatorUpdateForEntityDelete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandChartMediatorUpdateForEntityDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandChartMediatorUpdateForEntityDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cmd_ != nullptr);
      cmd_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChartMediatorUpdateForEntityDelete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cmd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandChartMediatorUpdateForEntityDelete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandChartMediatorUpdateForEntityDelete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference cmd = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cmd(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandChartMediatorUpdateForEntityDelete)
  return target;
}

size_t CommandChartMediatorUpdateForEntityDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandChartMediatorUpdateForEntityDelete)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference cmd = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cmd_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandChartMediatorUpdateForEntityDelete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandChartMediatorUpdateForEntityDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandChartMediatorUpdateForEntityDelete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandChartMediatorUpdateForEntityDelete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandChartMediatorUpdateForEntityDelete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandChartMediatorUpdateForEntityDelete)
    MergeFrom(*source);
  }
}

void CommandChartMediatorUpdateForEntityDelete::MergeFrom(const CommandChartMediatorUpdateForEntityDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandChartMediatorUpdateForEntityDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cmd()->::TSP::Reference::MergeFrom(from._internal_cmd());
    }
  }
}

void CommandChartMediatorUpdateForEntityDelete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandChartMediatorUpdateForEntityDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChartMediatorUpdateForEntityDelete::CopyFrom(const CommandChartMediatorUpdateForEntityDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandChartMediatorUpdateForEntityDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartMediatorUpdateForEntityDelete::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cmd()) {
    if (!cmd_->IsInitialized()) return false;
  }
  return true;
}

void CommandChartMediatorUpdateForEntityDelete::InternalSwap(CommandChartMediatorUpdateForEntityDelete* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChartMediatorUpdateForEntityDelete, cmd_)
      + sizeof(CommandChartMediatorUpdateForEntityDelete::cmd_)
      - PROTOBUF_FIELD_OFFSET(CommandChartMediatorUpdateForEntityDelete, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChartMediatorUpdateForEntityDelete::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[27]);
}

// ===================================================================

class CommandChartMediatorSetFormula::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChartMediatorSetFormula>()._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandChartMediatorSetFormula* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_update_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_series_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_axis_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandChartMediatorSetFormula::_Internal::super(const CommandChartMediatorSetFormula* msg) {
  return *msg->super_;
}
void CommandChartMediatorSetFormula::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandChartMediatorSetFormula::clear_formulae() {
  formulae_.Clear();
}
void CommandChartMediatorSetFormula::clear_old_formulae() {
  old_formulae_.Clear();
}
CommandChartMediatorSetFormula::CommandChartMediatorSetFormula(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  formulae_(arena),
  old_formulae_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandChartMediatorSetFormula)
}
CommandChartMediatorSetFormula::CommandChartMediatorSetFormula(const CommandChartMediatorSetFormula& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      formulae_(from.formulae_),
      old_formulae_(from.old_formulae_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSCH::ChartCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&model_update_data_type_, &from.model_update_data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_type_) -
    reinterpret_cast<char*>(&model_update_data_type_)) + sizeof(axis_type_));
  // @@protoc_insertion_point(copy_constructor:TN.CommandChartMediatorSetFormula)
}

void CommandChartMediatorSetFormula::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&axis_type_) -
    reinterpret_cast<char*>(&super_)) + sizeof(axis_type_));
}

CommandChartMediatorSetFormula::~CommandChartMediatorSetFormula() {
  // @@protoc_insertion_point(destructor:TN.CommandChartMediatorSetFormula)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandChartMediatorSetFormula::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandChartMediatorSetFormula::ArenaDtor(void* object) {
  CommandChartMediatorSetFormula* _this = reinterpret_cast< CommandChartMediatorSetFormula* >(object);
  (void)_this;
}
void CommandChartMediatorSetFormula::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandChartMediatorSetFormula::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandChartMediatorSetFormula::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandChartMediatorSetFormula)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  formulae_.Clear();
  old_formulae_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&model_update_data_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&axis_type_) -
        reinterpret_cast<char*>(&model_update_data_type_)) + sizeof(axis_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChartMediatorSetFormula::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 model_update_data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_model_update_data_type(&has_bits);
          model_update_data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive formulae = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive old_formulae = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_formulae(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint32 series_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_series_index(&has_bits);
          series_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 axis_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_axis_type(&has_bits);
          axis_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandChartMediatorSetFormula::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandChartMediatorSetFormula)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required int32 model_update_data_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_model_update_data_type(), target);
  }

  // repeated .TSCE.FormulaArchive formulae = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formulae_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_formulae(i), target, stream);
  }

  // repeated .TSCE.FormulaArchive old_formulae = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_formulae_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_old_formulae(i), target, stream);
  }

  // required uint32 series_index = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_series_index(), target);
  }

  // required int32 axis_type = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_axis_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandChartMediatorSetFormula)
  return target;
}

size_t CommandChartMediatorSetFormula::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandChartMediatorSetFormula)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_model_update_data_type()) {
    // required int32 model_update_data_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_update_data_type());
  }

  if (_internal_has_series_index()) {
    // required uint32 series_index = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_series_index());
  }

  if (_internal_has_axis_type()) {
    // required int32 axis_type = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis_type());
  }

  return total_size;
}
size_t CommandChartMediatorSetFormula::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandChartMediatorSetFormula)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required int32 model_update_data_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_update_data_type());

    // required uint32 series_index = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_series_index());

    // required int32 axis_type = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.FormulaArchive formulae = 3;
  total_size += 1UL * this->_internal_formulae_size();
  for (const auto& msg : this->formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive old_formulae = 4;
  total_size += 1UL * this->_internal_old_formulae_size();
  for (const auto& msg : this->old_formulae_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandChartMediatorSetFormula::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandChartMediatorSetFormula)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandChartMediatorSetFormula* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandChartMediatorSetFormula>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandChartMediatorSetFormula)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandChartMediatorSetFormula)
    MergeFrom(*source);
  }
}

void CommandChartMediatorSetFormula::MergeFrom(const CommandChartMediatorSetFormula& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandChartMediatorSetFormula)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  formulae_.MergeFrom(from.formulae_);
  old_formulae_.MergeFrom(from.old_formulae_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      model_update_data_type_ = from.model_update_data_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_index_ = from.series_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      axis_type_ = from.axis_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandChartMediatorSetFormula::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandChartMediatorSetFormula)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChartMediatorSetFormula::CopyFrom(const CommandChartMediatorSetFormula& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandChartMediatorSetFormula)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartMediatorSetFormula::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(formulae_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_formulae_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandChartMediatorSetFormula::InternalSwap(CommandChartMediatorSetFormula* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  formulae_.InternalSwap(&other->formulae_);
  old_formulae_.InternalSwap(&other->old_formulae_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChartMediatorSetFormula, axis_type_)
      + sizeof(CommandChartMediatorSetFormula::axis_type_)
      - PROTOBUF_FIELD_OFFSET(CommandChartMediatorSetFormula, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChartMediatorSetFormula::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[28]);
}

// ===================================================================

class CommandSheetSetBackgroundFillArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSheetSetBackgroundFillArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSheetSetBackgroundFillArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& sheet_id(const CommandSheetSetBackgroundFillArchive* msg);
  static void set_has_sheet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::FillArchive& new_fill(const CommandSheetSetBackgroundFillArchive* msg);
  static void set_has_new_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::FillArchive& old_fill(const CommandSheetSetBackgroundFillArchive* msg);
  static void set_has_old_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSheetSetBackgroundFillArchive::_Internal::super(const CommandSheetSetBackgroundFillArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSheetSetBackgroundFillArchive::_Internal::sheet_id(const CommandSheetSetBackgroundFillArchive* msg) {
  return *msg->sheet_id_;
}
const ::TSD::FillArchive&
CommandSheetSetBackgroundFillArchive::_Internal::new_fill(const CommandSheetSetBackgroundFillArchive* msg) {
  return *msg->new_fill_;
}
const ::TSD::FillArchive&
CommandSheetSetBackgroundFillArchive::_Internal::old_fill(const CommandSheetSetBackgroundFillArchive* msg) {
  return *msg->old_fill_;
}
void CommandSheetSetBackgroundFillArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSheetSetBackgroundFillArchive::clear_sheet_id() {
  if (sheet_id_ != nullptr) sheet_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSheetSetBackgroundFillArchive::clear_new_fill() {
  if (new_fill_ != nullptr) new_fill_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSheetSetBackgroundFillArchive::clear_old_fill() {
  if (old_fill_ != nullptr) old_fill_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandSheetSetBackgroundFillArchive::CommandSheetSetBackgroundFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSheetSetBackgroundFillArchive)
}
CommandSheetSetBackgroundFillArchive::CommandSheetSetBackgroundFillArchive(const CommandSheetSetBackgroundFillArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_sheet_id()) {
    sheet_id_ = new ::TSP::UUID(*from.sheet_id_);
  } else {
    sheet_id_ = nullptr;
  }
  if (from._internal_has_new_fill()) {
    new_fill_ = new ::TSD::FillArchive(*from.new_fill_);
  } else {
    new_fill_ = nullptr;
  }
  if (from._internal_has_old_fill()) {
    old_fill_ = new ::TSD::FillArchive(*from.old_fill_);
  } else {
    old_fill_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandSheetSetBackgroundFillArchive)
}

void CommandSheetSetBackgroundFillArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_fill_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_fill_));
}

CommandSheetSetBackgroundFillArchive::~CommandSheetSetBackgroundFillArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSheetSetBackgroundFillArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSheetSetBackgroundFillArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete sheet_id_;
  if (this != internal_default_instance()) delete new_fill_;
  if (this != internal_default_instance()) delete old_fill_;
}

void CommandSheetSetBackgroundFillArchive::ArenaDtor(void* object) {
  CommandSheetSetBackgroundFillArchive* _this = reinterpret_cast< CommandSheetSetBackgroundFillArchive* >(object);
  (void)_this;
}
void CommandSheetSetBackgroundFillArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSheetSetBackgroundFillArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSheetSetBackgroundFillArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSheetSetBackgroundFillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sheet_id_ != nullptr);
      sheet_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_fill_ != nullptr);
      new_fill_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_fill_ != nullptr);
      old_fill_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSheetSetBackgroundFillArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSD.FillArchive new_fill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSD.FillArchive old_fill = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSheetSetBackgroundFillArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSheetSetBackgroundFillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID sheet_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet_id(this), target, stream);
  }

  // required .TSD.FillArchive new_fill = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_fill(this), target, stream);
  }

  // required .TSD.FillArchive old_fill = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_fill(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSheetSetBackgroundFillArchive)
  return target;
}

size_t CommandSheetSetBackgroundFillArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSheetSetBackgroundFillArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_sheet_id()) {
    // required .TSP.UUID sheet_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_id_);
  }

  if (_internal_has_new_fill()) {
    // required .TSD.FillArchive new_fill = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_fill_);
  }

  if (_internal_has_old_fill()) {
    // required .TSD.FillArchive old_fill = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_fill_);
  }

  return total_size;
}
size_t CommandSheetSetBackgroundFillArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSheetSetBackgroundFillArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID sheet_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_id_);

    // required .TSD.FillArchive new_fill = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_fill_);

    // required .TSD.FillArchive old_fill = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_fill_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSheetSetBackgroundFillArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSheetSetBackgroundFillArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSheetSetBackgroundFillArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSheetSetBackgroundFillArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSheetSetBackgroundFillArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSheetSetBackgroundFillArchive)
    MergeFrom(*source);
  }
}

void CommandSheetSetBackgroundFillArchive::MergeFrom(const CommandSheetSetBackgroundFillArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSheetSetBackgroundFillArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sheet_id()->::TSP::UUID::MergeFrom(from._internal_sheet_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_fill()->::TSD::FillArchive::MergeFrom(from._internal_new_fill());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_fill()->::TSD::FillArchive::MergeFrom(from._internal_old_fill());
    }
  }
}

void CommandSheetSetBackgroundFillArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSheetSetBackgroundFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSheetSetBackgroundFillArchive::CopyFrom(const CommandSheetSetBackgroundFillArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSheetSetBackgroundFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSheetSetBackgroundFillArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_id()) {
    if (!sheet_id_->IsInitialized()) return false;
  }
  if (_internal_has_new_fill()) {
    if (!new_fill_->IsInitialized()) return false;
  }
  if (_internal_has_old_fill()) {
    if (!old_fill_->IsInitialized()) return false;
  }
  return true;
}

void CommandSheetSetBackgroundFillArchive::InternalSwap(CommandSheetSetBackgroundFillArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSheetSetBackgroundFillArchive, old_fill_)
      + sizeof(CommandSheetSetBackgroundFillArchive::old_fill_)
      - PROTOBUF_FIELD_OFFSET(CommandSheetSetBackgroundFillArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSheetSetBackgroundFillArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[29]);
}

// ===================================================================

class CommandSheetSetStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSheetSetStyleArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSheetSetStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& sheet_id(const CommandSheetSetStyleArchive* msg);
  static void set_has_sheet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& sheet_style(const CommandSheetSetStyleArchive* msg);
  static void set_has_sheet_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_sheet_style(const CommandSheetSetStyleArchive* msg);
  static void set_has_old_sheet_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSheetSetStyleArchive::_Internal::super(const CommandSheetSetStyleArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSheetSetStyleArchive::_Internal::sheet_id(const CommandSheetSetStyleArchive* msg) {
  return *msg->sheet_id_;
}
const ::TSP::Reference&
CommandSheetSetStyleArchive::_Internal::sheet_style(const CommandSheetSetStyleArchive* msg) {
  return *msg->sheet_style_;
}
const ::TSP::Reference&
CommandSheetSetStyleArchive::_Internal::old_sheet_style(const CommandSheetSetStyleArchive* msg) {
  return *msg->old_sheet_style_;
}
void CommandSheetSetStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandSheetSetStyleArchive::clear_sheet_id() {
  if (sheet_id_ != nullptr) sheet_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSheetSetStyleArchive::clear_sheet_style() {
  if (sheet_style_ != nullptr) sheet_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSheetSetStyleArchive::clear_old_sheet_style() {
  if (old_sheet_style_ != nullptr) old_sheet_style_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandSheetSetStyleArchive::CommandSheetSetStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandSheetSetStyleArchive)
}
CommandSheetSetStyleArchive::CommandSheetSetStyleArchive(const CommandSheetSetStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_sheet_id()) {
    sheet_id_ = new ::TSP::UUID(*from.sheet_id_);
  } else {
    sheet_id_ = nullptr;
  }
  if (from._internal_has_sheet_style()) {
    sheet_style_ = new ::TSP::Reference(*from.sheet_style_);
  } else {
    sheet_style_ = nullptr;
  }
  if (from._internal_has_old_sheet_style()) {
    old_sheet_style_ = new ::TSP::Reference(*from.old_sheet_style_);
  } else {
    old_sheet_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandSheetSetStyleArchive)
}

void CommandSheetSetStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_sheet_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_sheet_style_));
}

CommandSheetSetStyleArchive::~CommandSheetSetStyleArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandSheetSetStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSheetSetStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete sheet_id_;
  if (this != internal_default_instance()) delete sheet_style_;
  if (this != internal_default_instance()) delete old_sheet_style_;
}

void CommandSheetSetStyleArchive::ArenaDtor(void* object) {
  CommandSheetSetStyleArchive* _this = reinterpret_cast< CommandSheetSetStyleArchive* >(object);
  (void)_this;
}
void CommandSheetSetStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSheetSetStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSheetSetStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandSheetSetStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sheet_id_ != nullptr);
      sheet_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sheet_style_ != nullptr);
      sheet_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_sheet_style_ != nullptr);
      old_sheet_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSheetSetStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sheet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference sheet_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_sheet_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_sheet_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSheetSetStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandSheetSetStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID sheet_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sheet_id(this), target, stream);
  }

  // required .TSP.Reference sheet_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sheet_style(this), target, stream);
  }

  // optional .TSP.Reference old_sheet_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_sheet_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandSheetSetStyleArchive)
  return target;
}

size_t CommandSheetSetStyleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.CommandSheetSetStyleArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_sheet_id()) {
    // required .TSP.UUID sheet_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_id_);
  }

  if (_internal_has_sheet_style()) {
    // required .TSP.Reference sheet_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_style_);
  }

  return total_size;
}
size_t CommandSheetSetStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandSheetSetStyleArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID sheet_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_id_);

    // required .TSP.Reference sheet_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_sheet_style = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_sheet_style_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSheetSetStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandSheetSetStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSheetSetStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSheetSetStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandSheetSetStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandSheetSetStyleArchive)
    MergeFrom(*source);
  }
}

void CommandSheetSetStyleArchive::MergeFrom(const CommandSheetSetStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandSheetSetStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sheet_id()->::TSP::UUID::MergeFrom(from._internal_sheet_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sheet_style()->::TSP::Reference::MergeFrom(from._internal_sheet_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_sheet_style()->::TSP::Reference::MergeFrom(from._internal_old_sheet_style());
    }
  }
}

void CommandSheetSetStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandSheetSetStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSheetSetStyleArchive::CopyFrom(const CommandSheetSetStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandSheetSetStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSheetSetStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_id()) {
    if (!sheet_id_->IsInitialized()) return false;
  }
  if (_internal_has_sheet_style()) {
    if (!sheet_style_->IsInitialized()) return false;
  }
  if (_internal_has_old_sheet_style()) {
    if (!old_sheet_style_->IsInitialized()) return false;
  }
  return true;
}

void CommandSheetSetStyleArchive::InternalSwap(CommandSheetSetStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSheetSetStyleArchive, old_sheet_style_)
      + sizeof(CommandSheetSetStyleArchive::old_sheet_style_)
      - PROTOBUF_FIELD_OFFSET(CommandSheetSetStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSheetSetStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[30]);
}

// ===================================================================

class DocumentSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentSelectionTransformerArchive>()._has_bits_);
  static const ::TSP::Reference& document_selection(const DocumentSelectionTransformerArchive* msg);
  static void set_has_document_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
DocumentSelectionTransformerArchive::_Internal::document_selection(const DocumentSelectionTransformerArchive* msg) {
  return *msg->document_selection_;
}
void DocumentSelectionTransformerArchive::clear_document_selection() {
  if (document_selection_ != nullptr) document_selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.DocumentSelectionTransformerArchive)
}
DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(const DocumentSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document_selection()) {
    document_selection_ = new ::TSP::Reference(*from.document_selection_);
  } else {
    document_selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.DocumentSelectionTransformerArchive)
}

void DocumentSelectionTransformerArchive::SharedCtor() {
document_selection_ = nullptr;
}

DocumentSelectionTransformerArchive::~DocumentSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TN.DocumentSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DocumentSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete document_selection_;
}

void DocumentSelectionTransformerArchive::ArenaDtor(void* object) {
  DocumentSelectionTransformerArchive* _this = reinterpret_cast< DocumentSelectionTransformerArchive* >(object);
  (void)_this;
}
void DocumentSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.DocumentSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(document_selection_ != nullptr);
    document_selection_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference document_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.DocumentSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference document_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document_selection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.DocumentSelectionTransformerArchive)
  return target;
}

size_t DocumentSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.DocumentSelectionTransformerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference document_selection = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_selection_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.DocumentSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DocumentSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.DocumentSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.DocumentSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void DocumentSelectionTransformerArchive::MergeFrom(const DocumentSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.DocumentSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document_selection()) {
    _internal_mutable_document_selection()->::TSP::Reference::MergeFrom(from._internal_document_selection());
  }
}

void DocumentSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.DocumentSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentSelectionTransformerArchive::CopyFrom(const DocumentSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.DocumentSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSelectionTransformerArchive::IsInitialized() const {
  if (_internal_has_document_selection()) {
    if (!document_selection_->IsInitialized()) return false;
  }
  return true;
}

void DocumentSelectionTransformerArchive::InternalSwap(DocumentSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(document_selection_, other->document_selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[31]);
}

// ===================================================================

class SheetSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetSelectionTransformerArchive>()._has_bits_);
  static const ::TSP::UUID& sheet_uuid(const SheetSelectionTransformerArchive* msg);
  static void set_has_sheet_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paginated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::UUID&
SheetSelectionTransformerArchive::_Internal::sheet_uuid(const SheetSelectionTransformerArchive* msg) {
  return *msg->sheet_uuid_;
}
void SheetSelectionTransformerArchive::clear_sheet_uuid() {
  if (sheet_uuid_ != nullptr) sheet_uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SheetSelectionTransformerArchive::SheetSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.SheetSelectionTransformerArchive)
}
SheetSelectionTransformerArchive::SheetSelectionTransformerArchive(const SheetSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet_uuid()) {
    sheet_uuid_ = new ::TSP::UUID(*from.sheet_uuid_);
  } else {
    sheet_uuid_ = nullptr;
  }
  paginated_ = from.paginated_;
  // @@protoc_insertion_point(copy_constructor:TN.SheetSelectionTransformerArchive)
}

void SheetSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sheet_uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&paginated_) -
    reinterpret_cast<char*>(&sheet_uuid_)) + sizeof(paginated_));
}

SheetSelectionTransformerArchive::~SheetSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_uuid_;
}

void SheetSelectionTransformerArchive::ArenaDtor(void* object) {
  SheetSelectionTransformerArchive* _this = reinterpret_cast< SheetSelectionTransformerArchive* >(object);
  (void)_this;
}
void SheetSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SheetSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sheet_uuid_ != nullptr);
    sheet_uuid_->Clear();
  }
  paginated_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID sheet_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool paginated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_paginated(&has_bits);
          paginated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUID sheet_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sheet_uuid(this), target, stream);
  }

  // required bool paginated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_paginated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetSelectionTransformerArchive)
  return target;
}

size_t SheetSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetSelectionTransformerArchive)
  size_t total_size = 0;

  // required bool paginated = 2;
  if (_internal_has_paginated()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUID sheet_uuid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_uuid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.SheetSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.SheetSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.SheetSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void SheetSelectionTransformerArchive::MergeFrom(const SheetSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sheet_uuid()->::TSP::UUID::MergeFrom(from._internal_sheet_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      paginated_ = from.paginated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SheetSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.SheetSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetSelectionTransformerArchive::CopyFrom(const SheetSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet_uuid()) {
    if (!sheet_uuid_->IsInitialized()) return false;
  }
  return true;
}

void SheetSelectionTransformerArchive::InternalSwap(SheetSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SheetSelectionTransformerArchive, paginated_)
      + sizeof(SheetSelectionTransformerArchive::paginated_)
      - PROTOBUF_FIELD_OFFSET(SheetSelectionTransformerArchive, sheet_uuid_)>(
          reinterpret_cast<char*>(&sheet_uuid_),
          reinterpret_cast<char*>(&other->sheet_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[32]);
}

// ===================================================================

class CanvasSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CanvasSelectionTransformerArchive>()._has_bits_);
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper(const CanvasSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& header_storage_uuid_path(const CanvasSelectionTransformerArchive* msg);
  static void set_has_header_storage_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
CanvasSelectionTransformerArchive::_Internal::transformer_helper(const CanvasSelectionTransformerArchive* msg) {
  return *msg->transformer_helper_;
}
const ::TSP::UUIDPath&
CanvasSelectionTransformerArchive::_Internal::header_storage_uuid_path(const CanvasSelectionTransformerArchive* msg) {
  return *msg->header_storage_uuid_path_;
}
void CanvasSelectionTransformerArchive::clear_transformer_helper() {
  if (transformer_helper_ != nullptr) transformer_helper_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CanvasSelectionTransformerArchive::clear_header_storage_uuid_path() {
  if (header_storage_uuid_path_ != nullptr) header_storage_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CanvasSelectionTransformerArchive)
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(const CanvasSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    transformer_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from.transformer_helper_);
  } else {
    transformer_helper_ = nullptr;
  }
  if (from._internal_has_header_storage_uuid_path()) {
    header_storage_uuid_path_ = new ::TSP::UUIDPath(*from.header_storage_uuid_path_);
  } else {
    header_storage_uuid_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CanvasSelectionTransformerArchive)
}

void CanvasSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transformer_helper_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&header_storage_uuid_path_) -
    reinterpret_cast<char*>(&transformer_helper_)) + sizeof(header_storage_uuid_path_));
}

CanvasSelectionTransformerArchive::~CanvasSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TN.CanvasSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CanvasSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transformer_helper_;
  if (this != internal_default_instance()) delete header_storage_uuid_path_;
}

void CanvasSelectionTransformerArchive::ArenaDtor(void* object) {
  CanvasSelectionTransformerArchive* _this = reinterpret_cast< CanvasSelectionTransformerArchive* >(object);
  (void)_this;
}
void CanvasSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanvasSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanvasSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(transformer_helper_ != nullptr);
      transformer_helper_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_storage_uuid_path_ != nullptr);
      header_storage_uuid_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath header_storage_uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_storage_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanvasSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transformer_helper(this), target, stream);
  }

  // optional .TSP.UUIDPath header_storage_uuid_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header_storage_uuid_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CanvasSelectionTransformerArchive)
  return target;
}

size_t CanvasSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CanvasSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (_internal_has_transformer_helper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformer_helper_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDPath header_storage_uuid_path = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_storage_uuid_path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanvasSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CanvasSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanvasSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CanvasSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CanvasSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void CanvasSelectionTransformerArchive::MergeFrom(const CanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_transformer_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(from._internal_transformer_helper());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header_storage_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_header_storage_uuid_path());
    }
  }
}

void CanvasSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanvasSelectionTransformerArchive::CopyFrom(const CanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!transformer_helper_->IsInitialized()) return false;
  }
  if (_internal_has_header_storage_uuid_path()) {
    if (!header_storage_uuid_path_->IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionTransformerArchive::InternalSwap(CanvasSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanvasSelectionTransformerArchive, header_storage_uuid_path_)
      + sizeof(CanvasSelectionTransformerArchive::header_storage_uuid_path_)
      - PROTOBUF_FIELD_OFFSET(CanvasSelectionTransformerArchive, transformer_helper_)>(
          reinterpret_cast<char*>(&transformer_helper_),
          reinterpret_cast<char*>(&other->transformer_helper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[33]);
}

// ===================================================================

class SheetChangeBaseArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetChangeBaseArchive>()._has_bits_);
  static const ::TSP::UUID& sheet_id(const SheetChangeBaseArchive* msg);
  static void set_has_sheet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
SheetChangeBaseArchive::_Internal::sheet_id(const SheetChangeBaseArchive* msg) {
  return *msg->sheet_id_;
}
void SheetChangeBaseArchive::clear_sheet_id() {
  if (sheet_id_ != nullptr) sheet_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SheetChangeBaseArchive::SheetChangeBaseArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.SheetChangeBaseArchive)
}
SheetChangeBaseArchive::SheetChangeBaseArchive(const SheetChangeBaseArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sheet_id()) {
    sheet_id_ = new ::TSP::UUID(*from.sheet_id_);
  } else {
    sheet_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.SheetChangeBaseArchive)
}

void SheetChangeBaseArchive::SharedCtor() {
sheet_id_ = nullptr;
}

SheetChangeBaseArchive::~SheetChangeBaseArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetChangeBaseArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetChangeBaseArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sheet_id_;
}

void SheetChangeBaseArchive::ArenaDtor(void* object) {
  SheetChangeBaseArchive* _this = reinterpret_cast< SheetChangeBaseArchive* >(object);
  (void)_this;
}
void SheetChangeBaseArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetChangeBaseArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SheetChangeBaseArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetChangeBaseArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sheet_id_ != nullptr);
    sheet_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetChangeBaseArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID sheet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetChangeBaseArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetChangeBaseArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID sheet_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sheet_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetChangeBaseArchive)
  return target;
}

size_t SheetChangeBaseArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetChangeBaseArchive)
  size_t total_size = 0;

  // required .TSP.UUID sheet_id = 1;
  if (_internal_has_sheet_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sheet_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetChangeBaseArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.SheetChangeBaseArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetChangeBaseArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetChangeBaseArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.SheetChangeBaseArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.SheetChangeBaseArchive)
    MergeFrom(*source);
  }
}

void SheetChangeBaseArchive::MergeFrom(const SheetChangeBaseArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetChangeBaseArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sheet_id()) {
    _internal_mutable_sheet_id()->::TSP::UUID::MergeFrom(from._internal_sheet_id());
  }
}

void SheetChangeBaseArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.SheetChangeBaseArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetChangeBaseArchive::CopyFrom(const SheetChangeBaseArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetChangeBaseArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetChangeBaseArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sheet_id()) {
    if (!sheet_id_->IsInitialized()) return false;
  }
  return true;
}

void SheetChangeBaseArchive::InternalSwap(SheetChangeBaseArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sheet_id_, other->sheet_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetChangeBaseArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[34]);
}

// ===================================================================

class SheetChangeSheetNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetChangeSheetNameArchive>()._has_bits_);
  static const ::TN::SheetChangeBaseArchive& super(const SheetChangeSheetNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sheet_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TN::SheetChangeBaseArchive&
SheetChangeSheetNameArchive::_Internal::super(const SheetChangeSheetNameArchive* msg) {
  return *msg->super_;
}
SheetChangeSheetNameArchive::SheetChangeSheetNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.SheetChangeSheetNameArchive)
}
SheetChangeSheetNameArchive::SheetChangeSheetNameArchive(const SheetChangeSheetNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sheet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sheet_name()) {
    sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sheet_name(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TN::SheetChangeBaseArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.SheetChangeSheetNameArchive)
}

void SheetChangeSheetNameArchive::SharedCtor() {
sheet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

SheetChangeSheetNameArchive::~SheetChangeSheetNameArchive() {
  // @@protoc_insertion_point(destructor:TN.SheetChangeSheetNameArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetChangeSheetNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sheet_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void SheetChangeSheetNameArchive::ArenaDtor(void* object) {
  SheetChangeSheetNameArchive* _this = reinterpret_cast< SheetChangeSheetNameArchive* >(object);
  (void)_this;
}
void SheetChangeSheetNameArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetChangeSheetNameArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SheetChangeSheetNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.SheetChangeSheetNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sheet_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetChangeSheetNameArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TN.SheetChangeBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string sheet_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sheet_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TN.SheetChangeSheetNameArchive.sheet_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetChangeSheetNameArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.SheetChangeSheetNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TN.SheetChangeBaseArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required string sheet_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sheet_name().data(), static_cast<int>(this->_internal_sheet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TN.SheetChangeSheetNameArchive.sheet_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sheet_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.SheetChangeSheetNameArchive)
  return target;
}

size_t SheetChangeSheetNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TN.SheetChangeSheetNameArchive)
  size_t total_size = 0;

  if (_internal_has_sheet_name()) {
    // required string sheet_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sheet_name());
  }

  if (_internal_has_super()) {
    // required .TN.SheetChangeBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t SheetChangeSheetNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.SheetChangeSheetNameArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string sheet_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sheet_name());

    // required .TN.SheetChangeBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetChangeSheetNameArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.SheetChangeSheetNameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetChangeSheetNameArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetChangeSheetNameArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.SheetChangeSheetNameArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.SheetChangeSheetNameArchive)
    MergeFrom(*source);
  }
}

void SheetChangeSheetNameArchive::MergeFrom(const SheetChangeSheetNameArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.SheetChangeSheetNameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sheet_name(from._internal_sheet_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TN::SheetChangeBaseArchive::MergeFrom(from._internal_super());
    }
  }
}

void SheetChangeSheetNameArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.SheetChangeSheetNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetChangeSheetNameArchive::CopyFrom(const SheetChangeSheetNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.SheetChangeSheetNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetChangeSheetNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void SheetChangeSheetNameArchive::InternalSwap(SheetChangeSheetNameArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sheet_name_.Swap(&other->sheet_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetChangeSheetNameArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[35]);
}

// ===================================================================

class CommandInducedSheetChangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInducedSheetChangeArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandInducedSheetChangeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandInducedSheetChangeArchive::_Internal::super(const CommandInducedSheetChangeArchive* msg) {
  return *msg->super_;
}
void CommandInducedSheetChangeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandInducedSheetChangeArchive::CommandInducedSheetChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sheet_changes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TN.CommandInducedSheetChangeArchive)
}
CommandInducedSheetChangeArchive::CommandInducedSheetChangeArchive(const CommandInducedSheetChangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sheet_changes_(from.sheet_changes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TN.CommandInducedSheetChangeArchive)
}

void CommandInducedSheetChangeArchive::SharedCtor() {
super_ = nullptr;
}

CommandInducedSheetChangeArchive::~CommandInducedSheetChangeArchive() {
  // @@protoc_insertion_point(destructor:TN.CommandInducedSheetChangeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandInducedSheetChangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandInducedSheetChangeArchive::ArenaDtor(void* object) {
  CommandInducedSheetChangeArchive* _this = reinterpret_cast< CommandInducedSheetChangeArchive* >(object);
  (void)_this;
}
void CommandInducedSheetChangeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandInducedSheetChangeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandInducedSheetChangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TN.CommandInducedSheetChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sheet_changes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInducedSheetChangeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TN.SheetChangeSheetNameArchive sheet_changes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheet_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandInducedSheetChangeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TN.CommandInducedSheetChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TN.SheetChangeSheetNameArchive sheet_changes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sheet_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sheet_changes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TN.CommandInducedSheetChangeArchive)
  return target;
}

size_t CommandInducedSheetChangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TN.CommandInducedSheetChangeArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TN.SheetChangeSheetNameArchive sheet_changes = 2;
  total_size += 1UL * this->_internal_sheet_changes_size();
  for (const auto& msg : this->sheet_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandInducedSheetChangeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TN.CommandInducedSheetChangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandInducedSheetChangeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandInducedSheetChangeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TN.CommandInducedSheetChangeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TN.CommandInducedSheetChangeArchive)
    MergeFrom(*source);
  }
}

void CommandInducedSheetChangeArchive::MergeFrom(const CommandInducedSheetChangeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TN.CommandInducedSheetChangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sheet_changes_.MergeFrom(from.sheet_changes_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
}

void CommandInducedSheetChangeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TN.CommandInducedSheetChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInducedSheetChangeArchive::CopyFrom(const CommandInducedSheetChangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TN.CommandInducedSheetChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInducedSheetChangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sheet_changes_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandInducedSheetChangeArchive::InternalSwap(CommandInducedSheetChangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sheet_changes_.InternalSwap(&other->sheet_changes_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInducedSheetChangeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TNCommandArchives_2eproto_getter, &descriptor_table_TNCommandArchives_2eproto_once,
      file_level_metadata_TNCommandArchives_2eproto[36]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TN::CommandFormChooseTargetTableArchive* Arena::CreateMaybeMessage< ::TN::CommandFormChooseTargetTableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandFormChooseTargetTableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSheetInsertDrawablesArchive* Arena::CreateMaybeMessage< ::TN::CommandSheetInsertDrawablesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSheetInsertDrawablesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSheetRemoveDrawablesArchive* Arena::CreateMaybeMessage< ::TN::CommandSheetRemoveDrawablesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSheetRemoveDrawablesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSheetMoveDrawableZOrderArchive* Arena::CreateMaybeMessage< ::TN::CommandSheetMoveDrawableZOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSheetMoveDrawableZOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandDocumentInsertSheetArchive* Arena::CreateMaybeMessage< ::TN::CommandDocumentInsertSheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandDocumentInsertSheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandDocumentRemoveSheetArchive* Arena::CreateMaybeMessage< ::TN::CommandDocumentRemoveSheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandDocumentRemoveSheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandDocumentReorderSheetArchive* Arena::CreateMaybeMessage< ::TN::CommandDocumentReorderSheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandDocumentReorderSheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetSheetNameArchive* Arena::CreateMaybeMessage< ::TN::CommandSetSheetNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetSheetNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetSheetShouldPrintCommentsArchive* Arena::CreateMaybeMessage< ::TN::CommandSetSheetShouldPrintCommentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetSheetShouldPrintCommentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetSheetDirectionArchive* Arena::CreateMaybeMessage< ::TN::CommandSetSheetDirectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetSheetDirectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetPageOrientationArchive* Arena::CreateMaybeMessage< ::TN::CommandSetPageOrientationArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetPageOrientationArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetShowPageNumbersValueArchive* Arena::CreateMaybeMessage< ::TN::CommandSetShowPageNumbersValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetShowPageNumbersValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetRepeatingHeadersValueArchive* Arena::CreateMaybeMessage< ::TN::CommandSetRepeatingHeadersValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetRepeatingHeadersValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetContentScaleArchive* Arena::CreateMaybeMessage< ::TN::CommandSetContentScaleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetContentScaleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetDocumentPaperSize* Arena::CreateMaybeMessage< ::TN::CommandSetDocumentPaperSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetDocumentPaperSize >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandEnterPrintPreviewModeArchive* Arena::CreateMaybeMessage< ::TN::CommandEnterPrintPreviewModeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandEnterPrintPreviewModeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandExitPrintPreviewModeArchive* Arena::CreateMaybeMessage< ::TN::CommandExitPrintPreviewModeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandExitPrintPreviewModeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetPrinterMarginsArchive* Arena::CreateMaybeMessage< ::TN::CommandSetPrinterMarginsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetPrinterMarginsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetPrintBackgroundsArchive* Arena::CreateMaybeMessage< ::TN::CommandSetPrintBackgroundsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetPrintBackgroundsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetHeaderFooterInsetsArchive* Arena::CreateMaybeMessage< ::TN::CommandSetHeaderFooterInsetsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetHeaderFooterInsetsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetPageOrderArchive* Arena::CreateMaybeMessage< ::TN::CommandSetPageOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetPageOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetUsingStartPageNumberArchive* Arena::CreateMaybeMessage< ::TN::CommandSetUsingStartPageNumberArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetUsingStartPageNumberArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSetStartPageNumberArchive* Arena::CreateMaybeMessage< ::TN::CommandSetStartPageNumberArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSetStartPageNumberArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandReorderSidebarItemChildrenAchive* Arena::CreateMaybeMessage< ::TN::CommandReorderSidebarItemChildrenAchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandReorderSidebarItemChildrenAchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandChartMediatorSetEditingState* Arena::CreateMaybeMessage< ::TN::CommandChartMediatorSetEditingState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandChartMediatorSetEditingState >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandChartMediatorSetGridDirection* Arena::CreateMaybeMessage< ::TN::CommandChartMediatorSetGridDirection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandChartMediatorSetGridDirection >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandChartMediatorSetSeriesOrder* Arena::CreateMaybeMessage< ::TN::CommandChartMediatorSetSeriesOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandChartMediatorSetSeriesOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandChartMediatorUpdateForEntityDelete* Arena::CreateMaybeMessage< ::TN::CommandChartMediatorUpdateForEntityDelete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandChartMediatorUpdateForEntityDelete >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandChartMediatorSetFormula* Arena::CreateMaybeMessage< ::TN::CommandChartMediatorSetFormula >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandChartMediatorSetFormula >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSheetSetBackgroundFillArchive* Arena::CreateMaybeMessage< ::TN::CommandSheetSetBackgroundFillArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSheetSetBackgroundFillArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandSheetSetStyleArchive* Arena::CreateMaybeMessage< ::TN::CommandSheetSetStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandSheetSetStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::DocumentSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TN::DocumentSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::DocumentSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::SheetSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TN::SheetSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CanvasSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TN::CanvasSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CanvasSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::SheetChangeBaseArchive* Arena::CreateMaybeMessage< ::TN::SheetChangeBaseArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetChangeBaseArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::SheetChangeSheetNameArchive* Arena::CreateMaybeMessage< ::TN::SheetChangeSheetNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::SheetChangeSheetNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TN::CommandInducedSheetChangeArchive* Arena::CreateMaybeMessage< ::TN::CommandInducedSheetChangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TN::CommandInducedSheetChangeArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
