// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TPCommandArchives.proto

#include "TPCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TP {
constexpr InsertDrawablesCommandArchive::InsertDrawablesCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_()
  , page_index_list_()
  , drawable_info_list_()
  , custom_format_keys_()
  , placeholder_tags_list_()
  , super_(nullptr)
  , drawable_undo_object_(nullptr)
  , for_paste_(false)
  , saved_next_untitled_resolver_index_(0u){}
struct InsertDrawablesCommandArchiveDefaultTypeInternal {
  constexpr InsertDrawablesCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertDrawablesCommandArchiveDefaultTypeInternal() {}
  union {
    InsertDrawablesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertDrawablesCommandArchiveDefaultTypeInternal _InsertDrawablesCommandArchive_default_instance_;
constexpr MoveDrawablesPageIndexCommandArchive_Drawable::MoveDrawablesPageIndexCommandArchive_Drawable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawable_(nullptr)
  , z_order_(0u){}
struct MoveDrawablesPageIndexCommandArchive_DrawableDefaultTypeInternal {
  constexpr MoveDrawablesPageIndexCommandArchive_DrawableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveDrawablesPageIndexCommandArchive_DrawableDefaultTypeInternal() {}
  union {
    MoveDrawablesPageIndexCommandArchive_Drawable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveDrawablesPageIndexCommandArchive_DrawableDefaultTypeInternal _MoveDrawablesPageIndexCommandArchive_Drawable_default_instance_;
constexpr MoveDrawablesPageIndexCommandArchive::MoveDrawablesPageIndexCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawables_()
  , drawable_info_id_path_list_()
  , page_index_list_()
  , original_page_index_list_()
  , tags_list_()
  , original_tags_list_()
  , super_(nullptr)
  , page_index_(0u)
  , maintain_z_order_(false)
  , preserve_tags_(false){}
struct MoveDrawablesPageIndexCommandArchiveDefaultTypeInternal {
  constexpr MoveDrawablesPageIndexCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveDrawablesPageIndexCommandArchiveDefaultTypeInternal() {}
  union {
    MoveDrawablesPageIndexCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveDrawablesPageIndexCommandArchiveDefaultTypeInternal _MoveDrawablesPageIndexCommandArchive_default_instance_;
constexpr InsertSectionBreakCommandArchive::InsertSectionBreakCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct InsertSectionBreakCommandArchiveDefaultTypeInternal {
  constexpr InsertSectionBreakCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertSectionBreakCommandArchiveDefaultTypeInternal() {}
  union {
    InsertSectionBreakCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertSectionBreakCommandArchiveDefaultTypeInternal _InsertSectionBreakCommandArchive_default_instance_;
constexpr MoveDrawableZOrderCommandArchive::MoveDrawableZOrderCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_()
  , super_(nullptr)
  , action_string_index_(0u){}
struct MoveDrawableZOrderCommandArchiveDefaultTypeInternal {
  constexpr MoveDrawableZOrderCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveDrawableZOrderCommandArchiveDefaultTypeInternal() {}
  union {
    MoveDrawableZOrderCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveDrawableZOrderCommandArchiveDefaultTypeInternal _MoveDrawableZOrderCommandArchive_default_instance_;
constexpr RemoveDrawablesCommandArchive::RemoveDrawablesCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_()
  , drawable_info_list_()
  , page_index_list_()
  , tags_list_()
  , super_(nullptr){}
struct RemoveDrawablesCommandArchiveDefaultTypeInternal {
  constexpr RemoveDrawablesCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveDrawablesCommandArchiveDefaultTypeInternal() {}
  union {
    RemoveDrawablesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveDrawablesCommandArchiveDefaultTypeInternal _RemoveDrawablesCommandArchive_default_instance_;
constexpr ChangeSectionMarginsCommandArchive::ChangeSectionMarginsCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , section_(nullptr)
  , margin_(0)

  , margin_value_(0){}
struct ChangeSectionMarginsCommandArchiveDefaultTypeInternal {
  constexpr ChangeSectionMarginsCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeSectionMarginsCommandArchiveDefaultTypeInternal() {}
  union {
    ChangeSectionMarginsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeSectionMarginsCommandArchiveDefaultTypeInternal _ChangeSectionMarginsCommandArchive_default_instance_;
constexpr InsertMasterDrawablesCommandArchive::InsertMasterDrawablesCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : master_drawables_()
  , custom_format_keys_()
  , super_(nullptr)
  , obsolete_section_(nullptr)
  , master_drawable_provider_(nullptr)
  , drawable_index_(0u){}
struct InsertMasterDrawablesCommandArchiveDefaultTypeInternal {
  constexpr InsertMasterDrawablesCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertMasterDrawablesCommandArchiveDefaultTypeInternal() {}
  union {
    InsertMasterDrawablesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertMasterDrawablesCommandArchiveDefaultTypeInternal _InsertMasterDrawablesCommandArchive_default_instance_;
constexpr MoveMasterDrawableZOrderCommandArchive::MoveMasterDrawableZOrderCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : master_drawables_()
  , indexes_()
  , super_(nullptr)
  , obsolete_section_(nullptr)
  , master_drawable_provider_(nullptr){}
struct MoveMasterDrawableZOrderCommandArchiveDefaultTypeInternal {
  constexpr MoveMasterDrawableZOrderCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveMasterDrawableZOrderCommandArchiveDefaultTypeInternal() {}
  union {
    MoveMasterDrawableZOrderCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveMasterDrawableZOrderCommandArchiveDefaultTypeInternal _MoveMasterDrawableZOrderCommandArchive_default_instance_;
constexpr RemoveMasterDrawablesCommandArchive_MasterDrawable::RemoveMasterDrawablesCommandArchive_MasterDrawable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawable_(nullptr)
  , drawable_index_(0u){}
struct RemoveMasterDrawablesCommandArchive_MasterDrawableDefaultTypeInternal {
  constexpr RemoveMasterDrawablesCommandArchive_MasterDrawableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveMasterDrawablesCommandArchive_MasterDrawableDefaultTypeInternal() {}
  union {
    RemoveMasterDrawablesCommandArchive_MasterDrawable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveMasterDrawablesCommandArchive_MasterDrawableDefaultTypeInternal _RemoveMasterDrawablesCommandArchive_MasterDrawable_default_instance_;
constexpr RemoveMasterDrawablesCommandArchive::RemoveMasterDrawablesCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : master_drawables_()
  , super_(nullptr)
  , obsolete_section_(nullptr)
  , master_drawable_provider_(nullptr){}
struct RemoveMasterDrawablesCommandArchiveDefaultTypeInternal {
  constexpr RemoveMasterDrawablesCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveMasterDrawablesCommandArchiveDefaultTypeInternal() {}
  union {
    RemoveMasterDrawablesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveMasterDrawablesCommandArchiveDefaultTypeInternal _RemoveMasterDrawablesCommandArchive_default_instance_;
constexpr PasteMasterDrawablesCommandArchive::PasteMasterDrawablesCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : master_drawables_()
  , super_(nullptr)
  , section_(nullptr)
  , drawable_index_(0u){}
struct PasteMasterDrawablesCommandArchiveDefaultTypeInternal {
  constexpr PasteMasterDrawablesCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PasteMasterDrawablesCommandArchiveDefaultTypeInternal() {}
  union {
    PasteMasterDrawablesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PasteMasterDrawablesCommandArchiveDefaultTypeInternal _PasteMasterDrawablesCommandArchive_default_instance_;
constexpr MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : char_index_(0)
  , h_offset_type_(0u)
  , h_offset_(0)
  , v_offset_type_(0u)
  , v_offset_(0){}
struct MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPositionDefaultTypeInternal {
  constexpr MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPositionDefaultTypeInternal() {}
  union {
    MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPositionDefaultTypeInternal _MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition_default_instance_;
constexpr MoveDrawablesAttachedCommandArchive::MoveDrawablesAttachedCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_()
  , range_list_()
  , drawable_info_id_path_list_()
  , position_list_()
  , exterior_text_wrap_list_()
  , original_page_index_list_()
  , original_exterior_text_wrap_list_()
  , original_attachment_list_()
  , super_(nullptr){}
struct MoveDrawablesAttachedCommandArchiveDefaultTypeInternal {
  constexpr MoveDrawablesAttachedCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveDrawablesAttachedCommandArchiveDefaultTypeInternal() {}
  union {
    MoveDrawablesAttachedCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveDrawablesAttachedCommandArchiveDefaultTypeInternal _MoveDrawablesAttachedCommandArchive_default_instance_;
constexpr MoveDrawablesFloatingCommandArchive::MoveDrawablesFloatingCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_()
  , range_list_()
  , drawable_info_id_path_list_()
  , page_index_list_()
  , exterior_text_wrap_list_()
  , original_attachment_list_()
  , original_exterior_text_wrap_list_()
  , super_(nullptr){}
struct MoveDrawablesFloatingCommandArchiveDefaultTypeInternal {
  constexpr MoveDrawablesFloatingCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveDrawablesFloatingCommandArchiveDefaultTypeInternal() {}
  union {
    MoveDrawablesFloatingCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveDrawablesFloatingCommandArchiveDefaultTypeInternal _MoveDrawablesFloatingCommandArchive_default_instance_;
constexpr ChangeFootnoteFormatCommandArchive::ChangeFootnoteFormatCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , format_(0)
{}
struct ChangeFootnoteFormatCommandArchiveDefaultTypeInternal {
  constexpr ChangeFootnoteFormatCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeFootnoteFormatCommandArchiveDefaultTypeInternal() {}
  union {
    ChangeFootnoteFormatCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeFootnoteFormatCommandArchiveDefaultTypeInternal _ChangeFootnoteFormatCommandArchive_default_instance_;
constexpr ChangeFootnoteKindCommandArchive::ChangeFootnoteKindCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , undo_transaction_(nullptr)
  , kind_(0)
{}
struct ChangeFootnoteKindCommandArchiveDefaultTypeInternal {
  constexpr ChangeFootnoteKindCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeFootnoteKindCommandArchiveDefaultTypeInternal() {}
  union {
    ChangeFootnoteKindCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeFootnoteKindCommandArchiveDefaultTypeInternal _ChangeFootnoteKindCommandArchive_default_instance_;
constexpr ChangeFootnoteNumberingCommandArchive::ChangeFootnoteNumberingCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , numbering_(0)
{}
struct ChangeFootnoteNumberingCommandArchiveDefaultTypeInternal {
  constexpr ChangeFootnoteNumberingCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeFootnoteNumberingCommandArchiveDefaultTypeInternal() {}
  union {
    ChangeFootnoteNumberingCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeFootnoteNumberingCommandArchiveDefaultTypeInternal _ChangeFootnoteNumberingCommandArchive_default_instance_;
constexpr ChangeFootnoteSpacingCommandArchive::ChangeFootnoteSpacingCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , footnote_spacing_(0){}
struct ChangeFootnoteSpacingCommandArchiveDefaultTypeInternal {
  constexpr ChangeFootnoteSpacingCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeFootnoteSpacingCommandArchiveDefaultTypeInternal() {}
  union {
    ChangeFootnoteSpacingCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeFootnoteSpacingCommandArchiveDefaultTypeInternal _ChangeFootnoteSpacingCommandArchive_default_instance_;
constexpr MoveInlineDrawableAnchoredCommandArchive::MoveInlineDrawableAnchoredCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , id_placement_operation_args_(nullptr)
  , drawable_info_id_path_(nullptr)
  , exterior_text_wrap_(nullptr)
  , original_exterior_text_wrap_(nullptr)
  , replacement_range_location_(0u)
  , replacement_range_length_(0u){}
struct MoveInlineDrawableAnchoredCommandArchiveDefaultTypeInternal {
  constexpr MoveInlineDrawableAnchoredCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveInlineDrawableAnchoredCommandArchiveDefaultTypeInternal() {}
  union {
    MoveInlineDrawableAnchoredCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveInlineDrawableAnchoredCommandArchiveDefaultTypeInternal _MoveInlineDrawableAnchoredCommandArchive_default_instance_;
constexpr MoveAnchoredDrawableInlineCommandArchive::MoveAnchoredDrawableInlineCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , id_placement_operation_args_(nullptr)
  , drawable_info_id_path_(nullptr)
  , exterior_text_wrap_(nullptr)
  , original_exterior_text_wrap_(nullptr)
  , replacement_range_location_(0u)
  , replacement_range_length_(0u){}
struct MoveAnchoredDrawableInlineCommandArchiveDefaultTypeInternal {
  constexpr MoveAnchoredDrawableInlineCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveAnchoredDrawableInlineCommandArchiveDefaultTypeInternal() {}
  union {
    MoveAnchoredDrawableInlineCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveAnchoredDrawableInlineCommandArchiveDefaultTypeInternal _MoveAnchoredDrawableInlineCommandArchive_default_instance_;
constexpr InsertFootnoteCommandArchive::InsertFootnoteCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct InsertFootnoteCommandArchiveDefaultTypeInternal {
  constexpr InsertFootnoteCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertFootnoteCommandArchiveDefaultTypeInternal() {}
  union {
    InsertFootnoteCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertFootnoteCommandArchiveDefaultTypeInternal _InsertFootnoteCommandArchive_default_instance_;
constexpr ToggleBodyLayoutDirectionCommandArchive::ToggleBodyLayoutDirectionCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , new_direction_is_vertical_(false){}
struct ToggleBodyLayoutDirectionCommandArchiveDefaultTypeInternal {
  constexpr ToggleBodyLayoutDirectionCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToggleBodyLayoutDirectionCommandArchiveDefaultTypeInternal() {}
  union {
    ToggleBodyLayoutDirectionCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToggleBodyLayoutDirectionCommandArchiveDefaultTypeInternal _ToggleBodyLayoutDirectionCommandArchive_default_instance_;
constexpr TrackChangesCommandArchive::TrackChangesCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : change_session_history_()
  , old_change_session_history_()
  , super_(nullptr)
  , most_recent_change_session_(nullptr)
  , old_most_recent_change_session_(nullptr)
  , track_changes_(false)
  , paused_(false)
  , old_track_changes_(false){}
struct TrackChangesCommandArchiveDefaultTypeInternal {
  constexpr TrackChangesCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackChangesCommandArchiveDefaultTypeInternal() {}
  union {
    TrackChangesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackChangesCommandArchiveDefaultTypeInternal _TrackChangesCommandArchive_default_instance_;
constexpr PauseChangeTrackingCommandArchive::PauseChangeTrackingCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , paused_(false){}
struct PauseChangeTrackingCommandArchiveDefaultTypeInternal {
  constexpr PauseChangeTrackingCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PauseChangeTrackingCommandArchiveDefaultTypeInternal() {}
  union {
    PauseChangeTrackingCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PauseChangeTrackingCommandArchiveDefaultTypeInternal _PauseChangeTrackingCommandArchive_default_instance_;
constexpr SectionGuideCommandArchive::SectionGuideCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , section_id_path_(nullptr)
  , page_index_(0u){}
struct SectionGuideCommandArchiveDefaultTypeInternal {
  constexpr SectionGuideCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectionGuideCommandArchiveDefaultTypeInternal() {}
  union {
    SectionGuideCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectionGuideCommandArchiveDefaultTypeInternal _SectionGuideCommandArchive_default_instance_;
constexpr ReplaceHeaderFooterStorageCommandArchive::ReplaceHeaderFooterStorageCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , header_footer_storage_id_path_(nullptr)
  , replacement_header_footer_storage_(nullptr)
  , replacement_header_footer_storage_undo_object_(nullptr)
  , old_header_footer_storage_(nullptr){}
struct ReplaceHeaderFooterStorageCommandArchiveDefaultTypeInternal {
  constexpr ReplaceHeaderFooterStorageCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplaceHeaderFooterStorageCommandArchiveDefaultTypeInternal() {}
  union {
    ReplaceHeaderFooterStorageCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplaceHeaderFooterStorageCommandArchiveDefaultTypeInternal _ReplaceHeaderFooterStorageCommandArchive_default_instance_;
constexpr PrototypeForUndoChangePageTemplateForSection::PrototypeForUndoChangePageTemplateForSection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_path_for_template_in_document_(nullptr)
  , internal_page_template_(nullptr){}
struct PrototypeForUndoChangePageTemplateForSectionDefaultTypeInternal {
  constexpr PrototypeForUndoChangePageTemplateForSectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrototypeForUndoChangePageTemplateForSectionDefaultTypeInternal() {}
  union {
    PrototypeForUndoChangePageTemplateForSection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrototypeForUndoChangePageTemplateForSectionDefaultTypeInternal _PrototypeForUndoChangePageTemplateForSection_default_instance_;
constexpr ChangePageTemplateForSectionCommandArchive::ChangePageTemplateForSectionCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , section_id_path_(nullptr)
  , page_template_(nullptr)
  , old_page_template_(nullptr)
  , target_prototype_(nullptr)
  , is_undo_redo_(false){}
struct ChangePageTemplateForSectionCommandArchiveDefaultTypeInternal {
  constexpr ChangePageTemplateForSectionCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangePageTemplateForSectionCommandArchiveDefaultTypeInternal() {}
  union {
    ChangePageTemplateForSectionCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangePageTemplateForSectionCommandArchiveDefaultTypeInternal _ChangePageTemplateForSectionCommandArchive_default_instance_;
constexpr AllFootnoteSelectionTransformerArchive::AllFootnoteSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : all_footnote_selection_(nullptr){}
struct AllFootnoteSelectionTransformerArchiveDefaultTypeInternal {
  constexpr AllFootnoteSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllFootnoteSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    AllFootnoteSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllFootnoteSelectionTransformerArchiveDefaultTypeInternal _AllFootnoteSelectionTransformerArchive_default_instance_;
constexpr DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_selection_(nullptr)
  , storage_uuid_path_(nullptr){}
struct DocumentSelectionTransformerArchiveDefaultTypeInternal {
  constexpr DocumentSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    DocumentSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentSelectionTransformerArchiveDefaultTypeInternal _DocumentSelectionTransformerArchive_default_instance_;
constexpr CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , infos_collection_helper_(nullptr)
  , excluded_infos_collection_helper_(nullptr)
  , additional_infos_collection_helper_(nullptr)
  , header_or_footnote_storage_uuid_path_(nullptr){}
struct CanvasSelectionTransformerArchiveDefaultTypeInternal {
  constexpr CanvasSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanvasSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanvasSelectionTransformerArchiveDefaultTypeInternal _CanvasSelectionTransformerArchive_default_instance_;
}  // namespace TP
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TPCommandArchives_2eproto[32];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TPCommandArchives_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TPCommandArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TPCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TP::InsertDrawablesCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertDrawablesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::InsertDrawablesCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertDrawablesCommandArchive, for_paste_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertDrawablesCommandArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertDrawablesCommandArchive, page_index_list_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertDrawablesCommandArchive, drawable_info_list_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertDrawablesCommandArchive, placeholder_tags_list_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertDrawablesCommandArchive, custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertDrawablesCommandArchive, drawable_undo_object_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertDrawablesCommandArchive, saved_next_untitled_resolver_index_),
  0,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive_Drawable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive_Drawable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive_Drawable, drawable_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive_Drawable, z_order_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, page_index_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, maintain_z_order_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, drawable_info_id_path_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, page_index_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, original_page_index_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, tags_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, original_tags_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesPageIndexCommandArchive, preserve_tags_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::TP::InsertSectionBreakCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertSectionBreakCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::InsertSectionBreakCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawableZOrderCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawableZOrderCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawableZOrderCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawableZOrderCommandArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawableZOrderCommandArchive, action_string_index_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::RemoveDrawablesCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::RemoveDrawablesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::RemoveDrawablesCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::RemoveDrawablesCommandArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::TP::RemoveDrawablesCommandArchive, drawable_info_list_),
  PROTOBUF_FIELD_OFFSET(::TP::RemoveDrawablesCommandArchive, page_index_list_),
  PROTOBUF_FIELD_OFFSET(::TP::RemoveDrawablesCommandArchive, tags_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TP::ChangeSectionMarginsCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeSectionMarginsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::ChangeSectionMarginsCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeSectionMarginsCommandArchive, section_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeSectionMarginsCommandArchive, margin_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeSectionMarginsCommandArchive, margin_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TP::InsertMasterDrawablesCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertMasterDrawablesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::InsertMasterDrawablesCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertMasterDrawablesCommandArchive, obsolete_section_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertMasterDrawablesCommandArchive, master_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertMasterDrawablesCommandArchive, drawable_index_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertMasterDrawablesCommandArchive, master_drawable_provider_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertMasterDrawablesCommandArchive, custom_format_keys_),
  0,
  1,
  ~0u,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TP::MoveMasterDrawableZOrderCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveMasterDrawableZOrderCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::MoveMasterDrawableZOrderCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveMasterDrawableZOrderCommandArchive, obsolete_section_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveMasterDrawableZOrderCommandArchive, master_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveMasterDrawableZOrderCommandArchive, indexes_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveMasterDrawableZOrderCommandArchive, master_drawable_provider_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable, drawable_),
  PROTOBUF_FIELD_OFFSET(::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable, drawable_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::RemoveMasterDrawablesCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::RemoveMasterDrawablesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::RemoveMasterDrawablesCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::RemoveMasterDrawablesCommandArchive, obsolete_section_),
  PROTOBUF_FIELD_OFFSET(::TP::RemoveMasterDrawablesCommandArchive, master_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::RemoveMasterDrawablesCommandArchive, master_drawable_provider_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TP::PasteMasterDrawablesCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::PasteMasterDrawablesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::PasteMasterDrawablesCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::PasteMasterDrawablesCommandArchive, section_),
  PROTOBUF_FIELD_OFFSET(::TP::PasteMasterDrawablesCommandArchive, master_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::PasteMasterDrawablesCommandArchive, drawable_index_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition, char_index_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition, h_offset_type_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition, h_offset_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition, v_offset_type_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition, v_offset_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive, range_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive, drawable_info_id_path_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive, position_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive, exterior_text_wrap_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive, original_page_index_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive, original_exterior_text_wrap_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesAttachedCommandArchive, original_attachment_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesFloatingCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesFloatingCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesFloatingCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesFloatingCommandArchive, args_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesFloatingCommandArchive, range_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesFloatingCommandArchive, drawable_info_id_path_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesFloatingCommandArchive, page_index_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesFloatingCommandArchive, exterior_text_wrap_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesFloatingCommandArchive, original_attachment_list_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveDrawablesFloatingCommandArchive, original_exterior_text_wrap_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteFormatCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteFormatCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteFormatCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteFormatCommandArchive, format_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteKindCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteKindCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteKindCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteKindCommandArchive, kind_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteKindCommandArchive, undo_transaction_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteNumberingCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteNumberingCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteNumberingCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteNumberingCommandArchive, numbering_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteSpacingCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteSpacingCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteSpacingCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangeFootnoteSpacingCommandArchive, footnote_spacing_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::MoveInlineDrawableAnchoredCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveInlineDrawableAnchoredCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::MoveInlineDrawableAnchoredCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveInlineDrawableAnchoredCommandArchive, id_placement_operation_args_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveInlineDrawableAnchoredCommandArchive, replacement_range_location_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveInlineDrawableAnchoredCommandArchive, replacement_range_length_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveInlineDrawableAnchoredCommandArchive, drawable_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveInlineDrawableAnchoredCommandArchive, exterior_text_wrap_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveInlineDrawableAnchoredCommandArchive, original_exterior_text_wrap_),
  0,
  1,
  5,
  6,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TP::MoveAnchoredDrawableInlineCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveAnchoredDrawableInlineCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::MoveAnchoredDrawableInlineCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveAnchoredDrawableInlineCommandArchive, id_placement_operation_args_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveAnchoredDrawableInlineCommandArchive, replacement_range_location_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveAnchoredDrawableInlineCommandArchive, replacement_range_length_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveAnchoredDrawableInlineCommandArchive, drawable_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveAnchoredDrawableInlineCommandArchive, exterior_text_wrap_),
  PROTOBUF_FIELD_OFFSET(::TP::MoveAnchoredDrawableInlineCommandArchive, original_exterior_text_wrap_),
  0,
  1,
  5,
  6,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TP::InsertFootnoteCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::InsertFootnoteCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::InsertFootnoteCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TP::ToggleBodyLayoutDirectionCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ToggleBodyLayoutDirectionCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::ToggleBodyLayoutDirectionCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::ToggleBodyLayoutDirectionCommandArchive, new_direction_is_vertical_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::TrackChangesCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::TrackChangesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::TrackChangesCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::TrackChangesCommandArchive, track_changes_),
  PROTOBUF_FIELD_OFFSET(::TP::TrackChangesCommandArchive, change_session_history_),
  PROTOBUF_FIELD_OFFSET(::TP::TrackChangesCommandArchive, paused_),
  PROTOBUF_FIELD_OFFSET(::TP::TrackChangesCommandArchive, most_recent_change_session_),
  PROTOBUF_FIELD_OFFSET(::TP::TrackChangesCommandArchive, old_track_changes_),
  PROTOBUF_FIELD_OFFSET(::TP::TrackChangesCommandArchive, old_change_session_history_),
  PROTOBUF_FIELD_OFFSET(::TP::TrackChangesCommandArchive, old_most_recent_change_session_),
  0,
  3,
  ~0u,
  4,
  1,
  5,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TP::PauseChangeTrackingCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::PauseChangeTrackingCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::PauseChangeTrackingCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::PauseChangeTrackingCommandArchive, paused_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::SectionGuideCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionGuideCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::SectionGuideCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionGuideCommandArchive, section_id_path_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionGuideCommandArchive, page_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TP::ReplaceHeaderFooterStorageCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ReplaceHeaderFooterStorageCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::ReplaceHeaderFooterStorageCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::ReplaceHeaderFooterStorageCommandArchive, header_footer_storage_id_path_),
  PROTOBUF_FIELD_OFFSET(::TP::ReplaceHeaderFooterStorageCommandArchive, replacement_header_footer_storage_),
  PROTOBUF_FIELD_OFFSET(::TP::ReplaceHeaderFooterStorageCommandArchive, replacement_header_footer_storage_undo_object_),
  PROTOBUF_FIELD_OFFSET(::TP::ReplaceHeaderFooterStorageCommandArchive, old_header_footer_storage_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TP::PrototypeForUndoChangePageTemplateForSection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::PrototypeForUndoChangePageTemplateForSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::PrototypeForUndoChangePageTemplateForSection, id_path_for_template_in_document_),
  PROTOBUF_FIELD_OFFSET(::TP::PrototypeForUndoChangePageTemplateForSection, internal_page_template_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::ChangePageTemplateForSectionCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangePageTemplateForSectionCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::ChangePageTemplateForSectionCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangePageTemplateForSectionCommandArchive, section_id_path_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangePageTemplateForSectionCommandArchive, page_template_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangePageTemplateForSectionCommandArchive, old_page_template_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangePageTemplateForSectionCommandArchive, is_undo_redo_),
  PROTOBUF_FIELD_OFFSET(::TP::ChangePageTemplateForSectionCommandArchive, target_prototype_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::TP::AllFootnoteSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::AllFootnoteSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::AllFootnoteSelectionTransformerArchive, all_footnote_selection_),
  0,
  PROTOBUF_FIELD_OFFSET(::TP::DocumentSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::DocumentSelectionTransformerArchive, document_selection_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentSelectionTransformerArchive, storage_uuid_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionTransformerArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionTransformerArchive, infos_collection_helper_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionTransformerArchive, excluded_infos_collection_helper_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionTransformerArchive, additional_infos_collection_helper_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionTransformerArchive, header_or_footnote_storage_uuid_path_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::TP::InsertDrawablesCommandArchive)},
  { 23, 30, sizeof(::TP::MoveDrawablesPageIndexCommandArchive_Drawable)},
  { 32, 47, sizeof(::TP::MoveDrawablesPageIndexCommandArchive)},
  { 57, 63, sizeof(::TP::InsertSectionBreakCommandArchive)},
  { 64, 72, sizeof(::TP::MoveDrawableZOrderCommandArchive)},
  { 75, 85, sizeof(::TP::RemoveDrawablesCommandArchive)},
  { 90, 99, sizeof(::TP::ChangeSectionMarginsCommandArchive)},
  { 103, 114, sizeof(::TP::InsertMasterDrawablesCommandArchive)},
  { 120, 130, sizeof(::TP::MoveMasterDrawableZOrderCommandArchive)},
  { 135, 142, sizeof(::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable)},
  { 144, 153, sizeof(::TP::RemoveMasterDrawablesCommandArchive)},
  { 157, 166, sizeof(::TP::PasteMasterDrawablesCommandArchive)},
  { 170, 180, sizeof(::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition)},
  { 185, 199, sizeof(::TP::MoveDrawablesAttachedCommandArchive)},
  { 208, 221, sizeof(::TP::MoveDrawablesFloatingCommandArchive)},
  { 229, 236, sizeof(::TP::ChangeFootnoteFormatCommandArchive)},
  { 238, 246, sizeof(::TP::ChangeFootnoteKindCommandArchive)},
  { 249, 256, sizeof(::TP::ChangeFootnoteNumberingCommandArchive)},
  { 258, 265, sizeof(::TP::ChangeFootnoteSpacingCommandArchive)},
  { 267, 279, sizeof(::TP::MoveInlineDrawableAnchoredCommandArchive)},
  { 286, 298, sizeof(::TP::MoveAnchoredDrawableInlineCommandArchive)},
  { 305, 311, sizeof(::TP::InsertFootnoteCommandArchive)},
  { 312, 319, sizeof(::TP::ToggleBodyLayoutDirectionCommandArchive)},
  { 321, 334, sizeof(::TP::TrackChangesCommandArchive)},
  { 342, 349, sizeof(::TP::PauseChangeTrackingCommandArchive)},
  { 351, 359, sizeof(::TP::SectionGuideCommandArchive)},
  { 362, 372, sizeof(::TP::ReplaceHeaderFooterStorageCommandArchive)},
  { 377, 384, sizeof(::TP::PrototypeForUndoChangePageTemplateForSection)},
  { 386, 397, sizeof(::TP::ChangePageTemplateForSectionCommandArchive)},
  { 403, 409, sizeof(::TP::AllFootnoteSelectionTransformerArchive)},
  { 410, 417, sizeof(::TP::DocumentSelectionTransformerArchive)},
  { 419, 429, sizeof(::TP::CanvasSelectionTransformerArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_InsertDrawablesCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_MoveDrawablesPageIndexCommandArchive_Drawable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_MoveDrawablesPageIndexCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_InsertSectionBreakCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_MoveDrawableZOrderCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_RemoveDrawablesCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_ChangeSectionMarginsCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_InsertMasterDrawablesCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_MoveMasterDrawableZOrderCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_RemoveMasterDrawablesCommandArchive_MasterDrawable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_RemoveMasterDrawablesCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_PasteMasterDrawablesCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_MoveDrawablesAttachedCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_MoveDrawablesFloatingCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_ChangeFootnoteFormatCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_ChangeFootnoteKindCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_ChangeFootnoteNumberingCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_ChangeFootnoteSpacingCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_MoveInlineDrawableAnchoredCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_MoveAnchoredDrawableInlineCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_InsertFootnoteCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_ToggleBodyLayoutDirectionCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_TrackChangesCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_PauseChangeTrackingCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_SectionGuideCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_ReplaceHeaderFooterStorageCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_PrototypeForUndoChangePageTemplateForSection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_ChangePageTemplateForSectionCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_AllFootnoteSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_DocumentSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_CanvasSelectionTransformerArchive_default_instance_),
};

const char descriptor_table_protodef_TPCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027TPCommandArchives.proto\022\002TP\032\021TSDArchiv"
  "es.proto\032\021TSKArchives.proto\032\021TSPMessages"
  ".proto\032\022TSWPArchives.proto\032\021TSSArchives."
  "proto\032\021TSAArchives.proto\032\021TSTArchives.pr"
  "oto\032\020TPArchives.proto\032\030TSDCommandArchive"
  "s.proto\032\031TSWPCommandArchives.proto\"\347\002\n\035I"
  "nsertDrawablesCommandArchive\022\"\n\005super\030\001 "
  "\002(\0132\023.TSK.CommandArchive\022\021\n\tfor_paste\030\002 "
  "\001(\010\022*\n\targs_list\030\003 \003(\0132\027.TSK.AddIdOperat"
  "ionArgs\022\027\n\017page_index_list\030\004 \003(\r\022*\n\022draw"
  "able_info_list\030\005 \003(\0132\016.TSP.Reference\022\035\n\025"
  "placeholder_tags_list\030\t \003(\t\022%\n\022custom_fo"
  "rmat_keys\030\006 \003(\0132\t.TSP.UUID\022,\n\024drawable_u"
  "ndo_object\030\007 \001(\0132\016.TSP.Reference\022*\n\"save"
  "d_next_untitled_resolver_index\030\010 \001(\r\"\275\003\n"
  "$MoveDrawablesPageIndexCommandArchive\022\"\n"
  "\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\026\n\npag"
  "e_index\030\002 \001(\rB\002\030\001\022H\n\tdrawables\030\003 \003(\01321.T"
  "P.MoveDrawablesPageIndexCommandArchive.D"
  "rawableB\002\030\001\022\034\n\020maintain_z_order\030\004 \001(\010B\002\030"
  "\001\0221\n\032drawable_info_id_path_list\030\005 \003(\0132\r."
  "TSP.UUIDPath\022\027\n\017page_index_list\030\006 \003(\r\022 \n"
  "\030original_page_index_list\030\007 \003(\r\022\021\n\ttags_"
  "list\030\010 \003(\t\022\032\n\022original_tags_list\030\t \003(\t\022\025"
  "\n\rpreserve_tags\030\n \001(\010\032=\n\010Drawable\022 \n\010dra"
  "wable\030\001 \001(\0132\016.TSP.Reference\022\017\n\007z_order\030\002"
  " \001(\r\"T\n InsertSectionBreakCommandArchive"
  "\0220\n\005super\030\001 \002(\0132!.TSWP.StorageActionComm"
  "andArchive\"\225\001\n MoveDrawableZOrderCommand"
  "Archive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArch"
  "ive\0220\n\targs_list\030\002 \003(\0132\035.TSK.RearrangeId"
  "OperationArgs\022\033\n\023action_string_index\030\003 \001"
  "(\r\"\312\001\n\035RemoveDrawablesCommandArchive\022\"\n\005"
  "super\030\001 \002(\0132\023.TSK.CommandArchive\022-\n\targs"
  "_list\030\002 \003(\0132\032.TSK.RemoveIdOperationArgs\022"
  "*\n\022drawable_info_list\030\003 \003(\0132\016.TSP.Refere"
  "nce\022\027\n\017page_index_list\030\004 \003(\r\022\021\n\ttags_lis"
  "t\030\005 \003(\t\"\355\002\n\"ChangeSectionMarginsCommandA"
  "rchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchi"
  "ve\022\037\n\007section\030\002 \001(\0132\016.TSP.Reference\022D\n\006m"
  "argin\030\003 \001(\01624.TP.ChangeSectionMarginsCom"
  "mandArchive.SectionMargin\022\024\n\014margin_valu"
  "e\030\004 \001(\002\"\245\001\n\rSectionMargin\022\026\n\022kSectionMar"
  "ginLeft\020\000\022\027\n\023kSectionMarginRight\020\001\022\025\n\021kS"
  "ectionMarginTop\020\002\022\030\n\024kSectionMarginBotto"
  "m\020\003\022\030\n\024kSectionMarginHeader\020\004\022\030\n\024kSectio"
  "nMarginFooter\020\005\"\216\002\n#InsertMasterDrawable"
  "sCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Com"
  "mandArchive\022(\n\020OBSOLETE_section\030\002 \001(\0132\016."
  "TSP.Reference\022(\n\020master_drawables\030\003 \003(\0132"
  "\016.TSP.Reference\022\026\n\016drawable_index\030\004 \001(\r\022"
  "0\n\030master_drawable_provider\030\005 \001(\0132\016.TSP."
  "Reference\022%\n\022custom_format_keys\030\006 \003(\0132\t."
  "TSP.UUID\"\343\001\n&MoveMasterDrawableZOrderCom"
  "mandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
  "Archive\022(\n\020OBSOLETE_section\030\002 \001(\0132\016.TSP."
  "Reference\022(\n\020master_drawables\030\003 \003(\0132\016.TS"
  "P.Reference\022\017\n\007indexes\030\004 \003(\r\0220\n\030master_d"
  "rawable_provider\030\005 \001(\0132\016.TSP.Reference\"\303"
  "\002\n#RemoveMasterDrawablesCommandArchive\022\""
  "\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022(\n\020OB"
  "SOLETE_section\030\002 \001(\0132\016.TSP.Reference\022P\n\020"
  "master_drawables\030\003 \003(\01326.TP.RemoveMaster"
  "DrawablesCommandArchive.MasterDrawable\0220"
  "\n\030master_drawable_provider\030\004 \001(\0132\016.TSP.R"
  "eference\032J\n\016MasterDrawable\022 \n\010drawable\030\001"
  " \001(\0132\016.TSP.Reference\022\026\n\016drawable_index\030\002"
  " \001(\r\"\253\001\n\"PasteMasterDrawablesCommandArch"
  "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
  "\037\n\007section\030\002 \001(\0132\016.TSP.Reference\022(\n\020mast"
  "er_drawables\030\003 \003(\0132\016.TSP.Reference\022\026\n\016dr"
  "awable_index\030\004 \001(\r\"\223\005\n#MoveDrawablesAtta"
  "chedCommandArchive\0220\n\005super\030\001 \002(\0132!.TSWP"
  ".StorageActionCommandArchive\0220\n\targs_lis"
  "t\030\002 \003(\0132\035.TSK.IdPlacementOperationArgs\022\036"
  "\n\nrange_list\030\003 \003(\0132\n.TSP.Range\0221\n\032drawab"
  "le_info_id_path_list\030\004 \003(\0132\r.TSP.UUIDPat"
  "h\022W\n\rposition_list\030\005 \003(\0132@.TP.MoveDrawab"
  "lesAttachedCommandArchive.GSSPCharIndexA"
  "ndPosition\022=\n\027exterior_text_wrap_list\030\006 "
  "\003(\0132\034.TSD.ExteriorTextWrapArchive\022 \n\030ori"
  "ginal_page_index_list\030\007 \003(\r\022F\n original_"
  "exterior_text_wrap_list\030\010 \003(\0132\034.TSD.Exte"
  "riorTextWrapArchive\0220\n\030original_attachme"
  "nt_list\030\t \003(\0132\016.TSP.Reference\032\200\001\n\030GSSPCh"
  "arIndexAndPosition\022\022\n\nchar_index\030\001 \001(\005\022\025"
  "\n\rh_offset_type\030\002 \001(\r\022\020\n\010h_offset\030\003 \001(\002\022"
  "\025\n\rv_offset_type\030\004 \001(\r\022\020\n\010v_offset\030\005 \001(\002"
  "\"\256\003\n#MoveDrawablesFloatingCommandArchive"
  "\0220\n\005super\030\001 \002(\0132!.TSWP.StorageActionComm"
  "andArchive\0220\n\targs_list\030\002 \003(\0132\035.TSK.IdPl"
  "acementOperationArgs\022\036\n\nrange_list\030\003 \003(\013"
  "2\n.TSP.Range\0221\n\032drawable_info_id_path_li"
  "st\030\004 \003(\0132\r.TSP.UUIDPath\022\027\n\017page_index_li"
  "st\030\005 \003(\r\022=\n\027exterior_text_wrap_list\030\006 \003("
  "\0132\034.TSD.ExteriorTextWrapArchive\0220\n\030origi"
  "nal_attachment_list\030\007 \003(\0132\016.TSP.Referenc"
  "e\022F\n original_exterior_text_wrap_list\030\010 "
  "\003(\0132\034.TSD.ExteriorTextWrapArchive\"\343\002\n\"Ch"
  "angeFootnoteFormatCommandArchive\022\"\n\005supe"
  "r\030\001 \002(\0132\023.TSK.CommandArchive\022E\n\006format\030\002"
  " \001(\01625.TP.ChangeFootnoteFormatCommandArc"
  "hive.FootnoteFormat\"\321\001\n\016FootnoteFormat\022\032"
  "\n\026kFootnoteFormatNumeric\020\000\022\030\n\024kFootnoteF"
  "ormatRoman\020\001\022\033\n\027kFootnoteFormatSymbolic\020"
  "\002\022\"\n\036kFootnoteFormatJapaneseNumeric\020\003\022&\n"
  "\"kFootnoteFormatJapaneseIdeographic\020\004\022 \n"
  "\034kFootnoteFormatArabicNumeric\020\005\"\251\002\n Chan"
  "geFootnoteKindCommandArchive\022\"\n\005super\030\001 "
  "\002(\0132\023.TSK.CommandArchive\022\?\n\004kind\030\002 \001(\01621"
  ".TP.ChangeFootnoteKindCommandArchive.Foo"
  "tnoteKind\022/\n\020undo_transaction\030\003 \001(\0132\025.TS"
  "WP.UndoTransaction\"o\n\014FootnoteKind\022\032\n\026kF"
  "ootnoteKindFootnotes\020\000\022!\n\035kFootnoteKindD"
  "ocumentEndnotes\020\001\022 \n\034kFootnoteKindSectio"
  "nEndnotes\020\002\"\244\002\n%ChangeFootnoteNumberingC"
  "ommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
  "ndArchive\022N\n\tnumbering\030\002 \001(\0162;.TP.Change"
  "FootnoteNumberingCommandArchive.Footnote"
  "Numbering\"\206\001\n\021FootnoteNumbering\022 \n\034kFoot"
  "noteNumberingContinuous\020\000\022%\n!kFootnoteNu"
  "mberingRestartEachPage\020\001\022(\n$kFootnoteNum"
  "beringRestartEachSection\020\002\"c\n#ChangeFoot"
  "noteSpacingCommandArchive\022\"\n\005super\030\001 \002(\013"
  "2\023.TSK.CommandArchive\022\030\n\020footnote_spacin"
  "g\030\002 \001(\005\"\221\003\n(MoveInlineDrawableAnchoredCo"
  "mmandArchive\0220\n\005super\030\001 \002(\0132!.TSWP.Stora"
  "geActionCommandArchive\022B\n\033id_placement_o"
  "peration_args\030\002 \001(\0132\035.TSK.IdPlacementOpe"
  "rationArgs\022\"\n\032replacement_range_location"
  "\030\003 \001(\r\022 \n\030replacement_range_length\030\004 \001(\r"
  "\022,\n\025drawable_info_id_path\030\005 \001(\0132\r.TSP.UU"
  "IDPath\0228\n\022exterior_text_wrap\030\006 \001(\0132\034.TSD"
  ".ExteriorTextWrapArchive\022A\n\033original_ext"
  "erior_text_wrap\030\007 \001(\0132\034.TSD.ExteriorText"
  "WrapArchive\"\221\003\n(MoveAnchoredDrawableInli"
  "neCommandArchive\0220\n\005super\030\001 \002(\0132!.TSWP.S"
  "torageActionCommandArchive\022B\n\033id_placeme"
  "nt_operation_args\030\002 \001(\0132\035.TSK.IdPlacemen"
  "tOperationArgs\022\"\n\032replacement_range_loca"
  "tion\030\003 \001(\r\022 \n\030replacement_range_length\030\004"
  " \001(\r\022,\n\025drawable_info_id_path\030\005 \001(\0132\r.TS"
  "P.UUIDPath\0228\n\022exterior_text_wrap\030\006 \001(\0132\034"
  ".TSD.ExteriorTextWrapArchive\022A\n\033original"
  "_exterior_text_wrap\030\007 \001(\0132\034.TSD.Exterior"
  "TextWrapArchive\"P\n\034InsertFootnoteCommand"
  "Archive\0220\n\005super\030\001 \002(\0132!.TSWP.StorageAct"
  "ionCommandArchive\"p\n\'ToggleBodyLayoutDir"
  "ectionCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TS"
  "K.CommandArchive\022!\n\031new_direction_is_ver"
  "tical\030\002 \001(\010\"\326\002\n\032TrackChangesCommandArchi"
  "ve\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\025"
  "\n\rtrack_changes\030\002 \001(\010\022.\n\026change_session_"
  "history\030\003 \003(\0132\016.TSP.Reference\022\022\n\006paused\030"
  "\004 \001(\010B\002\030\001\0222\n\032most_recent_change_session\030"
  "\005 \001(\0132\016.TSP.Reference\022\031\n\021old_track_chang"
  "es\030\006 \001(\010\0222\n\032old_change_session_history\030\007"
  " \003(\0132\016.TSP.Reference\0226\n\036old_most_recent_"
  "change_session\030\010 \001(\0132\016.TSP.Reference\"[\n!"
  "PauseChangeTrackingCommandArchive\022\"\n\005sup"
  "er\030\001 \002(\0132\023.TSK.CommandArchive\022\022\n\006paused\030"
  "\002 \001(\010B\002\030\001\"\211\001\n\032SectionGuideCommandArchive"
  "\022/\n\005super\030\001 \002(\0132 .TSD.AbstractGuideComma"
  "ndArchive\022&\n\017section_id_path\030\002 \002(\0132\r.TSP"
  ".UUIDPath\022\022\n\npage_index\030\003 \002(\r\"\271\002\n(Replac"
  "eHeaderFooterStorageCommandArchive\022\"\n\005su"
  "per\030\001 \002(\0132\023.TSK.CommandArchive\0224\n\035header"
  "_footer_storage_id_path\030\002 \001(\0132\r.TSP.UUID"
  "Path\0229\n!replacement_header_footer_storag"
  "e\030\003 \001(\0132\016.TSP.Reference\022E\n-replacement_h"
  "eader_footer_storage_undo_object\030\004 \001(\0132\016"
  ".TSP.Reference\0221\n\031old_header_footer_stor"
  "age\030\005 \001(\0132\016.TSP.Reference\"\227\001\n,PrototypeF"
  "orUndoChangePageTemplateForSection\0227\n id"
  "_path_for_template_in_document\030\001 \001(\0132\r.T"
  "SP.UUIDPath\022.\n\026internal_page_template\030\002 "
  "\002(\0132\016.TSP.Reference\"\212\002\n*ChangePageTempla"
  "teForSectionCommandArchive\022\"\n\005super\030\001 \002("
  "\0132\023.TSK.CommandArchive\022&\n\017section_id_pat"
  "h\030\002 \002(\0132\r.TSP.UUIDPath\022%\n\rpage_template\030"
  "\003 \002(\0132\016.TSP.Reference\022)\n\021old_page_templa"
  "te\030\004 \001(\0132\016.TSP.Reference\022\024\n\014is_undo_redo"
  "\030\005 \002(\010\022(\n\020target_prototype\030\006 \001(\0132\016.TSP.R"
  "eference\"X\n&AllFootnoteSelectionTransfor"
  "merArchive\022.\n\026all_footnote_selection\030\001 \002"
  "(\0132\016.TSP.Reference\"{\n#DocumentSelectionT"
  "ransformerArchive\022*\n\022document_selection\030"
  "\001 \002(\0132\016.TSP.Reference\022(\n\021storage_uuid_pa"
  "th\030\002 \002(\0132\r.TSP.UUIDPath\"\253\003\n!CanvasSelect"
  "ionTransformerArchive\0220\n\005super\030\001 \002(\0132!.T"
  "SWP.SelectionTransformerArchive\022U\n\027infos"
  "_collection_helper\030\002 \002(\01324.TSD.InfoColle"
  "ctionSelectionTransformerHelperArchive\022^"
  "\n excluded_infos_collection_helper\030\003 \002(\013"
  "24.TSD.InfoCollectionSelectionTransforme"
  "rHelperArchive\022`\n\"additional_infos_colle"
  "ction_helper\030\004 \002(\01324.TSD.InfoCollectionS"
  "electionTransformerHelperArchive\022;\n$head"
  "er_or_footnote_storage_uuid_path\030\005 \001(\0132\r"
  ".TSP.UUIDPath"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TPCommandArchives_2eproto_deps[10] = {
  &::descriptor_table_TPArchives_2eproto,
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSDCommandArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSTArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
  &::descriptor_table_TSWPCommandArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TPCommandArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TPCommandArchives_2eproto = {
  false, false, 7973, descriptor_table_protodef_TPCommandArchives_2eproto, "TPCommandArchives.proto", 
  &descriptor_table_TPCommandArchives_2eproto_once, descriptor_table_TPCommandArchives_2eproto_deps, 10, 32,
  schemas, file_default_instances, TableStruct_TPCommandArchives_2eproto::offsets,
  file_level_metadata_TPCommandArchives_2eproto, file_level_enum_descriptors_TPCommandArchives_2eproto, file_level_service_descriptors_TPCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TPCommandArchives_2eproto_getter() {
  return &descriptor_table_TPCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TPCommandArchives_2eproto(&descriptor_table_TPCommandArchives_2eproto);
namespace TP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeSectionMarginsCommandArchive_SectionMargin_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPCommandArchives_2eproto);
  return file_level_enum_descriptors_TPCommandArchives_2eproto[0];
}
bool ChangeSectionMarginsCommandArchive_SectionMargin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginLeft;
constexpr ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginRight;
constexpr ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginTop;
constexpr ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginBottom;
constexpr ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginHeader;
constexpr ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::kSectionMarginFooter;
constexpr ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::SectionMargin_MIN;
constexpr ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::SectionMargin_MAX;
constexpr int ChangeSectionMarginsCommandArchive::SectionMargin_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeFootnoteFormatCommandArchive_FootnoteFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPCommandArchives_2eproto);
  return file_level_enum_descriptors_TPCommandArchives_2eproto[1];
}
bool ChangeFootnoteFormatCommandArchive_FootnoteFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::kFootnoteFormatNumeric;
constexpr ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::kFootnoteFormatRoman;
constexpr ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::kFootnoteFormatSymbolic;
constexpr ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::kFootnoteFormatJapaneseNumeric;
constexpr ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::kFootnoteFormatJapaneseIdeographic;
constexpr ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::kFootnoteFormatArabicNumeric;
constexpr ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::FootnoteFormat_MIN;
constexpr ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::FootnoteFormat_MAX;
constexpr int ChangeFootnoteFormatCommandArchive::FootnoteFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeFootnoteKindCommandArchive_FootnoteKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPCommandArchives_2eproto);
  return file_level_enum_descriptors_TPCommandArchives_2eproto[2];
}
bool ChangeFootnoteKindCommandArchive_FootnoteKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::kFootnoteKindFootnotes;
constexpr ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::kFootnoteKindDocumentEndnotes;
constexpr ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::kFootnoteKindSectionEndnotes;
constexpr ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::FootnoteKind_MIN;
constexpr ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::FootnoteKind_MAX;
constexpr int ChangeFootnoteKindCommandArchive::FootnoteKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPCommandArchives_2eproto);
  return file_level_enum_descriptors_TPCommandArchives_2eproto[3];
}
bool ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::kFootnoteNumberingContinuous;
constexpr ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::kFootnoteNumberingRestartEachPage;
constexpr ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::kFootnoteNumberingRestartEachSection;
constexpr ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::FootnoteNumbering_MIN;
constexpr ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::FootnoteNumbering_MAX;
constexpr int ChangeFootnoteNumberingCommandArchive::FootnoteNumbering_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class InsertDrawablesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertDrawablesCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const InsertDrawablesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_for_paste(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& drawable_undo_object(const InsertDrawablesCommandArchive* msg);
  static void set_has_drawable_undo_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_saved_next_untitled_resolver_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
InsertDrawablesCommandArchive::_Internal::super(const InsertDrawablesCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
InsertDrawablesCommandArchive::_Internal::drawable_undo_object(const InsertDrawablesCommandArchive* msg) {
  return *msg->drawable_undo_object_;
}
void InsertDrawablesCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InsertDrawablesCommandArchive::clear_args_list() {
  args_list_.Clear();
}
void InsertDrawablesCommandArchive::clear_drawable_info_list() {
  drawable_info_list_.Clear();
}
void InsertDrawablesCommandArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
void InsertDrawablesCommandArchive::clear_drawable_undo_object() {
  if (drawable_undo_object_ != nullptr) drawable_undo_object_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
InsertDrawablesCommandArchive::InsertDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena),
  page_index_list_(arena),
  drawable_info_list_(arena),
  custom_format_keys_(arena),
  placeholder_tags_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.InsertDrawablesCommandArchive)
}
InsertDrawablesCommandArchive::InsertDrawablesCommandArchive(const InsertDrawablesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_list_(from.args_list_),
      page_index_list_(from.page_index_list_),
      drawable_info_list_(from.drawable_info_list_),
      custom_format_keys_(from.custom_format_keys_),
      placeholder_tags_list_(from.placeholder_tags_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_drawable_undo_object()) {
    drawable_undo_object_ = new ::TSP::Reference(*from.drawable_undo_object_);
  } else {
    drawable_undo_object_ = nullptr;
  }
  ::memcpy(&for_paste_, &from.for_paste_,
    static_cast<size_t>(reinterpret_cast<char*>(&saved_next_untitled_resolver_index_) -
    reinterpret_cast<char*>(&for_paste_)) + sizeof(saved_next_untitled_resolver_index_));
  // @@protoc_insertion_point(copy_constructor:TP.InsertDrawablesCommandArchive)
}

void InsertDrawablesCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&saved_next_untitled_resolver_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(saved_next_untitled_resolver_index_));
}

InsertDrawablesCommandArchive::~InsertDrawablesCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.InsertDrawablesCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertDrawablesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete drawable_undo_object_;
}

void InsertDrawablesCommandArchive::ArenaDtor(void* object) {
  InsertDrawablesCommandArchive* _this = reinterpret_cast< InsertDrawablesCommandArchive* >(object);
  (void)_this;
}
void InsertDrawablesCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertDrawablesCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertDrawablesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.InsertDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  page_index_list_.Clear();
  drawable_info_list_.Clear();
  custom_format_keys_.Clear();
  placeholder_tags_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(drawable_undo_object_ != nullptr);
      drawable_undo_object_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&for_paste_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&saved_next_untitled_resolver_index_) -
        reinterpret_cast<char*>(&for_paste_)) + sizeof(saved_next_untitled_resolver_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertDrawablesCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool for_paste = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_for_paste(&has_bits);
          for_paste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.AddIdOperationArgs args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 page_index_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_page_index_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawable_info_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference drawable_undo_object = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_undo_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 saved_next_untitled_resolver_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_saved_next_untitled_resolver_index(&has_bits);
          saved_next_untitled_resolver_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string placeholder_tags_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_placeholder_tags_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.InsertDrawablesCommandArchive.placeholder_tags_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertDrawablesCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.InsertDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool for_paste = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_for_paste(), target);
  }

  // repeated .TSK.AddIdOperationArgs args_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_args_list(i), target, stream);
  }

  // repeated uint32 page_index_list = 4;
  for (int i = 0, n = this->_internal_page_index_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page_index_list(i), target);
  }

  // repeated .TSP.Reference drawable_info_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawable_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_drawable_info_list(i), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_custom_format_keys(i), target, stream);
  }

  // optional .TSP.Reference drawable_undo_object = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::drawable_undo_object(this), target, stream);
  }

  // optional uint32 saved_next_untitled_resolver_index = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_saved_next_untitled_resolver_index(), target);
  }

  // repeated string placeholder_tags_list = 9;
  for (int i = 0, n = this->_internal_placeholder_tags_list_size(); i < n; i++) {
    const auto& s = this->_internal_placeholder_tags_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.InsertDrawablesCommandArchive.placeholder_tags_list");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.InsertDrawablesCommandArchive)
  return target;
}

size_t InsertDrawablesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.InsertDrawablesCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.AddIdOperationArgs args_list = 3;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 page_index_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->page_index_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_page_index_list_size());
    total_size += data_size;
  }

  // repeated .TSP.Reference drawable_info_list = 5;
  total_size += 1UL * this->_internal_drawable_info_list_size();
  for (const auto& msg : this->drawable_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID custom_format_keys = 6;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string placeholder_tags_list = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(placeholder_tags_list_.size());
  for (int i = 0, n = placeholder_tags_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      placeholder_tags_list_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference drawable_undo_object = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_undo_object_);
    }

    // optional bool for_paste = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 saved_next_untitled_resolver_index = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_saved_next_untitled_resolver_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertDrawablesCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.InsertDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertDrawablesCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertDrawablesCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.InsertDrawablesCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.InsertDrawablesCommandArchive)
    MergeFrom(*source);
  }
}

void InsertDrawablesCommandArchive::MergeFrom(const InsertDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.InsertDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
  page_index_list_.MergeFrom(from.page_index_list_);
  drawable_info_list_.MergeFrom(from.drawable_info_list_);
  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  placeholder_tags_list_.MergeFrom(from.placeholder_tags_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_drawable_undo_object()->::TSP::Reference::MergeFrom(from._internal_drawable_undo_object());
    }
    if (cached_has_bits & 0x00000004u) {
      for_paste_ = from.for_paste_;
    }
    if (cached_has_bits & 0x00000008u) {
      saved_next_untitled_resolver_index_ = from.saved_next_untitled_resolver_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsertDrawablesCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.InsertDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertDrawablesCommandArchive::CopyFrom(const InsertDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.InsertDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertDrawablesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawable_info_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_drawable_undo_object()) {
    if (!drawable_undo_object_->IsInitialized()) return false;
  }
  return true;
}

void InsertDrawablesCommandArchive::InternalSwap(InsertDrawablesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_list_.InternalSwap(&other->args_list_);
  page_index_list_.InternalSwap(&other->page_index_list_);
  drawable_info_list_.InternalSwap(&other->drawable_info_list_);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  placeholder_tags_list_.InternalSwap(&other->placeholder_tags_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertDrawablesCommandArchive, saved_next_untitled_resolver_index_)
      + sizeof(InsertDrawablesCommandArchive::saved_next_untitled_resolver_index_)
      - PROTOBUF_FIELD_OFFSET(InsertDrawablesCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertDrawablesCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[0]);
}

// ===================================================================

class MoveDrawablesPageIndexCommandArchive_Drawable::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveDrawablesPageIndexCommandArchive_Drawable>()._has_bits_);
  static const ::TSP::Reference& drawable(const MoveDrawablesPageIndexCommandArchive_Drawable* msg);
  static void set_has_drawable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_z_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
MoveDrawablesPageIndexCommandArchive_Drawable::_Internal::drawable(const MoveDrawablesPageIndexCommandArchive_Drawable* msg) {
  return *msg->drawable_;
}
void MoveDrawablesPageIndexCommandArchive_Drawable::clear_drawable() {
  if (drawable_ != nullptr) drawable_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MoveDrawablesPageIndexCommandArchive_Drawable::MoveDrawablesPageIndexCommandArchive_Drawable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
}
MoveDrawablesPageIndexCommandArchive_Drawable::MoveDrawablesPageIndexCommandArchive_Drawable(const MoveDrawablesPageIndexCommandArchive_Drawable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drawable()) {
    drawable_ = new ::TSP::Reference(*from.drawable_);
  } else {
    drawable_ = nullptr;
  }
  z_order_ = from.z_order_;
  // @@protoc_insertion_point(copy_constructor:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
}

void MoveDrawablesPageIndexCommandArchive_Drawable::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&drawable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_order_) -
    reinterpret_cast<char*>(&drawable_)) + sizeof(z_order_));
}

MoveDrawablesPageIndexCommandArchive_Drawable::~MoveDrawablesPageIndexCommandArchive_Drawable() {
  // @@protoc_insertion_point(destructor:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveDrawablesPageIndexCommandArchive_Drawable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete drawable_;
}

void MoveDrawablesPageIndexCommandArchive_Drawable::ArenaDtor(void* object) {
  MoveDrawablesPageIndexCommandArchive_Drawable* _this = reinterpret_cast< MoveDrawablesPageIndexCommandArchive_Drawable* >(object);
  (void)_this;
}
void MoveDrawablesPageIndexCommandArchive_Drawable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveDrawablesPageIndexCommandArchive_Drawable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveDrawablesPageIndexCommandArchive_Drawable::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(drawable_ != nullptr);
    drawable_->Clear();
  }
  z_order_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveDrawablesPageIndexCommandArchive_Drawable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference drawable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 z_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_z_order(&has_bits);
          z_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveDrawablesPageIndexCommandArchive_Drawable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference drawable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::drawable(this), target, stream);
  }

  // optional uint32 z_order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_z_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
  return target;
}

size_t MoveDrawablesPageIndexCommandArchive_Drawable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference drawable = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_);
    }

    // optional uint32 z_order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_z_order());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveDrawablesPageIndexCommandArchive_Drawable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveDrawablesPageIndexCommandArchive_Drawable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveDrawablesPageIndexCommandArchive_Drawable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
    MergeFrom(*source);
  }
}

void MoveDrawablesPageIndexCommandArchive_Drawable::MergeFrom(const MoveDrawablesPageIndexCommandArchive_Drawable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_drawable()->::TSP::Reference::MergeFrom(from._internal_drawable());
    }
    if (cached_has_bits & 0x00000002u) {
      z_order_ = from.z_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveDrawablesPageIndexCommandArchive_Drawable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawablesPageIndexCommandArchive_Drawable::CopyFrom(const MoveDrawablesPageIndexCommandArchive_Drawable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawablesPageIndexCommandArchive_Drawable::IsInitialized() const {
  if (_internal_has_drawable()) {
    if (!drawable_->IsInitialized()) return false;
  }
  return true;
}

void MoveDrawablesPageIndexCommandArchive_Drawable::InternalSwap(MoveDrawablesPageIndexCommandArchive_Drawable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive_Drawable, z_order_)
      + sizeof(MoveDrawablesPageIndexCommandArchive_Drawable::z_order_)
      - PROTOBUF_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive_Drawable, drawable_)>(
          reinterpret_cast<char*>(&drawable_),
          reinterpret_cast<char*>(&other->drawable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDrawablesPageIndexCommandArchive_Drawable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[1]);
}

// ===================================================================

class MoveDrawablesPageIndexCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveDrawablesPageIndexCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const MoveDrawablesPageIndexCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_maintain_z_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preserve_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
MoveDrawablesPageIndexCommandArchive::_Internal::super(const MoveDrawablesPageIndexCommandArchive* msg) {
  return *msg->super_;
}
void MoveDrawablesPageIndexCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MoveDrawablesPageIndexCommandArchive::clear_drawable_info_id_path_list() {
  drawable_info_id_path_list_.Clear();
}
MoveDrawablesPageIndexCommandArchive::MoveDrawablesPageIndexCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drawables_(arena),
  drawable_info_id_path_list_(arena),
  page_index_list_(arena),
  original_page_index_list_(arena),
  tags_list_(arena),
  original_tags_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.MoveDrawablesPageIndexCommandArchive)
}
MoveDrawablesPageIndexCommandArchive::MoveDrawablesPageIndexCommandArchive(const MoveDrawablesPageIndexCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawables_(from.drawables_),
      drawable_info_id_path_list_(from.drawable_info_id_path_list_),
      page_index_list_(from.page_index_list_),
      original_page_index_list_(from.original_page_index_list_),
      tags_list_(from.tags_list_),
      original_tags_list_(from.original_tags_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&page_index_, &from.page_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_tags_) -
    reinterpret_cast<char*>(&page_index_)) + sizeof(preserve_tags_));
  // @@protoc_insertion_point(copy_constructor:TP.MoveDrawablesPageIndexCommandArchive)
}

void MoveDrawablesPageIndexCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preserve_tags_) -
    reinterpret_cast<char*>(&super_)) + sizeof(preserve_tags_));
}

MoveDrawablesPageIndexCommandArchive::~MoveDrawablesPageIndexCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.MoveDrawablesPageIndexCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveDrawablesPageIndexCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void MoveDrawablesPageIndexCommandArchive::ArenaDtor(void* object) {
  MoveDrawablesPageIndexCommandArchive* _this = reinterpret_cast< MoveDrawablesPageIndexCommandArchive* >(object);
  (void)_this;
}
void MoveDrawablesPageIndexCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveDrawablesPageIndexCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveDrawablesPageIndexCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.MoveDrawablesPageIndexCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawables_.Clear();
  drawable_info_id_path_list_.Clear();
  page_index_list_.Clear();
  original_page_index_list_.Clear();
  tags_list_.Clear();
  original_tags_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&page_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_tags_) -
        reinterpret_cast<char*>(&page_index_)) + sizeof(preserve_tags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveDrawablesPageIndexCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 page_index = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_page_index(&has_bits);
          page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TP.MoveDrawablesPageIndexCommandArchive.Drawable drawables = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool maintain_z_order = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_maintain_z_order(&has_bits);
          maintain_z_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUIDPath drawable_info_id_path_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_info_id_path_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 page_index_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_page_index_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 original_page_index_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_original_page_index_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_original_page_index_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.MoveDrawablesPageIndexCommandArchive.tags_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string original_tags_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_original_tags_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.MoveDrawablesPageIndexCommandArchive.original_tags_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool preserve_tags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_preserve_tags(&has_bits);
          preserve_tags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveDrawablesPageIndexCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.MoveDrawablesPageIndexCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 page_index = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page_index(), target);
  }

  // repeated .TP.MoveDrawablesPageIndexCommandArchive.Drawable drawables = 3 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_drawables(i), target, stream);
  }

  // optional bool maintain_z_order = 4 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_maintain_z_order(), target);
  }

  // repeated .TSP.UUIDPath drawable_info_id_path_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawable_info_id_path_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_drawable_info_id_path_list(i), target, stream);
  }

  // repeated uint32 page_index_list = 6;
  for (int i = 0, n = this->_internal_page_index_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_page_index_list(i), target);
  }

  // repeated uint32 original_page_index_list = 7;
  for (int i = 0, n = this->_internal_original_page_index_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_original_page_index_list(i), target);
  }

  // repeated string tags_list = 8;
  for (int i = 0, n = this->_internal_tags_list_size(); i < n; i++) {
    const auto& s = this->_internal_tags_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.MoveDrawablesPageIndexCommandArchive.tags_list");
    target = stream->WriteString(8, s, target);
  }

  // repeated string original_tags_list = 9;
  for (int i = 0, n = this->_internal_original_tags_list_size(); i < n; i++) {
    const auto& s = this->_internal_original_tags_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.MoveDrawablesPageIndexCommandArchive.original_tags_list");
    target = stream->WriteString(9, s, target);
  }

  // optional bool preserve_tags = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_preserve_tags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.MoveDrawablesPageIndexCommandArchive)
  return target;
}

size_t MoveDrawablesPageIndexCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.MoveDrawablesPageIndexCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.MoveDrawablesPageIndexCommandArchive.Drawable drawables = 3 [deprecated = true];
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUIDPath drawable_info_id_path_list = 5;
  total_size += 1UL * this->_internal_drawable_info_id_path_list_size();
  for (const auto& msg : this->drawable_info_id_path_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 page_index_list = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->page_index_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_page_index_list_size());
    total_size += data_size;
  }

  // repeated uint32 original_page_index_list = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->original_page_index_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_original_page_index_list_size());
    total_size += data_size;
  }

  // repeated string tags_list = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_list_.size());
  for (int i = 0, n = tags_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_list_.Get(i));
  }

  // repeated string original_tags_list = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(original_tags_list_.size());
  for (int i = 0, n = original_tags_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      original_tags_list_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 page_index = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page_index());
    }

    // optional bool maintain_z_order = 4 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool preserve_tags = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveDrawablesPageIndexCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.MoveDrawablesPageIndexCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveDrawablesPageIndexCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveDrawablesPageIndexCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.MoveDrawablesPageIndexCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.MoveDrawablesPageIndexCommandArchive)
    MergeFrom(*source);
  }
}

void MoveDrawablesPageIndexCommandArchive::MergeFrom(const MoveDrawablesPageIndexCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.MoveDrawablesPageIndexCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawables_.MergeFrom(from.drawables_);
  drawable_info_id_path_list_.MergeFrom(from.drawable_info_id_path_list_);
  page_index_list_.MergeFrom(from.page_index_list_);
  original_page_index_list_.MergeFrom(from.original_page_index_list_);
  tags_list_.MergeFrom(from.tags_list_);
  original_tags_list_.MergeFrom(from.original_tags_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      page_index_ = from.page_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      maintain_z_order_ = from.maintain_z_order_;
    }
    if (cached_has_bits & 0x00000008u) {
      preserve_tags_ = from.preserve_tags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveDrawablesPageIndexCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.MoveDrawablesPageIndexCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawablesPageIndexCommandArchive::CopyFrom(const MoveDrawablesPageIndexCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.MoveDrawablesPageIndexCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawablesPageIndexCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawable_info_id_path_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void MoveDrawablesPageIndexCommandArchive::InternalSwap(MoveDrawablesPageIndexCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawables_.InternalSwap(&other->drawables_);
  drawable_info_id_path_list_.InternalSwap(&other->drawable_info_id_path_list_);
  page_index_list_.InternalSwap(&other->page_index_list_);
  original_page_index_list_.InternalSwap(&other->original_page_index_list_);
  tags_list_.InternalSwap(&other->tags_list_);
  original_tags_list_.InternalSwap(&other->original_tags_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive, preserve_tags_)
      + sizeof(MoveDrawablesPageIndexCommandArchive::preserve_tags_)
      - PROTOBUF_FIELD_OFFSET(MoveDrawablesPageIndexCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDrawablesPageIndexCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[2]);
}

// ===================================================================

class InsertSectionBreakCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertSectionBreakCommandArchive>()._has_bits_);
  static const ::TSWP::StorageActionCommandArchive& super(const InsertSectionBreakCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::StorageActionCommandArchive&
InsertSectionBreakCommandArchive::_Internal::super(const InsertSectionBreakCommandArchive* msg) {
  return *msg->super_;
}
void InsertSectionBreakCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
InsertSectionBreakCommandArchive::InsertSectionBreakCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.InsertSectionBreakCommandArchive)
}
InsertSectionBreakCommandArchive::InsertSectionBreakCommandArchive(const InsertSectionBreakCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StorageActionCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.InsertSectionBreakCommandArchive)
}

void InsertSectionBreakCommandArchive::SharedCtor() {
super_ = nullptr;
}

InsertSectionBreakCommandArchive::~InsertSectionBreakCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.InsertSectionBreakCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertSectionBreakCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void InsertSectionBreakCommandArchive::ArenaDtor(void* object) {
  InsertSectionBreakCommandArchive* _this = reinterpret_cast< InsertSectionBreakCommandArchive* >(object);
  (void)_this;
}
void InsertSectionBreakCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertSectionBreakCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertSectionBreakCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.InsertSectionBreakCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertSectionBreakCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.StorageActionCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertSectionBreakCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.InsertSectionBreakCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.StorageActionCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.InsertSectionBreakCommandArchive)
  return target;
}

size_t InsertSectionBreakCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.InsertSectionBreakCommandArchive)
  size_t total_size = 0;

  // required .TSWP.StorageActionCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertSectionBreakCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.InsertSectionBreakCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertSectionBreakCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertSectionBreakCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.InsertSectionBreakCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.InsertSectionBreakCommandArchive)
    MergeFrom(*source);
  }
}

void InsertSectionBreakCommandArchive::MergeFrom(const InsertSectionBreakCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.InsertSectionBreakCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSWP::StorageActionCommandArchive::MergeFrom(from._internal_super());
  }
}

void InsertSectionBreakCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.InsertSectionBreakCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertSectionBreakCommandArchive::CopyFrom(const InsertSectionBreakCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.InsertSectionBreakCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertSectionBreakCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void InsertSectionBreakCommandArchive::InternalSwap(InsertSectionBreakCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertSectionBreakCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[3]);
}

// ===================================================================

class MoveDrawableZOrderCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveDrawableZOrderCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const MoveDrawableZOrderCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_string_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
MoveDrawableZOrderCommandArchive::_Internal::super(const MoveDrawableZOrderCommandArchive* msg) {
  return *msg->super_;
}
void MoveDrawableZOrderCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MoveDrawableZOrderCommandArchive::clear_args_list() {
  args_list_.Clear();
}
MoveDrawableZOrderCommandArchive::MoveDrawableZOrderCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.MoveDrawableZOrderCommandArchive)
}
MoveDrawableZOrderCommandArchive::MoveDrawableZOrderCommandArchive(const MoveDrawableZOrderCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_list_(from.args_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  action_string_index_ = from.action_string_index_;
  // @@protoc_insertion_point(copy_constructor:TP.MoveDrawableZOrderCommandArchive)
}

void MoveDrawableZOrderCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_string_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(action_string_index_));
}

MoveDrawableZOrderCommandArchive::~MoveDrawableZOrderCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.MoveDrawableZOrderCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveDrawableZOrderCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void MoveDrawableZOrderCommandArchive::ArenaDtor(void* object) {
  MoveDrawableZOrderCommandArchive* _this = reinterpret_cast< MoveDrawableZOrderCommandArchive* >(object);
  (void)_this;
}
void MoveDrawableZOrderCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveDrawableZOrderCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveDrawableZOrderCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.MoveDrawableZOrderCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  action_string_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveDrawableZOrderCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RearrangeIdOperationArgs args_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 action_string_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_action_string_index(&has_bits);
          action_string_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveDrawableZOrderCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.MoveDrawableZOrderCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSK.RearrangeIdOperationArgs args_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args_list(i), target, stream);
  }

  // optional uint32 action_string_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_action_string_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.MoveDrawableZOrderCommandArchive)
  return target;
}

size_t MoveDrawableZOrderCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.MoveDrawableZOrderCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RearrangeIdOperationArgs args_list = 2;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 action_string_index = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_action_string_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveDrawableZOrderCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.MoveDrawableZOrderCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveDrawableZOrderCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveDrawableZOrderCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.MoveDrawableZOrderCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.MoveDrawableZOrderCommandArchive)
    MergeFrom(*source);
  }
}

void MoveDrawableZOrderCommandArchive::MergeFrom(const MoveDrawableZOrderCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.MoveDrawableZOrderCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      action_string_index_ = from.action_string_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveDrawableZOrderCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.MoveDrawableZOrderCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawableZOrderCommandArchive::CopyFrom(const MoveDrawableZOrderCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.MoveDrawableZOrderCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawableZOrderCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void MoveDrawableZOrderCommandArchive::InternalSwap(MoveDrawableZOrderCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_list_.InternalSwap(&other->args_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveDrawableZOrderCommandArchive, action_string_index_)
      + sizeof(MoveDrawableZOrderCommandArchive::action_string_index_)
      - PROTOBUF_FIELD_OFFSET(MoveDrawableZOrderCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDrawableZOrderCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[4]);
}

// ===================================================================

class RemoveDrawablesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveDrawablesCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const RemoveDrawablesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
RemoveDrawablesCommandArchive::_Internal::super(const RemoveDrawablesCommandArchive* msg) {
  return *msg->super_;
}
void RemoveDrawablesCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RemoveDrawablesCommandArchive::clear_args_list() {
  args_list_.Clear();
}
void RemoveDrawablesCommandArchive::clear_drawable_info_list() {
  drawable_info_list_.Clear();
}
RemoveDrawablesCommandArchive::RemoveDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena),
  drawable_info_list_(arena),
  page_index_list_(arena),
  tags_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.RemoveDrawablesCommandArchive)
}
RemoveDrawablesCommandArchive::RemoveDrawablesCommandArchive(const RemoveDrawablesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_list_(from.args_list_),
      drawable_info_list_(from.drawable_info_list_),
      page_index_list_(from.page_index_list_),
      tags_list_(from.tags_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.RemoveDrawablesCommandArchive)
}

void RemoveDrawablesCommandArchive::SharedCtor() {
super_ = nullptr;
}

RemoveDrawablesCommandArchive::~RemoveDrawablesCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.RemoveDrawablesCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveDrawablesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void RemoveDrawablesCommandArchive::ArenaDtor(void* object) {
  RemoveDrawablesCommandArchive* _this = reinterpret_cast< RemoveDrawablesCommandArchive* >(object);
  (void)_this;
}
void RemoveDrawablesCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveDrawablesCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveDrawablesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.RemoveDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  drawable_info_list_.Clear();
  page_index_list_.Clear();
  tags_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveDrawablesCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.RemoveIdOperationArgs args_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawable_info_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 page_index_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_page_index_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.RemoveDrawablesCommandArchive.tags_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveDrawablesCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.RemoveDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSK.RemoveIdOperationArgs args_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args_list(i), target, stream);
  }

  // repeated .TSP.Reference drawable_info_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawable_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_drawable_info_list(i), target, stream);
  }

  // repeated uint32 page_index_list = 4;
  for (int i = 0, n = this->_internal_page_index_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page_index_list(i), target);
  }

  // repeated string tags_list = 5;
  for (int i = 0, n = this->_internal_tags_list_size(); i < n; i++) {
    const auto& s = this->_internal_tags_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.RemoveDrawablesCommandArchive.tags_list");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.RemoveDrawablesCommandArchive)
  return target;
}

size_t RemoveDrawablesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.RemoveDrawablesCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RemoveIdOperationArgs args_list = 2;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference drawable_info_list = 3;
  total_size += 1UL * this->_internal_drawable_info_list_size();
  for (const auto& msg : this->drawable_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 page_index_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->page_index_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_page_index_list_size());
    total_size += data_size;
  }

  // repeated string tags_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_list_.size());
  for (int i = 0, n = tags_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_list_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveDrawablesCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.RemoveDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveDrawablesCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveDrawablesCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.RemoveDrawablesCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.RemoveDrawablesCommandArchive)
    MergeFrom(*source);
  }
}

void RemoveDrawablesCommandArchive::MergeFrom(const RemoveDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.RemoveDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
  drawable_info_list_.MergeFrom(from.drawable_info_list_);
  page_index_list_.MergeFrom(from.page_index_list_);
  tags_list_.MergeFrom(from.tags_list_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
}

void RemoveDrawablesCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.RemoveDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDrawablesCommandArchive::CopyFrom(const RemoveDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.RemoveDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDrawablesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawable_info_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void RemoveDrawablesCommandArchive::InternalSwap(RemoveDrawablesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_list_.InternalSwap(&other->args_list_);
  drawable_info_list_.InternalSwap(&other->drawable_info_list_);
  page_index_list_.InternalSwap(&other->page_index_list_);
  tags_list_.InternalSwap(&other->tags_list_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveDrawablesCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[5]);
}

// ===================================================================

class ChangeSectionMarginsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeSectionMarginsCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ChangeSectionMarginsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& section(const ChangeSectionMarginsCommandArchive* msg);
  static void set_has_section(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_margin_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ChangeSectionMarginsCommandArchive::_Internal::super(const ChangeSectionMarginsCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ChangeSectionMarginsCommandArchive::_Internal::section(const ChangeSectionMarginsCommandArchive* msg) {
  return *msg->section_;
}
void ChangeSectionMarginsCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeSectionMarginsCommandArchive::clear_section() {
  if (section_ != nullptr) section_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ChangeSectionMarginsCommandArchive::ChangeSectionMarginsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.ChangeSectionMarginsCommandArchive)
}
ChangeSectionMarginsCommandArchive::ChangeSectionMarginsCommandArchive(const ChangeSectionMarginsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_section()) {
    section_ = new ::TSP::Reference(*from.section_);
  } else {
    section_ = nullptr;
  }
  ::memcpy(&margin_, &from.margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&margin_value_) -
    reinterpret_cast<char*>(&margin_)) + sizeof(margin_value_));
  // @@protoc_insertion_point(copy_constructor:TP.ChangeSectionMarginsCommandArchive)
}

void ChangeSectionMarginsCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&margin_value_) -
    reinterpret_cast<char*>(&super_)) + sizeof(margin_value_));
}

ChangeSectionMarginsCommandArchive::~ChangeSectionMarginsCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.ChangeSectionMarginsCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeSectionMarginsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete section_;
}

void ChangeSectionMarginsCommandArchive::ArenaDtor(void* object) {
  ChangeSectionMarginsCommandArchive* _this = reinterpret_cast< ChangeSectionMarginsCommandArchive* >(object);
  (void)_this;
}
void ChangeSectionMarginsCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeSectionMarginsCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeSectionMarginsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ChangeSectionMarginsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(section_ != nullptr);
      section_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&margin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&margin_value_) -
        reinterpret_cast<char*>(&margin_)) + sizeof(margin_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeSectionMarginsCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_section(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TP.ChangeSectionMarginsCommandArchive.SectionMargin margin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::ChangeSectionMarginsCommandArchive_SectionMargin_IsValid(val))) {
            _internal_set_margin(static_cast<::TP::ChangeSectionMarginsCommandArchive_SectionMargin>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float margin_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_margin_value(&has_bits);
          margin_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeSectionMarginsCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ChangeSectionMarginsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference section = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::section(this), target, stream);
  }

  // optional .TP.ChangeSectionMarginsCommandArchive.SectionMargin margin = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_margin(), target);
  }

  // optional float margin_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_margin_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ChangeSectionMarginsCommandArchive)
  return target;
}

size_t ChangeSectionMarginsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ChangeSectionMarginsCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference section = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *section_);
    }

    // optional .TP.ChangeSectionMarginsCommandArchive.SectionMargin margin = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_margin());
    }

    // optional float margin_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeSectionMarginsCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.ChangeSectionMarginsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeSectionMarginsCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeSectionMarginsCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.ChangeSectionMarginsCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.ChangeSectionMarginsCommandArchive)
    MergeFrom(*source);
  }
}

void ChangeSectionMarginsCommandArchive::MergeFrom(const ChangeSectionMarginsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.ChangeSectionMarginsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_section()->::TSP::Reference::MergeFrom(from._internal_section());
    }
    if (cached_has_bits & 0x00000004u) {
      margin_ = from.margin_;
    }
    if (cached_has_bits & 0x00000008u) {
      margin_value_ = from.margin_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeSectionMarginsCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.ChangeSectionMarginsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSectionMarginsCommandArchive::CopyFrom(const ChangeSectionMarginsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ChangeSectionMarginsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSectionMarginsCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_section()) {
    if (!section_->IsInitialized()) return false;
  }
  return true;
}

void ChangeSectionMarginsCommandArchive::InternalSwap(ChangeSectionMarginsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeSectionMarginsCommandArchive, margin_value_)
      + sizeof(ChangeSectionMarginsCommandArchive::margin_value_)
      - PROTOBUF_FIELD_OFFSET(ChangeSectionMarginsCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeSectionMarginsCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[6]);
}

// ===================================================================

class InsertMasterDrawablesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertMasterDrawablesCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const InsertMasterDrawablesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& obsolete_section(const InsertMasterDrawablesCommandArchive* msg);
  static void set_has_obsolete_section(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drawable_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& master_drawable_provider(const InsertMasterDrawablesCommandArchive* msg);
  static void set_has_master_drawable_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
InsertMasterDrawablesCommandArchive::_Internal::super(const InsertMasterDrawablesCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
InsertMasterDrawablesCommandArchive::_Internal::obsolete_section(const InsertMasterDrawablesCommandArchive* msg) {
  return *msg->obsolete_section_;
}
const ::TSP::Reference&
InsertMasterDrawablesCommandArchive::_Internal::master_drawable_provider(const InsertMasterDrawablesCommandArchive* msg) {
  return *msg->master_drawable_provider_;
}
void InsertMasterDrawablesCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InsertMasterDrawablesCommandArchive::clear_obsolete_section() {
  if (obsolete_section_ != nullptr) obsolete_section_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InsertMasterDrawablesCommandArchive::clear_master_drawables() {
  master_drawables_.Clear();
}
void InsertMasterDrawablesCommandArchive::clear_master_drawable_provider() {
  if (master_drawable_provider_ != nullptr) master_drawable_provider_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void InsertMasterDrawablesCommandArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
InsertMasterDrawablesCommandArchive::InsertMasterDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  master_drawables_(arena),
  custom_format_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.InsertMasterDrawablesCommandArchive)
}
InsertMasterDrawablesCommandArchive::InsertMasterDrawablesCommandArchive(const InsertMasterDrawablesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      master_drawables_(from.master_drawables_),
      custom_format_keys_(from.custom_format_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_obsolete_section()) {
    obsolete_section_ = new ::TSP::Reference(*from.obsolete_section_);
  } else {
    obsolete_section_ = nullptr;
  }
  if (from._internal_has_master_drawable_provider()) {
    master_drawable_provider_ = new ::TSP::Reference(*from.master_drawable_provider_);
  } else {
    master_drawable_provider_ = nullptr;
  }
  drawable_index_ = from.drawable_index_;
  // @@protoc_insertion_point(copy_constructor:TP.InsertMasterDrawablesCommandArchive)
}

void InsertMasterDrawablesCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&drawable_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(drawable_index_));
}

InsertMasterDrawablesCommandArchive::~InsertMasterDrawablesCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.InsertMasterDrawablesCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertMasterDrawablesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete obsolete_section_;
  if (this != internal_default_instance()) delete master_drawable_provider_;
}

void InsertMasterDrawablesCommandArchive::ArenaDtor(void* object) {
  InsertMasterDrawablesCommandArchive* _this = reinterpret_cast< InsertMasterDrawablesCommandArchive* >(object);
  (void)_this;
}
void InsertMasterDrawablesCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertMasterDrawablesCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertMasterDrawablesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.InsertMasterDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  master_drawables_.Clear();
  custom_format_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(obsolete_section_ != nullptr);
      obsolete_section_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(master_drawable_provider_ != nullptr);
      master_drawable_provider_->Clear();
    }
  }
  drawable_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertMasterDrawablesCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference OBSOLETE_section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsolete_section(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference master_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_master_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 drawable_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_drawable_index(&has_bits);
          drawable_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference master_drawable_provider = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_master_drawable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertMasterDrawablesCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.InsertMasterDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference OBSOLETE_section = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::obsolete_section(this), target, stream);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_master_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_master_drawables(i), target, stream);
  }

  // optional uint32 drawable_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_drawable_index(), target);
  }

  // optional .TSP.Reference master_drawable_provider = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::master_drawable_provider(this), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_custom_format_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.InsertMasterDrawablesCommandArchive)
  return target;
}

size_t InsertMasterDrawablesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.InsertMasterDrawablesCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference master_drawables = 3;
  total_size += 1UL * this->_internal_master_drawables_size();
  for (const auto& msg : this->master_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID custom_format_keys = 6;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference OBSOLETE_section = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obsolete_section_);
    }

    // optional .TSP.Reference master_drawable_provider = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *master_drawable_provider_);
    }

    // optional uint32 drawable_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_drawable_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertMasterDrawablesCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.InsertMasterDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertMasterDrawablesCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertMasterDrawablesCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.InsertMasterDrawablesCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.InsertMasterDrawablesCommandArchive)
    MergeFrom(*source);
  }
}

void InsertMasterDrawablesCommandArchive::MergeFrom(const InsertMasterDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.InsertMasterDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  master_drawables_.MergeFrom(from.master_drawables_);
  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_obsolete_section()->::TSP::Reference::MergeFrom(from._internal_obsolete_section());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_master_drawable_provider()->::TSP::Reference::MergeFrom(from._internal_master_drawable_provider());
    }
    if (cached_has_bits & 0x00000008u) {
      drawable_index_ = from.drawable_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsertMasterDrawablesCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.InsertMasterDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertMasterDrawablesCommandArchive::CopyFrom(const InsertMasterDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.InsertMasterDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertMasterDrawablesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(master_drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_obsolete_section()) {
    if (!obsolete_section_->IsInitialized()) return false;
  }
  if (_internal_has_master_drawable_provider()) {
    if (!master_drawable_provider_->IsInitialized()) return false;
  }
  return true;
}

void InsertMasterDrawablesCommandArchive::InternalSwap(InsertMasterDrawablesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  master_drawables_.InternalSwap(&other->master_drawables_);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertMasterDrawablesCommandArchive, drawable_index_)
      + sizeof(InsertMasterDrawablesCommandArchive::drawable_index_)
      - PROTOBUF_FIELD_OFFSET(InsertMasterDrawablesCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertMasterDrawablesCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[7]);
}

// ===================================================================

class MoveMasterDrawableZOrderCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveMasterDrawableZOrderCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const MoveMasterDrawableZOrderCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& obsolete_section(const MoveMasterDrawableZOrderCommandArchive* msg);
  static void set_has_obsolete_section(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& master_drawable_provider(const MoveMasterDrawableZOrderCommandArchive* msg);
  static void set_has_master_drawable_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
MoveMasterDrawableZOrderCommandArchive::_Internal::super(const MoveMasterDrawableZOrderCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
MoveMasterDrawableZOrderCommandArchive::_Internal::obsolete_section(const MoveMasterDrawableZOrderCommandArchive* msg) {
  return *msg->obsolete_section_;
}
const ::TSP::Reference&
MoveMasterDrawableZOrderCommandArchive::_Internal::master_drawable_provider(const MoveMasterDrawableZOrderCommandArchive* msg) {
  return *msg->master_drawable_provider_;
}
void MoveMasterDrawableZOrderCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MoveMasterDrawableZOrderCommandArchive::clear_obsolete_section() {
  if (obsolete_section_ != nullptr) obsolete_section_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MoveMasterDrawableZOrderCommandArchive::clear_master_drawables() {
  master_drawables_.Clear();
}
void MoveMasterDrawableZOrderCommandArchive::clear_master_drawable_provider() {
  if (master_drawable_provider_ != nullptr) master_drawable_provider_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MoveMasterDrawableZOrderCommandArchive::MoveMasterDrawableZOrderCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  master_drawables_(arena),
  indexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.MoveMasterDrawableZOrderCommandArchive)
}
MoveMasterDrawableZOrderCommandArchive::MoveMasterDrawableZOrderCommandArchive(const MoveMasterDrawableZOrderCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      master_drawables_(from.master_drawables_),
      indexes_(from.indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_obsolete_section()) {
    obsolete_section_ = new ::TSP::Reference(*from.obsolete_section_);
  } else {
    obsolete_section_ = nullptr;
  }
  if (from._internal_has_master_drawable_provider()) {
    master_drawable_provider_ = new ::TSP::Reference(*from.master_drawable_provider_);
  } else {
    master_drawable_provider_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.MoveMasterDrawableZOrderCommandArchive)
}

void MoveMasterDrawableZOrderCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&master_drawable_provider_) -
    reinterpret_cast<char*>(&super_)) + sizeof(master_drawable_provider_));
}

MoveMasterDrawableZOrderCommandArchive::~MoveMasterDrawableZOrderCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.MoveMasterDrawableZOrderCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveMasterDrawableZOrderCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete obsolete_section_;
  if (this != internal_default_instance()) delete master_drawable_provider_;
}

void MoveMasterDrawableZOrderCommandArchive::ArenaDtor(void* object) {
  MoveMasterDrawableZOrderCommandArchive* _this = reinterpret_cast< MoveMasterDrawableZOrderCommandArchive* >(object);
  (void)_this;
}
void MoveMasterDrawableZOrderCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveMasterDrawableZOrderCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveMasterDrawableZOrderCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.MoveMasterDrawableZOrderCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  master_drawables_.Clear();
  indexes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(obsolete_section_ != nullptr);
      obsolete_section_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(master_drawable_provider_ != nullptr);
      master_drawable_provider_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveMasterDrawableZOrderCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference OBSOLETE_section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsolete_section(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference master_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_master_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 indexes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference master_drawable_provider = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_master_drawable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveMasterDrawableZOrderCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.MoveMasterDrawableZOrderCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference OBSOLETE_section = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::obsolete_section(this), target, stream);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_master_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_master_drawables(i), target, stream);
  }

  // repeated uint32 indexes = 4;
  for (int i = 0, n = this->_internal_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_indexes(i), target);
  }

  // optional .TSP.Reference master_drawable_provider = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::master_drawable_provider(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.MoveMasterDrawableZOrderCommandArchive)
  return target;
}

size_t MoveMasterDrawableZOrderCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.MoveMasterDrawableZOrderCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference master_drawables = 3;
  total_size += 1UL * this->_internal_master_drawables_size();
  for (const auto& msg : this->master_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 indexes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_indexes_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference OBSOLETE_section = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obsolete_section_);
    }

    // optional .TSP.Reference master_drawable_provider = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *master_drawable_provider_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveMasterDrawableZOrderCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.MoveMasterDrawableZOrderCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveMasterDrawableZOrderCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveMasterDrawableZOrderCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.MoveMasterDrawableZOrderCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.MoveMasterDrawableZOrderCommandArchive)
    MergeFrom(*source);
  }
}

void MoveMasterDrawableZOrderCommandArchive::MergeFrom(const MoveMasterDrawableZOrderCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.MoveMasterDrawableZOrderCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  master_drawables_.MergeFrom(from.master_drawables_);
  indexes_.MergeFrom(from.indexes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_obsolete_section()->::TSP::Reference::MergeFrom(from._internal_obsolete_section());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_master_drawable_provider()->::TSP::Reference::MergeFrom(from._internal_master_drawable_provider());
    }
  }
}

void MoveMasterDrawableZOrderCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.MoveMasterDrawableZOrderCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveMasterDrawableZOrderCommandArchive::CopyFrom(const MoveMasterDrawableZOrderCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.MoveMasterDrawableZOrderCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveMasterDrawableZOrderCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(master_drawables_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_obsolete_section()) {
    if (!obsolete_section_->IsInitialized()) return false;
  }
  if (_internal_has_master_drawable_provider()) {
    if (!master_drawable_provider_->IsInitialized()) return false;
  }
  return true;
}

void MoveMasterDrawableZOrderCommandArchive::InternalSwap(MoveMasterDrawableZOrderCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  master_drawables_.InternalSwap(&other->master_drawables_);
  indexes_.InternalSwap(&other->indexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveMasterDrawableZOrderCommandArchive, master_drawable_provider_)
      + sizeof(MoveMasterDrawableZOrderCommandArchive::master_drawable_provider_)
      - PROTOBUF_FIELD_OFFSET(MoveMasterDrawableZOrderCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveMasterDrawableZOrderCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[8]);
}

// ===================================================================

class RemoveMasterDrawablesCommandArchive_MasterDrawable::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveMasterDrawablesCommandArchive_MasterDrawable>()._has_bits_);
  static const ::TSP::Reference& drawable(const RemoveMasterDrawablesCommandArchive_MasterDrawable* msg);
  static void set_has_drawable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_drawable_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
RemoveMasterDrawablesCommandArchive_MasterDrawable::_Internal::drawable(const RemoveMasterDrawablesCommandArchive_MasterDrawable* msg) {
  return *msg->drawable_;
}
void RemoveMasterDrawablesCommandArchive_MasterDrawable::clear_drawable() {
  if (drawable_ != nullptr) drawable_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RemoveMasterDrawablesCommandArchive_MasterDrawable::RemoveMasterDrawablesCommandArchive_MasterDrawable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
}
RemoveMasterDrawablesCommandArchive_MasterDrawable::RemoveMasterDrawablesCommandArchive_MasterDrawable(const RemoveMasterDrawablesCommandArchive_MasterDrawable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drawable()) {
    drawable_ = new ::TSP::Reference(*from.drawable_);
  } else {
    drawable_ = nullptr;
  }
  drawable_index_ = from.drawable_index_;
  // @@protoc_insertion_point(copy_constructor:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&drawable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&drawable_index_) -
    reinterpret_cast<char*>(&drawable_)) + sizeof(drawable_index_));
}

RemoveMasterDrawablesCommandArchive_MasterDrawable::~RemoveMasterDrawablesCommandArchive_MasterDrawable() {
  // @@protoc_insertion_point(destructor:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete drawable_;
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::ArenaDtor(void* object) {
  RemoveMasterDrawablesCommandArchive_MasterDrawable* _this = reinterpret_cast< RemoveMasterDrawablesCommandArchive_MasterDrawable* >(object);
  (void)_this;
}
void RemoveMasterDrawablesCommandArchive_MasterDrawable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveMasterDrawablesCommandArchive_MasterDrawable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(drawable_ != nullptr);
    drawable_->Clear();
  }
  drawable_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveMasterDrawablesCommandArchive_MasterDrawable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference drawable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 drawable_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_drawable_index(&has_bits);
          drawable_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveMasterDrawablesCommandArchive_MasterDrawable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference drawable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::drawable(this), target, stream);
  }

  // optional uint32 drawable_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_drawable_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
  return target;
}

size_t RemoveMasterDrawablesCommandArchive_MasterDrawable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference drawable = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_);
    }

    // optional uint32 drawable_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_drawable_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveMasterDrawablesCommandArchive_MasterDrawable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveMasterDrawablesCommandArchive_MasterDrawable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
    MergeFrom(*source);
  }
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::MergeFrom(const RemoveMasterDrawablesCommandArchive_MasterDrawable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_drawable()->::TSP::Reference::MergeFrom(from._internal_drawable());
    }
    if (cached_has_bits & 0x00000002u) {
      drawable_index_ = from.drawable_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::CopyFrom(const RemoveMasterDrawablesCommandArchive_MasterDrawable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMasterDrawablesCommandArchive_MasterDrawable::IsInitialized() const {
  if (_internal_has_drawable()) {
    if (!drawable_->IsInitialized()) return false;
  }
  return true;
}

void RemoveMasterDrawablesCommandArchive_MasterDrawable::InternalSwap(RemoveMasterDrawablesCommandArchive_MasterDrawable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive_MasterDrawable, drawable_index_)
      + sizeof(RemoveMasterDrawablesCommandArchive_MasterDrawable::drawable_index_)
      - PROTOBUF_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive_MasterDrawable, drawable_)>(
          reinterpret_cast<char*>(&drawable_),
          reinterpret_cast<char*>(&other->drawable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveMasterDrawablesCommandArchive_MasterDrawable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[9]);
}

// ===================================================================

class RemoveMasterDrawablesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveMasterDrawablesCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const RemoveMasterDrawablesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& obsolete_section(const RemoveMasterDrawablesCommandArchive* msg);
  static void set_has_obsolete_section(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& master_drawable_provider(const RemoveMasterDrawablesCommandArchive* msg);
  static void set_has_master_drawable_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
RemoveMasterDrawablesCommandArchive::_Internal::super(const RemoveMasterDrawablesCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
RemoveMasterDrawablesCommandArchive::_Internal::obsolete_section(const RemoveMasterDrawablesCommandArchive* msg) {
  return *msg->obsolete_section_;
}
const ::TSP::Reference&
RemoveMasterDrawablesCommandArchive::_Internal::master_drawable_provider(const RemoveMasterDrawablesCommandArchive* msg) {
  return *msg->master_drawable_provider_;
}
void RemoveMasterDrawablesCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RemoveMasterDrawablesCommandArchive::clear_obsolete_section() {
  if (obsolete_section_ != nullptr) obsolete_section_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RemoveMasterDrawablesCommandArchive::clear_master_drawable_provider() {
  if (master_drawable_provider_ != nullptr) master_drawable_provider_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RemoveMasterDrawablesCommandArchive::RemoveMasterDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  master_drawables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.RemoveMasterDrawablesCommandArchive)
}
RemoveMasterDrawablesCommandArchive::RemoveMasterDrawablesCommandArchive(const RemoveMasterDrawablesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      master_drawables_(from.master_drawables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_obsolete_section()) {
    obsolete_section_ = new ::TSP::Reference(*from.obsolete_section_);
  } else {
    obsolete_section_ = nullptr;
  }
  if (from._internal_has_master_drawable_provider()) {
    master_drawable_provider_ = new ::TSP::Reference(*from.master_drawable_provider_);
  } else {
    master_drawable_provider_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.RemoveMasterDrawablesCommandArchive)
}

void RemoveMasterDrawablesCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&master_drawable_provider_) -
    reinterpret_cast<char*>(&super_)) + sizeof(master_drawable_provider_));
}

RemoveMasterDrawablesCommandArchive::~RemoveMasterDrawablesCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.RemoveMasterDrawablesCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveMasterDrawablesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete obsolete_section_;
  if (this != internal_default_instance()) delete master_drawable_provider_;
}

void RemoveMasterDrawablesCommandArchive::ArenaDtor(void* object) {
  RemoveMasterDrawablesCommandArchive* _this = reinterpret_cast< RemoveMasterDrawablesCommandArchive* >(object);
  (void)_this;
}
void RemoveMasterDrawablesCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveMasterDrawablesCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveMasterDrawablesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.RemoveMasterDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  master_drawables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(obsolete_section_ != nullptr);
      obsolete_section_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(master_drawable_provider_ != nullptr);
      master_drawable_provider_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveMasterDrawablesCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference OBSOLETE_section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsolete_section(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TP.RemoveMasterDrawablesCommandArchive.MasterDrawable master_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_master_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference master_drawable_provider = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_master_drawable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveMasterDrawablesCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.RemoveMasterDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference OBSOLETE_section = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::obsolete_section(this), target, stream);
  }

  // repeated .TP.RemoveMasterDrawablesCommandArchive.MasterDrawable master_drawables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_master_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_master_drawables(i), target, stream);
  }

  // optional .TSP.Reference master_drawable_provider = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::master_drawable_provider(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.RemoveMasterDrawablesCommandArchive)
  return target;
}

size_t RemoveMasterDrawablesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.RemoveMasterDrawablesCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.RemoveMasterDrawablesCommandArchive.MasterDrawable master_drawables = 3;
  total_size += 1UL * this->_internal_master_drawables_size();
  for (const auto& msg : this->master_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference OBSOLETE_section = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obsolete_section_);
    }

    // optional .TSP.Reference master_drawable_provider = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *master_drawable_provider_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveMasterDrawablesCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.RemoveMasterDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveMasterDrawablesCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveMasterDrawablesCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.RemoveMasterDrawablesCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.RemoveMasterDrawablesCommandArchive)
    MergeFrom(*source);
  }
}

void RemoveMasterDrawablesCommandArchive::MergeFrom(const RemoveMasterDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.RemoveMasterDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  master_drawables_.MergeFrom(from.master_drawables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_obsolete_section()->::TSP::Reference::MergeFrom(from._internal_obsolete_section());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_master_drawable_provider()->::TSP::Reference::MergeFrom(from._internal_master_drawable_provider());
    }
  }
}

void RemoveMasterDrawablesCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.RemoveMasterDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMasterDrawablesCommandArchive::CopyFrom(const RemoveMasterDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.RemoveMasterDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMasterDrawablesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(master_drawables_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_obsolete_section()) {
    if (!obsolete_section_->IsInitialized()) return false;
  }
  if (_internal_has_master_drawable_provider()) {
    if (!master_drawable_provider_->IsInitialized()) return false;
  }
  return true;
}

void RemoveMasterDrawablesCommandArchive::InternalSwap(RemoveMasterDrawablesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  master_drawables_.InternalSwap(&other->master_drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive, master_drawable_provider_)
      + sizeof(RemoveMasterDrawablesCommandArchive::master_drawable_provider_)
      - PROTOBUF_FIELD_OFFSET(RemoveMasterDrawablesCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveMasterDrawablesCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[10]);
}

// ===================================================================

class PasteMasterDrawablesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteMasterDrawablesCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const PasteMasterDrawablesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& section(const PasteMasterDrawablesCommandArchive* msg);
  static void set_has_section(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drawable_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
PasteMasterDrawablesCommandArchive::_Internal::super(const PasteMasterDrawablesCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
PasteMasterDrawablesCommandArchive::_Internal::section(const PasteMasterDrawablesCommandArchive* msg) {
  return *msg->section_;
}
void PasteMasterDrawablesCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PasteMasterDrawablesCommandArchive::clear_section() {
  if (section_ != nullptr) section_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PasteMasterDrawablesCommandArchive::clear_master_drawables() {
  master_drawables_.Clear();
}
PasteMasterDrawablesCommandArchive::PasteMasterDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  master_drawables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.PasteMasterDrawablesCommandArchive)
}
PasteMasterDrawablesCommandArchive::PasteMasterDrawablesCommandArchive(const PasteMasterDrawablesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      master_drawables_(from.master_drawables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_section()) {
    section_ = new ::TSP::Reference(*from.section_);
  } else {
    section_ = nullptr;
  }
  drawable_index_ = from.drawable_index_;
  // @@protoc_insertion_point(copy_constructor:TP.PasteMasterDrawablesCommandArchive)
}

void PasteMasterDrawablesCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&drawable_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(drawable_index_));
}

PasteMasterDrawablesCommandArchive::~PasteMasterDrawablesCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.PasteMasterDrawablesCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PasteMasterDrawablesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete section_;
}

void PasteMasterDrawablesCommandArchive::ArenaDtor(void* object) {
  PasteMasterDrawablesCommandArchive* _this = reinterpret_cast< PasteMasterDrawablesCommandArchive* >(object);
  (void)_this;
}
void PasteMasterDrawablesCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PasteMasterDrawablesCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PasteMasterDrawablesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.PasteMasterDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  master_drawables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(section_ != nullptr);
      section_->Clear();
    }
  }
  drawable_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteMasterDrawablesCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_section(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference master_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_master_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 drawable_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_drawable_index(&has_bits);
          drawable_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PasteMasterDrawablesCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.PasteMasterDrawablesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference section = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::section(this), target, stream);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_master_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_master_drawables(i), target, stream);
  }

  // optional uint32 drawable_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_drawable_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.PasteMasterDrawablesCommandArchive)
  return target;
}

size_t PasteMasterDrawablesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.PasteMasterDrawablesCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference master_drawables = 3;
  total_size += 1UL * this->_internal_master_drawables_size();
  for (const auto& msg : this->master_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference section = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *section_);
    }

    // optional uint32 drawable_index = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_drawable_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasteMasterDrawablesCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.PasteMasterDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PasteMasterDrawablesCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PasteMasterDrawablesCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.PasteMasterDrawablesCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.PasteMasterDrawablesCommandArchive)
    MergeFrom(*source);
  }
}

void PasteMasterDrawablesCommandArchive::MergeFrom(const PasteMasterDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.PasteMasterDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  master_drawables_.MergeFrom(from.master_drawables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_section()->::TSP::Reference::MergeFrom(from._internal_section());
    }
    if (cached_has_bits & 0x00000004u) {
      drawable_index_ = from.drawable_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PasteMasterDrawablesCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.PasteMasterDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteMasterDrawablesCommandArchive::CopyFrom(const PasteMasterDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.PasteMasterDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteMasterDrawablesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(master_drawables_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_section()) {
    if (!section_->IsInitialized()) return false;
  }
  return true;
}

void PasteMasterDrawablesCommandArchive::InternalSwap(PasteMasterDrawablesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  master_drawables_.InternalSwap(&other->master_drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasteMasterDrawablesCommandArchive, drawable_index_)
      + sizeof(PasteMasterDrawablesCommandArchive::drawable_index_)
      - PROTOBUF_FIELD_OFFSET(PasteMasterDrawablesCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteMasterDrawablesCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[11]);
}

// ===================================================================

class MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition>()._has_bits_);
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_h_offset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_h_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_v_offset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
}
MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition(const MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&char_index_, &from.char_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_offset_) -
    reinterpret_cast<char*>(&char_index_)) + sizeof(v_offset_));
  // @@protoc_insertion_point(copy_constructor:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
}

void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&char_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&v_offset_) -
    reinterpret_cast<char*>(&char_index_)) + sizeof(v_offset_));
}

MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::~MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition() {
  // @@protoc_insertion_point(destructor:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::ArenaDtor(void* object) {
  MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* _this = reinterpret_cast< MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* >(object);
  (void)_this;
}
void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&char_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_offset_) -
        reinterpret_cast<char*>(&char_index_)) + sizeof(v_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 char_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_char_index(&has_bits);
          char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 h_offset_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_h_offset_type(&has_bits);
          h_offset_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float h_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_h_offset(&has_bits);
          h_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 v_offset_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_v_offset_type(&has_bits);
          v_offset_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float v_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_v_offset(&has_bits);
          v_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 char_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_char_index(), target);
  }

  // optional uint32 h_offset_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_h_offset_type(), target);
  }

  // optional float h_offset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_h_offset(), target);
  }

  // optional uint32 v_offset_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_v_offset_type(), target);
  }

  // optional float v_offset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
  return target;
}

size_t MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 char_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_char_index());
    }

    // optional uint32 h_offset_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_h_offset_type());
    }

    // optional float h_offset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 v_offset_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_v_offset_type());
    }

    // optional float v_offset = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
    MergeFrom(*source);
  }
}

void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::MergeFrom(const MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      char_index_ = from.char_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      h_offset_type_ = from.h_offset_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      h_offset_ = from.h_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      v_offset_type_ = from.v_offset_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_offset_ = from.v_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::CopyFrom(const MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::IsInitialized() const {
  return true;
}

void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::InternalSwap(MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition, v_offset_)
      + sizeof(MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::v_offset_)
      - PROTOBUF_FIELD_OFFSET(MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition, char_index_)>(
          reinterpret_cast<char*>(&char_index_),
          reinterpret_cast<char*>(&other->char_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[12]);
}

// ===================================================================

class MoveDrawablesAttachedCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveDrawablesAttachedCommandArchive>()._has_bits_);
  static const ::TSWP::StorageActionCommandArchive& super(const MoveDrawablesAttachedCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::StorageActionCommandArchive&
MoveDrawablesAttachedCommandArchive::_Internal::super(const MoveDrawablesAttachedCommandArchive* msg) {
  return *msg->super_;
}
void MoveDrawablesAttachedCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MoveDrawablesAttachedCommandArchive::clear_args_list() {
  args_list_.Clear();
}
void MoveDrawablesAttachedCommandArchive::clear_range_list() {
  range_list_.Clear();
}
void MoveDrawablesAttachedCommandArchive::clear_drawable_info_id_path_list() {
  drawable_info_id_path_list_.Clear();
}
void MoveDrawablesAttachedCommandArchive::clear_exterior_text_wrap_list() {
  exterior_text_wrap_list_.Clear();
}
void MoveDrawablesAttachedCommandArchive::clear_original_exterior_text_wrap_list() {
  original_exterior_text_wrap_list_.Clear();
}
void MoveDrawablesAttachedCommandArchive::clear_original_attachment_list() {
  original_attachment_list_.Clear();
}
MoveDrawablesAttachedCommandArchive::MoveDrawablesAttachedCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena),
  range_list_(arena),
  drawable_info_id_path_list_(arena),
  position_list_(arena),
  exterior_text_wrap_list_(arena),
  original_page_index_list_(arena),
  original_exterior_text_wrap_list_(arena),
  original_attachment_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.MoveDrawablesAttachedCommandArchive)
}
MoveDrawablesAttachedCommandArchive::MoveDrawablesAttachedCommandArchive(const MoveDrawablesAttachedCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_list_(from.args_list_),
      range_list_(from.range_list_),
      drawable_info_id_path_list_(from.drawable_info_id_path_list_),
      position_list_(from.position_list_),
      exterior_text_wrap_list_(from.exterior_text_wrap_list_),
      original_page_index_list_(from.original_page_index_list_),
      original_exterior_text_wrap_list_(from.original_exterior_text_wrap_list_),
      original_attachment_list_(from.original_attachment_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StorageActionCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.MoveDrawablesAttachedCommandArchive)
}

void MoveDrawablesAttachedCommandArchive::SharedCtor() {
super_ = nullptr;
}

MoveDrawablesAttachedCommandArchive::~MoveDrawablesAttachedCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.MoveDrawablesAttachedCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveDrawablesAttachedCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void MoveDrawablesAttachedCommandArchive::ArenaDtor(void* object) {
  MoveDrawablesAttachedCommandArchive* _this = reinterpret_cast< MoveDrawablesAttachedCommandArchive* >(object);
  (void)_this;
}
void MoveDrawablesAttachedCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveDrawablesAttachedCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveDrawablesAttachedCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.MoveDrawablesAttachedCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  range_list_.Clear();
  drawable_info_id_path_list_.Clear();
  position_list_.Clear();
  exterior_text_wrap_list_.Clear();
  original_page_index_list_.Clear();
  original_exterior_text_wrap_list_.Clear();
  original_attachment_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveDrawablesAttachedCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.StorageActionCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.IdPlacementOperationArgs args_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Range range_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUIDPath drawable_info_id_path_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_info_id_path_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition position_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_position_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSD.ExteriorTextWrapArchive exterior_text_wrap_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exterior_text_wrap_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 original_page_index_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_original_page_index_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_original_page_index_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSD.ExteriorTextWrapArchive original_exterior_text_wrap_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_original_exterior_text_wrap_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference original_attachment_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_original_attachment_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveDrawablesAttachedCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.MoveDrawablesAttachedCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.StorageActionCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSK.IdPlacementOperationArgs args_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args_list(i), target, stream);
  }

  // repeated .TSP.Range range_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_range_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_range_list(i), target, stream);
  }

  // repeated .TSP.UUIDPath drawable_info_id_path_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawable_info_id_path_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_drawable_info_id_path_list(i), target, stream);
  }

  // repeated .TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition position_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_position_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_position_list(i), target, stream);
  }

  // repeated .TSD.ExteriorTextWrapArchive exterior_text_wrap_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exterior_text_wrap_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_exterior_text_wrap_list(i), target, stream);
  }

  // repeated uint32 original_page_index_list = 7;
  for (int i = 0, n = this->_internal_original_page_index_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_original_page_index_list(i), target);
  }

  // repeated .TSD.ExteriorTextWrapArchive original_exterior_text_wrap_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_original_exterior_text_wrap_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_original_exterior_text_wrap_list(i), target, stream);
  }

  // repeated .TSP.Reference original_attachment_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_original_attachment_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_original_attachment_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.MoveDrawablesAttachedCommandArchive)
  return target;
}

size_t MoveDrawablesAttachedCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.MoveDrawablesAttachedCommandArchive)
  size_t total_size = 0;

  // required .TSWP.StorageActionCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.IdPlacementOperationArgs args_list = 2;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Range range_list = 3;
  total_size += 1UL * this->_internal_range_list_size();
  for (const auto& msg : this->range_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUIDPath drawable_info_id_path_list = 4;
  total_size += 1UL * this->_internal_drawable_info_id_path_list_size();
  for (const auto& msg : this->drawable_info_id_path_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition position_list = 5;
  total_size += 1UL * this->_internal_position_list_size();
  for (const auto& msg : this->position_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSD.ExteriorTextWrapArchive exterior_text_wrap_list = 6;
  total_size += 1UL * this->_internal_exterior_text_wrap_list_size();
  for (const auto& msg : this->exterior_text_wrap_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 original_page_index_list = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->original_page_index_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_original_page_index_list_size());
    total_size += data_size;
  }

  // repeated .TSD.ExteriorTextWrapArchive original_exterior_text_wrap_list = 8;
  total_size += 1UL * this->_internal_original_exterior_text_wrap_list_size();
  for (const auto& msg : this->original_exterior_text_wrap_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference original_attachment_list = 9;
  total_size += 1UL * this->_internal_original_attachment_list_size();
  for (const auto& msg : this->original_attachment_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveDrawablesAttachedCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.MoveDrawablesAttachedCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveDrawablesAttachedCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveDrawablesAttachedCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.MoveDrawablesAttachedCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.MoveDrawablesAttachedCommandArchive)
    MergeFrom(*source);
  }
}

void MoveDrawablesAttachedCommandArchive::MergeFrom(const MoveDrawablesAttachedCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.MoveDrawablesAttachedCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
  range_list_.MergeFrom(from.range_list_);
  drawable_info_id_path_list_.MergeFrom(from.drawable_info_id_path_list_);
  position_list_.MergeFrom(from.position_list_);
  exterior_text_wrap_list_.MergeFrom(from.exterior_text_wrap_list_);
  original_page_index_list_.MergeFrom(from.original_page_index_list_);
  original_exterior_text_wrap_list_.MergeFrom(from.original_exterior_text_wrap_list_);
  original_attachment_list_.MergeFrom(from.original_attachment_list_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSWP::StorageActionCommandArchive::MergeFrom(from._internal_super());
  }
}

void MoveDrawablesAttachedCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.MoveDrawablesAttachedCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawablesAttachedCommandArchive::CopyFrom(const MoveDrawablesAttachedCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.MoveDrawablesAttachedCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawablesAttachedCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(range_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawable_info_id_path_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(original_attachment_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void MoveDrawablesAttachedCommandArchive::InternalSwap(MoveDrawablesAttachedCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_list_.InternalSwap(&other->args_list_);
  range_list_.InternalSwap(&other->range_list_);
  drawable_info_id_path_list_.InternalSwap(&other->drawable_info_id_path_list_);
  position_list_.InternalSwap(&other->position_list_);
  exterior_text_wrap_list_.InternalSwap(&other->exterior_text_wrap_list_);
  original_page_index_list_.InternalSwap(&other->original_page_index_list_);
  original_exterior_text_wrap_list_.InternalSwap(&other->original_exterior_text_wrap_list_);
  original_attachment_list_.InternalSwap(&other->original_attachment_list_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDrawablesAttachedCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[13]);
}

// ===================================================================

class MoveDrawablesFloatingCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveDrawablesFloatingCommandArchive>()._has_bits_);
  static const ::TSWP::StorageActionCommandArchive& super(const MoveDrawablesFloatingCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::StorageActionCommandArchive&
MoveDrawablesFloatingCommandArchive::_Internal::super(const MoveDrawablesFloatingCommandArchive* msg) {
  return *msg->super_;
}
void MoveDrawablesFloatingCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MoveDrawablesFloatingCommandArchive::clear_args_list() {
  args_list_.Clear();
}
void MoveDrawablesFloatingCommandArchive::clear_range_list() {
  range_list_.Clear();
}
void MoveDrawablesFloatingCommandArchive::clear_drawable_info_id_path_list() {
  drawable_info_id_path_list_.Clear();
}
void MoveDrawablesFloatingCommandArchive::clear_exterior_text_wrap_list() {
  exterior_text_wrap_list_.Clear();
}
void MoveDrawablesFloatingCommandArchive::clear_original_attachment_list() {
  original_attachment_list_.Clear();
}
void MoveDrawablesFloatingCommandArchive::clear_original_exterior_text_wrap_list() {
  original_exterior_text_wrap_list_.Clear();
}
MoveDrawablesFloatingCommandArchive::MoveDrawablesFloatingCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena),
  range_list_(arena),
  drawable_info_id_path_list_(arena),
  page_index_list_(arena),
  exterior_text_wrap_list_(arena),
  original_attachment_list_(arena),
  original_exterior_text_wrap_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.MoveDrawablesFloatingCommandArchive)
}
MoveDrawablesFloatingCommandArchive::MoveDrawablesFloatingCommandArchive(const MoveDrawablesFloatingCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_list_(from.args_list_),
      range_list_(from.range_list_),
      drawable_info_id_path_list_(from.drawable_info_id_path_list_),
      page_index_list_(from.page_index_list_),
      exterior_text_wrap_list_(from.exterior_text_wrap_list_),
      original_attachment_list_(from.original_attachment_list_),
      original_exterior_text_wrap_list_(from.original_exterior_text_wrap_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StorageActionCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.MoveDrawablesFloatingCommandArchive)
}

void MoveDrawablesFloatingCommandArchive::SharedCtor() {
super_ = nullptr;
}

MoveDrawablesFloatingCommandArchive::~MoveDrawablesFloatingCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.MoveDrawablesFloatingCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveDrawablesFloatingCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void MoveDrawablesFloatingCommandArchive::ArenaDtor(void* object) {
  MoveDrawablesFloatingCommandArchive* _this = reinterpret_cast< MoveDrawablesFloatingCommandArchive* >(object);
  (void)_this;
}
void MoveDrawablesFloatingCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveDrawablesFloatingCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveDrawablesFloatingCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.MoveDrawablesFloatingCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  range_list_.Clear();
  drawable_info_id_path_list_.Clear();
  page_index_list_.Clear();
  exterior_text_wrap_list_.Clear();
  original_attachment_list_.Clear();
  original_exterior_text_wrap_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveDrawablesFloatingCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.StorageActionCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.IdPlacementOperationArgs args_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Range range_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUIDPath drawable_info_id_path_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_info_id_path_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 page_index_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_page_index_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSD.ExteriorTextWrapArchive exterior_text_wrap_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exterior_text_wrap_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference original_attachment_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_original_attachment_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSD.ExteriorTextWrapArchive original_exterior_text_wrap_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_original_exterior_text_wrap_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveDrawablesFloatingCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.MoveDrawablesFloatingCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.StorageActionCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSK.IdPlacementOperationArgs args_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args_list(i), target, stream);
  }

  // repeated .TSP.Range range_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_range_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_range_list(i), target, stream);
  }

  // repeated .TSP.UUIDPath drawable_info_id_path_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawable_info_id_path_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_drawable_info_id_path_list(i), target, stream);
  }

  // repeated uint32 page_index_list = 5;
  for (int i = 0, n = this->_internal_page_index_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_page_index_list(i), target);
  }

  // repeated .TSD.ExteriorTextWrapArchive exterior_text_wrap_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exterior_text_wrap_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_exterior_text_wrap_list(i), target, stream);
  }

  // repeated .TSP.Reference original_attachment_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_original_attachment_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_original_attachment_list(i), target, stream);
  }

  // repeated .TSD.ExteriorTextWrapArchive original_exterior_text_wrap_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_original_exterior_text_wrap_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_original_exterior_text_wrap_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.MoveDrawablesFloatingCommandArchive)
  return target;
}

size_t MoveDrawablesFloatingCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.MoveDrawablesFloatingCommandArchive)
  size_t total_size = 0;

  // required .TSWP.StorageActionCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.IdPlacementOperationArgs args_list = 2;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Range range_list = 3;
  total_size += 1UL * this->_internal_range_list_size();
  for (const auto& msg : this->range_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUIDPath drawable_info_id_path_list = 4;
  total_size += 1UL * this->_internal_drawable_info_id_path_list_size();
  for (const auto& msg : this->drawable_info_id_path_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 page_index_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->page_index_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_page_index_list_size());
    total_size += data_size;
  }

  // repeated .TSD.ExteriorTextWrapArchive exterior_text_wrap_list = 6;
  total_size += 1UL * this->_internal_exterior_text_wrap_list_size();
  for (const auto& msg : this->exterior_text_wrap_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference original_attachment_list = 7;
  total_size += 1UL * this->_internal_original_attachment_list_size();
  for (const auto& msg : this->original_attachment_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSD.ExteriorTextWrapArchive original_exterior_text_wrap_list = 8;
  total_size += 1UL * this->_internal_original_exterior_text_wrap_list_size();
  for (const auto& msg : this->original_exterior_text_wrap_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveDrawablesFloatingCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.MoveDrawablesFloatingCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveDrawablesFloatingCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveDrawablesFloatingCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.MoveDrawablesFloatingCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.MoveDrawablesFloatingCommandArchive)
    MergeFrom(*source);
  }
}

void MoveDrawablesFloatingCommandArchive::MergeFrom(const MoveDrawablesFloatingCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.MoveDrawablesFloatingCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
  range_list_.MergeFrom(from.range_list_);
  drawable_info_id_path_list_.MergeFrom(from.drawable_info_id_path_list_);
  page_index_list_.MergeFrom(from.page_index_list_);
  exterior_text_wrap_list_.MergeFrom(from.exterior_text_wrap_list_);
  original_attachment_list_.MergeFrom(from.original_attachment_list_);
  original_exterior_text_wrap_list_.MergeFrom(from.original_exterior_text_wrap_list_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSWP::StorageActionCommandArchive::MergeFrom(from._internal_super());
  }
}

void MoveDrawablesFloatingCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.MoveDrawablesFloatingCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDrawablesFloatingCommandArchive::CopyFrom(const MoveDrawablesFloatingCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.MoveDrawablesFloatingCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDrawablesFloatingCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(range_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawable_info_id_path_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(original_attachment_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void MoveDrawablesFloatingCommandArchive::InternalSwap(MoveDrawablesFloatingCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_list_.InternalSwap(&other->args_list_);
  range_list_.InternalSwap(&other->range_list_);
  drawable_info_id_path_list_.InternalSwap(&other->drawable_info_id_path_list_);
  page_index_list_.InternalSwap(&other->page_index_list_);
  exterior_text_wrap_list_.InternalSwap(&other->exterior_text_wrap_list_);
  original_attachment_list_.InternalSwap(&other->original_attachment_list_);
  original_exterior_text_wrap_list_.InternalSwap(&other->original_exterior_text_wrap_list_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDrawablesFloatingCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[14]);
}

// ===================================================================

class ChangeFootnoteFormatCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeFootnoteFormatCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ChangeFootnoteFormatCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ChangeFootnoteFormatCommandArchive::_Internal::super(const ChangeFootnoteFormatCommandArchive* msg) {
  return *msg->super_;
}
void ChangeFootnoteFormatCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChangeFootnoteFormatCommandArchive::ChangeFootnoteFormatCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.ChangeFootnoteFormatCommandArchive)
}
ChangeFootnoteFormatCommandArchive::ChangeFootnoteFormatCommandArchive(const ChangeFootnoteFormatCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  format_ = from.format_;
  // @@protoc_insertion_point(copy_constructor:TP.ChangeFootnoteFormatCommandArchive)
}

void ChangeFootnoteFormatCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&super_)) + sizeof(format_));
}

ChangeFootnoteFormatCommandArchive::~ChangeFootnoteFormatCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.ChangeFootnoteFormatCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeFootnoteFormatCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ChangeFootnoteFormatCommandArchive::ArenaDtor(void* object) {
  ChangeFootnoteFormatCommandArchive* _this = reinterpret_cast< ChangeFootnoteFormatCommandArchive* >(object);
  (void)_this;
}
void ChangeFootnoteFormatCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeFootnoteFormatCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeFootnoteFormatCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ChangeFootnoteFormatCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  format_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeFootnoteFormatCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TP.ChangeFootnoteFormatCommandArchive.FootnoteFormat format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat_IsValid(val))) {
            _internal_set_format(static_cast<::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeFootnoteFormatCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ChangeFootnoteFormatCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TP.ChangeFootnoteFormatCommandArchive.FootnoteFormat format = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ChangeFootnoteFormatCommandArchive)
  return target;
}

size_t ChangeFootnoteFormatCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ChangeFootnoteFormatCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TP.ChangeFootnoteFormatCommandArchive.FootnoteFormat format = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeFootnoteFormatCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.ChangeFootnoteFormatCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeFootnoteFormatCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeFootnoteFormatCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.ChangeFootnoteFormatCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.ChangeFootnoteFormatCommandArchive)
    MergeFrom(*source);
  }
}

void ChangeFootnoteFormatCommandArchive::MergeFrom(const ChangeFootnoteFormatCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.ChangeFootnoteFormatCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeFootnoteFormatCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.ChangeFootnoteFormatCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFootnoteFormatCommandArchive::CopyFrom(const ChangeFootnoteFormatCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ChangeFootnoteFormatCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFootnoteFormatCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ChangeFootnoteFormatCommandArchive::InternalSwap(ChangeFootnoteFormatCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeFootnoteFormatCommandArchive, format_)
      + sizeof(ChangeFootnoteFormatCommandArchive::format_)
      - PROTOBUF_FIELD_OFFSET(ChangeFootnoteFormatCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeFootnoteFormatCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[15]);
}

// ===================================================================

class ChangeFootnoteKindCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeFootnoteKindCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ChangeFootnoteKindCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const ChangeFootnoteKindCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ChangeFootnoteKindCommandArchive::_Internal::super(const ChangeFootnoteKindCommandArchive* msg) {
  return *msg->super_;
}
const ::TSWP::UndoTransaction&
ChangeFootnoteKindCommandArchive::_Internal::undo_transaction(const ChangeFootnoteKindCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void ChangeFootnoteKindCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeFootnoteKindCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ChangeFootnoteKindCommandArchive::ChangeFootnoteKindCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.ChangeFootnoteKindCommandArchive)
}
ChangeFootnoteKindCommandArchive::ChangeFootnoteKindCommandArchive(const ChangeFootnoteKindCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:TP.ChangeFootnoteKindCommandArchive)
}

void ChangeFootnoteKindCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&super_)) + sizeof(kind_));
}

ChangeFootnoteKindCommandArchive::~ChangeFootnoteKindCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.ChangeFootnoteKindCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeFootnoteKindCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void ChangeFootnoteKindCommandArchive::ArenaDtor(void* object) {
  ChangeFootnoteKindCommandArchive* _this = reinterpret_cast< ChangeFootnoteKindCommandArchive* >(object);
  (void)_this;
}
void ChangeFootnoteKindCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeFootnoteKindCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeFootnoteKindCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ChangeFootnoteKindCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  kind_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeFootnoteKindCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TP.ChangeFootnoteKindCommandArchive.FootnoteKind kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::ChangeFootnoteKindCommandArchive_FootnoteKind_IsValid(val))) {
            _internal_set_kind(static_cast<::TP::ChangeFootnoteKindCommandArchive_FootnoteKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeFootnoteKindCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ChangeFootnoteKindCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TP.ChangeFootnoteKindCommandArchive.FootnoteKind kind = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kind(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ChangeFootnoteKindCommandArchive)
  return target;
}

size_t ChangeFootnoteKindCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ChangeFootnoteKindCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSWP.UndoTransaction undo_transaction = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional .TP.ChangeFootnoteKindCommandArchive.FootnoteKind kind = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeFootnoteKindCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.ChangeFootnoteKindCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeFootnoteKindCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeFootnoteKindCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.ChangeFootnoteKindCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.ChangeFootnoteKindCommandArchive)
    MergeFrom(*source);
  }
}

void ChangeFootnoteKindCommandArchive::MergeFrom(const ChangeFootnoteKindCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.ChangeFootnoteKindCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000004u) {
      kind_ = from.kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeFootnoteKindCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.ChangeFootnoteKindCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFootnoteKindCommandArchive::CopyFrom(const ChangeFootnoteKindCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ChangeFootnoteKindCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFootnoteKindCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void ChangeFootnoteKindCommandArchive::InternalSwap(ChangeFootnoteKindCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeFootnoteKindCommandArchive, kind_)
      + sizeof(ChangeFootnoteKindCommandArchive::kind_)
      - PROTOBUF_FIELD_OFFSET(ChangeFootnoteKindCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeFootnoteKindCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[16]);
}

// ===================================================================

class ChangeFootnoteNumberingCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeFootnoteNumberingCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ChangeFootnoteNumberingCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_numbering(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ChangeFootnoteNumberingCommandArchive::_Internal::super(const ChangeFootnoteNumberingCommandArchive* msg) {
  return *msg->super_;
}
void ChangeFootnoteNumberingCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChangeFootnoteNumberingCommandArchive::ChangeFootnoteNumberingCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.ChangeFootnoteNumberingCommandArchive)
}
ChangeFootnoteNumberingCommandArchive::ChangeFootnoteNumberingCommandArchive(const ChangeFootnoteNumberingCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  numbering_ = from.numbering_;
  // @@protoc_insertion_point(copy_constructor:TP.ChangeFootnoteNumberingCommandArchive)
}

void ChangeFootnoteNumberingCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&numbering_) -
    reinterpret_cast<char*>(&super_)) + sizeof(numbering_));
}

ChangeFootnoteNumberingCommandArchive::~ChangeFootnoteNumberingCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.ChangeFootnoteNumberingCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeFootnoteNumberingCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ChangeFootnoteNumberingCommandArchive::ArenaDtor(void* object) {
  ChangeFootnoteNumberingCommandArchive* _this = reinterpret_cast< ChangeFootnoteNumberingCommandArchive* >(object);
  (void)_this;
}
void ChangeFootnoteNumberingCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeFootnoteNumberingCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeFootnoteNumberingCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ChangeFootnoteNumberingCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  numbering_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeFootnoteNumberingCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TP.ChangeFootnoteNumberingCommandArchive.FootnoteNumbering numbering = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_IsValid(val))) {
            _internal_set_numbering(static_cast<::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeFootnoteNumberingCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ChangeFootnoteNumberingCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TP.ChangeFootnoteNumberingCommandArchive.FootnoteNumbering numbering = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_numbering(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ChangeFootnoteNumberingCommandArchive)
  return target;
}

size_t ChangeFootnoteNumberingCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ChangeFootnoteNumberingCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TP.ChangeFootnoteNumberingCommandArchive.FootnoteNumbering numbering = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_numbering());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeFootnoteNumberingCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.ChangeFootnoteNumberingCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeFootnoteNumberingCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeFootnoteNumberingCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.ChangeFootnoteNumberingCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.ChangeFootnoteNumberingCommandArchive)
    MergeFrom(*source);
  }
}

void ChangeFootnoteNumberingCommandArchive::MergeFrom(const ChangeFootnoteNumberingCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.ChangeFootnoteNumberingCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      numbering_ = from.numbering_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeFootnoteNumberingCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.ChangeFootnoteNumberingCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFootnoteNumberingCommandArchive::CopyFrom(const ChangeFootnoteNumberingCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ChangeFootnoteNumberingCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFootnoteNumberingCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ChangeFootnoteNumberingCommandArchive::InternalSwap(ChangeFootnoteNumberingCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeFootnoteNumberingCommandArchive, numbering_)
      + sizeof(ChangeFootnoteNumberingCommandArchive::numbering_)
      - PROTOBUF_FIELD_OFFSET(ChangeFootnoteNumberingCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeFootnoteNumberingCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[17]);
}

// ===================================================================

class ChangeFootnoteSpacingCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeFootnoteSpacingCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ChangeFootnoteSpacingCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_footnote_spacing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ChangeFootnoteSpacingCommandArchive::_Internal::super(const ChangeFootnoteSpacingCommandArchive* msg) {
  return *msg->super_;
}
void ChangeFootnoteSpacingCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChangeFootnoteSpacingCommandArchive::ChangeFootnoteSpacingCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.ChangeFootnoteSpacingCommandArchive)
}
ChangeFootnoteSpacingCommandArchive::ChangeFootnoteSpacingCommandArchive(const ChangeFootnoteSpacingCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  footnote_spacing_ = from.footnote_spacing_;
  // @@protoc_insertion_point(copy_constructor:TP.ChangeFootnoteSpacingCommandArchive)
}

void ChangeFootnoteSpacingCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&footnote_spacing_) -
    reinterpret_cast<char*>(&super_)) + sizeof(footnote_spacing_));
}

ChangeFootnoteSpacingCommandArchive::~ChangeFootnoteSpacingCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.ChangeFootnoteSpacingCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeFootnoteSpacingCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ChangeFootnoteSpacingCommandArchive::ArenaDtor(void* object) {
  ChangeFootnoteSpacingCommandArchive* _this = reinterpret_cast< ChangeFootnoteSpacingCommandArchive* >(object);
  (void)_this;
}
void ChangeFootnoteSpacingCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeFootnoteSpacingCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeFootnoteSpacingCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ChangeFootnoteSpacingCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  footnote_spacing_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeFootnoteSpacingCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 footnote_spacing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_footnote_spacing(&has_bits);
          footnote_spacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeFootnoteSpacingCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ChangeFootnoteSpacingCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional int32 footnote_spacing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_footnote_spacing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ChangeFootnoteSpacingCommandArchive)
  return target;
}

size_t ChangeFootnoteSpacingCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ChangeFootnoteSpacingCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 footnote_spacing = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_footnote_spacing());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeFootnoteSpacingCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.ChangeFootnoteSpacingCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeFootnoteSpacingCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeFootnoteSpacingCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.ChangeFootnoteSpacingCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.ChangeFootnoteSpacingCommandArchive)
    MergeFrom(*source);
  }
}

void ChangeFootnoteSpacingCommandArchive::MergeFrom(const ChangeFootnoteSpacingCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.ChangeFootnoteSpacingCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      footnote_spacing_ = from.footnote_spacing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeFootnoteSpacingCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.ChangeFootnoteSpacingCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFootnoteSpacingCommandArchive::CopyFrom(const ChangeFootnoteSpacingCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ChangeFootnoteSpacingCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFootnoteSpacingCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ChangeFootnoteSpacingCommandArchive::InternalSwap(ChangeFootnoteSpacingCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeFootnoteSpacingCommandArchive, footnote_spacing_)
      + sizeof(ChangeFootnoteSpacingCommandArchive::footnote_spacing_)
      - PROTOBUF_FIELD_OFFSET(ChangeFootnoteSpacingCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeFootnoteSpacingCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[18]);
}

// ===================================================================

class MoveInlineDrawableAnchoredCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveInlineDrawableAnchoredCommandArchive>()._has_bits_);
  static const ::TSWP::StorageActionCommandArchive& super(const MoveInlineDrawableAnchoredCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::IdPlacementOperationArgs& id_placement_operation_args(const MoveInlineDrawableAnchoredCommandArchive* msg);
  static void set_has_id_placement_operation_args(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_replacement_range_location(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_replacement_range_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUIDPath& drawable_info_id_path(const MoveInlineDrawableAnchoredCommandArchive* msg);
  static void set_has_drawable_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ExteriorTextWrapArchive& exterior_text_wrap(const MoveInlineDrawableAnchoredCommandArchive* msg);
  static void set_has_exterior_text_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::ExteriorTextWrapArchive& original_exterior_text_wrap(const MoveInlineDrawableAnchoredCommandArchive* msg);
  static void set_has_original_exterior_text_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::StorageActionCommandArchive&
MoveInlineDrawableAnchoredCommandArchive::_Internal::super(const MoveInlineDrawableAnchoredCommandArchive* msg) {
  return *msg->super_;
}
const ::TSK::IdPlacementOperationArgs&
MoveInlineDrawableAnchoredCommandArchive::_Internal::id_placement_operation_args(const MoveInlineDrawableAnchoredCommandArchive* msg) {
  return *msg->id_placement_operation_args_;
}
const ::TSP::UUIDPath&
MoveInlineDrawableAnchoredCommandArchive::_Internal::drawable_info_id_path(const MoveInlineDrawableAnchoredCommandArchive* msg) {
  return *msg->drawable_info_id_path_;
}
const ::TSD::ExteriorTextWrapArchive&
MoveInlineDrawableAnchoredCommandArchive::_Internal::exterior_text_wrap(const MoveInlineDrawableAnchoredCommandArchive* msg) {
  return *msg->exterior_text_wrap_;
}
const ::TSD::ExteriorTextWrapArchive&
MoveInlineDrawableAnchoredCommandArchive::_Internal::original_exterior_text_wrap(const MoveInlineDrawableAnchoredCommandArchive* msg) {
  return *msg->original_exterior_text_wrap_;
}
void MoveInlineDrawableAnchoredCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MoveInlineDrawableAnchoredCommandArchive::clear_id_placement_operation_args() {
  if (id_placement_operation_args_ != nullptr) id_placement_operation_args_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MoveInlineDrawableAnchoredCommandArchive::clear_drawable_info_id_path() {
  if (drawable_info_id_path_ != nullptr) drawable_info_id_path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void MoveInlineDrawableAnchoredCommandArchive::clear_exterior_text_wrap() {
  if (exterior_text_wrap_ != nullptr) exterior_text_wrap_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void MoveInlineDrawableAnchoredCommandArchive::clear_original_exterior_text_wrap() {
  if (original_exterior_text_wrap_ != nullptr) original_exterior_text_wrap_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
MoveInlineDrawableAnchoredCommandArchive::MoveInlineDrawableAnchoredCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.MoveInlineDrawableAnchoredCommandArchive)
}
MoveInlineDrawableAnchoredCommandArchive::MoveInlineDrawableAnchoredCommandArchive(const MoveInlineDrawableAnchoredCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StorageActionCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_id_placement_operation_args()) {
    id_placement_operation_args_ = new ::TSK::IdPlacementOperationArgs(*from.id_placement_operation_args_);
  } else {
    id_placement_operation_args_ = nullptr;
  }
  if (from._internal_has_drawable_info_id_path()) {
    drawable_info_id_path_ = new ::TSP::UUIDPath(*from.drawable_info_id_path_);
  } else {
    drawable_info_id_path_ = nullptr;
  }
  if (from._internal_has_exterior_text_wrap()) {
    exterior_text_wrap_ = new ::TSD::ExteriorTextWrapArchive(*from.exterior_text_wrap_);
  } else {
    exterior_text_wrap_ = nullptr;
  }
  if (from._internal_has_original_exterior_text_wrap()) {
    original_exterior_text_wrap_ = new ::TSD::ExteriorTextWrapArchive(*from.original_exterior_text_wrap_);
  } else {
    original_exterior_text_wrap_ = nullptr;
  }
  ::memcpy(&replacement_range_location_, &from.replacement_range_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&replacement_range_length_) -
    reinterpret_cast<char*>(&replacement_range_location_)) + sizeof(replacement_range_length_));
  // @@protoc_insertion_point(copy_constructor:TP.MoveInlineDrawableAnchoredCommandArchive)
}

void MoveInlineDrawableAnchoredCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replacement_range_length_) -
    reinterpret_cast<char*>(&super_)) + sizeof(replacement_range_length_));
}

MoveInlineDrawableAnchoredCommandArchive::~MoveInlineDrawableAnchoredCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.MoveInlineDrawableAnchoredCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveInlineDrawableAnchoredCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete id_placement_operation_args_;
  if (this != internal_default_instance()) delete drawable_info_id_path_;
  if (this != internal_default_instance()) delete exterior_text_wrap_;
  if (this != internal_default_instance()) delete original_exterior_text_wrap_;
}

void MoveInlineDrawableAnchoredCommandArchive::ArenaDtor(void* object) {
  MoveInlineDrawableAnchoredCommandArchive* _this = reinterpret_cast< MoveInlineDrawableAnchoredCommandArchive* >(object);
  (void)_this;
}
void MoveInlineDrawableAnchoredCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveInlineDrawableAnchoredCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveInlineDrawableAnchoredCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.MoveInlineDrawableAnchoredCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_placement_operation_args_ != nullptr);
      id_placement_operation_args_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(drawable_info_id_path_ != nullptr);
      drawable_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(exterior_text_wrap_ != nullptr);
      exterior_text_wrap_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(original_exterior_text_wrap_ != nullptr);
      original_exterior_text_wrap_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&replacement_range_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replacement_range_length_) -
        reinterpret_cast<char*>(&replacement_range_location_)) + sizeof(replacement_range_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveInlineDrawableAnchoredCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.StorageActionCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.IdPlacementOperationArgs id_placement_operation_args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_placement_operation_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 replacement_range_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_replacement_range_location(&has_bits);
          replacement_range_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 replacement_range_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_replacement_range_length(&has_bits);
          replacement_range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath drawable_info_id_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_info_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_exterior_text_wrap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ExteriorTextWrapArchive original_exterior_text_wrap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_exterior_text_wrap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveInlineDrawableAnchoredCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.MoveInlineDrawableAnchoredCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.StorageActionCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSK.IdPlacementOperationArgs id_placement_operation_args = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::id_placement_operation_args(this), target, stream);
  }

  // optional uint32 replacement_range_location = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_replacement_range_location(), target);
  }

  // optional uint32 replacement_range_length = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_replacement_range_length(), target);
  }

  // optional .TSP.UUIDPath drawable_info_id_path = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::drawable_info_id_path(this), target, stream);
  }

  // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::exterior_text_wrap(this), target, stream);
  }

  // optional .TSD.ExteriorTextWrapArchive original_exterior_text_wrap = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::original_exterior_text_wrap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.MoveInlineDrawableAnchoredCommandArchive)
  return target;
}

size_t MoveInlineDrawableAnchoredCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.MoveInlineDrawableAnchoredCommandArchive)
  size_t total_size = 0;

  // required .TSWP.StorageActionCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional .TSK.IdPlacementOperationArgs id_placement_operation_args = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_placement_operation_args_);
    }

    // optional .TSP.UUIDPath drawable_info_id_path = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_info_id_path_);
    }

    // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exterior_text_wrap_);
    }

    // optional .TSD.ExteriorTextWrapArchive original_exterior_text_wrap = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_exterior_text_wrap_);
    }

    // optional uint32 replacement_range_location = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_replacement_range_location());
    }

    // optional uint32 replacement_range_length = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_replacement_range_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveInlineDrawableAnchoredCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.MoveInlineDrawableAnchoredCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveInlineDrawableAnchoredCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveInlineDrawableAnchoredCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.MoveInlineDrawableAnchoredCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.MoveInlineDrawableAnchoredCommandArchive)
    MergeFrom(*source);
  }
}

void MoveInlineDrawableAnchoredCommandArchive::MergeFrom(const MoveInlineDrawableAnchoredCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.MoveInlineDrawableAnchoredCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::StorageActionCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_id_placement_operation_args()->::TSK::IdPlacementOperationArgs::MergeFrom(from._internal_id_placement_operation_args());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_drawable_info_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_drawable_info_id_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_exterior_text_wrap()->::TSD::ExteriorTextWrapArchive::MergeFrom(from._internal_exterior_text_wrap());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_original_exterior_text_wrap()->::TSD::ExteriorTextWrapArchive::MergeFrom(from._internal_original_exterior_text_wrap());
    }
    if (cached_has_bits & 0x00000020u) {
      replacement_range_location_ = from.replacement_range_location_;
    }
    if (cached_has_bits & 0x00000040u) {
      replacement_range_length_ = from.replacement_range_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveInlineDrawableAnchoredCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.MoveInlineDrawableAnchoredCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveInlineDrawableAnchoredCommandArchive::CopyFrom(const MoveInlineDrawableAnchoredCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.MoveInlineDrawableAnchoredCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveInlineDrawableAnchoredCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_id_placement_operation_args()) {
    if (!id_placement_operation_args_->IsInitialized()) return false;
  }
  if (_internal_has_drawable_info_id_path()) {
    if (!drawable_info_id_path_->IsInitialized()) return false;
  }
  return true;
}

void MoveInlineDrawableAnchoredCommandArchive::InternalSwap(MoveInlineDrawableAnchoredCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, replacement_range_length_)
      + sizeof(MoveInlineDrawableAnchoredCommandArchive::replacement_range_length_)
      - PROTOBUF_FIELD_OFFSET(MoveInlineDrawableAnchoredCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveInlineDrawableAnchoredCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[19]);
}

// ===================================================================

class MoveAnchoredDrawableInlineCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveAnchoredDrawableInlineCommandArchive>()._has_bits_);
  static const ::TSWP::StorageActionCommandArchive& super(const MoveAnchoredDrawableInlineCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::IdPlacementOperationArgs& id_placement_operation_args(const MoveAnchoredDrawableInlineCommandArchive* msg);
  static void set_has_id_placement_operation_args(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_replacement_range_location(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_replacement_range_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUIDPath& drawable_info_id_path(const MoveAnchoredDrawableInlineCommandArchive* msg);
  static void set_has_drawable_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ExteriorTextWrapArchive& exterior_text_wrap(const MoveAnchoredDrawableInlineCommandArchive* msg);
  static void set_has_exterior_text_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::ExteriorTextWrapArchive& original_exterior_text_wrap(const MoveAnchoredDrawableInlineCommandArchive* msg);
  static void set_has_original_exterior_text_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::StorageActionCommandArchive&
MoveAnchoredDrawableInlineCommandArchive::_Internal::super(const MoveAnchoredDrawableInlineCommandArchive* msg) {
  return *msg->super_;
}
const ::TSK::IdPlacementOperationArgs&
MoveAnchoredDrawableInlineCommandArchive::_Internal::id_placement_operation_args(const MoveAnchoredDrawableInlineCommandArchive* msg) {
  return *msg->id_placement_operation_args_;
}
const ::TSP::UUIDPath&
MoveAnchoredDrawableInlineCommandArchive::_Internal::drawable_info_id_path(const MoveAnchoredDrawableInlineCommandArchive* msg) {
  return *msg->drawable_info_id_path_;
}
const ::TSD::ExteriorTextWrapArchive&
MoveAnchoredDrawableInlineCommandArchive::_Internal::exterior_text_wrap(const MoveAnchoredDrawableInlineCommandArchive* msg) {
  return *msg->exterior_text_wrap_;
}
const ::TSD::ExteriorTextWrapArchive&
MoveAnchoredDrawableInlineCommandArchive::_Internal::original_exterior_text_wrap(const MoveAnchoredDrawableInlineCommandArchive* msg) {
  return *msg->original_exterior_text_wrap_;
}
void MoveAnchoredDrawableInlineCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MoveAnchoredDrawableInlineCommandArchive::clear_id_placement_operation_args() {
  if (id_placement_operation_args_ != nullptr) id_placement_operation_args_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MoveAnchoredDrawableInlineCommandArchive::clear_drawable_info_id_path() {
  if (drawable_info_id_path_ != nullptr) drawable_info_id_path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void MoveAnchoredDrawableInlineCommandArchive::clear_exterior_text_wrap() {
  if (exterior_text_wrap_ != nullptr) exterior_text_wrap_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void MoveAnchoredDrawableInlineCommandArchive::clear_original_exterior_text_wrap() {
  if (original_exterior_text_wrap_ != nullptr) original_exterior_text_wrap_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
MoveAnchoredDrawableInlineCommandArchive::MoveAnchoredDrawableInlineCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.MoveAnchoredDrawableInlineCommandArchive)
}
MoveAnchoredDrawableInlineCommandArchive::MoveAnchoredDrawableInlineCommandArchive(const MoveAnchoredDrawableInlineCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StorageActionCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_id_placement_operation_args()) {
    id_placement_operation_args_ = new ::TSK::IdPlacementOperationArgs(*from.id_placement_operation_args_);
  } else {
    id_placement_operation_args_ = nullptr;
  }
  if (from._internal_has_drawable_info_id_path()) {
    drawable_info_id_path_ = new ::TSP::UUIDPath(*from.drawable_info_id_path_);
  } else {
    drawable_info_id_path_ = nullptr;
  }
  if (from._internal_has_exterior_text_wrap()) {
    exterior_text_wrap_ = new ::TSD::ExteriorTextWrapArchive(*from.exterior_text_wrap_);
  } else {
    exterior_text_wrap_ = nullptr;
  }
  if (from._internal_has_original_exterior_text_wrap()) {
    original_exterior_text_wrap_ = new ::TSD::ExteriorTextWrapArchive(*from.original_exterior_text_wrap_);
  } else {
    original_exterior_text_wrap_ = nullptr;
  }
  ::memcpy(&replacement_range_location_, &from.replacement_range_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&replacement_range_length_) -
    reinterpret_cast<char*>(&replacement_range_location_)) + sizeof(replacement_range_length_));
  // @@protoc_insertion_point(copy_constructor:TP.MoveAnchoredDrawableInlineCommandArchive)
}

void MoveAnchoredDrawableInlineCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replacement_range_length_) -
    reinterpret_cast<char*>(&super_)) + sizeof(replacement_range_length_));
}

MoveAnchoredDrawableInlineCommandArchive::~MoveAnchoredDrawableInlineCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.MoveAnchoredDrawableInlineCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveAnchoredDrawableInlineCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete id_placement_operation_args_;
  if (this != internal_default_instance()) delete drawable_info_id_path_;
  if (this != internal_default_instance()) delete exterior_text_wrap_;
  if (this != internal_default_instance()) delete original_exterior_text_wrap_;
}

void MoveAnchoredDrawableInlineCommandArchive::ArenaDtor(void* object) {
  MoveAnchoredDrawableInlineCommandArchive* _this = reinterpret_cast< MoveAnchoredDrawableInlineCommandArchive* >(object);
  (void)_this;
}
void MoveAnchoredDrawableInlineCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveAnchoredDrawableInlineCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveAnchoredDrawableInlineCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.MoveAnchoredDrawableInlineCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_placement_operation_args_ != nullptr);
      id_placement_operation_args_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(drawable_info_id_path_ != nullptr);
      drawable_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(exterior_text_wrap_ != nullptr);
      exterior_text_wrap_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(original_exterior_text_wrap_ != nullptr);
      original_exterior_text_wrap_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&replacement_range_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replacement_range_length_) -
        reinterpret_cast<char*>(&replacement_range_location_)) + sizeof(replacement_range_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveAnchoredDrawableInlineCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.StorageActionCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.IdPlacementOperationArgs id_placement_operation_args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_placement_operation_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 replacement_range_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_replacement_range_location(&has_bits);
          replacement_range_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 replacement_range_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_replacement_range_length(&has_bits);
          replacement_range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath drawable_info_id_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_info_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_exterior_text_wrap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ExteriorTextWrapArchive original_exterior_text_wrap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_exterior_text_wrap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveAnchoredDrawableInlineCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.MoveAnchoredDrawableInlineCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.StorageActionCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSK.IdPlacementOperationArgs id_placement_operation_args = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::id_placement_operation_args(this), target, stream);
  }

  // optional uint32 replacement_range_location = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_replacement_range_location(), target);
  }

  // optional uint32 replacement_range_length = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_replacement_range_length(), target);
  }

  // optional .TSP.UUIDPath drawable_info_id_path = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::drawable_info_id_path(this), target, stream);
  }

  // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::exterior_text_wrap(this), target, stream);
  }

  // optional .TSD.ExteriorTextWrapArchive original_exterior_text_wrap = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::original_exterior_text_wrap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.MoveAnchoredDrawableInlineCommandArchive)
  return target;
}

size_t MoveAnchoredDrawableInlineCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.MoveAnchoredDrawableInlineCommandArchive)
  size_t total_size = 0;

  // required .TSWP.StorageActionCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional .TSK.IdPlacementOperationArgs id_placement_operation_args = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_placement_operation_args_);
    }

    // optional .TSP.UUIDPath drawable_info_id_path = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_info_id_path_);
    }

    // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exterior_text_wrap_);
    }

    // optional .TSD.ExteriorTextWrapArchive original_exterior_text_wrap = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_exterior_text_wrap_);
    }

    // optional uint32 replacement_range_location = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_replacement_range_location());
    }

    // optional uint32 replacement_range_length = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_replacement_range_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveAnchoredDrawableInlineCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.MoveAnchoredDrawableInlineCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveAnchoredDrawableInlineCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveAnchoredDrawableInlineCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.MoveAnchoredDrawableInlineCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.MoveAnchoredDrawableInlineCommandArchive)
    MergeFrom(*source);
  }
}

void MoveAnchoredDrawableInlineCommandArchive::MergeFrom(const MoveAnchoredDrawableInlineCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.MoveAnchoredDrawableInlineCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::StorageActionCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_id_placement_operation_args()->::TSK::IdPlacementOperationArgs::MergeFrom(from._internal_id_placement_operation_args());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_drawable_info_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_drawable_info_id_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_exterior_text_wrap()->::TSD::ExteriorTextWrapArchive::MergeFrom(from._internal_exterior_text_wrap());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_original_exterior_text_wrap()->::TSD::ExteriorTextWrapArchive::MergeFrom(from._internal_original_exterior_text_wrap());
    }
    if (cached_has_bits & 0x00000020u) {
      replacement_range_location_ = from.replacement_range_location_;
    }
    if (cached_has_bits & 0x00000040u) {
      replacement_range_length_ = from.replacement_range_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveAnchoredDrawableInlineCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.MoveAnchoredDrawableInlineCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveAnchoredDrawableInlineCommandArchive::CopyFrom(const MoveAnchoredDrawableInlineCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.MoveAnchoredDrawableInlineCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveAnchoredDrawableInlineCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_id_placement_operation_args()) {
    if (!id_placement_operation_args_->IsInitialized()) return false;
  }
  if (_internal_has_drawable_info_id_path()) {
    if (!drawable_info_id_path_->IsInitialized()) return false;
  }
  return true;
}

void MoveAnchoredDrawableInlineCommandArchive::InternalSwap(MoveAnchoredDrawableInlineCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, replacement_range_length_)
      + sizeof(MoveAnchoredDrawableInlineCommandArchive::replacement_range_length_)
      - PROTOBUF_FIELD_OFFSET(MoveAnchoredDrawableInlineCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveAnchoredDrawableInlineCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[20]);
}

// ===================================================================

class InsertFootnoteCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertFootnoteCommandArchive>()._has_bits_);
  static const ::TSWP::StorageActionCommandArchive& super(const InsertFootnoteCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::StorageActionCommandArchive&
InsertFootnoteCommandArchive::_Internal::super(const InsertFootnoteCommandArchive* msg) {
  return *msg->super_;
}
void InsertFootnoteCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
InsertFootnoteCommandArchive::InsertFootnoteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.InsertFootnoteCommandArchive)
}
InsertFootnoteCommandArchive::InsertFootnoteCommandArchive(const InsertFootnoteCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StorageActionCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.InsertFootnoteCommandArchive)
}

void InsertFootnoteCommandArchive::SharedCtor() {
super_ = nullptr;
}

InsertFootnoteCommandArchive::~InsertFootnoteCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.InsertFootnoteCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertFootnoteCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void InsertFootnoteCommandArchive::ArenaDtor(void* object) {
  InsertFootnoteCommandArchive* _this = reinterpret_cast< InsertFootnoteCommandArchive* >(object);
  (void)_this;
}
void InsertFootnoteCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertFootnoteCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertFootnoteCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.InsertFootnoteCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertFootnoteCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.StorageActionCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertFootnoteCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.InsertFootnoteCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.StorageActionCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.InsertFootnoteCommandArchive)
  return target;
}

size_t InsertFootnoteCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.InsertFootnoteCommandArchive)
  size_t total_size = 0;

  // required .TSWP.StorageActionCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertFootnoteCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.InsertFootnoteCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertFootnoteCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertFootnoteCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.InsertFootnoteCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.InsertFootnoteCommandArchive)
    MergeFrom(*source);
  }
}

void InsertFootnoteCommandArchive::MergeFrom(const InsertFootnoteCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.InsertFootnoteCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSWP::StorageActionCommandArchive::MergeFrom(from._internal_super());
  }
}

void InsertFootnoteCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.InsertFootnoteCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertFootnoteCommandArchive::CopyFrom(const InsertFootnoteCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.InsertFootnoteCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertFootnoteCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void InsertFootnoteCommandArchive::InternalSwap(InsertFootnoteCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertFootnoteCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[21]);
}

// ===================================================================

class ToggleBodyLayoutDirectionCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ToggleBodyLayoutDirectionCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ToggleBodyLayoutDirectionCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_direction_is_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ToggleBodyLayoutDirectionCommandArchive::_Internal::super(const ToggleBodyLayoutDirectionCommandArchive* msg) {
  return *msg->super_;
}
void ToggleBodyLayoutDirectionCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ToggleBodyLayoutDirectionCommandArchive::ToggleBodyLayoutDirectionCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.ToggleBodyLayoutDirectionCommandArchive)
}
ToggleBodyLayoutDirectionCommandArchive::ToggleBodyLayoutDirectionCommandArchive(const ToggleBodyLayoutDirectionCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  new_direction_is_vertical_ = from.new_direction_is_vertical_;
  // @@protoc_insertion_point(copy_constructor:TP.ToggleBodyLayoutDirectionCommandArchive)
}

void ToggleBodyLayoutDirectionCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_direction_is_vertical_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_direction_is_vertical_));
}

ToggleBodyLayoutDirectionCommandArchive::~ToggleBodyLayoutDirectionCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.ToggleBodyLayoutDirectionCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToggleBodyLayoutDirectionCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ToggleBodyLayoutDirectionCommandArchive::ArenaDtor(void* object) {
  ToggleBodyLayoutDirectionCommandArchive* _this = reinterpret_cast< ToggleBodyLayoutDirectionCommandArchive* >(object);
  (void)_this;
}
void ToggleBodyLayoutDirectionCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToggleBodyLayoutDirectionCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToggleBodyLayoutDirectionCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ToggleBodyLayoutDirectionCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  new_direction_is_vertical_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToggleBodyLayoutDirectionCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool new_direction_is_vertical = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_direction_is_vertical(&has_bits);
          new_direction_is_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToggleBodyLayoutDirectionCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ToggleBodyLayoutDirectionCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool new_direction_is_vertical = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_new_direction_is_vertical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ToggleBodyLayoutDirectionCommandArchive)
  return target;
}

size_t ToggleBodyLayoutDirectionCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ToggleBodyLayoutDirectionCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool new_direction_is_vertical = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToggleBodyLayoutDirectionCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.ToggleBodyLayoutDirectionCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ToggleBodyLayoutDirectionCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToggleBodyLayoutDirectionCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.ToggleBodyLayoutDirectionCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.ToggleBodyLayoutDirectionCommandArchive)
    MergeFrom(*source);
  }
}

void ToggleBodyLayoutDirectionCommandArchive::MergeFrom(const ToggleBodyLayoutDirectionCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.ToggleBodyLayoutDirectionCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      new_direction_is_vertical_ = from.new_direction_is_vertical_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToggleBodyLayoutDirectionCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.ToggleBodyLayoutDirectionCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToggleBodyLayoutDirectionCommandArchive::CopyFrom(const ToggleBodyLayoutDirectionCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ToggleBodyLayoutDirectionCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToggleBodyLayoutDirectionCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ToggleBodyLayoutDirectionCommandArchive::InternalSwap(ToggleBodyLayoutDirectionCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToggleBodyLayoutDirectionCommandArchive, new_direction_is_vertical_)
      + sizeof(ToggleBodyLayoutDirectionCommandArchive::new_direction_is_vertical_)
      - PROTOBUF_FIELD_OFFSET(ToggleBodyLayoutDirectionCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToggleBodyLayoutDirectionCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[22]);
}

// ===================================================================

class TrackChangesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackChangesCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const TrackChangesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& most_recent_change_session(const TrackChangesCommandArchive* msg);
  static void set_has_most_recent_change_session(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_track_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& old_most_recent_change_session(const TrackChangesCommandArchive* msg);
  static void set_has_old_most_recent_change_session(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
TrackChangesCommandArchive::_Internal::super(const TrackChangesCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
TrackChangesCommandArchive::_Internal::most_recent_change_session(const TrackChangesCommandArchive* msg) {
  return *msg->most_recent_change_session_;
}
const ::TSP::Reference&
TrackChangesCommandArchive::_Internal::old_most_recent_change_session(const TrackChangesCommandArchive* msg) {
  return *msg->old_most_recent_change_session_;
}
void TrackChangesCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TrackChangesCommandArchive::clear_change_session_history() {
  change_session_history_.Clear();
}
void TrackChangesCommandArchive::clear_most_recent_change_session() {
  if (most_recent_change_session_ != nullptr) most_recent_change_session_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TrackChangesCommandArchive::clear_old_change_session_history() {
  old_change_session_history_.Clear();
}
void TrackChangesCommandArchive::clear_old_most_recent_change_session() {
  if (old_most_recent_change_session_ != nullptr) old_most_recent_change_session_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TrackChangesCommandArchive::TrackChangesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  change_session_history_(arena),
  old_change_session_history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.TrackChangesCommandArchive)
}
TrackChangesCommandArchive::TrackChangesCommandArchive(const TrackChangesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      change_session_history_(from.change_session_history_),
      old_change_session_history_(from.old_change_session_history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_most_recent_change_session()) {
    most_recent_change_session_ = new ::TSP::Reference(*from.most_recent_change_session_);
  } else {
    most_recent_change_session_ = nullptr;
  }
  if (from._internal_has_old_most_recent_change_session()) {
    old_most_recent_change_session_ = new ::TSP::Reference(*from.old_most_recent_change_session_);
  } else {
    old_most_recent_change_session_ = nullptr;
  }
  ::memcpy(&track_changes_, &from.track_changes_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_track_changes_) -
    reinterpret_cast<char*>(&track_changes_)) + sizeof(old_track_changes_));
  // @@protoc_insertion_point(copy_constructor:TP.TrackChangesCommandArchive)
}

void TrackChangesCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_track_changes_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_track_changes_));
}

TrackChangesCommandArchive::~TrackChangesCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.TrackChangesCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackChangesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete most_recent_change_session_;
  if (this != internal_default_instance()) delete old_most_recent_change_session_;
}

void TrackChangesCommandArchive::ArenaDtor(void* object) {
  TrackChangesCommandArchive* _this = reinterpret_cast< TrackChangesCommandArchive* >(object);
  (void)_this;
}
void TrackChangesCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackChangesCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackChangesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.TrackChangesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  change_session_history_.Clear();
  old_change_session_history_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(most_recent_change_session_ != nullptr);
      most_recent_change_session_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_most_recent_change_session_ != nullptr);
      old_most_recent_change_session_->Clear();
    }
  }
  ::memset(&track_changes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_track_changes_) -
      reinterpret_cast<char*>(&track_changes_)) + sizeof(old_track_changes_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackChangesCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool track_changes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_track_changes(&has_bits);
          track_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference change_session_history = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_session_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool paused = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_paused(&has_bits);
          paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference most_recent_change_session = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_most_recent_change_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool old_track_changes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_old_track_changes(&has_bits);
          old_track_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference old_change_session_history = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_change_session_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_most_recent_change_session = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_most_recent_change_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackChangesCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.TrackChangesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool track_changes = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_track_changes(), target);
  }

  // repeated .TSP.Reference change_session_history = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_session_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_change_session_history(i), target, stream);
  }

  // optional bool paused = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_paused(), target);
  }

  // optional .TSP.Reference most_recent_change_session = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::most_recent_change_session(this), target, stream);
  }

  // optional bool old_track_changes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_old_track_changes(), target);
  }

  // repeated .TSP.Reference old_change_session_history = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_change_session_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_old_change_session_history(i), target, stream);
  }

  // optional .TSP.Reference old_most_recent_change_session = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::old_most_recent_change_session(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.TrackChangesCommandArchive)
  return target;
}

size_t TrackChangesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.TrackChangesCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference change_session_history = 3;
  total_size += 1UL * this->_internal_change_session_history_size();
  for (const auto& msg : this->change_session_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference old_change_session_history = 7;
  total_size += 1UL * this->_internal_old_change_session_history_size();
  for (const auto& msg : this->old_change_session_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSP.Reference most_recent_change_session = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *most_recent_change_session_);
    }

    // optional .TSP.Reference old_most_recent_change_session = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_most_recent_change_session_);
    }

    // optional bool track_changes = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool paused = 4 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool old_track_changes = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackChangesCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.TrackChangesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackChangesCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackChangesCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.TrackChangesCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.TrackChangesCommandArchive)
    MergeFrom(*source);
  }
}

void TrackChangesCommandArchive::MergeFrom(const TrackChangesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.TrackChangesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  change_session_history_.MergeFrom(from.change_session_history_);
  old_change_session_history_.MergeFrom(from.old_change_session_history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_most_recent_change_session()->::TSP::Reference::MergeFrom(from._internal_most_recent_change_session());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_most_recent_change_session()->::TSP::Reference::MergeFrom(from._internal_old_most_recent_change_session());
    }
    if (cached_has_bits & 0x00000008u) {
      track_changes_ = from.track_changes_;
    }
    if (cached_has_bits & 0x00000010u) {
      paused_ = from.paused_;
    }
    if (cached_has_bits & 0x00000020u) {
      old_track_changes_ = from.old_track_changes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackChangesCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.TrackChangesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackChangesCommandArchive::CopyFrom(const TrackChangesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.TrackChangesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackChangesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(change_session_history_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_change_session_history_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_most_recent_change_session()) {
    if (!most_recent_change_session_->IsInitialized()) return false;
  }
  if (_internal_has_old_most_recent_change_session()) {
    if (!old_most_recent_change_session_->IsInitialized()) return false;
  }
  return true;
}

void TrackChangesCommandArchive::InternalSwap(TrackChangesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  change_session_history_.InternalSwap(&other->change_session_history_);
  old_change_session_history_.InternalSwap(&other->old_change_session_history_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackChangesCommandArchive, old_track_changes_)
      + sizeof(TrackChangesCommandArchive::old_track_changes_)
      - PROTOBUF_FIELD_OFFSET(TrackChangesCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackChangesCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[23]);
}

// ===================================================================

class PauseChangeTrackingCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PauseChangeTrackingCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const PauseChangeTrackingCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
PauseChangeTrackingCommandArchive::_Internal::super(const PauseChangeTrackingCommandArchive* msg) {
  return *msg->super_;
}
void PauseChangeTrackingCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PauseChangeTrackingCommandArchive::PauseChangeTrackingCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.PauseChangeTrackingCommandArchive)
}
PauseChangeTrackingCommandArchive::PauseChangeTrackingCommandArchive(const PauseChangeTrackingCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  paused_ = from.paused_;
  // @@protoc_insertion_point(copy_constructor:TP.PauseChangeTrackingCommandArchive)
}

void PauseChangeTrackingCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&paused_) -
    reinterpret_cast<char*>(&super_)) + sizeof(paused_));
}

PauseChangeTrackingCommandArchive::~PauseChangeTrackingCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.PauseChangeTrackingCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PauseChangeTrackingCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void PauseChangeTrackingCommandArchive::ArenaDtor(void* object) {
  PauseChangeTrackingCommandArchive* _this = reinterpret_cast< PauseChangeTrackingCommandArchive* >(object);
  (void)_this;
}
void PauseChangeTrackingCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PauseChangeTrackingCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PauseChangeTrackingCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.PauseChangeTrackingCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  paused_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseChangeTrackingCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool paused = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_paused(&has_bits);
          paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PauseChangeTrackingCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.PauseChangeTrackingCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool paused = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_paused(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.PauseChangeTrackingCommandArchive)
  return target;
}

size_t PauseChangeTrackingCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.PauseChangeTrackingCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool paused = 2 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PauseChangeTrackingCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.PauseChangeTrackingCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PauseChangeTrackingCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PauseChangeTrackingCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.PauseChangeTrackingCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.PauseChangeTrackingCommandArchive)
    MergeFrom(*source);
  }
}

void PauseChangeTrackingCommandArchive::MergeFrom(const PauseChangeTrackingCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.PauseChangeTrackingCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      paused_ = from.paused_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PauseChangeTrackingCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.PauseChangeTrackingCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseChangeTrackingCommandArchive::CopyFrom(const PauseChangeTrackingCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.PauseChangeTrackingCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseChangeTrackingCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void PauseChangeTrackingCommandArchive::InternalSwap(PauseChangeTrackingCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PauseChangeTrackingCommandArchive, paused_)
      + sizeof(PauseChangeTrackingCommandArchive::paused_)
      - PROTOBUF_FIELD_OFFSET(PauseChangeTrackingCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseChangeTrackingCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[24]);
}

// ===================================================================

class SectionGuideCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionGuideCommandArchive>()._has_bits_);
  static const ::TSD::AbstractGuideCommandArchive& super(const SectionGuideCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& section_id_path(const SectionGuideCommandArchive* msg);
  static void set_has_section_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSD::AbstractGuideCommandArchive&
SectionGuideCommandArchive::_Internal::super(const SectionGuideCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
SectionGuideCommandArchive::_Internal::section_id_path(const SectionGuideCommandArchive* msg) {
  return *msg->section_id_path_;
}
void SectionGuideCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SectionGuideCommandArchive::clear_section_id_path() {
  if (section_id_path_ != nullptr) section_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SectionGuideCommandArchive::SectionGuideCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.SectionGuideCommandArchive)
}
SectionGuideCommandArchive::SectionGuideCommandArchive(const SectionGuideCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::AbstractGuideCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_section_id_path()) {
    section_id_path_ = new ::TSP::UUIDPath(*from.section_id_path_);
  } else {
    section_id_path_ = nullptr;
  }
  page_index_ = from.page_index_;
  // @@protoc_insertion_point(copy_constructor:TP.SectionGuideCommandArchive)
}

void SectionGuideCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(page_index_));
}

SectionGuideCommandArchive::~SectionGuideCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.SectionGuideCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SectionGuideCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete section_id_path_;
}

void SectionGuideCommandArchive::ArenaDtor(void* object) {
  SectionGuideCommandArchive* _this = reinterpret_cast< SectionGuideCommandArchive* >(object);
  (void)_this;
}
void SectionGuideCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SectionGuideCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SectionGuideCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SectionGuideCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(section_id_path_ != nullptr);
      section_id_path_->Clear();
    }
  }
  page_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionGuideCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.AbstractGuideCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath section_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_section_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 page_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_page_index(&has_bits);
          page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectionGuideCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SectionGuideCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.AbstractGuideCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath section_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::section_id_path(this), target, stream);
  }

  // required uint32 page_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SectionGuideCommandArchive)
  return target;
}

size_t SectionGuideCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.SectionGuideCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.AbstractGuideCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_section_id_path()) {
    // required .TSP.UUIDPath section_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *section_id_path_);
  }

  if (_internal_has_page_index()) {
    // required uint32 page_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_index());
  }

  return total_size;
}
size_t SectionGuideCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SectionGuideCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSD.AbstractGuideCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath section_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *section_id_path_);

    // required uint32 page_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectionGuideCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.SectionGuideCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SectionGuideCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectionGuideCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.SectionGuideCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.SectionGuideCommandArchive)
    MergeFrom(*source);
  }
}

void SectionGuideCommandArchive::MergeFrom(const SectionGuideCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.SectionGuideCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::AbstractGuideCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_section_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_section_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      page_index_ = from.page_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SectionGuideCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.SectionGuideCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionGuideCommandArchive::CopyFrom(const SectionGuideCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SectionGuideCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionGuideCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_section_id_path()) {
    if (!section_id_path_->IsInitialized()) return false;
  }
  return true;
}

void SectionGuideCommandArchive::InternalSwap(SectionGuideCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SectionGuideCommandArchive, page_index_)
      + sizeof(SectionGuideCommandArchive::page_index_)
      - PROTOBUF_FIELD_OFFSET(SectionGuideCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionGuideCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[25]);
}

// ===================================================================

class ReplaceHeaderFooterStorageCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplaceHeaderFooterStorageCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ReplaceHeaderFooterStorageCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& header_footer_storage_id_path(const ReplaceHeaderFooterStorageCommandArchive* msg);
  static void set_has_header_footer_storage_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& replacement_header_footer_storage(const ReplaceHeaderFooterStorageCommandArchive* msg);
  static void set_has_replacement_header_footer_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& replacement_header_footer_storage_undo_object(const ReplaceHeaderFooterStorageCommandArchive* msg);
  static void set_has_replacement_header_footer_storage_undo_object(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& old_header_footer_storage(const ReplaceHeaderFooterStorageCommandArchive* msg);
  static void set_has_old_header_footer_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ReplaceHeaderFooterStorageCommandArchive::_Internal::super(const ReplaceHeaderFooterStorageCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
ReplaceHeaderFooterStorageCommandArchive::_Internal::header_footer_storage_id_path(const ReplaceHeaderFooterStorageCommandArchive* msg) {
  return *msg->header_footer_storage_id_path_;
}
const ::TSP::Reference&
ReplaceHeaderFooterStorageCommandArchive::_Internal::replacement_header_footer_storage(const ReplaceHeaderFooterStorageCommandArchive* msg) {
  return *msg->replacement_header_footer_storage_;
}
const ::TSP::Reference&
ReplaceHeaderFooterStorageCommandArchive::_Internal::replacement_header_footer_storage_undo_object(const ReplaceHeaderFooterStorageCommandArchive* msg) {
  return *msg->replacement_header_footer_storage_undo_object_;
}
const ::TSP::Reference&
ReplaceHeaderFooterStorageCommandArchive::_Internal::old_header_footer_storage(const ReplaceHeaderFooterStorageCommandArchive* msg) {
  return *msg->old_header_footer_storage_;
}
void ReplaceHeaderFooterStorageCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ReplaceHeaderFooterStorageCommandArchive::clear_header_footer_storage_id_path() {
  if (header_footer_storage_id_path_ != nullptr) header_footer_storage_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ReplaceHeaderFooterStorageCommandArchive::clear_replacement_header_footer_storage() {
  if (replacement_header_footer_storage_ != nullptr) replacement_header_footer_storage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ReplaceHeaderFooterStorageCommandArchive::clear_replacement_header_footer_storage_undo_object() {
  if (replacement_header_footer_storage_undo_object_ != nullptr) replacement_header_footer_storage_undo_object_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ReplaceHeaderFooterStorageCommandArchive::clear_old_header_footer_storage() {
  if (old_header_footer_storage_ != nullptr) old_header_footer_storage_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ReplaceHeaderFooterStorageCommandArchive::ReplaceHeaderFooterStorageCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.ReplaceHeaderFooterStorageCommandArchive)
}
ReplaceHeaderFooterStorageCommandArchive::ReplaceHeaderFooterStorageCommandArchive(const ReplaceHeaderFooterStorageCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_header_footer_storage_id_path()) {
    header_footer_storage_id_path_ = new ::TSP::UUIDPath(*from.header_footer_storage_id_path_);
  } else {
    header_footer_storage_id_path_ = nullptr;
  }
  if (from._internal_has_replacement_header_footer_storage()) {
    replacement_header_footer_storage_ = new ::TSP::Reference(*from.replacement_header_footer_storage_);
  } else {
    replacement_header_footer_storage_ = nullptr;
  }
  if (from._internal_has_replacement_header_footer_storage_undo_object()) {
    replacement_header_footer_storage_undo_object_ = new ::TSP::Reference(*from.replacement_header_footer_storage_undo_object_);
  } else {
    replacement_header_footer_storage_undo_object_ = nullptr;
  }
  if (from._internal_has_old_header_footer_storage()) {
    old_header_footer_storage_ = new ::TSP::Reference(*from.old_header_footer_storage_);
  } else {
    old_header_footer_storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.ReplaceHeaderFooterStorageCommandArchive)
}

void ReplaceHeaderFooterStorageCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_header_footer_storage_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_header_footer_storage_));
}

ReplaceHeaderFooterStorageCommandArchive::~ReplaceHeaderFooterStorageCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.ReplaceHeaderFooterStorageCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplaceHeaderFooterStorageCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete header_footer_storage_id_path_;
  if (this != internal_default_instance()) delete replacement_header_footer_storage_;
  if (this != internal_default_instance()) delete replacement_header_footer_storage_undo_object_;
  if (this != internal_default_instance()) delete old_header_footer_storage_;
}

void ReplaceHeaderFooterStorageCommandArchive::ArenaDtor(void* object) {
  ReplaceHeaderFooterStorageCommandArchive* _this = reinterpret_cast< ReplaceHeaderFooterStorageCommandArchive* >(object);
  (void)_this;
}
void ReplaceHeaderFooterStorageCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplaceHeaderFooterStorageCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplaceHeaderFooterStorageCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ReplaceHeaderFooterStorageCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_footer_storage_id_path_ != nullptr);
      header_footer_storage_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(replacement_header_footer_storage_ != nullptr);
      replacement_header_footer_storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(replacement_header_footer_storage_undo_object_ != nullptr);
      replacement_header_footer_storage_undo_object_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(old_header_footer_storage_ != nullptr);
      old_header_footer_storage_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplaceHeaderFooterStorageCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath header_footer_storage_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_footer_storage_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference replacement_header_footer_storage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacement_header_footer_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference replacement_header_footer_storage_undo_object = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacement_header_footer_storage_undo_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_header_footer_storage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_header_footer_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplaceHeaderFooterStorageCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ReplaceHeaderFooterStorageCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath header_footer_storage_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header_footer_storage_id_path(this), target, stream);
  }

  // optional .TSP.Reference replacement_header_footer_storage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::replacement_header_footer_storage(this), target, stream);
  }

  // optional .TSP.Reference replacement_header_footer_storage_undo_object = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::replacement_header_footer_storage_undo_object(this), target, stream);
  }

  // optional .TSP.Reference old_header_footer_storage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::old_header_footer_storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ReplaceHeaderFooterStorageCommandArchive)
  return target;
}

size_t ReplaceHeaderFooterStorageCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ReplaceHeaderFooterStorageCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.UUIDPath header_footer_storage_id_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_footer_storage_id_path_);
    }

    // optional .TSP.Reference replacement_header_footer_storage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *replacement_header_footer_storage_);
    }

    // optional .TSP.Reference replacement_header_footer_storage_undo_object = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *replacement_header_footer_storage_undo_object_);
    }

    // optional .TSP.Reference old_header_footer_storage = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_header_footer_storage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplaceHeaderFooterStorageCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.ReplaceHeaderFooterStorageCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceHeaderFooterStorageCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplaceHeaderFooterStorageCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.ReplaceHeaderFooterStorageCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.ReplaceHeaderFooterStorageCommandArchive)
    MergeFrom(*source);
  }
}

void ReplaceHeaderFooterStorageCommandArchive::MergeFrom(const ReplaceHeaderFooterStorageCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.ReplaceHeaderFooterStorageCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header_footer_storage_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_header_footer_storage_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_replacement_header_footer_storage()->::TSP::Reference::MergeFrom(from._internal_replacement_header_footer_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_replacement_header_footer_storage_undo_object()->::TSP::Reference::MergeFrom(from._internal_replacement_header_footer_storage_undo_object());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_old_header_footer_storage()->::TSP::Reference::MergeFrom(from._internal_old_header_footer_storage());
    }
  }
}

void ReplaceHeaderFooterStorageCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.ReplaceHeaderFooterStorageCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceHeaderFooterStorageCommandArchive::CopyFrom(const ReplaceHeaderFooterStorageCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ReplaceHeaderFooterStorageCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceHeaderFooterStorageCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_header_footer_storage_id_path()) {
    if (!header_footer_storage_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_replacement_header_footer_storage()) {
    if (!replacement_header_footer_storage_->IsInitialized()) return false;
  }
  if (_internal_has_replacement_header_footer_storage_undo_object()) {
    if (!replacement_header_footer_storage_undo_object_->IsInitialized()) return false;
  }
  if (_internal_has_old_header_footer_storage()) {
    if (!old_header_footer_storage_->IsInitialized()) return false;
  }
  return true;
}

void ReplaceHeaderFooterStorageCommandArchive::InternalSwap(ReplaceHeaderFooterStorageCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplaceHeaderFooterStorageCommandArchive, old_header_footer_storage_)
      + sizeof(ReplaceHeaderFooterStorageCommandArchive::old_header_footer_storage_)
      - PROTOBUF_FIELD_OFFSET(ReplaceHeaderFooterStorageCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplaceHeaderFooterStorageCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[26]);
}

// ===================================================================

class PrototypeForUndoChangePageTemplateForSection::_Internal {
 public:
  using HasBits = decltype(std::declval<PrototypeForUndoChangePageTemplateForSection>()._has_bits_);
  static const ::TSP::UUIDPath& id_path_for_template_in_document(const PrototypeForUndoChangePageTemplateForSection* msg);
  static void set_has_id_path_for_template_in_document(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& internal_page_template(const PrototypeForUndoChangePageTemplateForSection* msg);
  static void set_has_internal_page_template(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::UUIDPath&
PrototypeForUndoChangePageTemplateForSection::_Internal::id_path_for_template_in_document(const PrototypeForUndoChangePageTemplateForSection* msg) {
  return *msg->id_path_for_template_in_document_;
}
const ::TSP::Reference&
PrototypeForUndoChangePageTemplateForSection::_Internal::internal_page_template(const PrototypeForUndoChangePageTemplateForSection* msg) {
  return *msg->internal_page_template_;
}
void PrototypeForUndoChangePageTemplateForSection::clear_id_path_for_template_in_document() {
  if (id_path_for_template_in_document_ != nullptr) id_path_for_template_in_document_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PrototypeForUndoChangePageTemplateForSection::clear_internal_page_template() {
  if (internal_page_template_ != nullptr) internal_page_template_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PrototypeForUndoChangePageTemplateForSection::PrototypeForUndoChangePageTemplateForSection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.PrototypeForUndoChangePageTemplateForSection)
}
PrototypeForUndoChangePageTemplateForSection::PrototypeForUndoChangePageTemplateForSection(const PrototypeForUndoChangePageTemplateForSection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id_path_for_template_in_document()) {
    id_path_for_template_in_document_ = new ::TSP::UUIDPath(*from.id_path_for_template_in_document_);
  } else {
    id_path_for_template_in_document_ = nullptr;
  }
  if (from._internal_has_internal_page_template()) {
    internal_page_template_ = new ::TSP::Reference(*from.internal_page_template_);
  } else {
    internal_page_template_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.PrototypeForUndoChangePageTemplateForSection)
}

void PrototypeForUndoChangePageTemplateForSection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_path_for_template_in_document_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&internal_page_template_) -
    reinterpret_cast<char*>(&id_path_for_template_in_document_)) + sizeof(internal_page_template_));
}

PrototypeForUndoChangePageTemplateForSection::~PrototypeForUndoChangePageTemplateForSection() {
  // @@protoc_insertion_point(destructor:TP.PrototypeForUndoChangePageTemplateForSection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrototypeForUndoChangePageTemplateForSection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_path_for_template_in_document_;
  if (this != internal_default_instance()) delete internal_page_template_;
}

void PrototypeForUndoChangePageTemplateForSection::ArenaDtor(void* object) {
  PrototypeForUndoChangePageTemplateForSection* _this = reinterpret_cast< PrototypeForUndoChangePageTemplateForSection* >(object);
  (void)_this;
}
void PrototypeForUndoChangePageTemplateForSection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrototypeForUndoChangePageTemplateForSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrototypeForUndoChangePageTemplateForSection::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.PrototypeForUndoChangePageTemplateForSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_path_for_template_in_document_ != nullptr);
      id_path_for_template_in_document_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(internal_page_template_ != nullptr);
      internal_page_template_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrototypeForUndoChangePageTemplateForSection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUIDPath id_path_for_template_in_document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_path_for_template_in_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference internal_page_template = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_page_template(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrototypeForUndoChangePageTemplateForSection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.PrototypeForUndoChangePageTemplateForSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUIDPath id_path_for_template_in_document = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id_path_for_template_in_document(this), target, stream);
  }

  // required .TSP.Reference internal_page_template = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::internal_page_template(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.PrototypeForUndoChangePageTemplateForSection)
  return target;
}

size_t PrototypeForUndoChangePageTemplateForSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.PrototypeForUndoChangePageTemplateForSection)
  size_t total_size = 0;

  // required .TSP.Reference internal_page_template = 2;
  if (_internal_has_internal_page_template()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *internal_page_template_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDPath id_path_for_template_in_document = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_path_for_template_in_document_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrototypeForUndoChangePageTemplateForSection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.PrototypeForUndoChangePageTemplateForSection)
  GOOGLE_DCHECK_NE(&from, this);
  const PrototypeForUndoChangePageTemplateForSection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrototypeForUndoChangePageTemplateForSection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.PrototypeForUndoChangePageTemplateForSection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.PrototypeForUndoChangePageTemplateForSection)
    MergeFrom(*source);
  }
}

void PrototypeForUndoChangePageTemplateForSection::MergeFrom(const PrototypeForUndoChangePageTemplateForSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.PrototypeForUndoChangePageTemplateForSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id_path_for_template_in_document()->::TSP::UUIDPath::MergeFrom(from._internal_id_path_for_template_in_document());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_internal_page_template()->::TSP::Reference::MergeFrom(from._internal_internal_page_template());
    }
  }
}

void PrototypeForUndoChangePageTemplateForSection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.PrototypeForUndoChangePageTemplateForSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrototypeForUndoChangePageTemplateForSection::CopyFrom(const PrototypeForUndoChangePageTemplateForSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.PrototypeForUndoChangePageTemplateForSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrototypeForUndoChangePageTemplateForSection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_id_path_for_template_in_document()) {
    if (!id_path_for_template_in_document_->IsInitialized()) return false;
  }
  if (_internal_has_internal_page_template()) {
    if (!internal_page_template_->IsInitialized()) return false;
  }
  return true;
}

void PrototypeForUndoChangePageTemplateForSection::InternalSwap(PrototypeForUndoChangePageTemplateForSection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrototypeForUndoChangePageTemplateForSection, internal_page_template_)
      + sizeof(PrototypeForUndoChangePageTemplateForSection::internal_page_template_)
      - PROTOBUF_FIELD_OFFSET(PrototypeForUndoChangePageTemplateForSection, id_path_for_template_in_document_)>(
          reinterpret_cast<char*>(&id_path_for_template_in_document_),
          reinterpret_cast<char*>(&other->id_path_for_template_in_document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrototypeForUndoChangePageTemplateForSection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[27]);
}

// ===================================================================

class ChangePageTemplateForSectionCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangePageTemplateForSectionCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ChangePageTemplateForSectionCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& section_id_path(const ChangePageTemplateForSectionCommandArchive* msg);
  static void set_has_section_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& page_template(const ChangePageTemplateForSectionCommandArchive* msg);
  static void set_has_page_template(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_page_template(const ChangePageTemplateForSectionCommandArchive* msg);
  static void set_has_old_page_template(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_undo_redo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& target_prototype(const ChangePageTemplateForSectionCommandArchive* msg);
  static void set_has_target_prototype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000027) ^ 0x00000027) != 0;
  }
};

const ::TSK::CommandArchive&
ChangePageTemplateForSectionCommandArchive::_Internal::super(const ChangePageTemplateForSectionCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
ChangePageTemplateForSectionCommandArchive::_Internal::section_id_path(const ChangePageTemplateForSectionCommandArchive* msg) {
  return *msg->section_id_path_;
}
const ::TSP::Reference&
ChangePageTemplateForSectionCommandArchive::_Internal::page_template(const ChangePageTemplateForSectionCommandArchive* msg) {
  return *msg->page_template_;
}
const ::TSP::Reference&
ChangePageTemplateForSectionCommandArchive::_Internal::old_page_template(const ChangePageTemplateForSectionCommandArchive* msg) {
  return *msg->old_page_template_;
}
const ::TSP::Reference&
ChangePageTemplateForSectionCommandArchive::_Internal::target_prototype(const ChangePageTemplateForSectionCommandArchive* msg) {
  return *msg->target_prototype_;
}
void ChangePageTemplateForSectionCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChangePageTemplateForSectionCommandArchive::clear_section_id_path() {
  if (section_id_path_ != nullptr) section_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChangePageTemplateForSectionCommandArchive::clear_page_template() {
  if (page_template_ != nullptr) page_template_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChangePageTemplateForSectionCommandArchive::clear_old_page_template() {
  if (old_page_template_ != nullptr) old_page_template_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChangePageTemplateForSectionCommandArchive::clear_target_prototype() {
  if (target_prototype_ != nullptr) target_prototype_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ChangePageTemplateForSectionCommandArchive::ChangePageTemplateForSectionCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.ChangePageTemplateForSectionCommandArchive)
}
ChangePageTemplateForSectionCommandArchive::ChangePageTemplateForSectionCommandArchive(const ChangePageTemplateForSectionCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_section_id_path()) {
    section_id_path_ = new ::TSP::UUIDPath(*from.section_id_path_);
  } else {
    section_id_path_ = nullptr;
  }
  if (from._internal_has_page_template()) {
    page_template_ = new ::TSP::Reference(*from.page_template_);
  } else {
    page_template_ = nullptr;
  }
  if (from._internal_has_old_page_template()) {
    old_page_template_ = new ::TSP::Reference(*from.old_page_template_);
  } else {
    old_page_template_ = nullptr;
  }
  if (from._internal_has_target_prototype()) {
    target_prototype_ = new ::TSP::Reference(*from.target_prototype_);
  } else {
    target_prototype_ = nullptr;
  }
  is_undo_redo_ = from.is_undo_redo_;
  // @@protoc_insertion_point(copy_constructor:TP.ChangePageTemplateForSectionCommandArchive)
}

void ChangePageTemplateForSectionCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_undo_redo_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_undo_redo_));
}

ChangePageTemplateForSectionCommandArchive::~ChangePageTemplateForSectionCommandArchive() {
  // @@protoc_insertion_point(destructor:TP.ChangePageTemplateForSectionCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangePageTemplateForSectionCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete section_id_path_;
  if (this != internal_default_instance()) delete page_template_;
  if (this != internal_default_instance()) delete old_page_template_;
  if (this != internal_default_instance()) delete target_prototype_;
}

void ChangePageTemplateForSectionCommandArchive::ArenaDtor(void* object) {
  ChangePageTemplateForSectionCommandArchive* _this = reinterpret_cast< ChangePageTemplateForSectionCommandArchive* >(object);
  (void)_this;
}
void ChangePageTemplateForSectionCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangePageTemplateForSectionCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangePageTemplateForSectionCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ChangePageTemplateForSectionCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(section_id_path_ != nullptr);
      section_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(page_template_ != nullptr);
      page_template_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_page_template_ != nullptr);
      old_page_template_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(target_prototype_ != nullptr);
      target_prototype_->Clear();
    }
  }
  is_undo_redo_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangePageTemplateForSectionCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath section_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_section_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference page_template = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_template(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_page_template = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_page_template(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_undo_redo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_undo_redo(&has_bits);
          is_undo_redo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference target_prototype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_prototype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangePageTemplateForSectionCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ChangePageTemplateForSectionCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath section_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::section_id_path(this), target, stream);
  }

  // required .TSP.Reference page_template = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::page_template(this), target, stream);
  }

  // optional .TSP.Reference old_page_template = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_page_template(this), target, stream);
  }

  // required bool is_undo_redo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_undo_redo(), target);
  }

  // optional .TSP.Reference target_prototype = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::target_prototype(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ChangePageTemplateForSectionCommandArchive)
  return target;
}

size_t ChangePageTemplateForSectionCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.ChangePageTemplateForSectionCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_section_id_path()) {
    // required .TSP.UUIDPath section_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *section_id_path_);
  }

  if (_internal_has_page_template()) {
    // required .TSP.Reference page_template = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *page_template_);
  }

  if (_internal_has_is_undo_redo()) {
    // required bool is_undo_redo = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ChangePageTemplateForSectionCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ChangePageTemplateForSectionCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000027) ^ 0x00000027) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath section_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *section_id_path_);

    // required .TSP.Reference page_template = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *page_template_);

    // required bool is_undo_redo = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional .TSP.Reference old_page_template = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_page_template_);
    }

    // optional .TSP.Reference target_prototype = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_prototype_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePageTemplateForSectionCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.ChangePageTemplateForSectionCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePageTemplateForSectionCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangePageTemplateForSectionCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.ChangePageTemplateForSectionCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.ChangePageTemplateForSectionCommandArchive)
    MergeFrom(*source);
  }
}

void ChangePageTemplateForSectionCommandArchive::MergeFrom(const ChangePageTemplateForSectionCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.ChangePageTemplateForSectionCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_section_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_section_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_page_template()->::TSP::Reference::MergeFrom(from._internal_page_template());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_page_template()->::TSP::Reference::MergeFrom(from._internal_old_page_template());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_target_prototype()->::TSP::Reference::MergeFrom(from._internal_target_prototype());
    }
    if (cached_has_bits & 0x00000020u) {
      is_undo_redo_ = from.is_undo_redo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangePageTemplateForSectionCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.ChangePageTemplateForSectionCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePageTemplateForSectionCommandArchive::CopyFrom(const ChangePageTemplateForSectionCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ChangePageTemplateForSectionCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePageTemplateForSectionCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_section_id_path()) {
    if (!section_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_page_template()) {
    if (!page_template_->IsInitialized()) return false;
  }
  if (_internal_has_old_page_template()) {
    if (!old_page_template_->IsInitialized()) return false;
  }
  if (_internal_has_target_prototype()) {
    if (!target_prototype_->IsInitialized()) return false;
  }
  return true;
}

void ChangePageTemplateForSectionCommandArchive::InternalSwap(ChangePageTemplateForSectionCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangePageTemplateForSectionCommandArchive, is_undo_redo_)
      + sizeof(ChangePageTemplateForSectionCommandArchive::is_undo_redo_)
      - PROTOBUF_FIELD_OFFSET(ChangePageTemplateForSectionCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePageTemplateForSectionCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[28]);
}

// ===================================================================

class AllFootnoteSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AllFootnoteSelectionTransformerArchive>()._has_bits_);
  static const ::TSP::Reference& all_footnote_selection(const AllFootnoteSelectionTransformerArchive* msg);
  static void set_has_all_footnote_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
AllFootnoteSelectionTransformerArchive::_Internal::all_footnote_selection(const AllFootnoteSelectionTransformerArchive* msg) {
  return *msg->all_footnote_selection_;
}
void AllFootnoteSelectionTransformerArchive::clear_all_footnote_selection() {
  if (all_footnote_selection_ != nullptr) all_footnote_selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AllFootnoteSelectionTransformerArchive::AllFootnoteSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.AllFootnoteSelectionTransformerArchive)
}
AllFootnoteSelectionTransformerArchive::AllFootnoteSelectionTransformerArchive(const AllFootnoteSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_all_footnote_selection()) {
    all_footnote_selection_ = new ::TSP::Reference(*from.all_footnote_selection_);
  } else {
    all_footnote_selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.AllFootnoteSelectionTransformerArchive)
}

void AllFootnoteSelectionTransformerArchive::SharedCtor() {
all_footnote_selection_ = nullptr;
}

AllFootnoteSelectionTransformerArchive::~AllFootnoteSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TP.AllFootnoteSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllFootnoteSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete all_footnote_selection_;
}

void AllFootnoteSelectionTransformerArchive::ArenaDtor(void* object) {
  AllFootnoteSelectionTransformerArchive* _this = reinterpret_cast< AllFootnoteSelectionTransformerArchive* >(object);
  (void)_this;
}
void AllFootnoteSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllFootnoteSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllFootnoteSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.AllFootnoteSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(all_footnote_selection_ != nullptr);
    all_footnote_selection_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllFootnoteSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference all_footnote_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_footnote_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllFootnoteSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.AllFootnoteSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference all_footnote_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::all_footnote_selection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.AllFootnoteSelectionTransformerArchive)
  return target;
}

size_t AllFootnoteSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.AllFootnoteSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSP.Reference all_footnote_selection = 1;
  if (_internal_has_all_footnote_selection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *all_footnote_selection_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllFootnoteSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.AllFootnoteSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const AllFootnoteSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllFootnoteSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.AllFootnoteSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.AllFootnoteSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void AllFootnoteSelectionTransformerArchive::MergeFrom(const AllFootnoteSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.AllFootnoteSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_all_footnote_selection()) {
    _internal_mutable_all_footnote_selection()->::TSP::Reference::MergeFrom(from._internal_all_footnote_selection());
  }
}

void AllFootnoteSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.AllFootnoteSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllFootnoteSelectionTransformerArchive::CopyFrom(const AllFootnoteSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.AllFootnoteSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllFootnoteSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_all_footnote_selection()) {
    if (!all_footnote_selection_->IsInitialized()) return false;
  }
  return true;
}

void AllFootnoteSelectionTransformerArchive::InternalSwap(AllFootnoteSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(all_footnote_selection_, other->all_footnote_selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllFootnoteSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[29]);
}

// ===================================================================

class DocumentSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentSelectionTransformerArchive>()._has_bits_);
  static const ::TSP::Reference& document_selection(const DocumentSelectionTransformerArchive* msg);
  static void set_has_document_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& storage_uuid_path(const DocumentSelectionTransformerArchive* msg);
  static void set_has_storage_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
DocumentSelectionTransformerArchive::_Internal::document_selection(const DocumentSelectionTransformerArchive* msg) {
  return *msg->document_selection_;
}
const ::TSP::UUIDPath&
DocumentSelectionTransformerArchive::_Internal::storage_uuid_path(const DocumentSelectionTransformerArchive* msg) {
  return *msg->storage_uuid_path_;
}
void DocumentSelectionTransformerArchive::clear_document_selection() {
  if (document_selection_ != nullptr) document_selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentSelectionTransformerArchive::clear_storage_uuid_path() {
  if (storage_uuid_path_ != nullptr) storage_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.DocumentSelectionTransformerArchive)
}
DocumentSelectionTransformerArchive::DocumentSelectionTransformerArchive(const DocumentSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document_selection()) {
    document_selection_ = new ::TSP::Reference(*from.document_selection_);
  } else {
    document_selection_ = nullptr;
  }
  if (from._internal_has_storage_uuid_path()) {
    storage_uuid_path_ = new ::TSP::UUIDPath(*from.storage_uuid_path_);
  } else {
    storage_uuid_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.DocumentSelectionTransformerArchive)
}

void DocumentSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&document_selection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&storage_uuid_path_) -
    reinterpret_cast<char*>(&document_selection_)) + sizeof(storage_uuid_path_));
}

DocumentSelectionTransformerArchive::~DocumentSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TP.DocumentSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DocumentSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete document_selection_;
  if (this != internal_default_instance()) delete storage_uuid_path_;
}

void DocumentSelectionTransformerArchive::ArenaDtor(void* object) {
  DocumentSelectionTransformerArchive* _this = reinterpret_cast< DocumentSelectionTransformerArchive* >(object);
  (void)_this;
}
void DocumentSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.DocumentSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(document_selection_ != nullptr);
      document_selection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_uuid_path_ != nullptr);
      storage_uuid_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference document_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath storage_uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.DocumentSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference document_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document_selection(this), target, stream);
  }

  // required .TSP.UUIDPath storage_uuid_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage_uuid_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.DocumentSelectionTransformerArchive)
  return target;
}

size_t DocumentSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.DocumentSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_document_selection()) {
    // required .TSP.Reference document_selection = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_selection_);
  }

  if (_internal_has_storage_uuid_path()) {
    // required .TSP.UUIDPath storage_uuid_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_uuid_path_);
  }

  return total_size;
}
size_t DocumentSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.DocumentSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference document_selection = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_selection_);

    // required .TSP.UUIDPath storage_uuid_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_uuid_path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.DocumentSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DocumentSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.DocumentSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.DocumentSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void DocumentSelectionTransformerArchive::MergeFrom(const DocumentSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.DocumentSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_document_selection()->::TSP::Reference::MergeFrom(from._internal_document_selection());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_storage_uuid_path());
    }
  }
}

void DocumentSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.DocumentSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentSelectionTransformerArchive::CopyFrom(const DocumentSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.DocumentSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_document_selection()) {
    if (!document_selection_->IsInitialized()) return false;
  }
  if (_internal_has_storage_uuid_path()) {
    if (!storage_uuid_path_->IsInitialized()) return false;
  }
  return true;
}

void DocumentSelectionTransformerArchive::InternalSwap(DocumentSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentSelectionTransformerArchive, storage_uuid_path_)
      + sizeof(DocumentSelectionTransformerArchive::storage_uuid_path_)
      - PROTOBUF_FIELD_OFFSET(DocumentSelectionTransformerArchive, document_selection_)>(
          reinterpret_cast<char*>(&document_selection_),
          reinterpret_cast<char*>(&other->document_selection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[30]);
}

// ===================================================================

class CanvasSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CanvasSelectionTransformerArchive>()._has_bits_);
  static const ::TSWP::SelectionTransformerArchive& super(const CanvasSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& infos_collection_helper(const CanvasSelectionTransformerArchive* msg);
  static void set_has_infos_collection_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& excluded_infos_collection_helper(const CanvasSelectionTransformerArchive* msg);
  static void set_has_excluded_infos_collection_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& additional_infos_collection_helper(const CanvasSelectionTransformerArchive* msg);
  static void set_has_additional_infos_collection_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUIDPath& header_or_footnote_storage_uuid_path(const CanvasSelectionTransformerArchive* msg);
  static void set_has_header_or_footnote_storage_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSWP::SelectionTransformerArchive&
CanvasSelectionTransformerArchive::_Internal::super(const CanvasSelectionTransformerArchive* msg) {
  return *msg->super_;
}
const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
CanvasSelectionTransformerArchive::_Internal::infos_collection_helper(const CanvasSelectionTransformerArchive* msg) {
  return *msg->infos_collection_helper_;
}
const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
CanvasSelectionTransformerArchive::_Internal::excluded_infos_collection_helper(const CanvasSelectionTransformerArchive* msg) {
  return *msg->excluded_infos_collection_helper_;
}
const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
CanvasSelectionTransformerArchive::_Internal::additional_infos_collection_helper(const CanvasSelectionTransformerArchive* msg) {
  return *msg->additional_infos_collection_helper_;
}
const ::TSP::UUIDPath&
CanvasSelectionTransformerArchive::_Internal::header_or_footnote_storage_uuid_path(const CanvasSelectionTransformerArchive* msg) {
  return *msg->header_or_footnote_storage_uuid_path_;
}
void CanvasSelectionTransformerArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CanvasSelectionTransformerArchive::clear_infos_collection_helper() {
  if (infos_collection_helper_ != nullptr) infos_collection_helper_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CanvasSelectionTransformerArchive::clear_excluded_infos_collection_helper() {
  if (excluded_infos_collection_helper_ != nullptr) excluded_infos_collection_helper_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CanvasSelectionTransformerArchive::clear_additional_infos_collection_helper() {
  if (additional_infos_collection_helper_ != nullptr) additional_infos_collection_helper_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CanvasSelectionTransformerArchive::clear_header_or_footnote_storage_uuid_path() {
  if (header_or_footnote_storage_uuid_path_ != nullptr) header_or_footnote_storage_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.CanvasSelectionTransformerArchive)
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(const CanvasSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::SelectionTransformerArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_infos_collection_helper()) {
    infos_collection_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from.infos_collection_helper_);
  } else {
    infos_collection_helper_ = nullptr;
  }
  if (from._internal_has_excluded_infos_collection_helper()) {
    excluded_infos_collection_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from.excluded_infos_collection_helper_);
  } else {
    excluded_infos_collection_helper_ = nullptr;
  }
  if (from._internal_has_additional_infos_collection_helper()) {
    additional_infos_collection_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from.additional_infos_collection_helper_);
  } else {
    additional_infos_collection_helper_ = nullptr;
  }
  if (from._internal_has_header_or_footnote_storage_uuid_path()) {
    header_or_footnote_storage_uuid_path_ = new ::TSP::UUIDPath(*from.header_or_footnote_storage_uuid_path_);
  } else {
    header_or_footnote_storage_uuid_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.CanvasSelectionTransformerArchive)
}

void CanvasSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&header_or_footnote_storage_uuid_path_) -
    reinterpret_cast<char*>(&super_)) + sizeof(header_or_footnote_storage_uuid_path_));
}

CanvasSelectionTransformerArchive::~CanvasSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TP.CanvasSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CanvasSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete infos_collection_helper_;
  if (this != internal_default_instance()) delete excluded_infos_collection_helper_;
  if (this != internal_default_instance()) delete additional_infos_collection_helper_;
  if (this != internal_default_instance()) delete header_or_footnote_storage_uuid_path_;
}

void CanvasSelectionTransformerArchive::ArenaDtor(void* object) {
  CanvasSelectionTransformerArchive* _this = reinterpret_cast< CanvasSelectionTransformerArchive* >(object);
  (void)_this;
}
void CanvasSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanvasSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanvasSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.CanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(infos_collection_helper_ != nullptr);
      infos_collection_helper_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(excluded_infos_collection_helper_ != nullptr);
      excluded_infos_collection_helper_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(additional_infos_collection_helper_ != nullptr);
      additional_infos_collection_helper_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(header_or_footnote_storage_uuid_path_ != nullptr);
      header_or_footnote_storage_uuid_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.SelectionTransformerArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive infos_collection_helper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_infos_collection_helper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive excluded_infos_collection_helper = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_excluded_infos_collection_helper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive additional_infos_collection_helper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_additional_infos_collection_helper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath header_or_footnote_storage_uuid_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_or_footnote_storage_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanvasSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.CanvasSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.SelectionTransformerArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive infos_collection_helper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::infos_collection_helper(this), target, stream);
  }

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive excluded_infos_collection_helper = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::excluded_infos_collection_helper(this), target, stream);
  }

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive additional_infos_collection_helper = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::additional_infos_collection_helper(this), target, stream);
  }

  // optional .TSP.UUIDPath header_or_footnote_storage_uuid_path = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::header_or_footnote_storage_uuid_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.CanvasSelectionTransformerArchive)
  return target;
}

size_t CanvasSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.CanvasSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSWP.SelectionTransformerArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_infos_collection_helper()) {
    // required .TSD.InfoCollectionSelectionTransformerHelperArchive infos_collection_helper = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *infos_collection_helper_);
  }

  if (_internal_has_excluded_infos_collection_helper()) {
    // required .TSD.InfoCollectionSelectionTransformerHelperArchive excluded_infos_collection_helper = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *excluded_infos_collection_helper_);
  }

  if (_internal_has_additional_infos_collection_helper()) {
    // required .TSD.InfoCollectionSelectionTransformerHelperArchive additional_infos_collection_helper = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *additional_infos_collection_helper_);
  }

  return total_size;
}
size_t CanvasSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.CanvasSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSWP.SelectionTransformerArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSD.InfoCollectionSelectionTransformerHelperArchive infos_collection_helper = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *infos_collection_helper_);

    // required .TSD.InfoCollectionSelectionTransformerHelperArchive excluded_infos_collection_helper = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *excluded_infos_collection_helper_);

    // required .TSD.InfoCollectionSelectionTransformerHelperArchive additional_infos_collection_helper = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *additional_infos_collection_helper_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDPath header_or_footnote_storage_uuid_path = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_or_footnote_storage_uuid_path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanvasSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.CanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CanvasSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanvasSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.CanvasSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.CanvasSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void CanvasSelectionTransformerArchive::MergeFrom(const CanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.CanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::SelectionTransformerArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_infos_collection_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(from._internal_infos_collection_helper());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_excluded_infos_collection_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(from._internal_excluded_infos_collection_helper());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_additional_infos_collection_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(from._internal_additional_infos_collection_helper());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_header_or_footnote_storage_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_header_or_footnote_storage_uuid_path());
    }
  }
}

void CanvasSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.CanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanvasSelectionTransformerArchive::CopyFrom(const CanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.CanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_infos_collection_helper()) {
    if (!infos_collection_helper_->IsInitialized()) return false;
  }
  if (_internal_has_excluded_infos_collection_helper()) {
    if (!excluded_infos_collection_helper_->IsInitialized()) return false;
  }
  if (_internal_has_additional_infos_collection_helper()) {
    if (!additional_infos_collection_helper_->IsInitialized()) return false;
  }
  if (_internal_has_header_or_footnote_storage_uuid_path()) {
    if (!header_or_footnote_storage_uuid_path_->IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionTransformerArchive::InternalSwap(CanvasSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanvasSelectionTransformerArchive, header_or_footnote_storage_uuid_path_)
      + sizeof(CanvasSelectionTransformerArchive::header_or_footnote_storage_uuid_path_)
      - PROTOBUF_FIELD_OFFSET(CanvasSelectionTransformerArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPCommandArchives_2eproto_getter, &descriptor_table_TPCommandArchives_2eproto_once,
      file_level_metadata_TPCommandArchives_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TP::InsertDrawablesCommandArchive* Arena::CreateMaybeMessage< ::TP::InsertDrawablesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::InsertDrawablesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::MoveDrawablesPageIndexCommandArchive_Drawable* Arena::CreateMaybeMessage< ::TP::MoveDrawablesPageIndexCommandArchive_Drawable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::MoveDrawablesPageIndexCommandArchive_Drawable >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::MoveDrawablesPageIndexCommandArchive* Arena::CreateMaybeMessage< ::TP::MoveDrawablesPageIndexCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::MoveDrawablesPageIndexCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::InsertSectionBreakCommandArchive* Arena::CreateMaybeMessage< ::TP::InsertSectionBreakCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::InsertSectionBreakCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::MoveDrawableZOrderCommandArchive* Arena::CreateMaybeMessage< ::TP::MoveDrawableZOrderCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::MoveDrawableZOrderCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::RemoveDrawablesCommandArchive* Arena::CreateMaybeMessage< ::TP::RemoveDrawablesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::RemoveDrawablesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ChangeSectionMarginsCommandArchive* Arena::CreateMaybeMessage< ::TP::ChangeSectionMarginsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ChangeSectionMarginsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::InsertMasterDrawablesCommandArchive* Arena::CreateMaybeMessage< ::TP::InsertMasterDrawablesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::InsertMasterDrawablesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::MoveMasterDrawableZOrderCommandArchive* Arena::CreateMaybeMessage< ::TP::MoveMasterDrawableZOrderCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::MoveMasterDrawableZOrderCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable* Arena::CreateMaybeMessage< ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::RemoveMasterDrawablesCommandArchive* Arena::CreateMaybeMessage< ::TP::RemoveMasterDrawablesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::RemoveMasterDrawablesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::PasteMasterDrawablesCommandArchive* Arena::CreateMaybeMessage< ::TP::PasteMasterDrawablesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::PasteMasterDrawablesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* Arena::CreateMaybeMessage< ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::MoveDrawablesAttachedCommandArchive* Arena::CreateMaybeMessage< ::TP::MoveDrawablesAttachedCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::MoveDrawablesAttachedCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::MoveDrawablesFloatingCommandArchive* Arena::CreateMaybeMessage< ::TP::MoveDrawablesFloatingCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::MoveDrawablesFloatingCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ChangeFootnoteFormatCommandArchive* Arena::CreateMaybeMessage< ::TP::ChangeFootnoteFormatCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ChangeFootnoteFormatCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ChangeFootnoteKindCommandArchive* Arena::CreateMaybeMessage< ::TP::ChangeFootnoteKindCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ChangeFootnoteKindCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ChangeFootnoteNumberingCommandArchive* Arena::CreateMaybeMessage< ::TP::ChangeFootnoteNumberingCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ChangeFootnoteNumberingCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ChangeFootnoteSpacingCommandArchive* Arena::CreateMaybeMessage< ::TP::ChangeFootnoteSpacingCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ChangeFootnoteSpacingCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::MoveInlineDrawableAnchoredCommandArchive* Arena::CreateMaybeMessage< ::TP::MoveInlineDrawableAnchoredCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::MoveInlineDrawableAnchoredCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::MoveAnchoredDrawableInlineCommandArchive* Arena::CreateMaybeMessage< ::TP::MoveAnchoredDrawableInlineCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::MoveAnchoredDrawableInlineCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::InsertFootnoteCommandArchive* Arena::CreateMaybeMessage< ::TP::InsertFootnoteCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::InsertFootnoteCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ToggleBodyLayoutDirectionCommandArchive* Arena::CreateMaybeMessage< ::TP::ToggleBodyLayoutDirectionCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ToggleBodyLayoutDirectionCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::TrackChangesCommandArchive* Arena::CreateMaybeMessage< ::TP::TrackChangesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::TrackChangesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::PauseChangeTrackingCommandArchive* Arena::CreateMaybeMessage< ::TP::PauseChangeTrackingCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::PauseChangeTrackingCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SectionGuideCommandArchive* Arena::CreateMaybeMessage< ::TP::SectionGuideCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SectionGuideCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ReplaceHeaderFooterStorageCommandArchive* Arena::CreateMaybeMessage< ::TP::ReplaceHeaderFooterStorageCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ReplaceHeaderFooterStorageCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::PrototypeForUndoChangePageTemplateForSection* Arena::CreateMaybeMessage< ::TP::PrototypeForUndoChangePageTemplateForSection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::PrototypeForUndoChangePageTemplateForSection >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ChangePageTemplateForSectionCommandArchive* Arena::CreateMaybeMessage< ::TP::ChangePageTemplateForSectionCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ChangePageTemplateForSectionCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::AllFootnoteSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TP::AllFootnoteSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::AllFootnoteSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::DocumentSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TP::DocumentSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::DocumentSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::CanvasSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TP::CanvasSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::CanvasSelectionTransformerArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
