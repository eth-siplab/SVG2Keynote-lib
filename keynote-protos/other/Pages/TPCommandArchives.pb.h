// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TPCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TPCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TPCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSDArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSPMessages.pb.h"
#include "TSWPArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSAArchives.pb.h"
#include "TSTArchives.pb.h"
#include "TPArchives.pb.h"
#include "TSDCommandArchives.pb.h"
#include "TSWPCommandArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TPCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TPCommandArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TPCommandArchives_2eproto;
namespace TP {
class AllFootnoteSelectionTransformerArchive;
struct AllFootnoteSelectionTransformerArchiveDefaultTypeInternal;
extern AllFootnoteSelectionTransformerArchiveDefaultTypeInternal _AllFootnoteSelectionTransformerArchive_default_instance_;
class CanvasSelectionTransformerArchive;
struct CanvasSelectionTransformerArchiveDefaultTypeInternal;
extern CanvasSelectionTransformerArchiveDefaultTypeInternal _CanvasSelectionTransformerArchive_default_instance_;
class ChangeFootnoteFormatCommandArchive;
struct ChangeFootnoteFormatCommandArchiveDefaultTypeInternal;
extern ChangeFootnoteFormatCommandArchiveDefaultTypeInternal _ChangeFootnoteFormatCommandArchive_default_instance_;
class ChangeFootnoteKindCommandArchive;
struct ChangeFootnoteKindCommandArchiveDefaultTypeInternal;
extern ChangeFootnoteKindCommandArchiveDefaultTypeInternal _ChangeFootnoteKindCommandArchive_default_instance_;
class ChangeFootnoteNumberingCommandArchive;
struct ChangeFootnoteNumberingCommandArchiveDefaultTypeInternal;
extern ChangeFootnoteNumberingCommandArchiveDefaultTypeInternal _ChangeFootnoteNumberingCommandArchive_default_instance_;
class ChangeFootnoteSpacingCommandArchive;
struct ChangeFootnoteSpacingCommandArchiveDefaultTypeInternal;
extern ChangeFootnoteSpacingCommandArchiveDefaultTypeInternal _ChangeFootnoteSpacingCommandArchive_default_instance_;
class ChangePageTemplateForSectionCommandArchive;
struct ChangePageTemplateForSectionCommandArchiveDefaultTypeInternal;
extern ChangePageTemplateForSectionCommandArchiveDefaultTypeInternal _ChangePageTemplateForSectionCommandArchive_default_instance_;
class ChangeSectionMarginsCommandArchive;
struct ChangeSectionMarginsCommandArchiveDefaultTypeInternal;
extern ChangeSectionMarginsCommandArchiveDefaultTypeInternal _ChangeSectionMarginsCommandArchive_default_instance_;
class DocumentSelectionTransformerArchive;
struct DocumentSelectionTransformerArchiveDefaultTypeInternal;
extern DocumentSelectionTransformerArchiveDefaultTypeInternal _DocumentSelectionTransformerArchive_default_instance_;
class InsertDrawablesCommandArchive;
struct InsertDrawablesCommandArchiveDefaultTypeInternal;
extern InsertDrawablesCommandArchiveDefaultTypeInternal _InsertDrawablesCommandArchive_default_instance_;
class InsertFootnoteCommandArchive;
struct InsertFootnoteCommandArchiveDefaultTypeInternal;
extern InsertFootnoteCommandArchiveDefaultTypeInternal _InsertFootnoteCommandArchive_default_instance_;
class InsertMasterDrawablesCommandArchive;
struct InsertMasterDrawablesCommandArchiveDefaultTypeInternal;
extern InsertMasterDrawablesCommandArchiveDefaultTypeInternal _InsertMasterDrawablesCommandArchive_default_instance_;
class InsertSectionBreakCommandArchive;
struct InsertSectionBreakCommandArchiveDefaultTypeInternal;
extern InsertSectionBreakCommandArchiveDefaultTypeInternal _InsertSectionBreakCommandArchive_default_instance_;
class MoveAnchoredDrawableInlineCommandArchive;
struct MoveAnchoredDrawableInlineCommandArchiveDefaultTypeInternal;
extern MoveAnchoredDrawableInlineCommandArchiveDefaultTypeInternal _MoveAnchoredDrawableInlineCommandArchive_default_instance_;
class MoveDrawableZOrderCommandArchive;
struct MoveDrawableZOrderCommandArchiveDefaultTypeInternal;
extern MoveDrawableZOrderCommandArchiveDefaultTypeInternal _MoveDrawableZOrderCommandArchive_default_instance_;
class MoveDrawablesAttachedCommandArchive;
struct MoveDrawablesAttachedCommandArchiveDefaultTypeInternal;
extern MoveDrawablesAttachedCommandArchiveDefaultTypeInternal _MoveDrawablesAttachedCommandArchive_default_instance_;
class MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition;
struct MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPositionDefaultTypeInternal;
extern MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPositionDefaultTypeInternal _MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition_default_instance_;
class MoveDrawablesFloatingCommandArchive;
struct MoveDrawablesFloatingCommandArchiveDefaultTypeInternal;
extern MoveDrawablesFloatingCommandArchiveDefaultTypeInternal _MoveDrawablesFloatingCommandArchive_default_instance_;
class MoveDrawablesPageIndexCommandArchive;
struct MoveDrawablesPageIndexCommandArchiveDefaultTypeInternal;
extern MoveDrawablesPageIndexCommandArchiveDefaultTypeInternal _MoveDrawablesPageIndexCommandArchive_default_instance_;
class MoveDrawablesPageIndexCommandArchive_Drawable;
struct MoveDrawablesPageIndexCommandArchive_DrawableDefaultTypeInternal;
extern MoveDrawablesPageIndexCommandArchive_DrawableDefaultTypeInternal _MoveDrawablesPageIndexCommandArchive_Drawable_default_instance_;
class MoveInlineDrawableAnchoredCommandArchive;
struct MoveInlineDrawableAnchoredCommandArchiveDefaultTypeInternal;
extern MoveInlineDrawableAnchoredCommandArchiveDefaultTypeInternal _MoveInlineDrawableAnchoredCommandArchive_default_instance_;
class MoveMasterDrawableZOrderCommandArchive;
struct MoveMasterDrawableZOrderCommandArchiveDefaultTypeInternal;
extern MoveMasterDrawableZOrderCommandArchiveDefaultTypeInternal _MoveMasterDrawableZOrderCommandArchive_default_instance_;
class PasteMasterDrawablesCommandArchive;
struct PasteMasterDrawablesCommandArchiveDefaultTypeInternal;
extern PasteMasterDrawablesCommandArchiveDefaultTypeInternal _PasteMasterDrawablesCommandArchive_default_instance_;
class PauseChangeTrackingCommandArchive;
struct PauseChangeTrackingCommandArchiveDefaultTypeInternal;
extern PauseChangeTrackingCommandArchiveDefaultTypeInternal _PauseChangeTrackingCommandArchive_default_instance_;
class PrototypeForUndoChangePageTemplateForSection;
struct PrototypeForUndoChangePageTemplateForSectionDefaultTypeInternal;
extern PrototypeForUndoChangePageTemplateForSectionDefaultTypeInternal _PrototypeForUndoChangePageTemplateForSection_default_instance_;
class RemoveDrawablesCommandArchive;
struct RemoveDrawablesCommandArchiveDefaultTypeInternal;
extern RemoveDrawablesCommandArchiveDefaultTypeInternal _RemoveDrawablesCommandArchive_default_instance_;
class RemoveMasterDrawablesCommandArchive;
struct RemoveMasterDrawablesCommandArchiveDefaultTypeInternal;
extern RemoveMasterDrawablesCommandArchiveDefaultTypeInternal _RemoveMasterDrawablesCommandArchive_default_instance_;
class RemoveMasterDrawablesCommandArchive_MasterDrawable;
struct RemoveMasterDrawablesCommandArchive_MasterDrawableDefaultTypeInternal;
extern RemoveMasterDrawablesCommandArchive_MasterDrawableDefaultTypeInternal _RemoveMasterDrawablesCommandArchive_MasterDrawable_default_instance_;
class ReplaceHeaderFooterStorageCommandArchive;
struct ReplaceHeaderFooterStorageCommandArchiveDefaultTypeInternal;
extern ReplaceHeaderFooterStorageCommandArchiveDefaultTypeInternal _ReplaceHeaderFooterStorageCommandArchive_default_instance_;
class SectionGuideCommandArchive;
struct SectionGuideCommandArchiveDefaultTypeInternal;
extern SectionGuideCommandArchiveDefaultTypeInternal _SectionGuideCommandArchive_default_instance_;
class ToggleBodyLayoutDirectionCommandArchive;
struct ToggleBodyLayoutDirectionCommandArchiveDefaultTypeInternal;
extern ToggleBodyLayoutDirectionCommandArchiveDefaultTypeInternal _ToggleBodyLayoutDirectionCommandArchive_default_instance_;
class TrackChangesCommandArchive;
struct TrackChangesCommandArchiveDefaultTypeInternal;
extern TrackChangesCommandArchiveDefaultTypeInternal _TrackChangesCommandArchive_default_instance_;
}  // namespace TP
PROTOBUF_NAMESPACE_OPEN
template<> ::TP::AllFootnoteSelectionTransformerArchive* Arena::CreateMaybeMessage<::TP::AllFootnoteSelectionTransformerArchive>(Arena*);
template<> ::TP::CanvasSelectionTransformerArchive* Arena::CreateMaybeMessage<::TP::CanvasSelectionTransformerArchive>(Arena*);
template<> ::TP::ChangeFootnoteFormatCommandArchive* Arena::CreateMaybeMessage<::TP::ChangeFootnoteFormatCommandArchive>(Arena*);
template<> ::TP::ChangeFootnoteKindCommandArchive* Arena::CreateMaybeMessage<::TP::ChangeFootnoteKindCommandArchive>(Arena*);
template<> ::TP::ChangeFootnoteNumberingCommandArchive* Arena::CreateMaybeMessage<::TP::ChangeFootnoteNumberingCommandArchive>(Arena*);
template<> ::TP::ChangeFootnoteSpacingCommandArchive* Arena::CreateMaybeMessage<::TP::ChangeFootnoteSpacingCommandArchive>(Arena*);
template<> ::TP::ChangePageTemplateForSectionCommandArchive* Arena::CreateMaybeMessage<::TP::ChangePageTemplateForSectionCommandArchive>(Arena*);
template<> ::TP::ChangeSectionMarginsCommandArchive* Arena::CreateMaybeMessage<::TP::ChangeSectionMarginsCommandArchive>(Arena*);
template<> ::TP::DocumentSelectionTransformerArchive* Arena::CreateMaybeMessage<::TP::DocumentSelectionTransformerArchive>(Arena*);
template<> ::TP::InsertDrawablesCommandArchive* Arena::CreateMaybeMessage<::TP::InsertDrawablesCommandArchive>(Arena*);
template<> ::TP::InsertFootnoteCommandArchive* Arena::CreateMaybeMessage<::TP::InsertFootnoteCommandArchive>(Arena*);
template<> ::TP::InsertMasterDrawablesCommandArchive* Arena::CreateMaybeMessage<::TP::InsertMasterDrawablesCommandArchive>(Arena*);
template<> ::TP::InsertSectionBreakCommandArchive* Arena::CreateMaybeMessage<::TP::InsertSectionBreakCommandArchive>(Arena*);
template<> ::TP::MoveAnchoredDrawableInlineCommandArchive* Arena::CreateMaybeMessage<::TP::MoveAnchoredDrawableInlineCommandArchive>(Arena*);
template<> ::TP::MoveDrawableZOrderCommandArchive* Arena::CreateMaybeMessage<::TP::MoveDrawableZOrderCommandArchive>(Arena*);
template<> ::TP::MoveDrawablesAttachedCommandArchive* Arena::CreateMaybeMessage<::TP::MoveDrawablesAttachedCommandArchive>(Arena*);
template<> ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* Arena::CreateMaybeMessage<::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition>(Arena*);
template<> ::TP::MoveDrawablesFloatingCommandArchive* Arena::CreateMaybeMessage<::TP::MoveDrawablesFloatingCommandArchive>(Arena*);
template<> ::TP::MoveDrawablesPageIndexCommandArchive* Arena::CreateMaybeMessage<::TP::MoveDrawablesPageIndexCommandArchive>(Arena*);
template<> ::TP::MoveDrawablesPageIndexCommandArchive_Drawable* Arena::CreateMaybeMessage<::TP::MoveDrawablesPageIndexCommandArchive_Drawable>(Arena*);
template<> ::TP::MoveInlineDrawableAnchoredCommandArchive* Arena::CreateMaybeMessage<::TP::MoveInlineDrawableAnchoredCommandArchive>(Arena*);
template<> ::TP::MoveMasterDrawableZOrderCommandArchive* Arena::CreateMaybeMessage<::TP::MoveMasterDrawableZOrderCommandArchive>(Arena*);
template<> ::TP::PasteMasterDrawablesCommandArchive* Arena::CreateMaybeMessage<::TP::PasteMasterDrawablesCommandArchive>(Arena*);
template<> ::TP::PauseChangeTrackingCommandArchive* Arena::CreateMaybeMessage<::TP::PauseChangeTrackingCommandArchive>(Arena*);
template<> ::TP::PrototypeForUndoChangePageTemplateForSection* Arena::CreateMaybeMessage<::TP::PrototypeForUndoChangePageTemplateForSection>(Arena*);
template<> ::TP::RemoveDrawablesCommandArchive* Arena::CreateMaybeMessage<::TP::RemoveDrawablesCommandArchive>(Arena*);
template<> ::TP::RemoveMasterDrawablesCommandArchive* Arena::CreateMaybeMessage<::TP::RemoveMasterDrawablesCommandArchive>(Arena*);
template<> ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable* Arena::CreateMaybeMessage<::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable>(Arena*);
template<> ::TP::ReplaceHeaderFooterStorageCommandArchive* Arena::CreateMaybeMessage<::TP::ReplaceHeaderFooterStorageCommandArchive>(Arena*);
template<> ::TP::SectionGuideCommandArchive* Arena::CreateMaybeMessage<::TP::SectionGuideCommandArchive>(Arena*);
template<> ::TP::ToggleBodyLayoutDirectionCommandArchive* Arena::CreateMaybeMessage<::TP::ToggleBodyLayoutDirectionCommandArchive>(Arena*);
template<> ::TP::TrackChangesCommandArchive* Arena::CreateMaybeMessage<::TP::TrackChangesCommandArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TP {

enum ChangeSectionMarginsCommandArchive_SectionMargin : int {
  ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginLeft = 0,
  ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginRight = 1,
  ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginTop = 2,
  ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginBottom = 3,
  ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginHeader = 4,
  ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginFooter = 5
};
bool ChangeSectionMarginsCommandArchive_SectionMargin_IsValid(int value);
constexpr ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive_SectionMargin_SectionMargin_MIN = ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginLeft;
constexpr ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive_SectionMargin_SectionMargin_MAX = ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginFooter;
constexpr int ChangeSectionMarginsCommandArchive_SectionMargin_SectionMargin_ARRAYSIZE = ChangeSectionMarginsCommandArchive_SectionMargin_SectionMargin_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeSectionMarginsCommandArchive_SectionMargin_descriptor();
template<typename T>
inline const std::string& ChangeSectionMarginsCommandArchive_SectionMargin_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChangeSectionMarginsCommandArchive_SectionMargin>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChangeSectionMarginsCommandArchive_SectionMargin_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChangeSectionMarginsCommandArchive_SectionMargin_descriptor(), enum_t_value);
}
inline bool ChangeSectionMarginsCommandArchive_SectionMargin_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChangeSectionMarginsCommandArchive_SectionMargin* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChangeSectionMarginsCommandArchive_SectionMargin>(
    ChangeSectionMarginsCommandArchive_SectionMargin_descriptor(), name, value);
}
enum ChangeFootnoteFormatCommandArchive_FootnoteFormat : int {
  ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatNumeric = 0,
  ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatRoman = 1,
  ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatSymbolic = 2,
  ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatJapaneseNumeric = 3,
  ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatJapaneseIdeographic = 4,
  ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatArabicNumeric = 5
};
bool ChangeFootnoteFormatCommandArchive_FootnoteFormat_IsValid(int value);
constexpr ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive_FootnoteFormat_FootnoteFormat_MIN = ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatNumeric;
constexpr ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive_FootnoteFormat_FootnoteFormat_MAX = ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatArabicNumeric;
constexpr int ChangeFootnoteFormatCommandArchive_FootnoteFormat_FootnoteFormat_ARRAYSIZE = ChangeFootnoteFormatCommandArchive_FootnoteFormat_FootnoteFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeFootnoteFormatCommandArchive_FootnoteFormat_descriptor();
template<typename T>
inline const std::string& ChangeFootnoteFormatCommandArchive_FootnoteFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChangeFootnoteFormatCommandArchive_FootnoteFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChangeFootnoteFormatCommandArchive_FootnoteFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChangeFootnoteFormatCommandArchive_FootnoteFormat_descriptor(), enum_t_value);
}
inline bool ChangeFootnoteFormatCommandArchive_FootnoteFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChangeFootnoteFormatCommandArchive_FootnoteFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChangeFootnoteFormatCommandArchive_FootnoteFormat>(
    ChangeFootnoteFormatCommandArchive_FootnoteFormat_descriptor(), name, value);
}
enum ChangeFootnoteKindCommandArchive_FootnoteKind : int {
  ChangeFootnoteKindCommandArchive_FootnoteKind_kFootnoteKindFootnotes = 0,
  ChangeFootnoteKindCommandArchive_FootnoteKind_kFootnoteKindDocumentEndnotes = 1,
  ChangeFootnoteKindCommandArchive_FootnoteKind_kFootnoteKindSectionEndnotes = 2
};
bool ChangeFootnoteKindCommandArchive_FootnoteKind_IsValid(int value);
constexpr ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive_FootnoteKind_FootnoteKind_MIN = ChangeFootnoteKindCommandArchive_FootnoteKind_kFootnoteKindFootnotes;
constexpr ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive_FootnoteKind_FootnoteKind_MAX = ChangeFootnoteKindCommandArchive_FootnoteKind_kFootnoteKindSectionEndnotes;
constexpr int ChangeFootnoteKindCommandArchive_FootnoteKind_FootnoteKind_ARRAYSIZE = ChangeFootnoteKindCommandArchive_FootnoteKind_FootnoteKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeFootnoteKindCommandArchive_FootnoteKind_descriptor();
template<typename T>
inline const std::string& ChangeFootnoteKindCommandArchive_FootnoteKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChangeFootnoteKindCommandArchive_FootnoteKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChangeFootnoteKindCommandArchive_FootnoteKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChangeFootnoteKindCommandArchive_FootnoteKind_descriptor(), enum_t_value);
}
inline bool ChangeFootnoteKindCommandArchive_FootnoteKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChangeFootnoteKindCommandArchive_FootnoteKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChangeFootnoteKindCommandArchive_FootnoteKind>(
    ChangeFootnoteKindCommandArchive_FootnoteKind_descriptor(), name, value);
}
enum ChangeFootnoteNumberingCommandArchive_FootnoteNumbering : int {
  ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_kFootnoteNumberingContinuous = 0,
  ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_kFootnoteNumberingRestartEachPage = 1,
  ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection = 2
};
bool ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_IsValid(int value);
constexpr ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_FootnoteNumbering_MIN = ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_kFootnoteNumberingContinuous;
constexpr ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_FootnoteNumbering_MAX = ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection;
constexpr int ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_FootnoteNumbering_ARRAYSIZE = ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_FootnoteNumbering_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_descriptor();
template<typename T>
inline const std::string& ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChangeFootnoteNumberingCommandArchive_FootnoteNumbering>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_descriptor(), enum_t_value);
}
inline bool ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChangeFootnoteNumberingCommandArchive_FootnoteNumbering* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChangeFootnoteNumberingCommandArchive_FootnoteNumbering>(
    ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_descriptor(), name, value);
}
// ===================================================================

class InsertDrawablesCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.InsertDrawablesCommandArchive) */ {
 public:
  inline InsertDrawablesCommandArchive() : InsertDrawablesCommandArchive(nullptr) {}
  ~InsertDrawablesCommandArchive() override;
  explicit constexpr InsertDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertDrawablesCommandArchive(const InsertDrawablesCommandArchive& from);
  InsertDrawablesCommandArchive(InsertDrawablesCommandArchive&& from) noexcept
    : InsertDrawablesCommandArchive() {
    *this = ::std::move(from);
  }

  inline InsertDrawablesCommandArchive& operator=(const InsertDrawablesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertDrawablesCommandArchive& operator=(InsertDrawablesCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertDrawablesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertDrawablesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InsertDrawablesCommandArchive*>(
               &_InsertDrawablesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InsertDrawablesCommandArchive& a, InsertDrawablesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertDrawablesCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertDrawablesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertDrawablesCommandArchive* New() const final {
    return CreateMaybeMessage<InsertDrawablesCommandArchive>(nullptr);
  }

  InsertDrawablesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertDrawablesCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertDrawablesCommandArchive& from);
  void MergeFrom(const InsertDrawablesCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertDrawablesCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.InsertDrawablesCommandArchive";
  }
  protected:
  explicit InsertDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 3,
    kPageIndexListFieldNumber = 4,
    kDrawableInfoListFieldNumber = 5,
    kCustomFormatKeysFieldNumber = 6,
    kPlaceholderTagsListFieldNumber = 9,
    kSuperFieldNumber = 1,
    kDrawableUndoObjectFieldNumber = 7,
    kForPasteFieldNumber = 2,
    kSavedNextUntitledResolverIndexFieldNumber = 8,
  };
  // repeated .TSK.AddIdOperationArgs args_list = 3;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::AddIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::AddIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::AddIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::AddIdOperationArgs& args_list(int index) const;
  ::TSK::AddIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
      args_list() const;

  // repeated uint32 page_index_list = 4;
  int page_index_list_size() const;
  private:
  int _internal_page_index_list_size() const;
  public:
  void clear_page_index_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_index_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_page_index_list() const;
  void _internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_page_index_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index_list(int index) const;
  void set_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      page_index_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_page_index_list();

  // repeated .TSP.Reference drawable_info_list = 5;
  int drawable_info_list_size() const;
  private:
  int _internal_drawable_info_list_size() const;
  public:
  void clear_drawable_info_list();
  ::TSP::Reference* mutable_drawable_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawable_info_list();
  private:
  const ::TSP::Reference& _internal_drawable_info_list(int index) const;
  ::TSP::Reference* _internal_add_drawable_info_list();
  public:
  const ::TSP::Reference& drawable_info_list(int index) const;
  ::TSP::Reference* add_drawable_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawable_info_list() const;

  // repeated .TSP.UUID custom_format_keys = 6;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // repeated string placeholder_tags_list = 9;
  int placeholder_tags_list_size() const;
  private:
  int _internal_placeholder_tags_list_size() const;
  public:
  void clear_placeholder_tags_list();
  const std::string& placeholder_tags_list(int index) const;
  std::string* mutable_placeholder_tags_list(int index);
  void set_placeholder_tags_list(int index, const std::string& value);
  void set_placeholder_tags_list(int index, std::string&& value);
  void set_placeholder_tags_list(int index, const char* value);
  void set_placeholder_tags_list(int index, const char* value, size_t size);
  std::string* add_placeholder_tags_list();
  void add_placeholder_tags_list(const std::string& value);
  void add_placeholder_tags_list(std::string&& value);
  void add_placeholder_tags_list(const char* value);
  void add_placeholder_tags_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& placeholder_tags_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_placeholder_tags_list();
  private:
  const std::string& _internal_placeholder_tags_list(int index) const;
  std::string* _internal_add_placeholder_tags_list();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference drawable_undo_object = 7;
  bool has_drawable_undo_object() const;
  private:
  bool _internal_has_drawable_undo_object() const;
  public:
  void clear_drawable_undo_object();
  const ::TSP::Reference& drawable_undo_object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_drawable_undo_object();
  ::TSP::Reference* mutable_drawable_undo_object();
  void set_allocated_drawable_undo_object(::TSP::Reference* drawable_undo_object);
  private:
  const ::TSP::Reference& _internal_drawable_undo_object() const;
  ::TSP::Reference* _internal_mutable_drawable_undo_object();
  public:
  void unsafe_arena_set_allocated_drawable_undo_object(
      ::TSP::Reference* drawable_undo_object);
  ::TSP::Reference* unsafe_arena_release_drawable_undo_object();

  // optional bool for_paste = 2;
  bool has_for_paste() const;
  private:
  bool _internal_has_for_paste() const;
  public:
  void clear_for_paste();
  bool for_paste() const;
  void set_for_paste(bool value);
  private:
  bool _internal_for_paste() const;
  void _internal_set_for_paste(bool value);
  public:

  // optional uint32 saved_next_untitled_resolver_index = 8;
  bool has_saved_next_untitled_resolver_index() const;
  private:
  bool _internal_has_saved_next_untitled_resolver_index() const;
  public:
  void clear_saved_next_untitled_resolver_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 saved_next_untitled_resolver_index() const;
  void set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_saved_next_untitled_resolver_index() const;
  void _internal_set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.InsertDrawablesCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs > args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > page_index_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawable_info_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> placeholder_tags_list_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* drawable_undo_object_;
  bool for_paste_;
  ::PROTOBUF_NAMESPACE_ID::uint32 saved_next_untitled_resolver_index_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MoveDrawablesPageIndexCommandArchive_Drawable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.MoveDrawablesPageIndexCommandArchive.Drawable) */ {
 public:
  inline MoveDrawablesPageIndexCommandArchive_Drawable() : MoveDrawablesPageIndexCommandArchive_Drawable(nullptr) {}
  ~MoveDrawablesPageIndexCommandArchive_Drawable() override;
  explicit constexpr MoveDrawablesPageIndexCommandArchive_Drawable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveDrawablesPageIndexCommandArchive_Drawable(const MoveDrawablesPageIndexCommandArchive_Drawable& from);
  MoveDrawablesPageIndexCommandArchive_Drawable(MoveDrawablesPageIndexCommandArchive_Drawable&& from) noexcept
    : MoveDrawablesPageIndexCommandArchive_Drawable() {
    *this = ::std::move(from);
  }

  inline MoveDrawablesPageIndexCommandArchive_Drawable& operator=(const MoveDrawablesPageIndexCommandArchive_Drawable& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDrawablesPageIndexCommandArchive_Drawable& operator=(MoveDrawablesPageIndexCommandArchive_Drawable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveDrawablesPageIndexCommandArchive_Drawable& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveDrawablesPageIndexCommandArchive_Drawable* internal_default_instance() {
    return reinterpret_cast<const MoveDrawablesPageIndexCommandArchive_Drawable*>(
               &_MoveDrawablesPageIndexCommandArchive_Drawable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MoveDrawablesPageIndexCommandArchive_Drawable& a, MoveDrawablesPageIndexCommandArchive_Drawable& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDrawablesPageIndexCommandArchive_Drawable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveDrawablesPageIndexCommandArchive_Drawable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveDrawablesPageIndexCommandArchive_Drawable* New() const final {
    return CreateMaybeMessage<MoveDrawablesPageIndexCommandArchive_Drawable>(nullptr);
  }

  MoveDrawablesPageIndexCommandArchive_Drawable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveDrawablesPageIndexCommandArchive_Drawable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveDrawablesPageIndexCommandArchive_Drawable& from);
  void MergeFrom(const MoveDrawablesPageIndexCommandArchive_Drawable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDrawablesPageIndexCommandArchive_Drawable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.MoveDrawablesPageIndexCommandArchive.Drawable";
  }
  protected:
  explicit MoveDrawablesPageIndexCommandArchive_Drawable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableFieldNumber = 1,
    kZOrderFieldNumber = 2,
  };
  // optional .TSP.Reference drawable = 1;
  bool has_drawable() const;
  private:
  bool _internal_has_drawable() const;
  public:
  void clear_drawable();
  const ::TSP::Reference& drawable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_drawable();
  ::TSP::Reference* mutable_drawable();
  void set_allocated_drawable(::TSP::Reference* drawable);
  private:
  const ::TSP::Reference& _internal_drawable() const;
  ::TSP::Reference* _internal_mutable_drawable();
  public:
  void unsafe_arena_set_allocated_drawable(
      ::TSP::Reference* drawable);
  ::TSP::Reference* unsafe_arena_release_drawable();

  // optional uint32 z_order = 2;
  bool has_z_order() const;
  private:
  bool _internal_has_z_order() const;
  public:
  void clear_z_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 z_order() const;
  void set_z_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_z_order() const;
  void _internal_set_z_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.MoveDrawablesPageIndexCommandArchive.Drawable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* drawable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 z_order_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MoveDrawablesPageIndexCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.MoveDrawablesPageIndexCommandArchive) */ {
 public:
  inline MoveDrawablesPageIndexCommandArchive() : MoveDrawablesPageIndexCommandArchive(nullptr) {}
  ~MoveDrawablesPageIndexCommandArchive() override;
  explicit constexpr MoveDrawablesPageIndexCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveDrawablesPageIndexCommandArchive(const MoveDrawablesPageIndexCommandArchive& from);
  MoveDrawablesPageIndexCommandArchive(MoveDrawablesPageIndexCommandArchive&& from) noexcept
    : MoveDrawablesPageIndexCommandArchive() {
    *this = ::std::move(from);
  }

  inline MoveDrawablesPageIndexCommandArchive& operator=(const MoveDrawablesPageIndexCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDrawablesPageIndexCommandArchive& operator=(MoveDrawablesPageIndexCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveDrawablesPageIndexCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveDrawablesPageIndexCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MoveDrawablesPageIndexCommandArchive*>(
               &_MoveDrawablesPageIndexCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MoveDrawablesPageIndexCommandArchive& a, MoveDrawablesPageIndexCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDrawablesPageIndexCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveDrawablesPageIndexCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveDrawablesPageIndexCommandArchive* New() const final {
    return CreateMaybeMessage<MoveDrawablesPageIndexCommandArchive>(nullptr);
  }

  MoveDrawablesPageIndexCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveDrawablesPageIndexCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveDrawablesPageIndexCommandArchive& from);
  void MergeFrom(const MoveDrawablesPageIndexCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDrawablesPageIndexCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.MoveDrawablesPageIndexCommandArchive";
  }
  protected:
  explicit MoveDrawablesPageIndexCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MoveDrawablesPageIndexCommandArchive_Drawable Drawable;

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 3,
    kDrawableInfoIdPathListFieldNumber = 5,
    kPageIndexListFieldNumber = 6,
    kOriginalPageIndexListFieldNumber = 7,
    kTagsListFieldNumber = 8,
    kOriginalTagsListFieldNumber = 9,
    kSuperFieldNumber = 1,
    kPageIndexFieldNumber = 2,
    kMaintainZOrderFieldNumber = 4,
    kPreserveTagsFieldNumber = 10,
  };
  // repeated .TP.MoveDrawablesPageIndexCommandArchive.Drawable drawables = 3 [deprecated = true];
  PROTOBUF_DEPRECATED int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_drawables();
  PROTOBUF_DEPRECATED ::TP::MoveDrawablesPageIndexCommandArchive_Drawable* mutable_drawables(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::MoveDrawablesPageIndexCommandArchive_Drawable >*
      mutable_drawables();
  private:
  const ::TP::MoveDrawablesPageIndexCommandArchive_Drawable& _internal_drawables(int index) const;
  ::TP::MoveDrawablesPageIndexCommandArchive_Drawable* _internal_add_drawables();
  public:
  PROTOBUF_DEPRECATED const ::TP::MoveDrawablesPageIndexCommandArchive_Drawable& drawables(int index) const;
  PROTOBUF_DEPRECATED ::TP::MoveDrawablesPageIndexCommandArchive_Drawable* add_drawables();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::MoveDrawablesPageIndexCommandArchive_Drawable >&
      drawables() const;

  // repeated .TSP.UUIDPath drawable_info_id_path_list = 5;
  int drawable_info_id_path_list_size() const;
  private:
  int _internal_drawable_info_id_path_list_size() const;
  public:
  void clear_drawable_info_id_path_list();
  ::TSP::UUIDPath* mutable_drawable_info_id_path_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
      mutable_drawable_info_id_path_list();
  private:
  const ::TSP::UUIDPath& _internal_drawable_info_id_path_list(int index) const;
  ::TSP::UUIDPath* _internal_add_drawable_info_id_path_list();
  public:
  const ::TSP::UUIDPath& drawable_info_id_path_list(int index) const;
  ::TSP::UUIDPath* add_drawable_info_id_path_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
      drawable_info_id_path_list() const;

  // repeated uint32 page_index_list = 6;
  int page_index_list_size() const;
  private:
  int _internal_page_index_list_size() const;
  public:
  void clear_page_index_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_index_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_page_index_list() const;
  void _internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_page_index_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index_list(int index) const;
  void set_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      page_index_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_page_index_list();

  // repeated uint32 original_page_index_list = 7;
  int original_page_index_list_size() const;
  private:
  int _internal_original_page_index_list_size() const;
  public:
  void clear_original_page_index_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_original_page_index_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_original_page_index_list() const;
  void _internal_add_original_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_original_page_index_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 original_page_index_list(int index) const;
  void set_original_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_original_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      original_page_index_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_original_page_index_list();

  // repeated string tags_list = 8;
  int tags_list_size() const;
  private:
  int _internal_tags_list_size() const;
  public:
  void clear_tags_list();
  const std::string& tags_list(int index) const;
  std::string* mutable_tags_list(int index);
  void set_tags_list(int index, const std::string& value);
  void set_tags_list(int index, std::string&& value);
  void set_tags_list(int index, const char* value);
  void set_tags_list(int index, const char* value, size_t size);
  std::string* add_tags_list();
  void add_tags_list(const std::string& value);
  void add_tags_list(std::string&& value);
  void add_tags_list(const char* value);
  void add_tags_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags_list();
  private:
  const std::string& _internal_tags_list(int index) const;
  std::string* _internal_add_tags_list();
  public:

  // repeated string original_tags_list = 9;
  int original_tags_list_size() const;
  private:
  int _internal_original_tags_list_size() const;
  public:
  void clear_original_tags_list();
  const std::string& original_tags_list(int index) const;
  std::string* mutable_original_tags_list(int index);
  void set_original_tags_list(int index, const std::string& value);
  void set_original_tags_list(int index, std::string&& value);
  void set_original_tags_list(int index, const char* value);
  void set_original_tags_list(int index, const char* value, size_t size);
  std::string* add_original_tags_list();
  void add_original_tags_list(const std::string& value);
  void add_original_tags_list(std::string&& value);
  void add_original_tags_list(const char* value);
  void add_original_tags_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& original_tags_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_original_tags_list();
  private:
  const std::string& _internal_original_tags_list(int index) const;
  std::string* _internal_add_original_tags_list();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional uint32 page_index = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_page_index() const;
  private:
  bool _internal_has_page_index() const;
  public:
  PROTOBUF_DEPRECATED void clear_page_index();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 page_index() const;
  PROTOBUF_DEPRECATED void set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_index() const;
  void _internal_set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool maintain_z_order = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_maintain_z_order() const;
  private:
  bool _internal_has_maintain_z_order() const;
  public:
  PROTOBUF_DEPRECATED void clear_maintain_z_order();
  PROTOBUF_DEPRECATED bool maintain_z_order() const;
  PROTOBUF_DEPRECATED void set_maintain_z_order(bool value);
  private:
  bool _internal_maintain_z_order() const;
  void _internal_set_maintain_z_order(bool value);
  public:

  // optional bool preserve_tags = 10;
  bool has_preserve_tags() const;
  private:
  bool _internal_has_preserve_tags() const;
  public:
  void clear_preserve_tags();
  bool preserve_tags() const;
  void set_preserve_tags(bool value);
  private:
  bool _internal_preserve_tags() const;
  void _internal_set_preserve_tags(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TP.MoveDrawablesPageIndexCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::MoveDrawablesPageIndexCommandArchive_Drawable > drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath > drawable_info_id_path_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > page_index_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > original_page_index_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> original_tags_list_;
  ::TSK::CommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index_;
  bool maintain_z_order_;
  bool preserve_tags_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InsertSectionBreakCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.InsertSectionBreakCommandArchive) */ {
 public:
  inline InsertSectionBreakCommandArchive() : InsertSectionBreakCommandArchive(nullptr) {}
  ~InsertSectionBreakCommandArchive() override;
  explicit constexpr InsertSectionBreakCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertSectionBreakCommandArchive(const InsertSectionBreakCommandArchive& from);
  InsertSectionBreakCommandArchive(InsertSectionBreakCommandArchive&& from) noexcept
    : InsertSectionBreakCommandArchive() {
    *this = ::std::move(from);
  }

  inline InsertSectionBreakCommandArchive& operator=(const InsertSectionBreakCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertSectionBreakCommandArchive& operator=(InsertSectionBreakCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertSectionBreakCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertSectionBreakCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InsertSectionBreakCommandArchive*>(
               &_InsertSectionBreakCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InsertSectionBreakCommandArchive& a, InsertSectionBreakCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertSectionBreakCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertSectionBreakCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertSectionBreakCommandArchive* New() const final {
    return CreateMaybeMessage<InsertSectionBreakCommandArchive>(nullptr);
  }

  InsertSectionBreakCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertSectionBreakCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertSectionBreakCommandArchive& from);
  void MergeFrom(const InsertSectionBreakCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertSectionBreakCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.InsertSectionBreakCommandArchive";
  }
  protected:
  explicit InsertSectionBreakCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSWP.StorageActionCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StorageActionCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::StorageActionCommandArchive* release_super();
  ::TSWP::StorageActionCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StorageActionCommandArchive* super);
  private:
  const ::TSWP::StorageActionCommandArchive& _internal_super() const;
  ::TSWP::StorageActionCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StorageActionCommandArchive* super);
  ::TSWP::StorageActionCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TP.InsertSectionBreakCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::StorageActionCommandArchive* super_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MoveDrawableZOrderCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.MoveDrawableZOrderCommandArchive) */ {
 public:
  inline MoveDrawableZOrderCommandArchive() : MoveDrawableZOrderCommandArchive(nullptr) {}
  ~MoveDrawableZOrderCommandArchive() override;
  explicit constexpr MoveDrawableZOrderCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveDrawableZOrderCommandArchive(const MoveDrawableZOrderCommandArchive& from);
  MoveDrawableZOrderCommandArchive(MoveDrawableZOrderCommandArchive&& from) noexcept
    : MoveDrawableZOrderCommandArchive() {
    *this = ::std::move(from);
  }

  inline MoveDrawableZOrderCommandArchive& operator=(const MoveDrawableZOrderCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDrawableZOrderCommandArchive& operator=(MoveDrawableZOrderCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveDrawableZOrderCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveDrawableZOrderCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MoveDrawableZOrderCommandArchive*>(
               &_MoveDrawableZOrderCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MoveDrawableZOrderCommandArchive& a, MoveDrawableZOrderCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDrawableZOrderCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveDrawableZOrderCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveDrawableZOrderCommandArchive* New() const final {
    return CreateMaybeMessage<MoveDrawableZOrderCommandArchive>(nullptr);
  }

  MoveDrawableZOrderCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveDrawableZOrderCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveDrawableZOrderCommandArchive& from);
  void MergeFrom(const MoveDrawableZOrderCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDrawableZOrderCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.MoveDrawableZOrderCommandArchive";
  }
  protected:
  explicit MoveDrawableZOrderCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 2,
    kSuperFieldNumber = 1,
    kActionStringIndexFieldNumber = 3,
  };
  // repeated .TSK.RearrangeIdOperationArgs args_list = 2;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::RearrangeIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::RearrangeIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::RearrangeIdOperationArgs& args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
      args_list() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional uint32 action_string_index = 3;
  bool has_action_string_index() const;
  private:
  bool _internal_has_action_string_index() const;
  public:
  void clear_action_string_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 action_string_index() const;
  void set_action_string_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_action_string_index() const;
  void _internal_set_action_string_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.MoveDrawableZOrderCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs > args_list_;
  ::TSK::CommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 action_string_index_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoveDrawablesCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.RemoveDrawablesCommandArchive) */ {
 public:
  inline RemoveDrawablesCommandArchive() : RemoveDrawablesCommandArchive(nullptr) {}
  ~RemoveDrawablesCommandArchive() override;
  explicit constexpr RemoveDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveDrawablesCommandArchive(const RemoveDrawablesCommandArchive& from);
  RemoveDrawablesCommandArchive(RemoveDrawablesCommandArchive&& from) noexcept
    : RemoveDrawablesCommandArchive() {
    *this = ::std::move(from);
  }

  inline RemoveDrawablesCommandArchive& operator=(const RemoveDrawablesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveDrawablesCommandArchive& operator=(RemoveDrawablesCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveDrawablesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveDrawablesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const RemoveDrawablesCommandArchive*>(
               &_RemoveDrawablesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RemoveDrawablesCommandArchive& a, RemoveDrawablesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveDrawablesCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveDrawablesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveDrawablesCommandArchive* New() const final {
    return CreateMaybeMessage<RemoveDrawablesCommandArchive>(nullptr);
  }

  RemoveDrawablesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveDrawablesCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveDrawablesCommandArchive& from);
  void MergeFrom(const RemoveDrawablesCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveDrawablesCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.RemoveDrawablesCommandArchive";
  }
  protected:
  explicit RemoveDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 2,
    kDrawableInfoListFieldNumber = 3,
    kPageIndexListFieldNumber = 4,
    kTagsListFieldNumber = 5,
    kSuperFieldNumber = 1,
  };
  // repeated .TSK.RemoveIdOperationArgs args_list = 2;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::RemoveIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::RemoveIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::RemoveIdOperationArgs& args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
      args_list() const;

  // repeated .TSP.Reference drawable_info_list = 3;
  int drawable_info_list_size() const;
  private:
  int _internal_drawable_info_list_size() const;
  public:
  void clear_drawable_info_list();
  ::TSP::Reference* mutable_drawable_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawable_info_list();
  private:
  const ::TSP::Reference& _internal_drawable_info_list(int index) const;
  ::TSP::Reference* _internal_add_drawable_info_list();
  public:
  const ::TSP::Reference& drawable_info_list(int index) const;
  ::TSP::Reference* add_drawable_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawable_info_list() const;

  // repeated uint32 page_index_list = 4;
  int page_index_list_size() const;
  private:
  int _internal_page_index_list_size() const;
  public:
  void clear_page_index_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_index_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_page_index_list() const;
  void _internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_page_index_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index_list(int index) const;
  void set_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      page_index_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_page_index_list();

  // repeated string tags_list = 5;
  int tags_list_size() const;
  private:
  int _internal_tags_list_size() const;
  public:
  void clear_tags_list();
  const std::string& tags_list(int index) const;
  std::string* mutable_tags_list(int index);
  void set_tags_list(int index, const std::string& value);
  void set_tags_list(int index, std::string&& value);
  void set_tags_list(int index, const char* value);
  void set_tags_list(int index, const char* value, size_t size);
  std::string* add_tags_list();
  void add_tags_list(const std::string& value);
  void add_tags_list(std::string&& value);
  void add_tags_list(const char* value);
  void add_tags_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags_list();
  private:
  const std::string& _internal_tags_list(int index) const;
  std::string* _internal_add_tags_list();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TP.RemoveDrawablesCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs > args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawable_info_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > page_index_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_list_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChangeSectionMarginsCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ChangeSectionMarginsCommandArchive) */ {
 public:
  inline ChangeSectionMarginsCommandArchive() : ChangeSectionMarginsCommandArchive(nullptr) {}
  ~ChangeSectionMarginsCommandArchive() override;
  explicit constexpr ChangeSectionMarginsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeSectionMarginsCommandArchive(const ChangeSectionMarginsCommandArchive& from);
  ChangeSectionMarginsCommandArchive(ChangeSectionMarginsCommandArchive&& from) noexcept
    : ChangeSectionMarginsCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChangeSectionMarginsCommandArchive& operator=(const ChangeSectionMarginsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeSectionMarginsCommandArchive& operator=(ChangeSectionMarginsCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeSectionMarginsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeSectionMarginsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChangeSectionMarginsCommandArchive*>(
               &_ChangeSectionMarginsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChangeSectionMarginsCommandArchive& a, ChangeSectionMarginsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeSectionMarginsCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeSectionMarginsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeSectionMarginsCommandArchive* New() const final {
    return CreateMaybeMessage<ChangeSectionMarginsCommandArchive>(nullptr);
  }

  ChangeSectionMarginsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeSectionMarginsCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeSectionMarginsCommandArchive& from);
  void MergeFrom(const ChangeSectionMarginsCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeSectionMarginsCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ChangeSectionMarginsCommandArchive";
  }
  protected:
  explicit ChangeSectionMarginsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChangeSectionMarginsCommandArchive_SectionMargin SectionMargin;
  static constexpr SectionMargin kSectionMarginLeft =
    ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginLeft;
  static constexpr SectionMargin kSectionMarginRight =
    ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginRight;
  static constexpr SectionMargin kSectionMarginTop =
    ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginTop;
  static constexpr SectionMargin kSectionMarginBottom =
    ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginBottom;
  static constexpr SectionMargin kSectionMarginHeader =
    ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginHeader;
  static constexpr SectionMargin kSectionMarginFooter =
    ChangeSectionMarginsCommandArchive_SectionMargin_kSectionMarginFooter;
  static inline bool SectionMargin_IsValid(int value) {
    return ChangeSectionMarginsCommandArchive_SectionMargin_IsValid(value);
  }
  static constexpr SectionMargin SectionMargin_MIN =
    ChangeSectionMarginsCommandArchive_SectionMargin_SectionMargin_MIN;
  static constexpr SectionMargin SectionMargin_MAX =
    ChangeSectionMarginsCommandArchive_SectionMargin_SectionMargin_MAX;
  static constexpr int SectionMargin_ARRAYSIZE =
    ChangeSectionMarginsCommandArchive_SectionMargin_SectionMargin_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SectionMargin_descriptor() {
    return ChangeSectionMarginsCommandArchive_SectionMargin_descriptor();
  }
  template<typename T>
  static inline const std::string& SectionMargin_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SectionMargin>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SectionMargin_Name.");
    return ChangeSectionMarginsCommandArchive_SectionMargin_Name(enum_t_value);
  }
  static inline bool SectionMargin_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SectionMargin* value) {
    return ChangeSectionMarginsCommandArchive_SectionMargin_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSectionFieldNumber = 2,
    kMarginFieldNumber = 3,
    kMarginValueFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference section = 2;
  bool has_section() const;
  private:
  bool _internal_has_section() const;
  public:
  void clear_section();
  const ::TSP::Reference& section() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_section();
  ::TSP::Reference* mutable_section();
  void set_allocated_section(::TSP::Reference* section);
  private:
  const ::TSP::Reference& _internal_section() const;
  ::TSP::Reference* _internal_mutable_section();
  public:
  void unsafe_arena_set_allocated_section(
      ::TSP::Reference* section);
  ::TSP::Reference* unsafe_arena_release_section();

  // optional .TP.ChangeSectionMarginsCommandArchive.SectionMargin margin = 3;
  bool has_margin() const;
  private:
  bool _internal_has_margin() const;
  public:
  void clear_margin();
  ::TP::ChangeSectionMarginsCommandArchive_SectionMargin margin() const;
  void set_margin(::TP::ChangeSectionMarginsCommandArchive_SectionMargin value);
  private:
  ::TP::ChangeSectionMarginsCommandArchive_SectionMargin _internal_margin() const;
  void _internal_set_margin(::TP::ChangeSectionMarginsCommandArchive_SectionMargin value);
  public:

  // optional float margin_value = 4;
  bool has_margin_value() const;
  private:
  bool _internal_has_margin_value() const;
  public:
  void clear_margin_value();
  float margin_value() const;
  void set_margin_value(float value);
  private:
  float _internal_margin_value() const;
  void _internal_set_margin_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:TP.ChangeSectionMarginsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* section_;
  int margin_;
  float margin_value_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InsertMasterDrawablesCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.InsertMasterDrawablesCommandArchive) */ {
 public:
  inline InsertMasterDrawablesCommandArchive() : InsertMasterDrawablesCommandArchive(nullptr) {}
  ~InsertMasterDrawablesCommandArchive() override;
  explicit constexpr InsertMasterDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertMasterDrawablesCommandArchive(const InsertMasterDrawablesCommandArchive& from);
  InsertMasterDrawablesCommandArchive(InsertMasterDrawablesCommandArchive&& from) noexcept
    : InsertMasterDrawablesCommandArchive() {
    *this = ::std::move(from);
  }

  inline InsertMasterDrawablesCommandArchive& operator=(const InsertMasterDrawablesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertMasterDrawablesCommandArchive& operator=(InsertMasterDrawablesCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertMasterDrawablesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertMasterDrawablesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InsertMasterDrawablesCommandArchive*>(
               &_InsertMasterDrawablesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InsertMasterDrawablesCommandArchive& a, InsertMasterDrawablesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertMasterDrawablesCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertMasterDrawablesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertMasterDrawablesCommandArchive* New() const final {
    return CreateMaybeMessage<InsertMasterDrawablesCommandArchive>(nullptr);
  }

  InsertMasterDrawablesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertMasterDrawablesCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertMasterDrawablesCommandArchive& from);
  void MergeFrom(const InsertMasterDrawablesCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertMasterDrawablesCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.InsertMasterDrawablesCommandArchive";
  }
  protected:
  explicit InsertMasterDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterDrawablesFieldNumber = 3,
    kCustomFormatKeysFieldNumber = 6,
    kSuperFieldNumber = 1,
    kOBSOLETESectionFieldNumber = 2,
    kMasterDrawableProviderFieldNumber = 5,
    kDrawableIndexFieldNumber = 4,
  };
  // repeated .TSP.Reference master_drawables = 3;
  int master_drawables_size() const;
  private:
  int _internal_master_drawables_size() const;
  public:
  void clear_master_drawables();
  ::TSP::Reference* mutable_master_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_master_drawables();
  private:
  const ::TSP::Reference& _internal_master_drawables(int index) const;
  ::TSP::Reference* _internal_add_master_drawables();
  public:
  const ::TSP::Reference& master_drawables(int index) const;
  ::TSP::Reference* add_master_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      master_drawables() const;

  // repeated .TSP.UUID custom_format_keys = 6;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference OBSOLETE_section = 2;
  bool has_obsolete_section() const;
  private:
  bool _internal_has_obsolete_section() const;
  public:
  void clear_obsolete_section();
  const ::TSP::Reference& obsolete_section() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_obsolete_section();
  ::TSP::Reference* mutable_obsolete_section();
  void set_allocated_obsolete_section(::TSP::Reference* obsolete_section);
  private:
  const ::TSP::Reference& _internal_obsolete_section() const;
  ::TSP::Reference* _internal_mutable_obsolete_section();
  public:
  void unsafe_arena_set_allocated_obsolete_section(
      ::TSP::Reference* obsolete_section);
  ::TSP::Reference* unsafe_arena_release_obsolete_section();

  // optional .TSP.Reference master_drawable_provider = 5;
  bool has_master_drawable_provider() const;
  private:
  bool _internal_has_master_drawable_provider() const;
  public:
  void clear_master_drawable_provider();
  const ::TSP::Reference& master_drawable_provider() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_master_drawable_provider();
  ::TSP::Reference* mutable_master_drawable_provider();
  void set_allocated_master_drawable_provider(::TSP::Reference* master_drawable_provider);
  private:
  const ::TSP::Reference& _internal_master_drawable_provider() const;
  ::TSP::Reference* _internal_mutable_master_drawable_provider();
  public:
  void unsafe_arena_set_allocated_master_drawable_provider(
      ::TSP::Reference* master_drawable_provider);
  ::TSP::Reference* unsafe_arena_release_master_drawable_provider();

  // optional uint32 drawable_index = 4;
  bool has_drawable_index() const;
  private:
  bool _internal_has_drawable_index() const;
  public:
  void clear_drawable_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 drawable_index() const;
  void set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drawable_index() const;
  void _internal_set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.InsertMasterDrawablesCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > master_drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* obsolete_section_;
  ::TSP::Reference* master_drawable_provider_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drawable_index_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MoveMasterDrawableZOrderCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.MoveMasterDrawableZOrderCommandArchive) */ {
 public:
  inline MoveMasterDrawableZOrderCommandArchive() : MoveMasterDrawableZOrderCommandArchive(nullptr) {}
  ~MoveMasterDrawableZOrderCommandArchive() override;
  explicit constexpr MoveMasterDrawableZOrderCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveMasterDrawableZOrderCommandArchive(const MoveMasterDrawableZOrderCommandArchive& from);
  MoveMasterDrawableZOrderCommandArchive(MoveMasterDrawableZOrderCommandArchive&& from) noexcept
    : MoveMasterDrawableZOrderCommandArchive() {
    *this = ::std::move(from);
  }

  inline MoveMasterDrawableZOrderCommandArchive& operator=(const MoveMasterDrawableZOrderCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveMasterDrawableZOrderCommandArchive& operator=(MoveMasterDrawableZOrderCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveMasterDrawableZOrderCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveMasterDrawableZOrderCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MoveMasterDrawableZOrderCommandArchive*>(
               &_MoveMasterDrawableZOrderCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MoveMasterDrawableZOrderCommandArchive& a, MoveMasterDrawableZOrderCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveMasterDrawableZOrderCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveMasterDrawableZOrderCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveMasterDrawableZOrderCommandArchive* New() const final {
    return CreateMaybeMessage<MoveMasterDrawableZOrderCommandArchive>(nullptr);
  }

  MoveMasterDrawableZOrderCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveMasterDrawableZOrderCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveMasterDrawableZOrderCommandArchive& from);
  void MergeFrom(const MoveMasterDrawableZOrderCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveMasterDrawableZOrderCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.MoveMasterDrawableZOrderCommandArchive";
  }
  protected:
  explicit MoveMasterDrawableZOrderCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterDrawablesFieldNumber = 3,
    kIndexesFieldNumber = 4,
    kSuperFieldNumber = 1,
    kOBSOLETESectionFieldNumber = 2,
    kMasterDrawableProviderFieldNumber = 5,
  };
  // repeated .TSP.Reference master_drawables = 3;
  int master_drawables_size() const;
  private:
  int _internal_master_drawables_size() const;
  public:
  void clear_master_drawables();
  ::TSP::Reference* mutable_master_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_master_drawables();
  private:
  const ::TSP::Reference& _internal_master_drawables(int index) const;
  ::TSP::Reference* _internal_add_master_drawables();
  public:
  const ::TSP::Reference& master_drawables(int index) const;
  ::TSP::Reference* add_master_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      master_drawables() const;

  // repeated uint32 indexes = 4;
  int indexes_size() const;
  private:
  int _internal_indexes_size() const;
  public:
  void clear_indexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_indexes() const;
  void _internal_add_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_indexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 indexes(int index) const;
  void set_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_indexes();

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference OBSOLETE_section = 2;
  bool has_obsolete_section() const;
  private:
  bool _internal_has_obsolete_section() const;
  public:
  void clear_obsolete_section();
  const ::TSP::Reference& obsolete_section() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_obsolete_section();
  ::TSP::Reference* mutable_obsolete_section();
  void set_allocated_obsolete_section(::TSP::Reference* obsolete_section);
  private:
  const ::TSP::Reference& _internal_obsolete_section() const;
  ::TSP::Reference* _internal_mutable_obsolete_section();
  public:
  void unsafe_arena_set_allocated_obsolete_section(
      ::TSP::Reference* obsolete_section);
  ::TSP::Reference* unsafe_arena_release_obsolete_section();

  // optional .TSP.Reference master_drawable_provider = 5;
  bool has_master_drawable_provider() const;
  private:
  bool _internal_has_master_drawable_provider() const;
  public:
  void clear_master_drawable_provider();
  const ::TSP::Reference& master_drawable_provider() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_master_drawable_provider();
  ::TSP::Reference* mutable_master_drawable_provider();
  void set_allocated_master_drawable_provider(::TSP::Reference* master_drawable_provider);
  private:
  const ::TSP::Reference& _internal_master_drawable_provider() const;
  ::TSP::Reference* _internal_mutable_master_drawable_provider();
  public:
  void unsafe_arena_set_allocated_master_drawable_provider(
      ::TSP::Reference* master_drawable_provider);
  ::TSP::Reference* unsafe_arena_release_master_drawable_provider();

  // @@protoc_insertion_point(class_scope:TP.MoveMasterDrawableZOrderCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > master_drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > indexes_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* obsolete_section_;
  ::TSP::Reference* master_drawable_provider_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoveMasterDrawablesCommandArchive_MasterDrawable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable) */ {
 public:
  inline RemoveMasterDrawablesCommandArchive_MasterDrawable() : RemoveMasterDrawablesCommandArchive_MasterDrawable(nullptr) {}
  ~RemoveMasterDrawablesCommandArchive_MasterDrawable() override;
  explicit constexpr RemoveMasterDrawablesCommandArchive_MasterDrawable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveMasterDrawablesCommandArchive_MasterDrawable(const RemoveMasterDrawablesCommandArchive_MasterDrawable& from);
  RemoveMasterDrawablesCommandArchive_MasterDrawable(RemoveMasterDrawablesCommandArchive_MasterDrawable&& from) noexcept
    : RemoveMasterDrawablesCommandArchive_MasterDrawable() {
    *this = ::std::move(from);
  }

  inline RemoveMasterDrawablesCommandArchive_MasterDrawable& operator=(const RemoveMasterDrawablesCommandArchive_MasterDrawable& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveMasterDrawablesCommandArchive_MasterDrawable& operator=(RemoveMasterDrawablesCommandArchive_MasterDrawable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveMasterDrawablesCommandArchive_MasterDrawable& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveMasterDrawablesCommandArchive_MasterDrawable* internal_default_instance() {
    return reinterpret_cast<const RemoveMasterDrawablesCommandArchive_MasterDrawable*>(
               &_RemoveMasterDrawablesCommandArchive_MasterDrawable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RemoveMasterDrawablesCommandArchive_MasterDrawable& a, RemoveMasterDrawablesCommandArchive_MasterDrawable& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveMasterDrawablesCommandArchive_MasterDrawable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveMasterDrawablesCommandArchive_MasterDrawable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveMasterDrawablesCommandArchive_MasterDrawable* New() const final {
    return CreateMaybeMessage<RemoveMasterDrawablesCommandArchive_MasterDrawable>(nullptr);
  }

  RemoveMasterDrawablesCommandArchive_MasterDrawable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveMasterDrawablesCommandArchive_MasterDrawable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveMasterDrawablesCommandArchive_MasterDrawable& from);
  void MergeFrom(const RemoveMasterDrawablesCommandArchive_MasterDrawable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveMasterDrawablesCommandArchive_MasterDrawable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.RemoveMasterDrawablesCommandArchive.MasterDrawable";
  }
  protected:
  explicit RemoveMasterDrawablesCommandArchive_MasterDrawable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableFieldNumber = 1,
    kDrawableIndexFieldNumber = 2,
  };
  // optional .TSP.Reference drawable = 1;
  bool has_drawable() const;
  private:
  bool _internal_has_drawable() const;
  public:
  void clear_drawable();
  const ::TSP::Reference& drawable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_drawable();
  ::TSP::Reference* mutable_drawable();
  void set_allocated_drawable(::TSP::Reference* drawable);
  private:
  const ::TSP::Reference& _internal_drawable() const;
  ::TSP::Reference* _internal_mutable_drawable();
  public:
  void unsafe_arena_set_allocated_drawable(
      ::TSP::Reference* drawable);
  ::TSP::Reference* unsafe_arena_release_drawable();

  // optional uint32 drawable_index = 2;
  bool has_drawable_index() const;
  private:
  bool _internal_has_drawable_index() const;
  public:
  void clear_drawable_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 drawable_index() const;
  void set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drawable_index() const;
  void _internal_set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* drawable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drawable_index_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoveMasterDrawablesCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.RemoveMasterDrawablesCommandArchive) */ {
 public:
  inline RemoveMasterDrawablesCommandArchive() : RemoveMasterDrawablesCommandArchive(nullptr) {}
  ~RemoveMasterDrawablesCommandArchive() override;
  explicit constexpr RemoveMasterDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveMasterDrawablesCommandArchive(const RemoveMasterDrawablesCommandArchive& from);
  RemoveMasterDrawablesCommandArchive(RemoveMasterDrawablesCommandArchive&& from) noexcept
    : RemoveMasterDrawablesCommandArchive() {
    *this = ::std::move(from);
  }

  inline RemoveMasterDrawablesCommandArchive& operator=(const RemoveMasterDrawablesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveMasterDrawablesCommandArchive& operator=(RemoveMasterDrawablesCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveMasterDrawablesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveMasterDrawablesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const RemoveMasterDrawablesCommandArchive*>(
               &_RemoveMasterDrawablesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RemoveMasterDrawablesCommandArchive& a, RemoveMasterDrawablesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveMasterDrawablesCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveMasterDrawablesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveMasterDrawablesCommandArchive* New() const final {
    return CreateMaybeMessage<RemoveMasterDrawablesCommandArchive>(nullptr);
  }

  RemoveMasterDrawablesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveMasterDrawablesCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveMasterDrawablesCommandArchive& from);
  void MergeFrom(const RemoveMasterDrawablesCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveMasterDrawablesCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.RemoveMasterDrawablesCommandArchive";
  }
  protected:
  explicit RemoveMasterDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RemoveMasterDrawablesCommandArchive_MasterDrawable MasterDrawable;

  // accessors -------------------------------------------------------

  enum : int {
    kMasterDrawablesFieldNumber = 3,
    kSuperFieldNumber = 1,
    kOBSOLETESectionFieldNumber = 2,
    kMasterDrawableProviderFieldNumber = 4,
  };
  // repeated .TP.RemoveMasterDrawablesCommandArchive.MasterDrawable master_drawables = 3;
  int master_drawables_size() const;
  private:
  int _internal_master_drawables_size() const;
  public:
  void clear_master_drawables();
  ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable* mutable_master_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable >*
      mutable_master_drawables();
  private:
  const ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable& _internal_master_drawables(int index) const;
  ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable* _internal_add_master_drawables();
  public:
  const ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable& master_drawables(int index) const;
  ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable* add_master_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable >&
      master_drawables() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference OBSOLETE_section = 2;
  bool has_obsolete_section() const;
  private:
  bool _internal_has_obsolete_section() const;
  public:
  void clear_obsolete_section();
  const ::TSP::Reference& obsolete_section() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_obsolete_section();
  ::TSP::Reference* mutable_obsolete_section();
  void set_allocated_obsolete_section(::TSP::Reference* obsolete_section);
  private:
  const ::TSP::Reference& _internal_obsolete_section() const;
  ::TSP::Reference* _internal_mutable_obsolete_section();
  public:
  void unsafe_arena_set_allocated_obsolete_section(
      ::TSP::Reference* obsolete_section);
  ::TSP::Reference* unsafe_arena_release_obsolete_section();

  // optional .TSP.Reference master_drawable_provider = 4;
  bool has_master_drawable_provider() const;
  private:
  bool _internal_has_master_drawable_provider() const;
  public:
  void clear_master_drawable_provider();
  const ::TSP::Reference& master_drawable_provider() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_master_drawable_provider();
  ::TSP::Reference* mutable_master_drawable_provider();
  void set_allocated_master_drawable_provider(::TSP::Reference* master_drawable_provider);
  private:
  const ::TSP::Reference& _internal_master_drawable_provider() const;
  ::TSP::Reference* _internal_mutable_master_drawable_provider();
  public:
  void unsafe_arena_set_allocated_master_drawable_provider(
      ::TSP::Reference* master_drawable_provider);
  ::TSP::Reference* unsafe_arena_release_master_drawable_provider();

  // @@protoc_insertion_point(class_scope:TP.RemoveMasterDrawablesCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable > master_drawables_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* obsolete_section_;
  ::TSP::Reference* master_drawable_provider_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class PasteMasterDrawablesCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.PasteMasterDrawablesCommandArchive) */ {
 public:
  inline PasteMasterDrawablesCommandArchive() : PasteMasterDrawablesCommandArchive(nullptr) {}
  ~PasteMasterDrawablesCommandArchive() override;
  explicit constexpr PasteMasterDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasteMasterDrawablesCommandArchive(const PasteMasterDrawablesCommandArchive& from);
  PasteMasterDrawablesCommandArchive(PasteMasterDrawablesCommandArchive&& from) noexcept
    : PasteMasterDrawablesCommandArchive() {
    *this = ::std::move(from);
  }

  inline PasteMasterDrawablesCommandArchive& operator=(const PasteMasterDrawablesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasteMasterDrawablesCommandArchive& operator=(PasteMasterDrawablesCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasteMasterDrawablesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasteMasterDrawablesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const PasteMasterDrawablesCommandArchive*>(
               &_PasteMasterDrawablesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PasteMasterDrawablesCommandArchive& a, PasteMasterDrawablesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PasteMasterDrawablesCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasteMasterDrawablesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasteMasterDrawablesCommandArchive* New() const final {
    return CreateMaybeMessage<PasteMasterDrawablesCommandArchive>(nullptr);
  }

  PasteMasterDrawablesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasteMasterDrawablesCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PasteMasterDrawablesCommandArchive& from);
  void MergeFrom(const PasteMasterDrawablesCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PasteMasterDrawablesCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.PasteMasterDrawablesCommandArchive";
  }
  protected:
  explicit PasteMasterDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterDrawablesFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSectionFieldNumber = 2,
    kDrawableIndexFieldNumber = 4,
  };
  // repeated .TSP.Reference master_drawables = 3;
  int master_drawables_size() const;
  private:
  int _internal_master_drawables_size() const;
  public:
  void clear_master_drawables();
  ::TSP::Reference* mutable_master_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_master_drawables();
  private:
  const ::TSP::Reference& _internal_master_drawables(int index) const;
  ::TSP::Reference* _internal_add_master_drawables();
  public:
  const ::TSP::Reference& master_drawables(int index) const;
  ::TSP::Reference* add_master_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      master_drawables() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference section = 2;
  bool has_section() const;
  private:
  bool _internal_has_section() const;
  public:
  void clear_section();
  const ::TSP::Reference& section() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_section();
  ::TSP::Reference* mutable_section();
  void set_allocated_section(::TSP::Reference* section);
  private:
  const ::TSP::Reference& _internal_section() const;
  ::TSP::Reference* _internal_mutable_section();
  public:
  void unsafe_arena_set_allocated_section(
      ::TSP::Reference* section);
  ::TSP::Reference* unsafe_arena_release_section();

  // optional uint32 drawable_index = 4;
  bool has_drawable_index() const;
  private:
  bool _internal_has_drawable_index() const;
  public:
  void clear_drawable_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 drawable_index() const;
  void set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drawable_index() const;
  void _internal_set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.PasteMasterDrawablesCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > master_drawables_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* section_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drawable_index_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition) */ {
 public:
  inline MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition() : MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition(nullptr) {}
  ~MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition() override;
  explicit constexpr MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition(const MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& from);
  MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition(MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition&& from) noexcept
    : MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition() {
    *this = ::std::move(from);
  }

  inline MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& operator=(const MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& operator=(MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* internal_default_instance() {
    return reinterpret_cast<const MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition*>(
               &_MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& a, MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* New() const final {
    return CreateMaybeMessage<MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition>(nullptr);
  }

  MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& from);
  void MergeFrom(const MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition";
  }
  protected:
  explicit MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharIndexFieldNumber = 1,
    kHOffsetTypeFieldNumber = 2,
    kHOffsetFieldNumber = 3,
    kVOffsetTypeFieldNumber = 4,
    kVOffsetFieldNumber = 5,
  };
  // optional int32 char_index = 1;
  bool has_char_index() const;
  private:
  bool _internal_has_char_index() const;
  public:
  void clear_char_index();
  ::PROTOBUF_NAMESPACE_ID::int32 char_index() const;
  void set_char_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_char_index() const;
  void _internal_set_char_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 h_offset_type = 2;
  bool has_h_offset_type() const;
  private:
  bool _internal_has_h_offset_type() const;
  public:
  void clear_h_offset_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 h_offset_type() const;
  void set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_h_offset_type() const;
  void _internal_set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float h_offset = 3;
  bool has_h_offset() const;
  private:
  bool _internal_has_h_offset() const;
  public:
  void clear_h_offset();
  float h_offset() const;
  void set_h_offset(float value);
  private:
  float _internal_h_offset() const;
  void _internal_set_h_offset(float value);
  public:

  // optional uint32 v_offset_type = 4;
  bool has_v_offset_type() const;
  private:
  bool _internal_has_v_offset_type() const;
  public:
  void clear_v_offset_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 v_offset_type() const;
  void set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_v_offset_type() const;
  void _internal_set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float v_offset = 5;
  bool has_v_offset() const;
  private:
  bool _internal_has_v_offset() const;
  public:
  void clear_v_offset();
  float v_offset() const;
  void set_v_offset(float value);
  private:
  float _internal_v_offset() const;
  void _internal_set_v_offset(float value);
  public:

  // @@protoc_insertion_point(class_scope:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 char_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 h_offset_type_;
  float h_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 v_offset_type_;
  float v_offset_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MoveDrawablesAttachedCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.MoveDrawablesAttachedCommandArchive) */ {
 public:
  inline MoveDrawablesAttachedCommandArchive() : MoveDrawablesAttachedCommandArchive(nullptr) {}
  ~MoveDrawablesAttachedCommandArchive() override;
  explicit constexpr MoveDrawablesAttachedCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveDrawablesAttachedCommandArchive(const MoveDrawablesAttachedCommandArchive& from);
  MoveDrawablesAttachedCommandArchive(MoveDrawablesAttachedCommandArchive&& from) noexcept
    : MoveDrawablesAttachedCommandArchive() {
    *this = ::std::move(from);
  }

  inline MoveDrawablesAttachedCommandArchive& operator=(const MoveDrawablesAttachedCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDrawablesAttachedCommandArchive& operator=(MoveDrawablesAttachedCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveDrawablesAttachedCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveDrawablesAttachedCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MoveDrawablesAttachedCommandArchive*>(
               &_MoveDrawablesAttachedCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MoveDrawablesAttachedCommandArchive& a, MoveDrawablesAttachedCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDrawablesAttachedCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveDrawablesAttachedCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveDrawablesAttachedCommandArchive* New() const final {
    return CreateMaybeMessage<MoveDrawablesAttachedCommandArchive>(nullptr);
  }

  MoveDrawablesAttachedCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveDrawablesAttachedCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveDrawablesAttachedCommandArchive& from);
  void MergeFrom(const MoveDrawablesAttachedCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDrawablesAttachedCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.MoveDrawablesAttachedCommandArchive";
  }
  protected:
  explicit MoveDrawablesAttachedCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition GSSPCharIndexAndPosition;

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 2,
    kRangeListFieldNumber = 3,
    kDrawableInfoIdPathListFieldNumber = 4,
    kPositionListFieldNumber = 5,
    kExteriorTextWrapListFieldNumber = 6,
    kOriginalPageIndexListFieldNumber = 7,
    kOriginalExteriorTextWrapListFieldNumber = 8,
    kOriginalAttachmentListFieldNumber = 9,
    kSuperFieldNumber = 1,
  };
  // repeated .TSK.IdPlacementOperationArgs args_list = 2;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::IdPlacementOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::IdPlacementOperationArgs& _internal_args_list(int index) const;
  ::TSK::IdPlacementOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::IdPlacementOperationArgs& args_list(int index) const;
  ::TSK::IdPlacementOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >&
      args_list() const;

  // repeated .TSP.Range range_list = 3;
  int range_list_size() const;
  private:
  int _internal_range_list_size() const;
  public:
  void clear_range_list();
  ::TSP::Range* mutable_range_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
      mutable_range_list();
  private:
  const ::TSP::Range& _internal_range_list(int index) const;
  ::TSP::Range* _internal_add_range_list();
  public:
  const ::TSP::Range& range_list(int index) const;
  ::TSP::Range* add_range_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
      range_list() const;

  // repeated .TSP.UUIDPath drawable_info_id_path_list = 4;
  int drawable_info_id_path_list_size() const;
  private:
  int _internal_drawable_info_id_path_list_size() const;
  public:
  void clear_drawable_info_id_path_list();
  ::TSP::UUIDPath* mutable_drawable_info_id_path_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
      mutable_drawable_info_id_path_list();
  private:
  const ::TSP::UUIDPath& _internal_drawable_info_id_path_list(int index) const;
  ::TSP::UUIDPath* _internal_add_drawable_info_id_path_list();
  public:
  const ::TSP::UUIDPath& drawable_info_id_path_list(int index) const;
  ::TSP::UUIDPath* add_drawable_info_id_path_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
      drawable_info_id_path_list() const;

  // repeated .TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition position_list = 5;
  int position_list_size() const;
  private:
  int _internal_position_list_size() const;
  public:
  void clear_position_list();
  ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* mutable_position_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition >*
      mutable_position_list();
  private:
  const ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& _internal_position_list(int index) const;
  ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* _internal_add_position_list();
  public:
  const ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& position_list(int index) const;
  ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* add_position_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition >&
      position_list() const;

  // repeated .TSD.ExteriorTextWrapArchive exterior_text_wrap_list = 6;
  int exterior_text_wrap_list_size() const;
  private:
  int _internal_exterior_text_wrap_list_size() const;
  public:
  void clear_exterior_text_wrap_list();
  ::TSD::ExteriorTextWrapArchive* mutable_exterior_text_wrap_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >*
      mutable_exterior_text_wrap_list();
  private:
  const ::TSD::ExteriorTextWrapArchive& _internal_exterior_text_wrap_list(int index) const;
  ::TSD::ExteriorTextWrapArchive* _internal_add_exterior_text_wrap_list();
  public:
  const ::TSD::ExteriorTextWrapArchive& exterior_text_wrap_list(int index) const;
  ::TSD::ExteriorTextWrapArchive* add_exterior_text_wrap_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >&
      exterior_text_wrap_list() const;

  // repeated uint32 original_page_index_list = 7;
  int original_page_index_list_size() const;
  private:
  int _internal_original_page_index_list_size() const;
  public:
  void clear_original_page_index_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_original_page_index_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_original_page_index_list() const;
  void _internal_add_original_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_original_page_index_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 original_page_index_list(int index) const;
  void set_original_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_original_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      original_page_index_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_original_page_index_list();

  // repeated .TSD.ExteriorTextWrapArchive original_exterior_text_wrap_list = 8;
  int original_exterior_text_wrap_list_size() const;
  private:
  int _internal_original_exterior_text_wrap_list_size() const;
  public:
  void clear_original_exterior_text_wrap_list();
  ::TSD::ExteriorTextWrapArchive* mutable_original_exterior_text_wrap_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >*
      mutable_original_exterior_text_wrap_list();
  private:
  const ::TSD::ExteriorTextWrapArchive& _internal_original_exterior_text_wrap_list(int index) const;
  ::TSD::ExteriorTextWrapArchive* _internal_add_original_exterior_text_wrap_list();
  public:
  const ::TSD::ExteriorTextWrapArchive& original_exterior_text_wrap_list(int index) const;
  ::TSD::ExteriorTextWrapArchive* add_original_exterior_text_wrap_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >&
      original_exterior_text_wrap_list() const;

  // repeated .TSP.Reference original_attachment_list = 9;
  int original_attachment_list_size() const;
  private:
  int _internal_original_attachment_list_size() const;
  public:
  void clear_original_attachment_list();
  ::TSP::Reference* mutable_original_attachment_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_original_attachment_list();
  private:
  const ::TSP::Reference& _internal_original_attachment_list(int index) const;
  ::TSP::Reference* _internal_add_original_attachment_list();
  public:
  const ::TSP::Reference& original_attachment_list(int index) const;
  ::TSP::Reference* add_original_attachment_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      original_attachment_list() const;

  // required .TSWP.StorageActionCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StorageActionCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::StorageActionCommandArchive* release_super();
  ::TSWP::StorageActionCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StorageActionCommandArchive* super);
  private:
  const ::TSWP::StorageActionCommandArchive& _internal_super() const;
  ::TSWP::StorageActionCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StorageActionCommandArchive* super);
  ::TSWP::StorageActionCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TP.MoveDrawablesAttachedCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs > args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range > range_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath > drawable_info_id_path_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition > position_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive > exterior_text_wrap_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > original_page_index_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive > original_exterior_text_wrap_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > original_attachment_list_;
  ::TSWP::StorageActionCommandArchive* super_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MoveDrawablesFloatingCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.MoveDrawablesFloatingCommandArchive) */ {
 public:
  inline MoveDrawablesFloatingCommandArchive() : MoveDrawablesFloatingCommandArchive(nullptr) {}
  ~MoveDrawablesFloatingCommandArchive() override;
  explicit constexpr MoveDrawablesFloatingCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveDrawablesFloatingCommandArchive(const MoveDrawablesFloatingCommandArchive& from);
  MoveDrawablesFloatingCommandArchive(MoveDrawablesFloatingCommandArchive&& from) noexcept
    : MoveDrawablesFloatingCommandArchive() {
    *this = ::std::move(from);
  }

  inline MoveDrawablesFloatingCommandArchive& operator=(const MoveDrawablesFloatingCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDrawablesFloatingCommandArchive& operator=(MoveDrawablesFloatingCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveDrawablesFloatingCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveDrawablesFloatingCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MoveDrawablesFloatingCommandArchive*>(
               &_MoveDrawablesFloatingCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MoveDrawablesFloatingCommandArchive& a, MoveDrawablesFloatingCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDrawablesFloatingCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveDrawablesFloatingCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveDrawablesFloatingCommandArchive* New() const final {
    return CreateMaybeMessage<MoveDrawablesFloatingCommandArchive>(nullptr);
  }

  MoveDrawablesFloatingCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveDrawablesFloatingCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveDrawablesFloatingCommandArchive& from);
  void MergeFrom(const MoveDrawablesFloatingCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDrawablesFloatingCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.MoveDrawablesFloatingCommandArchive";
  }
  protected:
  explicit MoveDrawablesFloatingCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 2,
    kRangeListFieldNumber = 3,
    kDrawableInfoIdPathListFieldNumber = 4,
    kPageIndexListFieldNumber = 5,
    kExteriorTextWrapListFieldNumber = 6,
    kOriginalAttachmentListFieldNumber = 7,
    kOriginalExteriorTextWrapListFieldNumber = 8,
    kSuperFieldNumber = 1,
  };
  // repeated .TSK.IdPlacementOperationArgs args_list = 2;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::IdPlacementOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::IdPlacementOperationArgs& _internal_args_list(int index) const;
  ::TSK::IdPlacementOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::IdPlacementOperationArgs& args_list(int index) const;
  ::TSK::IdPlacementOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >&
      args_list() const;

  // repeated .TSP.Range range_list = 3;
  int range_list_size() const;
  private:
  int _internal_range_list_size() const;
  public:
  void clear_range_list();
  ::TSP::Range* mutable_range_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
      mutable_range_list();
  private:
  const ::TSP::Range& _internal_range_list(int index) const;
  ::TSP::Range* _internal_add_range_list();
  public:
  const ::TSP::Range& range_list(int index) const;
  ::TSP::Range* add_range_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
      range_list() const;

  // repeated .TSP.UUIDPath drawable_info_id_path_list = 4;
  int drawable_info_id_path_list_size() const;
  private:
  int _internal_drawable_info_id_path_list_size() const;
  public:
  void clear_drawable_info_id_path_list();
  ::TSP::UUIDPath* mutable_drawable_info_id_path_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
      mutable_drawable_info_id_path_list();
  private:
  const ::TSP::UUIDPath& _internal_drawable_info_id_path_list(int index) const;
  ::TSP::UUIDPath* _internal_add_drawable_info_id_path_list();
  public:
  const ::TSP::UUIDPath& drawable_info_id_path_list(int index) const;
  ::TSP::UUIDPath* add_drawable_info_id_path_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
      drawable_info_id_path_list() const;

  // repeated uint32 page_index_list = 5;
  int page_index_list_size() const;
  private:
  int _internal_page_index_list_size() const;
  public:
  void clear_page_index_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_index_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_page_index_list() const;
  void _internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_page_index_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index_list(int index) const;
  void set_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      page_index_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_page_index_list();

  // repeated .TSD.ExteriorTextWrapArchive exterior_text_wrap_list = 6;
  int exterior_text_wrap_list_size() const;
  private:
  int _internal_exterior_text_wrap_list_size() const;
  public:
  void clear_exterior_text_wrap_list();
  ::TSD::ExteriorTextWrapArchive* mutable_exterior_text_wrap_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >*
      mutable_exterior_text_wrap_list();
  private:
  const ::TSD::ExteriorTextWrapArchive& _internal_exterior_text_wrap_list(int index) const;
  ::TSD::ExteriorTextWrapArchive* _internal_add_exterior_text_wrap_list();
  public:
  const ::TSD::ExteriorTextWrapArchive& exterior_text_wrap_list(int index) const;
  ::TSD::ExteriorTextWrapArchive* add_exterior_text_wrap_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >&
      exterior_text_wrap_list() const;

  // repeated .TSP.Reference original_attachment_list = 7;
  int original_attachment_list_size() const;
  private:
  int _internal_original_attachment_list_size() const;
  public:
  void clear_original_attachment_list();
  ::TSP::Reference* mutable_original_attachment_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_original_attachment_list();
  private:
  const ::TSP::Reference& _internal_original_attachment_list(int index) const;
  ::TSP::Reference* _internal_add_original_attachment_list();
  public:
  const ::TSP::Reference& original_attachment_list(int index) const;
  ::TSP::Reference* add_original_attachment_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      original_attachment_list() const;

  // repeated .TSD.ExteriorTextWrapArchive original_exterior_text_wrap_list = 8;
  int original_exterior_text_wrap_list_size() const;
  private:
  int _internal_original_exterior_text_wrap_list_size() const;
  public:
  void clear_original_exterior_text_wrap_list();
  ::TSD::ExteriorTextWrapArchive* mutable_original_exterior_text_wrap_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >*
      mutable_original_exterior_text_wrap_list();
  private:
  const ::TSD::ExteriorTextWrapArchive& _internal_original_exterior_text_wrap_list(int index) const;
  ::TSD::ExteriorTextWrapArchive* _internal_add_original_exterior_text_wrap_list();
  public:
  const ::TSD::ExteriorTextWrapArchive& original_exterior_text_wrap_list(int index) const;
  ::TSD::ExteriorTextWrapArchive* add_original_exterior_text_wrap_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >&
      original_exterior_text_wrap_list() const;

  // required .TSWP.StorageActionCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StorageActionCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::StorageActionCommandArchive* release_super();
  ::TSWP::StorageActionCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StorageActionCommandArchive* super);
  private:
  const ::TSWP::StorageActionCommandArchive& _internal_super() const;
  ::TSWP::StorageActionCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StorageActionCommandArchive* super);
  ::TSWP::StorageActionCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TP.MoveDrawablesFloatingCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs > args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range > range_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath > drawable_info_id_path_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > page_index_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive > exterior_text_wrap_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > original_attachment_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive > original_exterior_text_wrap_list_;
  ::TSWP::StorageActionCommandArchive* super_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChangeFootnoteFormatCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ChangeFootnoteFormatCommandArchive) */ {
 public:
  inline ChangeFootnoteFormatCommandArchive() : ChangeFootnoteFormatCommandArchive(nullptr) {}
  ~ChangeFootnoteFormatCommandArchive() override;
  explicit constexpr ChangeFootnoteFormatCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeFootnoteFormatCommandArchive(const ChangeFootnoteFormatCommandArchive& from);
  ChangeFootnoteFormatCommandArchive(ChangeFootnoteFormatCommandArchive&& from) noexcept
    : ChangeFootnoteFormatCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChangeFootnoteFormatCommandArchive& operator=(const ChangeFootnoteFormatCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeFootnoteFormatCommandArchive& operator=(ChangeFootnoteFormatCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeFootnoteFormatCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeFootnoteFormatCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChangeFootnoteFormatCommandArchive*>(
               &_ChangeFootnoteFormatCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ChangeFootnoteFormatCommandArchive& a, ChangeFootnoteFormatCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeFootnoteFormatCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeFootnoteFormatCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeFootnoteFormatCommandArchive* New() const final {
    return CreateMaybeMessage<ChangeFootnoteFormatCommandArchive>(nullptr);
  }

  ChangeFootnoteFormatCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeFootnoteFormatCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeFootnoteFormatCommandArchive& from);
  void MergeFrom(const ChangeFootnoteFormatCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeFootnoteFormatCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ChangeFootnoteFormatCommandArchive";
  }
  protected:
  explicit ChangeFootnoteFormatCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChangeFootnoteFormatCommandArchive_FootnoteFormat FootnoteFormat;
  static constexpr FootnoteFormat kFootnoteFormatNumeric =
    ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatNumeric;
  static constexpr FootnoteFormat kFootnoteFormatRoman =
    ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatRoman;
  static constexpr FootnoteFormat kFootnoteFormatSymbolic =
    ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatSymbolic;
  static constexpr FootnoteFormat kFootnoteFormatJapaneseNumeric =
    ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatJapaneseNumeric;
  static constexpr FootnoteFormat kFootnoteFormatJapaneseIdeographic =
    ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatJapaneseIdeographic;
  static constexpr FootnoteFormat kFootnoteFormatArabicNumeric =
    ChangeFootnoteFormatCommandArchive_FootnoteFormat_kFootnoteFormatArabicNumeric;
  static inline bool FootnoteFormat_IsValid(int value) {
    return ChangeFootnoteFormatCommandArchive_FootnoteFormat_IsValid(value);
  }
  static constexpr FootnoteFormat FootnoteFormat_MIN =
    ChangeFootnoteFormatCommandArchive_FootnoteFormat_FootnoteFormat_MIN;
  static constexpr FootnoteFormat FootnoteFormat_MAX =
    ChangeFootnoteFormatCommandArchive_FootnoteFormat_FootnoteFormat_MAX;
  static constexpr int FootnoteFormat_ARRAYSIZE =
    ChangeFootnoteFormatCommandArchive_FootnoteFormat_FootnoteFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FootnoteFormat_descriptor() {
    return ChangeFootnoteFormatCommandArchive_FootnoteFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& FootnoteFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FootnoteFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FootnoteFormat_Name.");
    return ChangeFootnoteFormatCommandArchive_FootnoteFormat_Name(enum_t_value);
  }
  static inline bool FootnoteFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FootnoteFormat* value) {
    return ChangeFootnoteFormatCommandArchive_FootnoteFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFormatFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TP.ChangeFootnoteFormatCommandArchive.FootnoteFormat format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat format() const;
  void set_format(::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat value);
  private:
  ::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat _internal_format() const;
  void _internal_set_format(::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat value);
  public:

  // @@protoc_insertion_point(class_scope:TP.ChangeFootnoteFormatCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  int format_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChangeFootnoteKindCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ChangeFootnoteKindCommandArchive) */ {
 public:
  inline ChangeFootnoteKindCommandArchive() : ChangeFootnoteKindCommandArchive(nullptr) {}
  ~ChangeFootnoteKindCommandArchive() override;
  explicit constexpr ChangeFootnoteKindCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeFootnoteKindCommandArchive(const ChangeFootnoteKindCommandArchive& from);
  ChangeFootnoteKindCommandArchive(ChangeFootnoteKindCommandArchive&& from) noexcept
    : ChangeFootnoteKindCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChangeFootnoteKindCommandArchive& operator=(const ChangeFootnoteKindCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeFootnoteKindCommandArchive& operator=(ChangeFootnoteKindCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeFootnoteKindCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeFootnoteKindCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChangeFootnoteKindCommandArchive*>(
               &_ChangeFootnoteKindCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ChangeFootnoteKindCommandArchive& a, ChangeFootnoteKindCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeFootnoteKindCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeFootnoteKindCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeFootnoteKindCommandArchive* New() const final {
    return CreateMaybeMessage<ChangeFootnoteKindCommandArchive>(nullptr);
  }

  ChangeFootnoteKindCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeFootnoteKindCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeFootnoteKindCommandArchive& from);
  void MergeFrom(const ChangeFootnoteKindCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeFootnoteKindCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ChangeFootnoteKindCommandArchive";
  }
  protected:
  explicit ChangeFootnoteKindCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChangeFootnoteKindCommandArchive_FootnoteKind FootnoteKind;
  static constexpr FootnoteKind kFootnoteKindFootnotes =
    ChangeFootnoteKindCommandArchive_FootnoteKind_kFootnoteKindFootnotes;
  static constexpr FootnoteKind kFootnoteKindDocumentEndnotes =
    ChangeFootnoteKindCommandArchive_FootnoteKind_kFootnoteKindDocumentEndnotes;
  static constexpr FootnoteKind kFootnoteKindSectionEndnotes =
    ChangeFootnoteKindCommandArchive_FootnoteKind_kFootnoteKindSectionEndnotes;
  static inline bool FootnoteKind_IsValid(int value) {
    return ChangeFootnoteKindCommandArchive_FootnoteKind_IsValid(value);
  }
  static constexpr FootnoteKind FootnoteKind_MIN =
    ChangeFootnoteKindCommandArchive_FootnoteKind_FootnoteKind_MIN;
  static constexpr FootnoteKind FootnoteKind_MAX =
    ChangeFootnoteKindCommandArchive_FootnoteKind_FootnoteKind_MAX;
  static constexpr int FootnoteKind_ARRAYSIZE =
    ChangeFootnoteKindCommandArchive_FootnoteKind_FootnoteKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FootnoteKind_descriptor() {
    return ChangeFootnoteKindCommandArchive_FootnoteKind_descriptor();
  }
  template<typename T>
  static inline const std::string& FootnoteKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FootnoteKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FootnoteKind_Name.");
    return ChangeFootnoteKindCommandArchive_FootnoteKind_Name(enum_t_value);
  }
  static inline bool FootnoteKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FootnoteKind* value) {
    return ChangeFootnoteKindCommandArchive_FootnoteKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUndoTransactionFieldNumber = 3,
    kKindFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // optional .TP.ChangeFootnoteKindCommandArchive.FootnoteKind kind = 2;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::TP::ChangeFootnoteKindCommandArchive_FootnoteKind kind() const;
  void set_kind(::TP::ChangeFootnoteKindCommandArchive_FootnoteKind value);
  private:
  ::TP::ChangeFootnoteKindCommandArchive_FootnoteKind _internal_kind() const;
  void _internal_set_kind(::TP::ChangeFootnoteKindCommandArchive_FootnoteKind value);
  public:

  // @@protoc_insertion_point(class_scope:TP.ChangeFootnoteKindCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSWP::UndoTransaction* undo_transaction_;
  int kind_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChangeFootnoteNumberingCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ChangeFootnoteNumberingCommandArchive) */ {
 public:
  inline ChangeFootnoteNumberingCommandArchive() : ChangeFootnoteNumberingCommandArchive(nullptr) {}
  ~ChangeFootnoteNumberingCommandArchive() override;
  explicit constexpr ChangeFootnoteNumberingCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeFootnoteNumberingCommandArchive(const ChangeFootnoteNumberingCommandArchive& from);
  ChangeFootnoteNumberingCommandArchive(ChangeFootnoteNumberingCommandArchive&& from) noexcept
    : ChangeFootnoteNumberingCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChangeFootnoteNumberingCommandArchive& operator=(const ChangeFootnoteNumberingCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeFootnoteNumberingCommandArchive& operator=(ChangeFootnoteNumberingCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeFootnoteNumberingCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeFootnoteNumberingCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChangeFootnoteNumberingCommandArchive*>(
               &_ChangeFootnoteNumberingCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ChangeFootnoteNumberingCommandArchive& a, ChangeFootnoteNumberingCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeFootnoteNumberingCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeFootnoteNumberingCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeFootnoteNumberingCommandArchive* New() const final {
    return CreateMaybeMessage<ChangeFootnoteNumberingCommandArchive>(nullptr);
  }

  ChangeFootnoteNumberingCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeFootnoteNumberingCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeFootnoteNumberingCommandArchive& from);
  void MergeFrom(const ChangeFootnoteNumberingCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeFootnoteNumberingCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ChangeFootnoteNumberingCommandArchive";
  }
  protected:
  explicit ChangeFootnoteNumberingCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChangeFootnoteNumberingCommandArchive_FootnoteNumbering FootnoteNumbering;
  static constexpr FootnoteNumbering kFootnoteNumberingContinuous =
    ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_kFootnoteNumberingContinuous;
  static constexpr FootnoteNumbering kFootnoteNumberingRestartEachPage =
    ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_kFootnoteNumberingRestartEachPage;
  static constexpr FootnoteNumbering kFootnoteNumberingRestartEachSection =
    ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection;
  static inline bool FootnoteNumbering_IsValid(int value) {
    return ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_IsValid(value);
  }
  static constexpr FootnoteNumbering FootnoteNumbering_MIN =
    ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_FootnoteNumbering_MIN;
  static constexpr FootnoteNumbering FootnoteNumbering_MAX =
    ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_FootnoteNumbering_MAX;
  static constexpr int FootnoteNumbering_ARRAYSIZE =
    ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_FootnoteNumbering_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FootnoteNumbering_descriptor() {
    return ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_descriptor();
  }
  template<typename T>
  static inline const std::string& FootnoteNumbering_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FootnoteNumbering>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FootnoteNumbering_Name.");
    return ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_Name(enum_t_value);
  }
  static inline bool FootnoteNumbering_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FootnoteNumbering* value) {
    return ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNumberingFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TP.ChangeFootnoteNumberingCommandArchive.FootnoteNumbering numbering = 2;
  bool has_numbering() const;
  private:
  bool _internal_has_numbering() const;
  public:
  void clear_numbering();
  ::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering numbering() const;
  void set_numbering(::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering value);
  private:
  ::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering _internal_numbering() const;
  void _internal_set_numbering(::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering value);
  public:

  // @@protoc_insertion_point(class_scope:TP.ChangeFootnoteNumberingCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  int numbering_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChangeFootnoteSpacingCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ChangeFootnoteSpacingCommandArchive) */ {
 public:
  inline ChangeFootnoteSpacingCommandArchive() : ChangeFootnoteSpacingCommandArchive(nullptr) {}
  ~ChangeFootnoteSpacingCommandArchive() override;
  explicit constexpr ChangeFootnoteSpacingCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeFootnoteSpacingCommandArchive(const ChangeFootnoteSpacingCommandArchive& from);
  ChangeFootnoteSpacingCommandArchive(ChangeFootnoteSpacingCommandArchive&& from) noexcept
    : ChangeFootnoteSpacingCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChangeFootnoteSpacingCommandArchive& operator=(const ChangeFootnoteSpacingCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeFootnoteSpacingCommandArchive& operator=(ChangeFootnoteSpacingCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeFootnoteSpacingCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeFootnoteSpacingCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChangeFootnoteSpacingCommandArchive*>(
               &_ChangeFootnoteSpacingCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ChangeFootnoteSpacingCommandArchive& a, ChangeFootnoteSpacingCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeFootnoteSpacingCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeFootnoteSpacingCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeFootnoteSpacingCommandArchive* New() const final {
    return CreateMaybeMessage<ChangeFootnoteSpacingCommandArchive>(nullptr);
  }

  ChangeFootnoteSpacingCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeFootnoteSpacingCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeFootnoteSpacingCommandArchive& from);
  void MergeFrom(const ChangeFootnoteSpacingCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeFootnoteSpacingCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ChangeFootnoteSpacingCommandArchive";
  }
  protected:
  explicit ChangeFootnoteSpacingCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFootnoteSpacingFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional int32 footnote_spacing = 2;
  bool has_footnote_spacing() const;
  private:
  bool _internal_has_footnote_spacing() const;
  public:
  void clear_footnote_spacing();
  ::PROTOBUF_NAMESPACE_ID::int32 footnote_spacing() const;
  void set_footnote_spacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_footnote_spacing() const;
  void _internal_set_footnote_spacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.ChangeFootnoteSpacingCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::int32 footnote_spacing_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MoveInlineDrawableAnchoredCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.MoveInlineDrawableAnchoredCommandArchive) */ {
 public:
  inline MoveInlineDrawableAnchoredCommandArchive() : MoveInlineDrawableAnchoredCommandArchive(nullptr) {}
  ~MoveInlineDrawableAnchoredCommandArchive() override;
  explicit constexpr MoveInlineDrawableAnchoredCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveInlineDrawableAnchoredCommandArchive(const MoveInlineDrawableAnchoredCommandArchive& from);
  MoveInlineDrawableAnchoredCommandArchive(MoveInlineDrawableAnchoredCommandArchive&& from) noexcept
    : MoveInlineDrawableAnchoredCommandArchive() {
    *this = ::std::move(from);
  }

  inline MoveInlineDrawableAnchoredCommandArchive& operator=(const MoveInlineDrawableAnchoredCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveInlineDrawableAnchoredCommandArchive& operator=(MoveInlineDrawableAnchoredCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveInlineDrawableAnchoredCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveInlineDrawableAnchoredCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MoveInlineDrawableAnchoredCommandArchive*>(
               &_MoveInlineDrawableAnchoredCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MoveInlineDrawableAnchoredCommandArchive& a, MoveInlineDrawableAnchoredCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveInlineDrawableAnchoredCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveInlineDrawableAnchoredCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveInlineDrawableAnchoredCommandArchive* New() const final {
    return CreateMaybeMessage<MoveInlineDrawableAnchoredCommandArchive>(nullptr);
  }

  MoveInlineDrawableAnchoredCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveInlineDrawableAnchoredCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveInlineDrawableAnchoredCommandArchive& from);
  void MergeFrom(const MoveInlineDrawableAnchoredCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveInlineDrawableAnchoredCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.MoveInlineDrawableAnchoredCommandArchive";
  }
  protected:
  explicit MoveInlineDrawableAnchoredCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kIdPlacementOperationArgsFieldNumber = 2,
    kDrawableInfoIdPathFieldNumber = 5,
    kExteriorTextWrapFieldNumber = 6,
    kOriginalExteriorTextWrapFieldNumber = 7,
    kReplacementRangeLocationFieldNumber = 3,
    kReplacementRangeLengthFieldNumber = 4,
  };
  // required .TSWP.StorageActionCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StorageActionCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::StorageActionCommandArchive* release_super();
  ::TSWP::StorageActionCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StorageActionCommandArchive* super);
  private:
  const ::TSWP::StorageActionCommandArchive& _internal_super() const;
  ::TSWP::StorageActionCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StorageActionCommandArchive* super);
  ::TSWP::StorageActionCommandArchive* unsafe_arena_release_super();

  // optional .TSK.IdPlacementOperationArgs id_placement_operation_args = 2;
  bool has_id_placement_operation_args() const;
  private:
  bool _internal_has_id_placement_operation_args() const;
  public:
  void clear_id_placement_operation_args();
  const ::TSK::IdPlacementOperationArgs& id_placement_operation_args() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::IdPlacementOperationArgs* release_id_placement_operation_args();
  ::TSK::IdPlacementOperationArgs* mutable_id_placement_operation_args();
  void set_allocated_id_placement_operation_args(::TSK::IdPlacementOperationArgs* id_placement_operation_args);
  private:
  const ::TSK::IdPlacementOperationArgs& _internal_id_placement_operation_args() const;
  ::TSK::IdPlacementOperationArgs* _internal_mutable_id_placement_operation_args();
  public:
  void unsafe_arena_set_allocated_id_placement_operation_args(
      ::TSK::IdPlacementOperationArgs* id_placement_operation_args);
  ::TSK::IdPlacementOperationArgs* unsafe_arena_release_id_placement_operation_args();

  // optional .TSP.UUIDPath drawable_info_id_path = 5;
  bool has_drawable_info_id_path() const;
  private:
  bool _internal_has_drawable_info_id_path() const;
  public:
  void clear_drawable_info_id_path();
  const ::TSP::UUIDPath& drawable_info_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_drawable_info_id_path();
  ::TSP::UUIDPath* mutable_drawable_info_id_path();
  void set_allocated_drawable_info_id_path(::TSP::UUIDPath* drawable_info_id_path);
  private:
  const ::TSP::UUIDPath& _internal_drawable_info_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_drawable_info_id_path();
  public:
  void unsafe_arena_set_allocated_drawable_info_id_path(
      ::TSP::UUIDPath* drawable_info_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_drawable_info_id_path();

  // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 6;
  bool has_exterior_text_wrap() const;
  private:
  bool _internal_has_exterior_text_wrap() const;
  public:
  void clear_exterior_text_wrap();
  const ::TSD::ExteriorTextWrapArchive& exterior_text_wrap() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ExteriorTextWrapArchive* release_exterior_text_wrap();
  ::TSD::ExteriorTextWrapArchive* mutable_exterior_text_wrap();
  void set_allocated_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* exterior_text_wrap);
  private:
  const ::TSD::ExteriorTextWrapArchive& _internal_exterior_text_wrap() const;
  ::TSD::ExteriorTextWrapArchive* _internal_mutable_exterior_text_wrap();
  public:
  void unsafe_arena_set_allocated_exterior_text_wrap(
      ::TSD::ExteriorTextWrapArchive* exterior_text_wrap);
  ::TSD::ExteriorTextWrapArchive* unsafe_arena_release_exterior_text_wrap();

  // optional .TSD.ExteriorTextWrapArchive original_exterior_text_wrap = 7;
  bool has_original_exterior_text_wrap() const;
  private:
  bool _internal_has_original_exterior_text_wrap() const;
  public:
  void clear_original_exterior_text_wrap();
  const ::TSD::ExteriorTextWrapArchive& original_exterior_text_wrap() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ExteriorTextWrapArchive* release_original_exterior_text_wrap();
  ::TSD::ExteriorTextWrapArchive* mutable_original_exterior_text_wrap();
  void set_allocated_original_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* original_exterior_text_wrap);
  private:
  const ::TSD::ExteriorTextWrapArchive& _internal_original_exterior_text_wrap() const;
  ::TSD::ExteriorTextWrapArchive* _internal_mutable_original_exterior_text_wrap();
  public:
  void unsafe_arena_set_allocated_original_exterior_text_wrap(
      ::TSD::ExteriorTextWrapArchive* original_exterior_text_wrap);
  ::TSD::ExteriorTextWrapArchive* unsafe_arena_release_original_exterior_text_wrap();

  // optional uint32 replacement_range_location = 3;
  bool has_replacement_range_location() const;
  private:
  bool _internal_has_replacement_range_location() const;
  public:
  void clear_replacement_range_location();
  ::PROTOBUF_NAMESPACE_ID::uint32 replacement_range_location() const;
  void set_replacement_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replacement_range_location() const;
  void _internal_set_replacement_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 replacement_range_length = 4;
  bool has_replacement_range_length() const;
  private:
  bool _internal_has_replacement_range_length() const;
  public:
  void clear_replacement_range_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 replacement_range_length() const;
  void set_replacement_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replacement_range_length() const;
  void _internal_set_replacement_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.MoveInlineDrawableAnchoredCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::StorageActionCommandArchive* super_;
  ::TSK::IdPlacementOperationArgs* id_placement_operation_args_;
  ::TSP::UUIDPath* drawable_info_id_path_;
  ::TSD::ExteriorTextWrapArchive* exterior_text_wrap_;
  ::TSD::ExteriorTextWrapArchive* original_exterior_text_wrap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replacement_range_location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replacement_range_length_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MoveAnchoredDrawableInlineCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.MoveAnchoredDrawableInlineCommandArchive) */ {
 public:
  inline MoveAnchoredDrawableInlineCommandArchive() : MoveAnchoredDrawableInlineCommandArchive(nullptr) {}
  ~MoveAnchoredDrawableInlineCommandArchive() override;
  explicit constexpr MoveAnchoredDrawableInlineCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveAnchoredDrawableInlineCommandArchive(const MoveAnchoredDrawableInlineCommandArchive& from);
  MoveAnchoredDrawableInlineCommandArchive(MoveAnchoredDrawableInlineCommandArchive&& from) noexcept
    : MoveAnchoredDrawableInlineCommandArchive() {
    *this = ::std::move(from);
  }

  inline MoveAnchoredDrawableInlineCommandArchive& operator=(const MoveAnchoredDrawableInlineCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveAnchoredDrawableInlineCommandArchive& operator=(MoveAnchoredDrawableInlineCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveAnchoredDrawableInlineCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveAnchoredDrawableInlineCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MoveAnchoredDrawableInlineCommandArchive*>(
               &_MoveAnchoredDrawableInlineCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MoveAnchoredDrawableInlineCommandArchive& a, MoveAnchoredDrawableInlineCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveAnchoredDrawableInlineCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveAnchoredDrawableInlineCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveAnchoredDrawableInlineCommandArchive* New() const final {
    return CreateMaybeMessage<MoveAnchoredDrawableInlineCommandArchive>(nullptr);
  }

  MoveAnchoredDrawableInlineCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveAnchoredDrawableInlineCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveAnchoredDrawableInlineCommandArchive& from);
  void MergeFrom(const MoveAnchoredDrawableInlineCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveAnchoredDrawableInlineCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.MoveAnchoredDrawableInlineCommandArchive";
  }
  protected:
  explicit MoveAnchoredDrawableInlineCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kIdPlacementOperationArgsFieldNumber = 2,
    kDrawableInfoIdPathFieldNumber = 5,
    kExteriorTextWrapFieldNumber = 6,
    kOriginalExteriorTextWrapFieldNumber = 7,
    kReplacementRangeLocationFieldNumber = 3,
    kReplacementRangeLengthFieldNumber = 4,
  };
  // required .TSWP.StorageActionCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StorageActionCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::StorageActionCommandArchive* release_super();
  ::TSWP::StorageActionCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StorageActionCommandArchive* super);
  private:
  const ::TSWP::StorageActionCommandArchive& _internal_super() const;
  ::TSWP::StorageActionCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StorageActionCommandArchive* super);
  ::TSWP::StorageActionCommandArchive* unsafe_arena_release_super();

  // optional .TSK.IdPlacementOperationArgs id_placement_operation_args = 2;
  bool has_id_placement_operation_args() const;
  private:
  bool _internal_has_id_placement_operation_args() const;
  public:
  void clear_id_placement_operation_args();
  const ::TSK::IdPlacementOperationArgs& id_placement_operation_args() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::IdPlacementOperationArgs* release_id_placement_operation_args();
  ::TSK::IdPlacementOperationArgs* mutable_id_placement_operation_args();
  void set_allocated_id_placement_operation_args(::TSK::IdPlacementOperationArgs* id_placement_operation_args);
  private:
  const ::TSK::IdPlacementOperationArgs& _internal_id_placement_operation_args() const;
  ::TSK::IdPlacementOperationArgs* _internal_mutable_id_placement_operation_args();
  public:
  void unsafe_arena_set_allocated_id_placement_operation_args(
      ::TSK::IdPlacementOperationArgs* id_placement_operation_args);
  ::TSK::IdPlacementOperationArgs* unsafe_arena_release_id_placement_operation_args();

  // optional .TSP.UUIDPath drawable_info_id_path = 5;
  bool has_drawable_info_id_path() const;
  private:
  bool _internal_has_drawable_info_id_path() const;
  public:
  void clear_drawable_info_id_path();
  const ::TSP::UUIDPath& drawable_info_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_drawable_info_id_path();
  ::TSP::UUIDPath* mutable_drawable_info_id_path();
  void set_allocated_drawable_info_id_path(::TSP::UUIDPath* drawable_info_id_path);
  private:
  const ::TSP::UUIDPath& _internal_drawable_info_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_drawable_info_id_path();
  public:
  void unsafe_arena_set_allocated_drawable_info_id_path(
      ::TSP::UUIDPath* drawable_info_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_drawable_info_id_path();

  // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 6;
  bool has_exterior_text_wrap() const;
  private:
  bool _internal_has_exterior_text_wrap() const;
  public:
  void clear_exterior_text_wrap();
  const ::TSD::ExteriorTextWrapArchive& exterior_text_wrap() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ExteriorTextWrapArchive* release_exterior_text_wrap();
  ::TSD::ExteriorTextWrapArchive* mutable_exterior_text_wrap();
  void set_allocated_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* exterior_text_wrap);
  private:
  const ::TSD::ExteriorTextWrapArchive& _internal_exterior_text_wrap() const;
  ::TSD::ExteriorTextWrapArchive* _internal_mutable_exterior_text_wrap();
  public:
  void unsafe_arena_set_allocated_exterior_text_wrap(
      ::TSD::ExteriorTextWrapArchive* exterior_text_wrap);
  ::TSD::ExteriorTextWrapArchive* unsafe_arena_release_exterior_text_wrap();

  // optional .TSD.ExteriorTextWrapArchive original_exterior_text_wrap = 7;
  bool has_original_exterior_text_wrap() const;
  private:
  bool _internal_has_original_exterior_text_wrap() const;
  public:
  void clear_original_exterior_text_wrap();
  const ::TSD::ExteriorTextWrapArchive& original_exterior_text_wrap() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ExteriorTextWrapArchive* release_original_exterior_text_wrap();
  ::TSD::ExteriorTextWrapArchive* mutable_original_exterior_text_wrap();
  void set_allocated_original_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* original_exterior_text_wrap);
  private:
  const ::TSD::ExteriorTextWrapArchive& _internal_original_exterior_text_wrap() const;
  ::TSD::ExteriorTextWrapArchive* _internal_mutable_original_exterior_text_wrap();
  public:
  void unsafe_arena_set_allocated_original_exterior_text_wrap(
      ::TSD::ExteriorTextWrapArchive* original_exterior_text_wrap);
  ::TSD::ExteriorTextWrapArchive* unsafe_arena_release_original_exterior_text_wrap();

  // optional uint32 replacement_range_location = 3;
  bool has_replacement_range_location() const;
  private:
  bool _internal_has_replacement_range_location() const;
  public:
  void clear_replacement_range_location();
  ::PROTOBUF_NAMESPACE_ID::uint32 replacement_range_location() const;
  void set_replacement_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replacement_range_location() const;
  void _internal_set_replacement_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 replacement_range_length = 4;
  bool has_replacement_range_length() const;
  private:
  bool _internal_has_replacement_range_length() const;
  public:
  void clear_replacement_range_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 replacement_range_length() const;
  void set_replacement_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replacement_range_length() const;
  void _internal_set_replacement_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.MoveAnchoredDrawableInlineCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::StorageActionCommandArchive* super_;
  ::TSK::IdPlacementOperationArgs* id_placement_operation_args_;
  ::TSP::UUIDPath* drawable_info_id_path_;
  ::TSD::ExteriorTextWrapArchive* exterior_text_wrap_;
  ::TSD::ExteriorTextWrapArchive* original_exterior_text_wrap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replacement_range_location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replacement_range_length_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InsertFootnoteCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.InsertFootnoteCommandArchive) */ {
 public:
  inline InsertFootnoteCommandArchive() : InsertFootnoteCommandArchive(nullptr) {}
  ~InsertFootnoteCommandArchive() override;
  explicit constexpr InsertFootnoteCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertFootnoteCommandArchive(const InsertFootnoteCommandArchive& from);
  InsertFootnoteCommandArchive(InsertFootnoteCommandArchive&& from) noexcept
    : InsertFootnoteCommandArchive() {
    *this = ::std::move(from);
  }

  inline InsertFootnoteCommandArchive& operator=(const InsertFootnoteCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertFootnoteCommandArchive& operator=(InsertFootnoteCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertFootnoteCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertFootnoteCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InsertFootnoteCommandArchive*>(
               &_InsertFootnoteCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(InsertFootnoteCommandArchive& a, InsertFootnoteCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertFootnoteCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertFootnoteCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertFootnoteCommandArchive* New() const final {
    return CreateMaybeMessage<InsertFootnoteCommandArchive>(nullptr);
  }

  InsertFootnoteCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertFootnoteCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertFootnoteCommandArchive& from);
  void MergeFrom(const InsertFootnoteCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertFootnoteCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.InsertFootnoteCommandArchive";
  }
  protected:
  explicit InsertFootnoteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSWP.StorageActionCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StorageActionCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::StorageActionCommandArchive* release_super();
  ::TSWP::StorageActionCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StorageActionCommandArchive* super);
  private:
  const ::TSWP::StorageActionCommandArchive& _internal_super() const;
  ::TSWP::StorageActionCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StorageActionCommandArchive* super);
  ::TSWP::StorageActionCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TP.InsertFootnoteCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::StorageActionCommandArchive* super_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ToggleBodyLayoutDirectionCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ToggleBodyLayoutDirectionCommandArchive) */ {
 public:
  inline ToggleBodyLayoutDirectionCommandArchive() : ToggleBodyLayoutDirectionCommandArchive(nullptr) {}
  ~ToggleBodyLayoutDirectionCommandArchive() override;
  explicit constexpr ToggleBodyLayoutDirectionCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToggleBodyLayoutDirectionCommandArchive(const ToggleBodyLayoutDirectionCommandArchive& from);
  ToggleBodyLayoutDirectionCommandArchive(ToggleBodyLayoutDirectionCommandArchive&& from) noexcept
    : ToggleBodyLayoutDirectionCommandArchive() {
    *this = ::std::move(from);
  }

  inline ToggleBodyLayoutDirectionCommandArchive& operator=(const ToggleBodyLayoutDirectionCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToggleBodyLayoutDirectionCommandArchive& operator=(ToggleBodyLayoutDirectionCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToggleBodyLayoutDirectionCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToggleBodyLayoutDirectionCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ToggleBodyLayoutDirectionCommandArchive*>(
               &_ToggleBodyLayoutDirectionCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ToggleBodyLayoutDirectionCommandArchive& a, ToggleBodyLayoutDirectionCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ToggleBodyLayoutDirectionCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToggleBodyLayoutDirectionCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToggleBodyLayoutDirectionCommandArchive* New() const final {
    return CreateMaybeMessage<ToggleBodyLayoutDirectionCommandArchive>(nullptr);
  }

  ToggleBodyLayoutDirectionCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToggleBodyLayoutDirectionCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToggleBodyLayoutDirectionCommandArchive& from);
  void MergeFrom(const ToggleBodyLayoutDirectionCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToggleBodyLayoutDirectionCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ToggleBodyLayoutDirectionCommandArchive";
  }
  protected:
  explicit ToggleBodyLayoutDirectionCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewDirectionIsVerticalFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional bool new_direction_is_vertical = 2;
  bool has_new_direction_is_vertical() const;
  private:
  bool _internal_has_new_direction_is_vertical() const;
  public:
  void clear_new_direction_is_vertical();
  bool new_direction_is_vertical() const;
  void set_new_direction_is_vertical(bool value);
  private:
  bool _internal_new_direction_is_vertical() const;
  void _internal_set_new_direction_is_vertical(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TP.ToggleBodyLayoutDirectionCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  bool new_direction_is_vertical_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class TrackChangesCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.TrackChangesCommandArchive) */ {
 public:
  inline TrackChangesCommandArchive() : TrackChangesCommandArchive(nullptr) {}
  ~TrackChangesCommandArchive() override;
  explicit constexpr TrackChangesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackChangesCommandArchive(const TrackChangesCommandArchive& from);
  TrackChangesCommandArchive(TrackChangesCommandArchive&& from) noexcept
    : TrackChangesCommandArchive() {
    *this = ::std::move(from);
  }

  inline TrackChangesCommandArchive& operator=(const TrackChangesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackChangesCommandArchive& operator=(TrackChangesCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackChangesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackChangesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const TrackChangesCommandArchive*>(
               &_TrackChangesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TrackChangesCommandArchive& a, TrackChangesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackChangesCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackChangesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackChangesCommandArchive* New() const final {
    return CreateMaybeMessage<TrackChangesCommandArchive>(nullptr);
  }

  TrackChangesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackChangesCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackChangesCommandArchive& from);
  void MergeFrom(const TrackChangesCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackChangesCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.TrackChangesCommandArchive";
  }
  protected:
  explicit TrackChangesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeSessionHistoryFieldNumber = 3,
    kOldChangeSessionHistoryFieldNumber = 7,
    kSuperFieldNumber = 1,
    kMostRecentChangeSessionFieldNumber = 5,
    kOldMostRecentChangeSessionFieldNumber = 8,
    kTrackChangesFieldNumber = 2,
    kPausedFieldNumber = 4,
    kOldTrackChangesFieldNumber = 6,
  };
  // repeated .TSP.Reference change_session_history = 3;
  int change_session_history_size() const;
  private:
  int _internal_change_session_history_size() const;
  public:
  void clear_change_session_history();
  ::TSP::Reference* mutable_change_session_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_change_session_history();
  private:
  const ::TSP::Reference& _internal_change_session_history(int index) const;
  ::TSP::Reference* _internal_add_change_session_history();
  public:
  const ::TSP::Reference& change_session_history(int index) const;
  ::TSP::Reference* add_change_session_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      change_session_history() const;

  // repeated .TSP.Reference old_change_session_history = 7;
  int old_change_session_history_size() const;
  private:
  int _internal_old_change_session_history_size() const;
  public:
  void clear_old_change_session_history();
  ::TSP::Reference* mutable_old_change_session_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_change_session_history();
  private:
  const ::TSP::Reference& _internal_old_change_session_history(int index) const;
  ::TSP::Reference* _internal_add_old_change_session_history();
  public:
  const ::TSP::Reference& old_change_session_history(int index) const;
  ::TSP::Reference* add_old_change_session_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_change_session_history() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference most_recent_change_session = 5;
  bool has_most_recent_change_session() const;
  private:
  bool _internal_has_most_recent_change_session() const;
  public:
  void clear_most_recent_change_session();
  const ::TSP::Reference& most_recent_change_session() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_most_recent_change_session();
  ::TSP::Reference* mutable_most_recent_change_session();
  void set_allocated_most_recent_change_session(::TSP::Reference* most_recent_change_session);
  private:
  const ::TSP::Reference& _internal_most_recent_change_session() const;
  ::TSP::Reference* _internal_mutable_most_recent_change_session();
  public:
  void unsafe_arena_set_allocated_most_recent_change_session(
      ::TSP::Reference* most_recent_change_session);
  ::TSP::Reference* unsafe_arena_release_most_recent_change_session();

  // optional .TSP.Reference old_most_recent_change_session = 8;
  bool has_old_most_recent_change_session() const;
  private:
  bool _internal_has_old_most_recent_change_session() const;
  public:
  void clear_old_most_recent_change_session();
  const ::TSP::Reference& old_most_recent_change_session() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_old_most_recent_change_session();
  ::TSP::Reference* mutable_old_most_recent_change_session();
  void set_allocated_old_most_recent_change_session(::TSP::Reference* old_most_recent_change_session);
  private:
  const ::TSP::Reference& _internal_old_most_recent_change_session() const;
  ::TSP::Reference* _internal_mutable_old_most_recent_change_session();
  public:
  void unsafe_arena_set_allocated_old_most_recent_change_session(
      ::TSP::Reference* old_most_recent_change_session);
  ::TSP::Reference* unsafe_arena_release_old_most_recent_change_session();

  // optional bool track_changes = 2;
  bool has_track_changes() const;
  private:
  bool _internal_has_track_changes() const;
  public:
  void clear_track_changes();
  bool track_changes() const;
  void set_track_changes(bool value);
  private:
  bool _internal_track_changes() const;
  void _internal_set_track_changes(bool value);
  public:

  // optional bool paused = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_paused() const;
  private:
  bool _internal_has_paused() const;
  public:
  PROTOBUF_DEPRECATED void clear_paused();
  PROTOBUF_DEPRECATED bool paused() const;
  PROTOBUF_DEPRECATED void set_paused(bool value);
  private:
  bool _internal_paused() const;
  void _internal_set_paused(bool value);
  public:

  // optional bool old_track_changes = 6;
  bool has_old_track_changes() const;
  private:
  bool _internal_has_old_track_changes() const;
  public:
  void clear_old_track_changes();
  bool old_track_changes() const;
  void set_old_track_changes(bool value);
  private:
  bool _internal_old_track_changes() const;
  void _internal_set_old_track_changes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TP.TrackChangesCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > change_session_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_change_session_history_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* most_recent_change_session_;
  ::TSP::Reference* old_most_recent_change_session_;
  bool track_changes_;
  bool paused_;
  bool old_track_changes_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class PauseChangeTrackingCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.PauseChangeTrackingCommandArchive) */ {
 public:
  inline PauseChangeTrackingCommandArchive() : PauseChangeTrackingCommandArchive(nullptr) {}
  ~PauseChangeTrackingCommandArchive() override;
  explicit constexpr PauseChangeTrackingCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PauseChangeTrackingCommandArchive(const PauseChangeTrackingCommandArchive& from);
  PauseChangeTrackingCommandArchive(PauseChangeTrackingCommandArchive&& from) noexcept
    : PauseChangeTrackingCommandArchive() {
    *this = ::std::move(from);
  }

  inline PauseChangeTrackingCommandArchive& operator=(const PauseChangeTrackingCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseChangeTrackingCommandArchive& operator=(PauseChangeTrackingCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PauseChangeTrackingCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PauseChangeTrackingCommandArchive* internal_default_instance() {
    return reinterpret_cast<const PauseChangeTrackingCommandArchive*>(
               &_PauseChangeTrackingCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PauseChangeTrackingCommandArchive& a, PauseChangeTrackingCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseChangeTrackingCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseChangeTrackingCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseChangeTrackingCommandArchive* New() const final {
    return CreateMaybeMessage<PauseChangeTrackingCommandArchive>(nullptr);
  }

  PauseChangeTrackingCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseChangeTrackingCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseChangeTrackingCommandArchive& from);
  void MergeFrom(const PauseChangeTrackingCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseChangeTrackingCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.PauseChangeTrackingCommandArchive";
  }
  protected:
  explicit PauseChangeTrackingCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPausedFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional bool paused = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_paused() const;
  private:
  bool _internal_has_paused() const;
  public:
  PROTOBUF_DEPRECATED void clear_paused();
  PROTOBUF_DEPRECATED bool paused() const;
  PROTOBUF_DEPRECATED void set_paused(bool value);
  private:
  bool _internal_paused() const;
  void _internal_set_paused(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TP.PauseChangeTrackingCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  bool paused_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionGuideCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SectionGuideCommandArchive) */ {
 public:
  inline SectionGuideCommandArchive() : SectionGuideCommandArchive(nullptr) {}
  ~SectionGuideCommandArchive() override;
  explicit constexpr SectionGuideCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionGuideCommandArchive(const SectionGuideCommandArchive& from);
  SectionGuideCommandArchive(SectionGuideCommandArchive&& from) noexcept
    : SectionGuideCommandArchive() {
    *this = ::std::move(from);
  }

  inline SectionGuideCommandArchive& operator=(const SectionGuideCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionGuideCommandArchive& operator=(SectionGuideCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionGuideCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionGuideCommandArchive* internal_default_instance() {
    return reinterpret_cast<const SectionGuideCommandArchive*>(
               &_SectionGuideCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SectionGuideCommandArchive& a, SectionGuideCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionGuideCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionGuideCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionGuideCommandArchive* New() const final {
    return CreateMaybeMessage<SectionGuideCommandArchive>(nullptr);
  }

  SectionGuideCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionGuideCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionGuideCommandArchive& from);
  void MergeFrom(const SectionGuideCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionGuideCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SectionGuideCommandArchive";
  }
  protected:
  explicit SectionGuideCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSectionIdPathFieldNumber = 2,
    kPageIndexFieldNumber = 3,
  };
  // required .TSD.AbstractGuideCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::AbstractGuideCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::AbstractGuideCommandArchive* release_super();
  ::TSD::AbstractGuideCommandArchive* mutable_super();
  void set_allocated_super(::TSD::AbstractGuideCommandArchive* super);
  private:
  const ::TSD::AbstractGuideCommandArchive& _internal_super() const;
  ::TSD::AbstractGuideCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::AbstractGuideCommandArchive* super);
  ::TSD::AbstractGuideCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath section_id_path = 2;
  bool has_section_id_path() const;
  private:
  bool _internal_has_section_id_path() const;
  public:
  void clear_section_id_path();
  const ::TSP::UUIDPath& section_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_section_id_path();
  ::TSP::UUIDPath* mutable_section_id_path();
  void set_allocated_section_id_path(::TSP::UUIDPath* section_id_path);
  private:
  const ::TSP::UUIDPath& _internal_section_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_section_id_path();
  public:
  void unsafe_arena_set_allocated_section_id_path(
      ::TSP::UUIDPath* section_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_section_id_path();

  // required uint32 page_index = 3;
  bool has_page_index() const;
  private:
  bool _internal_has_page_index() const;
  public:
  void clear_page_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index() const;
  void set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_index() const;
  void _internal_set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.SectionGuideCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::AbstractGuideCommandArchive* super_;
  ::TSP::UUIDPath* section_id_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ReplaceHeaderFooterStorageCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ReplaceHeaderFooterStorageCommandArchive) */ {
 public:
  inline ReplaceHeaderFooterStorageCommandArchive() : ReplaceHeaderFooterStorageCommandArchive(nullptr) {}
  ~ReplaceHeaderFooterStorageCommandArchive() override;
  explicit constexpr ReplaceHeaderFooterStorageCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceHeaderFooterStorageCommandArchive(const ReplaceHeaderFooterStorageCommandArchive& from);
  ReplaceHeaderFooterStorageCommandArchive(ReplaceHeaderFooterStorageCommandArchive&& from) noexcept
    : ReplaceHeaderFooterStorageCommandArchive() {
    *this = ::std::move(from);
  }

  inline ReplaceHeaderFooterStorageCommandArchive& operator=(const ReplaceHeaderFooterStorageCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceHeaderFooterStorageCommandArchive& operator=(ReplaceHeaderFooterStorageCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceHeaderFooterStorageCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceHeaderFooterStorageCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ReplaceHeaderFooterStorageCommandArchive*>(
               &_ReplaceHeaderFooterStorageCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ReplaceHeaderFooterStorageCommandArchive& a, ReplaceHeaderFooterStorageCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceHeaderFooterStorageCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceHeaderFooterStorageCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplaceHeaderFooterStorageCommandArchive* New() const final {
    return CreateMaybeMessage<ReplaceHeaderFooterStorageCommandArchive>(nullptr);
  }

  ReplaceHeaderFooterStorageCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceHeaderFooterStorageCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplaceHeaderFooterStorageCommandArchive& from);
  void MergeFrom(const ReplaceHeaderFooterStorageCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceHeaderFooterStorageCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ReplaceHeaderFooterStorageCommandArchive";
  }
  protected:
  explicit ReplaceHeaderFooterStorageCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kHeaderFooterStorageIdPathFieldNumber = 2,
    kReplacementHeaderFooterStorageFieldNumber = 3,
    kReplacementHeaderFooterStorageUndoObjectFieldNumber = 4,
    kOldHeaderFooterStorageFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath header_footer_storage_id_path = 2;
  bool has_header_footer_storage_id_path() const;
  private:
  bool _internal_has_header_footer_storage_id_path() const;
  public:
  void clear_header_footer_storage_id_path();
  const ::TSP::UUIDPath& header_footer_storage_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_header_footer_storage_id_path();
  ::TSP::UUIDPath* mutable_header_footer_storage_id_path();
  void set_allocated_header_footer_storage_id_path(::TSP::UUIDPath* header_footer_storage_id_path);
  private:
  const ::TSP::UUIDPath& _internal_header_footer_storage_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_header_footer_storage_id_path();
  public:
  void unsafe_arena_set_allocated_header_footer_storage_id_path(
      ::TSP::UUIDPath* header_footer_storage_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_header_footer_storage_id_path();

  // optional .TSP.Reference replacement_header_footer_storage = 3;
  bool has_replacement_header_footer_storage() const;
  private:
  bool _internal_has_replacement_header_footer_storage() const;
  public:
  void clear_replacement_header_footer_storage();
  const ::TSP::Reference& replacement_header_footer_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_replacement_header_footer_storage();
  ::TSP::Reference* mutable_replacement_header_footer_storage();
  void set_allocated_replacement_header_footer_storage(::TSP::Reference* replacement_header_footer_storage);
  private:
  const ::TSP::Reference& _internal_replacement_header_footer_storage() const;
  ::TSP::Reference* _internal_mutable_replacement_header_footer_storage();
  public:
  void unsafe_arena_set_allocated_replacement_header_footer_storage(
      ::TSP::Reference* replacement_header_footer_storage);
  ::TSP::Reference* unsafe_arena_release_replacement_header_footer_storage();

  // optional .TSP.Reference replacement_header_footer_storage_undo_object = 4;
  bool has_replacement_header_footer_storage_undo_object() const;
  private:
  bool _internal_has_replacement_header_footer_storage_undo_object() const;
  public:
  void clear_replacement_header_footer_storage_undo_object();
  const ::TSP::Reference& replacement_header_footer_storage_undo_object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_replacement_header_footer_storage_undo_object();
  ::TSP::Reference* mutable_replacement_header_footer_storage_undo_object();
  void set_allocated_replacement_header_footer_storage_undo_object(::TSP::Reference* replacement_header_footer_storage_undo_object);
  private:
  const ::TSP::Reference& _internal_replacement_header_footer_storage_undo_object() const;
  ::TSP::Reference* _internal_mutable_replacement_header_footer_storage_undo_object();
  public:
  void unsafe_arena_set_allocated_replacement_header_footer_storage_undo_object(
      ::TSP::Reference* replacement_header_footer_storage_undo_object);
  ::TSP::Reference* unsafe_arena_release_replacement_header_footer_storage_undo_object();

  // optional .TSP.Reference old_header_footer_storage = 5;
  bool has_old_header_footer_storage() const;
  private:
  bool _internal_has_old_header_footer_storage() const;
  public:
  void clear_old_header_footer_storage();
  const ::TSP::Reference& old_header_footer_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_old_header_footer_storage();
  ::TSP::Reference* mutable_old_header_footer_storage();
  void set_allocated_old_header_footer_storage(::TSP::Reference* old_header_footer_storage);
  private:
  const ::TSP::Reference& _internal_old_header_footer_storage() const;
  ::TSP::Reference* _internal_mutable_old_header_footer_storage();
  public:
  void unsafe_arena_set_allocated_old_header_footer_storage(
      ::TSP::Reference* old_header_footer_storage);
  ::TSP::Reference* unsafe_arena_release_old_header_footer_storage();

  // @@protoc_insertion_point(class_scope:TP.ReplaceHeaderFooterStorageCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* header_footer_storage_id_path_;
  ::TSP::Reference* replacement_header_footer_storage_;
  ::TSP::Reference* replacement_header_footer_storage_undo_object_;
  ::TSP::Reference* old_header_footer_storage_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class PrototypeForUndoChangePageTemplateForSection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.PrototypeForUndoChangePageTemplateForSection) */ {
 public:
  inline PrototypeForUndoChangePageTemplateForSection() : PrototypeForUndoChangePageTemplateForSection(nullptr) {}
  ~PrototypeForUndoChangePageTemplateForSection() override;
  explicit constexpr PrototypeForUndoChangePageTemplateForSection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrototypeForUndoChangePageTemplateForSection(const PrototypeForUndoChangePageTemplateForSection& from);
  PrototypeForUndoChangePageTemplateForSection(PrototypeForUndoChangePageTemplateForSection&& from) noexcept
    : PrototypeForUndoChangePageTemplateForSection() {
    *this = ::std::move(from);
  }

  inline PrototypeForUndoChangePageTemplateForSection& operator=(const PrototypeForUndoChangePageTemplateForSection& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrototypeForUndoChangePageTemplateForSection& operator=(PrototypeForUndoChangePageTemplateForSection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrototypeForUndoChangePageTemplateForSection& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrototypeForUndoChangePageTemplateForSection* internal_default_instance() {
    return reinterpret_cast<const PrototypeForUndoChangePageTemplateForSection*>(
               &_PrototypeForUndoChangePageTemplateForSection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PrototypeForUndoChangePageTemplateForSection& a, PrototypeForUndoChangePageTemplateForSection& b) {
    a.Swap(&b);
  }
  inline void Swap(PrototypeForUndoChangePageTemplateForSection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrototypeForUndoChangePageTemplateForSection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrototypeForUndoChangePageTemplateForSection* New() const final {
    return CreateMaybeMessage<PrototypeForUndoChangePageTemplateForSection>(nullptr);
  }

  PrototypeForUndoChangePageTemplateForSection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrototypeForUndoChangePageTemplateForSection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrototypeForUndoChangePageTemplateForSection& from);
  void MergeFrom(const PrototypeForUndoChangePageTemplateForSection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrototypeForUndoChangePageTemplateForSection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.PrototypeForUndoChangePageTemplateForSection";
  }
  protected:
  explicit PrototypeForUndoChangePageTemplateForSection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdPathForTemplateInDocumentFieldNumber = 1,
    kInternalPageTemplateFieldNumber = 2,
  };
  // optional .TSP.UUIDPath id_path_for_template_in_document = 1;
  bool has_id_path_for_template_in_document() const;
  private:
  bool _internal_has_id_path_for_template_in_document() const;
  public:
  void clear_id_path_for_template_in_document();
  const ::TSP::UUIDPath& id_path_for_template_in_document() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_id_path_for_template_in_document();
  ::TSP::UUIDPath* mutable_id_path_for_template_in_document();
  void set_allocated_id_path_for_template_in_document(::TSP::UUIDPath* id_path_for_template_in_document);
  private:
  const ::TSP::UUIDPath& _internal_id_path_for_template_in_document() const;
  ::TSP::UUIDPath* _internal_mutable_id_path_for_template_in_document();
  public:
  void unsafe_arena_set_allocated_id_path_for_template_in_document(
      ::TSP::UUIDPath* id_path_for_template_in_document);
  ::TSP::UUIDPath* unsafe_arena_release_id_path_for_template_in_document();

  // required .TSP.Reference internal_page_template = 2;
  bool has_internal_page_template() const;
  private:
  bool _internal_has_internal_page_template() const;
  public:
  void clear_internal_page_template();
  const ::TSP::Reference& internal_page_template() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_internal_page_template();
  ::TSP::Reference* mutable_internal_page_template();
  void set_allocated_internal_page_template(::TSP::Reference* internal_page_template);
  private:
  const ::TSP::Reference& _internal_internal_page_template() const;
  ::TSP::Reference* _internal_mutable_internal_page_template();
  public:
  void unsafe_arena_set_allocated_internal_page_template(
      ::TSP::Reference* internal_page_template);
  ::TSP::Reference* unsafe_arena_release_internal_page_template();

  // @@protoc_insertion_point(class_scope:TP.PrototypeForUndoChangePageTemplateForSection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUIDPath* id_path_for_template_in_document_;
  ::TSP::Reference* internal_page_template_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChangePageTemplateForSectionCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ChangePageTemplateForSectionCommandArchive) */ {
 public:
  inline ChangePageTemplateForSectionCommandArchive() : ChangePageTemplateForSectionCommandArchive(nullptr) {}
  ~ChangePageTemplateForSectionCommandArchive() override;
  explicit constexpr ChangePageTemplateForSectionCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangePageTemplateForSectionCommandArchive(const ChangePageTemplateForSectionCommandArchive& from);
  ChangePageTemplateForSectionCommandArchive(ChangePageTemplateForSectionCommandArchive&& from) noexcept
    : ChangePageTemplateForSectionCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChangePageTemplateForSectionCommandArchive& operator=(const ChangePageTemplateForSectionCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePageTemplateForSectionCommandArchive& operator=(ChangePageTemplateForSectionCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangePageTemplateForSectionCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangePageTemplateForSectionCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChangePageTemplateForSectionCommandArchive*>(
               &_ChangePageTemplateForSectionCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ChangePageTemplateForSectionCommandArchive& a, ChangePageTemplateForSectionCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePageTemplateForSectionCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePageTemplateForSectionCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangePageTemplateForSectionCommandArchive* New() const final {
    return CreateMaybeMessage<ChangePageTemplateForSectionCommandArchive>(nullptr);
  }

  ChangePageTemplateForSectionCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePageTemplateForSectionCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePageTemplateForSectionCommandArchive& from);
  void MergeFrom(const ChangePageTemplateForSectionCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePageTemplateForSectionCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ChangePageTemplateForSectionCommandArchive";
  }
  protected:
  explicit ChangePageTemplateForSectionCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSectionIdPathFieldNumber = 2,
    kPageTemplateFieldNumber = 3,
    kOldPageTemplateFieldNumber = 4,
    kTargetPrototypeFieldNumber = 6,
    kIsUndoRedoFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath section_id_path = 2;
  bool has_section_id_path() const;
  private:
  bool _internal_has_section_id_path() const;
  public:
  void clear_section_id_path();
  const ::TSP::UUIDPath& section_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_section_id_path();
  ::TSP::UUIDPath* mutable_section_id_path();
  void set_allocated_section_id_path(::TSP::UUIDPath* section_id_path);
  private:
  const ::TSP::UUIDPath& _internal_section_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_section_id_path();
  public:
  void unsafe_arena_set_allocated_section_id_path(
      ::TSP::UUIDPath* section_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_section_id_path();

  // required .TSP.Reference page_template = 3;
  bool has_page_template() const;
  private:
  bool _internal_has_page_template() const;
  public:
  void clear_page_template();
  const ::TSP::Reference& page_template() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_page_template();
  ::TSP::Reference* mutable_page_template();
  void set_allocated_page_template(::TSP::Reference* page_template);
  private:
  const ::TSP::Reference& _internal_page_template() const;
  ::TSP::Reference* _internal_mutable_page_template();
  public:
  void unsafe_arena_set_allocated_page_template(
      ::TSP::Reference* page_template);
  ::TSP::Reference* unsafe_arena_release_page_template();

  // optional .TSP.Reference old_page_template = 4;
  bool has_old_page_template() const;
  private:
  bool _internal_has_old_page_template() const;
  public:
  void clear_old_page_template();
  const ::TSP::Reference& old_page_template() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_old_page_template();
  ::TSP::Reference* mutable_old_page_template();
  void set_allocated_old_page_template(::TSP::Reference* old_page_template);
  private:
  const ::TSP::Reference& _internal_old_page_template() const;
  ::TSP::Reference* _internal_mutable_old_page_template();
  public:
  void unsafe_arena_set_allocated_old_page_template(
      ::TSP::Reference* old_page_template);
  ::TSP::Reference* unsafe_arena_release_old_page_template();

  // optional .TSP.Reference target_prototype = 6;
  bool has_target_prototype() const;
  private:
  bool _internal_has_target_prototype() const;
  public:
  void clear_target_prototype();
  const ::TSP::Reference& target_prototype() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_target_prototype();
  ::TSP::Reference* mutable_target_prototype();
  void set_allocated_target_prototype(::TSP::Reference* target_prototype);
  private:
  const ::TSP::Reference& _internal_target_prototype() const;
  ::TSP::Reference* _internal_mutable_target_prototype();
  public:
  void unsafe_arena_set_allocated_target_prototype(
      ::TSP::Reference* target_prototype);
  ::TSP::Reference* unsafe_arena_release_target_prototype();

  // required bool is_undo_redo = 5;
  bool has_is_undo_redo() const;
  private:
  bool _internal_has_is_undo_redo() const;
  public:
  void clear_is_undo_redo();
  bool is_undo_redo() const;
  void set_is_undo_redo(bool value);
  private:
  bool _internal_is_undo_redo() const;
  void _internal_set_is_undo_redo(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TP.ChangePageTemplateForSectionCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* section_id_path_;
  ::TSP::Reference* page_template_;
  ::TSP::Reference* old_page_template_;
  ::TSP::Reference* target_prototype_;
  bool is_undo_redo_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class AllFootnoteSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.AllFootnoteSelectionTransformerArchive) */ {
 public:
  inline AllFootnoteSelectionTransformerArchive() : AllFootnoteSelectionTransformerArchive(nullptr) {}
  ~AllFootnoteSelectionTransformerArchive() override;
  explicit constexpr AllFootnoteSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllFootnoteSelectionTransformerArchive(const AllFootnoteSelectionTransformerArchive& from);
  AllFootnoteSelectionTransformerArchive(AllFootnoteSelectionTransformerArchive&& from) noexcept
    : AllFootnoteSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline AllFootnoteSelectionTransformerArchive& operator=(const AllFootnoteSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllFootnoteSelectionTransformerArchive& operator=(AllFootnoteSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllFootnoteSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllFootnoteSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const AllFootnoteSelectionTransformerArchive*>(
               &_AllFootnoteSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AllFootnoteSelectionTransformerArchive& a, AllFootnoteSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AllFootnoteSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllFootnoteSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllFootnoteSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<AllFootnoteSelectionTransformerArchive>(nullptr);
  }

  AllFootnoteSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllFootnoteSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllFootnoteSelectionTransformerArchive& from);
  void MergeFrom(const AllFootnoteSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllFootnoteSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.AllFootnoteSelectionTransformerArchive";
  }
  protected:
  explicit AllFootnoteSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllFootnoteSelectionFieldNumber = 1,
  };
  // required .TSP.Reference all_footnote_selection = 1;
  bool has_all_footnote_selection() const;
  private:
  bool _internal_has_all_footnote_selection() const;
  public:
  void clear_all_footnote_selection();
  const ::TSP::Reference& all_footnote_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_all_footnote_selection();
  ::TSP::Reference* mutable_all_footnote_selection();
  void set_allocated_all_footnote_selection(::TSP::Reference* all_footnote_selection);
  private:
  const ::TSP::Reference& _internal_all_footnote_selection() const;
  ::TSP::Reference* _internal_mutable_all_footnote_selection();
  public:
  void unsafe_arena_set_allocated_all_footnote_selection(
      ::TSP::Reference* all_footnote_selection);
  ::TSP::Reference* unsafe_arena_release_all_footnote_selection();

  // @@protoc_insertion_point(class_scope:TP.AllFootnoteSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* all_footnote_selection_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DocumentSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.DocumentSelectionTransformerArchive) */ {
 public:
  inline DocumentSelectionTransformerArchive() : DocumentSelectionTransformerArchive(nullptr) {}
  ~DocumentSelectionTransformerArchive() override;
  explicit constexpr DocumentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentSelectionTransformerArchive(const DocumentSelectionTransformerArchive& from);
  DocumentSelectionTransformerArchive(DocumentSelectionTransformerArchive&& from) noexcept
    : DocumentSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline DocumentSelectionTransformerArchive& operator=(const DocumentSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentSelectionTransformerArchive& operator=(DocumentSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentSelectionTransformerArchive*>(
               &_DocumentSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DocumentSelectionTransformerArchive& a, DocumentSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<DocumentSelectionTransformerArchive>(nullptr);
  }

  DocumentSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentSelectionTransformerArchive& from);
  void MergeFrom(const DocumentSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.DocumentSelectionTransformerArchive";
  }
  protected:
  explicit DocumentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentSelectionFieldNumber = 1,
    kStorageUuidPathFieldNumber = 2,
  };
  // required .TSP.Reference document_selection = 1;
  bool has_document_selection() const;
  private:
  bool _internal_has_document_selection() const;
  public:
  void clear_document_selection();
  const ::TSP::Reference& document_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_document_selection();
  ::TSP::Reference* mutable_document_selection();
  void set_allocated_document_selection(::TSP::Reference* document_selection);
  private:
  const ::TSP::Reference& _internal_document_selection() const;
  ::TSP::Reference* _internal_mutable_document_selection();
  public:
  void unsafe_arena_set_allocated_document_selection(
      ::TSP::Reference* document_selection);
  ::TSP::Reference* unsafe_arena_release_document_selection();

  // required .TSP.UUIDPath storage_uuid_path = 2;
  bool has_storage_uuid_path() const;
  private:
  bool _internal_has_storage_uuid_path() const;
  public:
  void clear_storage_uuid_path();
  const ::TSP::UUIDPath& storage_uuid_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_storage_uuid_path();
  ::TSP::UUIDPath* mutable_storage_uuid_path();
  void set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_storage_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_storage_uuid_path();
  public:
  void unsafe_arena_set_allocated_storage_uuid_path(
      ::TSP::UUIDPath* storage_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_storage_uuid_path();

  // @@protoc_insertion_point(class_scope:TP.DocumentSelectionTransformerArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* document_selection_;
  ::TSP::UUIDPath* storage_uuid_path_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CanvasSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.CanvasSelectionTransformerArchive) */ {
 public:
  inline CanvasSelectionTransformerArchive() : CanvasSelectionTransformerArchive(nullptr) {}
  ~CanvasSelectionTransformerArchive() override;
  explicit constexpr CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanvasSelectionTransformerArchive(const CanvasSelectionTransformerArchive& from);
  CanvasSelectionTransformerArchive(CanvasSelectionTransformerArchive&& from) noexcept
    : CanvasSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline CanvasSelectionTransformerArchive& operator=(const CanvasSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanvasSelectionTransformerArchive& operator=(CanvasSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanvasSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanvasSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const CanvasSelectionTransformerArchive*>(
               &_CanvasSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CanvasSelectionTransformerArchive& a, CanvasSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanvasSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<CanvasSelectionTransformerArchive>(nullptr);
  }

  CanvasSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanvasSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanvasSelectionTransformerArchive& from);
  void MergeFrom(const CanvasSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanvasSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.CanvasSelectionTransformerArchive";
  }
  protected:
  explicit CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfosCollectionHelperFieldNumber = 2,
    kExcludedInfosCollectionHelperFieldNumber = 3,
    kAdditionalInfosCollectionHelperFieldNumber = 4,
    kHeaderOrFootnoteStorageUuidPathFieldNumber = 5,
  };
  // required .TSWP.SelectionTransformerArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::SelectionTransformerArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::SelectionTransformerArchive* release_super();
  ::TSWP::SelectionTransformerArchive* mutable_super();
  void set_allocated_super(::TSWP::SelectionTransformerArchive* super);
  private:
  const ::TSWP::SelectionTransformerArchive& _internal_super() const;
  ::TSWP::SelectionTransformerArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::SelectionTransformerArchive* super);
  ::TSWP::SelectionTransformerArchive* unsafe_arena_release_super();

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive infos_collection_helper = 2;
  bool has_infos_collection_helper() const;
  private:
  bool _internal_has_infos_collection_helper() const;
  public:
  void clear_infos_collection_helper();
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& infos_collection_helper() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCollectionSelectionTransformerHelperArchive* release_infos_collection_helper();
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* mutable_infos_collection_helper();
  void set_allocated_infos_collection_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* infos_collection_helper);
  private:
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& _internal_infos_collection_helper() const;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* _internal_mutable_infos_collection_helper();
  public:
  void unsafe_arena_set_allocated_infos_collection_helper(
      ::TSD::InfoCollectionSelectionTransformerHelperArchive* infos_collection_helper);
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* unsafe_arena_release_infos_collection_helper();

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive excluded_infos_collection_helper = 3;
  bool has_excluded_infos_collection_helper() const;
  private:
  bool _internal_has_excluded_infos_collection_helper() const;
  public:
  void clear_excluded_infos_collection_helper();
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& excluded_infos_collection_helper() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCollectionSelectionTransformerHelperArchive* release_excluded_infos_collection_helper();
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* mutable_excluded_infos_collection_helper();
  void set_allocated_excluded_infos_collection_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* excluded_infos_collection_helper);
  private:
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& _internal_excluded_infos_collection_helper() const;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* _internal_mutable_excluded_infos_collection_helper();
  public:
  void unsafe_arena_set_allocated_excluded_infos_collection_helper(
      ::TSD::InfoCollectionSelectionTransformerHelperArchive* excluded_infos_collection_helper);
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* unsafe_arena_release_excluded_infos_collection_helper();

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive additional_infos_collection_helper = 4;
  bool has_additional_infos_collection_helper() const;
  private:
  bool _internal_has_additional_infos_collection_helper() const;
  public:
  void clear_additional_infos_collection_helper();
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& additional_infos_collection_helper() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCollectionSelectionTransformerHelperArchive* release_additional_infos_collection_helper();
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* mutable_additional_infos_collection_helper();
  void set_allocated_additional_infos_collection_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* additional_infos_collection_helper);
  private:
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& _internal_additional_infos_collection_helper() const;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* _internal_mutable_additional_infos_collection_helper();
  public:
  void unsafe_arena_set_allocated_additional_infos_collection_helper(
      ::TSD::InfoCollectionSelectionTransformerHelperArchive* additional_infos_collection_helper);
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* unsafe_arena_release_additional_infos_collection_helper();

  // optional .TSP.UUIDPath header_or_footnote_storage_uuid_path = 5;
  bool has_header_or_footnote_storage_uuid_path() const;
  private:
  bool _internal_has_header_or_footnote_storage_uuid_path() const;
  public:
  void clear_header_or_footnote_storage_uuid_path();
  const ::TSP::UUIDPath& header_or_footnote_storage_uuid_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_header_or_footnote_storage_uuid_path();
  ::TSP::UUIDPath* mutable_header_or_footnote_storage_uuid_path();
  void set_allocated_header_or_footnote_storage_uuid_path(::TSP::UUIDPath* header_or_footnote_storage_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_header_or_footnote_storage_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_header_or_footnote_storage_uuid_path();
  public:
  void unsafe_arena_set_allocated_header_or_footnote_storage_uuid_path(
      ::TSP::UUIDPath* header_or_footnote_storage_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_header_or_footnote_storage_uuid_path();

  // @@protoc_insertion_point(class_scope:TP.CanvasSelectionTransformerArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::SelectionTransformerArchive* super_;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* infos_collection_helper_;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* excluded_infos_collection_helper_;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* additional_infos_collection_helper_;
  ::TSP::UUIDPath* header_or_footnote_storage_uuid_path_;
  friend struct ::TableStruct_TPCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InsertDrawablesCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool InsertDrawablesCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InsertDrawablesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& InsertDrawablesCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InsertDrawablesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.InsertDrawablesCommandArchive.super)
  return _internal_super();
}
inline void InsertDrawablesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.InsertDrawablesCommandArchive.super)
}
inline ::TSK::CommandArchive* InsertDrawablesCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* InsertDrawablesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.InsertDrawablesCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InsertDrawablesCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* InsertDrawablesCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.InsertDrawablesCommandArchive.super)
  return _internal_mutable_super();
}
inline void InsertDrawablesCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.InsertDrawablesCommandArchive.super)
}

// optional bool for_paste = 2;
inline bool InsertDrawablesCommandArchive::_internal_has_for_paste() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InsertDrawablesCommandArchive::has_for_paste() const {
  return _internal_has_for_paste();
}
inline void InsertDrawablesCommandArchive::clear_for_paste() {
  for_paste_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool InsertDrawablesCommandArchive::_internal_for_paste() const {
  return for_paste_;
}
inline bool InsertDrawablesCommandArchive::for_paste() const {
  // @@protoc_insertion_point(field_get:TP.InsertDrawablesCommandArchive.for_paste)
  return _internal_for_paste();
}
inline void InsertDrawablesCommandArchive::_internal_set_for_paste(bool value) {
  _has_bits_[0] |= 0x00000004u;
  for_paste_ = value;
}
inline void InsertDrawablesCommandArchive::set_for_paste(bool value) {
  _internal_set_for_paste(value);
  // @@protoc_insertion_point(field_set:TP.InsertDrawablesCommandArchive.for_paste)
}

// repeated .TSK.AddIdOperationArgs args_list = 3;
inline int InsertDrawablesCommandArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int InsertDrawablesCommandArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::AddIdOperationArgs* InsertDrawablesCommandArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.InsertDrawablesCommandArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
InsertDrawablesCommandArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.InsertDrawablesCommandArchive.args_list)
  return &args_list_;
}
inline const ::TSK::AddIdOperationArgs& InsertDrawablesCommandArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::AddIdOperationArgs& InsertDrawablesCommandArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.InsertDrawablesCommandArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::AddIdOperationArgs* InsertDrawablesCommandArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::AddIdOperationArgs* InsertDrawablesCommandArchive::add_args_list() {
  // @@protoc_insertion_point(field_add:TP.InsertDrawablesCommandArchive.args_list)
  return _internal_add_args_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
InsertDrawablesCommandArchive::args_list() const {
  // @@protoc_insertion_point(field_list:TP.InsertDrawablesCommandArchive.args_list)
  return args_list_;
}

// repeated uint32 page_index_list = 4;
inline int InsertDrawablesCommandArchive::_internal_page_index_list_size() const {
  return page_index_list_.size();
}
inline int InsertDrawablesCommandArchive::page_index_list_size() const {
  return _internal_page_index_list_size();
}
inline void InsertDrawablesCommandArchive::clear_page_index_list() {
  page_index_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertDrawablesCommandArchive::_internal_page_index_list(int index) const {
  return page_index_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertDrawablesCommandArchive::page_index_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.InsertDrawablesCommandArchive.page_index_list)
  return _internal_page_index_list(index);
}
inline void InsertDrawablesCommandArchive::set_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  page_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TP.InsertDrawablesCommandArchive.page_index_list)
}
inline void InsertDrawablesCommandArchive::_internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  page_index_list_.Add(value);
}
inline void InsertDrawablesCommandArchive::add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_page_index_list(value);
  // @@protoc_insertion_point(field_add:TP.InsertDrawablesCommandArchive.page_index_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
InsertDrawablesCommandArchive::_internal_page_index_list() const {
  return page_index_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
InsertDrawablesCommandArchive::page_index_list() const {
  // @@protoc_insertion_point(field_list:TP.InsertDrawablesCommandArchive.page_index_list)
  return _internal_page_index_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
InsertDrawablesCommandArchive::_internal_mutable_page_index_list() {
  return &page_index_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
InsertDrawablesCommandArchive::mutable_page_index_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.InsertDrawablesCommandArchive.page_index_list)
  return _internal_mutable_page_index_list();
}

// repeated .TSP.Reference drawable_info_list = 5;
inline int InsertDrawablesCommandArchive::_internal_drawable_info_list_size() const {
  return drawable_info_list_.size();
}
inline int InsertDrawablesCommandArchive::drawable_info_list_size() const {
  return _internal_drawable_info_list_size();
}
inline ::TSP::Reference* InsertDrawablesCommandArchive::mutable_drawable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.InsertDrawablesCommandArchive.drawable_info_list)
  return drawable_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
InsertDrawablesCommandArchive::mutable_drawable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.InsertDrawablesCommandArchive.drawable_info_list)
  return &drawable_info_list_;
}
inline const ::TSP::Reference& InsertDrawablesCommandArchive::_internal_drawable_info_list(int index) const {
  return drawable_info_list_.Get(index);
}
inline const ::TSP::Reference& InsertDrawablesCommandArchive::drawable_info_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.InsertDrawablesCommandArchive.drawable_info_list)
  return _internal_drawable_info_list(index);
}
inline ::TSP::Reference* InsertDrawablesCommandArchive::_internal_add_drawable_info_list() {
  return drawable_info_list_.Add();
}
inline ::TSP::Reference* InsertDrawablesCommandArchive::add_drawable_info_list() {
  // @@protoc_insertion_point(field_add:TP.InsertDrawablesCommandArchive.drawable_info_list)
  return _internal_add_drawable_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
InsertDrawablesCommandArchive::drawable_info_list() const {
  // @@protoc_insertion_point(field_list:TP.InsertDrawablesCommandArchive.drawable_info_list)
  return drawable_info_list_;
}

// repeated string placeholder_tags_list = 9;
inline int InsertDrawablesCommandArchive::_internal_placeholder_tags_list_size() const {
  return placeholder_tags_list_.size();
}
inline int InsertDrawablesCommandArchive::placeholder_tags_list_size() const {
  return _internal_placeholder_tags_list_size();
}
inline void InsertDrawablesCommandArchive::clear_placeholder_tags_list() {
  placeholder_tags_list_.Clear();
}
inline std::string* InsertDrawablesCommandArchive::add_placeholder_tags_list() {
  // @@protoc_insertion_point(field_add_mutable:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
  return _internal_add_placeholder_tags_list();
}
inline const std::string& InsertDrawablesCommandArchive::_internal_placeholder_tags_list(int index) const {
  return placeholder_tags_list_.Get(index);
}
inline const std::string& InsertDrawablesCommandArchive::placeholder_tags_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
  return _internal_placeholder_tags_list(index);
}
inline std::string* InsertDrawablesCommandArchive::mutable_placeholder_tags_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
  return placeholder_tags_list_.Mutable(index);
}
inline void InsertDrawablesCommandArchive::set_placeholder_tags_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
  placeholder_tags_list_.Mutable(index)->assign(value);
}
inline void InsertDrawablesCommandArchive::set_placeholder_tags_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
  placeholder_tags_list_.Mutable(index)->assign(std::move(value));
}
inline void InsertDrawablesCommandArchive::set_placeholder_tags_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  placeholder_tags_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
}
inline void InsertDrawablesCommandArchive::set_placeholder_tags_list(int index, const char* value, size_t size) {
  placeholder_tags_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
}
inline std::string* InsertDrawablesCommandArchive::_internal_add_placeholder_tags_list() {
  return placeholder_tags_list_.Add();
}
inline void InsertDrawablesCommandArchive::add_placeholder_tags_list(const std::string& value) {
  placeholder_tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
}
inline void InsertDrawablesCommandArchive::add_placeholder_tags_list(std::string&& value) {
  placeholder_tags_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
}
inline void InsertDrawablesCommandArchive::add_placeholder_tags_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  placeholder_tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
}
inline void InsertDrawablesCommandArchive::add_placeholder_tags_list(const char* value, size_t size) {
  placeholder_tags_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InsertDrawablesCommandArchive::placeholder_tags_list() const {
  // @@protoc_insertion_point(field_list:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
  return placeholder_tags_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InsertDrawablesCommandArchive::mutable_placeholder_tags_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.InsertDrawablesCommandArchive.placeholder_tags_list)
  return &placeholder_tags_list_;
}

// repeated .TSP.UUID custom_format_keys = 6;
inline int InsertDrawablesCommandArchive::_internal_custom_format_keys_size() const {
  return custom_format_keys_.size();
}
inline int InsertDrawablesCommandArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* InsertDrawablesCommandArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TP.InsertDrawablesCommandArchive.custom_format_keys)
  return custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
InsertDrawablesCommandArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:TP.InsertDrawablesCommandArchive.custom_format_keys)
  return &custom_format_keys_;
}
inline const ::TSP::UUID& InsertDrawablesCommandArchive::_internal_custom_format_keys(int index) const {
  return custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& InsertDrawablesCommandArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:TP.InsertDrawablesCommandArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* InsertDrawablesCommandArchive::_internal_add_custom_format_keys() {
  return custom_format_keys_.Add();
}
inline ::TSP::UUID* InsertDrawablesCommandArchive::add_custom_format_keys() {
  // @@protoc_insertion_point(field_add:TP.InsertDrawablesCommandArchive.custom_format_keys)
  return _internal_add_custom_format_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
InsertDrawablesCommandArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:TP.InsertDrawablesCommandArchive.custom_format_keys)
  return custom_format_keys_;
}

// optional .TSP.Reference drawable_undo_object = 7;
inline bool InsertDrawablesCommandArchive::_internal_has_drawable_undo_object() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || drawable_undo_object_ != nullptr);
  return value;
}
inline bool InsertDrawablesCommandArchive::has_drawable_undo_object() const {
  return _internal_has_drawable_undo_object();
}
inline const ::TSP::Reference& InsertDrawablesCommandArchive::_internal_drawable_undo_object() const {
  const ::TSP::Reference* p = drawable_undo_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& InsertDrawablesCommandArchive::drawable_undo_object() const {
  // @@protoc_insertion_point(field_get:TP.InsertDrawablesCommandArchive.drawable_undo_object)
  return _internal_drawable_undo_object();
}
inline void InsertDrawablesCommandArchive::unsafe_arena_set_allocated_drawable_undo_object(
    ::TSP::Reference* drawable_undo_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_undo_object_);
  }
  drawable_undo_object_ = drawable_undo_object;
  if (drawable_undo_object) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.InsertDrawablesCommandArchive.drawable_undo_object)
}
inline ::TSP::Reference* InsertDrawablesCommandArchive::release_drawable_undo_object() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = drawable_undo_object_;
  drawable_undo_object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* InsertDrawablesCommandArchive::unsafe_arena_release_drawable_undo_object() {
  // @@protoc_insertion_point(field_release:TP.InsertDrawablesCommandArchive.drawable_undo_object)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = drawable_undo_object_;
  drawable_undo_object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* InsertDrawablesCommandArchive::_internal_mutable_drawable_undo_object() {
  _has_bits_[0] |= 0x00000002u;
  if (drawable_undo_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    drawable_undo_object_ = p;
  }
  return drawable_undo_object_;
}
inline ::TSP::Reference* InsertDrawablesCommandArchive::mutable_drawable_undo_object() {
  // @@protoc_insertion_point(field_mutable:TP.InsertDrawablesCommandArchive.drawable_undo_object)
  return _internal_mutable_drawable_undo_object();
}
inline void InsertDrawablesCommandArchive::set_allocated_drawable_undo_object(::TSP::Reference* drawable_undo_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_undo_object_);
  }
  if (drawable_undo_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_undo_object)->GetArena();
    if (message_arena != submessage_arena) {
      drawable_undo_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable_undo_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  drawable_undo_object_ = drawable_undo_object;
  // @@protoc_insertion_point(field_set_allocated:TP.InsertDrawablesCommandArchive.drawable_undo_object)
}

// optional uint32 saved_next_untitled_resolver_index = 8;
inline bool InsertDrawablesCommandArchive::_internal_has_saved_next_untitled_resolver_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InsertDrawablesCommandArchive::has_saved_next_untitled_resolver_index() const {
  return _internal_has_saved_next_untitled_resolver_index();
}
inline void InsertDrawablesCommandArchive::clear_saved_next_untitled_resolver_index() {
  saved_next_untitled_resolver_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertDrawablesCommandArchive::_internal_saved_next_untitled_resolver_index() const {
  return saved_next_untitled_resolver_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertDrawablesCommandArchive::saved_next_untitled_resolver_index() const {
  // @@protoc_insertion_point(field_get:TP.InsertDrawablesCommandArchive.saved_next_untitled_resolver_index)
  return _internal_saved_next_untitled_resolver_index();
}
inline void InsertDrawablesCommandArchive::_internal_set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  saved_next_untitled_resolver_index_ = value;
}
inline void InsertDrawablesCommandArchive::set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_saved_next_untitled_resolver_index(value);
  // @@protoc_insertion_point(field_set:TP.InsertDrawablesCommandArchive.saved_next_untitled_resolver_index)
}

// -------------------------------------------------------------------

// MoveDrawablesPageIndexCommandArchive_Drawable

// optional .TSP.Reference drawable = 1;
inline bool MoveDrawablesPageIndexCommandArchive_Drawable::_internal_has_drawable() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || drawable_ != nullptr);
  return value;
}
inline bool MoveDrawablesPageIndexCommandArchive_Drawable::has_drawable() const {
  return _internal_has_drawable();
}
inline const ::TSP::Reference& MoveDrawablesPageIndexCommandArchive_Drawable::_internal_drawable() const {
  const ::TSP::Reference* p = drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MoveDrawablesPageIndexCommandArchive_Drawable::drawable() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.Drawable.drawable)
  return _internal_drawable();
}
inline void MoveDrawablesPageIndexCommandArchive_Drawable::unsafe_arena_set_allocated_drawable(
    ::TSP::Reference* drawable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  drawable_ = drawable;
  if (drawable) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveDrawablesPageIndexCommandArchive.Drawable.drawable)
}
inline ::TSP::Reference* MoveDrawablesPageIndexCommandArchive_Drawable::release_drawable() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* MoveDrawablesPageIndexCommandArchive_Drawable::unsafe_arena_release_drawable() {
  // @@protoc_insertion_point(field_release:TP.MoveDrawablesPageIndexCommandArchive.Drawable.drawable)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MoveDrawablesPageIndexCommandArchive_Drawable::_internal_mutable_drawable() {
  _has_bits_[0] |= 0x00000001u;
  if (drawable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    drawable_ = p;
  }
  return drawable_;
}
inline ::TSP::Reference* MoveDrawablesPageIndexCommandArchive_Drawable::mutable_drawable() {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesPageIndexCommandArchive.Drawable.drawable)
  return _internal_mutable_drawable();
}
inline void MoveDrawablesPageIndexCommandArchive_Drawable::set_allocated_drawable(::TSP::Reference* drawable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  if (drawable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable)->GetArena();
    if (message_arena != submessage_arena) {
      drawable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  drawable_ = drawable;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveDrawablesPageIndexCommandArchive.Drawable.drawable)
}

// optional uint32 z_order = 2;
inline bool MoveDrawablesPageIndexCommandArchive_Drawable::_internal_has_z_order() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MoveDrawablesPageIndexCommandArchive_Drawable::has_z_order() const {
  return _internal_has_z_order();
}
inline void MoveDrawablesPageIndexCommandArchive_Drawable::clear_z_order() {
  z_order_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesPageIndexCommandArchive_Drawable::_internal_z_order() const {
  return z_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesPageIndexCommandArchive_Drawable::z_order() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.Drawable.z_order)
  return _internal_z_order();
}
inline void MoveDrawablesPageIndexCommandArchive_Drawable::_internal_set_z_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  z_order_ = value;
}
inline void MoveDrawablesPageIndexCommandArchive_Drawable::set_z_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_z_order(value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesPageIndexCommandArchive.Drawable.z_order)
}

// -------------------------------------------------------------------

// MoveDrawablesPageIndexCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool MoveDrawablesPageIndexCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MoveDrawablesPageIndexCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& MoveDrawablesPageIndexCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& MoveDrawablesPageIndexCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.super)
  return _internal_super();
}
inline void MoveDrawablesPageIndexCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveDrawablesPageIndexCommandArchive.super)
}
inline ::TSK::CommandArchive* MoveDrawablesPageIndexCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* MoveDrawablesPageIndexCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.MoveDrawablesPageIndexCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* MoveDrawablesPageIndexCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* MoveDrawablesPageIndexCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesPageIndexCommandArchive.super)
  return _internal_mutable_super();
}
inline void MoveDrawablesPageIndexCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveDrawablesPageIndexCommandArchive.super)
}

// optional uint32 page_index = 2 [deprecated = true];
inline bool MoveDrawablesPageIndexCommandArchive::_internal_has_page_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MoveDrawablesPageIndexCommandArchive::has_page_index() const {
  return _internal_has_page_index();
}
inline void MoveDrawablesPageIndexCommandArchive::clear_page_index() {
  page_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesPageIndexCommandArchive::_internal_page_index() const {
  return page_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesPageIndexCommandArchive::page_index() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.page_index)
  return _internal_page_index();
}
inline void MoveDrawablesPageIndexCommandArchive::_internal_set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  page_index_ = value;
}
inline void MoveDrawablesPageIndexCommandArchive::set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_index(value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesPageIndexCommandArchive.page_index)
}

// repeated .TP.MoveDrawablesPageIndexCommandArchive.Drawable drawables = 3 [deprecated = true];
inline int MoveDrawablesPageIndexCommandArchive::_internal_drawables_size() const {
  return drawables_.size();
}
inline int MoveDrawablesPageIndexCommandArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline void MoveDrawablesPageIndexCommandArchive::clear_drawables() {
  drawables_.Clear();
}
inline ::TP::MoveDrawablesPageIndexCommandArchive_Drawable* MoveDrawablesPageIndexCommandArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesPageIndexCommandArchive.drawables)
  return drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::MoveDrawablesPageIndexCommandArchive_Drawable >*
MoveDrawablesPageIndexCommandArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesPageIndexCommandArchive.drawables)
  return &drawables_;
}
inline const ::TP::MoveDrawablesPageIndexCommandArchive_Drawable& MoveDrawablesPageIndexCommandArchive::_internal_drawables(int index) const {
  return drawables_.Get(index);
}
inline const ::TP::MoveDrawablesPageIndexCommandArchive_Drawable& MoveDrawablesPageIndexCommandArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.drawables)
  return _internal_drawables(index);
}
inline ::TP::MoveDrawablesPageIndexCommandArchive_Drawable* MoveDrawablesPageIndexCommandArchive::_internal_add_drawables() {
  return drawables_.Add();
}
inline ::TP::MoveDrawablesPageIndexCommandArchive_Drawable* MoveDrawablesPageIndexCommandArchive::add_drawables() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesPageIndexCommandArchive.drawables)
  return _internal_add_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::MoveDrawablesPageIndexCommandArchive_Drawable >&
MoveDrawablesPageIndexCommandArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesPageIndexCommandArchive.drawables)
  return drawables_;
}

// optional bool maintain_z_order = 4 [deprecated = true];
inline bool MoveDrawablesPageIndexCommandArchive::_internal_has_maintain_z_order() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MoveDrawablesPageIndexCommandArchive::has_maintain_z_order() const {
  return _internal_has_maintain_z_order();
}
inline void MoveDrawablesPageIndexCommandArchive::clear_maintain_z_order() {
  maintain_z_order_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MoveDrawablesPageIndexCommandArchive::_internal_maintain_z_order() const {
  return maintain_z_order_;
}
inline bool MoveDrawablesPageIndexCommandArchive::maintain_z_order() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.maintain_z_order)
  return _internal_maintain_z_order();
}
inline void MoveDrawablesPageIndexCommandArchive::_internal_set_maintain_z_order(bool value) {
  _has_bits_[0] |= 0x00000004u;
  maintain_z_order_ = value;
}
inline void MoveDrawablesPageIndexCommandArchive::set_maintain_z_order(bool value) {
  _internal_set_maintain_z_order(value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesPageIndexCommandArchive.maintain_z_order)
}

// repeated .TSP.UUIDPath drawable_info_id_path_list = 5;
inline int MoveDrawablesPageIndexCommandArchive::_internal_drawable_info_id_path_list_size() const {
  return drawable_info_id_path_list_.size();
}
inline int MoveDrawablesPageIndexCommandArchive::drawable_info_id_path_list_size() const {
  return _internal_drawable_info_id_path_list_size();
}
inline ::TSP::UUIDPath* MoveDrawablesPageIndexCommandArchive::mutable_drawable_info_id_path_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesPageIndexCommandArchive.drawable_info_id_path_list)
  return drawable_info_id_path_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
MoveDrawablesPageIndexCommandArchive::mutable_drawable_info_id_path_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesPageIndexCommandArchive.drawable_info_id_path_list)
  return &drawable_info_id_path_list_;
}
inline const ::TSP::UUIDPath& MoveDrawablesPageIndexCommandArchive::_internal_drawable_info_id_path_list(int index) const {
  return drawable_info_id_path_list_.Get(index);
}
inline const ::TSP::UUIDPath& MoveDrawablesPageIndexCommandArchive::drawable_info_id_path_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.drawable_info_id_path_list)
  return _internal_drawable_info_id_path_list(index);
}
inline ::TSP::UUIDPath* MoveDrawablesPageIndexCommandArchive::_internal_add_drawable_info_id_path_list() {
  return drawable_info_id_path_list_.Add();
}
inline ::TSP::UUIDPath* MoveDrawablesPageIndexCommandArchive::add_drawable_info_id_path_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesPageIndexCommandArchive.drawable_info_id_path_list)
  return _internal_add_drawable_info_id_path_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
MoveDrawablesPageIndexCommandArchive::drawable_info_id_path_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesPageIndexCommandArchive.drawable_info_id_path_list)
  return drawable_info_id_path_list_;
}

// repeated uint32 page_index_list = 6;
inline int MoveDrawablesPageIndexCommandArchive::_internal_page_index_list_size() const {
  return page_index_list_.size();
}
inline int MoveDrawablesPageIndexCommandArchive::page_index_list_size() const {
  return _internal_page_index_list_size();
}
inline void MoveDrawablesPageIndexCommandArchive::clear_page_index_list() {
  page_index_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesPageIndexCommandArchive::_internal_page_index_list(int index) const {
  return page_index_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesPageIndexCommandArchive::page_index_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.page_index_list)
  return _internal_page_index_list(index);
}
inline void MoveDrawablesPageIndexCommandArchive::set_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  page_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesPageIndexCommandArchive.page_index_list)
}
inline void MoveDrawablesPageIndexCommandArchive::_internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  page_index_list_.Add(value);
}
inline void MoveDrawablesPageIndexCommandArchive::add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_page_index_list(value);
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesPageIndexCommandArchive.page_index_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MoveDrawablesPageIndexCommandArchive::_internal_page_index_list() const {
  return page_index_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MoveDrawablesPageIndexCommandArchive::page_index_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesPageIndexCommandArchive.page_index_list)
  return _internal_page_index_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MoveDrawablesPageIndexCommandArchive::_internal_mutable_page_index_list() {
  return &page_index_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MoveDrawablesPageIndexCommandArchive::mutable_page_index_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesPageIndexCommandArchive.page_index_list)
  return _internal_mutable_page_index_list();
}

// repeated uint32 original_page_index_list = 7;
inline int MoveDrawablesPageIndexCommandArchive::_internal_original_page_index_list_size() const {
  return original_page_index_list_.size();
}
inline int MoveDrawablesPageIndexCommandArchive::original_page_index_list_size() const {
  return _internal_original_page_index_list_size();
}
inline void MoveDrawablesPageIndexCommandArchive::clear_original_page_index_list() {
  original_page_index_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesPageIndexCommandArchive::_internal_original_page_index_list(int index) const {
  return original_page_index_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesPageIndexCommandArchive::original_page_index_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.original_page_index_list)
  return _internal_original_page_index_list(index);
}
inline void MoveDrawablesPageIndexCommandArchive::set_original_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  original_page_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesPageIndexCommandArchive.original_page_index_list)
}
inline void MoveDrawablesPageIndexCommandArchive::_internal_add_original_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  original_page_index_list_.Add(value);
}
inline void MoveDrawablesPageIndexCommandArchive::add_original_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_original_page_index_list(value);
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesPageIndexCommandArchive.original_page_index_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MoveDrawablesPageIndexCommandArchive::_internal_original_page_index_list() const {
  return original_page_index_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MoveDrawablesPageIndexCommandArchive::original_page_index_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesPageIndexCommandArchive.original_page_index_list)
  return _internal_original_page_index_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MoveDrawablesPageIndexCommandArchive::_internal_mutable_original_page_index_list() {
  return &original_page_index_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MoveDrawablesPageIndexCommandArchive::mutable_original_page_index_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesPageIndexCommandArchive.original_page_index_list)
  return _internal_mutable_original_page_index_list();
}

// repeated string tags_list = 8;
inline int MoveDrawablesPageIndexCommandArchive::_internal_tags_list_size() const {
  return tags_list_.size();
}
inline int MoveDrawablesPageIndexCommandArchive::tags_list_size() const {
  return _internal_tags_list_size();
}
inline void MoveDrawablesPageIndexCommandArchive::clear_tags_list() {
  tags_list_.Clear();
}
inline std::string* MoveDrawablesPageIndexCommandArchive::add_tags_list() {
  // @@protoc_insertion_point(field_add_mutable:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
  return _internal_add_tags_list();
}
inline const std::string& MoveDrawablesPageIndexCommandArchive::_internal_tags_list(int index) const {
  return tags_list_.Get(index);
}
inline const std::string& MoveDrawablesPageIndexCommandArchive::tags_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
  return _internal_tags_list(index);
}
inline std::string* MoveDrawablesPageIndexCommandArchive::mutable_tags_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
  return tags_list_.Mutable(index);
}
inline void MoveDrawablesPageIndexCommandArchive::set_tags_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
  tags_list_.Mutable(index)->assign(value);
}
inline void MoveDrawablesPageIndexCommandArchive::set_tags_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
  tags_list_.Mutable(index)->assign(std::move(value));
}
inline void MoveDrawablesPageIndexCommandArchive::set_tags_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
}
inline void MoveDrawablesPageIndexCommandArchive::set_tags_list(int index, const char* value, size_t size) {
  tags_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
}
inline std::string* MoveDrawablesPageIndexCommandArchive::_internal_add_tags_list() {
  return tags_list_.Add();
}
inline void MoveDrawablesPageIndexCommandArchive::add_tags_list(const std::string& value) {
  tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
}
inline void MoveDrawablesPageIndexCommandArchive::add_tags_list(std::string&& value) {
  tags_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
}
inline void MoveDrawablesPageIndexCommandArchive::add_tags_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
}
inline void MoveDrawablesPageIndexCommandArchive::add_tags_list(const char* value, size_t size) {
  tags_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MoveDrawablesPageIndexCommandArchive::tags_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
  return tags_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MoveDrawablesPageIndexCommandArchive::mutable_tags_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesPageIndexCommandArchive.tags_list)
  return &tags_list_;
}

// repeated string original_tags_list = 9;
inline int MoveDrawablesPageIndexCommandArchive::_internal_original_tags_list_size() const {
  return original_tags_list_.size();
}
inline int MoveDrawablesPageIndexCommandArchive::original_tags_list_size() const {
  return _internal_original_tags_list_size();
}
inline void MoveDrawablesPageIndexCommandArchive::clear_original_tags_list() {
  original_tags_list_.Clear();
}
inline std::string* MoveDrawablesPageIndexCommandArchive::add_original_tags_list() {
  // @@protoc_insertion_point(field_add_mutable:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
  return _internal_add_original_tags_list();
}
inline const std::string& MoveDrawablesPageIndexCommandArchive::_internal_original_tags_list(int index) const {
  return original_tags_list_.Get(index);
}
inline const std::string& MoveDrawablesPageIndexCommandArchive::original_tags_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
  return _internal_original_tags_list(index);
}
inline std::string* MoveDrawablesPageIndexCommandArchive::mutable_original_tags_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
  return original_tags_list_.Mutable(index);
}
inline void MoveDrawablesPageIndexCommandArchive::set_original_tags_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
  original_tags_list_.Mutable(index)->assign(value);
}
inline void MoveDrawablesPageIndexCommandArchive::set_original_tags_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
  original_tags_list_.Mutable(index)->assign(std::move(value));
}
inline void MoveDrawablesPageIndexCommandArchive::set_original_tags_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  original_tags_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
}
inline void MoveDrawablesPageIndexCommandArchive::set_original_tags_list(int index, const char* value, size_t size) {
  original_tags_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
}
inline std::string* MoveDrawablesPageIndexCommandArchive::_internal_add_original_tags_list() {
  return original_tags_list_.Add();
}
inline void MoveDrawablesPageIndexCommandArchive::add_original_tags_list(const std::string& value) {
  original_tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
}
inline void MoveDrawablesPageIndexCommandArchive::add_original_tags_list(std::string&& value) {
  original_tags_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
}
inline void MoveDrawablesPageIndexCommandArchive::add_original_tags_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  original_tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
}
inline void MoveDrawablesPageIndexCommandArchive::add_original_tags_list(const char* value, size_t size) {
  original_tags_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MoveDrawablesPageIndexCommandArchive::original_tags_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
  return original_tags_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MoveDrawablesPageIndexCommandArchive::mutable_original_tags_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesPageIndexCommandArchive.original_tags_list)
  return &original_tags_list_;
}

// optional bool preserve_tags = 10;
inline bool MoveDrawablesPageIndexCommandArchive::_internal_has_preserve_tags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MoveDrawablesPageIndexCommandArchive::has_preserve_tags() const {
  return _internal_has_preserve_tags();
}
inline void MoveDrawablesPageIndexCommandArchive::clear_preserve_tags() {
  preserve_tags_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MoveDrawablesPageIndexCommandArchive::_internal_preserve_tags() const {
  return preserve_tags_;
}
inline bool MoveDrawablesPageIndexCommandArchive::preserve_tags() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesPageIndexCommandArchive.preserve_tags)
  return _internal_preserve_tags();
}
inline void MoveDrawablesPageIndexCommandArchive::_internal_set_preserve_tags(bool value) {
  _has_bits_[0] |= 0x00000008u;
  preserve_tags_ = value;
}
inline void MoveDrawablesPageIndexCommandArchive::set_preserve_tags(bool value) {
  _internal_set_preserve_tags(value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesPageIndexCommandArchive.preserve_tags)
}

// -------------------------------------------------------------------

// InsertSectionBreakCommandArchive

// required .TSWP.StorageActionCommandArchive super = 1;
inline bool InsertSectionBreakCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InsertSectionBreakCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::StorageActionCommandArchive& InsertSectionBreakCommandArchive::_internal_super() const {
  const ::TSWP::StorageActionCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StorageActionCommandArchive&>(
      ::TSWP::_StorageActionCommandArchive_default_instance_);
}
inline const ::TSWP::StorageActionCommandArchive& InsertSectionBreakCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.InsertSectionBreakCommandArchive.super)
  return _internal_super();
}
inline void InsertSectionBreakCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StorageActionCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.InsertSectionBreakCommandArchive.super)
}
inline ::TSWP::StorageActionCommandArchive* InsertSectionBreakCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* InsertSectionBreakCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.InsertSectionBreakCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* InsertSectionBreakCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StorageActionCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StorageActionCommandArchive* InsertSectionBreakCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.InsertSectionBreakCommandArchive.super)
  return _internal_mutable_super();
}
inline void InsertSectionBreakCommandArchive::set_allocated_super(::TSWP::StorageActionCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.InsertSectionBreakCommandArchive.super)
}

// -------------------------------------------------------------------

// MoveDrawableZOrderCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool MoveDrawableZOrderCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MoveDrawableZOrderCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& MoveDrawableZOrderCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& MoveDrawableZOrderCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawableZOrderCommandArchive.super)
  return _internal_super();
}
inline void MoveDrawableZOrderCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveDrawableZOrderCommandArchive.super)
}
inline ::TSK::CommandArchive* MoveDrawableZOrderCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* MoveDrawableZOrderCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.MoveDrawableZOrderCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* MoveDrawableZOrderCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* MoveDrawableZOrderCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawableZOrderCommandArchive.super)
  return _internal_mutable_super();
}
inline void MoveDrawableZOrderCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveDrawableZOrderCommandArchive.super)
}

// repeated .TSK.RearrangeIdOperationArgs args_list = 2;
inline int MoveDrawableZOrderCommandArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int MoveDrawableZOrderCommandArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::RearrangeIdOperationArgs* MoveDrawableZOrderCommandArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawableZOrderCommandArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
MoveDrawableZOrderCommandArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawableZOrderCommandArchive.args_list)
  return &args_list_;
}
inline const ::TSK::RearrangeIdOperationArgs& MoveDrawableZOrderCommandArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::RearrangeIdOperationArgs& MoveDrawableZOrderCommandArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawableZOrderCommandArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::RearrangeIdOperationArgs* MoveDrawableZOrderCommandArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::RearrangeIdOperationArgs* MoveDrawableZOrderCommandArchive::add_args_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawableZOrderCommandArchive.args_list)
  return _internal_add_args_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
MoveDrawableZOrderCommandArchive::args_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawableZOrderCommandArchive.args_list)
  return args_list_;
}

// optional uint32 action_string_index = 3;
inline bool MoveDrawableZOrderCommandArchive::_internal_has_action_string_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MoveDrawableZOrderCommandArchive::has_action_string_index() const {
  return _internal_has_action_string_index();
}
inline void MoveDrawableZOrderCommandArchive::clear_action_string_index() {
  action_string_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawableZOrderCommandArchive::_internal_action_string_index() const {
  return action_string_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawableZOrderCommandArchive::action_string_index() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawableZOrderCommandArchive.action_string_index)
  return _internal_action_string_index();
}
inline void MoveDrawableZOrderCommandArchive::_internal_set_action_string_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  action_string_index_ = value;
}
inline void MoveDrawableZOrderCommandArchive::set_action_string_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_action_string_index(value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawableZOrderCommandArchive.action_string_index)
}

// -------------------------------------------------------------------

// RemoveDrawablesCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool RemoveDrawablesCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool RemoveDrawablesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& RemoveDrawablesCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& RemoveDrawablesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.RemoveDrawablesCommandArchive.super)
  return _internal_super();
}
inline void RemoveDrawablesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.RemoveDrawablesCommandArchive.super)
}
inline ::TSK::CommandArchive* RemoveDrawablesCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* RemoveDrawablesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.RemoveDrawablesCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* RemoveDrawablesCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* RemoveDrawablesCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.RemoveDrawablesCommandArchive.super)
  return _internal_mutable_super();
}
inline void RemoveDrawablesCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.RemoveDrawablesCommandArchive.super)
}

// repeated .TSK.RemoveIdOperationArgs args_list = 2;
inline int RemoveDrawablesCommandArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int RemoveDrawablesCommandArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::RemoveIdOperationArgs* RemoveDrawablesCommandArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.RemoveDrawablesCommandArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
RemoveDrawablesCommandArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.RemoveDrawablesCommandArchive.args_list)
  return &args_list_;
}
inline const ::TSK::RemoveIdOperationArgs& RemoveDrawablesCommandArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::RemoveIdOperationArgs& RemoveDrawablesCommandArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.RemoveDrawablesCommandArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::RemoveIdOperationArgs* RemoveDrawablesCommandArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::RemoveIdOperationArgs* RemoveDrawablesCommandArchive::add_args_list() {
  // @@protoc_insertion_point(field_add:TP.RemoveDrawablesCommandArchive.args_list)
  return _internal_add_args_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
RemoveDrawablesCommandArchive::args_list() const {
  // @@protoc_insertion_point(field_list:TP.RemoveDrawablesCommandArchive.args_list)
  return args_list_;
}

// repeated .TSP.Reference drawable_info_list = 3;
inline int RemoveDrawablesCommandArchive::_internal_drawable_info_list_size() const {
  return drawable_info_list_.size();
}
inline int RemoveDrawablesCommandArchive::drawable_info_list_size() const {
  return _internal_drawable_info_list_size();
}
inline ::TSP::Reference* RemoveDrawablesCommandArchive::mutable_drawable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.RemoveDrawablesCommandArchive.drawable_info_list)
  return drawable_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
RemoveDrawablesCommandArchive::mutable_drawable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.RemoveDrawablesCommandArchive.drawable_info_list)
  return &drawable_info_list_;
}
inline const ::TSP::Reference& RemoveDrawablesCommandArchive::_internal_drawable_info_list(int index) const {
  return drawable_info_list_.Get(index);
}
inline const ::TSP::Reference& RemoveDrawablesCommandArchive::drawable_info_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.RemoveDrawablesCommandArchive.drawable_info_list)
  return _internal_drawable_info_list(index);
}
inline ::TSP::Reference* RemoveDrawablesCommandArchive::_internal_add_drawable_info_list() {
  return drawable_info_list_.Add();
}
inline ::TSP::Reference* RemoveDrawablesCommandArchive::add_drawable_info_list() {
  // @@protoc_insertion_point(field_add:TP.RemoveDrawablesCommandArchive.drawable_info_list)
  return _internal_add_drawable_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
RemoveDrawablesCommandArchive::drawable_info_list() const {
  // @@protoc_insertion_point(field_list:TP.RemoveDrawablesCommandArchive.drawable_info_list)
  return drawable_info_list_;
}

// repeated uint32 page_index_list = 4;
inline int RemoveDrawablesCommandArchive::_internal_page_index_list_size() const {
  return page_index_list_.size();
}
inline int RemoveDrawablesCommandArchive::page_index_list_size() const {
  return _internal_page_index_list_size();
}
inline void RemoveDrawablesCommandArchive::clear_page_index_list() {
  page_index_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveDrawablesCommandArchive::_internal_page_index_list(int index) const {
  return page_index_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveDrawablesCommandArchive::page_index_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.RemoveDrawablesCommandArchive.page_index_list)
  return _internal_page_index_list(index);
}
inline void RemoveDrawablesCommandArchive::set_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  page_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TP.RemoveDrawablesCommandArchive.page_index_list)
}
inline void RemoveDrawablesCommandArchive::_internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  page_index_list_.Add(value);
}
inline void RemoveDrawablesCommandArchive::add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_page_index_list(value);
  // @@protoc_insertion_point(field_add:TP.RemoveDrawablesCommandArchive.page_index_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RemoveDrawablesCommandArchive::_internal_page_index_list() const {
  return page_index_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RemoveDrawablesCommandArchive::page_index_list() const {
  // @@protoc_insertion_point(field_list:TP.RemoveDrawablesCommandArchive.page_index_list)
  return _internal_page_index_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RemoveDrawablesCommandArchive::_internal_mutable_page_index_list() {
  return &page_index_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RemoveDrawablesCommandArchive::mutable_page_index_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.RemoveDrawablesCommandArchive.page_index_list)
  return _internal_mutable_page_index_list();
}

// repeated string tags_list = 5;
inline int RemoveDrawablesCommandArchive::_internal_tags_list_size() const {
  return tags_list_.size();
}
inline int RemoveDrawablesCommandArchive::tags_list_size() const {
  return _internal_tags_list_size();
}
inline void RemoveDrawablesCommandArchive::clear_tags_list() {
  tags_list_.Clear();
}
inline std::string* RemoveDrawablesCommandArchive::add_tags_list() {
  // @@protoc_insertion_point(field_add_mutable:TP.RemoveDrawablesCommandArchive.tags_list)
  return _internal_add_tags_list();
}
inline const std::string& RemoveDrawablesCommandArchive::_internal_tags_list(int index) const {
  return tags_list_.Get(index);
}
inline const std::string& RemoveDrawablesCommandArchive::tags_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.RemoveDrawablesCommandArchive.tags_list)
  return _internal_tags_list(index);
}
inline std::string* RemoveDrawablesCommandArchive::mutable_tags_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.RemoveDrawablesCommandArchive.tags_list)
  return tags_list_.Mutable(index);
}
inline void RemoveDrawablesCommandArchive::set_tags_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TP.RemoveDrawablesCommandArchive.tags_list)
  tags_list_.Mutable(index)->assign(value);
}
inline void RemoveDrawablesCommandArchive::set_tags_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TP.RemoveDrawablesCommandArchive.tags_list)
  tags_list_.Mutable(index)->assign(std::move(value));
}
inline void RemoveDrawablesCommandArchive::set_tags_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TP.RemoveDrawablesCommandArchive.tags_list)
}
inline void RemoveDrawablesCommandArchive::set_tags_list(int index, const char* value, size_t size) {
  tags_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TP.RemoveDrawablesCommandArchive.tags_list)
}
inline std::string* RemoveDrawablesCommandArchive::_internal_add_tags_list() {
  return tags_list_.Add();
}
inline void RemoveDrawablesCommandArchive::add_tags_list(const std::string& value) {
  tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TP.RemoveDrawablesCommandArchive.tags_list)
}
inline void RemoveDrawablesCommandArchive::add_tags_list(std::string&& value) {
  tags_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TP.RemoveDrawablesCommandArchive.tags_list)
}
inline void RemoveDrawablesCommandArchive::add_tags_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TP.RemoveDrawablesCommandArchive.tags_list)
}
inline void RemoveDrawablesCommandArchive::add_tags_list(const char* value, size_t size) {
  tags_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TP.RemoveDrawablesCommandArchive.tags_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RemoveDrawablesCommandArchive::tags_list() const {
  // @@protoc_insertion_point(field_list:TP.RemoveDrawablesCommandArchive.tags_list)
  return tags_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RemoveDrawablesCommandArchive::mutable_tags_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.RemoveDrawablesCommandArchive.tags_list)
  return &tags_list_;
}

// -------------------------------------------------------------------

// ChangeSectionMarginsCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ChangeSectionMarginsCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChangeSectionMarginsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ChangeSectionMarginsCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ChangeSectionMarginsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.ChangeSectionMarginsCommandArchive.super)
  return _internal_super();
}
inline void ChangeSectionMarginsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangeSectionMarginsCommandArchive.super)
}
inline ::TSK::CommandArchive* ChangeSectionMarginsCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ChangeSectionMarginsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.ChangeSectionMarginsCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ChangeSectionMarginsCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ChangeSectionMarginsCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.ChangeSectionMarginsCommandArchive.super)
  return _internal_mutable_super();
}
inline void ChangeSectionMarginsCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangeSectionMarginsCommandArchive.super)
}

// optional .TSP.Reference section = 2;
inline bool ChangeSectionMarginsCommandArchive::_internal_has_section() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || section_ != nullptr);
  return value;
}
inline bool ChangeSectionMarginsCommandArchive::has_section() const {
  return _internal_has_section();
}
inline const ::TSP::Reference& ChangeSectionMarginsCommandArchive::_internal_section() const {
  const ::TSP::Reference* p = section_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChangeSectionMarginsCommandArchive::section() const {
  // @@protoc_insertion_point(field_get:TP.ChangeSectionMarginsCommandArchive.section)
  return _internal_section();
}
inline void ChangeSectionMarginsCommandArchive::unsafe_arena_set_allocated_section(
    ::TSP::Reference* section) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_);
  }
  section_ = section;
  if (section) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangeSectionMarginsCommandArchive.section)
}
inline ::TSP::Reference* ChangeSectionMarginsCommandArchive::release_section() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = section_;
  section_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChangeSectionMarginsCommandArchive::unsafe_arena_release_section() {
  // @@protoc_insertion_point(field_release:TP.ChangeSectionMarginsCommandArchive.section)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = section_;
  section_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChangeSectionMarginsCommandArchive::_internal_mutable_section() {
  _has_bits_[0] |= 0x00000002u;
  if (section_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    section_ = p;
  }
  return section_;
}
inline ::TSP::Reference* ChangeSectionMarginsCommandArchive::mutable_section() {
  // @@protoc_insertion_point(field_mutable:TP.ChangeSectionMarginsCommandArchive.section)
  return _internal_mutable_section();
}
inline void ChangeSectionMarginsCommandArchive::set_allocated_section(::TSP::Reference* section) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_);
  }
  if (section) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section)->GetArena();
    if (message_arena != submessage_arena) {
      section = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, section, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  section_ = section;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangeSectionMarginsCommandArchive.section)
}

// optional .TP.ChangeSectionMarginsCommandArchive.SectionMargin margin = 3;
inline bool ChangeSectionMarginsCommandArchive::_internal_has_margin() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChangeSectionMarginsCommandArchive::has_margin() const {
  return _internal_has_margin();
}
inline void ChangeSectionMarginsCommandArchive::clear_margin() {
  margin_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TP::ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::_internal_margin() const {
  return static_cast< ::TP::ChangeSectionMarginsCommandArchive_SectionMargin >(margin_);
}
inline ::TP::ChangeSectionMarginsCommandArchive_SectionMargin ChangeSectionMarginsCommandArchive::margin() const {
  // @@protoc_insertion_point(field_get:TP.ChangeSectionMarginsCommandArchive.margin)
  return _internal_margin();
}
inline void ChangeSectionMarginsCommandArchive::_internal_set_margin(::TP::ChangeSectionMarginsCommandArchive_SectionMargin value) {
  assert(::TP::ChangeSectionMarginsCommandArchive_SectionMargin_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  margin_ = value;
}
inline void ChangeSectionMarginsCommandArchive::set_margin(::TP::ChangeSectionMarginsCommandArchive_SectionMargin value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:TP.ChangeSectionMarginsCommandArchive.margin)
}

// optional float margin_value = 4;
inline bool ChangeSectionMarginsCommandArchive::_internal_has_margin_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChangeSectionMarginsCommandArchive::has_margin_value() const {
  return _internal_has_margin_value();
}
inline void ChangeSectionMarginsCommandArchive::clear_margin_value() {
  margin_value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ChangeSectionMarginsCommandArchive::_internal_margin_value() const {
  return margin_value_;
}
inline float ChangeSectionMarginsCommandArchive::margin_value() const {
  // @@protoc_insertion_point(field_get:TP.ChangeSectionMarginsCommandArchive.margin_value)
  return _internal_margin_value();
}
inline void ChangeSectionMarginsCommandArchive::_internal_set_margin_value(float value) {
  _has_bits_[0] |= 0x00000008u;
  margin_value_ = value;
}
inline void ChangeSectionMarginsCommandArchive::set_margin_value(float value) {
  _internal_set_margin_value(value);
  // @@protoc_insertion_point(field_set:TP.ChangeSectionMarginsCommandArchive.margin_value)
}

// -------------------------------------------------------------------

// InsertMasterDrawablesCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool InsertMasterDrawablesCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InsertMasterDrawablesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& InsertMasterDrawablesCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InsertMasterDrawablesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.InsertMasterDrawablesCommandArchive.super)
  return _internal_super();
}
inline void InsertMasterDrawablesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.InsertMasterDrawablesCommandArchive.super)
}
inline ::TSK::CommandArchive* InsertMasterDrawablesCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* InsertMasterDrawablesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.InsertMasterDrawablesCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InsertMasterDrawablesCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* InsertMasterDrawablesCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.InsertMasterDrawablesCommandArchive.super)
  return _internal_mutable_super();
}
inline void InsertMasterDrawablesCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.InsertMasterDrawablesCommandArchive.super)
}

// optional .TSP.Reference OBSOLETE_section = 2;
inline bool InsertMasterDrawablesCommandArchive::_internal_has_obsolete_section() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || obsolete_section_ != nullptr);
  return value;
}
inline bool InsertMasterDrawablesCommandArchive::has_obsolete_section() const {
  return _internal_has_obsolete_section();
}
inline const ::TSP::Reference& InsertMasterDrawablesCommandArchive::_internal_obsolete_section() const {
  const ::TSP::Reference* p = obsolete_section_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& InsertMasterDrawablesCommandArchive::obsolete_section() const {
  // @@protoc_insertion_point(field_get:TP.InsertMasterDrawablesCommandArchive.OBSOLETE_section)
  return _internal_obsolete_section();
}
inline void InsertMasterDrawablesCommandArchive::unsafe_arena_set_allocated_obsolete_section(
    ::TSP::Reference* obsolete_section) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_section_);
  }
  obsolete_section_ = obsolete_section;
  if (obsolete_section) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.InsertMasterDrawablesCommandArchive.OBSOLETE_section)
}
inline ::TSP::Reference* InsertMasterDrawablesCommandArchive::release_obsolete_section() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = obsolete_section_;
  obsolete_section_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* InsertMasterDrawablesCommandArchive::unsafe_arena_release_obsolete_section() {
  // @@protoc_insertion_point(field_release:TP.InsertMasterDrawablesCommandArchive.OBSOLETE_section)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = obsolete_section_;
  obsolete_section_ = nullptr;
  return temp;
}
inline ::TSP::Reference* InsertMasterDrawablesCommandArchive::_internal_mutable_obsolete_section() {
  _has_bits_[0] |= 0x00000002u;
  if (obsolete_section_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    obsolete_section_ = p;
  }
  return obsolete_section_;
}
inline ::TSP::Reference* InsertMasterDrawablesCommandArchive::mutable_obsolete_section() {
  // @@protoc_insertion_point(field_mutable:TP.InsertMasterDrawablesCommandArchive.OBSOLETE_section)
  return _internal_mutable_obsolete_section();
}
inline void InsertMasterDrawablesCommandArchive::set_allocated_obsolete_section(::TSP::Reference* obsolete_section) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_section_);
  }
  if (obsolete_section) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_section)->GetArena();
    if (message_arena != submessage_arena) {
      obsolete_section = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obsolete_section, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obsolete_section_ = obsolete_section;
  // @@protoc_insertion_point(field_set_allocated:TP.InsertMasterDrawablesCommandArchive.OBSOLETE_section)
}

// repeated .TSP.Reference master_drawables = 3;
inline int InsertMasterDrawablesCommandArchive::_internal_master_drawables_size() const {
  return master_drawables_.size();
}
inline int InsertMasterDrawablesCommandArchive::master_drawables_size() const {
  return _internal_master_drawables_size();
}
inline ::TSP::Reference* InsertMasterDrawablesCommandArchive::mutable_master_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.InsertMasterDrawablesCommandArchive.master_drawables)
  return master_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
InsertMasterDrawablesCommandArchive::mutable_master_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.InsertMasterDrawablesCommandArchive.master_drawables)
  return &master_drawables_;
}
inline const ::TSP::Reference& InsertMasterDrawablesCommandArchive::_internal_master_drawables(int index) const {
  return master_drawables_.Get(index);
}
inline const ::TSP::Reference& InsertMasterDrawablesCommandArchive::master_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.InsertMasterDrawablesCommandArchive.master_drawables)
  return _internal_master_drawables(index);
}
inline ::TSP::Reference* InsertMasterDrawablesCommandArchive::_internal_add_master_drawables() {
  return master_drawables_.Add();
}
inline ::TSP::Reference* InsertMasterDrawablesCommandArchive::add_master_drawables() {
  // @@protoc_insertion_point(field_add:TP.InsertMasterDrawablesCommandArchive.master_drawables)
  return _internal_add_master_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
InsertMasterDrawablesCommandArchive::master_drawables() const {
  // @@protoc_insertion_point(field_list:TP.InsertMasterDrawablesCommandArchive.master_drawables)
  return master_drawables_;
}

// optional uint32 drawable_index = 4;
inline bool InsertMasterDrawablesCommandArchive::_internal_has_drawable_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InsertMasterDrawablesCommandArchive::has_drawable_index() const {
  return _internal_has_drawable_index();
}
inline void InsertMasterDrawablesCommandArchive::clear_drawable_index() {
  drawable_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertMasterDrawablesCommandArchive::_internal_drawable_index() const {
  return drawable_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertMasterDrawablesCommandArchive::drawable_index() const {
  // @@protoc_insertion_point(field_get:TP.InsertMasterDrawablesCommandArchive.drawable_index)
  return _internal_drawable_index();
}
inline void InsertMasterDrawablesCommandArchive::_internal_set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  drawable_index_ = value;
}
inline void InsertMasterDrawablesCommandArchive::set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drawable_index(value);
  // @@protoc_insertion_point(field_set:TP.InsertMasterDrawablesCommandArchive.drawable_index)
}

// optional .TSP.Reference master_drawable_provider = 5;
inline bool InsertMasterDrawablesCommandArchive::_internal_has_master_drawable_provider() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || master_drawable_provider_ != nullptr);
  return value;
}
inline bool InsertMasterDrawablesCommandArchive::has_master_drawable_provider() const {
  return _internal_has_master_drawable_provider();
}
inline const ::TSP::Reference& InsertMasterDrawablesCommandArchive::_internal_master_drawable_provider() const {
  const ::TSP::Reference* p = master_drawable_provider_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& InsertMasterDrawablesCommandArchive::master_drawable_provider() const {
  // @@protoc_insertion_point(field_get:TP.InsertMasterDrawablesCommandArchive.master_drawable_provider)
  return _internal_master_drawable_provider();
}
inline void InsertMasterDrawablesCommandArchive::unsafe_arena_set_allocated_master_drawable_provider(
    ::TSP::Reference* master_drawable_provider) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_drawable_provider_);
  }
  master_drawable_provider_ = master_drawable_provider;
  if (master_drawable_provider) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.InsertMasterDrawablesCommandArchive.master_drawable_provider)
}
inline ::TSP::Reference* InsertMasterDrawablesCommandArchive::release_master_drawable_provider() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = master_drawable_provider_;
  master_drawable_provider_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* InsertMasterDrawablesCommandArchive::unsafe_arena_release_master_drawable_provider() {
  // @@protoc_insertion_point(field_release:TP.InsertMasterDrawablesCommandArchive.master_drawable_provider)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = master_drawable_provider_;
  master_drawable_provider_ = nullptr;
  return temp;
}
inline ::TSP::Reference* InsertMasterDrawablesCommandArchive::_internal_mutable_master_drawable_provider() {
  _has_bits_[0] |= 0x00000004u;
  if (master_drawable_provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    master_drawable_provider_ = p;
  }
  return master_drawable_provider_;
}
inline ::TSP::Reference* InsertMasterDrawablesCommandArchive::mutable_master_drawable_provider() {
  // @@protoc_insertion_point(field_mutable:TP.InsertMasterDrawablesCommandArchive.master_drawable_provider)
  return _internal_mutable_master_drawable_provider();
}
inline void InsertMasterDrawablesCommandArchive::set_allocated_master_drawable_provider(::TSP::Reference* master_drawable_provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_drawable_provider_);
  }
  if (master_drawable_provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_drawable_provider)->GetArena();
    if (message_arena != submessage_arena) {
      master_drawable_provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_drawable_provider, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  master_drawable_provider_ = master_drawable_provider;
  // @@protoc_insertion_point(field_set_allocated:TP.InsertMasterDrawablesCommandArchive.master_drawable_provider)
}

// repeated .TSP.UUID custom_format_keys = 6;
inline int InsertMasterDrawablesCommandArchive::_internal_custom_format_keys_size() const {
  return custom_format_keys_.size();
}
inline int InsertMasterDrawablesCommandArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* InsertMasterDrawablesCommandArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TP.InsertMasterDrawablesCommandArchive.custom_format_keys)
  return custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
InsertMasterDrawablesCommandArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:TP.InsertMasterDrawablesCommandArchive.custom_format_keys)
  return &custom_format_keys_;
}
inline const ::TSP::UUID& InsertMasterDrawablesCommandArchive::_internal_custom_format_keys(int index) const {
  return custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& InsertMasterDrawablesCommandArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:TP.InsertMasterDrawablesCommandArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* InsertMasterDrawablesCommandArchive::_internal_add_custom_format_keys() {
  return custom_format_keys_.Add();
}
inline ::TSP::UUID* InsertMasterDrawablesCommandArchive::add_custom_format_keys() {
  // @@protoc_insertion_point(field_add:TP.InsertMasterDrawablesCommandArchive.custom_format_keys)
  return _internal_add_custom_format_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
InsertMasterDrawablesCommandArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:TP.InsertMasterDrawablesCommandArchive.custom_format_keys)
  return custom_format_keys_;
}

// -------------------------------------------------------------------

// MoveMasterDrawableZOrderCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool MoveMasterDrawableZOrderCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MoveMasterDrawableZOrderCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& MoveMasterDrawableZOrderCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& MoveMasterDrawableZOrderCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.MoveMasterDrawableZOrderCommandArchive.super)
  return _internal_super();
}
inline void MoveMasterDrawableZOrderCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveMasterDrawableZOrderCommandArchive.super)
}
inline ::TSK::CommandArchive* MoveMasterDrawableZOrderCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* MoveMasterDrawableZOrderCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.MoveMasterDrawableZOrderCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* MoveMasterDrawableZOrderCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* MoveMasterDrawableZOrderCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.MoveMasterDrawableZOrderCommandArchive.super)
  return _internal_mutable_super();
}
inline void MoveMasterDrawableZOrderCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveMasterDrawableZOrderCommandArchive.super)
}

// optional .TSP.Reference OBSOLETE_section = 2;
inline bool MoveMasterDrawableZOrderCommandArchive::_internal_has_obsolete_section() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || obsolete_section_ != nullptr);
  return value;
}
inline bool MoveMasterDrawableZOrderCommandArchive::has_obsolete_section() const {
  return _internal_has_obsolete_section();
}
inline const ::TSP::Reference& MoveMasterDrawableZOrderCommandArchive::_internal_obsolete_section() const {
  const ::TSP::Reference* p = obsolete_section_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MoveMasterDrawableZOrderCommandArchive::obsolete_section() const {
  // @@protoc_insertion_point(field_get:TP.MoveMasterDrawableZOrderCommandArchive.OBSOLETE_section)
  return _internal_obsolete_section();
}
inline void MoveMasterDrawableZOrderCommandArchive::unsafe_arena_set_allocated_obsolete_section(
    ::TSP::Reference* obsolete_section) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_section_);
  }
  obsolete_section_ = obsolete_section;
  if (obsolete_section) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveMasterDrawableZOrderCommandArchive.OBSOLETE_section)
}
inline ::TSP::Reference* MoveMasterDrawableZOrderCommandArchive::release_obsolete_section() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = obsolete_section_;
  obsolete_section_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* MoveMasterDrawableZOrderCommandArchive::unsafe_arena_release_obsolete_section() {
  // @@protoc_insertion_point(field_release:TP.MoveMasterDrawableZOrderCommandArchive.OBSOLETE_section)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = obsolete_section_;
  obsolete_section_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MoveMasterDrawableZOrderCommandArchive::_internal_mutable_obsolete_section() {
  _has_bits_[0] |= 0x00000002u;
  if (obsolete_section_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    obsolete_section_ = p;
  }
  return obsolete_section_;
}
inline ::TSP::Reference* MoveMasterDrawableZOrderCommandArchive::mutable_obsolete_section() {
  // @@protoc_insertion_point(field_mutable:TP.MoveMasterDrawableZOrderCommandArchive.OBSOLETE_section)
  return _internal_mutable_obsolete_section();
}
inline void MoveMasterDrawableZOrderCommandArchive::set_allocated_obsolete_section(::TSP::Reference* obsolete_section) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_section_);
  }
  if (obsolete_section) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_section)->GetArena();
    if (message_arena != submessage_arena) {
      obsolete_section = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obsolete_section, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obsolete_section_ = obsolete_section;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveMasterDrawableZOrderCommandArchive.OBSOLETE_section)
}

// repeated .TSP.Reference master_drawables = 3;
inline int MoveMasterDrawableZOrderCommandArchive::_internal_master_drawables_size() const {
  return master_drawables_.size();
}
inline int MoveMasterDrawableZOrderCommandArchive::master_drawables_size() const {
  return _internal_master_drawables_size();
}
inline ::TSP::Reference* MoveMasterDrawableZOrderCommandArchive::mutable_master_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveMasterDrawableZOrderCommandArchive.master_drawables)
  return master_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
MoveMasterDrawableZOrderCommandArchive::mutable_master_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveMasterDrawableZOrderCommandArchive.master_drawables)
  return &master_drawables_;
}
inline const ::TSP::Reference& MoveMasterDrawableZOrderCommandArchive::_internal_master_drawables(int index) const {
  return master_drawables_.Get(index);
}
inline const ::TSP::Reference& MoveMasterDrawableZOrderCommandArchive::master_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveMasterDrawableZOrderCommandArchive.master_drawables)
  return _internal_master_drawables(index);
}
inline ::TSP::Reference* MoveMasterDrawableZOrderCommandArchive::_internal_add_master_drawables() {
  return master_drawables_.Add();
}
inline ::TSP::Reference* MoveMasterDrawableZOrderCommandArchive::add_master_drawables() {
  // @@protoc_insertion_point(field_add:TP.MoveMasterDrawableZOrderCommandArchive.master_drawables)
  return _internal_add_master_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
MoveMasterDrawableZOrderCommandArchive::master_drawables() const {
  // @@protoc_insertion_point(field_list:TP.MoveMasterDrawableZOrderCommandArchive.master_drawables)
  return master_drawables_;
}

// repeated uint32 indexes = 4;
inline int MoveMasterDrawableZOrderCommandArchive::_internal_indexes_size() const {
  return indexes_.size();
}
inline int MoveMasterDrawableZOrderCommandArchive::indexes_size() const {
  return _internal_indexes_size();
}
inline void MoveMasterDrawableZOrderCommandArchive::clear_indexes() {
  indexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveMasterDrawableZOrderCommandArchive::_internal_indexes(int index) const {
  return indexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveMasterDrawableZOrderCommandArchive::indexes(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveMasterDrawableZOrderCommandArchive.indexes)
  return _internal_indexes(index);
}
inline void MoveMasterDrawableZOrderCommandArchive::set_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TP.MoveMasterDrawableZOrderCommandArchive.indexes)
}
inline void MoveMasterDrawableZOrderCommandArchive::_internal_add_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  indexes_.Add(value);
}
inline void MoveMasterDrawableZOrderCommandArchive::add_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_indexes(value);
  // @@protoc_insertion_point(field_add:TP.MoveMasterDrawableZOrderCommandArchive.indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MoveMasterDrawableZOrderCommandArchive::_internal_indexes() const {
  return indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MoveMasterDrawableZOrderCommandArchive::indexes() const {
  // @@protoc_insertion_point(field_list:TP.MoveMasterDrawableZOrderCommandArchive.indexes)
  return _internal_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MoveMasterDrawableZOrderCommandArchive::_internal_mutable_indexes() {
  return &indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MoveMasterDrawableZOrderCommandArchive::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveMasterDrawableZOrderCommandArchive.indexes)
  return _internal_mutable_indexes();
}

// optional .TSP.Reference master_drawable_provider = 5;
inline bool MoveMasterDrawableZOrderCommandArchive::_internal_has_master_drawable_provider() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || master_drawable_provider_ != nullptr);
  return value;
}
inline bool MoveMasterDrawableZOrderCommandArchive::has_master_drawable_provider() const {
  return _internal_has_master_drawable_provider();
}
inline const ::TSP::Reference& MoveMasterDrawableZOrderCommandArchive::_internal_master_drawable_provider() const {
  const ::TSP::Reference* p = master_drawable_provider_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MoveMasterDrawableZOrderCommandArchive::master_drawable_provider() const {
  // @@protoc_insertion_point(field_get:TP.MoveMasterDrawableZOrderCommandArchive.master_drawable_provider)
  return _internal_master_drawable_provider();
}
inline void MoveMasterDrawableZOrderCommandArchive::unsafe_arena_set_allocated_master_drawable_provider(
    ::TSP::Reference* master_drawable_provider) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_drawable_provider_);
  }
  master_drawable_provider_ = master_drawable_provider;
  if (master_drawable_provider) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveMasterDrawableZOrderCommandArchive.master_drawable_provider)
}
inline ::TSP::Reference* MoveMasterDrawableZOrderCommandArchive::release_master_drawable_provider() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = master_drawable_provider_;
  master_drawable_provider_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* MoveMasterDrawableZOrderCommandArchive::unsafe_arena_release_master_drawable_provider() {
  // @@protoc_insertion_point(field_release:TP.MoveMasterDrawableZOrderCommandArchive.master_drawable_provider)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = master_drawable_provider_;
  master_drawable_provider_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MoveMasterDrawableZOrderCommandArchive::_internal_mutable_master_drawable_provider() {
  _has_bits_[0] |= 0x00000004u;
  if (master_drawable_provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    master_drawable_provider_ = p;
  }
  return master_drawable_provider_;
}
inline ::TSP::Reference* MoveMasterDrawableZOrderCommandArchive::mutable_master_drawable_provider() {
  // @@protoc_insertion_point(field_mutable:TP.MoveMasterDrawableZOrderCommandArchive.master_drawable_provider)
  return _internal_mutable_master_drawable_provider();
}
inline void MoveMasterDrawableZOrderCommandArchive::set_allocated_master_drawable_provider(::TSP::Reference* master_drawable_provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_drawable_provider_);
  }
  if (master_drawable_provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_drawable_provider)->GetArena();
    if (message_arena != submessage_arena) {
      master_drawable_provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_drawable_provider, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  master_drawable_provider_ = master_drawable_provider;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveMasterDrawableZOrderCommandArchive.master_drawable_provider)
}

// -------------------------------------------------------------------

// RemoveMasterDrawablesCommandArchive_MasterDrawable

// optional .TSP.Reference drawable = 1;
inline bool RemoveMasterDrawablesCommandArchive_MasterDrawable::_internal_has_drawable() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || drawable_ != nullptr);
  return value;
}
inline bool RemoveMasterDrawablesCommandArchive_MasterDrawable::has_drawable() const {
  return _internal_has_drawable();
}
inline const ::TSP::Reference& RemoveMasterDrawablesCommandArchive_MasterDrawable::_internal_drawable() const {
  const ::TSP::Reference* p = drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RemoveMasterDrawablesCommandArchive_MasterDrawable::drawable() const {
  // @@protoc_insertion_point(field_get:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable.drawable)
  return _internal_drawable();
}
inline void RemoveMasterDrawablesCommandArchive_MasterDrawable::unsafe_arena_set_allocated_drawable(
    ::TSP::Reference* drawable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  drawable_ = drawable;
  if (drawable) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable.drawable)
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive_MasterDrawable::release_drawable() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive_MasterDrawable::unsafe_arena_release_drawable() {
  // @@protoc_insertion_point(field_release:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable.drawable)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive_MasterDrawable::_internal_mutable_drawable() {
  _has_bits_[0] |= 0x00000001u;
  if (drawable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    drawable_ = p;
  }
  return drawable_;
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive_MasterDrawable::mutable_drawable() {
  // @@protoc_insertion_point(field_mutable:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable.drawable)
  return _internal_mutable_drawable();
}
inline void RemoveMasterDrawablesCommandArchive_MasterDrawable::set_allocated_drawable(::TSP::Reference* drawable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  if (drawable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable)->GetArena();
    if (message_arena != submessage_arena) {
      drawable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  drawable_ = drawable;
  // @@protoc_insertion_point(field_set_allocated:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable.drawable)
}

// optional uint32 drawable_index = 2;
inline bool RemoveMasterDrawablesCommandArchive_MasterDrawable::_internal_has_drawable_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RemoveMasterDrawablesCommandArchive_MasterDrawable::has_drawable_index() const {
  return _internal_has_drawable_index();
}
inline void RemoveMasterDrawablesCommandArchive_MasterDrawable::clear_drawable_index() {
  drawable_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveMasterDrawablesCommandArchive_MasterDrawable::_internal_drawable_index() const {
  return drawable_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemoveMasterDrawablesCommandArchive_MasterDrawable::drawable_index() const {
  // @@protoc_insertion_point(field_get:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable.drawable_index)
  return _internal_drawable_index();
}
inline void RemoveMasterDrawablesCommandArchive_MasterDrawable::_internal_set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  drawable_index_ = value;
}
inline void RemoveMasterDrawablesCommandArchive_MasterDrawable::set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drawable_index(value);
  // @@protoc_insertion_point(field_set:TP.RemoveMasterDrawablesCommandArchive.MasterDrawable.drawable_index)
}

// -------------------------------------------------------------------

// RemoveMasterDrawablesCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool RemoveMasterDrawablesCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool RemoveMasterDrawablesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& RemoveMasterDrawablesCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& RemoveMasterDrawablesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.RemoveMasterDrawablesCommandArchive.super)
  return _internal_super();
}
inline void RemoveMasterDrawablesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.RemoveMasterDrawablesCommandArchive.super)
}
inline ::TSK::CommandArchive* RemoveMasterDrawablesCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* RemoveMasterDrawablesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.RemoveMasterDrawablesCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* RemoveMasterDrawablesCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* RemoveMasterDrawablesCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.RemoveMasterDrawablesCommandArchive.super)
  return _internal_mutable_super();
}
inline void RemoveMasterDrawablesCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.RemoveMasterDrawablesCommandArchive.super)
}

// optional .TSP.Reference OBSOLETE_section = 2;
inline bool RemoveMasterDrawablesCommandArchive::_internal_has_obsolete_section() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || obsolete_section_ != nullptr);
  return value;
}
inline bool RemoveMasterDrawablesCommandArchive::has_obsolete_section() const {
  return _internal_has_obsolete_section();
}
inline const ::TSP::Reference& RemoveMasterDrawablesCommandArchive::_internal_obsolete_section() const {
  const ::TSP::Reference* p = obsolete_section_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RemoveMasterDrawablesCommandArchive::obsolete_section() const {
  // @@protoc_insertion_point(field_get:TP.RemoveMasterDrawablesCommandArchive.OBSOLETE_section)
  return _internal_obsolete_section();
}
inline void RemoveMasterDrawablesCommandArchive::unsafe_arena_set_allocated_obsolete_section(
    ::TSP::Reference* obsolete_section) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_section_);
  }
  obsolete_section_ = obsolete_section;
  if (obsolete_section) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.RemoveMasterDrawablesCommandArchive.OBSOLETE_section)
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive::release_obsolete_section() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = obsolete_section_;
  obsolete_section_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive::unsafe_arena_release_obsolete_section() {
  // @@protoc_insertion_point(field_release:TP.RemoveMasterDrawablesCommandArchive.OBSOLETE_section)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = obsolete_section_;
  obsolete_section_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive::_internal_mutable_obsolete_section() {
  _has_bits_[0] |= 0x00000002u;
  if (obsolete_section_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    obsolete_section_ = p;
  }
  return obsolete_section_;
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive::mutable_obsolete_section() {
  // @@protoc_insertion_point(field_mutable:TP.RemoveMasterDrawablesCommandArchive.OBSOLETE_section)
  return _internal_mutable_obsolete_section();
}
inline void RemoveMasterDrawablesCommandArchive::set_allocated_obsolete_section(::TSP::Reference* obsolete_section) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_section_);
  }
  if (obsolete_section) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_section)->GetArena();
    if (message_arena != submessage_arena) {
      obsolete_section = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obsolete_section, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obsolete_section_ = obsolete_section;
  // @@protoc_insertion_point(field_set_allocated:TP.RemoveMasterDrawablesCommandArchive.OBSOLETE_section)
}

// repeated .TP.RemoveMasterDrawablesCommandArchive.MasterDrawable master_drawables = 3;
inline int RemoveMasterDrawablesCommandArchive::_internal_master_drawables_size() const {
  return master_drawables_.size();
}
inline int RemoveMasterDrawablesCommandArchive::master_drawables_size() const {
  return _internal_master_drawables_size();
}
inline void RemoveMasterDrawablesCommandArchive::clear_master_drawables() {
  master_drawables_.Clear();
}
inline ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable* RemoveMasterDrawablesCommandArchive::mutable_master_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.RemoveMasterDrawablesCommandArchive.master_drawables)
  return master_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable >*
RemoveMasterDrawablesCommandArchive::mutable_master_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.RemoveMasterDrawablesCommandArchive.master_drawables)
  return &master_drawables_;
}
inline const ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable& RemoveMasterDrawablesCommandArchive::_internal_master_drawables(int index) const {
  return master_drawables_.Get(index);
}
inline const ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable& RemoveMasterDrawablesCommandArchive::master_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.RemoveMasterDrawablesCommandArchive.master_drawables)
  return _internal_master_drawables(index);
}
inline ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable* RemoveMasterDrawablesCommandArchive::_internal_add_master_drawables() {
  return master_drawables_.Add();
}
inline ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable* RemoveMasterDrawablesCommandArchive::add_master_drawables() {
  // @@protoc_insertion_point(field_add:TP.RemoveMasterDrawablesCommandArchive.master_drawables)
  return _internal_add_master_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::RemoveMasterDrawablesCommandArchive_MasterDrawable >&
RemoveMasterDrawablesCommandArchive::master_drawables() const {
  // @@protoc_insertion_point(field_list:TP.RemoveMasterDrawablesCommandArchive.master_drawables)
  return master_drawables_;
}

// optional .TSP.Reference master_drawable_provider = 4;
inline bool RemoveMasterDrawablesCommandArchive::_internal_has_master_drawable_provider() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || master_drawable_provider_ != nullptr);
  return value;
}
inline bool RemoveMasterDrawablesCommandArchive::has_master_drawable_provider() const {
  return _internal_has_master_drawable_provider();
}
inline const ::TSP::Reference& RemoveMasterDrawablesCommandArchive::_internal_master_drawable_provider() const {
  const ::TSP::Reference* p = master_drawable_provider_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RemoveMasterDrawablesCommandArchive::master_drawable_provider() const {
  // @@protoc_insertion_point(field_get:TP.RemoveMasterDrawablesCommandArchive.master_drawable_provider)
  return _internal_master_drawable_provider();
}
inline void RemoveMasterDrawablesCommandArchive::unsafe_arena_set_allocated_master_drawable_provider(
    ::TSP::Reference* master_drawable_provider) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_drawable_provider_);
  }
  master_drawable_provider_ = master_drawable_provider;
  if (master_drawable_provider) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.RemoveMasterDrawablesCommandArchive.master_drawable_provider)
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive::release_master_drawable_provider() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = master_drawable_provider_;
  master_drawable_provider_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive::unsafe_arena_release_master_drawable_provider() {
  // @@protoc_insertion_point(field_release:TP.RemoveMasterDrawablesCommandArchive.master_drawable_provider)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = master_drawable_provider_;
  master_drawable_provider_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive::_internal_mutable_master_drawable_provider() {
  _has_bits_[0] |= 0x00000004u;
  if (master_drawable_provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    master_drawable_provider_ = p;
  }
  return master_drawable_provider_;
}
inline ::TSP::Reference* RemoveMasterDrawablesCommandArchive::mutable_master_drawable_provider() {
  // @@protoc_insertion_point(field_mutable:TP.RemoveMasterDrawablesCommandArchive.master_drawable_provider)
  return _internal_mutable_master_drawable_provider();
}
inline void RemoveMasterDrawablesCommandArchive::set_allocated_master_drawable_provider(::TSP::Reference* master_drawable_provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_drawable_provider_);
  }
  if (master_drawable_provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_drawable_provider)->GetArena();
    if (message_arena != submessage_arena) {
      master_drawable_provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_drawable_provider, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  master_drawable_provider_ = master_drawable_provider;
  // @@protoc_insertion_point(field_set_allocated:TP.RemoveMasterDrawablesCommandArchive.master_drawable_provider)
}

// -------------------------------------------------------------------

// PasteMasterDrawablesCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool PasteMasterDrawablesCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool PasteMasterDrawablesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& PasteMasterDrawablesCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& PasteMasterDrawablesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.PasteMasterDrawablesCommandArchive.super)
  return _internal_super();
}
inline void PasteMasterDrawablesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PasteMasterDrawablesCommandArchive.super)
}
inline ::TSK::CommandArchive* PasteMasterDrawablesCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* PasteMasterDrawablesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.PasteMasterDrawablesCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* PasteMasterDrawablesCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* PasteMasterDrawablesCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.PasteMasterDrawablesCommandArchive.super)
  return _internal_mutable_super();
}
inline void PasteMasterDrawablesCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.PasteMasterDrawablesCommandArchive.super)
}

// optional .TSP.Reference section = 2;
inline bool PasteMasterDrawablesCommandArchive::_internal_has_section() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || section_ != nullptr);
  return value;
}
inline bool PasteMasterDrawablesCommandArchive::has_section() const {
  return _internal_has_section();
}
inline const ::TSP::Reference& PasteMasterDrawablesCommandArchive::_internal_section() const {
  const ::TSP::Reference* p = section_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PasteMasterDrawablesCommandArchive::section() const {
  // @@protoc_insertion_point(field_get:TP.PasteMasterDrawablesCommandArchive.section)
  return _internal_section();
}
inline void PasteMasterDrawablesCommandArchive::unsafe_arena_set_allocated_section(
    ::TSP::Reference* section) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_);
  }
  section_ = section;
  if (section) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PasteMasterDrawablesCommandArchive.section)
}
inline ::TSP::Reference* PasteMasterDrawablesCommandArchive::release_section() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = section_;
  section_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PasteMasterDrawablesCommandArchive::unsafe_arena_release_section() {
  // @@protoc_insertion_point(field_release:TP.PasteMasterDrawablesCommandArchive.section)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = section_;
  section_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PasteMasterDrawablesCommandArchive::_internal_mutable_section() {
  _has_bits_[0] |= 0x00000002u;
  if (section_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    section_ = p;
  }
  return section_;
}
inline ::TSP::Reference* PasteMasterDrawablesCommandArchive::mutable_section() {
  // @@protoc_insertion_point(field_mutable:TP.PasteMasterDrawablesCommandArchive.section)
  return _internal_mutable_section();
}
inline void PasteMasterDrawablesCommandArchive::set_allocated_section(::TSP::Reference* section) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_);
  }
  if (section) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section)->GetArena();
    if (message_arena != submessage_arena) {
      section = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, section, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  section_ = section;
  // @@protoc_insertion_point(field_set_allocated:TP.PasteMasterDrawablesCommandArchive.section)
}

// repeated .TSP.Reference master_drawables = 3;
inline int PasteMasterDrawablesCommandArchive::_internal_master_drawables_size() const {
  return master_drawables_.size();
}
inline int PasteMasterDrawablesCommandArchive::master_drawables_size() const {
  return _internal_master_drawables_size();
}
inline ::TSP::Reference* PasteMasterDrawablesCommandArchive::mutable_master_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PasteMasterDrawablesCommandArchive.master_drawables)
  return master_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteMasterDrawablesCommandArchive::mutable_master_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.PasteMasterDrawablesCommandArchive.master_drawables)
  return &master_drawables_;
}
inline const ::TSP::Reference& PasteMasterDrawablesCommandArchive::_internal_master_drawables(int index) const {
  return master_drawables_.Get(index);
}
inline const ::TSP::Reference& PasteMasterDrawablesCommandArchive::master_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.PasteMasterDrawablesCommandArchive.master_drawables)
  return _internal_master_drawables(index);
}
inline ::TSP::Reference* PasteMasterDrawablesCommandArchive::_internal_add_master_drawables() {
  return master_drawables_.Add();
}
inline ::TSP::Reference* PasteMasterDrawablesCommandArchive::add_master_drawables() {
  // @@protoc_insertion_point(field_add:TP.PasteMasterDrawablesCommandArchive.master_drawables)
  return _internal_add_master_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteMasterDrawablesCommandArchive::master_drawables() const {
  // @@protoc_insertion_point(field_list:TP.PasteMasterDrawablesCommandArchive.master_drawables)
  return master_drawables_;
}

// optional uint32 drawable_index = 4;
inline bool PasteMasterDrawablesCommandArchive::_internal_has_drawable_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PasteMasterDrawablesCommandArchive::has_drawable_index() const {
  return _internal_has_drawable_index();
}
inline void PasteMasterDrawablesCommandArchive::clear_drawable_index() {
  drawable_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PasteMasterDrawablesCommandArchive::_internal_drawable_index() const {
  return drawable_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PasteMasterDrawablesCommandArchive::drawable_index() const {
  // @@protoc_insertion_point(field_get:TP.PasteMasterDrawablesCommandArchive.drawable_index)
  return _internal_drawable_index();
}
inline void PasteMasterDrawablesCommandArchive::_internal_set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  drawable_index_ = value;
}
inline void PasteMasterDrawablesCommandArchive::set_drawable_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drawable_index(value);
  // @@protoc_insertion_point(field_set:TP.PasteMasterDrawablesCommandArchive.drawable_index)
}

// -------------------------------------------------------------------

// MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition

// optional int32 char_index = 1;
inline bool MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_has_char_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::has_char_index() const {
  return _internal_has_char_index();
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::clear_char_index() {
  char_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_char_index() const {
  return char_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::char_index() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition.char_index)
  return _internal_char_index();
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_set_char_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  char_index_ = value;
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::set_char_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_char_index(value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition.char_index)
}

// optional uint32 h_offset_type = 2;
inline bool MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_has_h_offset_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::has_h_offset_type() const {
  return _internal_has_h_offset_type();
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::clear_h_offset_type() {
  h_offset_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_h_offset_type() const {
  return h_offset_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::h_offset_type() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition.h_offset_type)
  return _internal_h_offset_type();
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  h_offset_type_ = value;
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::set_h_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_h_offset_type(value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition.h_offset_type)
}

// optional float h_offset = 3;
inline bool MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_has_h_offset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::has_h_offset() const {
  return _internal_has_h_offset();
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::clear_h_offset() {
  h_offset_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_h_offset() const {
  return h_offset_;
}
inline float MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::h_offset() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition.h_offset)
  return _internal_h_offset();
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_set_h_offset(float value) {
  _has_bits_[0] |= 0x00000004u;
  h_offset_ = value;
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::set_h_offset(float value) {
  _internal_set_h_offset(value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition.h_offset)
}

// optional uint32 v_offset_type = 4;
inline bool MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_has_v_offset_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::has_v_offset_type() const {
  return _internal_has_v_offset_type();
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::clear_v_offset_type() {
  v_offset_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_v_offset_type() const {
  return v_offset_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::v_offset_type() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition.v_offset_type)
  return _internal_v_offset_type();
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  v_offset_type_ = value;
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::set_v_offset_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_v_offset_type(value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition.v_offset_type)
}

// optional float v_offset = 5;
inline bool MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_has_v_offset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::has_v_offset() const {
  return _internal_has_v_offset();
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::clear_v_offset() {
  v_offset_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_v_offset() const {
  return v_offset_;
}
inline float MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::v_offset() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition.v_offset)
  return _internal_v_offset();
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::_internal_set_v_offset(float value) {
  _has_bits_[0] |= 0x00000010u;
  v_offset_ = value;
}
inline void MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition::set_v_offset(float value) {
  _internal_set_v_offset(value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition.v_offset)
}

// -------------------------------------------------------------------

// MoveDrawablesAttachedCommandArchive

// required .TSWP.StorageActionCommandArchive super = 1;
inline bool MoveDrawablesAttachedCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MoveDrawablesAttachedCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::StorageActionCommandArchive& MoveDrawablesAttachedCommandArchive::_internal_super() const {
  const ::TSWP::StorageActionCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StorageActionCommandArchive&>(
      ::TSWP::_StorageActionCommandArchive_default_instance_);
}
inline const ::TSWP::StorageActionCommandArchive& MoveDrawablesAttachedCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.super)
  return _internal_super();
}
inline void MoveDrawablesAttachedCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StorageActionCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveDrawablesAttachedCommandArchive.super)
}
inline ::TSWP::StorageActionCommandArchive* MoveDrawablesAttachedCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* MoveDrawablesAttachedCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.MoveDrawablesAttachedCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* MoveDrawablesAttachedCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StorageActionCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StorageActionCommandArchive* MoveDrawablesAttachedCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesAttachedCommandArchive.super)
  return _internal_mutable_super();
}
inline void MoveDrawablesAttachedCommandArchive::set_allocated_super(::TSWP::StorageActionCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveDrawablesAttachedCommandArchive.super)
}

// repeated .TSK.IdPlacementOperationArgs args_list = 2;
inline int MoveDrawablesAttachedCommandArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int MoveDrawablesAttachedCommandArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::IdPlacementOperationArgs* MoveDrawablesAttachedCommandArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesAttachedCommandArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >*
MoveDrawablesAttachedCommandArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesAttachedCommandArchive.args_list)
  return &args_list_;
}
inline const ::TSK::IdPlacementOperationArgs& MoveDrawablesAttachedCommandArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::IdPlacementOperationArgs& MoveDrawablesAttachedCommandArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::IdPlacementOperationArgs* MoveDrawablesAttachedCommandArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::IdPlacementOperationArgs* MoveDrawablesAttachedCommandArchive::add_args_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesAttachedCommandArchive.args_list)
  return _internal_add_args_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >&
MoveDrawablesAttachedCommandArchive::args_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesAttachedCommandArchive.args_list)
  return args_list_;
}

// repeated .TSP.Range range_list = 3;
inline int MoveDrawablesAttachedCommandArchive::_internal_range_list_size() const {
  return range_list_.size();
}
inline int MoveDrawablesAttachedCommandArchive::range_list_size() const {
  return _internal_range_list_size();
}
inline ::TSP::Range* MoveDrawablesAttachedCommandArchive::mutable_range_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesAttachedCommandArchive.range_list)
  return range_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
MoveDrawablesAttachedCommandArchive::mutable_range_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesAttachedCommandArchive.range_list)
  return &range_list_;
}
inline const ::TSP::Range& MoveDrawablesAttachedCommandArchive::_internal_range_list(int index) const {
  return range_list_.Get(index);
}
inline const ::TSP::Range& MoveDrawablesAttachedCommandArchive::range_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.range_list)
  return _internal_range_list(index);
}
inline ::TSP::Range* MoveDrawablesAttachedCommandArchive::_internal_add_range_list() {
  return range_list_.Add();
}
inline ::TSP::Range* MoveDrawablesAttachedCommandArchive::add_range_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesAttachedCommandArchive.range_list)
  return _internal_add_range_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
MoveDrawablesAttachedCommandArchive::range_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesAttachedCommandArchive.range_list)
  return range_list_;
}

// repeated .TSP.UUIDPath drawable_info_id_path_list = 4;
inline int MoveDrawablesAttachedCommandArchive::_internal_drawable_info_id_path_list_size() const {
  return drawable_info_id_path_list_.size();
}
inline int MoveDrawablesAttachedCommandArchive::drawable_info_id_path_list_size() const {
  return _internal_drawable_info_id_path_list_size();
}
inline ::TSP::UUIDPath* MoveDrawablesAttachedCommandArchive::mutable_drawable_info_id_path_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesAttachedCommandArchive.drawable_info_id_path_list)
  return drawable_info_id_path_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
MoveDrawablesAttachedCommandArchive::mutable_drawable_info_id_path_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesAttachedCommandArchive.drawable_info_id_path_list)
  return &drawable_info_id_path_list_;
}
inline const ::TSP::UUIDPath& MoveDrawablesAttachedCommandArchive::_internal_drawable_info_id_path_list(int index) const {
  return drawable_info_id_path_list_.Get(index);
}
inline const ::TSP::UUIDPath& MoveDrawablesAttachedCommandArchive::drawable_info_id_path_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.drawable_info_id_path_list)
  return _internal_drawable_info_id_path_list(index);
}
inline ::TSP::UUIDPath* MoveDrawablesAttachedCommandArchive::_internal_add_drawable_info_id_path_list() {
  return drawable_info_id_path_list_.Add();
}
inline ::TSP::UUIDPath* MoveDrawablesAttachedCommandArchive::add_drawable_info_id_path_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesAttachedCommandArchive.drawable_info_id_path_list)
  return _internal_add_drawable_info_id_path_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
MoveDrawablesAttachedCommandArchive::drawable_info_id_path_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesAttachedCommandArchive.drawable_info_id_path_list)
  return drawable_info_id_path_list_;
}

// repeated .TP.MoveDrawablesAttachedCommandArchive.GSSPCharIndexAndPosition position_list = 5;
inline int MoveDrawablesAttachedCommandArchive::_internal_position_list_size() const {
  return position_list_.size();
}
inline int MoveDrawablesAttachedCommandArchive::position_list_size() const {
  return _internal_position_list_size();
}
inline void MoveDrawablesAttachedCommandArchive::clear_position_list() {
  position_list_.Clear();
}
inline ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* MoveDrawablesAttachedCommandArchive::mutable_position_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesAttachedCommandArchive.position_list)
  return position_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition >*
MoveDrawablesAttachedCommandArchive::mutable_position_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesAttachedCommandArchive.position_list)
  return &position_list_;
}
inline const ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& MoveDrawablesAttachedCommandArchive::_internal_position_list(int index) const {
  return position_list_.Get(index);
}
inline const ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition& MoveDrawablesAttachedCommandArchive::position_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.position_list)
  return _internal_position_list(index);
}
inline ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* MoveDrawablesAttachedCommandArchive::_internal_add_position_list() {
  return position_list_.Add();
}
inline ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition* MoveDrawablesAttachedCommandArchive::add_position_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesAttachedCommandArchive.position_list)
  return _internal_add_position_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::MoveDrawablesAttachedCommandArchive_GSSPCharIndexAndPosition >&
MoveDrawablesAttachedCommandArchive::position_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesAttachedCommandArchive.position_list)
  return position_list_;
}

// repeated .TSD.ExteriorTextWrapArchive exterior_text_wrap_list = 6;
inline int MoveDrawablesAttachedCommandArchive::_internal_exterior_text_wrap_list_size() const {
  return exterior_text_wrap_list_.size();
}
inline int MoveDrawablesAttachedCommandArchive::exterior_text_wrap_list_size() const {
  return _internal_exterior_text_wrap_list_size();
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesAttachedCommandArchive::mutable_exterior_text_wrap_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesAttachedCommandArchive.exterior_text_wrap_list)
  return exterior_text_wrap_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >*
MoveDrawablesAttachedCommandArchive::mutable_exterior_text_wrap_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesAttachedCommandArchive.exterior_text_wrap_list)
  return &exterior_text_wrap_list_;
}
inline const ::TSD::ExteriorTextWrapArchive& MoveDrawablesAttachedCommandArchive::_internal_exterior_text_wrap_list(int index) const {
  return exterior_text_wrap_list_.Get(index);
}
inline const ::TSD::ExteriorTextWrapArchive& MoveDrawablesAttachedCommandArchive::exterior_text_wrap_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.exterior_text_wrap_list)
  return _internal_exterior_text_wrap_list(index);
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesAttachedCommandArchive::_internal_add_exterior_text_wrap_list() {
  return exterior_text_wrap_list_.Add();
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesAttachedCommandArchive::add_exterior_text_wrap_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesAttachedCommandArchive.exterior_text_wrap_list)
  return _internal_add_exterior_text_wrap_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >&
MoveDrawablesAttachedCommandArchive::exterior_text_wrap_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesAttachedCommandArchive.exterior_text_wrap_list)
  return exterior_text_wrap_list_;
}

// repeated uint32 original_page_index_list = 7;
inline int MoveDrawablesAttachedCommandArchive::_internal_original_page_index_list_size() const {
  return original_page_index_list_.size();
}
inline int MoveDrawablesAttachedCommandArchive::original_page_index_list_size() const {
  return _internal_original_page_index_list_size();
}
inline void MoveDrawablesAttachedCommandArchive::clear_original_page_index_list() {
  original_page_index_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesAttachedCommandArchive::_internal_original_page_index_list(int index) const {
  return original_page_index_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesAttachedCommandArchive::original_page_index_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.original_page_index_list)
  return _internal_original_page_index_list(index);
}
inline void MoveDrawablesAttachedCommandArchive::set_original_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  original_page_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesAttachedCommandArchive.original_page_index_list)
}
inline void MoveDrawablesAttachedCommandArchive::_internal_add_original_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  original_page_index_list_.Add(value);
}
inline void MoveDrawablesAttachedCommandArchive::add_original_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_original_page_index_list(value);
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesAttachedCommandArchive.original_page_index_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MoveDrawablesAttachedCommandArchive::_internal_original_page_index_list() const {
  return original_page_index_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MoveDrawablesAttachedCommandArchive::original_page_index_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesAttachedCommandArchive.original_page_index_list)
  return _internal_original_page_index_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MoveDrawablesAttachedCommandArchive::_internal_mutable_original_page_index_list() {
  return &original_page_index_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MoveDrawablesAttachedCommandArchive::mutable_original_page_index_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesAttachedCommandArchive.original_page_index_list)
  return _internal_mutable_original_page_index_list();
}

// repeated .TSD.ExteriorTextWrapArchive original_exterior_text_wrap_list = 8;
inline int MoveDrawablesAttachedCommandArchive::_internal_original_exterior_text_wrap_list_size() const {
  return original_exterior_text_wrap_list_.size();
}
inline int MoveDrawablesAttachedCommandArchive::original_exterior_text_wrap_list_size() const {
  return _internal_original_exterior_text_wrap_list_size();
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesAttachedCommandArchive::mutable_original_exterior_text_wrap_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesAttachedCommandArchive.original_exterior_text_wrap_list)
  return original_exterior_text_wrap_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >*
MoveDrawablesAttachedCommandArchive::mutable_original_exterior_text_wrap_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesAttachedCommandArchive.original_exterior_text_wrap_list)
  return &original_exterior_text_wrap_list_;
}
inline const ::TSD::ExteriorTextWrapArchive& MoveDrawablesAttachedCommandArchive::_internal_original_exterior_text_wrap_list(int index) const {
  return original_exterior_text_wrap_list_.Get(index);
}
inline const ::TSD::ExteriorTextWrapArchive& MoveDrawablesAttachedCommandArchive::original_exterior_text_wrap_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.original_exterior_text_wrap_list)
  return _internal_original_exterior_text_wrap_list(index);
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesAttachedCommandArchive::_internal_add_original_exterior_text_wrap_list() {
  return original_exterior_text_wrap_list_.Add();
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesAttachedCommandArchive::add_original_exterior_text_wrap_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesAttachedCommandArchive.original_exterior_text_wrap_list)
  return _internal_add_original_exterior_text_wrap_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >&
MoveDrawablesAttachedCommandArchive::original_exterior_text_wrap_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesAttachedCommandArchive.original_exterior_text_wrap_list)
  return original_exterior_text_wrap_list_;
}

// repeated .TSP.Reference original_attachment_list = 9;
inline int MoveDrawablesAttachedCommandArchive::_internal_original_attachment_list_size() const {
  return original_attachment_list_.size();
}
inline int MoveDrawablesAttachedCommandArchive::original_attachment_list_size() const {
  return _internal_original_attachment_list_size();
}
inline ::TSP::Reference* MoveDrawablesAttachedCommandArchive::mutable_original_attachment_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesAttachedCommandArchive.original_attachment_list)
  return original_attachment_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
MoveDrawablesAttachedCommandArchive::mutable_original_attachment_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesAttachedCommandArchive.original_attachment_list)
  return &original_attachment_list_;
}
inline const ::TSP::Reference& MoveDrawablesAttachedCommandArchive::_internal_original_attachment_list(int index) const {
  return original_attachment_list_.Get(index);
}
inline const ::TSP::Reference& MoveDrawablesAttachedCommandArchive::original_attachment_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesAttachedCommandArchive.original_attachment_list)
  return _internal_original_attachment_list(index);
}
inline ::TSP::Reference* MoveDrawablesAttachedCommandArchive::_internal_add_original_attachment_list() {
  return original_attachment_list_.Add();
}
inline ::TSP::Reference* MoveDrawablesAttachedCommandArchive::add_original_attachment_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesAttachedCommandArchive.original_attachment_list)
  return _internal_add_original_attachment_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
MoveDrawablesAttachedCommandArchive::original_attachment_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesAttachedCommandArchive.original_attachment_list)
  return original_attachment_list_;
}

// -------------------------------------------------------------------

// MoveDrawablesFloatingCommandArchive

// required .TSWP.StorageActionCommandArchive super = 1;
inline bool MoveDrawablesFloatingCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MoveDrawablesFloatingCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::StorageActionCommandArchive& MoveDrawablesFloatingCommandArchive::_internal_super() const {
  const ::TSWP::StorageActionCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StorageActionCommandArchive&>(
      ::TSWP::_StorageActionCommandArchive_default_instance_);
}
inline const ::TSWP::StorageActionCommandArchive& MoveDrawablesFloatingCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesFloatingCommandArchive.super)
  return _internal_super();
}
inline void MoveDrawablesFloatingCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StorageActionCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveDrawablesFloatingCommandArchive.super)
}
inline ::TSWP::StorageActionCommandArchive* MoveDrawablesFloatingCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* MoveDrawablesFloatingCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.MoveDrawablesFloatingCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* MoveDrawablesFloatingCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StorageActionCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StorageActionCommandArchive* MoveDrawablesFloatingCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesFloatingCommandArchive.super)
  return _internal_mutable_super();
}
inline void MoveDrawablesFloatingCommandArchive::set_allocated_super(::TSWP::StorageActionCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveDrawablesFloatingCommandArchive.super)
}

// repeated .TSK.IdPlacementOperationArgs args_list = 2;
inline int MoveDrawablesFloatingCommandArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int MoveDrawablesFloatingCommandArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::IdPlacementOperationArgs* MoveDrawablesFloatingCommandArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesFloatingCommandArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >*
MoveDrawablesFloatingCommandArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesFloatingCommandArchive.args_list)
  return &args_list_;
}
inline const ::TSK::IdPlacementOperationArgs& MoveDrawablesFloatingCommandArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::IdPlacementOperationArgs& MoveDrawablesFloatingCommandArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesFloatingCommandArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::IdPlacementOperationArgs* MoveDrawablesFloatingCommandArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::IdPlacementOperationArgs* MoveDrawablesFloatingCommandArchive::add_args_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesFloatingCommandArchive.args_list)
  return _internal_add_args_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >&
MoveDrawablesFloatingCommandArchive::args_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesFloatingCommandArchive.args_list)
  return args_list_;
}

// repeated .TSP.Range range_list = 3;
inline int MoveDrawablesFloatingCommandArchive::_internal_range_list_size() const {
  return range_list_.size();
}
inline int MoveDrawablesFloatingCommandArchive::range_list_size() const {
  return _internal_range_list_size();
}
inline ::TSP::Range* MoveDrawablesFloatingCommandArchive::mutable_range_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesFloatingCommandArchive.range_list)
  return range_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
MoveDrawablesFloatingCommandArchive::mutable_range_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesFloatingCommandArchive.range_list)
  return &range_list_;
}
inline const ::TSP::Range& MoveDrawablesFloatingCommandArchive::_internal_range_list(int index) const {
  return range_list_.Get(index);
}
inline const ::TSP::Range& MoveDrawablesFloatingCommandArchive::range_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesFloatingCommandArchive.range_list)
  return _internal_range_list(index);
}
inline ::TSP::Range* MoveDrawablesFloatingCommandArchive::_internal_add_range_list() {
  return range_list_.Add();
}
inline ::TSP::Range* MoveDrawablesFloatingCommandArchive::add_range_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesFloatingCommandArchive.range_list)
  return _internal_add_range_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
MoveDrawablesFloatingCommandArchive::range_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesFloatingCommandArchive.range_list)
  return range_list_;
}

// repeated .TSP.UUIDPath drawable_info_id_path_list = 4;
inline int MoveDrawablesFloatingCommandArchive::_internal_drawable_info_id_path_list_size() const {
  return drawable_info_id_path_list_.size();
}
inline int MoveDrawablesFloatingCommandArchive::drawable_info_id_path_list_size() const {
  return _internal_drawable_info_id_path_list_size();
}
inline ::TSP::UUIDPath* MoveDrawablesFloatingCommandArchive::mutable_drawable_info_id_path_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesFloatingCommandArchive.drawable_info_id_path_list)
  return drawable_info_id_path_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
MoveDrawablesFloatingCommandArchive::mutable_drawable_info_id_path_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesFloatingCommandArchive.drawable_info_id_path_list)
  return &drawable_info_id_path_list_;
}
inline const ::TSP::UUIDPath& MoveDrawablesFloatingCommandArchive::_internal_drawable_info_id_path_list(int index) const {
  return drawable_info_id_path_list_.Get(index);
}
inline const ::TSP::UUIDPath& MoveDrawablesFloatingCommandArchive::drawable_info_id_path_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesFloatingCommandArchive.drawable_info_id_path_list)
  return _internal_drawable_info_id_path_list(index);
}
inline ::TSP::UUIDPath* MoveDrawablesFloatingCommandArchive::_internal_add_drawable_info_id_path_list() {
  return drawable_info_id_path_list_.Add();
}
inline ::TSP::UUIDPath* MoveDrawablesFloatingCommandArchive::add_drawable_info_id_path_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesFloatingCommandArchive.drawable_info_id_path_list)
  return _internal_add_drawable_info_id_path_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
MoveDrawablesFloatingCommandArchive::drawable_info_id_path_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesFloatingCommandArchive.drawable_info_id_path_list)
  return drawable_info_id_path_list_;
}

// repeated uint32 page_index_list = 5;
inline int MoveDrawablesFloatingCommandArchive::_internal_page_index_list_size() const {
  return page_index_list_.size();
}
inline int MoveDrawablesFloatingCommandArchive::page_index_list_size() const {
  return _internal_page_index_list_size();
}
inline void MoveDrawablesFloatingCommandArchive::clear_page_index_list() {
  page_index_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesFloatingCommandArchive::_internal_page_index_list(int index) const {
  return page_index_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveDrawablesFloatingCommandArchive::page_index_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesFloatingCommandArchive.page_index_list)
  return _internal_page_index_list(index);
}
inline void MoveDrawablesFloatingCommandArchive::set_page_index_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  page_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TP.MoveDrawablesFloatingCommandArchive.page_index_list)
}
inline void MoveDrawablesFloatingCommandArchive::_internal_add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  page_index_list_.Add(value);
}
inline void MoveDrawablesFloatingCommandArchive::add_page_index_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_page_index_list(value);
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesFloatingCommandArchive.page_index_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MoveDrawablesFloatingCommandArchive::_internal_page_index_list() const {
  return page_index_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MoveDrawablesFloatingCommandArchive::page_index_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesFloatingCommandArchive.page_index_list)
  return _internal_page_index_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MoveDrawablesFloatingCommandArchive::_internal_mutable_page_index_list() {
  return &page_index_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MoveDrawablesFloatingCommandArchive::mutable_page_index_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesFloatingCommandArchive.page_index_list)
  return _internal_mutable_page_index_list();
}

// repeated .TSD.ExteriorTextWrapArchive exterior_text_wrap_list = 6;
inline int MoveDrawablesFloatingCommandArchive::_internal_exterior_text_wrap_list_size() const {
  return exterior_text_wrap_list_.size();
}
inline int MoveDrawablesFloatingCommandArchive::exterior_text_wrap_list_size() const {
  return _internal_exterior_text_wrap_list_size();
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesFloatingCommandArchive::mutable_exterior_text_wrap_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesFloatingCommandArchive.exterior_text_wrap_list)
  return exterior_text_wrap_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >*
MoveDrawablesFloatingCommandArchive::mutable_exterior_text_wrap_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesFloatingCommandArchive.exterior_text_wrap_list)
  return &exterior_text_wrap_list_;
}
inline const ::TSD::ExteriorTextWrapArchive& MoveDrawablesFloatingCommandArchive::_internal_exterior_text_wrap_list(int index) const {
  return exterior_text_wrap_list_.Get(index);
}
inline const ::TSD::ExteriorTextWrapArchive& MoveDrawablesFloatingCommandArchive::exterior_text_wrap_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesFloatingCommandArchive.exterior_text_wrap_list)
  return _internal_exterior_text_wrap_list(index);
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesFloatingCommandArchive::_internal_add_exterior_text_wrap_list() {
  return exterior_text_wrap_list_.Add();
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesFloatingCommandArchive::add_exterior_text_wrap_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesFloatingCommandArchive.exterior_text_wrap_list)
  return _internal_add_exterior_text_wrap_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >&
MoveDrawablesFloatingCommandArchive::exterior_text_wrap_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesFloatingCommandArchive.exterior_text_wrap_list)
  return exterior_text_wrap_list_;
}

// repeated .TSP.Reference original_attachment_list = 7;
inline int MoveDrawablesFloatingCommandArchive::_internal_original_attachment_list_size() const {
  return original_attachment_list_.size();
}
inline int MoveDrawablesFloatingCommandArchive::original_attachment_list_size() const {
  return _internal_original_attachment_list_size();
}
inline ::TSP::Reference* MoveDrawablesFloatingCommandArchive::mutable_original_attachment_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesFloatingCommandArchive.original_attachment_list)
  return original_attachment_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
MoveDrawablesFloatingCommandArchive::mutable_original_attachment_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesFloatingCommandArchive.original_attachment_list)
  return &original_attachment_list_;
}
inline const ::TSP::Reference& MoveDrawablesFloatingCommandArchive::_internal_original_attachment_list(int index) const {
  return original_attachment_list_.Get(index);
}
inline const ::TSP::Reference& MoveDrawablesFloatingCommandArchive::original_attachment_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesFloatingCommandArchive.original_attachment_list)
  return _internal_original_attachment_list(index);
}
inline ::TSP::Reference* MoveDrawablesFloatingCommandArchive::_internal_add_original_attachment_list() {
  return original_attachment_list_.Add();
}
inline ::TSP::Reference* MoveDrawablesFloatingCommandArchive::add_original_attachment_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesFloatingCommandArchive.original_attachment_list)
  return _internal_add_original_attachment_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
MoveDrawablesFloatingCommandArchive::original_attachment_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesFloatingCommandArchive.original_attachment_list)
  return original_attachment_list_;
}

// repeated .TSD.ExteriorTextWrapArchive original_exterior_text_wrap_list = 8;
inline int MoveDrawablesFloatingCommandArchive::_internal_original_exterior_text_wrap_list_size() const {
  return original_exterior_text_wrap_list_.size();
}
inline int MoveDrawablesFloatingCommandArchive::original_exterior_text_wrap_list_size() const {
  return _internal_original_exterior_text_wrap_list_size();
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesFloatingCommandArchive::mutable_original_exterior_text_wrap_list(int index) {
  // @@protoc_insertion_point(field_mutable:TP.MoveDrawablesFloatingCommandArchive.original_exterior_text_wrap_list)
  return original_exterior_text_wrap_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >*
MoveDrawablesFloatingCommandArchive::mutable_original_exterior_text_wrap_list() {
  // @@protoc_insertion_point(field_mutable_list:TP.MoveDrawablesFloatingCommandArchive.original_exterior_text_wrap_list)
  return &original_exterior_text_wrap_list_;
}
inline const ::TSD::ExteriorTextWrapArchive& MoveDrawablesFloatingCommandArchive::_internal_original_exterior_text_wrap_list(int index) const {
  return original_exterior_text_wrap_list_.Get(index);
}
inline const ::TSD::ExteriorTextWrapArchive& MoveDrawablesFloatingCommandArchive::original_exterior_text_wrap_list(int index) const {
  // @@protoc_insertion_point(field_get:TP.MoveDrawablesFloatingCommandArchive.original_exterior_text_wrap_list)
  return _internal_original_exterior_text_wrap_list(index);
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesFloatingCommandArchive::_internal_add_original_exterior_text_wrap_list() {
  return original_exterior_text_wrap_list_.Add();
}
inline ::TSD::ExteriorTextWrapArchive* MoveDrawablesFloatingCommandArchive::add_original_exterior_text_wrap_list() {
  // @@protoc_insertion_point(field_add:TP.MoveDrawablesFloatingCommandArchive.original_exterior_text_wrap_list)
  return _internal_add_original_exterior_text_wrap_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapArchive >&
MoveDrawablesFloatingCommandArchive::original_exterior_text_wrap_list() const {
  // @@protoc_insertion_point(field_list:TP.MoveDrawablesFloatingCommandArchive.original_exterior_text_wrap_list)
  return original_exterior_text_wrap_list_;
}

// -------------------------------------------------------------------

// ChangeFootnoteFormatCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ChangeFootnoteFormatCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChangeFootnoteFormatCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ChangeFootnoteFormatCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ChangeFootnoteFormatCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.ChangeFootnoteFormatCommandArchive.super)
  return _internal_super();
}
inline void ChangeFootnoteFormatCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangeFootnoteFormatCommandArchive.super)
}
inline ::TSK::CommandArchive* ChangeFootnoteFormatCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ChangeFootnoteFormatCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.ChangeFootnoteFormatCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ChangeFootnoteFormatCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ChangeFootnoteFormatCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.ChangeFootnoteFormatCommandArchive.super)
  return _internal_mutable_super();
}
inline void ChangeFootnoteFormatCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangeFootnoteFormatCommandArchive.super)
}

// optional .TP.ChangeFootnoteFormatCommandArchive.FootnoteFormat format = 2;
inline bool ChangeFootnoteFormatCommandArchive::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChangeFootnoteFormatCommandArchive::has_format() const {
  return _internal_has_format();
}
inline void ChangeFootnoteFormatCommandArchive::clear_format() {
  format_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::_internal_format() const {
  return static_cast< ::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat >(format_);
}
inline ::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat ChangeFootnoteFormatCommandArchive::format() const {
  // @@protoc_insertion_point(field_get:TP.ChangeFootnoteFormatCommandArchive.format)
  return _internal_format();
}
inline void ChangeFootnoteFormatCommandArchive::_internal_set_format(::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat value) {
  assert(::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  format_ = value;
}
inline void ChangeFootnoteFormatCommandArchive::set_format(::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:TP.ChangeFootnoteFormatCommandArchive.format)
}

// -------------------------------------------------------------------

// ChangeFootnoteKindCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ChangeFootnoteKindCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChangeFootnoteKindCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ChangeFootnoteKindCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ChangeFootnoteKindCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.ChangeFootnoteKindCommandArchive.super)
  return _internal_super();
}
inline void ChangeFootnoteKindCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangeFootnoteKindCommandArchive.super)
}
inline ::TSK::CommandArchive* ChangeFootnoteKindCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ChangeFootnoteKindCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.ChangeFootnoteKindCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ChangeFootnoteKindCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ChangeFootnoteKindCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.ChangeFootnoteKindCommandArchive.super)
  return _internal_mutable_super();
}
inline void ChangeFootnoteKindCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangeFootnoteKindCommandArchive.super)
}

// optional .TP.ChangeFootnoteKindCommandArchive.FootnoteKind kind = 2;
inline bool ChangeFootnoteKindCommandArchive::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChangeFootnoteKindCommandArchive::has_kind() const {
  return _internal_has_kind();
}
inline void ChangeFootnoteKindCommandArchive::clear_kind() {
  kind_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TP::ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::_internal_kind() const {
  return static_cast< ::TP::ChangeFootnoteKindCommandArchive_FootnoteKind >(kind_);
}
inline ::TP::ChangeFootnoteKindCommandArchive_FootnoteKind ChangeFootnoteKindCommandArchive::kind() const {
  // @@protoc_insertion_point(field_get:TP.ChangeFootnoteKindCommandArchive.kind)
  return _internal_kind();
}
inline void ChangeFootnoteKindCommandArchive::_internal_set_kind(::TP::ChangeFootnoteKindCommandArchive_FootnoteKind value) {
  assert(::TP::ChangeFootnoteKindCommandArchive_FootnoteKind_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  kind_ = value;
}
inline void ChangeFootnoteKindCommandArchive::set_kind(::TP::ChangeFootnoteKindCommandArchive_FootnoteKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:TP.ChangeFootnoteKindCommandArchive.kind)
}

// optional .TSWP.UndoTransaction undo_transaction = 3;
inline bool ChangeFootnoteKindCommandArchive::_internal_has_undo_transaction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || undo_transaction_ != nullptr);
  return value;
}
inline bool ChangeFootnoteKindCommandArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& ChangeFootnoteKindCommandArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& ChangeFootnoteKindCommandArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TP.ChangeFootnoteKindCommandArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void ChangeFootnoteKindCommandArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangeFootnoteKindCommandArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* ChangeFootnoteKindCommandArchive::release_undo_transaction() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UndoTransaction* ChangeFootnoteKindCommandArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TP.ChangeFootnoteKindCommandArchive.undo_transaction)
  _has_bits_[0] &= ~0x00000002u;
  ::TSWP::UndoTransaction* temp = undo_transaction_;
  undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* ChangeFootnoteKindCommandArchive::_internal_mutable_undo_transaction() {
  _has_bits_[0] |= 0x00000002u;
  if (undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArena());
    undo_transaction_ = p;
  }
  return undo_transaction_;
}
inline ::TSWP::UndoTransaction* ChangeFootnoteKindCommandArchive::mutable_undo_transaction() {
  // @@protoc_insertion_point(field_mutable:TP.ChangeFootnoteKindCommandArchive.undo_transaction)
  return _internal_mutable_undo_transaction();
}
inline void ChangeFootnoteKindCommandArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction)->GetArena();
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangeFootnoteKindCommandArchive.undo_transaction)
}

// -------------------------------------------------------------------

// ChangeFootnoteNumberingCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ChangeFootnoteNumberingCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChangeFootnoteNumberingCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ChangeFootnoteNumberingCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ChangeFootnoteNumberingCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.ChangeFootnoteNumberingCommandArchive.super)
  return _internal_super();
}
inline void ChangeFootnoteNumberingCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangeFootnoteNumberingCommandArchive.super)
}
inline ::TSK::CommandArchive* ChangeFootnoteNumberingCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ChangeFootnoteNumberingCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.ChangeFootnoteNumberingCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ChangeFootnoteNumberingCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ChangeFootnoteNumberingCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.ChangeFootnoteNumberingCommandArchive.super)
  return _internal_mutable_super();
}
inline void ChangeFootnoteNumberingCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangeFootnoteNumberingCommandArchive.super)
}

// optional .TP.ChangeFootnoteNumberingCommandArchive.FootnoteNumbering numbering = 2;
inline bool ChangeFootnoteNumberingCommandArchive::_internal_has_numbering() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChangeFootnoteNumberingCommandArchive::has_numbering() const {
  return _internal_has_numbering();
}
inline void ChangeFootnoteNumberingCommandArchive::clear_numbering() {
  numbering_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::_internal_numbering() const {
  return static_cast< ::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering >(numbering_);
}
inline ::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering ChangeFootnoteNumberingCommandArchive::numbering() const {
  // @@protoc_insertion_point(field_get:TP.ChangeFootnoteNumberingCommandArchive.numbering)
  return _internal_numbering();
}
inline void ChangeFootnoteNumberingCommandArchive::_internal_set_numbering(::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering value) {
  assert(::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  numbering_ = value;
}
inline void ChangeFootnoteNumberingCommandArchive::set_numbering(::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering value) {
  _internal_set_numbering(value);
  // @@protoc_insertion_point(field_set:TP.ChangeFootnoteNumberingCommandArchive.numbering)
}

// -------------------------------------------------------------------

// ChangeFootnoteSpacingCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ChangeFootnoteSpacingCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChangeFootnoteSpacingCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ChangeFootnoteSpacingCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ChangeFootnoteSpacingCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.ChangeFootnoteSpacingCommandArchive.super)
  return _internal_super();
}
inline void ChangeFootnoteSpacingCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangeFootnoteSpacingCommandArchive.super)
}
inline ::TSK::CommandArchive* ChangeFootnoteSpacingCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ChangeFootnoteSpacingCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.ChangeFootnoteSpacingCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ChangeFootnoteSpacingCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ChangeFootnoteSpacingCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.ChangeFootnoteSpacingCommandArchive.super)
  return _internal_mutable_super();
}
inline void ChangeFootnoteSpacingCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangeFootnoteSpacingCommandArchive.super)
}

// optional int32 footnote_spacing = 2;
inline bool ChangeFootnoteSpacingCommandArchive::_internal_has_footnote_spacing() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChangeFootnoteSpacingCommandArchive::has_footnote_spacing() const {
  return _internal_has_footnote_spacing();
}
inline void ChangeFootnoteSpacingCommandArchive::clear_footnote_spacing() {
  footnote_spacing_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeFootnoteSpacingCommandArchive::_internal_footnote_spacing() const {
  return footnote_spacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeFootnoteSpacingCommandArchive::footnote_spacing() const {
  // @@protoc_insertion_point(field_get:TP.ChangeFootnoteSpacingCommandArchive.footnote_spacing)
  return _internal_footnote_spacing();
}
inline void ChangeFootnoteSpacingCommandArchive::_internal_set_footnote_spacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  footnote_spacing_ = value;
}
inline void ChangeFootnoteSpacingCommandArchive::set_footnote_spacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_footnote_spacing(value);
  // @@protoc_insertion_point(field_set:TP.ChangeFootnoteSpacingCommandArchive.footnote_spacing)
}

// -------------------------------------------------------------------

// MoveInlineDrawableAnchoredCommandArchive

// required .TSWP.StorageActionCommandArchive super = 1;
inline bool MoveInlineDrawableAnchoredCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MoveInlineDrawableAnchoredCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::StorageActionCommandArchive& MoveInlineDrawableAnchoredCommandArchive::_internal_super() const {
  const ::TSWP::StorageActionCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StorageActionCommandArchive&>(
      ::TSWP::_StorageActionCommandArchive_default_instance_);
}
inline const ::TSWP::StorageActionCommandArchive& MoveInlineDrawableAnchoredCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.MoveInlineDrawableAnchoredCommandArchive.super)
  return _internal_super();
}
inline void MoveInlineDrawableAnchoredCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StorageActionCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveInlineDrawableAnchoredCommandArchive.super)
}
inline ::TSWP::StorageActionCommandArchive* MoveInlineDrawableAnchoredCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* MoveInlineDrawableAnchoredCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.MoveInlineDrawableAnchoredCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* MoveInlineDrawableAnchoredCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StorageActionCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StorageActionCommandArchive* MoveInlineDrawableAnchoredCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.MoveInlineDrawableAnchoredCommandArchive.super)
  return _internal_mutable_super();
}
inline void MoveInlineDrawableAnchoredCommandArchive::set_allocated_super(::TSWP::StorageActionCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveInlineDrawableAnchoredCommandArchive.super)
}

// optional .TSK.IdPlacementOperationArgs id_placement_operation_args = 2;
inline bool MoveInlineDrawableAnchoredCommandArchive::_internal_has_id_placement_operation_args() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || id_placement_operation_args_ != nullptr);
  return value;
}
inline bool MoveInlineDrawableAnchoredCommandArchive::has_id_placement_operation_args() const {
  return _internal_has_id_placement_operation_args();
}
inline const ::TSK::IdPlacementOperationArgs& MoveInlineDrawableAnchoredCommandArchive::_internal_id_placement_operation_args() const {
  const ::TSK::IdPlacementOperationArgs* p = id_placement_operation_args_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::IdPlacementOperationArgs&>(
      ::TSK::_IdPlacementOperationArgs_default_instance_);
}
inline const ::TSK::IdPlacementOperationArgs& MoveInlineDrawableAnchoredCommandArchive::id_placement_operation_args() const {
  // @@protoc_insertion_point(field_get:TP.MoveInlineDrawableAnchoredCommandArchive.id_placement_operation_args)
  return _internal_id_placement_operation_args();
}
inline void MoveInlineDrawableAnchoredCommandArchive::unsafe_arena_set_allocated_id_placement_operation_args(
    ::TSK::IdPlacementOperationArgs* id_placement_operation_args) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_placement_operation_args_);
  }
  id_placement_operation_args_ = id_placement_operation_args;
  if (id_placement_operation_args) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveInlineDrawableAnchoredCommandArchive.id_placement_operation_args)
}
inline ::TSK::IdPlacementOperationArgs* MoveInlineDrawableAnchoredCommandArchive::release_id_placement_operation_args() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::IdPlacementOperationArgs* temp = id_placement_operation_args_;
  id_placement_operation_args_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::IdPlacementOperationArgs* MoveInlineDrawableAnchoredCommandArchive::unsafe_arena_release_id_placement_operation_args() {
  // @@protoc_insertion_point(field_release:TP.MoveInlineDrawableAnchoredCommandArchive.id_placement_operation_args)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::IdPlacementOperationArgs* temp = id_placement_operation_args_;
  id_placement_operation_args_ = nullptr;
  return temp;
}
inline ::TSK::IdPlacementOperationArgs* MoveInlineDrawableAnchoredCommandArchive::_internal_mutable_id_placement_operation_args() {
  _has_bits_[0] |= 0x00000002u;
  if (id_placement_operation_args_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::IdPlacementOperationArgs>(GetArena());
    id_placement_operation_args_ = p;
  }
  return id_placement_operation_args_;
}
inline ::TSK::IdPlacementOperationArgs* MoveInlineDrawableAnchoredCommandArchive::mutable_id_placement_operation_args() {
  // @@protoc_insertion_point(field_mutable:TP.MoveInlineDrawableAnchoredCommandArchive.id_placement_operation_args)
  return _internal_mutable_id_placement_operation_args();
}
inline void MoveInlineDrawableAnchoredCommandArchive::set_allocated_id_placement_operation_args(::TSK::IdPlacementOperationArgs* id_placement_operation_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_placement_operation_args_);
  }
  if (id_placement_operation_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_placement_operation_args)->GetArena();
    if (message_arena != submessage_arena) {
      id_placement_operation_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_placement_operation_args, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_placement_operation_args_ = id_placement_operation_args;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveInlineDrawableAnchoredCommandArchive.id_placement_operation_args)
}

// optional uint32 replacement_range_location = 3;
inline bool MoveInlineDrawableAnchoredCommandArchive::_internal_has_replacement_range_location() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MoveInlineDrawableAnchoredCommandArchive::has_replacement_range_location() const {
  return _internal_has_replacement_range_location();
}
inline void MoveInlineDrawableAnchoredCommandArchive::clear_replacement_range_location() {
  replacement_range_location_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveInlineDrawableAnchoredCommandArchive::_internal_replacement_range_location() const {
  return replacement_range_location_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveInlineDrawableAnchoredCommandArchive::replacement_range_location() const {
  // @@protoc_insertion_point(field_get:TP.MoveInlineDrawableAnchoredCommandArchive.replacement_range_location)
  return _internal_replacement_range_location();
}
inline void MoveInlineDrawableAnchoredCommandArchive::_internal_set_replacement_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  replacement_range_location_ = value;
}
inline void MoveInlineDrawableAnchoredCommandArchive::set_replacement_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replacement_range_location(value);
  // @@protoc_insertion_point(field_set:TP.MoveInlineDrawableAnchoredCommandArchive.replacement_range_location)
}

// optional uint32 replacement_range_length = 4;
inline bool MoveInlineDrawableAnchoredCommandArchive::_internal_has_replacement_range_length() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MoveInlineDrawableAnchoredCommandArchive::has_replacement_range_length() const {
  return _internal_has_replacement_range_length();
}
inline void MoveInlineDrawableAnchoredCommandArchive::clear_replacement_range_length() {
  replacement_range_length_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveInlineDrawableAnchoredCommandArchive::_internal_replacement_range_length() const {
  return replacement_range_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveInlineDrawableAnchoredCommandArchive::replacement_range_length() const {
  // @@protoc_insertion_point(field_get:TP.MoveInlineDrawableAnchoredCommandArchive.replacement_range_length)
  return _internal_replacement_range_length();
}
inline void MoveInlineDrawableAnchoredCommandArchive::_internal_set_replacement_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  replacement_range_length_ = value;
}
inline void MoveInlineDrawableAnchoredCommandArchive::set_replacement_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replacement_range_length(value);
  // @@protoc_insertion_point(field_set:TP.MoveInlineDrawableAnchoredCommandArchive.replacement_range_length)
}

// optional .TSP.UUIDPath drawable_info_id_path = 5;
inline bool MoveInlineDrawableAnchoredCommandArchive::_internal_has_drawable_info_id_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || drawable_info_id_path_ != nullptr);
  return value;
}
inline bool MoveInlineDrawableAnchoredCommandArchive::has_drawable_info_id_path() const {
  return _internal_has_drawable_info_id_path();
}
inline const ::TSP::UUIDPath& MoveInlineDrawableAnchoredCommandArchive::_internal_drawable_info_id_path() const {
  const ::TSP::UUIDPath* p = drawable_info_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& MoveInlineDrawableAnchoredCommandArchive::drawable_info_id_path() const {
  // @@protoc_insertion_point(field_get:TP.MoveInlineDrawableAnchoredCommandArchive.drawable_info_id_path)
  return _internal_drawable_info_id_path();
}
inline void MoveInlineDrawableAnchoredCommandArchive::unsafe_arena_set_allocated_drawable_info_id_path(
    ::TSP::UUIDPath* drawable_info_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path_);
  }
  drawable_info_id_path_ = drawable_info_id_path;
  if (drawable_info_id_path) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveInlineDrawableAnchoredCommandArchive.drawable_info_id_path)
}
inline ::TSP::UUIDPath* MoveInlineDrawableAnchoredCommandArchive::release_drawable_info_id_path() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = drawable_info_id_path_;
  drawable_info_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* MoveInlineDrawableAnchoredCommandArchive::unsafe_arena_release_drawable_info_id_path() {
  // @@protoc_insertion_point(field_release:TP.MoveInlineDrawableAnchoredCommandArchive.drawable_info_id_path)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = drawable_info_id_path_;
  drawable_info_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* MoveInlineDrawableAnchoredCommandArchive::_internal_mutable_drawable_info_id_path() {
  _has_bits_[0] |= 0x00000004u;
  if (drawable_info_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    drawable_info_id_path_ = p;
  }
  return drawable_info_id_path_;
}
inline ::TSP::UUIDPath* MoveInlineDrawableAnchoredCommandArchive::mutable_drawable_info_id_path() {
  // @@protoc_insertion_point(field_mutable:TP.MoveInlineDrawableAnchoredCommandArchive.drawable_info_id_path)
  return _internal_mutable_drawable_info_id_path();
}
inline void MoveInlineDrawableAnchoredCommandArchive::set_allocated_drawable_info_id_path(::TSP::UUIDPath* drawable_info_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path_);
  }
  if (drawable_info_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      drawable_info_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable_info_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  drawable_info_id_path_ = drawable_info_id_path;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveInlineDrawableAnchoredCommandArchive.drawable_info_id_path)
}

// optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 6;
inline bool MoveInlineDrawableAnchoredCommandArchive::_internal_has_exterior_text_wrap() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || exterior_text_wrap_ != nullptr);
  return value;
}
inline bool MoveInlineDrawableAnchoredCommandArchive::has_exterior_text_wrap() const {
  return _internal_has_exterior_text_wrap();
}
inline const ::TSD::ExteriorTextWrapArchive& MoveInlineDrawableAnchoredCommandArchive::_internal_exterior_text_wrap() const {
  const ::TSD::ExteriorTextWrapArchive* p = exterior_text_wrap_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ExteriorTextWrapArchive&>(
      ::TSD::_ExteriorTextWrapArchive_default_instance_);
}
inline const ::TSD::ExteriorTextWrapArchive& MoveInlineDrawableAnchoredCommandArchive::exterior_text_wrap() const {
  // @@protoc_insertion_point(field_get:TP.MoveInlineDrawableAnchoredCommandArchive.exterior_text_wrap)
  return _internal_exterior_text_wrap();
}
inline void MoveInlineDrawableAnchoredCommandArchive::unsafe_arena_set_allocated_exterior_text_wrap(
    ::TSD::ExteriorTextWrapArchive* exterior_text_wrap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exterior_text_wrap_);
  }
  exterior_text_wrap_ = exterior_text_wrap;
  if (exterior_text_wrap) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveInlineDrawableAnchoredCommandArchive.exterior_text_wrap)
}
inline ::TSD::ExteriorTextWrapArchive* MoveInlineDrawableAnchoredCommandArchive::release_exterior_text_wrap() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::ExteriorTextWrapArchive* temp = exterior_text_wrap_;
  exterior_text_wrap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* MoveInlineDrawableAnchoredCommandArchive::unsafe_arena_release_exterior_text_wrap() {
  // @@protoc_insertion_point(field_release:TP.MoveInlineDrawableAnchoredCommandArchive.exterior_text_wrap)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::ExteriorTextWrapArchive* temp = exterior_text_wrap_;
  exterior_text_wrap_ = nullptr;
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* MoveInlineDrawableAnchoredCommandArchive::_internal_mutable_exterior_text_wrap() {
  _has_bits_[0] |= 0x00000008u;
  if (exterior_text_wrap_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ExteriorTextWrapArchive>(GetArena());
    exterior_text_wrap_ = p;
  }
  return exterior_text_wrap_;
}
inline ::TSD::ExteriorTextWrapArchive* MoveInlineDrawableAnchoredCommandArchive::mutable_exterior_text_wrap() {
  // @@protoc_insertion_point(field_mutable:TP.MoveInlineDrawableAnchoredCommandArchive.exterior_text_wrap)
  return _internal_mutable_exterior_text_wrap();
}
inline void MoveInlineDrawableAnchoredCommandArchive::set_allocated_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* exterior_text_wrap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exterior_text_wrap_);
  }
  if (exterior_text_wrap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exterior_text_wrap)->GetArena();
    if (message_arena != submessage_arena) {
      exterior_text_wrap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exterior_text_wrap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  exterior_text_wrap_ = exterior_text_wrap;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveInlineDrawableAnchoredCommandArchive.exterior_text_wrap)
}

// optional .TSD.ExteriorTextWrapArchive original_exterior_text_wrap = 7;
inline bool MoveInlineDrawableAnchoredCommandArchive::_internal_has_original_exterior_text_wrap() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || original_exterior_text_wrap_ != nullptr);
  return value;
}
inline bool MoveInlineDrawableAnchoredCommandArchive::has_original_exterior_text_wrap() const {
  return _internal_has_original_exterior_text_wrap();
}
inline const ::TSD::ExteriorTextWrapArchive& MoveInlineDrawableAnchoredCommandArchive::_internal_original_exterior_text_wrap() const {
  const ::TSD::ExteriorTextWrapArchive* p = original_exterior_text_wrap_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ExteriorTextWrapArchive&>(
      ::TSD::_ExteriorTextWrapArchive_default_instance_);
}
inline const ::TSD::ExteriorTextWrapArchive& MoveInlineDrawableAnchoredCommandArchive::original_exterior_text_wrap() const {
  // @@protoc_insertion_point(field_get:TP.MoveInlineDrawableAnchoredCommandArchive.original_exterior_text_wrap)
  return _internal_original_exterior_text_wrap();
}
inline void MoveInlineDrawableAnchoredCommandArchive::unsafe_arena_set_allocated_original_exterior_text_wrap(
    ::TSD::ExteriorTextWrapArchive* original_exterior_text_wrap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_exterior_text_wrap_);
  }
  original_exterior_text_wrap_ = original_exterior_text_wrap;
  if (original_exterior_text_wrap) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveInlineDrawableAnchoredCommandArchive.original_exterior_text_wrap)
}
inline ::TSD::ExteriorTextWrapArchive* MoveInlineDrawableAnchoredCommandArchive::release_original_exterior_text_wrap() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::ExteriorTextWrapArchive* temp = original_exterior_text_wrap_;
  original_exterior_text_wrap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* MoveInlineDrawableAnchoredCommandArchive::unsafe_arena_release_original_exterior_text_wrap() {
  // @@protoc_insertion_point(field_release:TP.MoveInlineDrawableAnchoredCommandArchive.original_exterior_text_wrap)
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::ExteriorTextWrapArchive* temp = original_exterior_text_wrap_;
  original_exterior_text_wrap_ = nullptr;
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* MoveInlineDrawableAnchoredCommandArchive::_internal_mutable_original_exterior_text_wrap() {
  _has_bits_[0] |= 0x00000010u;
  if (original_exterior_text_wrap_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ExteriorTextWrapArchive>(GetArena());
    original_exterior_text_wrap_ = p;
  }
  return original_exterior_text_wrap_;
}
inline ::TSD::ExteriorTextWrapArchive* MoveInlineDrawableAnchoredCommandArchive::mutable_original_exterior_text_wrap() {
  // @@protoc_insertion_point(field_mutable:TP.MoveInlineDrawableAnchoredCommandArchive.original_exterior_text_wrap)
  return _internal_mutable_original_exterior_text_wrap();
}
inline void MoveInlineDrawableAnchoredCommandArchive::set_allocated_original_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* original_exterior_text_wrap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_exterior_text_wrap_);
  }
  if (original_exterior_text_wrap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_exterior_text_wrap)->GetArena();
    if (message_arena != submessage_arena) {
      original_exterior_text_wrap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_exterior_text_wrap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  original_exterior_text_wrap_ = original_exterior_text_wrap;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveInlineDrawableAnchoredCommandArchive.original_exterior_text_wrap)
}

// -------------------------------------------------------------------

// MoveAnchoredDrawableInlineCommandArchive

// required .TSWP.StorageActionCommandArchive super = 1;
inline bool MoveAnchoredDrawableInlineCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MoveAnchoredDrawableInlineCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::StorageActionCommandArchive& MoveAnchoredDrawableInlineCommandArchive::_internal_super() const {
  const ::TSWP::StorageActionCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StorageActionCommandArchive&>(
      ::TSWP::_StorageActionCommandArchive_default_instance_);
}
inline const ::TSWP::StorageActionCommandArchive& MoveAnchoredDrawableInlineCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.MoveAnchoredDrawableInlineCommandArchive.super)
  return _internal_super();
}
inline void MoveAnchoredDrawableInlineCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StorageActionCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveAnchoredDrawableInlineCommandArchive.super)
}
inline ::TSWP::StorageActionCommandArchive* MoveAnchoredDrawableInlineCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* MoveAnchoredDrawableInlineCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.MoveAnchoredDrawableInlineCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* MoveAnchoredDrawableInlineCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StorageActionCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StorageActionCommandArchive* MoveAnchoredDrawableInlineCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.MoveAnchoredDrawableInlineCommandArchive.super)
  return _internal_mutable_super();
}
inline void MoveAnchoredDrawableInlineCommandArchive::set_allocated_super(::TSWP::StorageActionCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveAnchoredDrawableInlineCommandArchive.super)
}

// optional .TSK.IdPlacementOperationArgs id_placement_operation_args = 2;
inline bool MoveAnchoredDrawableInlineCommandArchive::_internal_has_id_placement_operation_args() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || id_placement_operation_args_ != nullptr);
  return value;
}
inline bool MoveAnchoredDrawableInlineCommandArchive::has_id_placement_operation_args() const {
  return _internal_has_id_placement_operation_args();
}
inline const ::TSK::IdPlacementOperationArgs& MoveAnchoredDrawableInlineCommandArchive::_internal_id_placement_operation_args() const {
  const ::TSK::IdPlacementOperationArgs* p = id_placement_operation_args_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::IdPlacementOperationArgs&>(
      ::TSK::_IdPlacementOperationArgs_default_instance_);
}
inline const ::TSK::IdPlacementOperationArgs& MoveAnchoredDrawableInlineCommandArchive::id_placement_operation_args() const {
  // @@protoc_insertion_point(field_get:TP.MoveAnchoredDrawableInlineCommandArchive.id_placement_operation_args)
  return _internal_id_placement_operation_args();
}
inline void MoveAnchoredDrawableInlineCommandArchive::unsafe_arena_set_allocated_id_placement_operation_args(
    ::TSK::IdPlacementOperationArgs* id_placement_operation_args) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_placement_operation_args_);
  }
  id_placement_operation_args_ = id_placement_operation_args;
  if (id_placement_operation_args) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveAnchoredDrawableInlineCommandArchive.id_placement_operation_args)
}
inline ::TSK::IdPlacementOperationArgs* MoveAnchoredDrawableInlineCommandArchive::release_id_placement_operation_args() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::IdPlacementOperationArgs* temp = id_placement_operation_args_;
  id_placement_operation_args_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::IdPlacementOperationArgs* MoveAnchoredDrawableInlineCommandArchive::unsafe_arena_release_id_placement_operation_args() {
  // @@protoc_insertion_point(field_release:TP.MoveAnchoredDrawableInlineCommandArchive.id_placement_operation_args)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::IdPlacementOperationArgs* temp = id_placement_operation_args_;
  id_placement_operation_args_ = nullptr;
  return temp;
}
inline ::TSK::IdPlacementOperationArgs* MoveAnchoredDrawableInlineCommandArchive::_internal_mutable_id_placement_operation_args() {
  _has_bits_[0] |= 0x00000002u;
  if (id_placement_operation_args_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::IdPlacementOperationArgs>(GetArena());
    id_placement_operation_args_ = p;
  }
  return id_placement_operation_args_;
}
inline ::TSK::IdPlacementOperationArgs* MoveAnchoredDrawableInlineCommandArchive::mutable_id_placement_operation_args() {
  // @@protoc_insertion_point(field_mutable:TP.MoveAnchoredDrawableInlineCommandArchive.id_placement_operation_args)
  return _internal_mutable_id_placement_operation_args();
}
inline void MoveAnchoredDrawableInlineCommandArchive::set_allocated_id_placement_operation_args(::TSK::IdPlacementOperationArgs* id_placement_operation_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_placement_operation_args_);
  }
  if (id_placement_operation_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_placement_operation_args)->GetArena();
    if (message_arena != submessage_arena) {
      id_placement_operation_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_placement_operation_args, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_placement_operation_args_ = id_placement_operation_args;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveAnchoredDrawableInlineCommandArchive.id_placement_operation_args)
}

// optional uint32 replacement_range_location = 3;
inline bool MoveAnchoredDrawableInlineCommandArchive::_internal_has_replacement_range_location() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MoveAnchoredDrawableInlineCommandArchive::has_replacement_range_location() const {
  return _internal_has_replacement_range_location();
}
inline void MoveAnchoredDrawableInlineCommandArchive::clear_replacement_range_location() {
  replacement_range_location_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveAnchoredDrawableInlineCommandArchive::_internal_replacement_range_location() const {
  return replacement_range_location_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveAnchoredDrawableInlineCommandArchive::replacement_range_location() const {
  // @@protoc_insertion_point(field_get:TP.MoveAnchoredDrawableInlineCommandArchive.replacement_range_location)
  return _internal_replacement_range_location();
}
inline void MoveAnchoredDrawableInlineCommandArchive::_internal_set_replacement_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  replacement_range_location_ = value;
}
inline void MoveAnchoredDrawableInlineCommandArchive::set_replacement_range_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replacement_range_location(value);
  // @@protoc_insertion_point(field_set:TP.MoveAnchoredDrawableInlineCommandArchive.replacement_range_location)
}

// optional uint32 replacement_range_length = 4;
inline bool MoveAnchoredDrawableInlineCommandArchive::_internal_has_replacement_range_length() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MoveAnchoredDrawableInlineCommandArchive::has_replacement_range_length() const {
  return _internal_has_replacement_range_length();
}
inline void MoveAnchoredDrawableInlineCommandArchive::clear_replacement_range_length() {
  replacement_range_length_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveAnchoredDrawableInlineCommandArchive::_internal_replacement_range_length() const {
  return replacement_range_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveAnchoredDrawableInlineCommandArchive::replacement_range_length() const {
  // @@protoc_insertion_point(field_get:TP.MoveAnchoredDrawableInlineCommandArchive.replacement_range_length)
  return _internal_replacement_range_length();
}
inline void MoveAnchoredDrawableInlineCommandArchive::_internal_set_replacement_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  replacement_range_length_ = value;
}
inline void MoveAnchoredDrawableInlineCommandArchive::set_replacement_range_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replacement_range_length(value);
  // @@protoc_insertion_point(field_set:TP.MoveAnchoredDrawableInlineCommandArchive.replacement_range_length)
}

// optional .TSP.UUIDPath drawable_info_id_path = 5;
inline bool MoveAnchoredDrawableInlineCommandArchive::_internal_has_drawable_info_id_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || drawable_info_id_path_ != nullptr);
  return value;
}
inline bool MoveAnchoredDrawableInlineCommandArchive::has_drawable_info_id_path() const {
  return _internal_has_drawable_info_id_path();
}
inline const ::TSP::UUIDPath& MoveAnchoredDrawableInlineCommandArchive::_internal_drawable_info_id_path() const {
  const ::TSP::UUIDPath* p = drawable_info_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& MoveAnchoredDrawableInlineCommandArchive::drawable_info_id_path() const {
  // @@protoc_insertion_point(field_get:TP.MoveAnchoredDrawableInlineCommandArchive.drawable_info_id_path)
  return _internal_drawable_info_id_path();
}
inline void MoveAnchoredDrawableInlineCommandArchive::unsafe_arena_set_allocated_drawable_info_id_path(
    ::TSP::UUIDPath* drawable_info_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path_);
  }
  drawable_info_id_path_ = drawable_info_id_path;
  if (drawable_info_id_path) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveAnchoredDrawableInlineCommandArchive.drawable_info_id_path)
}
inline ::TSP::UUIDPath* MoveAnchoredDrawableInlineCommandArchive::release_drawable_info_id_path() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = drawable_info_id_path_;
  drawable_info_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* MoveAnchoredDrawableInlineCommandArchive::unsafe_arena_release_drawable_info_id_path() {
  // @@protoc_insertion_point(field_release:TP.MoveAnchoredDrawableInlineCommandArchive.drawable_info_id_path)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = drawable_info_id_path_;
  drawable_info_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* MoveAnchoredDrawableInlineCommandArchive::_internal_mutable_drawable_info_id_path() {
  _has_bits_[0] |= 0x00000004u;
  if (drawable_info_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    drawable_info_id_path_ = p;
  }
  return drawable_info_id_path_;
}
inline ::TSP::UUIDPath* MoveAnchoredDrawableInlineCommandArchive::mutable_drawable_info_id_path() {
  // @@protoc_insertion_point(field_mutable:TP.MoveAnchoredDrawableInlineCommandArchive.drawable_info_id_path)
  return _internal_mutable_drawable_info_id_path();
}
inline void MoveAnchoredDrawableInlineCommandArchive::set_allocated_drawable_info_id_path(::TSP::UUIDPath* drawable_info_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path_);
  }
  if (drawable_info_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      drawable_info_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable_info_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  drawable_info_id_path_ = drawable_info_id_path;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveAnchoredDrawableInlineCommandArchive.drawable_info_id_path)
}

// optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 6;
inline bool MoveAnchoredDrawableInlineCommandArchive::_internal_has_exterior_text_wrap() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || exterior_text_wrap_ != nullptr);
  return value;
}
inline bool MoveAnchoredDrawableInlineCommandArchive::has_exterior_text_wrap() const {
  return _internal_has_exterior_text_wrap();
}
inline const ::TSD::ExteriorTextWrapArchive& MoveAnchoredDrawableInlineCommandArchive::_internal_exterior_text_wrap() const {
  const ::TSD::ExteriorTextWrapArchive* p = exterior_text_wrap_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ExteriorTextWrapArchive&>(
      ::TSD::_ExteriorTextWrapArchive_default_instance_);
}
inline const ::TSD::ExteriorTextWrapArchive& MoveAnchoredDrawableInlineCommandArchive::exterior_text_wrap() const {
  // @@protoc_insertion_point(field_get:TP.MoveAnchoredDrawableInlineCommandArchive.exterior_text_wrap)
  return _internal_exterior_text_wrap();
}
inline void MoveAnchoredDrawableInlineCommandArchive::unsafe_arena_set_allocated_exterior_text_wrap(
    ::TSD::ExteriorTextWrapArchive* exterior_text_wrap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exterior_text_wrap_);
  }
  exterior_text_wrap_ = exterior_text_wrap;
  if (exterior_text_wrap) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveAnchoredDrawableInlineCommandArchive.exterior_text_wrap)
}
inline ::TSD::ExteriorTextWrapArchive* MoveAnchoredDrawableInlineCommandArchive::release_exterior_text_wrap() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::ExteriorTextWrapArchive* temp = exterior_text_wrap_;
  exterior_text_wrap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* MoveAnchoredDrawableInlineCommandArchive::unsafe_arena_release_exterior_text_wrap() {
  // @@protoc_insertion_point(field_release:TP.MoveAnchoredDrawableInlineCommandArchive.exterior_text_wrap)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::ExteriorTextWrapArchive* temp = exterior_text_wrap_;
  exterior_text_wrap_ = nullptr;
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* MoveAnchoredDrawableInlineCommandArchive::_internal_mutable_exterior_text_wrap() {
  _has_bits_[0] |= 0x00000008u;
  if (exterior_text_wrap_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ExteriorTextWrapArchive>(GetArena());
    exterior_text_wrap_ = p;
  }
  return exterior_text_wrap_;
}
inline ::TSD::ExteriorTextWrapArchive* MoveAnchoredDrawableInlineCommandArchive::mutable_exterior_text_wrap() {
  // @@protoc_insertion_point(field_mutable:TP.MoveAnchoredDrawableInlineCommandArchive.exterior_text_wrap)
  return _internal_mutable_exterior_text_wrap();
}
inline void MoveAnchoredDrawableInlineCommandArchive::set_allocated_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* exterior_text_wrap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exterior_text_wrap_);
  }
  if (exterior_text_wrap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exterior_text_wrap)->GetArena();
    if (message_arena != submessage_arena) {
      exterior_text_wrap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exterior_text_wrap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  exterior_text_wrap_ = exterior_text_wrap;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveAnchoredDrawableInlineCommandArchive.exterior_text_wrap)
}

// optional .TSD.ExteriorTextWrapArchive original_exterior_text_wrap = 7;
inline bool MoveAnchoredDrawableInlineCommandArchive::_internal_has_original_exterior_text_wrap() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || original_exterior_text_wrap_ != nullptr);
  return value;
}
inline bool MoveAnchoredDrawableInlineCommandArchive::has_original_exterior_text_wrap() const {
  return _internal_has_original_exterior_text_wrap();
}
inline const ::TSD::ExteriorTextWrapArchive& MoveAnchoredDrawableInlineCommandArchive::_internal_original_exterior_text_wrap() const {
  const ::TSD::ExteriorTextWrapArchive* p = original_exterior_text_wrap_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ExteriorTextWrapArchive&>(
      ::TSD::_ExteriorTextWrapArchive_default_instance_);
}
inline const ::TSD::ExteriorTextWrapArchive& MoveAnchoredDrawableInlineCommandArchive::original_exterior_text_wrap() const {
  // @@protoc_insertion_point(field_get:TP.MoveAnchoredDrawableInlineCommandArchive.original_exterior_text_wrap)
  return _internal_original_exterior_text_wrap();
}
inline void MoveAnchoredDrawableInlineCommandArchive::unsafe_arena_set_allocated_original_exterior_text_wrap(
    ::TSD::ExteriorTextWrapArchive* original_exterior_text_wrap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_exterior_text_wrap_);
  }
  original_exterior_text_wrap_ = original_exterior_text_wrap;
  if (original_exterior_text_wrap) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.MoveAnchoredDrawableInlineCommandArchive.original_exterior_text_wrap)
}
inline ::TSD::ExteriorTextWrapArchive* MoveAnchoredDrawableInlineCommandArchive::release_original_exterior_text_wrap() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::ExteriorTextWrapArchive* temp = original_exterior_text_wrap_;
  original_exterior_text_wrap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* MoveAnchoredDrawableInlineCommandArchive::unsafe_arena_release_original_exterior_text_wrap() {
  // @@protoc_insertion_point(field_release:TP.MoveAnchoredDrawableInlineCommandArchive.original_exterior_text_wrap)
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::ExteriorTextWrapArchive* temp = original_exterior_text_wrap_;
  original_exterior_text_wrap_ = nullptr;
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* MoveAnchoredDrawableInlineCommandArchive::_internal_mutable_original_exterior_text_wrap() {
  _has_bits_[0] |= 0x00000010u;
  if (original_exterior_text_wrap_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ExteriorTextWrapArchive>(GetArena());
    original_exterior_text_wrap_ = p;
  }
  return original_exterior_text_wrap_;
}
inline ::TSD::ExteriorTextWrapArchive* MoveAnchoredDrawableInlineCommandArchive::mutable_original_exterior_text_wrap() {
  // @@protoc_insertion_point(field_mutable:TP.MoveAnchoredDrawableInlineCommandArchive.original_exterior_text_wrap)
  return _internal_mutable_original_exterior_text_wrap();
}
inline void MoveAnchoredDrawableInlineCommandArchive::set_allocated_original_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* original_exterior_text_wrap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_exterior_text_wrap_);
  }
  if (original_exterior_text_wrap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_exterior_text_wrap)->GetArena();
    if (message_arena != submessage_arena) {
      original_exterior_text_wrap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_exterior_text_wrap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  original_exterior_text_wrap_ = original_exterior_text_wrap;
  // @@protoc_insertion_point(field_set_allocated:TP.MoveAnchoredDrawableInlineCommandArchive.original_exterior_text_wrap)
}

// -------------------------------------------------------------------

// InsertFootnoteCommandArchive

// required .TSWP.StorageActionCommandArchive super = 1;
inline bool InsertFootnoteCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InsertFootnoteCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::StorageActionCommandArchive& InsertFootnoteCommandArchive::_internal_super() const {
  const ::TSWP::StorageActionCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StorageActionCommandArchive&>(
      ::TSWP::_StorageActionCommandArchive_default_instance_);
}
inline const ::TSWP::StorageActionCommandArchive& InsertFootnoteCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.InsertFootnoteCommandArchive.super)
  return _internal_super();
}
inline void InsertFootnoteCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StorageActionCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.InsertFootnoteCommandArchive.super)
}
inline ::TSWP::StorageActionCommandArchive* InsertFootnoteCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* InsertFootnoteCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.InsertFootnoteCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::StorageActionCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::StorageActionCommandArchive* InsertFootnoteCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StorageActionCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::StorageActionCommandArchive* InsertFootnoteCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.InsertFootnoteCommandArchive.super)
  return _internal_mutable_super();
}
inline void InsertFootnoteCommandArchive::set_allocated_super(::TSWP::StorageActionCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.InsertFootnoteCommandArchive.super)
}

// -------------------------------------------------------------------

// ToggleBodyLayoutDirectionCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ToggleBodyLayoutDirectionCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ToggleBodyLayoutDirectionCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ToggleBodyLayoutDirectionCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ToggleBodyLayoutDirectionCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.ToggleBodyLayoutDirectionCommandArchive.super)
  return _internal_super();
}
inline void ToggleBodyLayoutDirectionCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ToggleBodyLayoutDirectionCommandArchive.super)
}
inline ::TSK::CommandArchive* ToggleBodyLayoutDirectionCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ToggleBodyLayoutDirectionCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.ToggleBodyLayoutDirectionCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ToggleBodyLayoutDirectionCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ToggleBodyLayoutDirectionCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.ToggleBodyLayoutDirectionCommandArchive.super)
  return _internal_mutable_super();
}
inline void ToggleBodyLayoutDirectionCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.ToggleBodyLayoutDirectionCommandArchive.super)
}

// optional bool new_direction_is_vertical = 2;
inline bool ToggleBodyLayoutDirectionCommandArchive::_internal_has_new_direction_is_vertical() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToggleBodyLayoutDirectionCommandArchive::has_new_direction_is_vertical() const {
  return _internal_has_new_direction_is_vertical();
}
inline void ToggleBodyLayoutDirectionCommandArchive::clear_new_direction_is_vertical() {
  new_direction_is_vertical_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ToggleBodyLayoutDirectionCommandArchive::_internal_new_direction_is_vertical() const {
  return new_direction_is_vertical_;
}
inline bool ToggleBodyLayoutDirectionCommandArchive::new_direction_is_vertical() const {
  // @@protoc_insertion_point(field_get:TP.ToggleBodyLayoutDirectionCommandArchive.new_direction_is_vertical)
  return _internal_new_direction_is_vertical();
}
inline void ToggleBodyLayoutDirectionCommandArchive::_internal_set_new_direction_is_vertical(bool value) {
  _has_bits_[0] |= 0x00000002u;
  new_direction_is_vertical_ = value;
}
inline void ToggleBodyLayoutDirectionCommandArchive::set_new_direction_is_vertical(bool value) {
  _internal_set_new_direction_is_vertical(value);
  // @@protoc_insertion_point(field_set:TP.ToggleBodyLayoutDirectionCommandArchive.new_direction_is_vertical)
}

// -------------------------------------------------------------------

// TrackChangesCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool TrackChangesCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TrackChangesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& TrackChangesCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& TrackChangesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.TrackChangesCommandArchive.super)
  return _internal_super();
}
inline void TrackChangesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TrackChangesCommandArchive.super)
}
inline ::TSK::CommandArchive* TrackChangesCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* TrackChangesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.TrackChangesCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* TrackChangesCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* TrackChangesCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.TrackChangesCommandArchive.super)
  return _internal_mutable_super();
}
inline void TrackChangesCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.TrackChangesCommandArchive.super)
}

// optional bool track_changes = 2;
inline bool TrackChangesCommandArchive::_internal_has_track_changes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackChangesCommandArchive::has_track_changes() const {
  return _internal_has_track_changes();
}
inline void TrackChangesCommandArchive::clear_track_changes() {
  track_changes_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TrackChangesCommandArchive::_internal_track_changes() const {
  return track_changes_;
}
inline bool TrackChangesCommandArchive::track_changes() const {
  // @@protoc_insertion_point(field_get:TP.TrackChangesCommandArchive.track_changes)
  return _internal_track_changes();
}
inline void TrackChangesCommandArchive::_internal_set_track_changes(bool value) {
  _has_bits_[0] |= 0x00000008u;
  track_changes_ = value;
}
inline void TrackChangesCommandArchive::set_track_changes(bool value) {
  _internal_set_track_changes(value);
  // @@protoc_insertion_point(field_set:TP.TrackChangesCommandArchive.track_changes)
}

// repeated .TSP.Reference change_session_history = 3;
inline int TrackChangesCommandArchive::_internal_change_session_history_size() const {
  return change_session_history_.size();
}
inline int TrackChangesCommandArchive::change_session_history_size() const {
  return _internal_change_session_history_size();
}
inline ::TSP::Reference* TrackChangesCommandArchive::mutable_change_session_history(int index) {
  // @@protoc_insertion_point(field_mutable:TP.TrackChangesCommandArchive.change_session_history)
  return change_session_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
TrackChangesCommandArchive::mutable_change_session_history() {
  // @@protoc_insertion_point(field_mutable_list:TP.TrackChangesCommandArchive.change_session_history)
  return &change_session_history_;
}
inline const ::TSP::Reference& TrackChangesCommandArchive::_internal_change_session_history(int index) const {
  return change_session_history_.Get(index);
}
inline const ::TSP::Reference& TrackChangesCommandArchive::change_session_history(int index) const {
  // @@protoc_insertion_point(field_get:TP.TrackChangesCommandArchive.change_session_history)
  return _internal_change_session_history(index);
}
inline ::TSP::Reference* TrackChangesCommandArchive::_internal_add_change_session_history() {
  return change_session_history_.Add();
}
inline ::TSP::Reference* TrackChangesCommandArchive::add_change_session_history() {
  // @@protoc_insertion_point(field_add:TP.TrackChangesCommandArchive.change_session_history)
  return _internal_add_change_session_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
TrackChangesCommandArchive::change_session_history() const {
  // @@protoc_insertion_point(field_list:TP.TrackChangesCommandArchive.change_session_history)
  return change_session_history_;
}

// optional bool paused = 4 [deprecated = true];
inline bool TrackChangesCommandArchive::_internal_has_paused() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackChangesCommandArchive::has_paused() const {
  return _internal_has_paused();
}
inline void TrackChangesCommandArchive::clear_paused() {
  paused_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TrackChangesCommandArchive::_internal_paused() const {
  return paused_;
}
inline bool TrackChangesCommandArchive::paused() const {
  // @@protoc_insertion_point(field_get:TP.TrackChangesCommandArchive.paused)
  return _internal_paused();
}
inline void TrackChangesCommandArchive::_internal_set_paused(bool value) {
  _has_bits_[0] |= 0x00000010u;
  paused_ = value;
}
inline void TrackChangesCommandArchive::set_paused(bool value) {
  _internal_set_paused(value);
  // @@protoc_insertion_point(field_set:TP.TrackChangesCommandArchive.paused)
}

// optional .TSP.Reference most_recent_change_session = 5;
inline bool TrackChangesCommandArchive::_internal_has_most_recent_change_session() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || most_recent_change_session_ != nullptr);
  return value;
}
inline bool TrackChangesCommandArchive::has_most_recent_change_session() const {
  return _internal_has_most_recent_change_session();
}
inline const ::TSP::Reference& TrackChangesCommandArchive::_internal_most_recent_change_session() const {
  const ::TSP::Reference* p = most_recent_change_session_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TrackChangesCommandArchive::most_recent_change_session() const {
  // @@protoc_insertion_point(field_get:TP.TrackChangesCommandArchive.most_recent_change_session)
  return _internal_most_recent_change_session();
}
inline void TrackChangesCommandArchive::unsafe_arena_set_allocated_most_recent_change_session(
    ::TSP::Reference* most_recent_change_session) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(most_recent_change_session_);
  }
  most_recent_change_session_ = most_recent_change_session;
  if (most_recent_change_session) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TrackChangesCommandArchive.most_recent_change_session)
}
inline ::TSP::Reference* TrackChangesCommandArchive::release_most_recent_change_session() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = most_recent_change_session_;
  most_recent_change_session_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TrackChangesCommandArchive::unsafe_arena_release_most_recent_change_session() {
  // @@protoc_insertion_point(field_release:TP.TrackChangesCommandArchive.most_recent_change_session)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = most_recent_change_session_;
  most_recent_change_session_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TrackChangesCommandArchive::_internal_mutable_most_recent_change_session() {
  _has_bits_[0] |= 0x00000002u;
  if (most_recent_change_session_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    most_recent_change_session_ = p;
  }
  return most_recent_change_session_;
}
inline ::TSP::Reference* TrackChangesCommandArchive::mutable_most_recent_change_session() {
  // @@protoc_insertion_point(field_mutable:TP.TrackChangesCommandArchive.most_recent_change_session)
  return _internal_mutable_most_recent_change_session();
}
inline void TrackChangesCommandArchive::set_allocated_most_recent_change_session(::TSP::Reference* most_recent_change_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(most_recent_change_session_);
  }
  if (most_recent_change_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(most_recent_change_session)->GetArena();
    if (message_arena != submessage_arena) {
      most_recent_change_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, most_recent_change_session, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  most_recent_change_session_ = most_recent_change_session;
  // @@protoc_insertion_point(field_set_allocated:TP.TrackChangesCommandArchive.most_recent_change_session)
}

// optional bool old_track_changes = 6;
inline bool TrackChangesCommandArchive::_internal_has_old_track_changes() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackChangesCommandArchive::has_old_track_changes() const {
  return _internal_has_old_track_changes();
}
inline void TrackChangesCommandArchive::clear_old_track_changes() {
  old_track_changes_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TrackChangesCommandArchive::_internal_old_track_changes() const {
  return old_track_changes_;
}
inline bool TrackChangesCommandArchive::old_track_changes() const {
  // @@protoc_insertion_point(field_get:TP.TrackChangesCommandArchive.old_track_changes)
  return _internal_old_track_changes();
}
inline void TrackChangesCommandArchive::_internal_set_old_track_changes(bool value) {
  _has_bits_[0] |= 0x00000020u;
  old_track_changes_ = value;
}
inline void TrackChangesCommandArchive::set_old_track_changes(bool value) {
  _internal_set_old_track_changes(value);
  // @@protoc_insertion_point(field_set:TP.TrackChangesCommandArchive.old_track_changes)
}

// repeated .TSP.Reference old_change_session_history = 7;
inline int TrackChangesCommandArchive::_internal_old_change_session_history_size() const {
  return old_change_session_history_.size();
}
inline int TrackChangesCommandArchive::old_change_session_history_size() const {
  return _internal_old_change_session_history_size();
}
inline ::TSP::Reference* TrackChangesCommandArchive::mutable_old_change_session_history(int index) {
  // @@protoc_insertion_point(field_mutable:TP.TrackChangesCommandArchive.old_change_session_history)
  return old_change_session_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
TrackChangesCommandArchive::mutable_old_change_session_history() {
  // @@protoc_insertion_point(field_mutable_list:TP.TrackChangesCommandArchive.old_change_session_history)
  return &old_change_session_history_;
}
inline const ::TSP::Reference& TrackChangesCommandArchive::_internal_old_change_session_history(int index) const {
  return old_change_session_history_.Get(index);
}
inline const ::TSP::Reference& TrackChangesCommandArchive::old_change_session_history(int index) const {
  // @@protoc_insertion_point(field_get:TP.TrackChangesCommandArchive.old_change_session_history)
  return _internal_old_change_session_history(index);
}
inline ::TSP::Reference* TrackChangesCommandArchive::_internal_add_old_change_session_history() {
  return old_change_session_history_.Add();
}
inline ::TSP::Reference* TrackChangesCommandArchive::add_old_change_session_history() {
  // @@protoc_insertion_point(field_add:TP.TrackChangesCommandArchive.old_change_session_history)
  return _internal_add_old_change_session_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
TrackChangesCommandArchive::old_change_session_history() const {
  // @@protoc_insertion_point(field_list:TP.TrackChangesCommandArchive.old_change_session_history)
  return old_change_session_history_;
}

// optional .TSP.Reference old_most_recent_change_session = 8;
inline bool TrackChangesCommandArchive::_internal_has_old_most_recent_change_session() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || old_most_recent_change_session_ != nullptr);
  return value;
}
inline bool TrackChangesCommandArchive::has_old_most_recent_change_session() const {
  return _internal_has_old_most_recent_change_session();
}
inline const ::TSP::Reference& TrackChangesCommandArchive::_internal_old_most_recent_change_session() const {
  const ::TSP::Reference* p = old_most_recent_change_session_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TrackChangesCommandArchive::old_most_recent_change_session() const {
  // @@protoc_insertion_point(field_get:TP.TrackChangesCommandArchive.old_most_recent_change_session)
  return _internal_old_most_recent_change_session();
}
inline void TrackChangesCommandArchive::unsafe_arena_set_allocated_old_most_recent_change_session(
    ::TSP::Reference* old_most_recent_change_session) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_most_recent_change_session_);
  }
  old_most_recent_change_session_ = old_most_recent_change_session;
  if (old_most_recent_change_session) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TrackChangesCommandArchive.old_most_recent_change_session)
}
inline ::TSP::Reference* TrackChangesCommandArchive::release_old_most_recent_change_session() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_most_recent_change_session_;
  old_most_recent_change_session_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TrackChangesCommandArchive::unsafe_arena_release_old_most_recent_change_session() {
  // @@protoc_insertion_point(field_release:TP.TrackChangesCommandArchive.old_most_recent_change_session)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_most_recent_change_session_;
  old_most_recent_change_session_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TrackChangesCommandArchive::_internal_mutable_old_most_recent_change_session() {
  _has_bits_[0] |= 0x00000004u;
  if (old_most_recent_change_session_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    old_most_recent_change_session_ = p;
  }
  return old_most_recent_change_session_;
}
inline ::TSP::Reference* TrackChangesCommandArchive::mutable_old_most_recent_change_session() {
  // @@protoc_insertion_point(field_mutable:TP.TrackChangesCommandArchive.old_most_recent_change_session)
  return _internal_mutable_old_most_recent_change_session();
}
inline void TrackChangesCommandArchive::set_allocated_old_most_recent_change_session(::TSP::Reference* old_most_recent_change_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_most_recent_change_session_);
  }
  if (old_most_recent_change_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_most_recent_change_session)->GetArena();
    if (message_arena != submessage_arena) {
      old_most_recent_change_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_most_recent_change_session, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_most_recent_change_session_ = old_most_recent_change_session;
  // @@protoc_insertion_point(field_set_allocated:TP.TrackChangesCommandArchive.old_most_recent_change_session)
}

// -------------------------------------------------------------------

// PauseChangeTrackingCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool PauseChangeTrackingCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool PauseChangeTrackingCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& PauseChangeTrackingCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& PauseChangeTrackingCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.PauseChangeTrackingCommandArchive.super)
  return _internal_super();
}
inline void PauseChangeTrackingCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PauseChangeTrackingCommandArchive.super)
}
inline ::TSK::CommandArchive* PauseChangeTrackingCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* PauseChangeTrackingCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.PauseChangeTrackingCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* PauseChangeTrackingCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* PauseChangeTrackingCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.PauseChangeTrackingCommandArchive.super)
  return _internal_mutable_super();
}
inline void PauseChangeTrackingCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.PauseChangeTrackingCommandArchive.super)
}

// optional bool paused = 2 [deprecated = true];
inline bool PauseChangeTrackingCommandArchive::_internal_has_paused() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PauseChangeTrackingCommandArchive::has_paused() const {
  return _internal_has_paused();
}
inline void PauseChangeTrackingCommandArchive::clear_paused() {
  paused_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PauseChangeTrackingCommandArchive::_internal_paused() const {
  return paused_;
}
inline bool PauseChangeTrackingCommandArchive::paused() const {
  // @@protoc_insertion_point(field_get:TP.PauseChangeTrackingCommandArchive.paused)
  return _internal_paused();
}
inline void PauseChangeTrackingCommandArchive::_internal_set_paused(bool value) {
  _has_bits_[0] |= 0x00000002u;
  paused_ = value;
}
inline void PauseChangeTrackingCommandArchive::set_paused(bool value) {
  _internal_set_paused(value);
  // @@protoc_insertion_point(field_set:TP.PauseChangeTrackingCommandArchive.paused)
}

// -------------------------------------------------------------------

// SectionGuideCommandArchive

// required .TSD.AbstractGuideCommandArchive super = 1;
inline bool SectionGuideCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool SectionGuideCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::AbstractGuideCommandArchive& SectionGuideCommandArchive::_internal_super() const {
  const ::TSD::AbstractGuideCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::AbstractGuideCommandArchive&>(
      ::TSD::_AbstractGuideCommandArchive_default_instance_);
}
inline const ::TSD::AbstractGuideCommandArchive& SectionGuideCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.SectionGuideCommandArchive.super)
  return _internal_super();
}
inline void SectionGuideCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::AbstractGuideCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionGuideCommandArchive.super)
}
inline ::TSD::AbstractGuideCommandArchive* SectionGuideCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractGuideCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::AbstractGuideCommandArchive* SectionGuideCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.SectionGuideCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractGuideCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::AbstractGuideCommandArchive* SectionGuideCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::AbstractGuideCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::AbstractGuideCommandArchive* SectionGuideCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.SectionGuideCommandArchive.super)
  return _internal_mutable_super();
}
inline void SectionGuideCommandArchive::set_allocated_super(::TSD::AbstractGuideCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionGuideCommandArchive.super)
}

// required .TSP.UUIDPath section_id_path = 2;
inline bool SectionGuideCommandArchive::_internal_has_section_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || section_id_path_ != nullptr);
  return value;
}
inline bool SectionGuideCommandArchive::has_section_id_path() const {
  return _internal_has_section_id_path();
}
inline const ::TSP::UUIDPath& SectionGuideCommandArchive::_internal_section_id_path() const {
  const ::TSP::UUIDPath* p = section_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& SectionGuideCommandArchive::section_id_path() const {
  // @@protoc_insertion_point(field_get:TP.SectionGuideCommandArchive.section_id_path)
  return _internal_section_id_path();
}
inline void SectionGuideCommandArchive::unsafe_arena_set_allocated_section_id_path(
    ::TSP::UUIDPath* section_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_id_path_);
  }
  section_id_path_ = section_id_path;
  if (section_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionGuideCommandArchive.section_id_path)
}
inline ::TSP::UUIDPath* SectionGuideCommandArchive::release_section_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = section_id_path_;
  section_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* SectionGuideCommandArchive::unsafe_arena_release_section_id_path() {
  // @@protoc_insertion_point(field_release:TP.SectionGuideCommandArchive.section_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = section_id_path_;
  section_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* SectionGuideCommandArchive::_internal_mutable_section_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (section_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    section_id_path_ = p;
  }
  return section_id_path_;
}
inline ::TSP::UUIDPath* SectionGuideCommandArchive::mutable_section_id_path() {
  // @@protoc_insertion_point(field_mutable:TP.SectionGuideCommandArchive.section_id_path)
  return _internal_mutable_section_id_path();
}
inline void SectionGuideCommandArchive::set_allocated_section_id_path(::TSP::UUIDPath* section_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_id_path_);
  }
  if (section_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      section_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, section_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  section_id_path_ = section_id_path;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionGuideCommandArchive.section_id_path)
}

// required uint32 page_index = 3;
inline bool SectionGuideCommandArchive::_internal_has_page_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SectionGuideCommandArchive::has_page_index() const {
  return _internal_has_page_index();
}
inline void SectionGuideCommandArchive::clear_page_index() {
  page_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionGuideCommandArchive::_internal_page_index() const {
  return page_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionGuideCommandArchive::page_index() const {
  // @@protoc_insertion_point(field_get:TP.SectionGuideCommandArchive.page_index)
  return _internal_page_index();
}
inline void SectionGuideCommandArchive::_internal_set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  page_index_ = value;
}
inline void SectionGuideCommandArchive::set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_index(value);
  // @@protoc_insertion_point(field_set:TP.SectionGuideCommandArchive.page_index)
}

// -------------------------------------------------------------------

// ReplaceHeaderFooterStorageCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ReplaceHeaderFooterStorageCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ReplaceHeaderFooterStorageCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ReplaceHeaderFooterStorageCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ReplaceHeaderFooterStorageCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.ReplaceHeaderFooterStorageCommandArchive.super)
  return _internal_super();
}
inline void ReplaceHeaderFooterStorageCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ReplaceHeaderFooterStorageCommandArchive.super)
}
inline ::TSK::CommandArchive* ReplaceHeaderFooterStorageCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ReplaceHeaderFooterStorageCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.ReplaceHeaderFooterStorageCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ReplaceHeaderFooterStorageCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ReplaceHeaderFooterStorageCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.ReplaceHeaderFooterStorageCommandArchive.super)
  return _internal_mutable_super();
}
inline void ReplaceHeaderFooterStorageCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.ReplaceHeaderFooterStorageCommandArchive.super)
}

// optional .TSP.UUIDPath header_footer_storage_id_path = 2;
inline bool ReplaceHeaderFooterStorageCommandArchive::_internal_has_header_footer_storage_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_footer_storage_id_path_ != nullptr);
  return value;
}
inline bool ReplaceHeaderFooterStorageCommandArchive::has_header_footer_storage_id_path() const {
  return _internal_has_header_footer_storage_id_path();
}
inline const ::TSP::UUIDPath& ReplaceHeaderFooterStorageCommandArchive::_internal_header_footer_storage_id_path() const {
  const ::TSP::UUIDPath* p = header_footer_storage_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& ReplaceHeaderFooterStorageCommandArchive::header_footer_storage_id_path() const {
  // @@protoc_insertion_point(field_get:TP.ReplaceHeaderFooterStorageCommandArchive.header_footer_storage_id_path)
  return _internal_header_footer_storage_id_path();
}
inline void ReplaceHeaderFooterStorageCommandArchive::unsafe_arena_set_allocated_header_footer_storage_id_path(
    ::TSP::UUIDPath* header_footer_storage_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_footer_storage_id_path_);
  }
  header_footer_storage_id_path_ = header_footer_storage_id_path;
  if (header_footer_storage_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ReplaceHeaderFooterStorageCommandArchive.header_footer_storage_id_path)
}
inline ::TSP::UUIDPath* ReplaceHeaderFooterStorageCommandArchive::release_header_footer_storage_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = header_footer_storage_id_path_;
  header_footer_storage_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* ReplaceHeaderFooterStorageCommandArchive::unsafe_arena_release_header_footer_storage_id_path() {
  // @@protoc_insertion_point(field_release:TP.ReplaceHeaderFooterStorageCommandArchive.header_footer_storage_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = header_footer_storage_id_path_;
  header_footer_storage_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* ReplaceHeaderFooterStorageCommandArchive::_internal_mutable_header_footer_storage_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (header_footer_storage_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    header_footer_storage_id_path_ = p;
  }
  return header_footer_storage_id_path_;
}
inline ::TSP::UUIDPath* ReplaceHeaderFooterStorageCommandArchive::mutable_header_footer_storage_id_path() {
  // @@protoc_insertion_point(field_mutable:TP.ReplaceHeaderFooterStorageCommandArchive.header_footer_storage_id_path)
  return _internal_mutable_header_footer_storage_id_path();
}
inline void ReplaceHeaderFooterStorageCommandArchive::set_allocated_header_footer_storage_id_path(::TSP::UUIDPath* header_footer_storage_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_footer_storage_id_path_);
  }
  if (header_footer_storage_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_footer_storage_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      header_footer_storage_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_footer_storage_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_footer_storage_id_path_ = header_footer_storage_id_path;
  // @@protoc_insertion_point(field_set_allocated:TP.ReplaceHeaderFooterStorageCommandArchive.header_footer_storage_id_path)
}

// optional .TSP.Reference replacement_header_footer_storage = 3;
inline bool ReplaceHeaderFooterStorageCommandArchive::_internal_has_replacement_header_footer_storage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || replacement_header_footer_storage_ != nullptr);
  return value;
}
inline bool ReplaceHeaderFooterStorageCommandArchive::has_replacement_header_footer_storage() const {
  return _internal_has_replacement_header_footer_storage();
}
inline const ::TSP::Reference& ReplaceHeaderFooterStorageCommandArchive::_internal_replacement_header_footer_storage() const {
  const ::TSP::Reference* p = replacement_header_footer_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ReplaceHeaderFooterStorageCommandArchive::replacement_header_footer_storage() const {
  // @@protoc_insertion_point(field_get:TP.ReplaceHeaderFooterStorageCommandArchive.replacement_header_footer_storage)
  return _internal_replacement_header_footer_storage();
}
inline void ReplaceHeaderFooterStorageCommandArchive::unsafe_arena_set_allocated_replacement_header_footer_storage(
    ::TSP::Reference* replacement_header_footer_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_header_footer_storage_);
  }
  replacement_header_footer_storage_ = replacement_header_footer_storage;
  if (replacement_header_footer_storage) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ReplaceHeaderFooterStorageCommandArchive.replacement_header_footer_storage)
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::release_replacement_header_footer_storage() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = replacement_header_footer_storage_;
  replacement_header_footer_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::unsafe_arena_release_replacement_header_footer_storage() {
  // @@protoc_insertion_point(field_release:TP.ReplaceHeaderFooterStorageCommandArchive.replacement_header_footer_storage)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = replacement_header_footer_storage_;
  replacement_header_footer_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::_internal_mutable_replacement_header_footer_storage() {
  _has_bits_[0] |= 0x00000004u;
  if (replacement_header_footer_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    replacement_header_footer_storage_ = p;
  }
  return replacement_header_footer_storage_;
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::mutable_replacement_header_footer_storage() {
  // @@protoc_insertion_point(field_mutable:TP.ReplaceHeaderFooterStorageCommandArchive.replacement_header_footer_storage)
  return _internal_mutable_replacement_header_footer_storage();
}
inline void ReplaceHeaderFooterStorageCommandArchive::set_allocated_replacement_header_footer_storage(::TSP::Reference* replacement_header_footer_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_header_footer_storage_);
  }
  if (replacement_header_footer_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_header_footer_storage)->GetArena();
    if (message_arena != submessage_arena) {
      replacement_header_footer_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacement_header_footer_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  replacement_header_footer_storage_ = replacement_header_footer_storage;
  // @@protoc_insertion_point(field_set_allocated:TP.ReplaceHeaderFooterStorageCommandArchive.replacement_header_footer_storage)
}

// optional .TSP.Reference replacement_header_footer_storage_undo_object = 4;
inline bool ReplaceHeaderFooterStorageCommandArchive::_internal_has_replacement_header_footer_storage_undo_object() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || replacement_header_footer_storage_undo_object_ != nullptr);
  return value;
}
inline bool ReplaceHeaderFooterStorageCommandArchive::has_replacement_header_footer_storage_undo_object() const {
  return _internal_has_replacement_header_footer_storage_undo_object();
}
inline const ::TSP::Reference& ReplaceHeaderFooterStorageCommandArchive::_internal_replacement_header_footer_storage_undo_object() const {
  const ::TSP::Reference* p = replacement_header_footer_storage_undo_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ReplaceHeaderFooterStorageCommandArchive::replacement_header_footer_storage_undo_object() const {
  // @@protoc_insertion_point(field_get:TP.ReplaceHeaderFooterStorageCommandArchive.replacement_header_footer_storage_undo_object)
  return _internal_replacement_header_footer_storage_undo_object();
}
inline void ReplaceHeaderFooterStorageCommandArchive::unsafe_arena_set_allocated_replacement_header_footer_storage_undo_object(
    ::TSP::Reference* replacement_header_footer_storage_undo_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_header_footer_storage_undo_object_);
  }
  replacement_header_footer_storage_undo_object_ = replacement_header_footer_storage_undo_object;
  if (replacement_header_footer_storage_undo_object) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ReplaceHeaderFooterStorageCommandArchive.replacement_header_footer_storage_undo_object)
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::release_replacement_header_footer_storage_undo_object() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = replacement_header_footer_storage_undo_object_;
  replacement_header_footer_storage_undo_object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::unsafe_arena_release_replacement_header_footer_storage_undo_object() {
  // @@protoc_insertion_point(field_release:TP.ReplaceHeaderFooterStorageCommandArchive.replacement_header_footer_storage_undo_object)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = replacement_header_footer_storage_undo_object_;
  replacement_header_footer_storage_undo_object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::_internal_mutable_replacement_header_footer_storage_undo_object() {
  _has_bits_[0] |= 0x00000008u;
  if (replacement_header_footer_storage_undo_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    replacement_header_footer_storage_undo_object_ = p;
  }
  return replacement_header_footer_storage_undo_object_;
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::mutable_replacement_header_footer_storage_undo_object() {
  // @@protoc_insertion_point(field_mutable:TP.ReplaceHeaderFooterStorageCommandArchive.replacement_header_footer_storage_undo_object)
  return _internal_mutable_replacement_header_footer_storage_undo_object();
}
inline void ReplaceHeaderFooterStorageCommandArchive::set_allocated_replacement_header_footer_storage_undo_object(::TSP::Reference* replacement_header_footer_storage_undo_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_header_footer_storage_undo_object_);
  }
  if (replacement_header_footer_storage_undo_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_header_footer_storage_undo_object)->GetArena();
    if (message_arena != submessage_arena) {
      replacement_header_footer_storage_undo_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacement_header_footer_storage_undo_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  replacement_header_footer_storage_undo_object_ = replacement_header_footer_storage_undo_object;
  // @@protoc_insertion_point(field_set_allocated:TP.ReplaceHeaderFooterStorageCommandArchive.replacement_header_footer_storage_undo_object)
}

// optional .TSP.Reference old_header_footer_storage = 5;
inline bool ReplaceHeaderFooterStorageCommandArchive::_internal_has_old_header_footer_storage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || old_header_footer_storage_ != nullptr);
  return value;
}
inline bool ReplaceHeaderFooterStorageCommandArchive::has_old_header_footer_storage() const {
  return _internal_has_old_header_footer_storage();
}
inline const ::TSP::Reference& ReplaceHeaderFooterStorageCommandArchive::_internal_old_header_footer_storage() const {
  const ::TSP::Reference* p = old_header_footer_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ReplaceHeaderFooterStorageCommandArchive::old_header_footer_storage() const {
  // @@protoc_insertion_point(field_get:TP.ReplaceHeaderFooterStorageCommandArchive.old_header_footer_storage)
  return _internal_old_header_footer_storage();
}
inline void ReplaceHeaderFooterStorageCommandArchive::unsafe_arena_set_allocated_old_header_footer_storage(
    ::TSP::Reference* old_header_footer_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_header_footer_storage_);
  }
  old_header_footer_storage_ = old_header_footer_storage;
  if (old_header_footer_storage) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ReplaceHeaderFooterStorageCommandArchive.old_header_footer_storage)
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::release_old_header_footer_storage() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = old_header_footer_storage_;
  old_header_footer_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::unsafe_arena_release_old_header_footer_storage() {
  // @@protoc_insertion_point(field_release:TP.ReplaceHeaderFooterStorageCommandArchive.old_header_footer_storage)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = old_header_footer_storage_;
  old_header_footer_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::_internal_mutable_old_header_footer_storage() {
  _has_bits_[0] |= 0x00000010u;
  if (old_header_footer_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    old_header_footer_storage_ = p;
  }
  return old_header_footer_storage_;
}
inline ::TSP::Reference* ReplaceHeaderFooterStorageCommandArchive::mutable_old_header_footer_storage() {
  // @@protoc_insertion_point(field_mutable:TP.ReplaceHeaderFooterStorageCommandArchive.old_header_footer_storage)
  return _internal_mutable_old_header_footer_storage();
}
inline void ReplaceHeaderFooterStorageCommandArchive::set_allocated_old_header_footer_storage(::TSP::Reference* old_header_footer_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_header_footer_storage_);
  }
  if (old_header_footer_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_header_footer_storage)->GetArena();
    if (message_arena != submessage_arena) {
      old_header_footer_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_header_footer_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  old_header_footer_storage_ = old_header_footer_storage;
  // @@protoc_insertion_point(field_set_allocated:TP.ReplaceHeaderFooterStorageCommandArchive.old_header_footer_storage)
}

// -------------------------------------------------------------------

// PrototypeForUndoChangePageTemplateForSection

// optional .TSP.UUIDPath id_path_for_template_in_document = 1;
inline bool PrototypeForUndoChangePageTemplateForSection::_internal_has_id_path_for_template_in_document() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_path_for_template_in_document_ != nullptr);
  return value;
}
inline bool PrototypeForUndoChangePageTemplateForSection::has_id_path_for_template_in_document() const {
  return _internal_has_id_path_for_template_in_document();
}
inline const ::TSP::UUIDPath& PrototypeForUndoChangePageTemplateForSection::_internal_id_path_for_template_in_document() const {
  const ::TSP::UUIDPath* p = id_path_for_template_in_document_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& PrototypeForUndoChangePageTemplateForSection::id_path_for_template_in_document() const {
  // @@protoc_insertion_point(field_get:TP.PrototypeForUndoChangePageTemplateForSection.id_path_for_template_in_document)
  return _internal_id_path_for_template_in_document();
}
inline void PrototypeForUndoChangePageTemplateForSection::unsafe_arena_set_allocated_id_path_for_template_in_document(
    ::TSP::UUIDPath* id_path_for_template_in_document) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_path_for_template_in_document_);
  }
  id_path_for_template_in_document_ = id_path_for_template_in_document;
  if (id_path_for_template_in_document) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PrototypeForUndoChangePageTemplateForSection.id_path_for_template_in_document)
}
inline ::TSP::UUIDPath* PrototypeForUndoChangePageTemplateForSection::release_id_path_for_template_in_document() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = id_path_for_template_in_document_;
  id_path_for_template_in_document_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* PrototypeForUndoChangePageTemplateForSection::unsafe_arena_release_id_path_for_template_in_document() {
  // @@protoc_insertion_point(field_release:TP.PrototypeForUndoChangePageTemplateForSection.id_path_for_template_in_document)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = id_path_for_template_in_document_;
  id_path_for_template_in_document_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* PrototypeForUndoChangePageTemplateForSection::_internal_mutable_id_path_for_template_in_document() {
  _has_bits_[0] |= 0x00000001u;
  if (id_path_for_template_in_document_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    id_path_for_template_in_document_ = p;
  }
  return id_path_for_template_in_document_;
}
inline ::TSP::UUIDPath* PrototypeForUndoChangePageTemplateForSection::mutable_id_path_for_template_in_document() {
  // @@protoc_insertion_point(field_mutable:TP.PrototypeForUndoChangePageTemplateForSection.id_path_for_template_in_document)
  return _internal_mutable_id_path_for_template_in_document();
}
inline void PrototypeForUndoChangePageTemplateForSection::set_allocated_id_path_for_template_in_document(::TSP::UUIDPath* id_path_for_template_in_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_path_for_template_in_document_);
  }
  if (id_path_for_template_in_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_path_for_template_in_document)->GetArena();
    if (message_arena != submessage_arena) {
      id_path_for_template_in_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_path_for_template_in_document, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_path_for_template_in_document_ = id_path_for_template_in_document;
  // @@protoc_insertion_point(field_set_allocated:TP.PrototypeForUndoChangePageTemplateForSection.id_path_for_template_in_document)
}

// required .TSP.Reference internal_page_template = 2;
inline bool PrototypeForUndoChangePageTemplateForSection::_internal_has_internal_page_template() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || internal_page_template_ != nullptr);
  return value;
}
inline bool PrototypeForUndoChangePageTemplateForSection::has_internal_page_template() const {
  return _internal_has_internal_page_template();
}
inline const ::TSP::Reference& PrototypeForUndoChangePageTemplateForSection::_internal_internal_page_template() const {
  const ::TSP::Reference* p = internal_page_template_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PrototypeForUndoChangePageTemplateForSection::internal_page_template() const {
  // @@protoc_insertion_point(field_get:TP.PrototypeForUndoChangePageTemplateForSection.internal_page_template)
  return _internal_internal_page_template();
}
inline void PrototypeForUndoChangePageTemplateForSection::unsafe_arena_set_allocated_internal_page_template(
    ::TSP::Reference* internal_page_template) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_page_template_);
  }
  internal_page_template_ = internal_page_template;
  if (internal_page_template) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PrototypeForUndoChangePageTemplateForSection.internal_page_template)
}
inline ::TSP::Reference* PrototypeForUndoChangePageTemplateForSection::release_internal_page_template() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = internal_page_template_;
  internal_page_template_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PrototypeForUndoChangePageTemplateForSection::unsafe_arena_release_internal_page_template() {
  // @@protoc_insertion_point(field_release:TP.PrototypeForUndoChangePageTemplateForSection.internal_page_template)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = internal_page_template_;
  internal_page_template_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PrototypeForUndoChangePageTemplateForSection::_internal_mutable_internal_page_template() {
  _has_bits_[0] |= 0x00000002u;
  if (internal_page_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    internal_page_template_ = p;
  }
  return internal_page_template_;
}
inline ::TSP::Reference* PrototypeForUndoChangePageTemplateForSection::mutable_internal_page_template() {
  // @@protoc_insertion_point(field_mutable:TP.PrototypeForUndoChangePageTemplateForSection.internal_page_template)
  return _internal_mutable_internal_page_template();
}
inline void PrototypeForUndoChangePageTemplateForSection::set_allocated_internal_page_template(::TSP::Reference* internal_page_template) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_page_template_);
  }
  if (internal_page_template) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_page_template)->GetArena();
    if (message_arena != submessage_arena) {
      internal_page_template = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_page_template, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  internal_page_template_ = internal_page_template;
  // @@protoc_insertion_point(field_set_allocated:TP.PrototypeForUndoChangePageTemplateForSection.internal_page_template)
}

// -------------------------------------------------------------------

// ChangePageTemplateForSectionCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ChangePageTemplateForSectionCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChangePageTemplateForSectionCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ChangePageTemplateForSectionCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ChangePageTemplateForSectionCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.ChangePageTemplateForSectionCommandArchive.super)
  return _internal_super();
}
inline void ChangePageTemplateForSectionCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangePageTemplateForSectionCommandArchive.super)
}
inline ::TSK::CommandArchive* ChangePageTemplateForSectionCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ChangePageTemplateForSectionCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.ChangePageTemplateForSectionCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ChangePageTemplateForSectionCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ChangePageTemplateForSectionCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.ChangePageTemplateForSectionCommandArchive.super)
  return _internal_mutable_super();
}
inline void ChangePageTemplateForSectionCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangePageTemplateForSectionCommandArchive.super)
}

// required .TSP.UUIDPath section_id_path = 2;
inline bool ChangePageTemplateForSectionCommandArchive::_internal_has_section_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || section_id_path_ != nullptr);
  return value;
}
inline bool ChangePageTemplateForSectionCommandArchive::has_section_id_path() const {
  return _internal_has_section_id_path();
}
inline const ::TSP::UUIDPath& ChangePageTemplateForSectionCommandArchive::_internal_section_id_path() const {
  const ::TSP::UUIDPath* p = section_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& ChangePageTemplateForSectionCommandArchive::section_id_path() const {
  // @@protoc_insertion_point(field_get:TP.ChangePageTemplateForSectionCommandArchive.section_id_path)
  return _internal_section_id_path();
}
inline void ChangePageTemplateForSectionCommandArchive::unsafe_arena_set_allocated_section_id_path(
    ::TSP::UUIDPath* section_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_id_path_);
  }
  section_id_path_ = section_id_path;
  if (section_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangePageTemplateForSectionCommandArchive.section_id_path)
}
inline ::TSP::UUIDPath* ChangePageTemplateForSectionCommandArchive::release_section_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = section_id_path_;
  section_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* ChangePageTemplateForSectionCommandArchive::unsafe_arena_release_section_id_path() {
  // @@protoc_insertion_point(field_release:TP.ChangePageTemplateForSectionCommandArchive.section_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = section_id_path_;
  section_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* ChangePageTemplateForSectionCommandArchive::_internal_mutable_section_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (section_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    section_id_path_ = p;
  }
  return section_id_path_;
}
inline ::TSP::UUIDPath* ChangePageTemplateForSectionCommandArchive::mutable_section_id_path() {
  // @@protoc_insertion_point(field_mutable:TP.ChangePageTemplateForSectionCommandArchive.section_id_path)
  return _internal_mutable_section_id_path();
}
inline void ChangePageTemplateForSectionCommandArchive::set_allocated_section_id_path(::TSP::UUIDPath* section_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_id_path_);
  }
  if (section_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      section_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, section_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  section_id_path_ = section_id_path;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangePageTemplateForSectionCommandArchive.section_id_path)
}

// required .TSP.Reference page_template = 3;
inline bool ChangePageTemplateForSectionCommandArchive::_internal_has_page_template() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || page_template_ != nullptr);
  return value;
}
inline bool ChangePageTemplateForSectionCommandArchive::has_page_template() const {
  return _internal_has_page_template();
}
inline const ::TSP::Reference& ChangePageTemplateForSectionCommandArchive::_internal_page_template() const {
  const ::TSP::Reference* p = page_template_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChangePageTemplateForSectionCommandArchive::page_template() const {
  // @@protoc_insertion_point(field_get:TP.ChangePageTemplateForSectionCommandArchive.page_template)
  return _internal_page_template();
}
inline void ChangePageTemplateForSectionCommandArchive::unsafe_arena_set_allocated_page_template(
    ::TSP::Reference* page_template) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_template_);
  }
  page_template_ = page_template;
  if (page_template) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangePageTemplateForSectionCommandArchive.page_template)
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::release_page_template() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = page_template_;
  page_template_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::unsafe_arena_release_page_template() {
  // @@protoc_insertion_point(field_release:TP.ChangePageTemplateForSectionCommandArchive.page_template)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = page_template_;
  page_template_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::_internal_mutable_page_template() {
  _has_bits_[0] |= 0x00000004u;
  if (page_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    page_template_ = p;
  }
  return page_template_;
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::mutable_page_template() {
  // @@protoc_insertion_point(field_mutable:TP.ChangePageTemplateForSectionCommandArchive.page_template)
  return _internal_mutable_page_template();
}
inline void ChangePageTemplateForSectionCommandArchive::set_allocated_page_template(::TSP::Reference* page_template) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_template_);
  }
  if (page_template) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_template)->GetArena();
    if (message_arena != submessage_arena) {
      page_template = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page_template, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  page_template_ = page_template;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangePageTemplateForSectionCommandArchive.page_template)
}

// optional .TSP.Reference old_page_template = 4;
inline bool ChangePageTemplateForSectionCommandArchive::_internal_has_old_page_template() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_page_template_ != nullptr);
  return value;
}
inline bool ChangePageTemplateForSectionCommandArchive::has_old_page_template() const {
  return _internal_has_old_page_template();
}
inline const ::TSP::Reference& ChangePageTemplateForSectionCommandArchive::_internal_old_page_template() const {
  const ::TSP::Reference* p = old_page_template_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChangePageTemplateForSectionCommandArchive::old_page_template() const {
  // @@protoc_insertion_point(field_get:TP.ChangePageTemplateForSectionCommandArchive.old_page_template)
  return _internal_old_page_template();
}
inline void ChangePageTemplateForSectionCommandArchive::unsafe_arena_set_allocated_old_page_template(
    ::TSP::Reference* old_page_template) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_page_template_);
  }
  old_page_template_ = old_page_template;
  if (old_page_template) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangePageTemplateForSectionCommandArchive.old_page_template)
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::release_old_page_template() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_page_template_;
  old_page_template_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::unsafe_arena_release_old_page_template() {
  // @@protoc_insertion_point(field_release:TP.ChangePageTemplateForSectionCommandArchive.old_page_template)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_page_template_;
  old_page_template_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::_internal_mutable_old_page_template() {
  _has_bits_[0] |= 0x00000008u;
  if (old_page_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    old_page_template_ = p;
  }
  return old_page_template_;
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::mutable_old_page_template() {
  // @@protoc_insertion_point(field_mutable:TP.ChangePageTemplateForSectionCommandArchive.old_page_template)
  return _internal_mutable_old_page_template();
}
inline void ChangePageTemplateForSectionCommandArchive::set_allocated_old_page_template(::TSP::Reference* old_page_template) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_page_template_);
  }
  if (old_page_template) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_page_template)->GetArena();
    if (message_arena != submessage_arena) {
      old_page_template = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_page_template, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_page_template_ = old_page_template;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangePageTemplateForSectionCommandArchive.old_page_template)
}

// required bool is_undo_redo = 5;
inline bool ChangePageTemplateForSectionCommandArchive::_internal_has_is_undo_redo() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChangePageTemplateForSectionCommandArchive::has_is_undo_redo() const {
  return _internal_has_is_undo_redo();
}
inline void ChangePageTemplateForSectionCommandArchive::clear_is_undo_redo() {
  is_undo_redo_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ChangePageTemplateForSectionCommandArchive::_internal_is_undo_redo() const {
  return is_undo_redo_;
}
inline bool ChangePageTemplateForSectionCommandArchive::is_undo_redo() const {
  // @@protoc_insertion_point(field_get:TP.ChangePageTemplateForSectionCommandArchive.is_undo_redo)
  return _internal_is_undo_redo();
}
inline void ChangePageTemplateForSectionCommandArchive::_internal_set_is_undo_redo(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_undo_redo_ = value;
}
inline void ChangePageTemplateForSectionCommandArchive::set_is_undo_redo(bool value) {
  _internal_set_is_undo_redo(value);
  // @@protoc_insertion_point(field_set:TP.ChangePageTemplateForSectionCommandArchive.is_undo_redo)
}

// optional .TSP.Reference target_prototype = 6;
inline bool ChangePageTemplateForSectionCommandArchive::_internal_has_target_prototype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || target_prototype_ != nullptr);
  return value;
}
inline bool ChangePageTemplateForSectionCommandArchive::has_target_prototype() const {
  return _internal_has_target_prototype();
}
inline const ::TSP::Reference& ChangePageTemplateForSectionCommandArchive::_internal_target_prototype() const {
  const ::TSP::Reference* p = target_prototype_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChangePageTemplateForSectionCommandArchive::target_prototype() const {
  // @@protoc_insertion_point(field_get:TP.ChangePageTemplateForSectionCommandArchive.target_prototype)
  return _internal_target_prototype();
}
inline void ChangePageTemplateForSectionCommandArchive::unsafe_arena_set_allocated_target_prototype(
    ::TSP::Reference* target_prototype) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_prototype_);
  }
  target_prototype_ = target_prototype;
  if (target_prototype) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ChangePageTemplateForSectionCommandArchive.target_prototype)
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::release_target_prototype() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = target_prototype_;
  target_prototype_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::unsafe_arena_release_target_prototype() {
  // @@protoc_insertion_point(field_release:TP.ChangePageTemplateForSectionCommandArchive.target_prototype)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = target_prototype_;
  target_prototype_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::_internal_mutable_target_prototype() {
  _has_bits_[0] |= 0x00000010u;
  if (target_prototype_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    target_prototype_ = p;
  }
  return target_prototype_;
}
inline ::TSP::Reference* ChangePageTemplateForSectionCommandArchive::mutable_target_prototype() {
  // @@protoc_insertion_point(field_mutable:TP.ChangePageTemplateForSectionCommandArchive.target_prototype)
  return _internal_mutable_target_prototype();
}
inline void ChangePageTemplateForSectionCommandArchive::set_allocated_target_prototype(::TSP::Reference* target_prototype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_prototype_);
  }
  if (target_prototype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_prototype)->GetArena();
    if (message_arena != submessage_arena) {
      target_prototype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_prototype, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  target_prototype_ = target_prototype;
  // @@protoc_insertion_point(field_set_allocated:TP.ChangePageTemplateForSectionCommandArchive.target_prototype)
}

// -------------------------------------------------------------------

// AllFootnoteSelectionTransformerArchive

// required .TSP.Reference all_footnote_selection = 1;
inline bool AllFootnoteSelectionTransformerArchive::_internal_has_all_footnote_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || all_footnote_selection_ != nullptr);
  return value;
}
inline bool AllFootnoteSelectionTransformerArchive::has_all_footnote_selection() const {
  return _internal_has_all_footnote_selection();
}
inline const ::TSP::Reference& AllFootnoteSelectionTransformerArchive::_internal_all_footnote_selection() const {
  const ::TSP::Reference* p = all_footnote_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& AllFootnoteSelectionTransformerArchive::all_footnote_selection() const {
  // @@protoc_insertion_point(field_get:TP.AllFootnoteSelectionTransformerArchive.all_footnote_selection)
  return _internal_all_footnote_selection();
}
inline void AllFootnoteSelectionTransformerArchive::unsafe_arena_set_allocated_all_footnote_selection(
    ::TSP::Reference* all_footnote_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(all_footnote_selection_);
  }
  all_footnote_selection_ = all_footnote_selection;
  if (all_footnote_selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.AllFootnoteSelectionTransformerArchive.all_footnote_selection)
}
inline ::TSP::Reference* AllFootnoteSelectionTransformerArchive::release_all_footnote_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = all_footnote_selection_;
  all_footnote_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* AllFootnoteSelectionTransformerArchive::unsafe_arena_release_all_footnote_selection() {
  // @@protoc_insertion_point(field_release:TP.AllFootnoteSelectionTransformerArchive.all_footnote_selection)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = all_footnote_selection_;
  all_footnote_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* AllFootnoteSelectionTransformerArchive::_internal_mutable_all_footnote_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (all_footnote_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    all_footnote_selection_ = p;
  }
  return all_footnote_selection_;
}
inline ::TSP::Reference* AllFootnoteSelectionTransformerArchive::mutable_all_footnote_selection() {
  // @@protoc_insertion_point(field_mutable:TP.AllFootnoteSelectionTransformerArchive.all_footnote_selection)
  return _internal_mutable_all_footnote_selection();
}
inline void AllFootnoteSelectionTransformerArchive::set_allocated_all_footnote_selection(::TSP::Reference* all_footnote_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(all_footnote_selection_);
  }
  if (all_footnote_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(all_footnote_selection)->GetArena();
    if (message_arena != submessage_arena) {
      all_footnote_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_footnote_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  all_footnote_selection_ = all_footnote_selection;
  // @@protoc_insertion_point(field_set_allocated:TP.AllFootnoteSelectionTransformerArchive.all_footnote_selection)
}

// -------------------------------------------------------------------

// DocumentSelectionTransformerArchive

// required .TSP.Reference document_selection = 1;
inline bool DocumentSelectionTransformerArchive::_internal_has_document_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || document_selection_ != nullptr);
  return value;
}
inline bool DocumentSelectionTransformerArchive::has_document_selection() const {
  return _internal_has_document_selection();
}
inline const ::TSP::Reference& DocumentSelectionTransformerArchive::_internal_document_selection() const {
  const ::TSP::Reference* p = document_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSelectionTransformerArchive::document_selection() const {
  // @@protoc_insertion_point(field_get:TP.DocumentSelectionTransformerArchive.document_selection)
  return _internal_document_selection();
}
inline void DocumentSelectionTransformerArchive::unsafe_arena_set_allocated_document_selection(
    ::TSP::Reference* document_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_selection_);
  }
  document_selection_ = document_selection;
  if (document_selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentSelectionTransformerArchive.document_selection)
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::release_document_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = document_selection_;
  document_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::unsafe_arena_release_document_selection() {
  // @@protoc_insertion_point(field_release:TP.DocumentSelectionTransformerArchive.document_selection)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = document_selection_;
  document_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::_internal_mutable_document_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (document_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    document_selection_ = p;
  }
  return document_selection_;
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::mutable_document_selection() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentSelectionTransformerArchive.document_selection)
  return _internal_mutable_document_selection();
}
inline void DocumentSelectionTransformerArchive::set_allocated_document_selection(::TSP::Reference* document_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_selection_);
  }
  if (document_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_selection)->GetArena();
    if (message_arena != submessage_arena) {
      document_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  document_selection_ = document_selection;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentSelectionTransformerArchive.document_selection)
}

// required .TSP.UUIDPath storage_uuid_path = 2;
inline bool DocumentSelectionTransformerArchive::_internal_has_storage_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_uuid_path_ != nullptr);
  return value;
}
inline bool DocumentSelectionTransformerArchive::has_storage_uuid_path() const {
  return _internal_has_storage_uuid_path();
}
inline const ::TSP::UUIDPath& DocumentSelectionTransformerArchive::_internal_storage_uuid_path() const {
  const ::TSP::UUIDPath* p = storage_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& DocumentSelectionTransformerArchive::storage_uuid_path() const {
  // @@protoc_insertion_point(field_get:TP.DocumentSelectionTransformerArchive.storage_uuid_path)
  return _internal_storage_uuid_path();
}
inline void DocumentSelectionTransformerArchive::unsafe_arena_set_allocated_storage_uuid_path(
    ::TSP::UUIDPath* storage_uuid_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  storage_uuid_path_ = storage_uuid_path;
  if (storage_uuid_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentSelectionTransformerArchive.storage_uuid_path)
}
inline ::TSP::UUIDPath* DocumentSelectionTransformerArchive::release_storage_uuid_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* DocumentSelectionTransformerArchive::unsafe_arena_release_storage_uuid_path() {
  // @@protoc_insertion_point(field_release:TP.DocumentSelectionTransformerArchive.storage_uuid_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* DocumentSelectionTransformerArchive::_internal_mutable_storage_uuid_path() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    storage_uuid_path_ = p;
  }
  return storage_uuid_path_;
}
inline ::TSP::UUIDPath* DocumentSelectionTransformerArchive::mutable_storage_uuid_path() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentSelectionTransformerArchive.storage_uuid_path)
  return _internal_mutable_storage_uuid_path();
}
inline void DocumentSelectionTransformerArchive::set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  if (storage_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path)->GetArena();
    if (message_arena != submessage_arena) {
      storage_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_uuid_path_ = storage_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentSelectionTransformerArchive.storage_uuid_path)
}

// -------------------------------------------------------------------

// CanvasSelectionTransformerArchive

// required .TSWP.SelectionTransformerArchive super = 1;
inline bool CanvasSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CanvasSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::SelectionTransformerArchive& CanvasSelectionTransformerArchive::_internal_super() const {
  const ::TSWP::SelectionTransformerArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::SelectionTransformerArchive&>(
      ::TSWP::_SelectionTransformerArchive_default_instance_);
}
inline const ::TSWP::SelectionTransformerArchive& CanvasSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionTransformerArchive.super)
  return _internal_super();
}
inline void CanvasSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TSWP::SelectionTransformerArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.CanvasSelectionTransformerArchive.super)
}
inline ::TSWP::SelectionTransformerArchive* CanvasSelectionTransformerArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::SelectionTransformerArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::SelectionTransformerArchive* CanvasSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.CanvasSelectionTransformerArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::SelectionTransformerArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::SelectionTransformerArchive* CanvasSelectionTransformerArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::SelectionTransformerArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::SelectionTransformerArchive* CanvasSelectionTransformerArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionTransformerArchive.super)
  return _internal_mutable_super();
}
inline void CanvasSelectionTransformerArchive::set_allocated_super(::TSWP::SelectionTransformerArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.CanvasSelectionTransformerArchive.super)
}

// required .TSD.InfoCollectionSelectionTransformerHelperArchive infos_collection_helper = 2;
inline bool CanvasSelectionTransformerArchive::_internal_has_infos_collection_helper() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || infos_collection_helper_ != nullptr);
  return value;
}
inline bool CanvasSelectionTransformerArchive::has_infos_collection_helper() const {
  return _internal_has_infos_collection_helper();
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::_internal_infos_collection_helper() const {
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive* p = infos_collection_helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCollectionSelectionTransformerHelperArchive&>(
      ::TSD::_InfoCollectionSelectionTransformerHelperArchive_default_instance_);
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::infos_collection_helper() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionTransformerArchive.infos_collection_helper)
  return _internal_infos_collection_helper();
}
inline void CanvasSelectionTransformerArchive::unsafe_arena_set_allocated_infos_collection_helper(
    ::TSD::InfoCollectionSelectionTransformerHelperArchive* infos_collection_helper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(infos_collection_helper_);
  }
  infos_collection_helper_ = infos_collection_helper;
  if (infos_collection_helper) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.CanvasSelectionTransformerArchive.infos_collection_helper)
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::release_infos_collection_helper() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = infos_collection_helper_;
  infos_collection_helper_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::unsafe_arena_release_infos_collection_helper() {
  // @@protoc_insertion_point(field_release:TP.CanvasSelectionTransformerArchive.infos_collection_helper)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = infos_collection_helper_;
  infos_collection_helper_ = nullptr;
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::_internal_mutable_infos_collection_helper() {
  _has_bits_[0] |= 0x00000002u;
  if (infos_collection_helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCollectionSelectionTransformerHelperArchive>(GetArena());
    infos_collection_helper_ = p;
  }
  return infos_collection_helper_;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::mutable_infos_collection_helper() {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionTransformerArchive.infos_collection_helper)
  return _internal_mutable_infos_collection_helper();
}
inline void CanvasSelectionTransformerArchive::set_allocated_infos_collection_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* infos_collection_helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(infos_collection_helper_);
  }
  if (infos_collection_helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(infos_collection_helper)->GetArena();
    if (message_arena != submessage_arena) {
      infos_collection_helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, infos_collection_helper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  infos_collection_helper_ = infos_collection_helper;
  // @@protoc_insertion_point(field_set_allocated:TP.CanvasSelectionTransformerArchive.infos_collection_helper)
}

// required .TSD.InfoCollectionSelectionTransformerHelperArchive excluded_infos_collection_helper = 3;
inline bool CanvasSelectionTransformerArchive::_internal_has_excluded_infos_collection_helper() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || excluded_infos_collection_helper_ != nullptr);
  return value;
}
inline bool CanvasSelectionTransformerArchive::has_excluded_infos_collection_helper() const {
  return _internal_has_excluded_infos_collection_helper();
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::_internal_excluded_infos_collection_helper() const {
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive* p = excluded_infos_collection_helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCollectionSelectionTransformerHelperArchive&>(
      ::TSD::_InfoCollectionSelectionTransformerHelperArchive_default_instance_);
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::excluded_infos_collection_helper() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionTransformerArchive.excluded_infos_collection_helper)
  return _internal_excluded_infos_collection_helper();
}
inline void CanvasSelectionTransformerArchive::unsafe_arena_set_allocated_excluded_infos_collection_helper(
    ::TSD::InfoCollectionSelectionTransformerHelperArchive* excluded_infos_collection_helper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(excluded_infos_collection_helper_);
  }
  excluded_infos_collection_helper_ = excluded_infos_collection_helper;
  if (excluded_infos_collection_helper) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.CanvasSelectionTransformerArchive.excluded_infos_collection_helper)
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::release_excluded_infos_collection_helper() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = excluded_infos_collection_helper_;
  excluded_infos_collection_helper_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::unsafe_arena_release_excluded_infos_collection_helper() {
  // @@protoc_insertion_point(field_release:TP.CanvasSelectionTransformerArchive.excluded_infos_collection_helper)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = excluded_infos_collection_helper_;
  excluded_infos_collection_helper_ = nullptr;
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::_internal_mutable_excluded_infos_collection_helper() {
  _has_bits_[0] |= 0x00000004u;
  if (excluded_infos_collection_helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCollectionSelectionTransformerHelperArchive>(GetArena());
    excluded_infos_collection_helper_ = p;
  }
  return excluded_infos_collection_helper_;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::mutable_excluded_infos_collection_helper() {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionTransformerArchive.excluded_infos_collection_helper)
  return _internal_mutable_excluded_infos_collection_helper();
}
inline void CanvasSelectionTransformerArchive::set_allocated_excluded_infos_collection_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* excluded_infos_collection_helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(excluded_infos_collection_helper_);
  }
  if (excluded_infos_collection_helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(excluded_infos_collection_helper)->GetArena();
    if (message_arena != submessage_arena) {
      excluded_infos_collection_helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, excluded_infos_collection_helper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  excluded_infos_collection_helper_ = excluded_infos_collection_helper;
  // @@protoc_insertion_point(field_set_allocated:TP.CanvasSelectionTransformerArchive.excluded_infos_collection_helper)
}

// required .TSD.InfoCollectionSelectionTransformerHelperArchive additional_infos_collection_helper = 4;
inline bool CanvasSelectionTransformerArchive::_internal_has_additional_infos_collection_helper() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || additional_infos_collection_helper_ != nullptr);
  return value;
}
inline bool CanvasSelectionTransformerArchive::has_additional_infos_collection_helper() const {
  return _internal_has_additional_infos_collection_helper();
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::_internal_additional_infos_collection_helper() const {
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive* p = additional_infos_collection_helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCollectionSelectionTransformerHelperArchive&>(
      ::TSD::_InfoCollectionSelectionTransformerHelperArchive_default_instance_);
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::additional_infos_collection_helper() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionTransformerArchive.additional_infos_collection_helper)
  return _internal_additional_infos_collection_helper();
}
inline void CanvasSelectionTransformerArchive::unsafe_arena_set_allocated_additional_infos_collection_helper(
    ::TSD::InfoCollectionSelectionTransformerHelperArchive* additional_infos_collection_helper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(additional_infos_collection_helper_);
  }
  additional_infos_collection_helper_ = additional_infos_collection_helper;
  if (additional_infos_collection_helper) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.CanvasSelectionTransformerArchive.additional_infos_collection_helper)
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::release_additional_infos_collection_helper() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = additional_infos_collection_helper_;
  additional_infos_collection_helper_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::unsafe_arena_release_additional_infos_collection_helper() {
  // @@protoc_insertion_point(field_release:TP.CanvasSelectionTransformerArchive.additional_infos_collection_helper)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = additional_infos_collection_helper_;
  additional_infos_collection_helper_ = nullptr;
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::_internal_mutable_additional_infos_collection_helper() {
  _has_bits_[0] |= 0x00000008u;
  if (additional_infos_collection_helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCollectionSelectionTransformerHelperArchive>(GetArena());
    additional_infos_collection_helper_ = p;
  }
  return additional_infos_collection_helper_;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::mutable_additional_infos_collection_helper() {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionTransformerArchive.additional_infos_collection_helper)
  return _internal_mutable_additional_infos_collection_helper();
}
inline void CanvasSelectionTransformerArchive::set_allocated_additional_infos_collection_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* additional_infos_collection_helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(additional_infos_collection_helper_);
  }
  if (additional_infos_collection_helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(additional_infos_collection_helper)->GetArena();
    if (message_arena != submessage_arena) {
      additional_infos_collection_helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, additional_infos_collection_helper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  additional_infos_collection_helper_ = additional_infos_collection_helper;
  // @@protoc_insertion_point(field_set_allocated:TP.CanvasSelectionTransformerArchive.additional_infos_collection_helper)
}

// optional .TSP.UUIDPath header_or_footnote_storage_uuid_path = 5;
inline bool CanvasSelectionTransformerArchive::_internal_has_header_or_footnote_storage_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || header_or_footnote_storage_uuid_path_ != nullptr);
  return value;
}
inline bool CanvasSelectionTransformerArchive::has_header_or_footnote_storage_uuid_path() const {
  return _internal_has_header_or_footnote_storage_uuid_path();
}
inline const ::TSP::UUIDPath& CanvasSelectionTransformerArchive::_internal_header_or_footnote_storage_uuid_path() const {
  const ::TSP::UUIDPath* p = header_or_footnote_storage_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& CanvasSelectionTransformerArchive::header_or_footnote_storage_uuid_path() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionTransformerArchive.header_or_footnote_storage_uuid_path)
  return _internal_header_or_footnote_storage_uuid_path();
}
inline void CanvasSelectionTransformerArchive::unsafe_arena_set_allocated_header_or_footnote_storage_uuid_path(
    ::TSP::UUIDPath* header_or_footnote_storage_uuid_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_or_footnote_storage_uuid_path_);
  }
  header_or_footnote_storage_uuid_path_ = header_or_footnote_storage_uuid_path;
  if (header_or_footnote_storage_uuid_path) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.CanvasSelectionTransformerArchive.header_or_footnote_storage_uuid_path)
}
inline ::TSP::UUIDPath* CanvasSelectionTransformerArchive::release_header_or_footnote_storage_uuid_path() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUIDPath* temp = header_or_footnote_storage_uuid_path_;
  header_or_footnote_storage_uuid_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* CanvasSelectionTransformerArchive::unsafe_arena_release_header_or_footnote_storage_uuid_path() {
  // @@protoc_insertion_point(field_release:TP.CanvasSelectionTransformerArchive.header_or_footnote_storage_uuid_path)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUIDPath* temp = header_or_footnote_storage_uuid_path_;
  header_or_footnote_storage_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* CanvasSelectionTransformerArchive::_internal_mutable_header_or_footnote_storage_uuid_path() {
  _has_bits_[0] |= 0x00000010u;
  if (header_or_footnote_storage_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    header_or_footnote_storage_uuid_path_ = p;
  }
  return header_or_footnote_storage_uuid_path_;
}
inline ::TSP::UUIDPath* CanvasSelectionTransformerArchive::mutable_header_or_footnote_storage_uuid_path() {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionTransformerArchive.header_or_footnote_storage_uuid_path)
  return _internal_mutable_header_or_footnote_storage_uuid_path();
}
inline void CanvasSelectionTransformerArchive::set_allocated_header_or_footnote_storage_uuid_path(::TSP::UUIDPath* header_or_footnote_storage_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_or_footnote_storage_uuid_path_);
  }
  if (header_or_footnote_storage_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_or_footnote_storage_uuid_path)->GetArena();
    if (message_arena != submessage_arena) {
      header_or_footnote_storage_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_or_footnote_storage_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  header_or_footnote_storage_uuid_path_ = header_or_footnote_storage_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TP.CanvasSelectionTransformerArchive.header_or_footnote_storage_uuid_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TP

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TP::ChangeSectionMarginsCommandArchive_SectionMargin> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::ChangeSectionMarginsCommandArchive_SectionMargin>() {
  return ::TP::ChangeSectionMarginsCommandArchive_SectionMargin_descriptor();
}
template <> struct is_proto_enum< ::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat>() {
  return ::TP::ChangeFootnoteFormatCommandArchive_FootnoteFormat_descriptor();
}
template <> struct is_proto_enum< ::TP::ChangeFootnoteKindCommandArchive_FootnoteKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::ChangeFootnoteKindCommandArchive_FootnoteKind>() {
  return ::TP::ChangeFootnoteKindCommandArchive_FootnoteKind_descriptor();
}
template <> struct is_proto_enum< ::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering>() {
  return ::TP::ChangeFootnoteNumberingCommandArchive_FootnoteNumbering_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TPCommandArchives_2eproto
