// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TPArchives.proto

#include "TPArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TP {
constexpr DocumentArchive::DocumentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : citation_records_()
  , toc_styles_()
  , change_sessions_()
  , page_templates_()
  , printer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , paper_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stylesheet_(nullptr)
  , floating_drawables_(nullptr)
  , body_storage_(nullptr)
  , section_(nullptr)
  , theme_(nullptr)
  , settings_(nullptr)
  , deprecated_layout_state_(nullptr)
  , deprecated_view_state_(nullptr)
  , super_(nullptr)
  , most_recent_change_session_(nullptr)
  , drawables_zorder_(nullptr)
  , tables_custom_format_list_(nullptr)
  , equation_environment_(nullptr)
  , flow_info_container_(nullptr)
  , page_width_(0)
  , page_height_(0)
  , left_margin_(0)
  , right_margin_(0)
  , top_margin_(0)
  , bottom_margin_(0)
  , header_margin_(0)
  , uses_single_header_footer_(false)
  , lays_out_body_vertically_(false)
  , change_tracking_enabled_(false)
  , show_in_bookmarks_list_paragraph_styles_property_initialized_(false)
  , footer_margin_(0)
  , page_scale_(0)
  , orientation_(0u)
  , should_use_anchored_drawable_wrap_slop_(false){}
struct DocumentArchiveDefaultTypeInternal {
  constexpr DocumentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentArchiveDefaultTypeInternal() {}
  union {
    DocumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
constexpr ThemeArchive::ThemeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ThemeArchiveDefaultTypeInternal {
  constexpr ThemeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThemeArchiveDefaultTypeInternal() {}
  union {
    ThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
constexpr SettingsArchive::SettingsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : decimal_tab_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hyphenation_language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creation_locale_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_locale_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , orig_template_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creation_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bibliography_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , placeholder_authoring_(false)
  , hyphenation_(false)
  , use_ligatures_(false)
  , toc_links_enabled_(false)
  , ct_bubbles_visibility_(0)
  , footnote_kind_(0)

  , document_is_rtl_(false)
  , facing_pages_(false)
  , section_authoring_(false)
  , footnote_format_(0)

  , footnote_numbering_(0)

  , footnote_gap_(0)
  , show_ct_deletions_(true)
  , change_bars_visible_(true)
  , format_changes_visible_(true)
  , annotations_visible_(true)
  , body_(true)
  , headers_(true)
  , footers_(true)
  , preview_(true)
  , copy_movies_(true)
  , copy_assets_(true)
  , links_enabled_(true)
  , show_ct_markup_(true){}
struct SettingsArchiveDefaultTypeInternal {
  constexpr SettingsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SettingsArchiveDefaultTypeInternal() {}
  union {
    SettingsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SettingsArchiveDefaultTypeInternal _SettingsArchive_default_instance_;
constexpr PlaceholderArchive::PlaceholderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct PlaceholderArchiveDefaultTypeInternal {
  constexpr PlaceholderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceholderArchiveDefaultTypeInternal() {}
  union {
    PlaceholderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
constexpr DrawableTagPairsArchive_DrawableTagPair::DrawableTagPairsArchive_DrawableTagPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , drawable_(nullptr){}
struct DrawableTagPairsArchive_DrawableTagPairDefaultTypeInternal {
  constexpr DrawableTagPairsArchive_DrawableTagPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableTagPairsArchive_DrawableTagPairDefaultTypeInternal() {}
  union {
    DrawableTagPairsArchive_DrawableTagPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableTagPairsArchive_DrawableTagPairDefaultTypeInternal _DrawableTagPairsArchive_DrawableTagPair_default_instance_;
constexpr DrawableTagPairsArchive::DrawableTagPairsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawable_tag_pairs_(){}
struct DrawableTagPairsArchiveDefaultTypeInternal {
  constexpr DrawableTagPairsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableTagPairsArchiveDefaultTypeInternal() {}
  union {
    DrawableTagPairsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableTagPairsArchiveDefaultTypeInternal _DrawableTagPairsArchive_default_instance_;
constexpr FloatingDrawablesArchive_DrawableEntry::FloatingDrawablesArchive_DrawableEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawable_(nullptr){}
struct FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal {
  constexpr FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal() {}
  union {
    FloatingDrawablesArchive_DrawableEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal _FloatingDrawablesArchive_DrawableEntry_default_instance_;
constexpr FloatingDrawablesArchive_PageGroup::FloatingDrawablesArchive_PageGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : background_drawables_()
  , foreground_drawables_()
  , drawables_()
  , page_index_(0u){}
struct FloatingDrawablesArchive_PageGroupDefaultTypeInternal {
  constexpr FloatingDrawablesArchive_PageGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatingDrawablesArchive_PageGroupDefaultTypeInternal() {}
  union {
    FloatingDrawablesArchive_PageGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatingDrawablesArchive_PageGroupDefaultTypeInternal _FloatingDrawablesArchive_PageGroup_default_instance_;
constexpr FloatingDrawablesArchive::FloatingDrawablesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_groups_()
  , drawable_tag_pairs_(nullptr){}
struct FloatingDrawablesArchiveDefaultTypeInternal {
  constexpr FloatingDrawablesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatingDrawablesArchiveDefaultTypeInternal() {}
  union {
    FloatingDrawablesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatingDrawablesArchiveDefaultTypeInternal _FloatingDrawablesArchive_default_instance_;
constexpr DrawablesZOrderArchive::DrawablesZOrderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawables_(){}
struct DrawablesZOrderArchiveDefaultTypeInternal {
  constexpr DrawablesZOrderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawablesZOrderArchiveDefaultTypeInternal() {}
  union {
    DrawablesZOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawablesZOrderArchiveDefaultTypeInternal _DrawablesZOrderArchive_default_instance_;
constexpr PageMasterArchive::PageMasterArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_()
  , footers_()
  , master_drawables_()
  , page_template_uuidpath_(nullptr){}
struct PageMasterArchiveDefaultTypeInternal {
  constexpr PageMasterArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PageMasterArchiveDefaultTypeInternal() {}
  union {
    PageMasterArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PageMasterArchiveDefaultTypeInternal _PageMasterArchive_default_instance_;
constexpr PageTemplateArchive_TagDrawablePair::PageTemplateArchive_TagDrawablePair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , drawable_(nullptr)
  , z_index_(0u){}
struct PageTemplateArchive_TagDrawablePairDefaultTypeInternal {
  constexpr PageTemplateArchive_TagDrawablePairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PageTemplateArchive_TagDrawablePairDefaultTypeInternal() {}
  union {
    PageTemplateArchive_TagDrawablePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PageTemplateArchive_TagDrawablePairDefaultTypeInternal _PageTemplateArchive_TagDrawablePair_default_instance_;
constexpr PageTemplateArchive::PageTemplateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : master_drawables_()
  , placeholder_drawables_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , background_fill_(nullptr)
  , guide_storage_(nullptr)
  , headers_footers_match_previous_page_(false)
  , hide_headers_footers_(false){}
struct PageTemplateArchiveDefaultTypeInternal {
  constexpr PageTemplateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PageTemplateArchiveDefaultTypeInternal() {}
  union {
    PageTemplateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PageTemplateArchiveDefaultTypeInternal _PageTemplateArchive_default_instance_;
constexpr SectionArchive::SectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obsolete_headers_()
  , obsolete_footers_()
  , obsolete_master_drawables_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , first_page_master_(nullptr)
  , even_page_master_(nullptr)
  , odd_page_master_(nullptr)
  , user_defined_guide_storage_(nullptr)
  , background_fill_(nullptr)
  , section_hyperlink_uuid_(nullptr)
  , obsolete_left_margin_(0)
  , obsolete_right_margin_(0)
  , obsolete_top_margin_(0)
  , obsolete_bottom_margin_(0)
  , obsolete_shows_header_(false)
  , obsolete_shows_footer_(false)
  , obsolete_landscape_mode_(false)
  , inherit_previous_header_footer_(false)
  , obsolete_header_padding_(0)
  , obsolete_footer_padding_(0)
  , obsolete_paper_width_(0)
  , obsolete_paper_height_(0)
  , obsolete_header_margin_(0)
  , obsolete_footer_margin_(0)
  , section_start_kind_(0u)
  , section_page_number_kind_(0u)
  , page_master_first_page_different_(false)
  , page_master_even_odd_pages_different_(false)
  , page_master_first_page_hides_header_footer_(false)
  , section_page_number_start_(0u){}
struct SectionArchiveDefaultTypeInternal {
  constexpr SectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectionArchiveDefaultTypeInternal() {}
  union {
    SectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectionArchiveDefaultTypeInternal _SectionArchive_default_instance_;
constexpr DoublePoint::DoublePoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct DoublePointDefaultTypeInternal {
  constexpr DoublePointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoublePointDefaultTypeInternal() {}
  union {
    DoublePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoublePointDefaultTypeInternal _DoublePoint_default_instance_;
constexpr DoubleSize::DoubleSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0)
  , height_(0){}
struct DoubleSizeDefaultTypeInternal {
  constexpr DoubleSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoubleSizeDefaultTypeInternal() {}
  union {
    DoubleSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoubleSizeDefaultTypeInternal _DoubleSize_default_instance_;
constexpr AnchorPosArchive::AnchorPosArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachment_(nullptr)
  , position_(nullptr)
  , drawable_uuid_path_(nullptr)
  , double_position_(nullptr){}
struct AnchorPosArchiveDefaultTypeInternal {
  constexpr AnchorPosArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnchorPosArchiveDefaultTypeInternal() {}
  union {
    AnchorPosArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnchorPosArchiveDefaultTypeInternal _AnchorPosArchive_default_instance_;
constexpr TargetHintArchive::TargetHintArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frame_origin_(nullptr)
  , frame_size_(nullptr)
  , range_(nullptr)
  , anchored_range_(nullptr)
  , double_origin_(nullptr)
  , double_size_(nullptr)
  , next_widow_pulls_down_from_char_index_(0u)
  , column_count_(0u)
  , line_fragment_count_(0u)
  , end_of_layout_(false)
  , last_line_is_empty_and_has_list_label_(false)
  , text_is_vertical_(false)
  , terminated_by_break_(false){}
struct TargetHintArchiveDefaultTypeInternal {
  constexpr TargetHintArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TargetHintArchiveDefaultTypeInternal() {}
  union {
    TargetHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TargetHintArchiveDefaultTypeInternal _TargetHintArchive_default_instance_;
constexpr PageHintArchive::PageHintArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_hints_()
  , anchored_attachments_map_()
  , child_hints_()
  , partitioned_attachment_uuids_()
  , text_flows_()
  , flow_hints_()
  , flow_topic_numbers_()
  , footnote_auto_number_range_(nullptr)
  , footnote_layout_range_(nullptr)
  , first_child_hint_(nullptr)
  , last_child_hint_(nullptr)
  , topic_numbers_(nullptr)
  , page_kind_(0)

  , version_number_(0u)
  , platform_id_(0u)
  , page_side_(0)

  , page_column_(0u)
  , page_row_(0u){}
struct PageHintArchiveDefaultTypeInternal {
  constexpr PageHintArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PageHintArchiveDefaultTypeInternal() {}
  union {
    PageHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PageHintArchiveDefaultTypeInternal _PageHintArchive_default_instance_;
constexpr NullChildHintArchive::NullChildHintArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NullChildHintArchiveDefaultTypeInternal {
  constexpr NullChildHintArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NullChildHintArchiveDefaultTypeInternal() {}
  union {
    NullChildHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NullChildHintArchiveDefaultTypeInternal _NullChildHintArchive_default_instance_;
constexpr SectionHintArchive::SectionHintArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_hints_()
  , start_page_index_(0u){}
struct SectionHintArchiveDefaultTypeInternal {
  constexpr SectionHintArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectionHintArchiveDefaultTypeInternal() {}
  union {
    SectionHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectionHintArchiveDefaultTypeInternal _SectionHintArchive_default_instance_;
constexpr TextboxHintArchive::TextboxHintArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_(nullptr)
  , size_(nullptr){}
struct TextboxHintArchiveDefaultTypeInternal {
  constexpr TextboxHintArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextboxHintArchiveDefaultTypeInternal() {}
  union {
    TextboxHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextboxHintArchiveDefaultTypeInternal _TextboxHintArchive_default_instance_;
constexpr TopicNumberEntryArchive::TopicNumberEntryArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topic_number_()
  , character_index_()
  , list_style_(nullptr){}
struct TopicNumberEntryArchiveDefaultTypeInternal {
  constexpr TopicNumberEntryArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TopicNumberEntryArchiveDefaultTypeInternal() {}
  union {
    TopicNumberEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TopicNumberEntryArchiveDefaultTypeInternal _TopicNumberEntryArchive_default_instance_;
constexpr TopicNumberHintsArchive::TopicNumberHintsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topic_numbers_map_()
  , charindex_(0u)
  , valid_through_char_index_(0u){}
struct TopicNumberHintsArchiveDefaultTypeInternal {
  constexpr TopicNumberHintsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TopicNumberHintsArchiveDefaultTypeInternal() {}
  union {
    TopicNumberHintsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TopicNumberHintsArchiveDefaultTypeInternal _TopicNumberHintsArchive_default_instance_;
constexpr LayoutStateArchive::LayoutStateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : section_hints_()
  , missing_fonts_()
  , section_index_(0u)
  , section_page_index_(0u)
  , document_page_index_(0u)
  , last_page_count_(0u)
  , body_length_(0u)
  , os_version_(0){}
struct LayoutStateArchiveDefaultTypeInternal {
  constexpr LayoutStateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LayoutStateArchiveDefaultTypeInternal() {}
  union {
    LayoutStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LayoutStateArchiveDefaultTypeInternal _LayoutStateArchive_default_instance_;
constexpr CanvasSelectionArchive::CanvasSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , excluded_infos_()
  , additional_infos_()
  , range_(nullptr)
  , container_(nullptr)
  , type_(0)

  , style_insertion_behavior_(0)

  , caret_affinity_(0)
{}
struct CanvasSelectionArchiveDefaultTypeInternal {
  constexpr CanvasSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanvasSelectionArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanvasSelectionArchiveDefaultTypeInternal _CanvasSelectionArchive_default_instance_;
constexpr AllFootnoteSelectionArchive::AllFootnoteSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AllFootnoteSelectionArchiveDefaultTypeInternal {
  constexpr AllFootnoteSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllFootnoteSelectionArchiveDefaultTypeInternal() {}
  union {
    AllFootnoteSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllFootnoteSelectionArchiveDefaultTypeInternal _AllFootnoteSelectionArchive_default_instance_;
constexpr UIStateArchive::UIStateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chart_ui_state_()
  , selected_inspector_switch_segment_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filtered_author_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , visible_rect_origin_(nullptr)
  , selection_(nullptr)
  , selection_model_(nullptr)
  , visible_rect_size_(nullptr)
  , window_frame_origin_(nullptr)
  , window_frame_size_(nullptr)
  , compatibility_selection_path_(nullptr)
  , selection_path_(nullptr)
  , filtered_author_(nullptr)
  , freehand_drawing_toolkit_state_(nullptr)
  , selection_path_transformer_(nullptr)
  , pencil_annotation_ui_state_(nullptr)
  , obsolete_view_scale_(0)
  , obsolete_landscape_(false)
  , master_drawables_selectable_(false)
  , layout_borders_visible_(false)
  , word_count_hud_visible_(false)
  , view_scale_mode_(0)

  , word_count_hud_type_(0u)
  , word_count_hud_x_position_(0)
  , shows_page_navigator_(false)
  , inspector_hidden_(false)
  , should_show_comment_sidebar_(false)
  , change_tracking_paused_(false)
  , word_count_hud_y_position_(0)
  , page_view_state_(0)

  , presentation_auto_scroll_speed_(0)
  , pencil_annotations_hidden_(false)
  , shows_toc_navigator_(false)
  , editing_disabled_(false)
  , view_scale_(1.25f)
  , ruler_visible_(true)
  , shows_comments_(true)
  , show_user_defined_guides_(true)
  , shows_ctmarkup_(true)
  , view_scale_mode_ios_(1)

  , shows_ctdeletions_(true)
  , show_user_defined_master_guides_(true){}
struct UIStateArchiveDefaultTypeInternal {
  constexpr UIStateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UIStateArchiveDefaultTypeInternal() {}
  union {
    UIStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
constexpr ViewStateRootArchive::ViewStateRootArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layout_state_(nullptr)
  , view_state_(nullptr){}
struct ViewStateRootArchiveDefaultTypeInternal {
  constexpr ViewStateRootArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewStateRootArchiveDefaultTypeInternal() {}
  union {
    ViewStateRootArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewStateRootArchiveDefaultTypeInternal _ViewStateRootArchive_default_instance_;
constexpr UserDefinedGuideMapArchive_UserDefinedGuide::UserDefinedGuideMapArchive_UserDefinedGuide(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guide_storage_(nullptr)
  , page_index_(0u){}
struct UserDefinedGuideMapArchive_UserDefinedGuideDefaultTypeInternal {
  constexpr UserDefinedGuideMapArchive_UserDefinedGuideDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserDefinedGuideMapArchive_UserDefinedGuideDefaultTypeInternal() {}
  union {
    UserDefinedGuideMapArchive_UserDefinedGuide _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserDefinedGuideMapArchive_UserDefinedGuideDefaultTypeInternal _UserDefinedGuideMapArchive_UserDefinedGuide_default_instance_;
constexpr UserDefinedGuideMapArchive::UserDefinedGuideMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_defined_guide_storages_(){}
struct UserDefinedGuideMapArchiveDefaultTypeInternal {
  constexpr UserDefinedGuideMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserDefinedGuideMapArchiveDefaultTypeInternal() {}
  union {
    UserDefinedGuideMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserDefinedGuideMapArchiveDefaultTypeInternal _UserDefinedGuideMapArchive_default_instance_;
constexpr SectionSelectionArchive::SectionSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sections_(){}
struct SectionSelectionArchiveDefaultTypeInternal {
  constexpr SectionSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectionSelectionArchiveDefaultTypeInternal() {}
  union {
    SectionSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectionSelectionArchiveDefaultTypeInternal _SectionSelectionArchive_default_instance_;
constexpr SectionSelectionTransformerArchive::SectionSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : section_uuid_paths_()
  , original_selection_(nullptr)
  , storage_uuid_path_(nullptr){}
struct SectionSelectionTransformerArchiveDefaultTypeInternal {
  constexpr SectionSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectionSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    SectionSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectionSelectionTransformerArchiveDefaultTypeInternal _SectionSelectionTransformerArchive_default_instance_;
constexpr SectionPasteboardObjectArchive_PageDrawables::SectionPasteboardObjectArchive_PageDrawables(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawable_tag_pairs_(nullptr)
  , page_index_(0u){}
struct SectionPasteboardObjectArchive_PageDrawablesDefaultTypeInternal {
  constexpr SectionPasteboardObjectArchive_PageDrawablesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectionPasteboardObjectArchive_PageDrawablesDefaultTypeInternal() {}
  union {
    SectionPasteboardObjectArchive_PageDrawables _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectionPasteboardObjectArchive_PageDrawablesDefaultTypeInternal _SectionPasteboardObjectArchive_PageDrawables_default_instance_;
constexpr SectionPasteboardObjectArchive::SectionPasteboardObjectArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_drawables_()
  , ordered_drawables_()
  , text_storage_(nullptr)
  , page_count_(0u){}
struct SectionPasteboardObjectArchiveDefaultTypeInternal {
  constexpr SectionPasteboardObjectArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectionPasteboardObjectArchiveDefaultTypeInternal() {}
  union {
    SectionPasteboardObjectArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectionPasteboardObjectArchiveDefaultTypeInternal _SectionPasteboardObjectArchive_default_instance_;
constexpr SectionsAppNativeObjectArchive_PageTemplatesEntry::SectionsAppNativeObjectArchive_PageTemplatesEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , value_(nullptr){}
struct SectionsAppNativeObjectArchive_PageTemplatesEntryDefaultTypeInternal {
  constexpr SectionsAppNativeObjectArchive_PageTemplatesEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectionsAppNativeObjectArchive_PageTemplatesEntryDefaultTypeInternal() {}
  union {
    SectionsAppNativeObjectArchive_PageTemplatesEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectionsAppNativeObjectArchive_PageTemplatesEntryDefaultTypeInternal _SectionsAppNativeObjectArchive_PageTemplatesEntry_default_instance_;
constexpr SectionsAppNativeObjectArchive::SectionsAppNativeObjectArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : section_pasteboard_objects_()
  , page_templates_()
  , flows_(){}
struct SectionsAppNativeObjectArchiveDefaultTypeInternal {
  constexpr SectionsAppNativeObjectArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectionsAppNativeObjectArchiveDefaultTypeInternal() {}
  union {
    SectionsAppNativeObjectArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectionsAppNativeObjectArchiveDefaultTypeInternal _SectionsAppNativeObjectArchive_default_instance_;
}  // namespace TP
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TPArchives_2eproto[37];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TPArchives_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TPArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TPArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, stylesheet_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, floating_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, body_storage_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, section_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, theme_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, settings_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, deprecated_layout_state_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, deprecated_view_state_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, citation_records_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, toc_styles_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, change_sessions_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, most_recent_change_session_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, drawables_zorder_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, uses_single_header_footer_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, page_width_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, page_height_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, left_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, right_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, top_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, bottom_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, header_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, footer_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, page_scale_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, lays_out_body_vertically_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, change_tracking_enabled_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, tables_custom_format_list_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, orientation_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, printer_id_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, paper_id_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, equation_environment_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, show_in_bookmarks_list_paragraph_styles_property_initialized_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, flow_info_container_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, page_templates_),
  PROTOBUF_FIELD_OFFSET(::TP::DocumentArchive, should_use_anchored_drawable_wrap_slop_),
  10,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  11,
  12,
  23,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  27,
  28,
  24,
  25,
  13,
  29,
  0,
  1,
  14,
  26,
  15,
  ~0u,
  30,
  PROTOBUF_FIELD_OFFSET(::TP::ThemeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ThemeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::ThemeArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, body_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, headers_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, footers_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, preview_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, copy_movies_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, copy_assets_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, placeholder_authoring_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, links_enabled_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, hyphenation_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, use_ligatures_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, toc_links_enabled_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, show_ct_markup_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, show_ct_deletions_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, ct_bubbles_visibility_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, change_bars_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, format_changes_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, annotations_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, document_is_rtl_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, decimal_tab_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, language_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, hyphenation_language_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, creation_locale_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, last_locale_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, orig_template_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, creation_date_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, bibliography_format_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, footnote_kind_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, footnote_format_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, footnote_numbering_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, footnote_gap_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, facing_pages_),
  PROTOBUF_FIELD_OFFSET(::TP::SettingsArchive, section_authoring_),
  24,
  25,
  26,
  27,
  28,
  29,
  8,
  30,
  9,
  10,
  11,
  31,
  20,
  12,
  21,
  22,
  23,
  14,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  13,
  17,
  18,
  19,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::TP::PlaceholderArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::PlaceholderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::PlaceholderArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TP::DrawableTagPairsArchive_DrawableTagPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::DrawableTagPairsArchive_DrawableTagPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::DrawableTagPairsArchive_DrawableTagPair, tag_),
  PROTOBUF_FIELD_OFFSET(::TP::DrawableTagPairsArchive_DrawableTagPair, drawable_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TP::DrawableTagPairsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::DrawableTagPairsArchive, drawable_tag_pairs_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_DrawableEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_DrawableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_DrawableEntry, drawable_),
  0,
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, page_index_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, background_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, foreground_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive_PageGroup, drawables_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive, page_groups_),
  PROTOBUF_FIELD_OFFSET(::TP::FloatingDrawablesArchive, drawable_tag_pairs_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TP::DrawablesZOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::DrawablesZOrderArchive, drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::PageMasterArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::PageMasterArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::PageMasterArchive, headers_),
  PROTOBUF_FIELD_OFFSET(::TP::PageMasterArchive, footers_),
  PROTOBUF_FIELD_OFFSET(::TP::PageMasterArchive, master_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::PageMasterArchive, page_template_uuidpath_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive_TagDrawablePair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive_TagDrawablePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive_TagDrawablePair, tag_),
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive_TagDrawablePair, drawable_),
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive_TagDrawablePair, z_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive, name_),
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive, master_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive, placeholder_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive, headers_footers_match_previous_page_),
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive, hide_headers_footers_),
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive, background_fill_),
  PROTOBUF_FIELD_OFFSET(::TP::PageTemplateArchive, guide_storage_),
  0,
  ~0u,
  ~0u,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_shows_header_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_shows_footer_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_headers_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_footers_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_left_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_right_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_top_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_bottom_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_header_padding_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_footer_padding_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_paper_width_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_paper_height_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_landscape_mode_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_master_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_header_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, obsolete_footer_margin_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, inherit_previous_header_footer_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, page_master_first_page_different_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, page_master_even_odd_pages_different_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, section_start_kind_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, section_page_number_kind_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, section_page_number_start_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, first_page_master_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, even_page_master_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, odd_page_master_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, name_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, page_master_first_page_hides_header_footer_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, user_defined_guide_storage_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, background_fill_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionArchive, section_hyperlink_uuid_),
  11,
  12,
  ~0u,
  ~0u,
  7,
  8,
  9,
  10,
  15,
  16,
  17,
  18,
  13,
  ~0u,
  19,
  20,
  14,
  23,
  24,
  21,
  22,
  26,
  1,
  2,
  3,
  0,
  25,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TP::DoublePoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::DoublePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::DoublePoint, x_),
  PROTOBUF_FIELD_OFFSET(::TP::DoublePoint, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::DoubleSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::DoubleSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::DoubleSize, width_),
  PROTOBUF_FIELD_OFFSET(::TP::DoubleSize, height_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::AnchorPosArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::AnchorPosArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::AnchorPosArchive, attachment_),
  PROTOBUF_FIELD_OFFSET(::TP::AnchorPosArchive, position_),
  PROTOBUF_FIELD_OFFSET(::TP::AnchorPosArchive, drawable_uuid_path_),
  PROTOBUF_FIELD_OFFSET(::TP::AnchorPosArchive, double_position_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, frame_origin_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, frame_size_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, range_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, next_widow_pulls_down_from_char_index_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, anchored_range_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, column_count_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, line_fragment_count_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, double_origin_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, double_size_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, end_of_layout_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, last_line_is_empty_and_has_list_label_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, text_is_vertical_),
  PROTOBUF_FIELD_OFFSET(::TP::TargetHintArchive, terminated_by_break_),
  0,
  1,
  2,
  6,
  3,
  7,
  8,
  4,
  5,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, page_kind_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, target_hints_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, footnote_auto_number_range_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, footnote_layout_range_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, first_child_hint_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, last_child_hint_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, anchored_attachments_map_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, topic_numbers_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, version_number_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, platform_id_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, child_hints_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, partitioned_attachment_uuids_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, text_flows_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, flow_hints_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, flow_topic_numbers_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, page_side_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, page_column_),
  PROTOBUF_FIELD_OFFSET(::TP::PageHintArchive, page_row_),
  5,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  10,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TP::NullChildHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::SectionHintArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::SectionHintArchive, page_hints_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionHintArchive, start_page_index_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TP::TextboxHintArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::TextboxHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::TextboxHintArchive, range_),
  PROTOBUF_FIELD_OFFSET(::TP::TextboxHintArchive, size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberEntryArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberEntryArchive, list_style_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberEntryArchive, topic_number_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberEntryArchive, character_index_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberHintsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberHintsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberHintsArchive, charindex_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberHintsArchive, topic_numbers_map_),
  PROTOBUF_FIELD_OFFSET(::TP::TopicNumberHintsArchive, valid_through_char_index_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, section_index_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, section_page_index_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, document_page_index_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, last_page_count_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, section_hints_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, body_length_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, missing_fonts_),
  PROTOBUF_FIELD_OFFSET(::TP::LayoutStateArchive, os_version_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, range_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, style_insertion_behavior_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, caret_affinity_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, infos_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, excluded_infos_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, additional_infos_),
  PROTOBUF_FIELD_OFFSET(::TP::CanvasSelectionArchive, container_),
  2,
  0,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TP::AllFootnoteSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, obsolete_view_scale_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, visible_rect_origin_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, obsolete_landscape_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, selection_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, selection_model_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, master_drawables_selectable_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, visible_rect_size_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, chart_ui_state_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, ruler_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, layout_borders_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, word_count_hud_visible_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, shows_comments_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, shows_page_navigator_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, view_scale_mode_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, view_scale_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, window_frame_origin_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, window_frame_size_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, selected_inspector_switch_segment_identifier_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, inspector_hidden_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, word_count_hud_type_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, word_count_hud_x_position_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, word_count_hud_y_position_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, show_user_defined_guides_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, should_show_comment_sidebar_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, compatibility_selection_path_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, shows_ctmarkup_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, shows_ctdeletions_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, change_tracking_paused_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, selection_path_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, filtered_author_name_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, view_scale_mode_ios_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, filtered_author_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, page_view_state_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, pencil_annotations_hidden_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, freehand_drawing_toolkit_state_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, presentation_auto_scroll_speed_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, selection_path_transformer_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, shows_toc_navigator_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, show_user_defined_master_guides_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, editing_disabled_),
  PROTOBUF_FIELD_OFFSET(::TP::UIStateArchive, pencil_annotation_ui_state_),
  14,
  2,
  15,
  3,
  4,
  16,
  5,
  ~0u,
  33,
  17,
  18,
  34,
  22,
  19,
  32,
  6,
  7,
  0,
  23,
  20,
  21,
  26,
  35,
  24,
  8,
  36,
  38,
  25,
  9,
  1,
  37,
  10,
  27,
  29,
  11,
  28,
  12,
  30,
  39,
  31,
  13,
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateRootArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateRootArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateRootArchive, layout_state_),
  PROTOBUF_FIELD_OFFSET(::TP::ViewStateRootArchive, view_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TP::UserDefinedGuideMapArchive_UserDefinedGuide, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::UserDefinedGuideMapArchive_UserDefinedGuide, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::UserDefinedGuideMapArchive_UserDefinedGuide, page_index_),
  PROTOBUF_FIELD_OFFSET(::TP::UserDefinedGuideMapArchive_UserDefinedGuide, guide_storage_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TP::UserDefinedGuideMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::UserDefinedGuideMapArchive, user_defined_guide_storages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TP::SectionSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::SectionSelectionArchive, sections_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::SectionSelectionTransformerArchive, original_selection_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionSelectionTransformerArchive, storage_uuid_path_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionSelectionTransformerArchive, section_uuid_paths_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TP::SectionPasteboardObjectArchive_PageDrawables, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionPasteboardObjectArchive_PageDrawables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::SectionPasteboardObjectArchive_PageDrawables, page_index_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionPasteboardObjectArchive_PageDrawables, drawable_tag_pairs_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TP::SectionPasteboardObjectArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionPasteboardObjectArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::SectionPasteboardObjectArchive, text_storage_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionPasteboardObjectArchive, page_count_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionPasteboardObjectArchive, page_drawables_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionPasteboardObjectArchive, ordered_drawables_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry, key_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TP::SectionsAppNativeObjectArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TP::SectionsAppNativeObjectArchive, section_pasteboard_objects_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionsAppNativeObjectArchive, page_templates_),
  PROTOBUF_FIELD_OFFSET(::TP::SectionsAppNativeObjectArchive, flows_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 40, sizeof(::TP::DocumentArchive)},
  { 75, 81, sizeof(::TP::ThemeArchive)},
  { 82, 119, sizeof(::TP::SettingsArchive)},
  { 151, 157, sizeof(::TP::PlaceholderArchive)},
  { 158, 165, sizeof(::TP::DrawableTagPairsArchive_DrawableTagPair)},
  { 167, -1, sizeof(::TP::DrawableTagPairsArchive)},
  { 173, 179, sizeof(::TP::FloatingDrawablesArchive_DrawableEntry)},
  { 180, 189, sizeof(::TP::FloatingDrawablesArchive_PageGroup)},
  { 193, 200, sizeof(::TP::FloatingDrawablesArchive)},
  { 202, -1, sizeof(::TP::DrawablesZOrderArchive)},
  { 208, 217, sizeof(::TP::PageMasterArchive)},
  { 221, 229, sizeof(::TP::PageTemplateArchive_TagDrawablePair)},
  { 232, 244, sizeof(::TP::PageTemplateArchive)},
  { 251, 286, sizeof(::TP::SectionArchive)},
  { 316, 323, sizeof(::TP::DoublePoint)},
  { 325, 332, sizeof(::TP::DoubleSize)},
  { 334, 343, sizeof(::TP::AnchorPosArchive)},
  { 347, 365, sizeof(::TP::TargetHintArchive)},
  { 378, 401, sizeof(::TP::PageHintArchive)},
  { 419, -1, sizeof(::TP::NullChildHintArchive)},
  { 424, 431, sizeof(::TP::SectionHintArchive)},
  { 433, 440, sizeof(::TP::TextboxHintArchive)},
  { 442, 450, sizeof(::TP::TopicNumberEntryArchive)},
  { 453, 461, sizeof(::TP::TopicNumberHintsArchive)},
  { 464, 477, sizeof(::TP::LayoutStateArchive)},
  { 485, 498, sizeof(::TP::CanvasSelectionArchive)},
  { 506, -1, sizeof(::TP::AllFootnoteSelectionArchive)},
  { 511, 557, sizeof(::TP::UIStateArchive)},
  { 598, 605, sizeof(::TP::ViewStateRootArchive)},
  { 607, 614, sizeof(::TP::UserDefinedGuideMapArchive_UserDefinedGuide)},
  { 616, -1, sizeof(::TP::UserDefinedGuideMapArchive)},
  { 622, -1, sizeof(::TP::SectionSelectionArchive)},
  { 628, 636, sizeof(::TP::SectionSelectionTransformerArchive)},
  { 639, 646, sizeof(::TP::SectionPasteboardObjectArchive_PageDrawables)},
  { 648, 657, sizeof(::TP::SectionPasteboardObjectArchive)},
  { 661, 668, sizeof(::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry)},
  { 670, -1, sizeof(::TP::SectionsAppNativeObjectArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_DocumentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_ThemeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_SettingsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_PlaceholderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_DrawableTagPairsArchive_DrawableTagPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_DrawableTagPairsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_FloatingDrawablesArchive_DrawableEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_FloatingDrawablesArchive_PageGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_FloatingDrawablesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_DrawablesZOrderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_PageMasterArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_PageTemplateArchive_TagDrawablePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_PageTemplateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_SectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_DoublePoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_DoubleSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_AnchorPosArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_TargetHintArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_PageHintArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_NullChildHintArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_SectionHintArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_TextboxHintArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_TopicNumberEntryArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_TopicNumberHintsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_LayoutStateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_CanvasSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_AllFootnoteSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_UIStateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_ViewStateRootArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_UserDefinedGuideMapArchive_UserDefinedGuide_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_UserDefinedGuideMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_SectionSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_SectionSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_SectionPasteboardObjectArchive_PageDrawables_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_SectionPasteboardObjectArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_SectionsAppNativeObjectArchive_PageTemplatesEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TP::_SectionsAppNativeObjectArchive_default_instance_),
};

const char descriptor_table_protodef_TPArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020TPArchives.proto\022\002TP\032\021TSDArchives.prot"
  "o\032\021TSKArchives.proto\032\021TSPMessages.proto\032"
  "\022TSWPArchives.proto\032\021TSSArchives.proto\032\021"
  "TSAArchives.proto\032\022TSCHArchives.proto\"\337\t"
  "\n\017DocumentArchive\022#\n\005super\030\017 \002(\0132\024.TSA.D"
  "ocumentArchive\022\"\n\nstylesheet\030\002 \001(\0132\016.TSP"
  ".Reference\022*\n\022floating_drawables\030\003 \001(\0132\016"
  ".TSP.Reference\022$\n\014body_storage\030\004 \001(\0132\016.T"
  "SP.Reference\022\037\n\007section\030\005 \001(\0132\016.TSP.Refe"
  "rence\022\035\n\005theme\030\006 \001(\0132\016.TSP.Reference\022 \n\010"
  "settings\030\007 \001(\0132\016.TSP.Reference\022/\n\027deprec"
  "ated_layout_state\030\013 \001(\0132\016.TSP.Reference\022"
  "-\n\025deprecated_view_state\030\014 \001(\0132\016.TSP.Ref"
  "erence\022(\n\020citation_records\030\r \003(\0132\016.TSP.R"
  "eference\022\"\n\ntoc_styles\030\016 \003(\0132\016.TSP.Refer"
  "ence\022\'\n\017change_sessions\030\020 \003(\0132\016.TSP.Refe"
  "rence\0222\n\032most_recent_change_session\030\021 \001("
  "\0132\016.TSP.Reference\022(\n\020drawables_zorder\030\024 "
  "\001(\0132\016.TSP.Reference\022!\n\031uses_single_heade"
  "r_footer\030\025 \001(\010\022\022\n\npage_width\030\036 \001(\002\022\023\n\013pa"
  "ge_height\030\037 \001(\002\022\023\n\013left_margin\030  \001(\002\022\024\n\014"
  "right_margin\030! \001(\002\022\022\n\ntop_margin\030\" \001(\002\022\025"
  "\n\rbottom_margin\030# \001(\002\022\025\n\rheader_margin\030$"
  " \001(\002\022\025\n\rfooter_margin\030% \001(\002\022\022\n\npage_scal"
  "e\030& \001(\002\022 \n\030lays_out_body_vertically\030\' \001("
  "\010\022\037\n\027change_tracking_enabled\030( \001(\010\0221\n\031ta"
  "bles_custom_format_list\030) \001(\0132\016.TSP.Refe"
  "rence\022\026\n\013orientation\030* \001(\r:\0010\022\022\n\nprinter"
  "_id\030+ \001(\t\022\020\n\010paper_id\030, \001(\t\0220\n\024equation_"
  "environment\030- \001(\0132\022.TSP.DataReference\022K\n"
  "<show_in_bookmarks_list_paragraph_styles"
  "_property_initialized\030. \001(\010:\005false\022+\n\023fl"
  "ow_info_container\030/ \001(\0132\016.TSP.Reference\022"
  "&\n\016page_templates\0300 \003(\0132\016.TSP.Reference\022"
  ".\n&should_use_anchored_drawable_wrap_slo"
  "p\0301 \001(\010\"0\n\014ThemeArchive\022 \n\005super\030\001 \002(\0132\021"
  ".TSS.ThemeArchive\"\303\013\n\017SettingsArchive\022\022\n"
  "\004body\030\001 \001(\010:\004true\022\025\n\007headers\030\002 \001(\010:\004true"
  "\022\025\n\007footers\030\003 \001(\010:\004true\022\025\n\007preview\030\004 \001(\010"
  ":\004true\022\031\n\013copy_movies\030\005 \001(\010:\004true\022\031\n\013cop"
  "y_assets\030\006 \001(\010:\004true\022$\n\025placeholder_auth"
  "oring\030\007 \001(\010:\005false\022\033\n\rlinks_enabled\030\010 \001("
  "\010:\004true\022\032\n\013hyphenation\030\t \001(\010:\005false\022\034\n\ru"
  "se_ligatures\030\n \001(\010:\005false\022 \n\021toc_links_e"
  "nabled\030\013 \001(\010:\005false\022\034\n\016show_ct_markup\030\014 "
  "\001(\010:\004true\022\037\n\021show_ct_deletions\030\r \001(\010:\004tr"
  "ue\022\035\n\025ct_bubbles_visibility\030\016 \001(\005\022!\n\023cha"
  "nge_bars_visible\030\017 \001(\010:\004true\022$\n\026format_c"
  "hanges_visible\030\020 \001(\010:\004true\022!\n\023annotation"
  "s_visible\030\021 \001(\010:\004true\022\036\n\017document_is_rtl"
  "\030\022 \001(\010:\005false\022\023\n\013decimal_tab\030\024 \001(\t\022\020\n\010la"
  "nguage\030\025 \001(\t\022\034\n\024hyphenation_language\030\026 \001"
  "(\t\022\027\n\017creation_locale\030\027 \001(\t\022\023\n\013last_loca"
  "le\030\030 \001(\t\022\025\n\rorig_template\030\031 \001(\t\022\025\n\rcreat"
  "ion_date\030\032 \001(\t\022\033\n\023bibliography_format\030\033 "
  "\001(\t\0227\n\rfootnote_kind\030\036 \001(\0162 .TP.Settings"
  "Archive.FootnoteKind\022;\n\017footnote_format\030"
  "\037 \001(\0162\".TP.SettingsArchive.FootnoteForma"
  "t\022A\n\022footnote_numbering\030  \001(\0162%.TP.Setti"
  "ngsArchive.FootnoteNumbering\022\024\n\014footnote"
  "_gap\030! \001(\005\022\033\n\014facing_pages\030\" \001(\010:\005false\022"
  " \n\021section_authoring\030( \001(\010:\005false\"o\n\014Foo"
  "tnoteKind\022\032\n\026kFootnoteKindFootnotes\020\000\022!\n"
  "\035kFootnoteKindDocumentEndnotes\020\001\022 \n\034kFoo"
  "tnoteKindSectionEndnotes\020\002\"\321\001\n\016FootnoteF"
  "ormat\022\032\n\026kFootnoteFormatNumeric\020\000\022\030\n\024kFo"
  "otnoteFormatRoman\020\001\022\033\n\027kFootnoteFormatSy"
  "mbolic\020\002\022\"\n\036kFootnoteFormatJapaneseNumer"
  "ic\020\003\022&\n\"kFootnoteFormatJapaneseIdeograph"
  "ic\020\004\022 \n\034kFootnoteFormatArabicNumeric\020\005\"\206"
  "\001\n\021FootnoteNumbering\022 \n\034kFootnoteNumberi"
  "ngContinuous\020\000\022%\n!kFootnoteNumberingRest"
  "artEachPage\020\001\022(\n$kFootnoteNumberingResta"
  "rtEachSection\020\002\";\n\022PlaceholderArchive\022%\n"
  "\005super\030\001 \002(\0132\026.TSWP.ShapeInfoArchive\"\244\001\n"
  "\027DrawableTagPairsArchive\022G\n\022drawable_tag"
  "_pairs\030\001 \003(\0132+.TP.DrawableTagPairsArchiv"
  "e.DrawableTagPair\032@\n\017DrawableTagPair\022\013\n\003"
  "tag\030\001 \002(\t\022 \n\010drawable\030\002 \002(\0132\016.TSP.Refere"
  "nce\"\270\003\n\030FloatingDrawablesArchive\022;\n\013page"
  "_groups\030\001 \003(\0132&.TP.FloatingDrawablesArch"
  "ive.PageGroup\0227\n\022drawable_tag_pairs\030\002 \001("
  "\0132\033.TP.DrawableTagPairsArchive\0321\n\rDrawab"
  "leEntry\022 \n\010drawable\030\001 \001(\0132\016.TSP.Referenc"
  "e\032\362\001\n\tPageGroup\022\022\n\npage_index\030\001 \002(\r\022H\n\024b"
  "ackground_drawables\030\002 \003(\0132*.TP.FloatingD"
  "rawablesArchive.DrawableEntry\022H\n\024foregro"
  "und_drawables\030\003 \003(\0132*.TP.FloatingDrawabl"
  "esArchive.DrawableEntry\022=\n\tdrawables\030\004 \003"
  "(\0132*.TP.FloatingDrawablesArchive.Drawabl"
  "eEntry\";\n\026DrawablesZOrderArchive\022!\n\tdraw"
  "ables\030\001 \003(\0132\016.TSP.Reference\"\256\001\n\021PageMast"
  "erArchive\022\037\n\007headers\030\001 \003(\0132\016.TSP.Referen"
  "ce\022\037\n\007footers\030\002 \003(\0132\016.TSP.Reference\022(\n\020m"
  "aster_drawables\030\003 \003(\0132\016.TSP.Reference\022-\n"
  "\026page_template_uuidpath\030\004 \001(\0132\r.TSP.UUID"
  "Path\"\205\003\n\023PageTemplateArchive\022\014\n\004name\030\001 \001"
  "(\t\022(\n\020master_drawables\030\002 \003(\0132\016.TSP.Refer"
  "ence\022F\n\025placeholder_drawables\030\003 \003(\0132\'.TP"
  ".PageTemplateArchive.TagDrawablePair\022+\n#"
  "headers_footers_match_previous_page\030\004 \002("
  "\010\022\034\n\024hide_headers_footers\030\005 \001(\010\022)\n\017backg"
  "round_fill\030\006 \001(\0132\020.TSD.FillArchive\022%\n\rgu"
  "ide_storage\030\007 \001(\0132\016.TSP.Reference\032Q\n\017Tag"
  "DrawablePair\022\013\n\003tag\030\001 \002(\t\022 \n\010drawable\030\002 "
  "\002(\0132\016.TSP.Reference\022\017\n\007z_index\030\003 \002(\r\"\332\010\n"
  "\016SectionArchive\022\035\n\025OBSOLETE_shows_header"
  "\030\001 \001(\010\022\035\n\025OBSOLETE_shows_footer\030\002 \001(\010\022(\n"
  "\020OBSOLETE_headers\030\003 \003(\0132\016.TSP.Reference\022"
  "(\n\020OBSOLETE_footers\030\004 \003(\0132\016.TSP.Referenc"
  "e\022\034\n\024OBSOLETE_left_margin\030\005 \001(\002\022\035\n\025OBSOL"
  "ETE_right_margin\030\006 \001(\002\022\033\n\023OBSOLETE_top_m"
  "argin\030\007 \001(\002\022\036\n\026OBSOLETE_bottom_margin\030\010 "
  "\001(\002\022\037\n\027OBSOLETE_header_padding\030\t \001(\002\022\037\n\027"
  "OBSOLETE_footer_padding\030\n \001(\002\022\034\n\024OBSOLET"
  "E_paper_width\030\013 \001(\002\022\035\n\025OBSOLETE_paper_he"
  "ight\030\014 \001(\002\022\037\n\027OBSOLETE_landscape_mode\030\r "
  "\001(\010\0221\n\031OBSOLETE_master_drawables\030\016 \003(\0132\016"
  ".TSP.Reference\022\036\n\026OBSOLETE_header_margin"
  "\030\017 \001(\002\022\036\n\026OBSOLETE_footer_margin\030\020 \001(\002\022&"
  "\n\036inherit_previous_header_footer\030\021 \001(\010\022("
  "\n page_master_first_page_different\030\022 \001(\010"
  "\022,\n$page_master_even_odd_pages_different"
  "\030\023 \001(\010\022\032\n\022section_start_kind\030\024 \001(\r\022 \n\030se"
  "ction_page_number_kind\030\025 \001(\r\022!\n\031section_"
  "page_number_start\030\026 \001(\r\022)\n\021first_page_ma"
  "ster\030\027 \001(\0132\016.TSP.Reference\022(\n\020even_page_"
  "master\030\030 \001(\0132\016.TSP.Reference\022\'\n\017odd_page"
  "_master\030\031 \001(\0132\016.TSP.Reference\022\014\n\004name\030\032 "
  "\001(\t\0222\n*page_master_first_page_hides_head"
  "er_footer\030\034 \001(\010\0222\n\032user_defined_guide_st"
  "orage\030\035 \001(\0132\016.TSP.Reference\022)\n\017backgroun"
  "d_fill\030\036 \001(\0132\020.TSD.FillArchive\022)\n\026sectio"
  "n_hyperlink_uuid\030\037 \001(\0132\t.TSP.UUID\"#\n\013Dou"
  "blePoint\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\"+\n\nDouble"
  "Size\022\r\n\005width\030\001 \002(\001\022\016\n\006height\030\002 \002(\001\"\255\001\n\020"
  "AnchorPosArchive\022&\n\nattachment\030\001 \001(\0132\016.T"
  "SP.ReferenceB\002\030\001\022\034\n\010position\030\002 \001(\0132\n.TSP"
  ".Point\022)\n\022drawable_uuid_path\030\003 \001(\0132\r.TSP"
  ".UUIDPath\022(\n\017double_position\030\004 \001(\0132\017.TP."
  "DoublePoint\"\277\003\n\021TargetHintArchive\022 \n\014fra"
  "me_origin\030\001 \001(\0132\n.TSP.Point\022\035\n\nframe_siz"
  "e\030\002 \001(\0132\t.TSP.Size\022\031\n\005range\030\003 \001(\0132\n.TSP."
  "Range\022-\n%next_widow_pulls_down_from_char"
  "_index\030\004 \001(\r\022\"\n\016anchored_range\030\005 \001(\0132\n.T"
  "SP.Range\022\024\n\014column_count\030\006 \001(\r\022\033\n\023line_f"
  "ragment_count\030\007 \001(\r\022&\n\rdouble_origin\030\010 \001"
  "(\0132\017.TP.DoublePoint\022#\n\013double_size\030\t \001(\013"
  "2\016.TP.DoubleSize\022\025\n\rend_of_layout\030\n \001(\010\022"
  "-\n%last_line_is_empty_and_has_list_label"
  "\030\013 \001(\010\022\030\n\020text_is_vertical\030\014 \001(\010\022\033\n\023term"
  "inated_by_break\030\r \001(\010\"\351\007\n\017PageHintArchiv"
  "e\022/\n\tpage_kind\030\001 \001(\0162\034.TP.PageHintArchiv"
  "e.PageKind\022+\n\014target_hints\030\002 \003(\0132\025.TP.Ta"
  "rgetHintArchive\022.\n\032footnote_auto_number_"
  "range\030\003 \001(\0132\n.TSP.Range\022)\n\025footnote_layo"
  "ut_range\030\004 \001(\0132\n.TSP.Range\022,\n\020first_chil"
  "d_hint\030\006 \001(\0132\016.TSP.ReferenceB\002\030\001\022+\n\017last"
  "_child_hint\030\007 \001(\0132\016.TSP.ReferenceB\002\030\001\0226\n"
  "\030anchored_attachments_map\030\010 \003(\0132\024.TP.Anc"
  "horPosArchive\0222\n\rtopic_numbers\030\t \001(\0132\033.T"
  "P.TopicNumberHintsArchive\022\026\n\016version_num"
  "ber\030\n \001(\r\022\023\n\013platform_id\030\013 \001(\r\022#\n\013child_"
  "hints\030\014 \003(\0132\016.TSP.Reference\022/\n\034partition"
  "ed_attachment_uuids\030\r \003(\0132\t.TSP.UUID\022\"\n\n"
  "text_flows\030\016 \003(\0132\016.TSP.Reference\022)\n\nflow"
  "_hints\030\017 \003(\0132\025.TP.TargetHintArchive\0227\n\022f"
  "low_topic_numbers\030\020 \003(\0132\033.TP.TopicNumber"
  "HintsArchive\0223\n\tpage_side\030\021 \001(\0162\034.TP.Pag"
  "eHintArchive.PageSideB\002\030\001\022\023\n\013page_column"
  "\030\022 \001(\r\022\020\n\010page_row\030\023 \001(\r\"\237\001\n\010PageKind\022\021\n"
  "\rkPageKindNone\020\000\022\021\n\rkPageKindText\020\001\022\023\n\017k"
  "PageKindFiller\020\002\022\023\n\017kPageKindOrphan\020\003\022\024\n"
  "\020kPageKindEndnote\020\004\022\022\n\016kPageKindDirty\020\005\022"
  "\031\n\025kTPPageKindPageLayout\020\006\"M\n\010PageSide\022\026"
  "\n\022kTPPageSideUnknown\020\000\022\023\n\017kTPPageSideLef"
  "t\020\001\022\024\n\020kTPPageSideRight\020\002\"\026\n\024NullChildHi"
  "ntArchive\"W\n\022SectionHintArchive\022\'\n\npage_"
  "hints\030\001 \003(\0132\023.TP.PageHintArchive\022\030\n\020star"
  "t_page_index\030\002 \001(\r\"H\n\022TextboxHintArchive"
  "\022\031\n\005range\030\001 \002(\0132\n.TSP.Range\022\027\n\004size\030\002 \002("
  "\0132\t.TSP.Size\"l\n\027TopicNumberEntryArchive\022"
  "\"\n\nlist_style\030\001 \002(\0132\016.TSP.Reference\022\024\n\014t"
  "opic_number\030\002 \003(\r\022\027\n\017character_index\030\003 \003"
  "(\r\"\206\001\n\027TopicNumberHintsArchive\022\021\n\tcharIn"
  "dex\030\001 \001(\r\0226\n\021topic_numbers_map\030\002 \003(\0132\033.T"
  "P.TopicNumberEntryArchive\022 \n\030valid_throu"
  "gh_char_index\030\003 \001(\r\"\354\001\n\022LayoutStateArchi"
  "ve\022\025\n\rsection_index\030\001 \001(\r\022\032\n\022section_pag"
  "e_index\030\002 \001(\r\022\033\n\023document_page_index\030\003 \001"
  "(\r\022\027\n\017last_page_count\030\004 \001(\r\022-\n\rsection_h"
  "ints\030\005 \003(\0132\026.TP.SectionHintArchive\022\023\n\013bo"
  "dy_length\030\006 \001(\r\022\025\n\rmissing_fonts\030\007 \003(\t\022\022"
  "\n\nos_version\030\010 \001(\005\"\327\002\n\026CanvasSelectionAr"
  "chive\022!\n\004type\030\001 \002(\0162\023.TSWP.SelectionType"
  "\022\031\n\005range\030\002 \002(\0132\n.TSP.Range\022>\n\030style_ins"
  "ertion_behavior\030\003 \002(\0162\034.TSWP.StyleInsert"
  "ionBehavior\022+\n\016caret_affinity\030\004 \002(\0162\023.TS"
  "WP.CaretAffinity\022\035\n\005infos\030\005 \003(\0132\016.TSP.Re"
  "ference\022&\n\016excluded_infos\030\006 \003(\0132\016.TSP.Re"
  "ference\022(\n\020additional_infos\030\007 \003(\0132\016.TSP."
  "Reference\022!\n\tcontainer\030\010 \001(\0132\016.TSP.Refer"
  "ence\"\035\n\033AllFootnoteSelectionArchive\"\237\r\n\016"
  "UIStateArchive\022\033\n\023OBSOLETE_view_scale\030\001 "
  "\001(\002\022\'\n\023visible_rect_origin\030\002 \001(\0132\n.TSP.P"
  "oint\022\032\n\022OBSOLETE_landscape\030\003 \001(\010\022%\n\tsele"
  "ction\030\004 \001(\0132\016.TSP.ReferenceB\002\030\001\022+\n\017selec"
  "tion_model\030\005 \001(\0132\016.TSP.ReferenceB\002\030\001\022#\n\033"
  "master_drawables_selectable\030\006 \001(\010\022$\n\021vis"
  "ible_rect_size\030\007 \001(\0132\t.TSP.Size\022*\n\016chart"
  "_ui_state\030\010 \003(\0132\022.TSCH.ChartUIState\022\033\n\rr"
  "uler_visible\030\t \001(\010:\004true\022%\n\026layout_borde"
  "rs_visible\030\n \001(\010:\005false\022%\n\026word_count_hu"
  "d_visible\030\013 \001(\010:\005false\022\034\n\016shows_comments"
  "\030\014 \001(\010:\004true\022#\n\024shows_page_navigator\030\r \001"
  "(\010:\005false\022E\n\017view_scale_mode\030\016 \001(\0162\021.TP."
  "ViewScaleMode:\031ViewScaleMode_UserDefined"
  "\022\030\n\nview_scale\030\017 \001(\002:\0041.25\022\'\n\023window_fra"
  "me_origin\030\020 \001(\0132\n.TSP.Point\022$\n\021window_fr"
  "ame_size\030\021 \001(\0132\t.TSP.Size\0224\n,selected_in"
  "spector_switch_segment_identifier\030\022 \001(\t\022"
  "\030\n\020inspector_hidden\030\023 \001(\010\022\033\n\023word_count_"
  "hud_type\030\024 \001(\r\022!\n\031word_count_hud_x_posit"
  "ion\030\025 \001(\002\022!\n\031word_count_hud_y_position\030\026"
  " \001(\002\022&\n\030show_user_defined_guides\030\027 \001(\010:\004"
  "true\022*\n\033should_show_comment_sidebar\030\030 \001("
  "\010:\005false\022\?\n\034compatibility_selection_path"
  "\030\031 \001(\0132\031.TSK.SelectionPathArchive\022\034\n\016sho"
  "ws_ctmarkup\030\032 \001(\010:\004true\022\037\n\021shows_ctdelet"
  "ions\030\033 \001(\010:\004true\022%\n\026change_tracking_paus"
  "ed\030\034 \001(\010:\005false\0221\n\016selection_path\030\035 \001(\0132"
  "\031.TSK.SelectionPathArchive\022\034\n\024filtered_a"
  "uthor_name\030\036 \001(\t\022O\n\023view_scale_mode_ios\030"
  "\037 \001(\0162\024.TP.ViewScaleModeiOS:\034ViewScaleMo"
  "deiOS_UserDefined\022\'\n\017filtered_author\030  \001"
  "(\0132\016.TSP.Reference\022*\n\017page_view_state\030! "
  "\001(\0162\021.TP.PageViewState\022(\n\031pencil_annotat"
  "ions_hidden\030\" \001(\010:\005false\0226\n\036freehand_dra"
  "wing_toolkit_state\030# \001(\0132\016.TSP.Reference"
  "\022&\n\036presentation_auto_scroll_speed\030$ \001(\002"
  "\0222\n\032selection_path_transformer\030% \001(\0132\016.T"
  "SP.Reference\022\"\n\023shows_toc_navigator\030& \001("
  "\010:\005false\022-\n\037show_user_defined_master_gui"
  "des\030\' \001(\010:\004true\022\030\n\020editing_disabled\030( \001("
  "\010\0222\n\032pencil_annotation_ui_state\030) \001(\0132\016."
  "TSP.Reference\"`\n\024ViewStateRootArchive\022$\n"
  "\014layout_state\030\001 \001(\0132\016.TSP.Reference\022\"\n\nv"
  "iew_state\030\002 \001(\0132\016.TSP.Reference\"\301\001\n\032User"
  "DefinedGuideMapArchive\022T\n\033user_defined_g"
  "uide_storages\030\001 \003(\0132/.TP.UserDefinedGuid"
  "eMapArchive.UserDefinedGuide\032M\n\020UserDefi"
  "nedGuide\022\022\n\npage_index\030\001 \002(\r\022%\n\rguide_st"
  "orage\030\002 \002(\0132\016.TSP.Reference\";\n\027SectionSe"
  "lectionArchive\022 \n\010sections\030\001 \003(\0132\016.TSP.R"
  "eference\"\245\001\n\"SectionSelectionTransformer"
  "Archive\022*\n\022original_selection\030\001 \001(\0132\016.TS"
  "P.Reference\022(\n\021storage_uuid_path\030\002 \001(\0132\r"
  ".TSP.UUIDPath\022)\n\022section_uuid_paths\030\003 \003("
  "\0132\r.TSP.UUIDPath\"\255\002\n\036SectionPasteboardOb"
  "jectArchive\022$\n\014text_storage\030\001 \002(\0132\016.TSP."
  "Reference\022\022\n\npage_count\030\002 \002(\r\022H\n\016page_dr"
  "awables\030\003 \003(\01320.TP.SectionPasteboardObje"
  "ctArchive.PageDrawables\022)\n\021ordered_drawa"
  "bles\030\004 \003(\0132\016.TSP.Reference\032\\\n\rPageDrawab"
  "les\022\022\n\npage_index\030\001 \002(\r\0227\n\022drawable_tag_"
  "pairs\030\002 \002(\0132\033.TP.DrawableTagPairsArchive"
  "\"\217\002\n\036SectionsAppNativeObjectArchive\0222\n\032s"
  "ection_pasteboard_objects\030\001 \003(\0132\016.TSP.Re"
  "ference\022M\n\016page_templates\030\002 \003(\01325.TP.Sec"
  "tionsAppNativeObjectArchive.PageTemplate"
  "sEntry\022\035\n\005flows\030\003 \003(\0132\016.TSP.Reference\032K\n"
  "\022PageTemplatesEntry\022\026\n\003key\030\001 \002(\0132\t.TSP.U"
  "UID\022\035\n\005value\030\002 \002(\0132\016.TSP.Reference*e\n\rVi"
  "ewScaleMode\022\035\n\031ViewScaleMode_UserDefined"
  "\020\000\022\032\n\026ViewScaleMode_FitWidth\020\001\022\031\n\025ViewSc"
  "aleMode_FirPage\020\002*\273\001\n\020ViewScaleModeiOS\022\036"
  "\n\032ViewScaleModeiOS_Undefined\020\000\022 \n\034ViewSc"
  "aleModeiOS_UserDefined\020\001\022\035\n\031ViewScaleMod"
  "eiOS_FitWidth\020\002\022\037\n\033ViewScaleModeiOS_FitM"
  "inimum\020\003\022%\n!ViewScaleModeiOS_FitPortrait"
  "Width\020\004*A\n\rPageViewState\022\027\n\023PageViewStat"
  "e_OneUp\020\000\022\027\n\023PageViewState_TwoUp\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TPArchives_2eproto_deps[7] = {
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TPArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TPArchives_2eproto = {
  false, false, 11274, descriptor_table_protodef_TPArchives_2eproto, "TPArchives.proto", 
  &descriptor_table_TPArchives_2eproto_once, descriptor_table_TPArchives_2eproto_deps, 7, 37,
  schemas, file_default_instances, TableStruct_TPArchives_2eproto::offsets,
  file_level_metadata_TPArchives_2eproto, file_level_enum_descriptors_TPArchives_2eproto, file_level_service_descriptors_TPArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TPArchives_2eproto_getter() {
  return &descriptor_table_TPArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TPArchives_2eproto(&descriptor_table_TPArchives_2eproto);
namespace TP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[0];
}
bool SettingsArchive_FootnoteKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SettingsArchive_FootnoteKind SettingsArchive::kFootnoteKindFootnotes;
constexpr SettingsArchive_FootnoteKind SettingsArchive::kFootnoteKindDocumentEndnotes;
constexpr SettingsArchive_FootnoteKind SettingsArchive::kFootnoteKindSectionEndnotes;
constexpr SettingsArchive_FootnoteKind SettingsArchive::FootnoteKind_MIN;
constexpr SettingsArchive_FootnoteKind SettingsArchive::FootnoteKind_MAX;
constexpr int SettingsArchive::FootnoteKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[1];
}
bool SettingsArchive_FootnoteFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatNumeric;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatRoman;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatSymbolic;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatJapaneseNumeric;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatJapaneseIdeographic;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::kFootnoteFormatArabicNumeric;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::FootnoteFormat_MIN;
constexpr SettingsArchive_FootnoteFormat SettingsArchive::FootnoteFormat_MAX;
constexpr int SettingsArchive::FootnoteFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteNumbering_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[2];
}
bool SettingsArchive_FootnoteNumbering_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SettingsArchive_FootnoteNumbering SettingsArchive::kFootnoteNumberingContinuous;
constexpr SettingsArchive_FootnoteNumbering SettingsArchive::kFootnoteNumberingRestartEachPage;
constexpr SettingsArchive_FootnoteNumbering SettingsArchive::kFootnoteNumberingRestartEachSection;
constexpr SettingsArchive_FootnoteNumbering SettingsArchive::FootnoteNumbering_MIN;
constexpr SettingsArchive_FootnoteNumbering SettingsArchive::FootnoteNumbering_MAX;
constexpr int SettingsArchive::FootnoteNumbering_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageHintArchive_PageKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[3];
}
bool PageHintArchive_PageKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindNone;
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindText;
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindFiller;
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindOrphan;
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindEndnote;
constexpr PageHintArchive_PageKind PageHintArchive::kPageKindDirty;
constexpr PageHintArchive_PageKind PageHintArchive::kTPPageKindPageLayout;
constexpr PageHintArchive_PageKind PageHintArchive::PageKind_MIN;
constexpr PageHintArchive_PageKind PageHintArchive::PageKind_MAX;
constexpr int PageHintArchive::PageKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageHintArchive_PageSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[4];
}
bool PageHintArchive_PageSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PageHintArchive_PageSide PageHintArchive::kTPPageSideUnknown;
constexpr PageHintArchive_PageSide PageHintArchive::kTPPageSideLeft;
constexpr PageHintArchive_PageSide PageHintArchive::kTPPageSideRight;
constexpr PageHintArchive_PageSide PageHintArchive::PageSide_MIN;
constexpr PageHintArchive_PageSide PageHintArchive::PageSide_MAX;
constexpr int PageHintArchive::PageSide_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViewScaleMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[5];
}
bool ViewScaleMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViewScaleModeiOS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[6];
}
bool ViewScaleModeiOS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageViewState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TPArchives_2eproto);
  return file_level_enum_descriptors_TPArchives_2eproto[7];
}
bool PageViewState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DocumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentArchive>()._has_bits_);
  static const ::TSA::DocumentArchive& super(const DocumentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& stylesheet(const DocumentArchive* msg);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& floating_drawables(const DocumentArchive* msg);
  static void set_has_floating_drawables(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& body_storage(const DocumentArchive* msg);
  static void set_has_body_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& section(const DocumentArchive* msg);
  static void set_has_section(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& theme(const DocumentArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& settings(const DocumentArchive* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& deprecated_layout_state(const DocumentArchive* msg);
  static void set_has_deprecated_layout_state(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& deprecated_view_state(const DocumentArchive* msg);
  static void set_has_deprecated_view_state(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& most_recent_change_session(const DocumentArchive* msg);
  static void set_has_most_recent_change_session(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Reference& drawables_zorder(const DocumentArchive* msg);
  static void set_has_drawables_zorder(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_uses_single_header_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_page_width(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_page_height(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_left_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_right_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_top_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_bottom_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_header_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_footer_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_page_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_lays_out_body_vertically(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_change_tracking_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSP::Reference& tables_custom_format_list(const DocumentArchive* msg);
  static void set_has_tables_custom_format_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_printer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paper_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::DataReference& equation_environment(const DocumentArchive* msg);
  static void set_has_equation_environment(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_show_in_bookmarks_list_paragraph_styles_property_initialized(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSP::Reference& flow_info_container(const DocumentArchive* msg);
  static void set_has_flow_info_container(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_should_use_anchored_drawable_wrap_slop(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000400) ^ 0x00000400) != 0;
  }
};

const ::TSA::DocumentArchive&
DocumentArchive::_Internal::super(const DocumentArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::stylesheet(const DocumentArchive* msg) {
  return *msg->stylesheet_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::floating_drawables(const DocumentArchive* msg) {
  return *msg->floating_drawables_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::body_storage(const DocumentArchive* msg) {
  return *msg->body_storage_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::section(const DocumentArchive* msg) {
  return *msg->section_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::theme(const DocumentArchive* msg) {
  return *msg->theme_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::settings(const DocumentArchive* msg) {
  return *msg->settings_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::deprecated_layout_state(const DocumentArchive* msg) {
  return *msg->deprecated_layout_state_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::deprecated_view_state(const DocumentArchive* msg) {
  return *msg->deprecated_view_state_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::most_recent_change_session(const DocumentArchive* msg) {
  return *msg->most_recent_change_session_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::drawables_zorder(const DocumentArchive* msg) {
  return *msg->drawables_zorder_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::tables_custom_format_list(const DocumentArchive* msg) {
  return *msg->tables_custom_format_list_;
}
const ::TSP::DataReference&
DocumentArchive::_Internal::equation_environment(const DocumentArchive* msg) {
  return *msg->equation_environment_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::flow_info_container(const DocumentArchive* msg) {
  return *msg->flow_info_container_;
}
void DocumentArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void DocumentArchive::clear_stylesheet() {
  if (stylesheet_ != nullptr) stylesheet_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentArchive::clear_floating_drawables() {
  if (floating_drawables_ != nullptr) floating_drawables_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentArchive::clear_body_storage() {
  if (body_storage_ != nullptr) body_storage_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentArchive::clear_section() {
  if (section_ != nullptr) section_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void DocumentArchive::clear_theme() {
  if (theme_ != nullptr) theme_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void DocumentArchive::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void DocumentArchive::clear_deprecated_layout_state() {
  if (deprecated_layout_state_ != nullptr) deprecated_layout_state_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void DocumentArchive::clear_deprecated_view_state() {
  if (deprecated_view_state_ != nullptr) deprecated_view_state_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void DocumentArchive::clear_citation_records() {
  citation_records_.Clear();
}
void DocumentArchive::clear_toc_styles() {
  toc_styles_.Clear();
}
void DocumentArchive::clear_change_sessions() {
  change_sessions_.Clear();
}
void DocumentArchive::clear_most_recent_change_session() {
  if (most_recent_change_session_ != nullptr) most_recent_change_session_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void DocumentArchive::clear_drawables_zorder() {
  if (drawables_zorder_ != nullptr) drawables_zorder_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void DocumentArchive::clear_tables_custom_format_list() {
  if (tables_custom_format_list_ != nullptr) tables_custom_format_list_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void DocumentArchive::clear_equation_environment() {
  if (equation_environment_ != nullptr) equation_environment_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void DocumentArchive::clear_flow_info_container() {
  if (flow_info_container_ != nullptr) flow_info_container_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void DocumentArchive::clear_page_templates() {
  page_templates_.Clear();
}
DocumentArchive::DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  citation_records_(arena),
  toc_styles_(arena),
  change_sessions_(arena),
  page_templates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.DocumentArchive)
}
DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      citation_records_(from.citation_records_),
      toc_styles_(from.toc_styles_),
      change_sessions_(from.change_sessions_),
      page_templates_(from.page_templates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  printer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_printer_id()) {
    printer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_printer_id(), 
      GetArena());
  }
  paper_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paper_id()) {
    paper_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_paper_id(), 
      GetArena());
  }
  if (from._internal_has_stylesheet()) {
    stylesheet_ = new ::TSP::Reference(*from.stylesheet_);
  } else {
    stylesheet_ = nullptr;
  }
  if (from._internal_has_floating_drawables()) {
    floating_drawables_ = new ::TSP::Reference(*from.floating_drawables_);
  } else {
    floating_drawables_ = nullptr;
  }
  if (from._internal_has_body_storage()) {
    body_storage_ = new ::TSP::Reference(*from.body_storage_);
  } else {
    body_storage_ = nullptr;
  }
  if (from._internal_has_section()) {
    section_ = new ::TSP::Reference(*from.section_);
  } else {
    section_ = nullptr;
  }
  if (from._internal_has_theme()) {
    theme_ = new ::TSP::Reference(*from.theme_);
  } else {
    theme_ = nullptr;
  }
  if (from._internal_has_settings()) {
    settings_ = new ::TSP::Reference(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from._internal_has_deprecated_layout_state()) {
    deprecated_layout_state_ = new ::TSP::Reference(*from.deprecated_layout_state_);
  } else {
    deprecated_layout_state_ = nullptr;
  }
  if (from._internal_has_deprecated_view_state()) {
    deprecated_view_state_ = new ::TSP::Reference(*from.deprecated_view_state_);
  } else {
    deprecated_view_state_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSA::DocumentArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_most_recent_change_session()) {
    most_recent_change_session_ = new ::TSP::Reference(*from.most_recent_change_session_);
  } else {
    most_recent_change_session_ = nullptr;
  }
  if (from._internal_has_drawables_zorder()) {
    drawables_zorder_ = new ::TSP::Reference(*from.drawables_zorder_);
  } else {
    drawables_zorder_ = nullptr;
  }
  if (from._internal_has_tables_custom_format_list()) {
    tables_custom_format_list_ = new ::TSP::Reference(*from.tables_custom_format_list_);
  } else {
    tables_custom_format_list_ = nullptr;
  }
  if (from._internal_has_equation_environment()) {
    equation_environment_ = new ::TSP::DataReference(*from.equation_environment_);
  } else {
    equation_environment_ = nullptr;
  }
  if (from._internal_has_flow_info_container()) {
    flow_info_container_ = new ::TSP::Reference(*from.flow_info_container_);
  } else {
    flow_info_container_ = nullptr;
  }
  ::memcpy(&page_width_, &from.page_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_use_anchored_drawable_wrap_slop_) -
    reinterpret_cast<char*>(&page_width_)) + sizeof(should_use_anchored_drawable_wrap_slop_));
  // @@protoc_insertion_point(copy_constructor:TP.DocumentArchive)
}

void DocumentArchive::SharedCtor() {
printer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
paper_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stylesheet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_use_anchored_drawable_wrap_slop_) -
    reinterpret_cast<char*>(&stylesheet_)) + sizeof(should_use_anchored_drawable_wrap_slop_));
}

DocumentArchive::~DocumentArchive() {
  // @@protoc_insertion_point(destructor:TP.DocumentArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DocumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  printer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paper_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stylesheet_;
  if (this != internal_default_instance()) delete floating_drawables_;
  if (this != internal_default_instance()) delete body_storage_;
  if (this != internal_default_instance()) delete section_;
  if (this != internal_default_instance()) delete theme_;
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete deprecated_layout_state_;
  if (this != internal_default_instance()) delete deprecated_view_state_;
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete most_recent_change_session_;
  if (this != internal_default_instance()) delete drawables_zorder_;
  if (this != internal_default_instance()) delete tables_custom_format_list_;
  if (this != internal_default_instance()) delete equation_environment_;
  if (this != internal_default_instance()) delete flow_info_container_;
}

void DocumentArchive::ArenaDtor(void* object) {
  DocumentArchive* _this = reinterpret_cast< DocumentArchive* >(object);
  (void)_this;
}
void DocumentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.DocumentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  citation_records_.Clear();
  toc_styles_.Clear();
  change_sessions_.Clear();
  page_templates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      printer_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      paper_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stylesheet_ != nullptr);
      stylesheet_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(floating_drawables_ != nullptr);
      floating_drawables_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(body_storage_ != nullptr);
      body_storage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(section_ != nullptr);
      section_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(theme_ != nullptr);
      theme_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(deprecated_layout_state_ != nullptr);
      deprecated_layout_state_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(deprecated_view_state_ != nullptr);
      deprecated_view_state_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(most_recent_change_session_ != nullptr);
      most_recent_change_session_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(drawables_zorder_ != nullptr);
      drawables_zorder_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(tables_custom_format_list_ != nullptr);
      tables_custom_format_list_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(equation_environment_ != nullptr);
      equation_environment_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(flow_info_container_ != nullptr);
      flow_info_container_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&page_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uses_single_header_footer_) -
        reinterpret_cast<char*>(&page_width_)) + sizeof(uses_single_header_footer_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&lays_out_body_vertically_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&should_use_anchored_drawable_wrap_slop_) -
        reinterpret_cast<char*>(&lays_out_body_vertically_)) + sizeof(should_use_anchored_drawable_wrap_slop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference stylesheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference floating_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_floating_drawables(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference body_storage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference section = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_section(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference theme = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference deprecated_layout_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_layout_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference deprecated_view_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_view_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference citation_records = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_citation_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference toc_styles = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toc_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TSA.DocumentArchive super = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference change_sessions = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_change_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference most_recent_change_session = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_most_recent_change_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference drawables_zorder = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawables_zorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool uses_single_header_footer = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_uses_single_header_footer(&has_bits);
          uses_single_header_footer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float page_width = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_page_width(&has_bits);
          page_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float page_height = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_page_height(&has_bits);
          page_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float left_margin = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_left_margin(&has_bits);
          left_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float right_margin = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_right_margin(&has_bits);
          right_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float top_margin = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_top_margin(&has_bits);
          top_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bottom_margin = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_bottom_margin(&has_bits);
          bottom_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float header_margin = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_header_margin(&has_bits);
          header_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float footer_margin = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_footer_margin(&has_bits);
          footer_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float page_scale = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_page_scale(&has_bits);
          page_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool lays_out_body_vertically = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lays_out_body_vertically(&has_bits);
          lays_out_body_vertically_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool change_tracking_enabled = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_change_tracking_enabled(&has_bits);
          change_tracking_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference tables_custom_format_list = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tables_custom_format_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 orientation = 42 [default = 0];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string printer_id = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_printer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.DocumentArchive.printer_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paper_id = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_paper_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.DocumentArchive.paper_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference equation_environment = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_equation_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_in_bookmarks_list_paragraph_styles_property_initialized = 46 [default = false];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_show_in_bookmarks_list_paragraph_styles_property_initialized(&has_bits);
          show_in_bookmarks_list_paragraph_styles_property_initialized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference flow_info_container = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_info_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference page_templates = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_page_templates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool should_use_anchored_drawable_wrap_slop = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_should_use_anchored_drawable_wrap_slop(&has_bits);
          should_use_anchored_drawable_wrap_slop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.DocumentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference stylesheet = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stylesheet(this), target, stream);
  }

  // optional .TSP.Reference floating_drawables = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::floating_drawables(this), target, stream);
  }

  // optional .TSP.Reference body_storage = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::body_storage(this), target, stream);
  }

  // optional .TSP.Reference section = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::section(this), target, stream);
  }

  // optional .TSP.Reference theme = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::theme(this), target, stream);
  }

  // optional .TSP.Reference settings = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::settings(this), target, stream);
  }

  // optional .TSP.Reference deprecated_layout_state = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::deprecated_layout_state(this), target, stream);
  }

  // optional .TSP.Reference deprecated_view_state = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::deprecated_view_state(this), target, stream);
  }

  // repeated .TSP.Reference citation_records = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_citation_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_citation_records(i), target, stream);
  }

  // repeated .TSP.Reference toc_styles = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_toc_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_toc_styles(i), target, stream);
  }

  // required .TSA.DocumentArchive super = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference change_sessions = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_change_sessions(i), target, stream);
  }

  // optional .TSP.Reference most_recent_change_session = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::most_recent_change_session(this), target, stream);
  }

  // optional .TSP.Reference drawables_zorder = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::drawables_zorder(this), target, stream);
  }

  // optional bool uses_single_header_footer = 21;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_uses_single_header_footer(), target);
  }

  // optional float page_width = 30;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_page_width(), target);
  }

  // optional float page_height = 31;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_page_height(), target);
  }

  // optional float left_margin = 32;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_left_margin(), target);
  }

  // optional float right_margin = 33;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_right_margin(), target);
  }

  // optional float top_margin = 34;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_top_margin(), target);
  }

  // optional float bottom_margin = 35;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_bottom_margin(), target);
  }

  // optional float header_margin = 36;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_header_margin(), target);
  }

  // optional float footer_margin = 37;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_footer_margin(), target);
  }

  // optional float page_scale = 38;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_page_scale(), target);
  }

  // optional bool lays_out_body_vertically = 39;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_lays_out_body_vertically(), target);
  }

  // optional bool change_tracking_enabled = 40;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_change_tracking_enabled(), target);
  }

  // optional .TSP.Reference tables_custom_format_list = 41;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::tables_custom_format_list(this), target, stream);
  }

  // optional uint32 orientation = 42 [default = 0];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_orientation(), target);
  }

  // optional string printer_id = 43;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_printer_id().data(), static_cast<int>(this->_internal_printer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.DocumentArchive.printer_id");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_printer_id(), target);
  }

  // optional string paper_id = 44;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paper_id().data(), static_cast<int>(this->_internal_paper_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.DocumentArchive.paper_id");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_paper_id(), target);
  }

  // optional .TSP.DataReference equation_environment = 45;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::equation_environment(this), target, stream);
  }

  // optional bool show_in_bookmarks_list_paragraph_styles_property_initialized = 46 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_show_in_bookmarks_list_paragraph_styles_property_initialized(), target);
  }

  // optional .TSP.Reference flow_info_container = 47;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::flow_info_container(this), target, stream);
  }

  // repeated .TSP.Reference page_templates = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_page_templates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, this->_internal_page_templates(i), target, stream);
  }

  // optional bool should_use_anchored_drawable_wrap_slop = 49;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(49, this->_internal_should_use_anchored_drawable_wrap_slop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.DocumentArchive)
  return target;
}

size_t DocumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.DocumentArchive)
  size_t total_size = 0;

  // required .TSA.DocumentArchive super = 15;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference citation_records = 13;
  total_size += 1UL * this->_internal_citation_records_size();
  for (const auto& msg : this->citation_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference toc_styles = 14;
  total_size += 1UL * this->_internal_toc_styles_size();
  for (const auto& msg : this->toc_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference change_sessions = 16;
  total_size += 2UL * this->_internal_change_sessions_size();
  for (const auto& msg : this->change_sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference page_templates = 48;
  total_size += 2UL * this->_internal_page_templates_size();
  for (const auto& msg : this->page_templates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string printer_id = 43;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_printer_id());
    }

    // optional string paper_id = 44;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paper_id());
    }

    // optional .TSP.Reference stylesheet = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stylesheet_);
    }

    // optional .TSP.Reference floating_drawables = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *floating_drawables_);
    }

    // optional .TSP.Reference body_storage = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_storage_);
    }

    // optional .TSP.Reference section = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *section_);
    }

    // optional .TSP.Reference theme = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *theme_);
    }

    // optional .TSP.Reference settings = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .TSP.Reference deprecated_layout_state = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deprecated_layout_state_);
    }

    // optional .TSP.Reference deprecated_view_state = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deprecated_view_state_);
    }

  }
  if (cached_has_bits & 0x0000f800u) {
    // optional .TSP.Reference most_recent_change_session = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *most_recent_change_session_);
    }

    // optional .TSP.Reference drawables_zorder = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawables_zorder_);
    }

    // optional .TSP.Reference tables_custom_format_list = 41;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tables_custom_format_list_);
    }

    // optional .TSP.DataReference equation_environment = 45;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *equation_environment_);
    }

    // optional .TSP.Reference flow_info_container = 47;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flow_info_container_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float page_width = 30;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float page_height = 31;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float left_margin = 32;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float right_margin = 33;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float top_margin = 34;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float bottom_margin = 35;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float header_margin = 36;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional bool uses_single_header_footer = 21;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional bool lays_out_body_vertically = 39;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool change_tracking_enabled = 40;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool show_in_bookmarks_list_paragraph_styles_property_initialized = 46 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional float footer_margin = 37;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float page_scale = 38;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 orientation = 42 [default = 0];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_orientation());
    }

    // optional bool should_use_anchored_drawable_wrap_slop = 49;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DocumentArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.DocumentArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.DocumentArchive)
    MergeFrom(*source);
  }
}

void DocumentArchive::MergeFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  citation_records_.MergeFrom(from.citation_records_);
  toc_styles_.MergeFrom(from.toc_styles_);
  change_sessions_.MergeFrom(from.change_sessions_);
  page_templates_.MergeFrom(from.page_templates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_printer_id(from._internal_printer_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_paper_id(from._internal_paper_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stylesheet()->::TSP::Reference::MergeFrom(from._internal_stylesheet());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_floating_drawables()->::TSP::Reference::MergeFrom(from._internal_floating_drawables());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_body_storage()->::TSP::Reference::MergeFrom(from._internal_body_storage());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_section()->::TSP::Reference::MergeFrom(from._internal_section());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_theme()->::TSP::Reference::MergeFrom(from._internal_theme());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_settings()->::TSP::Reference::MergeFrom(from._internal_settings());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_deprecated_layout_state()->::TSP::Reference::MergeFrom(from._internal_deprecated_layout_state());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_deprecated_view_state()->::TSP::Reference::MergeFrom(from._internal_deprecated_view_state());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_super()->::TSA::DocumentArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_most_recent_change_session()->::TSP::Reference::MergeFrom(from._internal_most_recent_change_session());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_drawables_zorder()->::TSP::Reference::MergeFrom(from._internal_drawables_zorder());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_tables_custom_format_list()->::TSP::Reference::MergeFrom(from._internal_tables_custom_format_list());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_equation_environment()->::TSP::DataReference::MergeFrom(from._internal_equation_environment());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_flow_info_container()->::TSP::Reference::MergeFrom(from._internal_flow_info_container());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      page_width_ = from.page_width_;
    }
    if (cached_has_bits & 0x00020000u) {
      page_height_ = from.page_height_;
    }
    if (cached_has_bits & 0x00040000u) {
      left_margin_ = from.left_margin_;
    }
    if (cached_has_bits & 0x00080000u) {
      right_margin_ = from.right_margin_;
    }
    if (cached_has_bits & 0x00100000u) {
      top_margin_ = from.top_margin_;
    }
    if (cached_has_bits & 0x00200000u) {
      bottom_margin_ = from.bottom_margin_;
    }
    if (cached_has_bits & 0x00400000u) {
      header_margin_ = from.header_margin_;
    }
    if (cached_has_bits & 0x00800000u) {
      uses_single_header_footer_ = from.uses_single_header_footer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      lays_out_body_vertically_ = from.lays_out_body_vertically_;
    }
    if (cached_has_bits & 0x02000000u) {
      change_tracking_enabled_ = from.change_tracking_enabled_;
    }
    if (cached_has_bits & 0x04000000u) {
      show_in_bookmarks_list_paragraph_styles_property_initialized_ = from.show_in_bookmarks_list_paragraph_styles_property_initialized_;
    }
    if (cached_has_bits & 0x08000000u) {
      footer_margin_ = from.footer_margin_;
    }
    if (cached_has_bits & 0x10000000u) {
      page_scale_ = from.page_scale_;
    }
    if (cached_has_bits & 0x20000000u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x40000000u) {
      should_use_anchored_drawable_wrap_slop_ = from.should_use_anchored_drawable_wrap_slop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(citation_records_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(toc_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(change_sessions_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(page_templates_)) return false;
  if (_internal_has_stylesheet()) {
    if (!stylesheet_->IsInitialized()) return false;
  }
  if (_internal_has_floating_drawables()) {
    if (!floating_drawables_->IsInitialized()) return false;
  }
  if (_internal_has_body_storage()) {
    if (!body_storage_->IsInitialized()) return false;
  }
  if (_internal_has_section()) {
    if (!section_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!theme_->IsInitialized()) return false;
  }
  if (_internal_has_settings()) {
    if (!settings_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_layout_state()) {
    if (!deprecated_layout_state_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_view_state()) {
    if (!deprecated_view_state_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_most_recent_change_session()) {
    if (!most_recent_change_session_->IsInitialized()) return false;
  }
  if (_internal_has_drawables_zorder()) {
    if (!drawables_zorder_->IsInitialized()) return false;
  }
  if (_internal_has_tables_custom_format_list()) {
    if (!tables_custom_format_list_->IsInitialized()) return false;
  }
  if (_internal_has_equation_environment()) {
    if (!equation_environment_->IsInitialized()) return false;
  }
  if (_internal_has_flow_info_container()) {
    if (!flow_info_container_->IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::InternalSwap(DocumentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  citation_records_.InternalSwap(&other->citation_records_);
  toc_styles_.InternalSwap(&other->toc_styles_);
  change_sessions_.InternalSwap(&other->change_sessions_);
  page_templates_.InternalSwap(&other->page_templates_);
  printer_id_.Swap(&other->printer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paper_id_.Swap(&other->paper_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentArchive, should_use_anchored_drawable_wrap_slop_)
      + sizeof(DocumentArchive::should_use_anchored_drawable_wrap_slop_)
      - PROTOBUF_FIELD_OFFSET(DocumentArchive, stylesheet_)>(
          reinterpret_cast<char*>(&stylesheet_),
          reinterpret_cast<char*>(&other->stylesheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[0]);
}

// ===================================================================

class ThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeArchive>()._has_bits_);
  static const ::TSS::ThemeArchive& super(const ThemeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::ThemeArchive&
ThemeArchive::_Internal::super(const ThemeArchive* msg) {
  return *msg->super_;
}
void ThemeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ThemeArchive::ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.ThemeArchive)
}
ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::ThemeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.ThemeArchive)
}

void ThemeArchive::SharedCtor() {
super_ = nullptr;
}

ThemeArchive::~ThemeArchive() {
  // @@protoc_insertion_point(destructor:TP.ThemeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ThemeArchive::ArenaDtor(void* object) {
  ThemeArchive* _this = reinterpret_cast< ThemeArchive* >(object);
  (void)_this;
}
void ThemeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThemeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ThemeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ThemeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThemeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ThemeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.ThemeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ThemeArchive)
  return target;
}

size_t ThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ThemeArchive)
  size_t total_size = 0;

  // required .TSS.ThemeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThemeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.ThemeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ThemeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThemeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.ThemeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.ThemeArchive)
    MergeFrom(*source);
  }
}

void ThemeArchive::MergeFrom(const ThemeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.ThemeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSS::ThemeArchive::MergeFrom(from._internal_super());
  }
}

void ThemeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.ThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ThemeArchive::InternalSwap(ThemeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[1]);
}

// ===================================================================

class SettingsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SettingsArchive>()._has_bits_);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_footers(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_copy_movies(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_copy_assets(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_placeholder_authoring(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_links_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_hyphenation(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_use_ligatures(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_toc_links_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_show_ct_markup(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_show_ct_deletions(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ct_bubbles_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_change_bars_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_format_changes_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_annotations_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_document_is_rtl(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_decimal_tab(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hyphenation_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_orig_template(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bibliography_format(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_footnote_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_footnote_format(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_footnote_numbering(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_footnote_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_facing_pages(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_section_authoring(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

SettingsArchive::SettingsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.SettingsArchive)
}
SettingsArchive::SettingsArchive(const SettingsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  decimal_tab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_decimal_tab()) {
    decimal_tab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_decimal_tab(), 
      GetArena());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  hyphenation_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hyphenation_language()) {
    hyphenation_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hyphenation_language(), 
      GetArena());
  }
  creation_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_creation_locale()) {
    creation_locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creation_locale(), 
      GetArena());
  }
  last_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_locale()) {
    last_locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_locale(), 
      GetArena());
  }
  orig_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_orig_template()) {
    orig_template_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_orig_template(), 
      GetArena());
  }
  creation_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_creation_date()) {
    creation_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creation_date(), 
      GetArena());
  }
  bibliography_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bibliography_format()) {
    bibliography_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bibliography_format(), 
      GetArena());
  }
  ::memcpy(&placeholder_authoring_, &from.placeholder_authoring_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_ct_markup_) -
    reinterpret_cast<char*>(&placeholder_authoring_)) + sizeof(show_ct_markup_));
  // @@protoc_insertion_point(copy_constructor:TP.SettingsArchive)
}

void SettingsArchive::SharedCtor() {
decimal_tab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hyphenation_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
creation_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
orig_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
creation_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bibliography_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&placeholder_authoring_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&footnote_gap_) -
    reinterpret_cast<char*>(&placeholder_authoring_)) + sizeof(footnote_gap_));
show_ct_deletions_ = true;
change_bars_visible_ = true;
format_changes_visible_ = true;
annotations_visible_ = true;
body_ = true;
headers_ = true;
footers_ = true;
preview_ = true;
copy_movies_ = true;
copy_assets_ = true;
links_enabled_ = true;
show_ct_markup_ = true;
}

SettingsArchive::~SettingsArchive() {
  // @@protoc_insertion_point(destructor:TP.SettingsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SettingsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  decimal_tab_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hyphenation_language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creation_locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orig_template_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creation_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bibliography_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SettingsArchive::ArenaDtor(void* object) {
  SettingsArchive* _this = reinterpret_cast< SettingsArchive* >(object);
  (void)_this;
}
void SettingsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SettingsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SettingsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SettingsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      decimal_tab_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      hyphenation_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      creation_locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      last_locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      orig_template_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      creation_date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      bibliography_format_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&placeholder_authoring_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&facing_pages_) -
        reinterpret_cast<char*>(&placeholder_authoring_)) + sizeof(facing_pages_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&section_authoring_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&footnote_gap_) -
        reinterpret_cast<char*>(&section_authoring_)) + sizeof(footnote_gap_));
    show_ct_deletions_ = true;
    change_bars_visible_ = true;
    format_changes_visible_ = true;
    annotations_visible_ = true;
  }
  if (cached_has_bits & 0xff000000u) {
    body_ = true;
    headers_ = true;
    footers_ = true;
    preview_ = true;
    copy_movies_ = true;
    copy_assets_ = true;
    links_enabled_ = true;
    show_ct_markup_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool body = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_body(&has_bits);
          body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool headers = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_headers(&has_bits);
          headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool footers = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_footers(&has_bits);
          footers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preview = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_preview(&has_bits);
          preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool copy_movies = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_copy_movies(&has_bits);
          copy_movies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool copy_assets = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_copy_assets(&has_bits);
          copy_assets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool placeholder_authoring = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_placeholder_authoring(&has_bits);
          placeholder_authoring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool links_enabled = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_links_enabled(&has_bits);
          links_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hyphenation = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_hyphenation(&has_bits);
          hyphenation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_ligatures = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_use_ligatures(&has_bits);
          use_ligatures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool toc_links_enabled = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_toc_links_enabled(&has_bits);
          toc_links_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_ct_markup = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_show_ct_markup(&has_bits);
          show_ct_markup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_ct_deletions = 13 [default = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_show_ct_deletions(&has_bits);
          show_ct_deletions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ct_bubbles_visibility = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_ct_bubbles_visibility(&has_bits);
          ct_bubbles_visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool change_bars_visible = 15 [default = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_change_bars_visible(&has_bits);
          change_bars_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool format_changes_visible = 16 [default = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_format_changes_visible(&has_bits);
          format_changes_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool annotations_visible = 17 [default = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_annotations_visible(&has_bits);
          annotations_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool document_is_rtl = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_document_is_rtl(&has_bits);
          document_is_rtl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string decimal_tab = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_decimal_tab();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.SettingsArchive.decimal_tab");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.SettingsArchive.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hyphenation_language = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_hyphenation_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.SettingsArchive.hyphenation_language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string creation_locale = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_creation_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.SettingsArchive.creation_locale");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_locale = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_last_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.SettingsArchive.last_locale");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string orig_template = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_orig_template();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.SettingsArchive.orig_template");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string creation_date = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_creation_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.SettingsArchive.creation_date");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bibliography_format = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_bibliography_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.SettingsArchive.bibliography_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::SettingsArchive_FootnoteKind_IsValid(val))) {
            _internal_set_footnote_kind(static_cast<::TP::SettingsArchive_FootnoteKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::SettingsArchive_FootnoteFormat_IsValid(val))) {
            _internal_set_footnote_format(static_cast<::TP::SettingsArchive_FootnoteFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::SettingsArchive_FootnoteNumbering_IsValid(val))) {
            _internal_set_footnote_numbering(static_cast<::TP::SettingsArchive_FootnoteNumbering>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(32, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 footnote_gap = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_footnote_gap(&has_bits);
          footnote_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool facing_pages = 34 [default = false];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_facing_pages(&has_bits);
          facing_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool section_authoring = 40 [default = false];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_section_authoring(&has_bits);
          section_authoring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettingsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SettingsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool body = 1 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_body(), target);
  }

  // optional bool headers = 2 [default = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_headers(), target);
  }

  // optional bool footers = 3 [default = true];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_footers(), target);
  }

  // optional bool preview = 4 [default = true];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_preview(), target);
  }

  // optional bool copy_movies = 5 [default = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_copy_movies(), target);
  }

  // optional bool copy_assets = 6 [default = true];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_copy_assets(), target);
  }

  // optional bool placeholder_authoring = 7 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_placeholder_authoring(), target);
  }

  // optional bool links_enabled = 8 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_links_enabled(), target);
  }

  // optional bool hyphenation = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_hyphenation(), target);
  }

  // optional bool use_ligatures = 10 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_use_ligatures(), target);
  }

  // optional bool toc_links_enabled = 11 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_toc_links_enabled(), target);
  }

  // optional bool show_ct_markup = 12 [default = true];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_show_ct_markup(), target);
  }

  // optional bool show_ct_deletions = 13 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_show_ct_deletions(), target);
  }

  // optional int32 ct_bubbles_visibility = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_ct_bubbles_visibility(), target);
  }

  // optional bool change_bars_visible = 15 [default = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_change_bars_visible(), target);
  }

  // optional bool format_changes_visible = 16 [default = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_format_changes_visible(), target);
  }

  // optional bool annotations_visible = 17 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_annotations_visible(), target);
  }

  // optional bool document_is_rtl = 18 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_document_is_rtl(), target);
  }

  // optional string decimal_tab = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decimal_tab().data(), static_cast<int>(this->_internal_decimal_tab().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.decimal_tab");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_decimal_tab(), target);
  }

  // optional string language = 21;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.language");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_language(), target);
  }

  // optional string hyphenation_language = 22;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hyphenation_language().data(), static_cast<int>(this->_internal_hyphenation_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.hyphenation_language");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_hyphenation_language(), target);
  }

  // optional string creation_locale = 23;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creation_locale().data(), static_cast<int>(this->_internal_creation_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.creation_locale");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_creation_locale(), target);
  }

  // optional string last_locale = 24;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_locale().data(), static_cast<int>(this->_internal_last_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.last_locale");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_last_locale(), target);
  }

  // optional string orig_template = 25;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_orig_template().data(), static_cast<int>(this->_internal_orig_template().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.orig_template");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_orig_template(), target);
  }

  // optional string creation_date = 26;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creation_date().data(), static_cast<int>(this->_internal_creation_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.creation_date");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_creation_date(), target);
  }

  // optional string bibliography_format = 27;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bibliography_format().data(), static_cast<int>(this->_internal_bibliography_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SettingsArchive.bibliography_format");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_bibliography_format(), target);
  }

  // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_footnote_kind(), target);
  }

  // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->_internal_footnote_format(), target);
  }

  // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      32, this->_internal_footnote_numbering(), target);
  }

  // optional int32 footnote_gap = 33;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_footnote_gap(), target);
  }

  // optional bool facing_pages = 34 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_facing_pages(), target);
  }

  // optional bool section_authoring = 40 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_section_authoring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SettingsArchive)
  return target;
}

size_t SettingsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SettingsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string decimal_tab = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decimal_tab());
    }

    // optional string language = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string hyphenation_language = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hyphenation_language());
    }

    // optional string creation_locale = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creation_locale());
    }

    // optional string last_locale = 24;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_locale());
    }

    // optional string orig_template = 25;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_orig_template());
    }

    // optional string creation_date = 26;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creation_date());
    }

    // optional string bibliography_format = 27;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bibliography_format());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool placeholder_authoring = 7 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool hyphenation = 9 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool use_ligatures = 10 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool toc_links_enabled = 11 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 ct_bubbles_visibility = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ct_bubbles_visibility());
    }

    // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_footnote_kind());
    }

    // optional bool document_is_rtl = 18 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool facing_pages = 34 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool section_authoring = 40 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_footnote_format());
    }

    // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_footnote_numbering());
    }

    // optional int32 footnote_gap = 33;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_footnote_gap());
    }

    // optional bool show_ct_deletions = 13 [default = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool change_bars_visible = 15 [default = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool format_changes_visible = 16 [default = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool annotations_visible = 17 [default = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool body = 1 [default = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool headers = 2 [default = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 1;
    }

    // optional bool footers = 3 [default = true];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional bool preview = 4 [default = true];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 1;
    }

    // optional bool copy_movies = 5 [default = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 1;
    }

    // optional bool copy_assets = 6 [default = true];
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 1;
    }

    // optional bool links_enabled = 8 [default = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 + 1;
    }

    // optional bool show_ct_markup = 12 [default = true];
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.SettingsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettingsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.SettingsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.SettingsArchive)
    MergeFrom(*source);
  }
}

void SettingsArchive::MergeFrom(const SettingsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.SettingsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_decimal_tab(from._internal_decimal_tab());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_hyphenation_language(from._internal_hyphenation_language());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_creation_locale(from._internal_creation_locale());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_last_locale(from._internal_last_locale());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_orig_template(from._internal_orig_template());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_creation_date(from._internal_creation_date());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_bibliography_format(from._internal_bibliography_format());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      placeholder_authoring_ = from.placeholder_authoring_;
    }
    if (cached_has_bits & 0x00000200u) {
      hyphenation_ = from.hyphenation_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_ligatures_ = from.use_ligatures_;
    }
    if (cached_has_bits & 0x00000800u) {
      toc_links_enabled_ = from.toc_links_enabled_;
    }
    if (cached_has_bits & 0x00001000u) {
      ct_bubbles_visibility_ = from.ct_bubbles_visibility_;
    }
    if (cached_has_bits & 0x00002000u) {
      footnote_kind_ = from.footnote_kind_;
    }
    if (cached_has_bits & 0x00004000u) {
      document_is_rtl_ = from.document_is_rtl_;
    }
    if (cached_has_bits & 0x00008000u) {
      facing_pages_ = from.facing_pages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      section_authoring_ = from.section_authoring_;
    }
    if (cached_has_bits & 0x00020000u) {
      footnote_format_ = from.footnote_format_;
    }
    if (cached_has_bits & 0x00040000u) {
      footnote_numbering_ = from.footnote_numbering_;
    }
    if (cached_has_bits & 0x00080000u) {
      footnote_gap_ = from.footnote_gap_;
    }
    if (cached_has_bits & 0x00100000u) {
      show_ct_deletions_ = from.show_ct_deletions_;
    }
    if (cached_has_bits & 0x00200000u) {
      change_bars_visible_ = from.change_bars_visible_;
    }
    if (cached_has_bits & 0x00400000u) {
      format_changes_visible_ = from.format_changes_visible_;
    }
    if (cached_has_bits & 0x00800000u) {
      annotations_visible_ = from.annotations_visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      body_ = from.body_;
    }
    if (cached_has_bits & 0x02000000u) {
      headers_ = from.headers_;
    }
    if (cached_has_bits & 0x04000000u) {
      footers_ = from.footers_;
    }
    if (cached_has_bits & 0x08000000u) {
      preview_ = from.preview_;
    }
    if (cached_has_bits & 0x10000000u) {
      copy_movies_ = from.copy_movies_;
    }
    if (cached_has_bits & 0x20000000u) {
      copy_assets_ = from.copy_assets_;
    }
    if (cached_has_bits & 0x40000000u) {
      links_enabled_ = from.links_enabled_;
    }
    if (cached_has_bits & 0x80000000u) {
      show_ct_markup_ = from.show_ct_markup_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SettingsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.SettingsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsArchive::CopyFrom(const SettingsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SettingsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsArchive::IsInitialized() const {
  return true;
}

void SettingsArchive::InternalSwap(SettingsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  decimal_tab_.Swap(&other->decimal_tab_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hyphenation_language_.Swap(&other->hyphenation_language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  creation_locale_.Swap(&other->creation_locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_locale_.Swap(&other->last_locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orig_template_.Swap(&other->orig_template_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  creation_date_.Swap(&other->creation_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bibliography_format_.Swap(&other->bibliography_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SettingsArchive, footnote_gap_)
      + sizeof(SettingsArchive::footnote_gap_)
      - PROTOBUF_FIELD_OFFSET(SettingsArchive, placeholder_authoring_)>(
          reinterpret_cast<char*>(&placeholder_authoring_),
          reinterpret_cast<char*>(&other->placeholder_authoring_));
  swap(show_ct_deletions_, other->show_ct_deletions_);
  swap(change_bars_visible_, other->change_bars_visible_);
  swap(format_changes_visible_, other->format_changes_visible_);
  swap(annotations_visible_, other->annotations_visible_);
  swap(body_, other->body_);
  swap(headers_, other->headers_);
  swap(footers_, other->footers_);
  swap(preview_, other->preview_);
  swap(copy_movies_, other->copy_movies_);
  swap(copy_assets_, other->copy_assets_);
  swap(links_enabled_, other->links_enabled_);
  swap(show_ct_markup_, other->show_ct_markup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[2]);
}

// ===================================================================

class PlaceholderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaceholderArchive>()._has_bits_);
  static const ::TSWP::ShapeInfoArchive& super(const PlaceholderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ShapeInfoArchive&
PlaceholderArchive::_Internal::super(const PlaceholderArchive* msg) {
  return *msg->super_;
}
void PlaceholderArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PlaceholderArchive::PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.PlaceholderArchive)
}
PlaceholderArchive::PlaceholderArchive(const PlaceholderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::ShapeInfoArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.PlaceholderArchive)
}

void PlaceholderArchive::SharedCtor() {
super_ = nullptr;
}

PlaceholderArchive::~PlaceholderArchive() {
  // @@protoc_insertion_point(destructor:TP.PlaceholderArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceholderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void PlaceholderArchive::ArenaDtor(void* object) {
  PlaceholderArchive* _this = reinterpret_cast< PlaceholderArchive* >(object);
  (void)_this;
}
void PlaceholderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceholderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceholderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.PlaceholderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceholderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceholderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.PlaceholderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.ShapeInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.PlaceholderArchive)
  return target;
}

size_t PlaceholderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.PlaceholderArchive)
  size_t total_size = 0;

  // required .TSWP.ShapeInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceholderArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.PlaceholderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceholderArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceholderArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.PlaceholderArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.PlaceholderArchive)
    MergeFrom(*source);
  }
}

void PlaceholderArchive::MergeFrom(const PlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.PlaceholderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(from._internal_super());
  }
}

void PlaceholderArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.PlaceholderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceholderArchive::CopyFrom(const PlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.PlaceholderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void PlaceholderArchive::InternalSwap(PlaceholderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[3]);
}

// ===================================================================

class DrawableTagPairsArchive_DrawableTagPair::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableTagPairsArchive_DrawableTagPair>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& drawable(const DrawableTagPairsArchive_DrawableTagPair* msg);
  static void set_has_drawable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
DrawableTagPairsArchive_DrawableTagPair::_Internal::drawable(const DrawableTagPairsArchive_DrawableTagPair* msg) {
  return *msg->drawable_;
}
void DrawableTagPairsArchive_DrawableTagPair::clear_drawable() {
  if (drawable_ != nullptr) drawable_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DrawableTagPairsArchive_DrawableTagPair::DrawableTagPairsArchive_DrawableTagPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.DrawableTagPairsArchive.DrawableTagPair)
}
DrawableTagPairsArchive_DrawableTagPair::DrawableTagPairsArchive_DrawableTagPair(const DrawableTagPairsArchive_DrawableTagPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  if (from._internal_has_drawable()) {
    drawable_ = new ::TSP::Reference(*from.drawable_);
  } else {
    drawable_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.DrawableTagPairsArchive.DrawableTagPair)
}

void DrawableTagPairsArchive_DrawableTagPair::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
drawable_ = nullptr;
}

DrawableTagPairsArchive_DrawableTagPair::~DrawableTagPairsArchive_DrawableTagPair() {
  // @@protoc_insertion_point(destructor:TP.DrawableTagPairsArchive.DrawableTagPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableTagPairsArchive_DrawableTagPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete drawable_;
}

void DrawableTagPairsArchive_DrawableTagPair::ArenaDtor(void* object) {
  DrawableTagPairsArchive_DrawableTagPair* _this = reinterpret_cast< DrawableTagPairsArchive_DrawableTagPair* >(object);
  (void)_this;
}
void DrawableTagPairsArchive_DrawableTagPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableTagPairsArchive_DrawableTagPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableTagPairsArchive_DrawableTagPair::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.DrawableTagPairsArchive.DrawableTagPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(drawable_ != nullptr);
      drawable_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableTagPairsArchive_DrawableTagPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.DrawableTagPairsArchive.DrawableTagPair.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference drawable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableTagPairsArchive_DrawableTagPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.DrawableTagPairsArchive.DrawableTagPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.DrawableTagPairsArchive.DrawableTagPair.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // required .TSP.Reference drawable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::drawable(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.DrawableTagPairsArchive.DrawableTagPair)
  return target;
}

size_t DrawableTagPairsArchive_DrawableTagPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.DrawableTagPairsArchive.DrawableTagPair)
  size_t total_size = 0;

  if (_internal_has_tag()) {
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (_internal_has_drawable()) {
    // required .TSP.Reference drawable = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drawable_);
  }

  return total_size;
}
size_t DrawableTagPairsArchive_DrawableTagPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.DrawableTagPairsArchive.DrawableTagPair)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());

    // required .TSP.Reference drawable = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drawable_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableTagPairsArchive_DrawableTagPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.DrawableTagPairsArchive.DrawableTagPair)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableTagPairsArchive_DrawableTagPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableTagPairsArchive_DrawableTagPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.DrawableTagPairsArchive.DrawableTagPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.DrawableTagPairsArchive.DrawableTagPair)
    MergeFrom(*source);
  }
}

void DrawableTagPairsArchive_DrawableTagPair::MergeFrom(const DrawableTagPairsArchive_DrawableTagPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.DrawableTagPairsArchive.DrawableTagPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_drawable()->::TSP::Reference::MergeFrom(from._internal_drawable());
    }
  }
}

void DrawableTagPairsArchive_DrawableTagPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.DrawableTagPairsArchive.DrawableTagPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableTagPairsArchive_DrawableTagPair::CopyFrom(const DrawableTagPairsArchive_DrawableTagPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.DrawableTagPairsArchive.DrawableTagPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableTagPairsArchive_DrawableTagPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_drawable()) {
    if (!drawable_->IsInitialized()) return false;
  }
  return true;
}

void DrawableTagPairsArchive_DrawableTagPair::InternalSwap(DrawableTagPairsArchive_DrawableTagPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(drawable_, other->drawable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableTagPairsArchive_DrawableTagPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[4]);
}

// ===================================================================

class DrawableTagPairsArchive::_Internal {
 public:
};

DrawableTagPairsArchive::DrawableTagPairsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drawable_tag_pairs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.DrawableTagPairsArchive)
}
DrawableTagPairsArchive::DrawableTagPairsArchive(const DrawableTagPairsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      drawable_tag_pairs_(from.drawable_tag_pairs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TP.DrawableTagPairsArchive)
}

void DrawableTagPairsArchive::SharedCtor() {
}

DrawableTagPairsArchive::~DrawableTagPairsArchive() {
  // @@protoc_insertion_point(destructor:TP.DrawableTagPairsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableTagPairsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DrawableTagPairsArchive::ArenaDtor(void* object) {
  DrawableTagPairsArchive* _this = reinterpret_cast< DrawableTagPairsArchive* >(object);
  (void)_this;
}
void DrawableTagPairsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableTagPairsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableTagPairsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.DrawableTagPairsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawable_tag_pairs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableTagPairsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TP.DrawableTagPairsArchive.DrawableTagPair drawable_tag_pairs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_tag_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableTagPairsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.DrawableTagPairsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TP.DrawableTagPairsArchive.DrawableTagPair drawable_tag_pairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawable_tag_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_drawable_tag_pairs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.DrawableTagPairsArchive)
  return target;
}

size_t DrawableTagPairsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.DrawableTagPairsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.DrawableTagPairsArchive.DrawableTagPair drawable_tag_pairs = 1;
  total_size += 1UL * this->_internal_drawable_tag_pairs_size();
  for (const auto& msg : this->drawable_tag_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableTagPairsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.DrawableTagPairsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableTagPairsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableTagPairsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.DrawableTagPairsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.DrawableTagPairsArchive)
    MergeFrom(*source);
  }
}

void DrawableTagPairsArchive::MergeFrom(const DrawableTagPairsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.DrawableTagPairsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawable_tag_pairs_.MergeFrom(from.drawable_tag_pairs_);
}

void DrawableTagPairsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.DrawableTagPairsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableTagPairsArchive::CopyFrom(const DrawableTagPairsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.DrawableTagPairsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableTagPairsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawable_tag_pairs_)) return false;
  return true;
}

void DrawableTagPairsArchive::InternalSwap(DrawableTagPairsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  drawable_tag_pairs_.InternalSwap(&other->drawable_tag_pairs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableTagPairsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[5]);
}

// ===================================================================

class FloatingDrawablesArchive_DrawableEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatingDrawablesArchive_DrawableEntry>()._has_bits_);
  static const ::TSP::Reference& drawable(const FloatingDrawablesArchive_DrawableEntry* msg);
  static void set_has_drawable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
FloatingDrawablesArchive_DrawableEntry::_Internal::drawable(const FloatingDrawablesArchive_DrawableEntry* msg) {
  return *msg->drawable_;
}
void FloatingDrawablesArchive_DrawableEntry::clear_drawable() {
  if (drawable_ != nullptr) drawable_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FloatingDrawablesArchive_DrawableEntry::FloatingDrawablesArchive_DrawableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.FloatingDrawablesArchive.DrawableEntry)
}
FloatingDrawablesArchive_DrawableEntry::FloatingDrawablesArchive_DrawableEntry(const FloatingDrawablesArchive_DrawableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drawable()) {
    drawable_ = new ::TSP::Reference(*from.drawable_);
  } else {
    drawable_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.FloatingDrawablesArchive.DrawableEntry)
}

void FloatingDrawablesArchive_DrawableEntry::SharedCtor() {
drawable_ = nullptr;
}

FloatingDrawablesArchive_DrawableEntry::~FloatingDrawablesArchive_DrawableEntry() {
  // @@protoc_insertion_point(destructor:TP.FloatingDrawablesArchive.DrawableEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloatingDrawablesArchive_DrawableEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete drawable_;
}

void FloatingDrawablesArchive_DrawableEntry::ArenaDtor(void* object) {
  FloatingDrawablesArchive_DrawableEntry* _this = reinterpret_cast< FloatingDrawablesArchive_DrawableEntry* >(object);
  (void)_this;
}
void FloatingDrawablesArchive_DrawableEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatingDrawablesArchive_DrawableEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatingDrawablesArchive_DrawableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.FloatingDrawablesArchive.DrawableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(drawable_ != nullptr);
    drawable_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingDrawablesArchive_DrawableEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference drawable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatingDrawablesArchive_DrawableEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.FloatingDrawablesArchive.DrawableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference drawable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::drawable(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.FloatingDrawablesArchive.DrawableEntry)
  return target;
}

size_t FloatingDrawablesArchive_DrawableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.FloatingDrawablesArchive.DrawableEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference drawable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drawable_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatingDrawablesArchive_DrawableEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.FloatingDrawablesArchive.DrawableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatingDrawablesArchive_DrawableEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatingDrawablesArchive_DrawableEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.FloatingDrawablesArchive.DrawableEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.FloatingDrawablesArchive.DrawableEntry)
    MergeFrom(*source);
  }
}

void FloatingDrawablesArchive_DrawableEntry::MergeFrom(const FloatingDrawablesArchive_DrawableEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.FloatingDrawablesArchive.DrawableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_drawable()) {
    _internal_mutable_drawable()->::TSP::Reference::MergeFrom(from._internal_drawable());
  }
}

void FloatingDrawablesArchive_DrawableEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.FloatingDrawablesArchive.DrawableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatingDrawablesArchive_DrawableEntry::CopyFrom(const FloatingDrawablesArchive_DrawableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.FloatingDrawablesArchive.DrawableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingDrawablesArchive_DrawableEntry::IsInitialized() const {
  if (_internal_has_drawable()) {
    if (!drawable_->IsInitialized()) return false;
  }
  return true;
}

void FloatingDrawablesArchive_DrawableEntry::InternalSwap(FloatingDrawablesArchive_DrawableEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(drawable_, other->drawable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingDrawablesArchive_DrawableEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[6]);
}

// ===================================================================

class FloatingDrawablesArchive_PageGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatingDrawablesArchive_PageGroup>()._has_bits_);
  static void set_has_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FloatingDrawablesArchive_PageGroup::FloatingDrawablesArchive_PageGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  background_drawables_(arena),
  foreground_drawables_(arena),
  drawables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.FloatingDrawablesArchive.PageGroup)
}
FloatingDrawablesArchive_PageGroup::FloatingDrawablesArchive_PageGroup(const FloatingDrawablesArchive_PageGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      background_drawables_(from.background_drawables_),
      foreground_drawables_(from.foreground_drawables_),
      drawables_(from.drawables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_index_ = from.page_index_;
  // @@protoc_insertion_point(copy_constructor:TP.FloatingDrawablesArchive.PageGroup)
}

void FloatingDrawablesArchive_PageGroup::SharedCtor() {
page_index_ = 0u;
}

FloatingDrawablesArchive_PageGroup::~FloatingDrawablesArchive_PageGroup() {
  // @@protoc_insertion_point(destructor:TP.FloatingDrawablesArchive.PageGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloatingDrawablesArchive_PageGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FloatingDrawablesArchive_PageGroup::ArenaDtor(void* object) {
  FloatingDrawablesArchive_PageGroup* _this = reinterpret_cast< FloatingDrawablesArchive_PageGroup* >(object);
  (void)_this;
}
void FloatingDrawablesArchive_PageGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatingDrawablesArchive_PageGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatingDrawablesArchive_PageGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.FloatingDrawablesArchive.PageGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  background_drawables_.Clear();
  foreground_drawables_.Clear();
  drawables_.Clear();
  page_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingDrawablesArchive_PageGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 page_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page_index(&has_bits);
          page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_background_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_foreground_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatingDrawablesArchive_PageGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.FloatingDrawablesArchive.PageGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 page_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_index(), target);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_background_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_background_drawables(i), target, stream);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_foreground_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_foreground_drawables(i), target, stream);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_drawables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.FloatingDrawablesArchive.PageGroup)
  return target;
}

size_t FloatingDrawablesArchive_PageGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.FloatingDrawablesArchive.PageGroup)
  size_t total_size = 0;

  // required uint32 page_index = 1;
  if (_internal_has_page_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_index());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
  total_size += 1UL * this->_internal_background_drawables_size();
  for (const auto& msg : this->background_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
  total_size += 1UL * this->_internal_foreground_drawables_size();
  for (const auto& msg : this->foreground_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatingDrawablesArchive_PageGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.FloatingDrawablesArchive.PageGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatingDrawablesArchive_PageGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatingDrawablesArchive_PageGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.FloatingDrawablesArchive.PageGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.FloatingDrawablesArchive.PageGroup)
    MergeFrom(*source);
  }
}

void FloatingDrawablesArchive_PageGroup::MergeFrom(const FloatingDrawablesArchive_PageGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.FloatingDrawablesArchive.PageGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  background_drawables_.MergeFrom(from.background_drawables_);
  foreground_drawables_.MergeFrom(from.foreground_drawables_);
  drawables_.MergeFrom(from.drawables_);
  if (from._internal_has_page_index()) {
    _internal_set_page_index(from._internal_page_index());
  }
}

void FloatingDrawablesArchive_PageGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.FloatingDrawablesArchive.PageGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatingDrawablesArchive_PageGroup::CopyFrom(const FloatingDrawablesArchive_PageGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.FloatingDrawablesArchive.PageGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingDrawablesArchive_PageGroup::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(background_drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(foreground_drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_)) return false;
  return true;
}

void FloatingDrawablesArchive_PageGroup::InternalSwap(FloatingDrawablesArchive_PageGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  background_drawables_.InternalSwap(&other->background_drawables_);
  foreground_drawables_.InternalSwap(&other->foreground_drawables_);
  drawables_.InternalSwap(&other->drawables_);
  swap(page_index_, other->page_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingDrawablesArchive_PageGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[7]);
}

// ===================================================================

class FloatingDrawablesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatingDrawablesArchive>()._has_bits_);
  static const ::TP::DrawableTagPairsArchive& drawable_tag_pairs(const FloatingDrawablesArchive* msg);
  static void set_has_drawable_tag_pairs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TP::DrawableTagPairsArchive&
FloatingDrawablesArchive::_Internal::drawable_tag_pairs(const FloatingDrawablesArchive* msg) {
  return *msg->drawable_tag_pairs_;
}
FloatingDrawablesArchive::FloatingDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  page_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.FloatingDrawablesArchive)
}
FloatingDrawablesArchive::FloatingDrawablesArchive(const FloatingDrawablesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      page_groups_(from.page_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drawable_tag_pairs()) {
    drawable_tag_pairs_ = new ::TP::DrawableTagPairsArchive(*from.drawable_tag_pairs_);
  } else {
    drawable_tag_pairs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.FloatingDrawablesArchive)
}

void FloatingDrawablesArchive::SharedCtor() {
drawable_tag_pairs_ = nullptr;
}

FloatingDrawablesArchive::~FloatingDrawablesArchive() {
  // @@protoc_insertion_point(destructor:TP.FloatingDrawablesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloatingDrawablesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete drawable_tag_pairs_;
}

void FloatingDrawablesArchive::ArenaDtor(void* object) {
  FloatingDrawablesArchive* _this = reinterpret_cast< FloatingDrawablesArchive* >(object);
  (void)_this;
}
void FloatingDrawablesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatingDrawablesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatingDrawablesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.FloatingDrawablesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(drawable_tag_pairs_ != nullptr);
    drawable_tag_pairs_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatingDrawablesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TP.DrawableTagPairsArchive drawable_tag_pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_tag_pairs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatingDrawablesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.FloatingDrawablesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_page_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_page_groups(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TP.DrawableTagPairsArchive drawable_tag_pairs = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::drawable_tag_pairs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.FloatingDrawablesArchive)
  return target;
}

size_t FloatingDrawablesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.FloatingDrawablesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
  total_size += 1UL * this->_internal_page_groups_size();
  for (const auto& msg : this->page_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TP.DrawableTagPairsArchive drawable_tag_pairs = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drawable_tag_pairs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatingDrawablesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.FloatingDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatingDrawablesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatingDrawablesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.FloatingDrawablesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.FloatingDrawablesArchive)
    MergeFrom(*source);
  }
}

void FloatingDrawablesArchive::MergeFrom(const FloatingDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.FloatingDrawablesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  page_groups_.MergeFrom(from.page_groups_);
  if (from._internal_has_drawable_tag_pairs()) {
    _internal_mutable_drawable_tag_pairs()->::TP::DrawableTagPairsArchive::MergeFrom(from._internal_drawable_tag_pairs());
  }
}

void FloatingDrawablesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.FloatingDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatingDrawablesArchive::CopyFrom(const FloatingDrawablesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.FloatingDrawablesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatingDrawablesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(page_groups_)) return false;
  if (_internal_has_drawable_tag_pairs()) {
    if (!drawable_tag_pairs_->IsInitialized()) return false;
  }
  return true;
}

void FloatingDrawablesArchive::InternalSwap(FloatingDrawablesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  page_groups_.InternalSwap(&other->page_groups_);
  swap(drawable_tag_pairs_, other->drawable_tag_pairs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatingDrawablesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[8]);
}

// ===================================================================

class DrawablesZOrderArchive::_Internal {
 public:
};

void DrawablesZOrderArchive::clear_drawables() {
  drawables_.Clear();
}
DrawablesZOrderArchive::DrawablesZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drawables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.DrawablesZOrderArchive)
}
DrawablesZOrderArchive::DrawablesZOrderArchive(const DrawablesZOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      drawables_(from.drawables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TP.DrawablesZOrderArchive)
}

void DrawablesZOrderArchive::SharedCtor() {
}

DrawablesZOrderArchive::~DrawablesZOrderArchive() {
  // @@protoc_insertion_point(destructor:TP.DrawablesZOrderArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawablesZOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DrawablesZOrderArchive::ArenaDtor(void* object) {
  DrawablesZOrderArchive* _this = reinterpret_cast< DrawablesZOrderArchive* >(object);
  (void)_this;
}
void DrawablesZOrderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawablesZOrderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawablesZOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.DrawablesZOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawablesZOrderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference drawables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawablesZOrderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.DrawablesZOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_drawables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.DrawablesZOrderArchive)
  return target;
}

size_t DrawablesZOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.DrawablesZOrderArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 1;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawablesZOrderArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.DrawablesZOrderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawablesZOrderArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawablesZOrderArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.DrawablesZOrderArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.DrawablesZOrderArchive)
    MergeFrom(*source);
  }
}

void DrawablesZOrderArchive::MergeFrom(const DrawablesZOrderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.DrawablesZOrderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawables_.MergeFrom(from.drawables_);
}

void DrawablesZOrderArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.DrawablesZOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawablesZOrderArchive::CopyFrom(const DrawablesZOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.DrawablesZOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablesZOrderArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawables_)) return false;
  return true;
}

void DrawablesZOrderArchive::InternalSwap(DrawablesZOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  drawables_.InternalSwap(&other->drawables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawablesZOrderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[9]);
}

// ===================================================================

class PageMasterArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PageMasterArchive>()._has_bits_);
  static const ::TSP::UUIDPath& page_template_uuidpath(const PageMasterArchive* msg);
  static void set_has_page_template_uuidpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::UUIDPath&
PageMasterArchive::_Internal::page_template_uuidpath(const PageMasterArchive* msg) {
  return *msg->page_template_uuidpath_;
}
void PageMasterArchive::clear_headers() {
  headers_.Clear();
}
void PageMasterArchive::clear_footers() {
  footers_.Clear();
}
void PageMasterArchive::clear_master_drawables() {
  master_drawables_.Clear();
}
void PageMasterArchive::clear_page_template_uuidpath() {
  if (page_template_uuidpath_ != nullptr) page_template_uuidpath_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PageMasterArchive::PageMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena),
  footers_(arena),
  master_drawables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.PageMasterArchive)
}
PageMasterArchive::PageMasterArchive(const PageMasterArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      headers_(from.headers_),
      footers_(from.footers_),
      master_drawables_(from.master_drawables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_page_template_uuidpath()) {
    page_template_uuidpath_ = new ::TSP::UUIDPath(*from.page_template_uuidpath_);
  } else {
    page_template_uuidpath_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.PageMasterArchive)
}

void PageMasterArchive::SharedCtor() {
page_template_uuidpath_ = nullptr;
}

PageMasterArchive::~PageMasterArchive() {
  // @@protoc_insertion_point(destructor:TP.PageMasterArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PageMasterArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete page_template_uuidpath_;
}

void PageMasterArchive::ArenaDtor(void* object) {
  PageMasterArchive* _this = reinterpret_cast< PageMasterArchive* >(object);
  (void)_this;
}
void PageMasterArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PageMasterArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageMasterArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.PageMasterArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  footers_.Clear();
  master_drawables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(page_template_uuidpath_ != nullptr);
    page_template_uuidpath_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PageMasterArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference footers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_footers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference master_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_master_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath page_template_uuidpath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_template_uuidpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PageMasterArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.PageMasterArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_headers(i), target, stream);
  }

  // repeated .TSP.Reference footers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_footers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_footers(i), target, stream);
  }

  // repeated .TSP.Reference master_drawables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_master_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_master_drawables(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUIDPath page_template_uuidpath = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::page_template_uuidpath(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.PageMasterArchive)
  return target;
}

size_t PageMasterArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.PageMasterArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference headers = 1;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference footers = 2;
  total_size += 1UL * this->_internal_footers_size();
  for (const auto& msg : this->footers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference master_drawables = 3;
  total_size += 1UL * this->_internal_master_drawables_size();
  for (const auto& msg : this->master_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.UUIDPath page_template_uuidpath = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *page_template_uuidpath_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageMasterArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.PageMasterArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PageMasterArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PageMasterArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.PageMasterArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.PageMasterArchive)
    MergeFrom(*source);
  }
}

void PageMasterArchive::MergeFrom(const PageMasterArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.PageMasterArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  footers_.MergeFrom(from.footers_);
  master_drawables_.MergeFrom(from.master_drawables_);
  if (from._internal_has_page_template_uuidpath()) {
    _internal_mutable_page_template_uuidpath()->::TSP::UUIDPath::MergeFrom(from._internal_page_template_uuidpath());
  }
}

void PageMasterArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.PageMasterArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageMasterArchive::CopyFrom(const PageMasterArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.PageMasterArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageMasterArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(headers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(footers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(master_drawables_)) return false;
  if (_internal_has_page_template_uuidpath()) {
    if (!page_template_uuidpath_->IsInitialized()) return false;
  }
  return true;
}

void PageMasterArchive::InternalSwap(PageMasterArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.InternalSwap(&other->headers_);
  footers_.InternalSwap(&other->footers_);
  master_drawables_.InternalSwap(&other->master_drawables_);
  swap(page_template_uuidpath_, other->page_template_uuidpath_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PageMasterArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[10]);
}

// ===================================================================

class PageTemplateArchive_TagDrawablePair::_Internal {
 public:
  using HasBits = decltype(std::declval<PageTemplateArchive_TagDrawablePair>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& drawable(const PageTemplateArchive_TagDrawablePair* msg);
  static void set_has_drawable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::Reference&
PageTemplateArchive_TagDrawablePair::_Internal::drawable(const PageTemplateArchive_TagDrawablePair* msg) {
  return *msg->drawable_;
}
void PageTemplateArchive_TagDrawablePair::clear_drawable() {
  if (drawable_ != nullptr) drawable_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PageTemplateArchive_TagDrawablePair::PageTemplateArchive_TagDrawablePair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.PageTemplateArchive.TagDrawablePair)
}
PageTemplateArchive_TagDrawablePair::PageTemplateArchive_TagDrawablePair(const PageTemplateArchive_TagDrawablePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  if (from._internal_has_drawable()) {
    drawable_ = new ::TSP::Reference(*from.drawable_);
  } else {
    drawable_ = nullptr;
  }
  z_index_ = from.z_index_;
  // @@protoc_insertion_point(copy_constructor:TP.PageTemplateArchive.TagDrawablePair)
}

void PageTemplateArchive_TagDrawablePair::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&drawable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_index_) -
    reinterpret_cast<char*>(&drawable_)) + sizeof(z_index_));
}

PageTemplateArchive_TagDrawablePair::~PageTemplateArchive_TagDrawablePair() {
  // @@protoc_insertion_point(destructor:TP.PageTemplateArchive.TagDrawablePair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PageTemplateArchive_TagDrawablePair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete drawable_;
}

void PageTemplateArchive_TagDrawablePair::ArenaDtor(void* object) {
  PageTemplateArchive_TagDrawablePair* _this = reinterpret_cast< PageTemplateArchive_TagDrawablePair* >(object);
  (void)_this;
}
void PageTemplateArchive_TagDrawablePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PageTemplateArchive_TagDrawablePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageTemplateArchive_TagDrawablePair::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.PageTemplateArchive.TagDrawablePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(drawable_ != nullptr);
      drawable_->Clear();
    }
  }
  z_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PageTemplateArchive_TagDrawablePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.PageTemplateArchive.TagDrawablePair.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference drawable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 z_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_z_index(&has_bits);
          z_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PageTemplateArchive_TagDrawablePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.PageTemplateArchive.TagDrawablePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.PageTemplateArchive.TagDrawablePair.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // required .TSP.Reference drawable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::drawable(this), target, stream);
  }

  // required uint32 z_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_z_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.PageTemplateArchive.TagDrawablePair)
  return target;
}

size_t PageTemplateArchive_TagDrawablePair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.PageTemplateArchive.TagDrawablePair)
  size_t total_size = 0;

  if (_internal_has_tag()) {
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (_internal_has_drawable()) {
    // required .TSP.Reference drawable = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drawable_);
  }

  if (_internal_has_z_index()) {
    // required uint32 z_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_z_index());
  }

  return total_size;
}
size_t PageTemplateArchive_TagDrawablePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.PageTemplateArchive.TagDrawablePair)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());

    // required .TSP.Reference drawable = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drawable_);

    // required uint32 z_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_z_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageTemplateArchive_TagDrawablePair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.PageTemplateArchive.TagDrawablePair)
  GOOGLE_DCHECK_NE(&from, this);
  const PageTemplateArchive_TagDrawablePair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PageTemplateArchive_TagDrawablePair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.PageTemplateArchive.TagDrawablePair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.PageTemplateArchive.TagDrawablePair)
    MergeFrom(*source);
  }
}

void PageTemplateArchive_TagDrawablePair::MergeFrom(const PageTemplateArchive_TagDrawablePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.PageTemplateArchive.TagDrawablePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_drawable()->::TSP::Reference::MergeFrom(from._internal_drawable());
    }
    if (cached_has_bits & 0x00000004u) {
      z_index_ = from.z_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PageTemplateArchive_TagDrawablePair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.PageTemplateArchive.TagDrawablePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageTemplateArchive_TagDrawablePair::CopyFrom(const PageTemplateArchive_TagDrawablePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.PageTemplateArchive.TagDrawablePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageTemplateArchive_TagDrawablePair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_drawable()) {
    if (!drawable_->IsInitialized()) return false;
  }
  return true;
}

void PageTemplateArchive_TagDrawablePair::InternalSwap(PageTemplateArchive_TagDrawablePair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PageTemplateArchive_TagDrawablePair, z_index_)
      + sizeof(PageTemplateArchive_TagDrawablePair::z_index_)
      - PROTOBUF_FIELD_OFFSET(PageTemplateArchive_TagDrawablePair, drawable_)>(
          reinterpret_cast<char*>(&drawable_),
          reinterpret_cast<char*>(&other->drawable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PageTemplateArchive_TagDrawablePair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[11]);
}

// ===================================================================

class PageTemplateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PageTemplateArchive>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_headers_footers_match_previous_page(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hide_headers_footers(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::FillArchive& background_fill(const PageTemplateArchive* msg);
  static void set_has_background_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& guide_storage(const PageTemplateArchive* msg);
  static void set_has_guide_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::TSD::FillArchive&
PageTemplateArchive::_Internal::background_fill(const PageTemplateArchive* msg) {
  return *msg->background_fill_;
}
const ::TSP::Reference&
PageTemplateArchive::_Internal::guide_storage(const PageTemplateArchive* msg) {
  return *msg->guide_storage_;
}
void PageTemplateArchive::clear_master_drawables() {
  master_drawables_.Clear();
}
void PageTemplateArchive::clear_background_fill() {
  if (background_fill_ != nullptr) background_fill_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PageTemplateArchive::clear_guide_storage() {
  if (guide_storage_ != nullptr) guide_storage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PageTemplateArchive::PageTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  master_drawables_(arena),
  placeholder_drawables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.PageTemplateArchive)
}
PageTemplateArchive::PageTemplateArchive(const PageTemplateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      master_drawables_(from.master_drawables_),
      placeholder_drawables_(from.placeholder_drawables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_background_fill()) {
    background_fill_ = new ::TSD::FillArchive(*from.background_fill_);
  } else {
    background_fill_ = nullptr;
  }
  if (from._internal_has_guide_storage()) {
    guide_storage_ = new ::TSP::Reference(*from.guide_storage_);
  } else {
    guide_storage_ = nullptr;
  }
  ::memcpy(&headers_footers_match_previous_page_, &from.headers_footers_match_previous_page_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_headers_footers_) -
    reinterpret_cast<char*>(&headers_footers_match_previous_page_)) + sizeof(hide_headers_footers_));
  // @@protoc_insertion_point(copy_constructor:TP.PageTemplateArchive)
}

void PageTemplateArchive::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&background_fill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hide_headers_footers_) -
    reinterpret_cast<char*>(&background_fill_)) + sizeof(hide_headers_footers_));
}

PageTemplateArchive::~PageTemplateArchive() {
  // @@protoc_insertion_point(destructor:TP.PageTemplateArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PageTemplateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete background_fill_;
  if (this != internal_default_instance()) delete guide_storage_;
}

void PageTemplateArchive::ArenaDtor(void* object) {
  PageTemplateArchive* _this = reinterpret_cast< PageTemplateArchive* >(object);
  (void)_this;
}
void PageTemplateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PageTemplateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageTemplateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.PageTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  master_drawables_.Clear();
  placeholder_drawables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(background_fill_ != nullptr);
      background_fill_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(guide_storage_ != nullptr);
      guide_storage_->Clear();
    }
  }
  ::memset(&headers_footers_match_previous_page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_headers_footers_) -
      reinterpret_cast<char*>(&headers_footers_match_previous_page_)) + sizeof(hide_headers_footers_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PageTemplateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.PageTemplateArchive.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference master_drawables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_master_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TP.PageTemplateArchive.TagDrawablePair placeholder_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placeholder_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool headers_footers_match_previous_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_headers_footers_match_previous_page(&has_bits);
          headers_footers_match_previous_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hide_headers_footers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hide_headers_footers(&has_bits);
          hide_headers_footers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive background_fill = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference guide_storage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_guide_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PageTemplateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.PageTemplateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.PageTemplateArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .TSP.Reference master_drawables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_master_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_master_drawables(i), target, stream);
  }

  // repeated .TP.PageTemplateArchive.TagDrawablePair placeholder_drawables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_placeholder_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_placeholder_drawables(i), target, stream);
  }

  // required bool headers_footers_match_previous_page = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_headers_footers_match_previous_page(), target);
  }

  // optional bool hide_headers_footers = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_hide_headers_footers(), target);
  }

  // optional .TSD.FillArchive background_fill = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::background_fill(this), target, stream);
  }

  // optional .TSP.Reference guide_storage = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::guide_storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.PageTemplateArchive)
  return target;
}

size_t PageTemplateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.PageTemplateArchive)
  size_t total_size = 0;

  // required bool headers_footers_match_previous_page = 4;
  if (_internal_has_headers_footers_match_previous_page()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference master_drawables = 2;
  total_size += 1UL * this->_internal_master_drawables_size();
  for (const auto& msg : this->master_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TP.PageTemplateArchive.TagDrawablePair placeholder_drawables = 3;
  total_size += 1UL * this->_internal_placeholder_drawables_size();
  for (const auto& msg : this->placeholder_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .TSD.FillArchive background_fill = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_fill_);
    }

    // optional .TSP.Reference guide_storage = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *guide_storage_);
    }

  }
  // optional bool hide_headers_footers = 5;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageTemplateArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.PageTemplateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PageTemplateArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PageTemplateArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.PageTemplateArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.PageTemplateArchive)
    MergeFrom(*source);
  }
}

void PageTemplateArchive::MergeFrom(const PageTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.PageTemplateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  master_drawables_.MergeFrom(from.master_drawables_);
  placeholder_drawables_.MergeFrom(from.placeholder_drawables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_background_fill()->::TSD::FillArchive::MergeFrom(from._internal_background_fill());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_guide_storage()->::TSP::Reference::MergeFrom(from._internal_guide_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      headers_footers_match_previous_page_ = from.headers_footers_match_previous_page_;
    }
    if (cached_has_bits & 0x00000010u) {
      hide_headers_footers_ = from.hide_headers_footers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PageTemplateArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.PageTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageTemplateArchive::CopyFrom(const PageTemplateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.PageTemplateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageTemplateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(master_drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(placeholder_drawables_)) return false;
  if (_internal_has_background_fill()) {
    if (!background_fill_->IsInitialized()) return false;
  }
  if (_internal_has_guide_storage()) {
    if (!guide_storage_->IsInitialized()) return false;
  }
  return true;
}

void PageTemplateArchive::InternalSwap(PageTemplateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  master_drawables_.InternalSwap(&other->master_drawables_);
  placeholder_drawables_.InternalSwap(&other->placeholder_drawables_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PageTemplateArchive, hide_headers_footers_)
      + sizeof(PageTemplateArchive::hide_headers_footers_)
      - PROTOBUF_FIELD_OFFSET(PageTemplateArchive, background_fill_)>(
          reinterpret_cast<char*>(&background_fill_),
          reinterpret_cast<char*>(&other->background_fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PageTemplateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[12]);
}

// ===================================================================

class SectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionArchive>()._has_bits_);
  static void set_has_obsolete_shows_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_obsolete_shows_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_obsolete_left_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_obsolete_right_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_obsolete_top_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_obsolete_bottom_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_obsolete_header_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_obsolete_footer_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_obsolete_paper_width(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_obsolete_paper_height(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_obsolete_landscape_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_obsolete_header_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_obsolete_footer_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_inherit_previous_header_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_page_master_first_page_different(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_page_master_even_odd_pages_different(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_section_start_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_section_page_number_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_section_page_number_start(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSP::Reference& first_page_master(const SectionArchive* msg);
  static void set_has_first_page_master(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& even_page_master(const SectionArchive* msg);
  static void set_has_even_page_master(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& odd_page_master(const SectionArchive* msg);
  static void set_has_odd_page_master(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_page_master_first_page_hides_header_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSP::Reference& user_defined_guide_storage(const SectionArchive* msg);
  static void set_has_user_defined_guide_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::FillArchive& background_fill(const SectionArchive* msg);
  static void set_has_background_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& section_hyperlink_uuid(const SectionArchive* msg);
  static void set_has_section_hyperlink_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSP::Reference&
SectionArchive::_Internal::first_page_master(const SectionArchive* msg) {
  return *msg->first_page_master_;
}
const ::TSP::Reference&
SectionArchive::_Internal::even_page_master(const SectionArchive* msg) {
  return *msg->even_page_master_;
}
const ::TSP::Reference&
SectionArchive::_Internal::odd_page_master(const SectionArchive* msg) {
  return *msg->odd_page_master_;
}
const ::TSP::Reference&
SectionArchive::_Internal::user_defined_guide_storage(const SectionArchive* msg) {
  return *msg->user_defined_guide_storage_;
}
const ::TSD::FillArchive&
SectionArchive::_Internal::background_fill(const SectionArchive* msg) {
  return *msg->background_fill_;
}
const ::TSP::UUID&
SectionArchive::_Internal::section_hyperlink_uuid(const SectionArchive* msg) {
  return *msg->section_hyperlink_uuid_;
}
void SectionArchive::clear_obsolete_headers() {
  obsolete_headers_.Clear();
}
void SectionArchive::clear_obsolete_footers() {
  obsolete_footers_.Clear();
}
void SectionArchive::clear_obsolete_master_drawables() {
  obsolete_master_drawables_.Clear();
}
void SectionArchive::clear_first_page_master() {
  if (first_page_master_ != nullptr) first_page_master_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SectionArchive::clear_even_page_master() {
  if (even_page_master_ != nullptr) even_page_master_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SectionArchive::clear_odd_page_master() {
  if (odd_page_master_ != nullptr) odd_page_master_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SectionArchive::clear_user_defined_guide_storage() {
  if (user_defined_guide_storage_ != nullptr) user_defined_guide_storage_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SectionArchive::clear_background_fill() {
  if (background_fill_ != nullptr) background_fill_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SectionArchive::clear_section_hyperlink_uuid() {
  if (section_hyperlink_uuid_ != nullptr) section_hyperlink_uuid_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
SectionArchive::SectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  obsolete_headers_(arena),
  obsolete_footers_(arena),
  obsolete_master_drawables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.SectionArchive)
}
SectionArchive::SectionArchive(const SectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      obsolete_headers_(from.obsolete_headers_),
      obsolete_footers_(from.obsolete_footers_),
      obsolete_master_drawables_(from.obsolete_master_drawables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_first_page_master()) {
    first_page_master_ = new ::TSP::Reference(*from.first_page_master_);
  } else {
    first_page_master_ = nullptr;
  }
  if (from._internal_has_even_page_master()) {
    even_page_master_ = new ::TSP::Reference(*from.even_page_master_);
  } else {
    even_page_master_ = nullptr;
  }
  if (from._internal_has_odd_page_master()) {
    odd_page_master_ = new ::TSP::Reference(*from.odd_page_master_);
  } else {
    odd_page_master_ = nullptr;
  }
  if (from._internal_has_user_defined_guide_storage()) {
    user_defined_guide_storage_ = new ::TSP::Reference(*from.user_defined_guide_storage_);
  } else {
    user_defined_guide_storage_ = nullptr;
  }
  if (from._internal_has_background_fill()) {
    background_fill_ = new ::TSD::FillArchive(*from.background_fill_);
  } else {
    background_fill_ = nullptr;
  }
  if (from._internal_has_section_hyperlink_uuid()) {
    section_hyperlink_uuid_ = new ::TSP::UUID(*from.section_hyperlink_uuid_);
  } else {
    section_hyperlink_uuid_ = nullptr;
  }
  ::memcpy(&obsolete_left_margin_, &from.obsolete_left_margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&section_page_number_start_) -
    reinterpret_cast<char*>(&obsolete_left_margin_)) + sizeof(section_page_number_start_));
  // @@protoc_insertion_point(copy_constructor:TP.SectionArchive)
}

void SectionArchive::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_page_master_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&section_page_number_start_) -
    reinterpret_cast<char*>(&first_page_master_)) + sizeof(section_page_number_start_));
}

SectionArchive::~SectionArchive() {
  // @@protoc_insertion_point(destructor:TP.SectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete first_page_master_;
  if (this != internal_default_instance()) delete even_page_master_;
  if (this != internal_default_instance()) delete odd_page_master_;
  if (this != internal_default_instance()) delete user_defined_guide_storage_;
  if (this != internal_default_instance()) delete background_fill_;
  if (this != internal_default_instance()) delete section_hyperlink_uuid_;
}

void SectionArchive::ArenaDtor(void* object) {
  SectionArchive* _this = reinterpret_cast< SectionArchive* >(object);
  (void)_this;
}
void SectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obsolete_headers_.Clear();
  obsolete_footers_.Clear();
  obsolete_master_drawables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(first_page_master_ != nullptr);
      first_page_master_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(even_page_master_ != nullptr);
      even_page_master_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(odd_page_master_ != nullptr);
      odd_page_master_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(user_defined_guide_storage_ != nullptr);
      user_defined_guide_storage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(background_fill_ != nullptr);
      background_fill_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(section_hyperlink_uuid_ != nullptr);
      section_hyperlink_uuid_->Clear();
    }
  }
  obsolete_left_margin_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&obsolete_right_margin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obsolete_header_padding_) -
        reinterpret_cast<char*>(&obsolete_right_margin_)) + sizeof(obsolete_header_padding_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&obsolete_footer_padding_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&page_master_first_page_different_) -
        reinterpret_cast<char*>(&obsolete_footer_padding_)) + sizeof(page_master_first_page_different_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&page_master_even_odd_pages_different_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&section_page_number_start_) -
        reinterpret_cast<char*>(&page_master_even_odd_pages_different_)) + sizeof(section_page_number_start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool OBSOLETE_shows_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_obsolete_shows_header(&has_bits);
          obsolete_shows_header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool OBSOLETE_shows_footer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_obsolete_shows_footer(&has_bits);
          obsolete_shows_footer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference OBSOLETE_headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obsolete_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference OBSOLETE_footers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obsolete_footers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float OBSOLETE_left_margin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_obsolete_left_margin(&has_bits);
          obsolete_left_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float OBSOLETE_right_margin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_obsolete_right_margin(&has_bits);
          obsolete_right_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float OBSOLETE_top_margin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_obsolete_top_margin(&has_bits);
          obsolete_top_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float OBSOLETE_bottom_margin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_obsolete_bottom_margin(&has_bits);
          obsolete_bottom_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float OBSOLETE_header_padding = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_obsolete_header_padding(&has_bits);
          obsolete_header_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float OBSOLETE_footer_padding = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_obsolete_footer_padding(&has_bits);
          obsolete_footer_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float OBSOLETE_paper_width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_obsolete_paper_width(&has_bits);
          obsolete_paper_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float OBSOLETE_paper_height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_obsolete_paper_height(&has_bits);
          obsolete_paper_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool OBSOLETE_landscape_mode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_obsolete_landscape_mode(&has_bits);
          obsolete_landscape_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obsolete_master_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float OBSOLETE_header_margin = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_obsolete_header_margin(&has_bits);
          obsolete_header_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float OBSOLETE_footer_margin = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_obsolete_footer_margin(&has_bits);
          obsolete_footer_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool inherit_previous_header_footer = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_inherit_previous_header_footer(&has_bits);
          inherit_previous_header_footer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool page_master_first_page_different = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_page_master_first_page_different(&has_bits);
          page_master_first_page_different_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool page_master_even_odd_pages_different = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_page_master_even_odd_pages_different(&has_bits);
          page_master_even_odd_pages_different_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 section_start_kind = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_section_start_kind(&has_bits);
          section_start_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 section_page_number_kind = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_section_page_number_kind(&has_bits);
          section_page_number_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 section_page_number_start = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_section_page_number_start(&has_bits);
          section_page_number_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference first_page_master = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_page_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference even_page_master = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_even_page_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference odd_page_master = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_odd_page_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.SectionArchive.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool page_master_first_page_hides_header_footer = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_page_master_first_page_hides_header_footer(&has_bits);
          page_master_first_page_hides_header_footer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference user_defined_guide_storage = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_defined_guide_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive background_fill = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID section_hyperlink_uuid = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_section_hyperlink_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool OBSOLETE_shows_header = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_obsolete_shows_header(), target);
  }

  // optional bool OBSOLETE_shows_footer = 2;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_obsolete_shows_footer(), target);
  }

  // repeated .TSP.Reference OBSOLETE_headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obsolete_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_obsolete_headers(i), target, stream);
  }

  // repeated .TSP.Reference OBSOLETE_footers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obsolete_footers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_obsolete_footers(i), target, stream);
  }

  // optional float OBSOLETE_left_margin = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_obsolete_left_margin(), target);
  }

  // optional float OBSOLETE_right_margin = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_obsolete_right_margin(), target);
  }

  // optional float OBSOLETE_top_margin = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_obsolete_top_margin(), target);
  }

  // optional float OBSOLETE_bottom_margin = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_obsolete_bottom_margin(), target);
  }

  // optional float OBSOLETE_header_padding = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_obsolete_header_padding(), target);
  }

  // optional float OBSOLETE_footer_padding = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_obsolete_footer_padding(), target);
  }

  // optional float OBSOLETE_paper_width = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_obsolete_paper_width(), target);
  }

  // optional float OBSOLETE_paper_height = 12;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_obsolete_paper_height(), target);
  }

  // optional bool OBSOLETE_landscape_mode = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_obsolete_landscape_mode(), target);
  }

  // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obsolete_master_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_obsolete_master_drawables(i), target, stream);
  }

  // optional float OBSOLETE_header_margin = 15;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_obsolete_header_margin(), target);
  }

  // optional float OBSOLETE_footer_margin = 16;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_obsolete_footer_margin(), target);
  }

  // optional bool inherit_previous_header_footer = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_inherit_previous_header_footer(), target);
  }

  // optional bool page_master_first_page_different = 18;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_page_master_first_page_different(), target);
  }

  // optional bool page_master_even_odd_pages_different = 19;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_page_master_even_odd_pages_different(), target);
  }

  // optional uint32 section_start_kind = 20;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_section_start_kind(), target);
  }

  // optional uint32 section_page_number_kind = 21;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_section_page_number_kind(), target);
  }

  // optional uint32 section_page_number_start = 22;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_section_page_number_start(), target);
  }

  // optional .TSP.Reference first_page_master = 23;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::first_page_master(this), target, stream);
  }

  // optional .TSP.Reference even_page_master = 24;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::even_page_master(this), target, stream);
  }

  // optional .TSP.Reference odd_page_master = 25;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::odd_page_master(this), target, stream);
  }

  // optional string name = 26;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.SectionArchive.name");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_name(), target);
  }

  // optional bool page_master_first_page_hides_header_footer = 28;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_page_master_first_page_hides_header_footer(), target);
  }

  // optional .TSP.Reference user_defined_guide_storage = 29;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::user_defined_guide_storage(this), target, stream);
  }

  // optional .TSD.FillArchive background_fill = 30;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::background_fill(this), target, stream);
  }

  // optional .TSP.UUID section_hyperlink_uuid = 31;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::section_hyperlink_uuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SectionArchive)
  return target;
}

size_t SectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference OBSOLETE_headers = 3;
  total_size += 1UL * this->_internal_obsolete_headers_size();
  for (const auto& msg : this->obsolete_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference OBSOLETE_footers = 4;
  total_size += 1UL * this->_internal_obsolete_footers_size();
  for (const auto& msg : this->obsolete_footers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
  total_size += 1UL * this->_internal_obsolete_master_drawables_size();
  for (const auto& msg : this->obsolete_master_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 26;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .TSP.Reference first_page_master = 23;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *first_page_master_);
    }

    // optional .TSP.Reference even_page_master = 24;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *even_page_master_);
    }

    // optional .TSP.Reference odd_page_master = 25;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *odd_page_master_);
    }

    // optional .TSP.Reference user_defined_guide_storage = 29;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_defined_guide_storage_);
    }

    // optional .TSD.FillArchive background_fill = 30;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_fill_);
    }

    // optional .TSP.UUID section_hyperlink_uuid = 31;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *section_hyperlink_uuid_);
    }

    // optional float OBSOLETE_left_margin = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float OBSOLETE_right_margin = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_top_margin = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_bottom_margin = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional bool OBSOLETE_shows_header = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool OBSOLETE_shows_footer = 2;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool OBSOLETE_landscape_mode = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool inherit_previous_header_footer = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional float OBSOLETE_header_padding = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float OBSOLETE_footer_padding = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_paper_width = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_paper_height = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_header_margin = 15;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float OBSOLETE_footer_margin = 16;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional uint32 section_start_kind = 20;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_section_start_kind());
    }

    // optional uint32 section_page_number_kind = 21;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_section_page_number_kind());
    }

    // optional bool page_master_first_page_different = 18;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional bool page_master_even_odd_pages_different = 19;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool page_master_first_page_hides_header_footer = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 section_page_number_start = 22;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_section_page_number_start());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.SectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.SectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.SectionArchive)
    MergeFrom(*source);
  }
}

void SectionArchive::MergeFrom(const SectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.SectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obsolete_headers_.MergeFrom(from.obsolete_headers_);
  obsolete_footers_.MergeFrom(from.obsolete_footers_);
  obsolete_master_drawables_.MergeFrom(from.obsolete_master_drawables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_first_page_master()->::TSP::Reference::MergeFrom(from._internal_first_page_master());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_even_page_master()->::TSP::Reference::MergeFrom(from._internal_even_page_master());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_odd_page_master()->::TSP::Reference::MergeFrom(from._internal_odd_page_master());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_user_defined_guide_storage()->::TSP::Reference::MergeFrom(from._internal_user_defined_guide_storage());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_background_fill()->::TSD::FillArchive::MergeFrom(from._internal_background_fill());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_section_hyperlink_uuid()->::TSP::UUID::MergeFrom(from._internal_section_hyperlink_uuid());
    }
    if (cached_has_bits & 0x00000080u) {
      obsolete_left_margin_ = from.obsolete_left_margin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      obsolete_right_margin_ = from.obsolete_right_margin_;
    }
    if (cached_has_bits & 0x00000200u) {
      obsolete_top_margin_ = from.obsolete_top_margin_;
    }
    if (cached_has_bits & 0x00000400u) {
      obsolete_bottom_margin_ = from.obsolete_bottom_margin_;
    }
    if (cached_has_bits & 0x00000800u) {
      obsolete_shows_header_ = from.obsolete_shows_header_;
    }
    if (cached_has_bits & 0x00001000u) {
      obsolete_shows_footer_ = from.obsolete_shows_footer_;
    }
    if (cached_has_bits & 0x00002000u) {
      obsolete_landscape_mode_ = from.obsolete_landscape_mode_;
    }
    if (cached_has_bits & 0x00004000u) {
      inherit_previous_header_footer_ = from.inherit_previous_header_footer_;
    }
    if (cached_has_bits & 0x00008000u) {
      obsolete_header_padding_ = from.obsolete_header_padding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      obsolete_footer_padding_ = from.obsolete_footer_padding_;
    }
    if (cached_has_bits & 0x00020000u) {
      obsolete_paper_width_ = from.obsolete_paper_width_;
    }
    if (cached_has_bits & 0x00040000u) {
      obsolete_paper_height_ = from.obsolete_paper_height_;
    }
    if (cached_has_bits & 0x00080000u) {
      obsolete_header_margin_ = from.obsolete_header_margin_;
    }
    if (cached_has_bits & 0x00100000u) {
      obsolete_footer_margin_ = from.obsolete_footer_margin_;
    }
    if (cached_has_bits & 0x00200000u) {
      section_start_kind_ = from.section_start_kind_;
    }
    if (cached_has_bits & 0x00400000u) {
      section_page_number_kind_ = from.section_page_number_kind_;
    }
    if (cached_has_bits & 0x00800000u) {
      page_master_first_page_different_ = from.page_master_first_page_different_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      page_master_even_odd_pages_different_ = from.page_master_even_odd_pages_different_;
    }
    if (cached_has_bits & 0x02000000u) {
      page_master_first_page_hides_header_footer_ = from.page_master_first_page_hides_header_footer_;
    }
    if (cached_has_bits & 0x04000000u) {
      section_page_number_start_ = from.section_page_number_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.SectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionArchive::CopyFrom(const SectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(obsolete_headers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(obsolete_footers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(obsolete_master_drawables_)) return false;
  if (_internal_has_first_page_master()) {
    if (!first_page_master_->IsInitialized()) return false;
  }
  if (_internal_has_even_page_master()) {
    if (!even_page_master_->IsInitialized()) return false;
  }
  if (_internal_has_odd_page_master()) {
    if (!odd_page_master_->IsInitialized()) return false;
  }
  if (_internal_has_user_defined_guide_storage()) {
    if (!user_defined_guide_storage_->IsInitialized()) return false;
  }
  if (_internal_has_background_fill()) {
    if (!background_fill_->IsInitialized()) return false;
  }
  if (_internal_has_section_hyperlink_uuid()) {
    if (!section_hyperlink_uuid_->IsInitialized()) return false;
  }
  return true;
}

void SectionArchive::InternalSwap(SectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obsolete_headers_.InternalSwap(&other->obsolete_headers_);
  obsolete_footers_.InternalSwap(&other->obsolete_footers_);
  obsolete_master_drawables_.InternalSwap(&other->obsolete_master_drawables_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SectionArchive, section_page_number_start_)
      + sizeof(SectionArchive::section_page_number_start_)
      - PROTOBUF_FIELD_OFFSET(SectionArchive, first_page_master_)>(
          reinterpret_cast<char*>(&first_page_master_),
          reinterpret_cast<char*>(&other->first_page_master_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[13]);
}

// ===================================================================

class DoublePoint::_Internal {
 public:
  using HasBits = decltype(std::declval<DoublePoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DoublePoint::DoublePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.DoublePoint)
}
DoublePoint::DoublePoint(const DoublePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:TP.DoublePoint)
}

void DoublePoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

DoublePoint::~DoublePoint() {
  // @@protoc_insertion_point(destructor:TP.DoublePoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoublePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoublePoint::ArenaDtor(void* object) {
  DoublePoint* _this = reinterpret_cast< DoublePoint* >(object);
  (void)_this;
}
void DoublePoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoublePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoublePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.DoublePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoublePoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoublePoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.DoublePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.DoublePoint)
  return target;
}

size_t DoublePoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.DoublePoint)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DoublePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.DoublePoint)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoublePoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.DoublePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const DoublePoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoublePoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.DoublePoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.DoublePoint)
    MergeFrom(*source);
  }
}

void DoublePoint::MergeFrom(const DoublePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.DoublePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DoublePoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.DoublePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoublePoint::CopyFrom(const DoublePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.DoublePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoublePoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DoublePoint::InternalSwap(DoublePoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoublePoint, y_)
      + sizeof(DoublePoint::y_)
      - PROTOBUF_FIELD_OFFSET(DoublePoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoublePoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[14]);
}

// ===================================================================

class DoubleSize::_Internal {
 public:
  using HasBits = decltype(std::declval<DoubleSize>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DoubleSize::DoubleSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.DoubleSize)
}
DoubleSize::DoubleSize(const DoubleSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:TP.DoubleSize)
}

void DoubleSize::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

DoubleSize::~DoubleSize() {
  // @@protoc_insertion_point(destructor:TP.DoubleSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleSize::ArenaDtor(void* object) {
  DoubleSize* _this = reinterpret_cast< DoubleSize* >(object);
  (void)_this;
}
void DoubleSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoubleSize::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.DoubleSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.DoubleSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_width(), target);
  }

  // required double height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.DoubleSize)
  return target;
}

size_t DoubleSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.DoubleSize)
  size_t total_size = 0;

  if (_internal_has_width()) {
    // required double width = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_height()) {
    // required double height = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DoubleSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.DoubleSize)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double width = 1;
    total_size += 1 + 8;

    // required double height = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.DoubleSize)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.DoubleSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.DoubleSize)
    MergeFrom(*source);
  }
}

void DoubleSize::MergeFrom(const DoubleSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.DoubleSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DoubleSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.DoubleSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleSize::CopyFrom(const DoubleSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.DoubleSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleSize::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DoubleSize::InternalSwap(DoubleSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleSize, height_)
      + sizeof(DoubleSize::height_)
      - PROTOBUF_FIELD_OFFSET(DoubleSize, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleSize::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[15]);
}

// ===================================================================

class AnchorPosArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AnchorPosArchive>()._has_bits_);
  static const ::TSP::Reference& attachment(const AnchorPosArchive* msg);
  static void set_has_attachment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Point& position(const AnchorPosArchive* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& drawable_uuid_path(const AnchorPosArchive* msg);
  static void set_has_drawable_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TP::DoublePoint& double_position(const AnchorPosArchive* msg);
  static void set_has_double_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Reference&
AnchorPosArchive::_Internal::attachment(const AnchorPosArchive* msg) {
  return *msg->attachment_;
}
const ::TSP::Point&
AnchorPosArchive::_Internal::position(const AnchorPosArchive* msg) {
  return *msg->position_;
}
const ::TSP::UUIDPath&
AnchorPosArchive::_Internal::drawable_uuid_path(const AnchorPosArchive* msg) {
  return *msg->drawable_uuid_path_;
}
const ::TP::DoublePoint&
AnchorPosArchive::_Internal::double_position(const AnchorPosArchive* msg) {
  return *msg->double_position_;
}
void AnchorPosArchive::clear_attachment() {
  if (attachment_ != nullptr) attachment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AnchorPosArchive::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void AnchorPosArchive::clear_drawable_uuid_path() {
  if (drawable_uuid_path_ != nullptr) drawable_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
AnchorPosArchive::AnchorPosArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.AnchorPosArchive)
}
AnchorPosArchive::AnchorPosArchive(const AnchorPosArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attachment()) {
    attachment_ = new ::TSP::Reference(*from.attachment_);
  } else {
    attachment_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::TSP::Point(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_drawable_uuid_path()) {
    drawable_uuid_path_ = new ::TSP::UUIDPath(*from.drawable_uuid_path_);
  } else {
    drawable_uuid_path_ = nullptr;
  }
  if (from._internal_has_double_position()) {
    double_position_ = new ::TP::DoublePoint(*from.double_position_);
  } else {
    double_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.AnchorPosArchive)
}

void AnchorPosArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attachment_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&double_position_) -
    reinterpret_cast<char*>(&attachment_)) + sizeof(double_position_));
}

AnchorPosArchive::~AnchorPosArchive() {
  // @@protoc_insertion_point(destructor:TP.AnchorPosArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnchorPosArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attachment_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete drawable_uuid_path_;
  if (this != internal_default_instance()) delete double_position_;
}

void AnchorPosArchive::ArenaDtor(void* object) {
  AnchorPosArchive* _this = reinterpret_cast< AnchorPosArchive* >(object);
  (void)_this;
}
void AnchorPosArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnchorPosArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnchorPosArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.AnchorPosArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(attachment_ != nullptr);
      attachment_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(drawable_uuid_path_ != nullptr);
      drawable_uuid_path_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(double_position_ != nullptr);
      double_position_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnchorPosArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference attachment = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath drawable_uuid_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TP.DoublePoint double_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnchorPosArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.AnchorPosArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference attachment = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attachment(this), target, stream);
  }

  // optional .TSP.Point position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional .TSP.UUIDPath drawable_uuid_path = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::drawable_uuid_path(this), target, stream);
  }

  // optional .TP.DoublePoint double_position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::double_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.AnchorPosArchive)
  return target;
}

size_t AnchorPosArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.AnchorPosArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Reference attachment = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attachment_);
    }

    // optional .TSP.Point position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .TSP.UUIDPath drawable_uuid_path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_uuid_path_);
    }

    // optional .TP.DoublePoint double_position = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *double_position_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnchorPosArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.AnchorPosArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const AnchorPosArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnchorPosArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.AnchorPosArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.AnchorPosArchive)
    MergeFrom(*source);
  }
}

void AnchorPosArchive::MergeFrom(const AnchorPosArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.AnchorPosArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_attachment()->::TSP::Reference::MergeFrom(from._internal_attachment());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::TSP::Point::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_drawable_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_drawable_uuid_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_double_position()->::TP::DoublePoint::MergeFrom(from._internal_double_position());
    }
  }
}

void AnchorPosArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.AnchorPosArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorPosArchive::CopyFrom(const AnchorPosArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.AnchorPosArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorPosArchive::IsInitialized() const {
  if (_internal_has_attachment()) {
    if (!attachment_->IsInitialized()) return false;
  }
  if (_internal_has_position()) {
    if (!position_->IsInitialized()) return false;
  }
  if (_internal_has_drawable_uuid_path()) {
    if (!drawable_uuid_path_->IsInitialized()) return false;
  }
  if (_internal_has_double_position()) {
    if (!double_position_->IsInitialized()) return false;
  }
  return true;
}

void AnchorPosArchive::InternalSwap(AnchorPosArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnchorPosArchive, double_position_)
      + sizeof(AnchorPosArchive::double_position_)
      - PROTOBUF_FIELD_OFFSET(AnchorPosArchive, attachment_)>(
          reinterpret_cast<char*>(&attachment_),
          reinterpret_cast<char*>(&other->attachment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorPosArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[16]);
}

// ===================================================================

class TargetHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TargetHintArchive>()._has_bits_);
  static const ::TSP::Point& frame_origin(const TargetHintArchive* msg);
  static void set_has_frame_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& frame_size(const TargetHintArchive* msg);
  static void set_has_frame_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Range& range(const TargetHintArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_next_widow_pulls_down_from_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Range& anchored_range(const TargetHintArchive* msg);
  static void set_has_anchored_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_column_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_line_fragment_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TP::DoublePoint& double_origin(const TargetHintArchive* msg);
  static void set_has_double_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TP::DoubleSize& double_size(const TargetHintArchive* msg);
  static void set_has_double_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_end_of_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_last_line_is_empty_and_has_list_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_text_is_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_terminated_by_break(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::TSP::Point&
TargetHintArchive::_Internal::frame_origin(const TargetHintArchive* msg) {
  return *msg->frame_origin_;
}
const ::TSP::Size&
TargetHintArchive::_Internal::frame_size(const TargetHintArchive* msg) {
  return *msg->frame_size_;
}
const ::TSP::Range&
TargetHintArchive::_Internal::range(const TargetHintArchive* msg) {
  return *msg->range_;
}
const ::TSP::Range&
TargetHintArchive::_Internal::anchored_range(const TargetHintArchive* msg) {
  return *msg->anchored_range_;
}
const ::TP::DoublePoint&
TargetHintArchive::_Internal::double_origin(const TargetHintArchive* msg) {
  return *msg->double_origin_;
}
const ::TP::DoubleSize&
TargetHintArchive::_Internal::double_size(const TargetHintArchive* msg) {
  return *msg->double_size_;
}
void TargetHintArchive::clear_frame_origin() {
  if (frame_origin_ != nullptr) frame_origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TargetHintArchive::clear_frame_size() {
  if (frame_size_ != nullptr) frame_size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TargetHintArchive::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TargetHintArchive::clear_anchored_range() {
  if (anchored_range_ != nullptr) anchored_range_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
TargetHintArchive::TargetHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.TargetHintArchive)
}
TargetHintArchive::TargetHintArchive(const TargetHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_frame_origin()) {
    frame_origin_ = new ::TSP::Point(*from.frame_origin_);
  } else {
    frame_origin_ = nullptr;
  }
  if (from._internal_has_frame_size()) {
    frame_size_ = new ::TSP::Size(*from.frame_size_);
  } else {
    frame_size_ = nullptr;
  }
  if (from._internal_has_range()) {
    range_ = new ::TSP::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_anchored_range()) {
    anchored_range_ = new ::TSP::Range(*from.anchored_range_);
  } else {
    anchored_range_ = nullptr;
  }
  if (from._internal_has_double_origin()) {
    double_origin_ = new ::TP::DoublePoint(*from.double_origin_);
  } else {
    double_origin_ = nullptr;
  }
  if (from._internal_has_double_size()) {
    double_size_ = new ::TP::DoubleSize(*from.double_size_);
  } else {
    double_size_ = nullptr;
  }
  ::memcpy(&next_widow_pulls_down_from_char_index_, &from.next_widow_pulls_down_from_char_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&terminated_by_break_) -
    reinterpret_cast<char*>(&next_widow_pulls_down_from_char_index_)) + sizeof(terminated_by_break_));
  // @@protoc_insertion_point(copy_constructor:TP.TargetHintArchive)
}

void TargetHintArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&terminated_by_break_) -
    reinterpret_cast<char*>(&frame_origin_)) + sizeof(terminated_by_break_));
}

TargetHintArchive::~TargetHintArchive() {
  // @@protoc_insertion_point(destructor:TP.TargetHintArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TargetHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete frame_origin_;
  if (this != internal_default_instance()) delete frame_size_;
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete anchored_range_;
  if (this != internal_default_instance()) delete double_origin_;
  if (this != internal_default_instance()) delete double_size_;
}

void TargetHintArchive::ArenaDtor(void* object) {
  TargetHintArchive* _this = reinterpret_cast< TargetHintArchive* >(object);
  (void)_this;
}
void TargetHintArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetHintArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.TargetHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(frame_origin_ != nullptr);
      frame_origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(frame_size_ != nullptr);
      frame_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(range_ != nullptr);
      range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(anchored_range_ != nullptr);
      anchored_range_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(double_origin_ != nullptr);
      double_origin_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(double_size_ != nullptr);
      double_size_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&next_widow_pulls_down_from_char_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&column_count_) -
        reinterpret_cast<char*>(&next_widow_pulls_down_from_char_index_)) + sizeof(column_count_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&line_fragment_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&terminated_by_break_) -
        reinterpret_cast<char*>(&line_fragment_count_)) + sizeof(terminated_by_break_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetHintArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Point frame_origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size frame_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Range range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 next_widow_pulls_down_from_char_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_next_widow_pulls_down_from_char_index(&has_bits);
          next_widow_pulls_down_from_char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Range anchored_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchored_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 column_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_column_count(&has_bits);
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 line_fragment_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_line_fragment_count(&has_bits);
          line_fragment_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TP.DoublePoint double_origin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TP.DoubleSize double_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool end_of_layout = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_end_of_layout(&has_bits);
          end_of_layout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool last_line_is_empty_and_has_list_label = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_last_line_is_empty_and_has_list_label(&has_bits);
          last_line_is_empty_and_has_list_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool text_is_vertical = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_text_is_vertical(&has_bits);
          text_is_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool terminated_by_break = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_terminated_by_break(&has_bits);
          terminated_by_break_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetHintArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.TargetHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Point frame_origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::frame_origin(this), target, stream);
  }

  // optional .TSP.Size frame_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frame_size(this), target, stream);
  }

  // optional .TSP.Range range = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::range(this), target, stream);
  }

  // optional uint32 next_widow_pulls_down_from_char_index = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_next_widow_pulls_down_from_char_index(), target);
  }

  // optional .TSP.Range anchored_range = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::anchored_range(this), target, stream);
  }

  // optional uint32 column_count = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_column_count(), target);
  }

  // optional uint32 line_fragment_count = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_line_fragment_count(), target);
  }

  // optional .TP.DoublePoint double_origin = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::double_origin(this), target, stream);
  }

  // optional .TP.DoubleSize double_size = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::double_size(this), target, stream);
  }

  // optional bool end_of_layout = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_end_of_layout(), target);
  }

  // optional bool last_line_is_empty_and_has_list_label = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_last_line_is_empty_and_has_list_label(), target);
  }

  // optional bool text_is_vertical = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_text_is_vertical(), target);
  }

  // optional bool terminated_by_break = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_terminated_by_break(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.TargetHintArchive)
  return target;
}

size_t TargetHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.TargetHintArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Point frame_origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_origin_);
    }

    // optional .TSP.Size frame_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_size_);
    }

    // optional .TSP.Range range = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_);
    }

    // optional .TSP.Range anchored_range = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anchored_range_);
    }

    // optional .TP.DoublePoint double_origin = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *double_origin_);
    }

    // optional .TP.DoubleSize double_size = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *double_size_);
    }

    // optional uint32 next_widow_pulls_down_from_char_index = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_next_widow_pulls_down_from_char_index());
    }

    // optional uint32 column_count = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column_count());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 line_fragment_count = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_line_fragment_count());
    }

    // optional bool end_of_layout = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool last_line_is_empty_and_has_list_label = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool text_is_vertical = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool terminated_by_break = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetHintArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.TargetHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetHintArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetHintArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.TargetHintArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.TargetHintArchive)
    MergeFrom(*source);
  }
}

void TargetHintArchive::MergeFrom(const TargetHintArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.TargetHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_frame_origin()->::TSP::Point::MergeFrom(from._internal_frame_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_frame_size()->::TSP::Size::MergeFrom(from._internal_frame_size());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_range()->::TSP::Range::MergeFrom(from._internal_range());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_anchored_range()->::TSP::Range::MergeFrom(from._internal_anchored_range());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_double_origin()->::TP::DoublePoint::MergeFrom(from._internal_double_origin());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_double_size()->::TP::DoubleSize::MergeFrom(from._internal_double_size());
    }
    if (cached_has_bits & 0x00000040u) {
      next_widow_pulls_down_from_char_index_ = from.next_widow_pulls_down_from_char_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      column_count_ = from.column_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      line_fragment_count_ = from.line_fragment_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      end_of_layout_ = from.end_of_layout_;
    }
    if (cached_has_bits & 0x00000400u) {
      last_line_is_empty_and_has_list_label_ = from.last_line_is_empty_and_has_list_label_;
    }
    if (cached_has_bits & 0x00000800u) {
      text_is_vertical_ = from.text_is_vertical_;
    }
    if (cached_has_bits & 0x00001000u) {
      terminated_by_break_ = from.terminated_by_break_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TargetHintArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.TargetHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetHintArchive::CopyFrom(const TargetHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.TargetHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetHintArchive::IsInitialized() const {
  if (_internal_has_frame_origin()) {
    if (!frame_origin_->IsInitialized()) return false;
  }
  if (_internal_has_frame_size()) {
    if (!frame_size_->IsInitialized()) return false;
  }
  if (_internal_has_range()) {
    if (!range_->IsInitialized()) return false;
  }
  if (_internal_has_anchored_range()) {
    if (!anchored_range_->IsInitialized()) return false;
  }
  if (_internal_has_double_origin()) {
    if (!double_origin_->IsInitialized()) return false;
  }
  if (_internal_has_double_size()) {
    if (!double_size_->IsInitialized()) return false;
  }
  return true;
}

void TargetHintArchive::InternalSwap(TargetHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetHintArchive, terminated_by_break_)
      + sizeof(TargetHintArchive::terminated_by_break_)
      - PROTOBUF_FIELD_OFFSET(TargetHintArchive, frame_origin_)>(
          reinterpret_cast<char*>(&frame_origin_),
          reinterpret_cast<char*>(&other->frame_origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetHintArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[17]);
}

// ===================================================================

class PageHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PageHintArchive>()._has_bits_);
  static void set_has_page_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Range& footnote_auto_number_range(const PageHintArchive* msg);
  static void set_has_footnote_auto_number_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Range& footnote_layout_range(const PageHintArchive* msg);
  static void set_has_footnote_layout_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& first_child_hint(const PageHintArchive* msg);
  static void set_has_first_child_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& last_child_hint(const PageHintArchive* msg);
  static void set_has_last_child_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TP::TopicNumberHintsArchive& topic_numbers(const PageHintArchive* msg);
  static void set_has_topic_numbers(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_version_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_platform_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_page_side(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_page_column(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_page_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::TSP::Range&
PageHintArchive::_Internal::footnote_auto_number_range(const PageHintArchive* msg) {
  return *msg->footnote_auto_number_range_;
}
const ::TSP::Range&
PageHintArchive::_Internal::footnote_layout_range(const PageHintArchive* msg) {
  return *msg->footnote_layout_range_;
}
const ::TSP::Reference&
PageHintArchive::_Internal::first_child_hint(const PageHintArchive* msg) {
  return *msg->first_child_hint_;
}
const ::TSP::Reference&
PageHintArchive::_Internal::last_child_hint(const PageHintArchive* msg) {
  return *msg->last_child_hint_;
}
const ::TP::TopicNumberHintsArchive&
PageHintArchive::_Internal::topic_numbers(const PageHintArchive* msg) {
  return *msg->topic_numbers_;
}
void PageHintArchive::clear_footnote_auto_number_range() {
  if (footnote_auto_number_range_ != nullptr) footnote_auto_number_range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PageHintArchive::clear_footnote_layout_range() {
  if (footnote_layout_range_ != nullptr) footnote_layout_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PageHintArchive::clear_first_child_hint() {
  if (first_child_hint_ != nullptr) first_child_hint_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void PageHintArchive::clear_last_child_hint() {
  if (last_child_hint_ != nullptr) last_child_hint_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void PageHintArchive::clear_child_hints() {
  child_hints_.Clear();
}
void PageHintArchive::clear_partitioned_attachment_uuids() {
  partitioned_attachment_uuids_.Clear();
}
void PageHintArchive::clear_text_flows() {
  text_flows_.Clear();
}
PageHintArchive::PageHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  target_hints_(arena),
  anchored_attachments_map_(arena),
  child_hints_(arena),
  partitioned_attachment_uuids_(arena),
  text_flows_(arena),
  flow_hints_(arena),
  flow_topic_numbers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.PageHintArchive)
}
PageHintArchive::PageHintArchive(const PageHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      target_hints_(from.target_hints_),
      anchored_attachments_map_(from.anchored_attachments_map_),
      child_hints_(from.child_hints_),
      partitioned_attachment_uuids_(from.partitioned_attachment_uuids_),
      text_flows_(from.text_flows_),
      flow_hints_(from.flow_hints_),
      flow_topic_numbers_(from.flow_topic_numbers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_footnote_auto_number_range()) {
    footnote_auto_number_range_ = new ::TSP::Range(*from.footnote_auto_number_range_);
  } else {
    footnote_auto_number_range_ = nullptr;
  }
  if (from._internal_has_footnote_layout_range()) {
    footnote_layout_range_ = new ::TSP::Range(*from.footnote_layout_range_);
  } else {
    footnote_layout_range_ = nullptr;
  }
  if (from._internal_has_first_child_hint()) {
    first_child_hint_ = new ::TSP::Reference(*from.first_child_hint_);
  } else {
    first_child_hint_ = nullptr;
  }
  if (from._internal_has_last_child_hint()) {
    last_child_hint_ = new ::TSP::Reference(*from.last_child_hint_);
  } else {
    last_child_hint_ = nullptr;
  }
  if (from._internal_has_topic_numbers()) {
    topic_numbers_ = new ::TP::TopicNumberHintsArchive(*from.topic_numbers_);
  } else {
    topic_numbers_ = nullptr;
  }
  ::memcpy(&page_kind_, &from.page_kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_row_) -
    reinterpret_cast<char*>(&page_kind_)) + sizeof(page_row_));
  // @@protoc_insertion_point(copy_constructor:TP.PageHintArchive)
}

void PageHintArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&footnote_auto_number_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_row_) -
    reinterpret_cast<char*>(&footnote_auto_number_range_)) + sizeof(page_row_));
}

PageHintArchive::~PageHintArchive() {
  // @@protoc_insertion_point(destructor:TP.PageHintArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PageHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete footnote_auto_number_range_;
  if (this != internal_default_instance()) delete footnote_layout_range_;
  if (this != internal_default_instance()) delete first_child_hint_;
  if (this != internal_default_instance()) delete last_child_hint_;
  if (this != internal_default_instance()) delete topic_numbers_;
}

void PageHintArchive::ArenaDtor(void* object) {
  PageHintArchive* _this = reinterpret_cast< PageHintArchive* >(object);
  (void)_this;
}
void PageHintArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PageHintArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.PageHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_hints_.Clear();
  anchored_attachments_map_.Clear();
  child_hints_.Clear();
  partitioned_attachment_uuids_.Clear();
  text_flows_.Clear();
  flow_hints_.Clear();
  flow_topic_numbers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(footnote_auto_number_range_ != nullptr);
      footnote_auto_number_range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(footnote_layout_range_ != nullptr);
      footnote_layout_range_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(first_child_hint_ != nullptr);
      first_child_hint_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(last_child_hint_ != nullptr);
      last_child_hint_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(topic_numbers_ != nullptr);
      topic_numbers_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&page_kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&platform_id_) -
        reinterpret_cast<char*>(&page_kind_)) + sizeof(platform_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&page_side_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&page_row_) -
        reinterpret_cast<char*>(&page_side_)) + sizeof(page_row_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PageHintArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TP.PageHintArchive.PageKind page_kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::PageHintArchive_PageKind_IsValid(val))) {
            _internal_set_page_kind(static_cast<::TP::PageHintArchive_PageKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TP.TargetHintArchive target_hints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Range footnote_auto_number_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_footnote_auto_number_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Range footnote_layout_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_footnote_layout_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference first_child_hint = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_child_hint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference last_child_hint = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_child_hint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anchored_attachments_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_numbers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_version_number(&has_bits);
          version_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platform_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_platform_id(&has_bits);
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference child_hints = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID partitioned_attachment_uuids = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partitioned_attachment_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference text_flows = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_flows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TP.TargetHintArchive flow_hints = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_flow_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TP.TopicNumberHintsArchive flow_topic_numbers = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_flow_topic_numbers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TP.PageHintArchive.PageSide page_side = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::PageHintArchive_PageSide_IsValid(val))) {
            _internal_set_page_side(static_cast<::TP::PageHintArchive_PageSide>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 page_column = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_page_column(&has_bits);
          page_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 page_row = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_page_row(&has_bits);
          page_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PageHintArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.PageHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TP.PageHintArchive.PageKind page_kind = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_page_kind(), target);
  }

  // repeated .TP.TargetHintArchive target_hints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_hints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_target_hints(i), target, stream);
  }

  // optional .TSP.Range footnote_auto_number_range = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::footnote_auto_number_range(this), target, stream);
  }

  // optional .TSP.Range footnote_layout_range = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::footnote_layout_range(this), target, stream);
  }

  // optional .TSP.Reference first_child_hint = 6 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::first_child_hint(this), target, stream);
  }

  // optional .TSP.Reference last_child_hint = 7 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::last_child_hint(this), target, stream);
  }

  // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_anchored_attachments_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_anchored_attachments_map(i), target, stream);
  }

  // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::topic_numbers(this), target, stream);
  }

  // optional uint32 version_number = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_version_number(), target);
  }

  // optional uint32 platform_id = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_platform_id(), target);
  }

  // repeated .TSP.Reference child_hints = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_child_hints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_child_hints(i), target, stream);
  }

  // repeated .TSP.UUID partitioned_attachment_uuids = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_partitioned_attachment_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_partitioned_attachment_uuids(i), target, stream);
  }

  // repeated .TSP.Reference text_flows = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_flows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_text_flows(i), target, stream);
  }

  // repeated .TP.TargetHintArchive flow_hints = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flow_hints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_flow_hints(i), target, stream);
  }

  // repeated .TP.TopicNumberHintsArchive flow_topic_numbers = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flow_topic_numbers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_flow_topic_numbers(i), target, stream);
  }

  // optional .TP.PageHintArchive.PageSide page_side = 17 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_page_side(), target);
  }

  // optional uint32 page_column = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_page_column(), target);
  }

  // optional uint32 page_row = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_page_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.PageHintArchive)
  return target;
}

size_t PageHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.PageHintArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.TargetHintArchive target_hints = 2;
  total_size += 1UL * this->_internal_target_hints_size();
  for (const auto& msg : this->target_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
  total_size += 1UL * this->_internal_anchored_attachments_map_size();
  for (const auto& msg : this->anchored_attachments_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference child_hints = 12;
  total_size += 1UL * this->_internal_child_hints_size();
  for (const auto& msg : this->child_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID partitioned_attachment_uuids = 13;
  total_size += 1UL * this->_internal_partitioned_attachment_uuids_size();
  for (const auto& msg : this->partitioned_attachment_uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference text_flows = 14;
  total_size += 1UL * this->_internal_text_flows_size();
  for (const auto& msg : this->text_flows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TP.TargetHintArchive flow_hints = 15;
  total_size += 1UL * this->_internal_flow_hints_size();
  for (const auto& msg : this->flow_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TP.TopicNumberHintsArchive flow_topic_numbers = 16;
  total_size += 2UL * this->_internal_flow_topic_numbers_size();
  for (const auto& msg : this->flow_topic_numbers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Range footnote_auto_number_range = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *footnote_auto_number_range_);
    }

    // optional .TSP.Range footnote_layout_range = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *footnote_layout_range_);
    }

    // optional .TSP.Reference first_child_hint = 6 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *first_child_hint_);
    }

    // optional .TSP.Reference last_child_hint = 7 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_child_hint_);
    }

    // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *topic_numbers_);
    }

    // optional .TP.PageHintArchive.PageKind page_kind = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page_kind());
    }

    // optional uint32 version_number = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version_number());
    }

    // optional uint32 platform_id = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platform_id());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TP.PageHintArchive.PageSide page_side = 17 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page_side());
    }

    // optional uint32 page_column = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page_column());
    }

    // optional uint32 page_row = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page_row());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageHintArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.PageHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PageHintArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PageHintArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.PageHintArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.PageHintArchive)
    MergeFrom(*source);
  }
}

void PageHintArchive::MergeFrom(const PageHintArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.PageHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_hints_.MergeFrom(from.target_hints_);
  anchored_attachments_map_.MergeFrom(from.anchored_attachments_map_);
  child_hints_.MergeFrom(from.child_hints_);
  partitioned_attachment_uuids_.MergeFrom(from.partitioned_attachment_uuids_);
  text_flows_.MergeFrom(from.text_flows_);
  flow_hints_.MergeFrom(from.flow_hints_);
  flow_topic_numbers_.MergeFrom(from.flow_topic_numbers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_footnote_auto_number_range()->::TSP::Range::MergeFrom(from._internal_footnote_auto_number_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_footnote_layout_range()->::TSP::Range::MergeFrom(from._internal_footnote_layout_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_first_child_hint()->::TSP::Reference::MergeFrom(from._internal_first_child_hint());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_last_child_hint()->::TSP::Reference::MergeFrom(from._internal_last_child_hint());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_topic_numbers()->::TP::TopicNumberHintsArchive::MergeFrom(from._internal_topic_numbers());
    }
    if (cached_has_bits & 0x00000020u) {
      page_kind_ = from.page_kind_;
    }
    if (cached_has_bits & 0x00000040u) {
      version_number_ = from.version_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      platform_id_ = from.platform_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      page_side_ = from.page_side_;
    }
    if (cached_has_bits & 0x00000200u) {
      page_column_ = from.page_column_;
    }
    if (cached_has_bits & 0x00000400u) {
      page_row_ = from.page_row_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PageHintArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.PageHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageHintArchive::CopyFrom(const PageHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.PageHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageHintArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(target_hints_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(anchored_attachments_map_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(child_hints_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(partitioned_attachment_uuids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(text_flows_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(flow_hints_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(flow_topic_numbers_)) return false;
  if (_internal_has_footnote_auto_number_range()) {
    if (!footnote_auto_number_range_->IsInitialized()) return false;
  }
  if (_internal_has_footnote_layout_range()) {
    if (!footnote_layout_range_->IsInitialized()) return false;
  }
  if (_internal_has_first_child_hint()) {
    if (!first_child_hint_->IsInitialized()) return false;
  }
  if (_internal_has_last_child_hint()) {
    if (!last_child_hint_->IsInitialized()) return false;
  }
  if (_internal_has_topic_numbers()) {
    if (!topic_numbers_->IsInitialized()) return false;
  }
  return true;
}

void PageHintArchive::InternalSwap(PageHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_hints_.InternalSwap(&other->target_hints_);
  anchored_attachments_map_.InternalSwap(&other->anchored_attachments_map_);
  child_hints_.InternalSwap(&other->child_hints_);
  partitioned_attachment_uuids_.InternalSwap(&other->partitioned_attachment_uuids_);
  text_flows_.InternalSwap(&other->text_flows_);
  flow_hints_.InternalSwap(&other->flow_hints_);
  flow_topic_numbers_.InternalSwap(&other->flow_topic_numbers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PageHintArchive, page_row_)
      + sizeof(PageHintArchive::page_row_)
      - PROTOBUF_FIELD_OFFSET(PageHintArchive, footnote_auto_number_range_)>(
          reinterpret_cast<char*>(&footnote_auto_number_range_),
          reinterpret_cast<char*>(&other->footnote_auto_number_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PageHintArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[18]);
}

// ===================================================================

class NullChildHintArchive::_Internal {
 public:
};

NullChildHintArchive::NullChildHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.NullChildHintArchive)
}
NullChildHintArchive::NullChildHintArchive(const NullChildHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TP.NullChildHintArchive)
}

void NullChildHintArchive::SharedCtor() {
}

NullChildHintArchive::~NullChildHintArchive() {
  // @@protoc_insertion_point(destructor:TP.NullChildHintArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NullChildHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NullChildHintArchive::ArenaDtor(void* object) {
  NullChildHintArchive* _this = reinterpret_cast< NullChildHintArchive* >(object);
  (void)_this;
}
void NullChildHintArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NullChildHintArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NullChildHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.NullChildHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NullChildHintArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NullChildHintArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.NullChildHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.NullChildHintArchive)
  return target;
}

size_t NullChildHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.NullChildHintArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NullChildHintArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.NullChildHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const NullChildHintArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NullChildHintArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.NullChildHintArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.NullChildHintArchive)
    MergeFrom(*source);
  }
}

void NullChildHintArchive::MergeFrom(const NullChildHintArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.NullChildHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NullChildHintArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.NullChildHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullChildHintArchive::CopyFrom(const NullChildHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.NullChildHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullChildHintArchive::IsInitialized() const {
  return true;
}

void NullChildHintArchive::InternalSwap(NullChildHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NullChildHintArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[19]);
}

// ===================================================================

class SectionHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionHintArchive>()._has_bits_);
  static void set_has_start_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SectionHintArchive::SectionHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  page_hints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.SectionHintArchive)
}
SectionHintArchive::SectionHintArchive(const SectionHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      page_hints_(from.page_hints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_page_index_ = from.start_page_index_;
  // @@protoc_insertion_point(copy_constructor:TP.SectionHintArchive)
}

void SectionHintArchive::SharedCtor() {
start_page_index_ = 0u;
}

SectionHintArchive::~SectionHintArchive() {
  // @@protoc_insertion_point(destructor:TP.SectionHintArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SectionHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SectionHintArchive::ArenaDtor(void* object) {
  SectionHintArchive* _this = reinterpret_cast< SectionHintArchive* >(object);
  (void)_this;
}
void SectionHintArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SectionHintArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SectionHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SectionHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_hints_.Clear();
  start_page_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionHintArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TP.PageHintArchive page_hints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 start_page_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_page_index(&has_bits);
          start_page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectionHintArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SectionHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TP.PageHintArchive page_hints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_page_hints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_page_hints(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_page_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_page_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SectionHintArchive)
  return target;
}

size_t SectionHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SectionHintArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.PageHintArchive page_hints = 1;
  total_size += 1UL * this->_internal_page_hints_size();
  for (const auto& msg : this->page_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 start_page_index = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_page_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectionHintArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.SectionHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SectionHintArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectionHintArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.SectionHintArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.SectionHintArchive)
    MergeFrom(*source);
  }
}

void SectionHintArchive::MergeFrom(const SectionHintArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.SectionHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  page_hints_.MergeFrom(from.page_hints_);
  if (from._internal_has_start_page_index()) {
    _internal_set_start_page_index(from._internal_start_page_index());
  }
}

void SectionHintArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.SectionHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHintArchive::CopyFrom(const SectionHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SectionHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHintArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(page_hints_)) return false;
  return true;
}

void SectionHintArchive::InternalSwap(SectionHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  page_hints_.InternalSwap(&other->page_hints_);
  swap(start_page_index_, other->start_page_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionHintArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[20]);
}

// ===================================================================

class TextboxHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TextboxHintArchive>()._has_bits_);
  static const ::TSP::Range& range(const TextboxHintArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& size(const TextboxHintArchive* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Range&
TextboxHintArchive::_Internal::range(const TextboxHintArchive* msg) {
  return *msg->range_;
}
const ::TSP::Size&
TextboxHintArchive::_Internal::size(const TextboxHintArchive* msg) {
  return *msg->size_;
}
void TextboxHintArchive::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TextboxHintArchive::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TextboxHintArchive::TextboxHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.TextboxHintArchive)
}
TextboxHintArchive::TextboxHintArchive(const TextboxHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    range_ = new ::TSP::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::TSP::Size(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.TextboxHintArchive)
}

void TextboxHintArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&range_)) + sizeof(size_));
}

TextboxHintArchive::~TextboxHintArchive() {
  // @@protoc_insertion_point(destructor:TP.TextboxHintArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextboxHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete size_;
}

void TextboxHintArchive::ArenaDtor(void* object) {
  TextboxHintArchive* _this = reinterpret_cast< TextboxHintArchive* >(object);
  (void)_this;
}
void TextboxHintArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextboxHintArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextboxHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.TextboxHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(range_ != nullptr);
      range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextboxHintArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Range range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Size size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextboxHintArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.TextboxHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Range range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::range(this), target, stream);
  }

  // required .TSP.Size size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.TextboxHintArchive)
  return target;
}

size_t TextboxHintArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.TextboxHintArchive)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required .TSP.Range range = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  if (_internal_has_size()) {
    // required .TSP.Size size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  return total_size;
}
size_t TextboxHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.TextboxHintArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Range range = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);

    // required .TSP.Size size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextboxHintArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.TextboxHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TextboxHintArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextboxHintArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.TextboxHintArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.TextboxHintArchive)
    MergeFrom(*source);
  }
}

void TextboxHintArchive::MergeFrom(const TextboxHintArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.TextboxHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_range()->::TSP::Range::MergeFrom(from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_size()->::TSP::Size::MergeFrom(from._internal_size());
    }
  }
}

void TextboxHintArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.TextboxHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextboxHintArchive::CopyFrom(const TextboxHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.TextboxHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextboxHintArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_range()) {
    if (!range_->IsInitialized()) return false;
  }
  if (_internal_has_size()) {
    if (!size_->IsInitialized()) return false;
  }
  return true;
}

void TextboxHintArchive::InternalSwap(TextboxHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextboxHintArchive, size_)
      + sizeof(TextboxHintArchive::size_)
      - PROTOBUF_FIELD_OFFSET(TextboxHintArchive, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextboxHintArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[21]);
}

// ===================================================================

class TopicNumberEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicNumberEntryArchive>()._has_bits_);
  static const ::TSP::Reference& list_style(const TopicNumberEntryArchive* msg);
  static void set_has_list_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
TopicNumberEntryArchive::_Internal::list_style(const TopicNumberEntryArchive* msg) {
  return *msg->list_style_;
}
void TopicNumberEntryArchive::clear_list_style() {
  if (list_style_ != nullptr) list_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TopicNumberEntryArchive::TopicNumberEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  topic_number_(arena),
  character_index_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.TopicNumberEntryArchive)
}
TopicNumberEntryArchive::TopicNumberEntryArchive(const TopicNumberEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      topic_number_(from.topic_number_),
      character_index_(from.character_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_list_style()) {
    list_style_ = new ::TSP::Reference(*from.list_style_);
  } else {
    list_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.TopicNumberEntryArchive)
}

void TopicNumberEntryArchive::SharedCtor() {
list_style_ = nullptr;
}

TopicNumberEntryArchive::~TopicNumberEntryArchive() {
  // @@protoc_insertion_point(destructor:TP.TopicNumberEntryArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopicNumberEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete list_style_;
}

void TopicNumberEntryArchive::ArenaDtor(void* object) {
  TopicNumberEntryArchive* _this = reinterpret_cast< TopicNumberEntryArchive* >(object);
  (void)_this;
}
void TopicNumberEntryArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopicNumberEntryArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TopicNumberEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.TopicNumberEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_number_.Clear();
  character_index_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(list_style_ != nullptr);
    list_style_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicNumberEntryArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference list_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 topic_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_topic_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_topic_number(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 character_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_character_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_character_index(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicNumberEntryArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.TopicNumberEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference list_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::list_style(this), target, stream);
  }

  // repeated uint32 topic_number = 2;
  for (int i = 0, n = this->_internal_topic_number_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_topic_number(i), target);
  }

  // repeated uint32 character_index = 3;
  for (int i = 0, n = this->_internal_character_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_character_index(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.TopicNumberEntryArchive)
  return target;
}

size_t TopicNumberEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.TopicNumberEntryArchive)
  size_t total_size = 0;

  // required .TSP.Reference list_style = 1;
  if (_internal_has_list_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_style_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 topic_number = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->topic_number_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_topic_number_size());
    total_size += data_size;
  }

  // repeated uint32 character_index = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->character_index_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_character_index_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicNumberEntryArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.TopicNumberEntryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicNumberEntryArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicNumberEntryArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.TopicNumberEntryArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.TopicNumberEntryArchive)
    MergeFrom(*source);
  }
}

void TopicNumberEntryArchive::MergeFrom(const TopicNumberEntryArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.TopicNumberEntryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topic_number_.MergeFrom(from.topic_number_);
  character_index_.MergeFrom(from.character_index_);
  if (from._internal_has_list_style()) {
    _internal_mutable_list_style()->::TSP::Reference::MergeFrom(from._internal_list_style());
  }
}

void TopicNumberEntryArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.TopicNumberEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicNumberEntryArchive::CopyFrom(const TopicNumberEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.TopicNumberEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicNumberEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_list_style()) {
    if (!list_style_->IsInitialized()) return false;
  }
  return true;
}

void TopicNumberEntryArchive::InternalSwap(TopicNumberEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  topic_number_.InternalSwap(&other->topic_number_);
  character_index_.InternalSwap(&other->character_index_);
  swap(list_style_, other->list_style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicNumberEntryArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[22]);
}

// ===================================================================

class TopicNumberHintsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicNumberHintsArchive>()._has_bits_);
  static void set_has_charindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_valid_through_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TopicNumberHintsArchive::TopicNumberHintsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  topic_numbers_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.TopicNumberHintsArchive)
}
TopicNumberHintsArchive::TopicNumberHintsArchive(const TopicNumberHintsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      topic_numbers_map_(from.topic_numbers_map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&charindex_, &from.charindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_through_char_index_) -
    reinterpret_cast<char*>(&charindex_)) + sizeof(valid_through_char_index_));
  // @@protoc_insertion_point(copy_constructor:TP.TopicNumberHintsArchive)
}

void TopicNumberHintsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&charindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&valid_through_char_index_) -
    reinterpret_cast<char*>(&charindex_)) + sizeof(valid_through_char_index_));
}

TopicNumberHintsArchive::~TopicNumberHintsArchive() {
  // @@protoc_insertion_point(destructor:TP.TopicNumberHintsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopicNumberHintsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopicNumberHintsArchive::ArenaDtor(void* object) {
  TopicNumberHintsArchive* _this = reinterpret_cast< TopicNumberHintsArchive* >(object);
  (void)_this;
}
void TopicNumberHintsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopicNumberHintsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TopicNumberHintsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.TopicNumberHintsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_numbers_map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&charindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_through_char_index_) -
        reinterpret_cast<char*>(&charindex_)) + sizeof(valid_through_char_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicNumberHintsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 charIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charindex(&has_bits);
          charindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topic_numbers_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 valid_through_char_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_valid_through_char_index(&has_bits);
          valid_through_char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicNumberHintsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.TopicNumberHintsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 charIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_charindex(), target);
  }

  // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_topic_numbers_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_topic_numbers_map(i), target, stream);
  }

  // optional uint32 valid_through_char_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_valid_through_char_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.TopicNumberHintsArchive)
  return target;
}

size_t TopicNumberHintsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.TopicNumberHintsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
  total_size += 1UL * this->_internal_topic_numbers_map_size();
  for (const auto& msg : this->topic_numbers_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 charIndex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_charindex());
    }

    // optional uint32 valid_through_char_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_valid_through_char_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicNumberHintsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.TopicNumberHintsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicNumberHintsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicNumberHintsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.TopicNumberHintsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.TopicNumberHintsArchive)
    MergeFrom(*source);
  }
}

void TopicNumberHintsArchive::MergeFrom(const TopicNumberHintsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.TopicNumberHintsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topic_numbers_map_.MergeFrom(from.topic_numbers_map_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      charindex_ = from.charindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      valid_through_char_index_ = from.valid_through_char_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TopicNumberHintsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.TopicNumberHintsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicNumberHintsArchive::CopyFrom(const TopicNumberHintsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.TopicNumberHintsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicNumberHintsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(topic_numbers_map_)) return false;
  return true;
}

void TopicNumberHintsArchive::InternalSwap(TopicNumberHintsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  topic_numbers_map_.InternalSwap(&other->topic_numbers_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopicNumberHintsArchive, valid_through_char_index_)
      + sizeof(TopicNumberHintsArchive::valid_through_char_index_)
      - PROTOBUF_FIELD_OFFSET(TopicNumberHintsArchive, charindex_)>(
          reinterpret_cast<char*>(&charindex_),
          reinterpret_cast<char*>(&other->charindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicNumberHintsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[23]);
}

// ===================================================================

class LayoutStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LayoutStateArchive>()._has_bits_);
  static void set_has_section_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_section_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_document_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_page_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_body_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_os_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LayoutStateArchive::LayoutStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  section_hints_(arena),
  missing_fonts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.LayoutStateArchive)
}
LayoutStateArchive::LayoutStateArchive(const LayoutStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      section_hints_(from.section_hints_),
      missing_fonts_(from.missing_fonts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&section_index_, &from.section_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&os_version_) -
    reinterpret_cast<char*>(&section_index_)) + sizeof(os_version_));
  // @@protoc_insertion_point(copy_constructor:TP.LayoutStateArchive)
}

void LayoutStateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&section_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&os_version_) -
    reinterpret_cast<char*>(&section_index_)) + sizeof(os_version_));
}

LayoutStateArchive::~LayoutStateArchive() {
  // @@protoc_insertion_point(destructor:TP.LayoutStateArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LayoutStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LayoutStateArchive::ArenaDtor(void* object) {
  LayoutStateArchive* _this = reinterpret_cast< LayoutStateArchive* >(object);
  (void)_this;
}
void LayoutStateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LayoutStateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayoutStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.LayoutStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_hints_.Clear();
  missing_fonts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&section_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&os_version_) -
        reinterpret_cast<char*>(&section_index_)) + sizeof(os_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayoutStateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 section_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_section_index(&has_bits);
          section_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 section_page_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_section_page_index(&has_bits);
          section_page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 document_page_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_document_page_index(&has_bits);
          document_page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_page_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_page_count(&has_bits);
          last_page_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TP.SectionHintArchive section_hints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_section_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 body_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_body_length(&has_bits);
          body_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string missing_fonts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_missing_fonts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.LayoutStateArchive.missing_fonts");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 os_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_os_version(&has_bits);
          os_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayoutStateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.LayoutStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 section_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_section_index(), target);
  }

  // optional uint32 section_page_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_section_page_index(), target);
  }

  // optional uint32 document_page_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_document_page_index(), target);
  }

  // optional uint32 last_page_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_page_count(), target);
  }

  // repeated .TP.SectionHintArchive section_hints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_section_hints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_section_hints(i), target, stream);
  }

  // optional uint32 body_length = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_body_length(), target);
  }

  // repeated string missing_fonts = 7;
  for (int i = 0, n = this->_internal_missing_fonts_size(); i < n; i++) {
    const auto& s = this->_internal_missing_fonts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.LayoutStateArchive.missing_fonts");
    target = stream->WriteString(7, s, target);
  }

  // optional int32 os_version = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_os_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.LayoutStateArchive)
  return target;
}

size_t LayoutStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.LayoutStateArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.SectionHintArchive section_hints = 5;
  total_size += 1UL * this->_internal_section_hints_size();
  for (const auto& msg : this->section_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string missing_fonts = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(missing_fonts_.size());
  for (int i = 0, n = missing_fonts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      missing_fonts_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 section_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_section_index());
    }

    // optional uint32 section_page_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_section_page_index());
    }

    // optional uint32 document_page_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_document_page_index());
    }

    // optional uint32 last_page_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_page_count());
    }

    // optional uint32 body_length = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_body_length());
    }

    // optional int32 os_version = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_os_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayoutStateArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.LayoutStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const LayoutStateArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LayoutStateArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.LayoutStateArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.LayoutStateArchive)
    MergeFrom(*source);
  }
}

void LayoutStateArchive::MergeFrom(const LayoutStateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.LayoutStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  section_hints_.MergeFrom(from.section_hints_);
  missing_fonts_.MergeFrom(from.missing_fonts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      section_index_ = from.section_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      section_page_index_ = from.section_page_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      document_page_index_ = from.document_page_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_page_count_ = from.last_page_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      body_length_ = from.body_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      os_version_ = from.os_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LayoutStateArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.LayoutStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutStateArchive::CopyFrom(const LayoutStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.LayoutStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutStateArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(section_hints_)) return false;
  return true;
}

void LayoutStateArchive::InternalSwap(LayoutStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  section_hints_.InternalSwap(&other->section_hints_);
  missing_fonts_.InternalSwap(&other->missing_fonts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayoutStateArchive, os_version_)
      + sizeof(LayoutStateArchive::os_version_)
      - PROTOBUF_FIELD_OFFSET(LayoutStateArchive, section_index_)>(
          reinterpret_cast<char*>(&section_index_),
          reinterpret_cast<char*>(&other->section_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutStateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[24]);
}

// ===================================================================

class CanvasSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CanvasSelectionArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Range& range(const CanvasSelectionArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_insertion_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caret_affinity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& container(const CanvasSelectionArchive* msg);
  static void set_has_container(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001d) ^ 0x0000001d) != 0;
  }
};

const ::TSP::Range&
CanvasSelectionArchive::_Internal::range(const CanvasSelectionArchive* msg) {
  return *msg->range_;
}
const ::TSP::Reference&
CanvasSelectionArchive::_Internal::container(const CanvasSelectionArchive* msg) {
  return *msg->container_;
}
void CanvasSelectionArchive::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CanvasSelectionArchive::clear_infos() {
  infos_.Clear();
}
void CanvasSelectionArchive::clear_excluded_infos() {
  excluded_infos_.Clear();
}
void CanvasSelectionArchive::clear_additional_infos() {
  additional_infos_.Clear();
}
void CanvasSelectionArchive::clear_container() {
  if (container_ != nullptr) container_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CanvasSelectionArchive::CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena),
  excluded_infos_(arena),
  additional_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.CanvasSelectionArchive)
}
CanvasSelectionArchive::CanvasSelectionArchive(const CanvasSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      infos_(from.infos_),
      excluded_infos_(from.excluded_infos_),
      additional_infos_(from.additional_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    range_ = new ::TSP::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_container()) {
    container_ = new ::TSP::Reference(*from.container_);
  } else {
    container_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&caret_affinity_) -
    reinterpret_cast<char*>(&type_)) + sizeof(caret_affinity_));
  // @@protoc_insertion_point(copy_constructor:TP.CanvasSelectionArchive)
}

void CanvasSelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&caret_affinity_) -
    reinterpret_cast<char*>(&range_)) + sizeof(caret_affinity_));
}

CanvasSelectionArchive::~CanvasSelectionArchive() {
  // @@protoc_insertion_point(destructor:TP.CanvasSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CanvasSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete container_;
}

void CanvasSelectionArchive::ArenaDtor(void* object) {
  CanvasSelectionArchive* _this = reinterpret_cast< CanvasSelectionArchive* >(object);
  (void)_this;
}
void CanvasSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanvasSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanvasSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.CanvasSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  excluded_infos_.Clear();
  additional_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(range_ != nullptr);
      range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(container_ != nullptr);
      container_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&caret_affinity_) -
        reinterpret_cast<char*>(&type_)) + sizeof(caret_affinity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.SelectionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::SelectionType_IsValid(val))) {
            _internal_set_type(static_cast<::TSWP::SelectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TSP.Range range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::StyleInsertionBehavior_IsValid(val))) {
            _internal_set_style_insertion_behavior(static_cast<::TSWP::StyleInsertionBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TSWP.CaretAffinity caret_affinity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CaretAffinity_IsValid(val))) {
            _internal_set_caret_affinity(static_cast<::TSWP::CaretAffinity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference infos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference excluded_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_excluded_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference additional_infos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference container = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanvasSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.CanvasSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.SelectionType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .TSP.Range range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::range(this), target, stream);
  }

  // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_style_insertion_behavior(), target);
  }

  // required .TSWP.CaretAffinity caret_affinity = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_caret_affinity(), target);
  }

  // repeated .TSP.Reference infos = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_infos(i), target, stream);
  }

  // repeated .TSP.Reference excluded_infos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_excluded_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_excluded_infos(i), target, stream);
  }

  // repeated .TSP.Reference additional_infos = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_additional_infos(i), target, stream);
  }

  // optional .TSP.Reference container = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::container(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.CanvasSelectionArchive)
  return target;
}

size_t CanvasSelectionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.CanvasSelectionArchive)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required .TSP.Range range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  if (_internal_has_type()) {
    // required .TSWP.SelectionType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_style_insertion_behavior()) {
    // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_style_insertion_behavior());
  }

  if (_internal_has_caret_affinity()) {
    // required .TSWP.CaretAffinity caret_affinity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_caret_affinity());
  }

  return total_size;
}
size_t CanvasSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.CanvasSelectionArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required .TSP.Range range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);

    // required .TSWP.SelectionType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_style_insertion_behavior());

    // required .TSWP.CaretAffinity caret_affinity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_caret_affinity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 5;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference excluded_infos = 6;
  total_size += 1UL * this->_internal_excluded_infos_size();
  for (const auto& msg : this->excluded_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference additional_infos = 7;
  total_size += 1UL * this->_internal_additional_infos_size();
  for (const auto& msg : this->additional_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference container = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanvasSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.CanvasSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CanvasSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanvasSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.CanvasSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.CanvasSelectionArchive)
    MergeFrom(*source);
  }
}

void CanvasSelectionArchive::MergeFrom(const CanvasSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.CanvasSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  excluded_infos_.MergeFrom(from.excluded_infos_);
  additional_infos_.MergeFrom(from.additional_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_range()->::TSP::Range::MergeFrom(from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_container()->::TSP::Reference::MergeFrom(from._internal_container());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      style_insertion_behavior_ = from.style_insertion_behavior_;
    }
    if (cached_has_bits & 0x00000010u) {
      caret_affinity_ = from.caret_affinity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CanvasSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.CanvasSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanvasSelectionArchive::CopyFrom(const CanvasSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.CanvasSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(infos_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(excluded_infos_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(additional_infos_)) return false;
  if (_internal_has_range()) {
    if (!range_->IsInitialized()) return false;
  }
  if (_internal_has_container()) {
    if (!container_->IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionArchive::InternalSwap(CanvasSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  infos_.InternalSwap(&other->infos_);
  excluded_infos_.InternalSwap(&other->excluded_infos_);
  additional_infos_.InternalSwap(&other->additional_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanvasSelectionArchive, caret_affinity_)
      + sizeof(CanvasSelectionArchive::caret_affinity_)
      - PROTOBUF_FIELD_OFFSET(CanvasSelectionArchive, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[25]);
}

// ===================================================================

class AllFootnoteSelectionArchive::_Internal {
 public:
};

AllFootnoteSelectionArchive::AllFootnoteSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.AllFootnoteSelectionArchive)
}
AllFootnoteSelectionArchive::AllFootnoteSelectionArchive(const AllFootnoteSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TP.AllFootnoteSelectionArchive)
}

void AllFootnoteSelectionArchive::SharedCtor() {
}

AllFootnoteSelectionArchive::~AllFootnoteSelectionArchive() {
  // @@protoc_insertion_point(destructor:TP.AllFootnoteSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllFootnoteSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllFootnoteSelectionArchive::ArenaDtor(void* object) {
  AllFootnoteSelectionArchive* _this = reinterpret_cast< AllFootnoteSelectionArchive* >(object);
  (void)_this;
}
void AllFootnoteSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllFootnoteSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllFootnoteSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.AllFootnoteSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllFootnoteSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllFootnoteSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.AllFootnoteSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.AllFootnoteSelectionArchive)
  return target;
}

size_t AllFootnoteSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.AllFootnoteSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllFootnoteSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.AllFootnoteSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const AllFootnoteSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllFootnoteSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.AllFootnoteSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.AllFootnoteSelectionArchive)
    MergeFrom(*source);
  }
}

void AllFootnoteSelectionArchive::MergeFrom(const AllFootnoteSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.AllFootnoteSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AllFootnoteSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.AllFootnoteSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllFootnoteSelectionArchive::CopyFrom(const AllFootnoteSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.AllFootnoteSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllFootnoteSelectionArchive::IsInitialized() const {
  return true;
}

void AllFootnoteSelectionArchive::InternalSwap(AllFootnoteSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllFootnoteSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[26]);
}

// ===================================================================

class UIStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UIStateArchive>()._has_bits_);
  static void set_has_obsolete_view_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Point& visible_rect_origin(const UIStateArchive* msg);
  static void set_has_visible_rect_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_obsolete_landscape(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& selection(const UIStateArchive* msg);
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& selection_model(const UIStateArchive* msg);
  static void set_has_selection_model(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_master_drawables_selectable(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::Size& visible_rect_size(const UIStateArchive* msg);
  static void set_has_visible_rect_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ruler_visible(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_layout_borders_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_word_count_hud_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_shows_comments(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_shows_page_navigator(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_view_scale_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_view_scale(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSP::Point& window_frame_origin(const UIStateArchive* msg);
  static void set_has_window_frame_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Size& window_frame_size(const UIStateArchive* msg);
  static void set_has_window_frame_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_selected_inspector_switch_segment_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inspector_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_word_count_hud_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_word_count_hud_x_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_word_count_hud_y_position(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_show_user_defined_guides(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_should_show_comment_sidebar(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSK::SelectionPathArchive& compatibility_selection_path(const UIStateArchive* msg);
  static void set_has_compatibility_selection_path(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_shows_ctmarkup(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_shows_ctdeletions(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_change_tracking_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSK::SelectionPathArchive& selection_path(const UIStateArchive* msg);
  static void set_has_selection_path(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_filtered_author_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_view_scale_mode_ios(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSP::Reference& filtered_author(const UIStateArchive* msg);
  static void set_has_filtered_author(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_page_view_state(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_pencil_annotations_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSP::Reference& freehand_drawing_toolkit_state(const UIStateArchive* msg);
  static void set_has_freehand_drawing_toolkit_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_presentation_auto_scroll_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSP::Reference& selection_path_transformer(const UIStateArchive* msg);
  static void set_has_selection_path_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_shows_toc_navigator(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_show_user_defined_master_guides(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_editing_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSP::Reference& pencil_annotation_ui_state(const UIStateArchive* msg);
  static void set_has_pencil_annotation_ui_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::TSP::Point&
UIStateArchive::_Internal::visible_rect_origin(const UIStateArchive* msg) {
  return *msg->visible_rect_origin_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::selection(const UIStateArchive* msg) {
  return *msg->selection_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::selection_model(const UIStateArchive* msg) {
  return *msg->selection_model_;
}
const ::TSP::Size&
UIStateArchive::_Internal::visible_rect_size(const UIStateArchive* msg) {
  return *msg->visible_rect_size_;
}
const ::TSP::Point&
UIStateArchive::_Internal::window_frame_origin(const UIStateArchive* msg) {
  return *msg->window_frame_origin_;
}
const ::TSP::Size&
UIStateArchive::_Internal::window_frame_size(const UIStateArchive* msg) {
  return *msg->window_frame_size_;
}
const ::TSK::SelectionPathArchive&
UIStateArchive::_Internal::compatibility_selection_path(const UIStateArchive* msg) {
  return *msg->compatibility_selection_path_;
}
const ::TSK::SelectionPathArchive&
UIStateArchive::_Internal::selection_path(const UIStateArchive* msg) {
  return *msg->selection_path_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::filtered_author(const UIStateArchive* msg) {
  return *msg->filtered_author_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::freehand_drawing_toolkit_state(const UIStateArchive* msg) {
  return *msg->freehand_drawing_toolkit_state_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::selection_path_transformer(const UIStateArchive* msg) {
  return *msg->selection_path_transformer_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::pencil_annotation_ui_state(const UIStateArchive* msg) {
  return *msg->pencil_annotation_ui_state_;
}
void UIStateArchive::clear_visible_rect_origin() {
  if (visible_rect_origin_ != nullptr) visible_rect_origin_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void UIStateArchive::clear_selection() {
  if (selection_ != nullptr) selection_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void UIStateArchive::clear_selection_model() {
  if (selection_model_ != nullptr) selection_model_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void UIStateArchive::clear_visible_rect_size() {
  if (visible_rect_size_ != nullptr) visible_rect_size_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void UIStateArchive::clear_chart_ui_state() {
  chart_ui_state_.Clear();
}
void UIStateArchive::clear_window_frame_origin() {
  if (window_frame_origin_ != nullptr) window_frame_origin_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void UIStateArchive::clear_window_frame_size() {
  if (window_frame_size_ != nullptr) window_frame_size_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void UIStateArchive::clear_compatibility_selection_path() {
  if (compatibility_selection_path_ != nullptr) compatibility_selection_path_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void UIStateArchive::clear_selection_path() {
  if (selection_path_ != nullptr) selection_path_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void UIStateArchive::clear_filtered_author() {
  if (filtered_author_ != nullptr) filtered_author_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void UIStateArchive::clear_freehand_drawing_toolkit_state() {
  if (freehand_drawing_toolkit_state_ != nullptr) freehand_drawing_toolkit_state_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void UIStateArchive::clear_selection_path_transformer() {
  if (selection_path_transformer_ != nullptr) selection_path_transformer_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void UIStateArchive::clear_pencil_annotation_ui_state() {
  if (pencil_annotation_ui_state_ != nullptr) pencil_annotation_ui_state_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
UIStateArchive::UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chart_ui_state_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.UIStateArchive)
}
UIStateArchive::UIStateArchive(const UIStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chart_ui_state_(from.chart_ui_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  selected_inspector_switch_segment_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_selected_inspector_switch_segment_identifier()) {
    selected_inspector_switch_segment_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_selected_inspector_switch_segment_identifier(), 
      GetArena());
  }
  filtered_author_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filtered_author_name()) {
    filtered_author_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filtered_author_name(), 
      GetArena());
  }
  if (from._internal_has_visible_rect_origin()) {
    visible_rect_origin_ = new ::TSP::Point(*from.visible_rect_origin_);
  } else {
    visible_rect_origin_ = nullptr;
  }
  if (from._internal_has_selection()) {
    selection_ = new ::TSP::Reference(*from.selection_);
  } else {
    selection_ = nullptr;
  }
  if (from._internal_has_selection_model()) {
    selection_model_ = new ::TSP::Reference(*from.selection_model_);
  } else {
    selection_model_ = nullptr;
  }
  if (from._internal_has_visible_rect_size()) {
    visible_rect_size_ = new ::TSP::Size(*from.visible_rect_size_);
  } else {
    visible_rect_size_ = nullptr;
  }
  if (from._internal_has_window_frame_origin()) {
    window_frame_origin_ = new ::TSP::Point(*from.window_frame_origin_);
  } else {
    window_frame_origin_ = nullptr;
  }
  if (from._internal_has_window_frame_size()) {
    window_frame_size_ = new ::TSP::Size(*from.window_frame_size_);
  } else {
    window_frame_size_ = nullptr;
  }
  if (from._internal_has_compatibility_selection_path()) {
    compatibility_selection_path_ = new ::TSK::SelectionPathArchive(*from.compatibility_selection_path_);
  } else {
    compatibility_selection_path_ = nullptr;
  }
  if (from._internal_has_selection_path()) {
    selection_path_ = new ::TSK::SelectionPathArchive(*from.selection_path_);
  } else {
    selection_path_ = nullptr;
  }
  if (from._internal_has_filtered_author()) {
    filtered_author_ = new ::TSP::Reference(*from.filtered_author_);
  } else {
    filtered_author_ = nullptr;
  }
  if (from._internal_has_freehand_drawing_toolkit_state()) {
    freehand_drawing_toolkit_state_ = new ::TSP::Reference(*from.freehand_drawing_toolkit_state_);
  } else {
    freehand_drawing_toolkit_state_ = nullptr;
  }
  if (from._internal_has_selection_path_transformer()) {
    selection_path_transformer_ = new ::TSP::Reference(*from.selection_path_transformer_);
  } else {
    selection_path_transformer_ = nullptr;
  }
  if (from._internal_has_pencil_annotation_ui_state()) {
    pencil_annotation_ui_state_ = new ::TSP::Reference(*from.pencil_annotation_ui_state_);
  } else {
    pencil_annotation_ui_state_ = nullptr;
  }
  ::memcpy(&obsolete_view_scale_, &from.obsolete_view_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_user_defined_master_guides_) -
    reinterpret_cast<char*>(&obsolete_view_scale_)) + sizeof(show_user_defined_master_guides_));
  // @@protoc_insertion_point(copy_constructor:TP.UIStateArchive)
}

void UIStateArchive::SharedCtor() {
selected_inspector_switch_segment_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filtered_author_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&visible_rect_origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&editing_disabled_) -
    reinterpret_cast<char*>(&visible_rect_origin_)) + sizeof(editing_disabled_));
view_scale_ = 1.25f;
ruler_visible_ = true;
shows_comments_ = true;
show_user_defined_guides_ = true;
shows_ctmarkup_ = true;
view_scale_mode_ios_ = 1;
shows_ctdeletions_ = true;
show_user_defined_master_guides_ = true;
}

UIStateArchive::~UIStateArchive() {
  // @@protoc_insertion_point(destructor:TP.UIStateArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UIStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  selected_inspector_switch_segment_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filtered_author_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete visible_rect_origin_;
  if (this != internal_default_instance()) delete selection_;
  if (this != internal_default_instance()) delete selection_model_;
  if (this != internal_default_instance()) delete visible_rect_size_;
  if (this != internal_default_instance()) delete window_frame_origin_;
  if (this != internal_default_instance()) delete window_frame_size_;
  if (this != internal_default_instance()) delete compatibility_selection_path_;
  if (this != internal_default_instance()) delete selection_path_;
  if (this != internal_default_instance()) delete filtered_author_;
  if (this != internal_default_instance()) delete freehand_drawing_toolkit_state_;
  if (this != internal_default_instance()) delete selection_path_transformer_;
  if (this != internal_default_instance()) delete pencil_annotation_ui_state_;
}

void UIStateArchive::ArenaDtor(void* object) {
  UIStateArchive* _this = reinterpret_cast< UIStateArchive* >(object);
  (void)_this;
}
void UIStateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UIStateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UIStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.UIStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chart_ui_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      selected_inspector_switch_segment_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filtered_author_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(visible_rect_origin_ != nullptr);
      visible_rect_origin_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(selection_ != nullptr);
      selection_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(selection_model_ != nullptr);
      selection_model_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(visible_rect_size_ != nullptr);
      visible_rect_size_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(window_frame_origin_ != nullptr);
      window_frame_origin_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(window_frame_size_ != nullptr);
      window_frame_size_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(compatibility_selection_path_ != nullptr);
      compatibility_selection_path_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(selection_path_ != nullptr);
      selection_path_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(filtered_author_ != nullptr);
      filtered_author_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(freehand_drawing_toolkit_state_ != nullptr);
      freehand_drawing_toolkit_state_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(selection_path_transformer_ != nullptr);
      selection_path_transformer_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(pencil_annotation_ui_state_ != nullptr);
      pencil_annotation_ui_state_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&obsolete_view_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obsolete_landscape_) -
        reinterpret_cast<char*>(&obsolete_view_scale_)) + sizeof(obsolete_landscape_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&master_drawables_selectable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inspector_hidden_) -
        reinterpret_cast<char*>(&master_drawables_selectable_)) + sizeof(inspector_hidden_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&should_show_comment_sidebar_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&editing_disabled_) -
        reinterpret_cast<char*>(&should_show_comment_sidebar_)) + sizeof(editing_disabled_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    view_scale_ = 1.25f;
    ruler_visible_ = true;
    shows_comments_ = true;
    show_user_defined_guides_ = true;
    shows_ctmarkup_ = true;
    view_scale_mode_ios_ = 1;
    shows_ctdeletions_ = true;
    show_user_defined_master_guides_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIStateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float OBSOLETE_view_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_obsolete_view_scale(&_has_bits_);
          obsolete_view_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point visible_rect_origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_visible_rect_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool OBSOLETE_landscape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_obsolete_landscape(&_has_bits_);
          obsolete_landscape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference selection = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference selection_model = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool master_drawables_selectable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_master_drawables_selectable(&_has_bits_);
          master_drawables_selectable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size visible_rect_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_visible_rect_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.ChartUIState chart_ui_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_ui_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool ruler_visible = 9 [default = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ruler_visible(&_has_bits_);
          ruler_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool layout_borders_visible = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_layout_borders_visible(&_has_bits_);
          layout_borders_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool word_count_hud_visible = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_word_count_hud_visible(&_has_bits_);
          word_count_hud_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shows_comments = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_shows_comments(&_has_bits_);
          shows_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shows_page_navigator = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_shows_page_navigator(&_has_bits_);
          shows_page_navigator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::ViewScaleMode_IsValid(val))) {
            _internal_set_view_scale_mode(static_cast<::TP::ViewScaleMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float view_scale = 15 [default = 1.25];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_view_scale(&_has_bits_);
          view_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point window_frame_origin = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_frame_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size window_frame_size = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_frame_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string selected_inspector_switch_segment_identifier = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_selected_inspector_switch_segment_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.UIStateArchive.selected_inspector_switch_segment_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inspector_hidden = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_inspector_hidden(&_has_bits_);
          inspector_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 word_count_hud_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_word_count_hud_type(&_has_bits_);
          word_count_hud_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float word_count_hud_x_position = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_word_count_hud_x_position(&_has_bits_);
          word_count_hud_x_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float word_count_hud_y_position = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_word_count_hud_y_position(&_has_bits_);
          word_count_hud_y_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool show_user_defined_guides = 23 [default = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_show_user_defined_guides(&_has_bits_);
          show_user_defined_guides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_show_comment_sidebar = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_should_show_comment_sidebar(&_has_bits_);
          should_show_comment_sidebar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive compatibility_selection_path = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_compatibility_selection_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shows_ctmarkup = 26 [default = true];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_shows_ctmarkup(&_has_bits_);
          shows_ctmarkup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shows_ctdeletions = 27 [default = true];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_shows_ctdeletions(&_has_bits_);
          shows_ctdeletions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool change_tracking_paused = 28 [default = false];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_change_tracking_paused(&_has_bits_);
          change_tracking_paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive selection_path = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filtered_author_name = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_filtered_author_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TP.UIStateArchive.filtered_author_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TP.ViewScaleModeiOS view_scale_mode_ios = 31 [default = ViewScaleModeiOS_UserDefined];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::ViewScaleModeiOS_IsValid(val))) {
            _internal_set_view_scale_mode_ios(static_cast<::TP::ViewScaleModeiOS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference filtered_author = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_filtered_author(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TP.PageViewState page_view_state = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TP::PageViewState_IsValid(val))) {
            _internal_set_page_view_state(static_cast<::TP::PageViewState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(33, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool pencil_annotations_hidden = 34 [default = false];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pencil_annotations_hidden(&_has_bits_);
          pencil_annotations_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference freehand_drawing_toolkit_state = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_freehand_drawing_toolkit_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float presentation_auto_scroll_speed = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_presentation_auto_scroll_speed(&_has_bits_);
          presentation_auto_scroll_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference selection_path_transformer = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_path_transformer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shows_toc_navigator = 38 [default = false];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_shows_toc_navigator(&_has_bits_);
          shows_toc_navigator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_user_defined_master_guides = 39 [default = true];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_show_user_defined_master_guides(&_has_bits_);
          show_user_defined_master_guides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool editing_disabled = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_editing_disabled(&_has_bits_);
          editing_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference pencil_annotation_ui_state = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_ui_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UIStateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.UIStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float OBSOLETE_view_scale = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_obsolete_view_scale(), target);
  }

  // optional .TSP.Point visible_rect_origin = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::visible_rect_origin(this), target, stream);
  }

  // optional bool OBSOLETE_landscape = 3;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_obsolete_landscape(), target);
  }

  // optional .TSP.Reference selection = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::selection(this), target, stream);
  }

  // optional .TSP.Reference selection_model = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::selection_model(this), target, stream);
  }

  // optional bool master_drawables_selectable = 6;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_master_drawables_selectable(), target);
  }

  // optional .TSP.Size visible_rect_size = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::visible_rect_size(this), target, stream);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chart_ui_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_chart_ui_state(i), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool ruler_visible = 9 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_ruler_visible(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool layout_borders_visible = 10 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_layout_borders_visible(), target);
  }

  // optional bool word_count_hud_visible = 11 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_word_count_hud_visible(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool shows_comments = 12 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_shows_comments(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool shows_page_navigator = 13 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_shows_page_navigator(), target);
  }

  // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_view_scale_mode(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float view_scale = 15 [default = 1.25];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_view_scale(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Point window_frame_origin = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::window_frame_origin(this), target, stream);
  }

  // optional .TSP.Size window_frame_size = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::window_frame_size(this), target, stream);
  }

  // optional string selected_inspector_switch_segment_identifier = 18;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selected_inspector_switch_segment_identifier().data(), static_cast<int>(this->_internal_selected_inspector_switch_segment_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.UIStateArchive.selected_inspector_switch_segment_identifier");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_selected_inspector_switch_segment_identifier(), target);
  }

  // optional bool inspector_hidden = 19;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_inspector_hidden(), target);
  }

  // optional uint32 word_count_hud_type = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_word_count_hud_type(), target);
  }

  // optional float word_count_hud_x_position = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_word_count_hud_x_position(), target);
  }

  // optional float word_count_hud_y_position = 22;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_word_count_hud_y_position(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool show_user_defined_guides = 23 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_show_user_defined_guides(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool should_show_comment_sidebar = 24 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_should_show_comment_sidebar(), target);
  }

  // optional .TSK.SelectionPathArchive compatibility_selection_path = 25;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::compatibility_selection_path(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool shows_ctmarkup = 26 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_shows_ctmarkup(), target);
  }

  // optional bool shows_ctdeletions = 27 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_shows_ctdeletions(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool change_tracking_paused = 28 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_change_tracking_paused(), target);
  }

  // optional .TSK.SelectionPathArchive selection_path = 29;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::selection_path(this), target, stream);
  }

  // optional string filtered_author_name = 30;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filtered_author_name().data(), static_cast<int>(this->_internal_filtered_author_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TP.UIStateArchive.filtered_author_name");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_filtered_author_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TP.ViewScaleModeiOS view_scale_mode_ios = 31 [default = ViewScaleModeiOS_UserDefined];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->_internal_view_scale_mode_ios(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference filtered_author = 32;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::filtered_author(this), target, stream);
  }

  // optional .TP.PageViewState page_view_state = 33;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      33, this->_internal_page_view_state(), target);
  }

  // optional bool pencil_annotations_hidden = 34 [default = false];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_pencil_annotations_hidden(), target);
  }

  // optional .TSP.Reference freehand_drawing_toolkit_state = 35;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::freehand_drawing_toolkit_state(this), target, stream);
  }

  // optional float presentation_auto_scroll_speed = 36;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_presentation_auto_scroll_speed(), target);
  }

  // optional .TSP.Reference selection_path_transformer = 37;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::selection_path_transformer(this), target, stream);
  }

  // optional bool shows_toc_navigator = 38 [default = false];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_shows_toc_navigator(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool show_user_defined_master_guides = 39 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_show_user_defined_master_guides(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool editing_disabled = 40;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_editing_disabled(), target);
  }

  // optional .TSP.Reference pencil_annotation_ui_state = 41;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::pencil_annotation_ui_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.UIStateArchive)
  return target;
}

size_t UIStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.UIStateArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartUIState chart_ui_state = 8;
  total_size += 1UL * this->_internal_chart_ui_state_size();
  for (const auto& msg : this->chart_ui_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string selected_inspector_switch_segment_identifier = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selected_inspector_switch_segment_identifier());
    }

    // optional string filtered_author_name = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filtered_author_name());
    }

    // optional .TSP.Point visible_rect_origin = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visible_rect_origin_);
    }

    // optional .TSP.Reference selection = 4 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_);
    }

    // optional .TSP.Reference selection_model = 5 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_model_);
    }

    // optional .TSP.Size visible_rect_size = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visible_rect_size_);
    }

    // optional .TSP.Point window_frame_origin = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_frame_origin_);
    }

    // optional .TSP.Size window_frame_size = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_frame_size_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSK.SelectionPathArchive compatibility_selection_path = 25;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compatibility_selection_path_);
    }

    // optional .TSK.SelectionPathArchive selection_path = 29;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_path_);
    }

    // optional .TSP.Reference filtered_author = 32;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filtered_author_);
    }

    // optional .TSP.Reference freehand_drawing_toolkit_state = 35;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *freehand_drawing_toolkit_state_);
    }

    // optional .TSP.Reference selection_path_transformer = 37;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_path_transformer_);
    }

    // optional .TSP.Reference pencil_annotation_ui_state = 41;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pencil_annotation_ui_state_);
    }

    // optional float OBSOLETE_view_scale = 1;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional bool OBSOLETE_landscape = 3;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool master_drawables_selectable = 6;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool layout_borders_visible = 10 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool word_count_hud_visible = 11 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_view_scale_mode());
    }

    // optional uint32 word_count_hud_type = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_word_count_hud_type());
    }

    // optional float word_count_hud_x_position = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional bool shows_page_navigator = 13 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional bool inspector_hidden = 19;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool should_show_comment_sidebar = 24 [default = false];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool change_tracking_paused = 28 [default = false];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional float word_count_hud_y_position = 22;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional .TP.PageViewState page_view_state = 33;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page_view_state());
    }

    // optional float presentation_auto_scroll_speed = 36;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional bool pencil_annotations_hidden = 34 [default = false];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool shows_toc_navigator = 38 [default = false];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool editing_disabled = 40;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float view_scale = 15 [default = 1.25];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool ruler_visible = 9 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool shows_comments = 12 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool show_user_defined_guides = 23 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool shows_ctmarkup = 26 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional .TP.ViewScaleModeiOS view_scale_mode_ios = 31 [default = ViewScaleModeiOS_UserDefined];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_view_scale_mode_ios());
    }

    // optional bool shows_ctdeletions = 27 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool show_user_defined_master_guides = 39 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UIStateArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.UIStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UIStateArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UIStateArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.UIStateArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.UIStateArchive)
    MergeFrom(*source);
  }
}

void UIStateArchive::MergeFrom(const UIStateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.UIStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chart_ui_state_.MergeFrom(from.chart_ui_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_selected_inspector_switch_segment_identifier(from._internal_selected_inspector_switch_segment_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filtered_author_name(from._internal_filtered_author_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_visible_rect_origin()->::TSP::Point::MergeFrom(from._internal_visible_rect_origin());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_selection()->::TSP::Reference::MergeFrom(from._internal_selection());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_selection_model()->::TSP::Reference::MergeFrom(from._internal_selection_model());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_visible_rect_size()->::TSP::Size::MergeFrom(from._internal_visible_rect_size());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_window_frame_origin()->::TSP::Point::MergeFrom(from._internal_window_frame_origin());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_window_frame_size()->::TSP::Size::MergeFrom(from._internal_window_frame_size());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_compatibility_selection_path()->::TSK::SelectionPathArchive::MergeFrom(from._internal_compatibility_selection_path());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_selection_path()->::TSK::SelectionPathArchive::MergeFrom(from._internal_selection_path());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_filtered_author()->::TSP::Reference::MergeFrom(from._internal_filtered_author());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_freehand_drawing_toolkit_state()->::TSP::Reference::MergeFrom(from._internal_freehand_drawing_toolkit_state());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_selection_path_transformer()->::TSP::Reference::MergeFrom(from._internal_selection_path_transformer());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_pencil_annotation_ui_state()->::TSP::Reference::MergeFrom(from._internal_pencil_annotation_ui_state());
    }
    if (cached_has_bits & 0x00004000u) {
      obsolete_view_scale_ = from.obsolete_view_scale_;
    }
    if (cached_has_bits & 0x00008000u) {
      obsolete_landscape_ = from.obsolete_landscape_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      master_drawables_selectable_ = from.master_drawables_selectable_;
    }
    if (cached_has_bits & 0x00020000u) {
      layout_borders_visible_ = from.layout_borders_visible_;
    }
    if (cached_has_bits & 0x00040000u) {
      word_count_hud_visible_ = from.word_count_hud_visible_;
    }
    if (cached_has_bits & 0x00080000u) {
      view_scale_mode_ = from.view_scale_mode_;
    }
    if (cached_has_bits & 0x00100000u) {
      word_count_hud_type_ = from.word_count_hud_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      word_count_hud_x_position_ = from.word_count_hud_x_position_;
    }
    if (cached_has_bits & 0x00400000u) {
      shows_page_navigator_ = from.shows_page_navigator_;
    }
    if (cached_has_bits & 0x00800000u) {
      inspector_hidden_ = from.inspector_hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      should_show_comment_sidebar_ = from.should_show_comment_sidebar_;
    }
    if (cached_has_bits & 0x02000000u) {
      change_tracking_paused_ = from.change_tracking_paused_;
    }
    if (cached_has_bits & 0x04000000u) {
      word_count_hud_y_position_ = from.word_count_hud_y_position_;
    }
    if (cached_has_bits & 0x08000000u) {
      page_view_state_ = from.page_view_state_;
    }
    if (cached_has_bits & 0x10000000u) {
      presentation_auto_scroll_speed_ = from.presentation_auto_scroll_speed_;
    }
    if (cached_has_bits & 0x20000000u) {
      pencil_annotations_hidden_ = from.pencil_annotations_hidden_;
    }
    if (cached_has_bits & 0x40000000u) {
      shows_toc_navigator_ = from.shows_toc_navigator_;
    }
    if (cached_has_bits & 0x80000000u) {
      editing_disabled_ = from.editing_disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      view_scale_ = from.view_scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      ruler_visible_ = from.ruler_visible_;
    }
    if (cached_has_bits & 0x00000004u) {
      shows_comments_ = from.shows_comments_;
    }
    if (cached_has_bits & 0x00000008u) {
      show_user_defined_guides_ = from.show_user_defined_guides_;
    }
    if (cached_has_bits & 0x00000010u) {
      shows_ctmarkup_ = from.shows_ctmarkup_;
    }
    if (cached_has_bits & 0x00000020u) {
      view_scale_mode_ios_ = from.view_scale_mode_ios_;
    }
    if (cached_has_bits & 0x00000040u) {
      shows_ctdeletions_ = from.shows_ctdeletions_;
    }
    if (cached_has_bits & 0x00000080u) {
      show_user_defined_master_guides_ = from.show_user_defined_master_guides_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void UIStateArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.UIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIStateArchive::CopyFrom(const UIStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.UIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chart_ui_state_)) return false;
  if (_internal_has_visible_rect_origin()) {
    if (!visible_rect_origin_->IsInitialized()) return false;
  }
  if (_internal_has_selection()) {
    if (!selection_->IsInitialized()) return false;
  }
  if (_internal_has_selection_model()) {
    if (!selection_model_->IsInitialized()) return false;
  }
  if (_internal_has_visible_rect_size()) {
    if (!visible_rect_size_->IsInitialized()) return false;
  }
  if (_internal_has_window_frame_origin()) {
    if (!window_frame_origin_->IsInitialized()) return false;
  }
  if (_internal_has_window_frame_size()) {
    if (!window_frame_size_->IsInitialized()) return false;
  }
  if (_internal_has_compatibility_selection_path()) {
    if (!compatibility_selection_path_->IsInitialized()) return false;
  }
  if (_internal_has_selection_path()) {
    if (!selection_path_->IsInitialized()) return false;
  }
  if (_internal_has_filtered_author()) {
    if (!filtered_author_->IsInitialized()) return false;
  }
  if (_internal_has_freehand_drawing_toolkit_state()) {
    if (!freehand_drawing_toolkit_state_->IsInitialized()) return false;
  }
  if (_internal_has_selection_path_transformer()) {
    if (!selection_path_transformer_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_annotation_ui_state()) {
    if (!pencil_annotation_ui_state_->IsInitialized()) return false;
  }
  return true;
}

void UIStateArchive::InternalSwap(UIStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  chart_ui_state_.InternalSwap(&other->chart_ui_state_);
  selected_inspector_switch_segment_identifier_.Swap(&other->selected_inspector_switch_segment_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filtered_author_name_.Swap(&other->filtered_author_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIStateArchive, editing_disabled_)
      + sizeof(UIStateArchive::editing_disabled_)
      - PROTOBUF_FIELD_OFFSET(UIStateArchive, visible_rect_origin_)>(
          reinterpret_cast<char*>(&visible_rect_origin_),
          reinterpret_cast<char*>(&other->visible_rect_origin_));
  swap(view_scale_, other->view_scale_);
  swap(ruler_visible_, other->ruler_visible_);
  swap(shows_comments_, other->shows_comments_);
  swap(show_user_defined_guides_, other->show_user_defined_guides_);
  swap(shows_ctmarkup_, other->shows_ctmarkup_);
  swap(view_scale_mode_ios_, other->view_scale_mode_ios_);
  swap(shows_ctdeletions_, other->shows_ctdeletions_);
  swap(show_user_defined_master_guides_, other->show_user_defined_master_guides_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UIStateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[27]);
}

// ===================================================================

class ViewStateRootArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewStateRootArchive>()._has_bits_);
  static const ::TSP::Reference& layout_state(const ViewStateRootArchive* msg);
  static void set_has_layout_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& view_state(const ViewStateRootArchive* msg);
  static void set_has_view_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
ViewStateRootArchive::_Internal::layout_state(const ViewStateRootArchive* msg) {
  return *msg->layout_state_;
}
const ::TSP::Reference&
ViewStateRootArchive::_Internal::view_state(const ViewStateRootArchive* msg) {
  return *msg->view_state_;
}
void ViewStateRootArchive::clear_layout_state() {
  if (layout_state_ != nullptr) layout_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ViewStateRootArchive::clear_view_state() {
  if (view_state_ != nullptr) view_state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ViewStateRootArchive::ViewStateRootArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.ViewStateRootArchive)
}
ViewStateRootArchive::ViewStateRootArchive(const ViewStateRootArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_layout_state()) {
    layout_state_ = new ::TSP::Reference(*from.layout_state_);
  } else {
    layout_state_ = nullptr;
  }
  if (from._internal_has_view_state()) {
    view_state_ = new ::TSP::Reference(*from.view_state_);
  } else {
    view_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.ViewStateRootArchive)
}

void ViewStateRootArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&layout_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&view_state_) -
    reinterpret_cast<char*>(&layout_state_)) + sizeof(view_state_));
}

ViewStateRootArchive::~ViewStateRootArchive() {
  // @@protoc_insertion_point(destructor:TP.ViewStateRootArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ViewStateRootArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete layout_state_;
  if (this != internal_default_instance()) delete view_state_;
}

void ViewStateRootArchive::ArenaDtor(void* object) {
  ViewStateRootArchive* _this = reinterpret_cast< ViewStateRootArchive* >(object);
  (void)_this;
}
void ViewStateRootArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewStateRootArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewStateRootArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.ViewStateRootArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(layout_state_ != nullptr);
      layout_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(view_state_ != nullptr);
      view_state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewStateRootArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference layout_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference view_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewStateRootArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.ViewStateRootArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference layout_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::layout_state(this), target, stream);
  }

  // optional .TSP.Reference view_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::view_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.ViewStateRootArchive)
  return target;
}

size_t ViewStateRootArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.ViewStateRootArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference layout_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layout_state_);
    }

    // optional .TSP.Reference view_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *view_state_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewStateRootArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.ViewStateRootArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewStateRootArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewStateRootArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.ViewStateRootArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.ViewStateRootArchive)
    MergeFrom(*source);
  }
}

void ViewStateRootArchive::MergeFrom(const ViewStateRootArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.ViewStateRootArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_layout_state()->::TSP::Reference::MergeFrom(from._internal_layout_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_view_state()->::TSP::Reference::MergeFrom(from._internal_view_state());
    }
  }
}

void ViewStateRootArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.ViewStateRootArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewStateRootArchive::CopyFrom(const ViewStateRootArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.ViewStateRootArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewStateRootArchive::IsInitialized() const {
  if (_internal_has_layout_state()) {
    if (!layout_state_->IsInitialized()) return false;
  }
  if (_internal_has_view_state()) {
    if (!view_state_->IsInitialized()) return false;
  }
  return true;
}

void ViewStateRootArchive::InternalSwap(ViewStateRootArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewStateRootArchive, view_state_)
      + sizeof(ViewStateRootArchive::view_state_)
      - PROTOBUF_FIELD_OFFSET(ViewStateRootArchive, layout_state_)>(
          reinterpret_cast<char*>(&layout_state_),
          reinterpret_cast<char*>(&other->layout_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewStateRootArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[28]);
}

// ===================================================================

class UserDefinedGuideMapArchive_UserDefinedGuide::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDefinedGuideMapArchive_UserDefinedGuide>()._has_bits_);
  static void set_has_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& guide_storage(const UserDefinedGuideMapArchive_UserDefinedGuide* msg);
  static void set_has_guide_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
UserDefinedGuideMapArchive_UserDefinedGuide::_Internal::guide_storage(const UserDefinedGuideMapArchive_UserDefinedGuide* msg) {
  return *msg->guide_storage_;
}
void UserDefinedGuideMapArchive_UserDefinedGuide::clear_guide_storage() {
  if (guide_storage_ != nullptr) guide_storage_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UserDefinedGuideMapArchive_UserDefinedGuide::UserDefinedGuideMapArchive_UserDefinedGuide(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
}
UserDefinedGuideMapArchive_UserDefinedGuide::UserDefinedGuideMapArchive_UserDefinedGuide(const UserDefinedGuideMapArchive_UserDefinedGuide& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_guide_storage()) {
    guide_storage_ = new ::TSP::Reference(*from.guide_storage_);
  } else {
    guide_storage_ = nullptr;
  }
  page_index_ = from.page_index_;
  // @@protoc_insertion_point(copy_constructor:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
}

void UserDefinedGuideMapArchive_UserDefinedGuide::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guide_storage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_index_) -
    reinterpret_cast<char*>(&guide_storage_)) + sizeof(page_index_));
}

UserDefinedGuideMapArchive_UserDefinedGuide::~UserDefinedGuideMapArchive_UserDefinedGuide() {
  // @@protoc_insertion_point(destructor:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserDefinedGuideMapArchive_UserDefinedGuide::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete guide_storage_;
}

void UserDefinedGuideMapArchive_UserDefinedGuide::ArenaDtor(void* object) {
  UserDefinedGuideMapArchive_UserDefinedGuide* _this = reinterpret_cast< UserDefinedGuideMapArchive_UserDefinedGuide* >(object);
  (void)_this;
}
void UserDefinedGuideMapArchive_UserDefinedGuide::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserDefinedGuideMapArchive_UserDefinedGuide::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserDefinedGuideMapArchive_UserDefinedGuide::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(guide_storage_ != nullptr);
    guide_storage_->Clear();
  }
  page_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDefinedGuideMapArchive_UserDefinedGuide::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 page_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page_index(&has_bits);
          page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference guide_storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_guide_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDefinedGuideMapArchive_UserDefinedGuide::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 page_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_index(), target);
  }

  // required .TSP.Reference guide_storage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::guide_storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
  return target;
}

size_t UserDefinedGuideMapArchive_UserDefinedGuide::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
  size_t total_size = 0;

  if (_internal_has_guide_storage()) {
    // required .TSP.Reference guide_storage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guide_storage_);
  }

  if (_internal_has_page_index()) {
    // required uint32 page_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_index());
  }

  return total_size;
}
size_t UserDefinedGuideMapArchive_UserDefinedGuide::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference guide_storage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guide_storage_);

    // required uint32 page_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDefinedGuideMapArchive_UserDefinedGuide::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDefinedGuideMapArchive_UserDefinedGuide* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDefinedGuideMapArchive_UserDefinedGuide>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
    MergeFrom(*source);
  }
}

void UserDefinedGuideMapArchive_UserDefinedGuide::MergeFrom(const UserDefinedGuideMapArchive_UserDefinedGuide& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_guide_storage()->::TSP::Reference::MergeFrom(from._internal_guide_storage());
    }
    if (cached_has_bits & 0x00000002u) {
      page_index_ = from.page_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDefinedGuideMapArchive_UserDefinedGuide::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDefinedGuideMapArchive_UserDefinedGuide::CopyFrom(const UserDefinedGuideMapArchive_UserDefinedGuide& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDefinedGuideMapArchive_UserDefinedGuide::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_guide_storage()) {
    if (!guide_storage_->IsInitialized()) return false;
  }
  return true;
}

void UserDefinedGuideMapArchive_UserDefinedGuide::InternalSwap(UserDefinedGuideMapArchive_UserDefinedGuide* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserDefinedGuideMapArchive_UserDefinedGuide, page_index_)
      + sizeof(UserDefinedGuideMapArchive_UserDefinedGuide::page_index_)
      - PROTOBUF_FIELD_OFFSET(UserDefinedGuideMapArchive_UserDefinedGuide, guide_storage_)>(
          reinterpret_cast<char*>(&guide_storage_),
          reinterpret_cast<char*>(&other->guide_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDefinedGuideMapArchive_UserDefinedGuide::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[29]);
}

// ===================================================================

class UserDefinedGuideMapArchive::_Internal {
 public:
};

UserDefinedGuideMapArchive::UserDefinedGuideMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_defined_guide_storages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.UserDefinedGuideMapArchive)
}
UserDefinedGuideMapArchive::UserDefinedGuideMapArchive(const UserDefinedGuideMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_defined_guide_storages_(from.user_defined_guide_storages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TP.UserDefinedGuideMapArchive)
}

void UserDefinedGuideMapArchive::SharedCtor() {
}

UserDefinedGuideMapArchive::~UserDefinedGuideMapArchive() {
  // @@protoc_insertion_point(destructor:TP.UserDefinedGuideMapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserDefinedGuideMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserDefinedGuideMapArchive::ArenaDtor(void* object) {
  UserDefinedGuideMapArchive* _this = reinterpret_cast< UserDefinedGuideMapArchive* >(object);
  (void)_this;
}
void UserDefinedGuideMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserDefinedGuideMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserDefinedGuideMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.UserDefinedGuideMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_defined_guide_storages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDefinedGuideMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TP.UserDefinedGuideMapArchive.UserDefinedGuide user_defined_guide_storages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_defined_guide_storages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDefinedGuideMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.UserDefinedGuideMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TP.UserDefinedGuideMapArchive.UserDefinedGuide user_defined_guide_storages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_defined_guide_storages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_user_defined_guide_storages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.UserDefinedGuideMapArchive)
  return target;
}

size_t UserDefinedGuideMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.UserDefinedGuideMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.UserDefinedGuideMapArchive.UserDefinedGuide user_defined_guide_storages = 1;
  total_size += 1UL * this->_internal_user_defined_guide_storages_size();
  for (const auto& msg : this->user_defined_guide_storages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDefinedGuideMapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.UserDefinedGuideMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDefinedGuideMapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDefinedGuideMapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.UserDefinedGuideMapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.UserDefinedGuideMapArchive)
    MergeFrom(*source);
  }
}

void UserDefinedGuideMapArchive::MergeFrom(const UserDefinedGuideMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.UserDefinedGuideMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_defined_guide_storages_.MergeFrom(from.user_defined_guide_storages_);
}

void UserDefinedGuideMapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.UserDefinedGuideMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDefinedGuideMapArchive::CopyFrom(const UserDefinedGuideMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.UserDefinedGuideMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDefinedGuideMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(user_defined_guide_storages_)) return false;
  return true;
}

void UserDefinedGuideMapArchive::InternalSwap(UserDefinedGuideMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_defined_guide_storages_.InternalSwap(&other->user_defined_guide_storages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDefinedGuideMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[30]);
}

// ===================================================================

class SectionSelectionArchive::_Internal {
 public:
};

void SectionSelectionArchive::clear_sections() {
  sections_.Clear();
}
SectionSelectionArchive::SectionSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.SectionSelectionArchive)
}
SectionSelectionArchive::SectionSelectionArchive(const SectionSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sections_(from.sections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TP.SectionSelectionArchive)
}

void SectionSelectionArchive::SharedCtor() {
}

SectionSelectionArchive::~SectionSelectionArchive() {
  // @@protoc_insertion_point(destructor:TP.SectionSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SectionSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SectionSelectionArchive::ArenaDtor(void* object) {
  SectionSelectionArchive* _this = reinterpret_cast< SectionSelectionArchive* >(object);
  (void)_this;
}
void SectionSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SectionSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SectionSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SectionSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference sections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectionSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SectionSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference sections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SectionSelectionArchive)
  return target;
}

size_t SectionSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SectionSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference sections = 1;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectionSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.SectionSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SectionSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectionSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.SectionSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.SectionSelectionArchive)
    MergeFrom(*source);
  }
}

void SectionSelectionArchive::MergeFrom(const SectionSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.SectionSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sections_.MergeFrom(from.sections_);
}

void SectionSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.SectionSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionSelectionArchive::CopyFrom(const SectionSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SectionSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionSelectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sections_)) return false;
  return true;
}

void SectionSelectionArchive::InternalSwap(SectionSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sections_.InternalSwap(&other->sections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[31]);
}

// ===================================================================

class SectionSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionSelectionTransformerArchive>()._has_bits_);
  static const ::TSP::Reference& original_selection(const SectionSelectionTransformerArchive* msg);
  static void set_has_original_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& storage_uuid_path(const SectionSelectionTransformerArchive* msg);
  static void set_has_storage_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
SectionSelectionTransformerArchive::_Internal::original_selection(const SectionSelectionTransformerArchive* msg) {
  return *msg->original_selection_;
}
const ::TSP::UUIDPath&
SectionSelectionTransformerArchive::_Internal::storage_uuid_path(const SectionSelectionTransformerArchive* msg) {
  return *msg->storage_uuid_path_;
}
void SectionSelectionTransformerArchive::clear_original_selection() {
  if (original_selection_ != nullptr) original_selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SectionSelectionTransformerArchive::clear_storage_uuid_path() {
  if (storage_uuid_path_ != nullptr) storage_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SectionSelectionTransformerArchive::clear_section_uuid_paths() {
  section_uuid_paths_.Clear();
}
SectionSelectionTransformerArchive::SectionSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  section_uuid_paths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.SectionSelectionTransformerArchive)
}
SectionSelectionTransformerArchive::SectionSelectionTransformerArchive(const SectionSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      section_uuid_paths_(from.section_uuid_paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_original_selection()) {
    original_selection_ = new ::TSP::Reference(*from.original_selection_);
  } else {
    original_selection_ = nullptr;
  }
  if (from._internal_has_storage_uuid_path()) {
    storage_uuid_path_ = new ::TSP::UUIDPath(*from.storage_uuid_path_);
  } else {
    storage_uuid_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.SectionSelectionTransformerArchive)
}

void SectionSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&original_selection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&storage_uuid_path_) -
    reinterpret_cast<char*>(&original_selection_)) + sizeof(storage_uuid_path_));
}

SectionSelectionTransformerArchive::~SectionSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TP.SectionSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SectionSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete original_selection_;
  if (this != internal_default_instance()) delete storage_uuid_path_;
}

void SectionSelectionTransformerArchive::ArenaDtor(void* object) {
  SectionSelectionTransformerArchive* _this = reinterpret_cast< SectionSelectionTransformerArchive* >(object);
  (void)_this;
}
void SectionSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SectionSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SectionSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SectionSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_uuid_paths_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(original_selection_ != nullptr);
      original_selection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_uuid_path_ != nullptr);
      storage_uuid_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference original_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath storage_uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUIDPath section_uuid_paths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_section_uuid_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectionSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SectionSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference original_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::original_selection(this), target, stream);
  }

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage_uuid_path(this), target, stream);
  }

  // repeated .TSP.UUIDPath section_uuid_paths = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_section_uuid_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_section_uuid_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SectionSelectionTransformerArchive)
  return target;
}

size_t SectionSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SectionSelectionTransformerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDPath section_uuid_paths = 3;
  total_size += 1UL * this->_internal_section_uuid_paths_size();
  for (const auto& msg : this->section_uuid_paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference original_selection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_selection_);
    }

    // optional .TSP.UUIDPath storage_uuid_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_uuid_path_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectionSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.SectionSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SectionSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectionSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.SectionSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.SectionSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void SectionSelectionTransformerArchive::MergeFrom(const SectionSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.SectionSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  section_uuid_paths_.MergeFrom(from.section_uuid_paths_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_original_selection()->::TSP::Reference::MergeFrom(from._internal_original_selection());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_storage_uuid_path());
    }
  }
}

void SectionSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.SectionSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionSelectionTransformerArchive::CopyFrom(const SectionSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SectionSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionSelectionTransformerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(section_uuid_paths_)) return false;
  if (_internal_has_original_selection()) {
    if (!original_selection_->IsInitialized()) return false;
  }
  if (_internal_has_storage_uuid_path()) {
    if (!storage_uuid_path_->IsInitialized()) return false;
  }
  return true;
}

void SectionSelectionTransformerArchive::InternalSwap(SectionSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  section_uuid_paths_.InternalSwap(&other->section_uuid_paths_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SectionSelectionTransformerArchive, storage_uuid_path_)
      + sizeof(SectionSelectionTransformerArchive::storage_uuid_path_)
      - PROTOBUF_FIELD_OFFSET(SectionSelectionTransformerArchive, original_selection_)>(
          reinterpret_cast<char*>(&original_selection_),
          reinterpret_cast<char*>(&other->original_selection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[32]);
}

// ===================================================================

class SectionPasteboardObjectArchive_PageDrawables::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionPasteboardObjectArchive_PageDrawables>()._has_bits_);
  static void set_has_page_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TP::DrawableTagPairsArchive& drawable_tag_pairs(const SectionPasteboardObjectArchive_PageDrawables* msg);
  static void set_has_drawable_tag_pairs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TP::DrawableTagPairsArchive&
SectionPasteboardObjectArchive_PageDrawables::_Internal::drawable_tag_pairs(const SectionPasteboardObjectArchive_PageDrawables* msg) {
  return *msg->drawable_tag_pairs_;
}
SectionPasteboardObjectArchive_PageDrawables::SectionPasteboardObjectArchive_PageDrawables(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.SectionPasteboardObjectArchive.PageDrawables)
}
SectionPasteboardObjectArchive_PageDrawables::SectionPasteboardObjectArchive_PageDrawables(const SectionPasteboardObjectArchive_PageDrawables& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drawable_tag_pairs()) {
    drawable_tag_pairs_ = new ::TP::DrawableTagPairsArchive(*from.drawable_tag_pairs_);
  } else {
    drawable_tag_pairs_ = nullptr;
  }
  page_index_ = from.page_index_;
  // @@protoc_insertion_point(copy_constructor:TP.SectionPasteboardObjectArchive.PageDrawables)
}

void SectionPasteboardObjectArchive_PageDrawables::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&drawable_tag_pairs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_index_) -
    reinterpret_cast<char*>(&drawable_tag_pairs_)) + sizeof(page_index_));
}

SectionPasteboardObjectArchive_PageDrawables::~SectionPasteboardObjectArchive_PageDrawables() {
  // @@protoc_insertion_point(destructor:TP.SectionPasteboardObjectArchive.PageDrawables)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SectionPasteboardObjectArchive_PageDrawables::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete drawable_tag_pairs_;
}

void SectionPasteboardObjectArchive_PageDrawables::ArenaDtor(void* object) {
  SectionPasteboardObjectArchive_PageDrawables* _this = reinterpret_cast< SectionPasteboardObjectArchive_PageDrawables* >(object);
  (void)_this;
}
void SectionPasteboardObjectArchive_PageDrawables::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SectionPasteboardObjectArchive_PageDrawables::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SectionPasteboardObjectArchive_PageDrawables::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SectionPasteboardObjectArchive.PageDrawables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(drawable_tag_pairs_ != nullptr);
    drawable_tag_pairs_->Clear();
  }
  page_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionPasteboardObjectArchive_PageDrawables::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 page_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page_index(&has_bits);
          page_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TP.DrawableTagPairsArchive drawable_tag_pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_tag_pairs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectionPasteboardObjectArchive_PageDrawables::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SectionPasteboardObjectArchive.PageDrawables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 page_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_index(), target);
  }

  // required .TP.DrawableTagPairsArchive drawable_tag_pairs = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::drawable_tag_pairs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SectionPasteboardObjectArchive.PageDrawables)
  return target;
}

size_t SectionPasteboardObjectArchive_PageDrawables::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.SectionPasteboardObjectArchive.PageDrawables)
  size_t total_size = 0;

  if (_internal_has_drawable_tag_pairs()) {
    // required .TP.DrawableTagPairsArchive drawable_tag_pairs = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drawable_tag_pairs_);
  }

  if (_internal_has_page_index()) {
    // required uint32 page_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_index());
  }

  return total_size;
}
size_t SectionPasteboardObjectArchive_PageDrawables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SectionPasteboardObjectArchive.PageDrawables)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TP.DrawableTagPairsArchive drawable_tag_pairs = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drawable_tag_pairs_);

    // required uint32 page_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectionPasteboardObjectArchive_PageDrawables::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.SectionPasteboardObjectArchive.PageDrawables)
  GOOGLE_DCHECK_NE(&from, this);
  const SectionPasteboardObjectArchive_PageDrawables* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectionPasteboardObjectArchive_PageDrawables>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.SectionPasteboardObjectArchive.PageDrawables)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.SectionPasteboardObjectArchive.PageDrawables)
    MergeFrom(*source);
  }
}

void SectionPasteboardObjectArchive_PageDrawables::MergeFrom(const SectionPasteboardObjectArchive_PageDrawables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.SectionPasteboardObjectArchive.PageDrawables)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_drawable_tag_pairs()->::TP::DrawableTagPairsArchive::MergeFrom(from._internal_drawable_tag_pairs());
    }
    if (cached_has_bits & 0x00000002u) {
      page_index_ = from.page_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SectionPasteboardObjectArchive_PageDrawables::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.SectionPasteboardObjectArchive.PageDrawables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionPasteboardObjectArchive_PageDrawables::CopyFrom(const SectionPasteboardObjectArchive_PageDrawables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SectionPasteboardObjectArchive.PageDrawables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionPasteboardObjectArchive_PageDrawables::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_drawable_tag_pairs()) {
    if (!drawable_tag_pairs_->IsInitialized()) return false;
  }
  return true;
}

void SectionPasteboardObjectArchive_PageDrawables::InternalSwap(SectionPasteboardObjectArchive_PageDrawables* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SectionPasteboardObjectArchive_PageDrawables, page_index_)
      + sizeof(SectionPasteboardObjectArchive_PageDrawables::page_index_)
      - PROTOBUF_FIELD_OFFSET(SectionPasteboardObjectArchive_PageDrawables, drawable_tag_pairs_)>(
          reinterpret_cast<char*>(&drawable_tag_pairs_),
          reinterpret_cast<char*>(&other->drawable_tag_pairs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionPasteboardObjectArchive_PageDrawables::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[33]);
}

// ===================================================================

class SectionPasteboardObjectArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionPasteboardObjectArchive>()._has_bits_);
  static const ::TSP::Reference& text_storage(const SectionPasteboardObjectArchive* msg);
  static void set_has_text_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_page_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
SectionPasteboardObjectArchive::_Internal::text_storage(const SectionPasteboardObjectArchive* msg) {
  return *msg->text_storage_;
}
void SectionPasteboardObjectArchive::clear_text_storage() {
  if (text_storage_ != nullptr) text_storage_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SectionPasteboardObjectArchive::clear_ordered_drawables() {
  ordered_drawables_.Clear();
}
SectionPasteboardObjectArchive::SectionPasteboardObjectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  page_drawables_(arena),
  ordered_drawables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.SectionPasteboardObjectArchive)
}
SectionPasteboardObjectArchive::SectionPasteboardObjectArchive(const SectionPasteboardObjectArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      page_drawables_(from.page_drawables_),
      ordered_drawables_(from.ordered_drawables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_text_storage()) {
    text_storage_ = new ::TSP::Reference(*from.text_storage_);
  } else {
    text_storage_ = nullptr;
  }
  page_count_ = from.page_count_;
  // @@protoc_insertion_point(copy_constructor:TP.SectionPasteboardObjectArchive)
}

void SectionPasteboardObjectArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&text_storage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_count_) -
    reinterpret_cast<char*>(&text_storage_)) + sizeof(page_count_));
}

SectionPasteboardObjectArchive::~SectionPasteboardObjectArchive() {
  // @@protoc_insertion_point(destructor:TP.SectionPasteboardObjectArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SectionPasteboardObjectArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete text_storage_;
}

void SectionPasteboardObjectArchive::ArenaDtor(void* object) {
  SectionPasteboardObjectArchive* _this = reinterpret_cast< SectionPasteboardObjectArchive* >(object);
  (void)_this;
}
void SectionPasteboardObjectArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SectionPasteboardObjectArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SectionPasteboardObjectArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SectionPasteboardObjectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_drawables_.Clear();
  ordered_drawables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(text_storage_ != nullptr);
    text_storage_->Clear();
  }
  page_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionPasteboardObjectArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference text_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 page_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_page_count(&has_bits);
          page_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TP.SectionPasteboardObjectArchive.PageDrawables page_drawables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference ordered_drawables = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ordered_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectionPasteboardObjectArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SectionPasteboardObjectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference text_storage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::text_storage(this), target, stream);
  }

  // required uint32 page_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page_count(), target);
  }

  // repeated .TP.SectionPasteboardObjectArchive.PageDrawables page_drawables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_page_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_page_drawables(i), target, stream);
  }

  // repeated .TSP.Reference ordered_drawables = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ordered_drawables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ordered_drawables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SectionPasteboardObjectArchive)
  return target;
}

size_t SectionPasteboardObjectArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.SectionPasteboardObjectArchive)
  size_t total_size = 0;

  if (_internal_has_text_storage()) {
    // required .TSP.Reference text_storage = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_storage_);
  }

  if (_internal_has_page_count()) {
    // required uint32 page_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_count());
  }

  return total_size;
}
size_t SectionPasteboardObjectArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SectionPasteboardObjectArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference text_storage = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_storage_);

    // required uint32 page_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TP.SectionPasteboardObjectArchive.PageDrawables page_drawables = 3;
  total_size += 1UL * this->_internal_page_drawables_size();
  for (const auto& msg : this->page_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference ordered_drawables = 4;
  total_size += 1UL * this->_internal_ordered_drawables_size();
  for (const auto& msg : this->ordered_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectionPasteboardObjectArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.SectionPasteboardObjectArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SectionPasteboardObjectArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectionPasteboardObjectArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.SectionPasteboardObjectArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.SectionPasteboardObjectArchive)
    MergeFrom(*source);
  }
}

void SectionPasteboardObjectArchive::MergeFrom(const SectionPasteboardObjectArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.SectionPasteboardObjectArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  page_drawables_.MergeFrom(from.page_drawables_);
  ordered_drawables_.MergeFrom(from.ordered_drawables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_text_storage()->::TSP::Reference::MergeFrom(from._internal_text_storage());
    }
    if (cached_has_bits & 0x00000002u) {
      page_count_ = from.page_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SectionPasteboardObjectArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.SectionPasteboardObjectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionPasteboardObjectArchive::CopyFrom(const SectionPasteboardObjectArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SectionPasteboardObjectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionPasteboardObjectArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(page_drawables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ordered_drawables_)) return false;
  if (_internal_has_text_storage()) {
    if (!text_storage_->IsInitialized()) return false;
  }
  return true;
}

void SectionPasteboardObjectArchive::InternalSwap(SectionPasteboardObjectArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  page_drawables_.InternalSwap(&other->page_drawables_);
  ordered_drawables_.InternalSwap(&other->ordered_drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SectionPasteboardObjectArchive, page_count_)
      + sizeof(SectionPasteboardObjectArchive::page_count_)
      - PROTOBUF_FIELD_OFFSET(SectionPasteboardObjectArchive, text_storage_)>(
          reinterpret_cast<char*>(&text_storage_),
          reinterpret_cast<char*>(&other->text_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionPasteboardObjectArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[34]);
}

// ===================================================================

class SectionsAppNativeObjectArchive_PageTemplatesEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionsAppNativeObjectArchive_PageTemplatesEntry>()._has_bits_);
  static const ::TSP::UUID& key(const SectionsAppNativeObjectArchive_PageTemplatesEntry* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& value(const SectionsAppNativeObjectArchive_PageTemplatesEntry* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
SectionsAppNativeObjectArchive_PageTemplatesEntry::_Internal::key(const SectionsAppNativeObjectArchive_PageTemplatesEntry* msg) {
  return *msg->key_;
}
const ::TSP::Reference&
SectionsAppNativeObjectArchive_PageTemplatesEntry::_Internal::value(const SectionsAppNativeObjectArchive_PageTemplatesEntry* msg) {
  return *msg->value_;
}
void SectionsAppNativeObjectArchive_PageTemplatesEntry::clear_key() {
  if (key_ != nullptr) key_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SectionsAppNativeObjectArchive_PageTemplatesEntry::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SectionsAppNativeObjectArchive_PageTemplatesEntry::SectionsAppNativeObjectArchive_PageTemplatesEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
}
SectionsAppNativeObjectArchive_PageTemplatesEntry::SectionsAppNativeObjectArchive_PageTemplatesEntry(const SectionsAppNativeObjectArchive_PageTemplatesEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::TSP::UUID(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::TSP::Reference(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
}

void SectionsAppNativeObjectArchive_PageTemplatesEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

SectionsAppNativeObjectArchive_PageTemplatesEntry::~SectionsAppNativeObjectArchive_PageTemplatesEntry() {
  // @@protoc_insertion_point(destructor:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SectionsAppNativeObjectArchive_PageTemplatesEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete value_;
}

void SectionsAppNativeObjectArchive_PageTemplatesEntry::ArenaDtor(void* object) {
  SectionsAppNativeObjectArchive_PageTemplatesEntry* _this = reinterpret_cast< SectionsAppNativeObjectArchive_PageTemplatesEntry* >(object);
  (void)_this;
}
void SectionsAppNativeObjectArchive_PageTemplatesEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SectionsAppNativeObjectArchive_PageTemplatesEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SectionsAppNativeObjectArchive_PageTemplatesEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(key_ != nullptr);
      key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionsAppNativeObjectArchive_PageTemplatesEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectionsAppNativeObjectArchive_PageTemplatesEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // required .TSP.Reference value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
  return target;
}

size_t SectionsAppNativeObjectArchive_PageTemplatesEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required .TSP.UUID key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (_internal_has_value()) {
    // required .TSP.Reference value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t SectionsAppNativeObjectArchive_PageTemplatesEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);

    // required .TSP.Reference value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectionsAppNativeObjectArchive_PageTemplatesEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const SectionsAppNativeObjectArchive_PageTemplatesEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectionsAppNativeObjectArchive_PageTemplatesEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
    MergeFrom(*source);
  }
}

void SectionsAppNativeObjectArchive_PageTemplatesEntry::MergeFrom(const SectionsAppNativeObjectArchive_PageTemplatesEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_key()->::TSP::UUID::MergeFrom(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::TSP::Reference::MergeFrom(from._internal_value());
    }
  }
}

void SectionsAppNativeObjectArchive_PageTemplatesEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionsAppNativeObjectArchive_PageTemplatesEntry::CopyFrom(const SectionsAppNativeObjectArchive_PageTemplatesEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionsAppNativeObjectArchive_PageTemplatesEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_key()) {
    if (!key_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void SectionsAppNativeObjectArchive_PageTemplatesEntry::InternalSwap(SectionsAppNativeObjectArchive_PageTemplatesEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SectionsAppNativeObjectArchive_PageTemplatesEntry, value_)
      + sizeof(SectionsAppNativeObjectArchive_PageTemplatesEntry::value_)
      - PROTOBUF_FIELD_OFFSET(SectionsAppNativeObjectArchive_PageTemplatesEntry, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionsAppNativeObjectArchive_PageTemplatesEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[35]);
}

// ===================================================================

class SectionsAppNativeObjectArchive::_Internal {
 public:
};

void SectionsAppNativeObjectArchive::clear_section_pasteboard_objects() {
  section_pasteboard_objects_.Clear();
}
void SectionsAppNativeObjectArchive::clear_flows() {
  flows_.Clear();
}
SectionsAppNativeObjectArchive::SectionsAppNativeObjectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  section_pasteboard_objects_(arena),
  page_templates_(arena),
  flows_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TP.SectionsAppNativeObjectArchive)
}
SectionsAppNativeObjectArchive::SectionsAppNativeObjectArchive(const SectionsAppNativeObjectArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      section_pasteboard_objects_(from.section_pasteboard_objects_),
      page_templates_(from.page_templates_),
      flows_(from.flows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TP.SectionsAppNativeObjectArchive)
}

void SectionsAppNativeObjectArchive::SharedCtor() {
}

SectionsAppNativeObjectArchive::~SectionsAppNativeObjectArchive() {
  // @@protoc_insertion_point(destructor:TP.SectionsAppNativeObjectArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SectionsAppNativeObjectArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SectionsAppNativeObjectArchive::ArenaDtor(void* object) {
  SectionsAppNativeObjectArchive* _this = reinterpret_cast< SectionsAppNativeObjectArchive* >(object);
  (void)_this;
}
void SectionsAppNativeObjectArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SectionsAppNativeObjectArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SectionsAppNativeObjectArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TP.SectionsAppNativeObjectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_pasteboard_objects_.Clear();
  page_templates_.Clear();
  flows_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionsAppNativeObjectArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference section_pasteboard_objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_section_pasteboard_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TP.SectionsAppNativeObjectArchive.PageTemplatesEntry page_templates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_templates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference flows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_flows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectionsAppNativeObjectArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TP.SectionsAppNativeObjectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference section_pasteboard_objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_section_pasteboard_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_section_pasteboard_objects(i), target, stream);
  }

  // repeated .TP.SectionsAppNativeObjectArchive.PageTemplatesEntry page_templates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_page_templates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_page_templates(i), target, stream);
  }

  // repeated .TSP.Reference flows = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_flows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TP.SectionsAppNativeObjectArchive)
  return target;
}

size_t SectionsAppNativeObjectArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TP.SectionsAppNativeObjectArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference section_pasteboard_objects = 1;
  total_size += 1UL * this->_internal_section_pasteboard_objects_size();
  for (const auto& msg : this->section_pasteboard_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TP.SectionsAppNativeObjectArchive.PageTemplatesEntry page_templates = 2;
  total_size += 1UL * this->_internal_page_templates_size();
  for (const auto& msg : this->page_templates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference flows = 3;
  total_size += 1UL * this->_internal_flows_size();
  for (const auto& msg : this->flows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectionsAppNativeObjectArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TP.SectionsAppNativeObjectArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SectionsAppNativeObjectArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectionsAppNativeObjectArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TP.SectionsAppNativeObjectArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TP.SectionsAppNativeObjectArchive)
    MergeFrom(*source);
  }
}

void SectionsAppNativeObjectArchive::MergeFrom(const SectionsAppNativeObjectArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TP.SectionsAppNativeObjectArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  section_pasteboard_objects_.MergeFrom(from.section_pasteboard_objects_);
  page_templates_.MergeFrom(from.page_templates_);
  flows_.MergeFrom(from.flows_);
}

void SectionsAppNativeObjectArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TP.SectionsAppNativeObjectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionsAppNativeObjectArchive::CopyFrom(const SectionsAppNativeObjectArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TP.SectionsAppNativeObjectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionsAppNativeObjectArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(section_pasteboard_objects_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(page_templates_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(flows_)) return false;
  return true;
}

void SectionsAppNativeObjectArchive::InternalSwap(SectionsAppNativeObjectArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  section_pasteboard_objects_.InternalSwap(&other->section_pasteboard_objects_);
  page_templates_.InternalSwap(&other->page_templates_);
  flows_.InternalSwap(&other->flows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionsAppNativeObjectArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TPArchives_2eproto_getter, &descriptor_table_TPArchives_2eproto_once,
      file_level_metadata_TPArchives_2eproto[36]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TP::DocumentArchive* Arena::CreateMaybeMessage< ::TP::DocumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::DocumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ThemeArchive* Arena::CreateMaybeMessage< ::TP::ThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SettingsArchive* Arena::CreateMaybeMessage< ::TP::SettingsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SettingsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::PlaceholderArchive* Arena::CreateMaybeMessage< ::TP::PlaceholderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::PlaceholderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::DrawableTagPairsArchive_DrawableTagPair* Arena::CreateMaybeMessage< ::TP::DrawableTagPairsArchive_DrawableTagPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::DrawableTagPairsArchive_DrawableTagPair >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::DrawableTagPairsArchive* Arena::CreateMaybeMessage< ::TP::DrawableTagPairsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::DrawableTagPairsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::FloatingDrawablesArchive_DrawableEntry* Arena::CreateMaybeMessage< ::TP::FloatingDrawablesArchive_DrawableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::FloatingDrawablesArchive_DrawableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::FloatingDrawablesArchive_PageGroup* Arena::CreateMaybeMessage< ::TP::FloatingDrawablesArchive_PageGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::FloatingDrawablesArchive_PageGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::FloatingDrawablesArchive* Arena::CreateMaybeMessage< ::TP::FloatingDrawablesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::FloatingDrawablesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::DrawablesZOrderArchive* Arena::CreateMaybeMessage< ::TP::DrawablesZOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::DrawablesZOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::PageMasterArchive* Arena::CreateMaybeMessage< ::TP::PageMasterArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::PageMasterArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::PageTemplateArchive_TagDrawablePair* Arena::CreateMaybeMessage< ::TP::PageTemplateArchive_TagDrawablePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::PageTemplateArchive_TagDrawablePair >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::PageTemplateArchive* Arena::CreateMaybeMessage< ::TP::PageTemplateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::PageTemplateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SectionArchive* Arena::CreateMaybeMessage< ::TP::SectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::DoublePoint* Arena::CreateMaybeMessage< ::TP::DoublePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::DoublePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::DoubleSize* Arena::CreateMaybeMessage< ::TP::DoubleSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::DoubleSize >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::AnchorPosArchive* Arena::CreateMaybeMessage< ::TP::AnchorPosArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::AnchorPosArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::TargetHintArchive* Arena::CreateMaybeMessage< ::TP::TargetHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::TargetHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::PageHintArchive* Arena::CreateMaybeMessage< ::TP::PageHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::PageHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::NullChildHintArchive* Arena::CreateMaybeMessage< ::TP::NullChildHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::NullChildHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SectionHintArchive* Arena::CreateMaybeMessage< ::TP::SectionHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SectionHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::TextboxHintArchive* Arena::CreateMaybeMessage< ::TP::TextboxHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::TextboxHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::TopicNumberEntryArchive* Arena::CreateMaybeMessage< ::TP::TopicNumberEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::TopicNumberEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::TopicNumberHintsArchive* Arena::CreateMaybeMessage< ::TP::TopicNumberHintsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::TopicNumberHintsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::LayoutStateArchive* Arena::CreateMaybeMessage< ::TP::LayoutStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::LayoutStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::CanvasSelectionArchive* Arena::CreateMaybeMessage< ::TP::CanvasSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::CanvasSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::AllFootnoteSelectionArchive* Arena::CreateMaybeMessage< ::TP::AllFootnoteSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::AllFootnoteSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::UIStateArchive* Arena::CreateMaybeMessage< ::TP::UIStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::UIStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::ViewStateRootArchive* Arena::CreateMaybeMessage< ::TP::ViewStateRootArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::ViewStateRootArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::UserDefinedGuideMapArchive_UserDefinedGuide* Arena::CreateMaybeMessage< ::TP::UserDefinedGuideMapArchive_UserDefinedGuide >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::UserDefinedGuideMapArchive_UserDefinedGuide >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::UserDefinedGuideMapArchive* Arena::CreateMaybeMessage< ::TP::UserDefinedGuideMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::UserDefinedGuideMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SectionSelectionArchive* Arena::CreateMaybeMessage< ::TP::SectionSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SectionSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SectionSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TP::SectionSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SectionSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SectionPasteboardObjectArchive_PageDrawables* Arena::CreateMaybeMessage< ::TP::SectionPasteboardObjectArchive_PageDrawables >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SectionPasteboardObjectArchive_PageDrawables >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SectionPasteboardObjectArchive* Arena::CreateMaybeMessage< ::TP::SectionPasteboardObjectArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SectionPasteboardObjectArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry* Arena::CreateMaybeMessage< ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TP::SectionsAppNativeObjectArchive* Arena::CreateMaybeMessage< ::TP::SectionsAppNativeObjectArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TP::SectionsAppNativeObjectArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
