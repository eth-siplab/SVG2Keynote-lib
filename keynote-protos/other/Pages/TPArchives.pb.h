// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TPArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TPArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TPArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSDArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSPMessages.pb.h"
#include "TSWPArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSAArchives.pb.h"
#include "TSCHArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TPArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TPArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[37]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TPArchives_2eproto;
namespace TP {
class AllFootnoteSelectionArchive;
struct AllFootnoteSelectionArchiveDefaultTypeInternal;
extern AllFootnoteSelectionArchiveDefaultTypeInternal _AllFootnoteSelectionArchive_default_instance_;
class AnchorPosArchive;
struct AnchorPosArchiveDefaultTypeInternal;
extern AnchorPosArchiveDefaultTypeInternal _AnchorPosArchive_default_instance_;
class CanvasSelectionArchive;
struct CanvasSelectionArchiveDefaultTypeInternal;
extern CanvasSelectionArchiveDefaultTypeInternal _CanvasSelectionArchive_default_instance_;
class DocumentArchive;
struct DocumentArchiveDefaultTypeInternal;
extern DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
class DoublePoint;
struct DoublePointDefaultTypeInternal;
extern DoublePointDefaultTypeInternal _DoublePoint_default_instance_;
class DoubleSize;
struct DoubleSizeDefaultTypeInternal;
extern DoubleSizeDefaultTypeInternal _DoubleSize_default_instance_;
class DrawableTagPairsArchive;
struct DrawableTagPairsArchiveDefaultTypeInternal;
extern DrawableTagPairsArchiveDefaultTypeInternal _DrawableTagPairsArchive_default_instance_;
class DrawableTagPairsArchive_DrawableTagPair;
struct DrawableTagPairsArchive_DrawableTagPairDefaultTypeInternal;
extern DrawableTagPairsArchive_DrawableTagPairDefaultTypeInternal _DrawableTagPairsArchive_DrawableTagPair_default_instance_;
class DrawablesZOrderArchive;
struct DrawablesZOrderArchiveDefaultTypeInternal;
extern DrawablesZOrderArchiveDefaultTypeInternal _DrawablesZOrderArchive_default_instance_;
class FloatingDrawablesArchive;
struct FloatingDrawablesArchiveDefaultTypeInternal;
extern FloatingDrawablesArchiveDefaultTypeInternal _FloatingDrawablesArchive_default_instance_;
class FloatingDrawablesArchive_DrawableEntry;
struct FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal;
extern FloatingDrawablesArchive_DrawableEntryDefaultTypeInternal _FloatingDrawablesArchive_DrawableEntry_default_instance_;
class FloatingDrawablesArchive_PageGroup;
struct FloatingDrawablesArchive_PageGroupDefaultTypeInternal;
extern FloatingDrawablesArchive_PageGroupDefaultTypeInternal _FloatingDrawablesArchive_PageGroup_default_instance_;
class LayoutStateArchive;
struct LayoutStateArchiveDefaultTypeInternal;
extern LayoutStateArchiveDefaultTypeInternal _LayoutStateArchive_default_instance_;
class NullChildHintArchive;
struct NullChildHintArchiveDefaultTypeInternal;
extern NullChildHintArchiveDefaultTypeInternal _NullChildHintArchive_default_instance_;
class PageHintArchive;
struct PageHintArchiveDefaultTypeInternal;
extern PageHintArchiveDefaultTypeInternal _PageHintArchive_default_instance_;
class PageMasterArchive;
struct PageMasterArchiveDefaultTypeInternal;
extern PageMasterArchiveDefaultTypeInternal _PageMasterArchive_default_instance_;
class PageTemplateArchive;
struct PageTemplateArchiveDefaultTypeInternal;
extern PageTemplateArchiveDefaultTypeInternal _PageTemplateArchive_default_instance_;
class PageTemplateArchive_TagDrawablePair;
struct PageTemplateArchive_TagDrawablePairDefaultTypeInternal;
extern PageTemplateArchive_TagDrawablePairDefaultTypeInternal _PageTemplateArchive_TagDrawablePair_default_instance_;
class PlaceholderArchive;
struct PlaceholderArchiveDefaultTypeInternal;
extern PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
class SectionArchive;
struct SectionArchiveDefaultTypeInternal;
extern SectionArchiveDefaultTypeInternal _SectionArchive_default_instance_;
class SectionHintArchive;
struct SectionHintArchiveDefaultTypeInternal;
extern SectionHintArchiveDefaultTypeInternal _SectionHintArchive_default_instance_;
class SectionPasteboardObjectArchive;
struct SectionPasteboardObjectArchiveDefaultTypeInternal;
extern SectionPasteboardObjectArchiveDefaultTypeInternal _SectionPasteboardObjectArchive_default_instance_;
class SectionPasteboardObjectArchive_PageDrawables;
struct SectionPasteboardObjectArchive_PageDrawablesDefaultTypeInternal;
extern SectionPasteboardObjectArchive_PageDrawablesDefaultTypeInternal _SectionPasteboardObjectArchive_PageDrawables_default_instance_;
class SectionSelectionArchive;
struct SectionSelectionArchiveDefaultTypeInternal;
extern SectionSelectionArchiveDefaultTypeInternal _SectionSelectionArchive_default_instance_;
class SectionSelectionTransformerArchive;
struct SectionSelectionTransformerArchiveDefaultTypeInternal;
extern SectionSelectionTransformerArchiveDefaultTypeInternal _SectionSelectionTransformerArchive_default_instance_;
class SectionsAppNativeObjectArchive;
struct SectionsAppNativeObjectArchiveDefaultTypeInternal;
extern SectionsAppNativeObjectArchiveDefaultTypeInternal _SectionsAppNativeObjectArchive_default_instance_;
class SectionsAppNativeObjectArchive_PageTemplatesEntry;
struct SectionsAppNativeObjectArchive_PageTemplatesEntryDefaultTypeInternal;
extern SectionsAppNativeObjectArchive_PageTemplatesEntryDefaultTypeInternal _SectionsAppNativeObjectArchive_PageTemplatesEntry_default_instance_;
class SettingsArchive;
struct SettingsArchiveDefaultTypeInternal;
extern SettingsArchiveDefaultTypeInternal _SettingsArchive_default_instance_;
class TargetHintArchive;
struct TargetHintArchiveDefaultTypeInternal;
extern TargetHintArchiveDefaultTypeInternal _TargetHintArchive_default_instance_;
class TextboxHintArchive;
struct TextboxHintArchiveDefaultTypeInternal;
extern TextboxHintArchiveDefaultTypeInternal _TextboxHintArchive_default_instance_;
class ThemeArchive;
struct ThemeArchiveDefaultTypeInternal;
extern ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
class TopicNumberEntryArchive;
struct TopicNumberEntryArchiveDefaultTypeInternal;
extern TopicNumberEntryArchiveDefaultTypeInternal _TopicNumberEntryArchive_default_instance_;
class TopicNumberHintsArchive;
struct TopicNumberHintsArchiveDefaultTypeInternal;
extern TopicNumberHintsArchiveDefaultTypeInternal _TopicNumberHintsArchive_default_instance_;
class UIStateArchive;
struct UIStateArchiveDefaultTypeInternal;
extern UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
class UserDefinedGuideMapArchive;
struct UserDefinedGuideMapArchiveDefaultTypeInternal;
extern UserDefinedGuideMapArchiveDefaultTypeInternal _UserDefinedGuideMapArchive_default_instance_;
class UserDefinedGuideMapArchive_UserDefinedGuide;
struct UserDefinedGuideMapArchive_UserDefinedGuideDefaultTypeInternal;
extern UserDefinedGuideMapArchive_UserDefinedGuideDefaultTypeInternal _UserDefinedGuideMapArchive_UserDefinedGuide_default_instance_;
class ViewStateRootArchive;
struct ViewStateRootArchiveDefaultTypeInternal;
extern ViewStateRootArchiveDefaultTypeInternal _ViewStateRootArchive_default_instance_;
}  // namespace TP
PROTOBUF_NAMESPACE_OPEN
template<> ::TP::AllFootnoteSelectionArchive* Arena::CreateMaybeMessage<::TP::AllFootnoteSelectionArchive>(Arena*);
template<> ::TP::AnchorPosArchive* Arena::CreateMaybeMessage<::TP::AnchorPosArchive>(Arena*);
template<> ::TP::CanvasSelectionArchive* Arena::CreateMaybeMessage<::TP::CanvasSelectionArchive>(Arena*);
template<> ::TP::DocumentArchive* Arena::CreateMaybeMessage<::TP::DocumentArchive>(Arena*);
template<> ::TP::DoublePoint* Arena::CreateMaybeMessage<::TP::DoublePoint>(Arena*);
template<> ::TP::DoubleSize* Arena::CreateMaybeMessage<::TP::DoubleSize>(Arena*);
template<> ::TP::DrawableTagPairsArchive* Arena::CreateMaybeMessage<::TP::DrawableTagPairsArchive>(Arena*);
template<> ::TP::DrawableTagPairsArchive_DrawableTagPair* Arena::CreateMaybeMessage<::TP::DrawableTagPairsArchive_DrawableTagPair>(Arena*);
template<> ::TP::DrawablesZOrderArchive* Arena::CreateMaybeMessage<::TP::DrawablesZOrderArchive>(Arena*);
template<> ::TP::FloatingDrawablesArchive* Arena::CreateMaybeMessage<::TP::FloatingDrawablesArchive>(Arena*);
template<> ::TP::FloatingDrawablesArchive_DrawableEntry* Arena::CreateMaybeMessage<::TP::FloatingDrawablesArchive_DrawableEntry>(Arena*);
template<> ::TP::FloatingDrawablesArchive_PageGroup* Arena::CreateMaybeMessage<::TP::FloatingDrawablesArchive_PageGroup>(Arena*);
template<> ::TP::LayoutStateArchive* Arena::CreateMaybeMessage<::TP::LayoutStateArchive>(Arena*);
template<> ::TP::NullChildHintArchive* Arena::CreateMaybeMessage<::TP::NullChildHintArchive>(Arena*);
template<> ::TP::PageHintArchive* Arena::CreateMaybeMessage<::TP::PageHintArchive>(Arena*);
template<> ::TP::PageMasterArchive* Arena::CreateMaybeMessage<::TP::PageMasterArchive>(Arena*);
template<> ::TP::PageTemplateArchive* Arena::CreateMaybeMessage<::TP::PageTemplateArchive>(Arena*);
template<> ::TP::PageTemplateArchive_TagDrawablePair* Arena::CreateMaybeMessage<::TP::PageTemplateArchive_TagDrawablePair>(Arena*);
template<> ::TP::PlaceholderArchive* Arena::CreateMaybeMessage<::TP::PlaceholderArchive>(Arena*);
template<> ::TP::SectionArchive* Arena::CreateMaybeMessage<::TP::SectionArchive>(Arena*);
template<> ::TP::SectionHintArchive* Arena::CreateMaybeMessage<::TP::SectionHintArchive>(Arena*);
template<> ::TP::SectionPasteboardObjectArchive* Arena::CreateMaybeMessage<::TP::SectionPasteboardObjectArchive>(Arena*);
template<> ::TP::SectionPasteboardObjectArchive_PageDrawables* Arena::CreateMaybeMessage<::TP::SectionPasteboardObjectArchive_PageDrawables>(Arena*);
template<> ::TP::SectionSelectionArchive* Arena::CreateMaybeMessage<::TP::SectionSelectionArchive>(Arena*);
template<> ::TP::SectionSelectionTransformerArchive* Arena::CreateMaybeMessage<::TP::SectionSelectionTransformerArchive>(Arena*);
template<> ::TP::SectionsAppNativeObjectArchive* Arena::CreateMaybeMessage<::TP::SectionsAppNativeObjectArchive>(Arena*);
template<> ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry* Arena::CreateMaybeMessage<::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry>(Arena*);
template<> ::TP::SettingsArchive* Arena::CreateMaybeMessage<::TP::SettingsArchive>(Arena*);
template<> ::TP::TargetHintArchive* Arena::CreateMaybeMessage<::TP::TargetHintArchive>(Arena*);
template<> ::TP::TextboxHintArchive* Arena::CreateMaybeMessage<::TP::TextboxHintArchive>(Arena*);
template<> ::TP::ThemeArchive* Arena::CreateMaybeMessage<::TP::ThemeArchive>(Arena*);
template<> ::TP::TopicNumberEntryArchive* Arena::CreateMaybeMessage<::TP::TopicNumberEntryArchive>(Arena*);
template<> ::TP::TopicNumberHintsArchive* Arena::CreateMaybeMessage<::TP::TopicNumberHintsArchive>(Arena*);
template<> ::TP::UIStateArchive* Arena::CreateMaybeMessage<::TP::UIStateArchive>(Arena*);
template<> ::TP::UserDefinedGuideMapArchive* Arena::CreateMaybeMessage<::TP::UserDefinedGuideMapArchive>(Arena*);
template<> ::TP::UserDefinedGuideMapArchive_UserDefinedGuide* Arena::CreateMaybeMessage<::TP::UserDefinedGuideMapArchive_UserDefinedGuide>(Arena*);
template<> ::TP::ViewStateRootArchive* Arena::CreateMaybeMessage<::TP::ViewStateRootArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TP {

enum SettingsArchive_FootnoteKind : int {
  SettingsArchive_FootnoteKind_kFootnoteKindFootnotes = 0,
  SettingsArchive_FootnoteKind_kFootnoteKindDocumentEndnotes = 1,
  SettingsArchive_FootnoteKind_kFootnoteKindSectionEndnotes = 2
};
bool SettingsArchive_FootnoteKind_IsValid(int value);
constexpr SettingsArchive_FootnoteKind SettingsArchive_FootnoteKind_FootnoteKind_MIN = SettingsArchive_FootnoteKind_kFootnoteKindFootnotes;
constexpr SettingsArchive_FootnoteKind SettingsArchive_FootnoteKind_FootnoteKind_MAX = SettingsArchive_FootnoteKind_kFootnoteKindSectionEndnotes;
constexpr int SettingsArchive_FootnoteKind_FootnoteKind_ARRAYSIZE = SettingsArchive_FootnoteKind_FootnoteKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteKind_descriptor();
template<typename T>
inline const std::string& SettingsArchive_FootnoteKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SettingsArchive_FootnoteKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SettingsArchive_FootnoteKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SettingsArchive_FootnoteKind_descriptor(), enum_t_value);
}
inline bool SettingsArchive_FootnoteKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SettingsArchive_FootnoteKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SettingsArchive_FootnoteKind>(
    SettingsArchive_FootnoteKind_descriptor(), name, value);
}
enum SettingsArchive_FootnoteFormat : int {
  SettingsArchive_FootnoteFormat_kFootnoteFormatNumeric = 0,
  SettingsArchive_FootnoteFormat_kFootnoteFormatRoman = 1,
  SettingsArchive_FootnoteFormat_kFootnoteFormatSymbolic = 2,
  SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseNumeric = 3,
  SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseIdeographic = 4,
  SettingsArchive_FootnoteFormat_kFootnoteFormatArabicNumeric = 5
};
bool SettingsArchive_FootnoteFormat_IsValid(int value);
constexpr SettingsArchive_FootnoteFormat SettingsArchive_FootnoteFormat_FootnoteFormat_MIN = SettingsArchive_FootnoteFormat_kFootnoteFormatNumeric;
constexpr SettingsArchive_FootnoteFormat SettingsArchive_FootnoteFormat_FootnoteFormat_MAX = SettingsArchive_FootnoteFormat_kFootnoteFormatArabicNumeric;
constexpr int SettingsArchive_FootnoteFormat_FootnoteFormat_ARRAYSIZE = SettingsArchive_FootnoteFormat_FootnoteFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteFormat_descriptor();
template<typename T>
inline const std::string& SettingsArchive_FootnoteFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SettingsArchive_FootnoteFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SettingsArchive_FootnoteFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SettingsArchive_FootnoteFormat_descriptor(), enum_t_value);
}
inline bool SettingsArchive_FootnoteFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SettingsArchive_FootnoteFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SettingsArchive_FootnoteFormat>(
    SettingsArchive_FootnoteFormat_descriptor(), name, value);
}
enum SettingsArchive_FootnoteNumbering : int {
  SettingsArchive_FootnoteNumbering_kFootnoteNumberingContinuous = 0,
  SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachPage = 1,
  SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection = 2
};
bool SettingsArchive_FootnoteNumbering_IsValid(int value);
constexpr SettingsArchive_FootnoteNumbering SettingsArchive_FootnoteNumbering_FootnoteNumbering_MIN = SettingsArchive_FootnoteNumbering_kFootnoteNumberingContinuous;
constexpr SettingsArchive_FootnoteNumbering SettingsArchive_FootnoteNumbering_FootnoteNumbering_MAX = SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection;
constexpr int SettingsArchive_FootnoteNumbering_FootnoteNumbering_ARRAYSIZE = SettingsArchive_FootnoteNumbering_FootnoteNumbering_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SettingsArchive_FootnoteNumbering_descriptor();
template<typename T>
inline const std::string& SettingsArchive_FootnoteNumbering_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SettingsArchive_FootnoteNumbering>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SettingsArchive_FootnoteNumbering_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SettingsArchive_FootnoteNumbering_descriptor(), enum_t_value);
}
inline bool SettingsArchive_FootnoteNumbering_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SettingsArchive_FootnoteNumbering* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SettingsArchive_FootnoteNumbering>(
    SettingsArchive_FootnoteNumbering_descriptor(), name, value);
}
enum PageHintArchive_PageKind : int {
  PageHintArchive_PageKind_kPageKindNone = 0,
  PageHintArchive_PageKind_kPageKindText = 1,
  PageHintArchive_PageKind_kPageKindFiller = 2,
  PageHintArchive_PageKind_kPageKindOrphan = 3,
  PageHintArchive_PageKind_kPageKindEndnote = 4,
  PageHintArchive_PageKind_kPageKindDirty = 5,
  PageHintArchive_PageKind_kTPPageKindPageLayout = 6
};
bool PageHintArchive_PageKind_IsValid(int value);
constexpr PageHintArchive_PageKind PageHintArchive_PageKind_PageKind_MIN = PageHintArchive_PageKind_kPageKindNone;
constexpr PageHintArchive_PageKind PageHintArchive_PageKind_PageKind_MAX = PageHintArchive_PageKind_kTPPageKindPageLayout;
constexpr int PageHintArchive_PageKind_PageKind_ARRAYSIZE = PageHintArchive_PageKind_PageKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageHintArchive_PageKind_descriptor();
template<typename T>
inline const std::string& PageHintArchive_PageKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PageHintArchive_PageKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PageHintArchive_PageKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PageHintArchive_PageKind_descriptor(), enum_t_value);
}
inline bool PageHintArchive_PageKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PageHintArchive_PageKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PageHintArchive_PageKind>(
    PageHintArchive_PageKind_descriptor(), name, value);
}
enum PageHintArchive_PageSide : int {
  PageHintArchive_PageSide_kTPPageSideUnknown = 0,
  PageHintArchive_PageSide_kTPPageSideLeft = 1,
  PageHintArchive_PageSide_kTPPageSideRight = 2
};
bool PageHintArchive_PageSide_IsValid(int value);
constexpr PageHintArchive_PageSide PageHintArchive_PageSide_PageSide_MIN = PageHintArchive_PageSide_kTPPageSideUnknown;
constexpr PageHintArchive_PageSide PageHintArchive_PageSide_PageSide_MAX = PageHintArchive_PageSide_kTPPageSideRight;
constexpr int PageHintArchive_PageSide_PageSide_ARRAYSIZE = PageHintArchive_PageSide_PageSide_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageHintArchive_PageSide_descriptor();
template<typename T>
inline const std::string& PageHintArchive_PageSide_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PageHintArchive_PageSide>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PageHintArchive_PageSide_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PageHintArchive_PageSide_descriptor(), enum_t_value);
}
inline bool PageHintArchive_PageSide_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PageHintArchive_PageSide* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PageHintArchive_PageSide>(
    PageHintArchive_PageSide_descriptor(), name, value);
}
enum ViewScaleMode : int {
  ViewScaleMode_UserDefined = 0,
  ViewScaleMode_FitWidth = 1,
  ViewScaleMode_FirPage = 2
};
bool ViewScaleMode_IsValid(int value);
constexpr ViewScaleMode ViewScaleMode_MIN = ViewScaleMode_UserDefined;
constexpr ViewScaleMode ViewScaleMode_MAX = ViewScaleMode_FirPage;
constexpr int ViewScaleMode_ARRAYSIZE = ViewScaleMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViewScaleMode_descriptor();
template<typename T>
inline const std::string& ViewScaleMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ViewScaleMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ViewScaleMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ViewScaleMode_descriptor(), enum_t_value);
}
inline bool ViewScaleMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ViewScaleMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ViewScaleMode>(
    ViewScaleMode_descriptor(), name, value);
}
enum ViewScaleModeiOS : int {
  ViewScaleModeiOS_Undefined = 0,
  ViewScaleModeiOS_UserDefined = 1,
  ViewScaleModeiOS_FitWidth = 2,
  ViewScaleModeiOS_FitMinimum = 3,
  ViewScaleModeiOS_FitPortraitWidth = 4
};
bool ViewScaleModeiOS_IsValid(int value);
constexpr ViewScaleModeiOS ViewScaleModeiOS_MIN = ViewScaleModeiOS_Undefined;
constexpr ViewScaleModeiOS ViewScaleModeiOS_MAX = ViewScaleModeiOS_FitPortraitWidth;
constexpr int ViewScaleModeiOS_ARRAYSIZE = ViewScaleModeiOS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViewScaleModeiOS_descriptor();
template<typename T>
inline const std::string& ViewScaleModeiOS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ViewScaleModeiOS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ViewScaleModeiOS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ViewScaleModeiOS_descriptor(), enum_t_value);
}
inline bool ViewScaleModeiOS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ViewScaleModeiOS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ViewScaleModeiOS>(
    ViewScaleModeiOS_descriptor(), name, value);
}
enum PageViewState : int {
  PageViewState_OneUp = 0,
  PageViewState_TwoUp = 1
};
bool PageViewState_IsValid(int value);
constexpr PageViewState PageViewState_MIN = PageViewState_OneUp;
constexpr PageViewState PageViewState_MAX = PageViewState_TwoUp;
constexpr int PageViewState_ARRAYSIZE = PageViewState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PageViewState_descriptor();
template<typename T>
inline const std::string& PageViewState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PageViewState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PageViewState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PageViewState_descriptor(), enum_t_value);
}
inline bool PageViewState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PageViewState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PageViewState>(
    PageViewState_descriptor(), name, value);
}
// ===================================================================

class DocumentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.DocumentArchive) */ {
 public:
  inline DocumentArchive() : DocumentArchive(nullptr) {}
  ~DocumentArchive() override;
  explicit constexpr DocumentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentArchive(const DocumentArchive& from);
  DocumentArchive(DocumentArchive&& from) noexcept
    : DocumentArchive() {
    *this = ::std::move(from);
  }

  inline DocumentArchive& operator=(const DocumentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentArchive& operator=(DocumentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentArchive*>(
               &_DocumentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DocumentArchive& a, DocumentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentArchive* New() const final {
    return CreateMaybeMessage<DocumentArchive>(nullptr);
  }

  DocumentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentArchive& from);
  void MergeFrom(const DocumentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.DocumentArchive";
  }
  protected:
  explicit DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCitationRecordsFieldNumber = 13,
    kTocStylesFieldNumber = 14,
    kChangeSessionsFieldNumber = 16,
    kPageTemplatesFieldNumber = 48,
    kPrinterIdFieldNumber = 43,
    kPaperIdFieldNumber = 44,
    kStylesheetFieldNumber = 2,
    kFloatingDrawablesFieldNumber = 3,
    kBodyStorageFieldNumber = 4,
    kSectionFieldNumber = 5,
    kThemeFieldNumber = 6,
    kSettingsFieldNumber = 7,
    kDeprecatedLayoutStateFieldNumber = 11,
    kDeprecatedViewStateFieldNumber = 12,
    kSuperFieldNumber = 15,
    kMostRecentChangeSessionFieldNumber = 17,
    kDrawablesZorderFieldNumber = 20,
    kTablesCustomFormatListFieldNumber = 41,
    kEquationEnvironmentFieldNumber = 45,
    kFlowInfoContainerFieldNumber = 47,
    kPageWidthFieldNumber = 30,
    kPageHeightFieldNumber = 31,
    kLeftMarginFieldNumber = 32,
    kRightMarginFieldNumber = 33,
    kTopMarginFieldNumber = 34,
    kBottomMarginFieldNumber = 35,
    kHeaderMarginFieldNumber = 36,
    kUsesSingleHeaderFooterFieldNumber = 21,
    kLaysOutBodyVerticallyFieldNumber = 39,
    kChangeTrackingEnabledFieldNumber = 40,
    kShowInBookmarksListParagraphStylesPropertyInitializedFieldNumber = 46,
    kFooterMarginFieldNumber = 37,
    kPageScaleFieldNumber = 38,
    kOrientationFieldNumber = 42,
    kShouldUseAnchoredDrawableWrapSlopFieldNumber = 49,
  };
  // repeated .TSP.Reference citation_records = 13;
  int citation_records_size() const;
  private:
  int _internal_citation_records_size() const;
  public:
  void clear_citation_records();
  ::TSP::Reference* mutable_citation_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_citation_records();
  private:
  const ::TSP::Reference& _internal_citation_records(int index) const;
  ::TSP::Reference* _internal_add_citation_records();
  public:
  const ::TSP::Reference& citation_records(int index) const;
  ::TSP::Reference* add_citation_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      citation_records() const;

  // repeated .TSP.Reference toc_styles = 14;
  int toc_styles_size() const;
  private:
  int _internal_toc_styles_size() const;
  public:
  void clear_toc_styles();
  ::TSP::Reference* mutable_toc_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_toc_styles();
  private:
  const ::TSP::Reference& _internal_toc_styles(int index) const;
  ::TSP::Reference* _internal_add_toc_styles();
  public:
  const ::TSP::Reference& toc_styles(int index) const;
  ::TSP::Reference* add_toc_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      toc_styles() const;

  // repeated .TSP.Reference change_sessions = 16;
  int change_sessions_size() const;
  private:
  int _internal_change_sessions_size() const;
  public:
  void clear_change_sessions();
  ::TSP::Reference* mutable_change_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_change_sessions();
  private:
  const ::TSP::Reference& _internal_change_sessions(int index) const;
  ::TSP::Reference* _internal_add_change_sessions();
  public:
  const ::TSP::Reference& change_sessions(int index) const;
  ::TSP::Reference* add_change_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      change_sessions() const;

  // repeated .TSP.Reference page_templates = 48;
  int page_templates_size() const;
  private:
  int _internal_page_templates_size() const;
  public:
  void clear_page_templates();
  ::TSP::Reference* mutable_page_templates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_page_templates();
  private:
  const ::TSP::Reference& _internal_page_templates(int index) const;
  ::TSP::Reference* _internal_add_page_templates();
  public:
  const ::TSP::Reference& page_templates(int index) const;
  ::TSP::Reference* add_page_templates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      page_templates() const;

  // optional string printer_id = 43;
  bool has_printer_id() const;
  private:
  bool _internal_has_printer_id() const;
  public:
  void clear_printer_id();
  const std::string& printer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_printer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_printer_id();
  std::string* release_printer_id();
  void set_allocated_printer_id(std::string* printer_id);
  private:
  const std::string& _internal_printer_id() const;
  void _internal_set_printer_id(const std::string& value);
  std::string* _internal_mutable_printer_id();
  public:

  // optional string paper_id = 44;
  bool has_paper_id() const;
  private:
  bool _internal_has_paper_id() const;
  public:
  void clear_paper_id();
  const std::string& paper_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paper_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paper_id();
  std::string* release_paper_id();
  void set_allocated_paper_id(std::string* paper_id);
  private:
  const std::string& _internal_paper_id() const;
  void _internal_set_paper_id(const std::string& value);
  std::string* _internal_mutable_paper_id();
  public:

  // optional .TSP.Reference stylesheet = 2;
  bool has_stylesheet() const;
  private:
  bool _internal_has_stylesheet() const;
  public:
  void clear_stylesheet();
  const ::TSP::Reference& stylesheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_stylesheet();
  ::TSP::Reference* mutable_stylesheet();
  void set_allocated_stylesheet(::TSP::Reference* stylesheet);
  private:
  const ::TSP::Reference& _internal_stylesheet() const;
  ::TSP::Reference* _internal_mutable_stylesheet();
  public:
  void unsafe_arena_set_allocated_stylesheet(
      ::TSP::Reference* stylesheet);
  ::TSP::Reference* unsafe_arena_release_stylesheet();

  // optional .TSP.Reference floating_drawables = 3;
  bool has_floating_drawables() const;
  private:
  bool _internal_has_floating_drawables() const;
  public:
  void clear_floating_drawables();
  const ::TSP::Reference& floating_drawables() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_floating_drawables();
  ::TSP::Reference* mutable_floating_drawables();
  void set_allocated_floating_drawables(::TSP::Reference* floating_drawables);
  private:
  const ::TSP::Reference& _internal_floating_drawables() const;
  ::TSP::Reference* _internal_mutable_floating_drawables();
  public:
  void unsafe_arena_set_allocated_floating_drawables(
      ::TSP::Reference* floating_drawables);
  ::TSP::Reference* unsafe_arena_release_floating_drawables();

  // optional .TSP.Reference body_storage = 4;
  bool has_body_storage() const;
  private:
  bool _internal_has_body_storage() const;
  public:
  void clear_body_storage();
  const ::TSP::Reference& body_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_body_storage();
  ::TSP::Reference* mutable_body_storage();
  void set_allocated_body_storage(::TSP::Reference* body_storage);
  private:
  const ::TSP::Reference& _internal_body_storage() const;
  ::TSP::Reference* _internal_mutable_body_storage();
  public:
  void unsafe_arena_set_allocated_body_storage(
      ::TSP::Reference* body_storage);
  ::TSP::Reference* unsafe_arena_release_body_storage();

  // optional .TSP.Reference section = 5;
  bool has_section() const;
  private:
  bool _internal_has_section() const;
  public:
  void clear_section();
  const ::TSP::Reference& section() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_section();
  ::TSP::Reference* mutable_section();
  void set_allocated_section(::TSP::Reference* section);
  private:
  const ::TSP::Reference& _internal_section() const;
  ::TSP::Reference* _internal_mutable_section();
  public:
  void unsafe_arena_set_allocated_section(
      ::TSP::Reference* section);
  ::TSP::Reference* unsafe_arena_release_section();

  // optional .TSP.Reference theme = 6;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // optional .TSP.Reference settings = 7;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::TSP::Reference& settings() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_settings();
  ::TSP::Reference* mutable_settings();
  void set_allocated_settings(::TSP::Reference* settings);
  private:
  const ::TSP::Reference& _internal_settings() const;
  ::TSP::Reference* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::TSP::Reference* settings);
  ::TSP::Reference* unsafe_arena_release_settings();

  // optional .TSP.Reference deprecated_layout_state = 11;
  bool has_deprecated_layout_state() const;
  private:
  bool _internal_has_deprecated_layout_state() const;
  public:
  void clear_deprecated_layout_state();
  const ::TSP::Reference& deprecated_layout_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_deprecated_layout_state();
  ::TSP::Reference* mutable_deprecated_layout_state();
  void set_allocated_deprecated_layout_state(::TSP::Reference* deprecated_layout_state);
  private:
  const ::TSP::Reference& _internal_deprecated_layout_state() const;
  ::TSP::Reference* _internal_mutable_deprecated_layout_state();
  public:
  void unsafe_arena_set_allocated_deprecated_layout_state(
      ::TSP::Reference* deprecated_layout_state);
  ::TSP::Reference* unsafe_arena_release_deprecated_layout_state();

  // optional .TSP.Reference deprecated_view_state = 12;
  bool has_deprecated_view_state() const;
  private:
  bool _internal_has_deprecated_view_state() const;
  public:
  void clear_deprecated_view_state();
  const ::TSP::Reference& deprecated_view_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_deprecated_view_state();
  ::TSP::Reference* mutable_deprecated_view_state();
  void set_allocated_deprecated_view_state(::TSP::Reference* deprecated_view_state);
  private:
  const ::TSP::Reference& _internal_deprecated_view_state() const;
  ::TSP::Reference* _internal_mutable_deprecated_view_state();
  public:
  void unsafe_arena_set_allocated_deprecated_view_state(
      ::TSP::Reference* deprecated_view_state);
  ::TSP::Reference* unsafe_arena_release_deprecated_view_state();

  // required .TSA.DocumentArchive super = 15;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSA::DocumentArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSA::DocumentArchive* release_super();
  ::TSA::DocumentArchive* mutable_super();
  void set_allocated_super(::TSA::DocumentArchive* super);
  private:
  const ::TSA::DocumentArchive& _internal_super() const;
  ::TSA::DocumentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSA::DocumentArchive* super);
  ::TSA::DocumentArchive* unsafe_arena_release_super();

  // optional .TSP.Reference most_recent_change_session = 17;
  bool has_most_recent_change_session() const;
  private:
  bool _internal_has_most_recent_change_session() const;
  public:
  void clear_most_recent_change_session();
  const ::TSP::Reference& most_recent_change_session() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_most_recent_change_session();
  ::TSP::Reference* mutable_most_recent_change_session();
  void set_allocated_most_recent_change_session(::TSP::Reference* most_recent_change_session);
  private:
  const ::TSP::Reference& _internal_most_recent_change_session() const;
  ::TSP::Reference* _internal_mutable_most_recent_change_session();
  public:
  void unsafe_arena_set_allocated_most_recent_change_session(
      ::TSP::Reference* most_recent_change_session);
  ::TSP::Reference* unsafe_arena_release_most_recent_change_session();

  // optional .TSP.Reference drawables_zorder = 20;
  bool has_drawables_zorder() const;
  private:
  bool _internal_has_drawables_zorder() const;
  public:
  void clear_drawables_zorder();
  const ::TSP::Reference& drawables_zorder() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_drawables_zorder();
  ::TSP::Reference* mutable_drawables_zorder();
  void set_allocated_drawables_zorder(::TSP::Reference* drawables_zorder);
  private:
  const ::TSP::Reference& _internal_drawables_zorder() const;
  ::TSP::Reference* _internal_mutable_drawables_zorder();
  public:
  void unsafe_arena_set_allocated_drawables_zorder(
      ::TSP::Reference* drawables_zorder);
  ::TSP::Reference* unsafe_arena_release_drawables_zorder();

  // optional .TSP.Reference tables_custom_format_list = 41;
  bool has_tables_custom_format_list() const;
  private:
  bool _internal_has_tables_custom_format_list() const;
  public:
  void clear_tables_custom_format_list();
  const ::TSP::Reference& tables_custom_format_list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_tables_custom_format_list();
  ::TSP::Reference* mutable_tables_custom_format_list();
  void set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list);
  private:
  const ::TSP::Reference& _internal_tables_custom_format_list() const;
  ::TSP::Reference* _internal_mutable_tables_custom_format_list();
  public:
  void unsafe_arena_set_allocated_tables_custom_format_list(
      ::TSP::Reference* tables_custom_format_list);
  ::TSP::Reference* unsafe_arena_release_tables_custom_format_list();

  // optional .TSP.DataReference equation_environment = 45;
  bool has_equation_environment() const;
  private:
  bool _internal_has_equation_environment() const;
  public:
  void clear_equation_environment();
  const ::TSP::DataReference& equation_environment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_equation_environment();
  ::TSP::DataReference* mutable_equation_environment();
  void set_allocated_equation_environment(::TSP::DataReference* equation_environment);
  private:
  const ::TSP::DataReference& _internal_equation_environment() const;
  ::TSP::DataReference* _internal_mutable_equation_environment();
  public:
  void unsafe_arena_set_allocated_equation_environment(
      ::TSP::DataReference* equation_environment);
  ::TSP::DataReference* unsafe_arena_release_equation_environment();

  // optional .TSP.Reference flow_info_container = 47;
  bool has_flow_info_container() const;
  private:
  bool _internal_has_flow_info_container() const;
  public:
  void clear_flow_info_container();
  const ::TSP::Reference& flow_info_container() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_flow_info_container();
  ::TSP::Reference* mutable_flow_info_container();
  void set_allocated_flow_info_container(::TSP::Reference* flow_info_container);
  private:
  const ::TSP::Reference& _internal_flow_info_container() const;
  ::TSP::Reference* _internal_mutable_flow_info_container();
  public:
  void unsafe_arena_set_allocated_flow_info_container(
      ::TSP::Reference* flow_info_container);
  ::TSP::Reference* unsafe_arena_release_flow_info_container();

  // optional float page_width = 30;
  bool has_page_width() const;
  private:
  bool _internal_has_page_width() const;
  public:
  void clear_page_width();
  float page_width() const;
  void set_page_width(float value);
  private:
  float _internal_page_width() const;
  void _internal_set_page_width(float value);
  public:

  // optional float page_height = 31;
  bool has_page_height() const;
  private:
  bool _internal_has_page_height() const;
  public:
  void clear_page_height();
  float page_height() const;
  void set_page_height(float value);
  private:
  float _internal_page_height() const;
  void _internal_set_page_height(float value);
  public:

  // optional float left_margin = 32;
  bool has_left_margin() const;
  private:
  bool _internal_has_left_margin() const;
  public:
  void clear_left_margin();
  float left_margin() const;
  void set_left_margin(float value);
  private:
  float _internal_left_margin() const;
  void _internal_set_left_margin(float value);
  public:

  // optional float right_margin = 33;
  bool has_right_margin() const;
  private:
  bool _internal_has_right_margin() const;
  public:
  void clear_right_margin();
  float right_margin() const;
  void set_right_margin(float value);
  private:
  float _internal_right_margin() const;
  void _internal_set_right_margin(float value);
  public:

  // optional float top_margin = 34;
  bool has_top_margin() const;
  private:
  bool _internal_has_top_margin() const;
  public:
  void clear_top_margin();
  float top_margin() const;
  void set_top_margin(float value);
  private:
  float _internal_top_margin() const;
  void _internal_set_top_margin(float value);
  public:

  // optional float bottom_margin = 35;
  bool has_bottom_margin() const;
  private:
  bool _internal_has_bottom_margin() const;
  public:
  void clear_bottom_margin();
  float bottom_margin() const;
  void set_bottom_margin(float value);
  private:
  float _internal_bottom_margin() const;
  void _internal_set_bottom_margin(float value);
  public:

  // optional float header_margin = 36;
  bool has_header_margin() const;
  private:
  bool _internal_has_header_margin() const;
  public:
  void clear_header_margin();
  float header_margin() const;
  void set_header_margin(float value);
  private:
  float _internal_header_margin() const;
  void _internal_set_header_margin(float value);
  public:

  // optional bool uses_single_header_footer = 21;
  bool has_uses_single_header_footer() const;
  private:
  bool _internal_has_uses_single_header_footer() const;
  public:
  void clear_uses_single_header_footer();
  bool uses_single_header_footer() const;
  void set_uses_single_header_footer(bool value);
  private:
  bool _internal_uses_single_header_footer() const;
  void _internal_set_uses_single_header_footer(bool value);
  public:

  // optional bool lays_out_body_vertically = 39;
  bool has_lays_out_body_vertically() const;
  private:
  bool _internal_has_lays_out_body_vertically() const;
  public:
  void clear_lays_out_body_vertically();
  bool lays_out_body_vertically() const;
  void set_lays_out_body_vertically(bool value);
  private:
  bool _internal_lays_out_body_vertically() const;
  void _internal_set_lays_out_body_vertically(bool value);
  public:

  // optional bool change_tracking_enabled = 40;
  bool has_change_tracking_enabled() const;
  private:
  bool _internal_has_change_tracking_enabled() const;
  public:
  void clear_change_tracking_enabled();
  bool change_tracking_enabled() const;
  void set_change_tracking_enabled(bool value);
  private:
  bool _internal_change_tracking_enabled() const;
  void _internal_set_change_tracking_enabled(bool value);
  public:

  // optional bool show_in_bookmarks_list_paragraph_styles_property_initialized = 46 [default = false];
  bool has_show_in_bookmarks_list_paragraph_styles_property_initialized() const;
  private:
  bool _internal_has_show_in_bookmarks_list_paragraph_styles_property_initialized() const;
  public:
  void clear_show_in_bookmarks_list_paragraph_styles_property_initialized();
  bool show_in_bookmarks_list_paragraph_styles_property_initialized() const;
  void set_show_in_bookmarks_list_paragraph_styles_property_initialized(bool value);
  private:
  bool _internal_show_in_bookmarks_list_paragraph_styles_property_initialized() const;
  void _internal_set_show_in_bookmarks_list_paragraph_styles_property_initialized(bool value);
  public:

  // optional float footer_margin = 37;
  bool has_footer_margin() const;
  private:
  bool _internal_has_footer_margin() const;
  public:
  void clear_footer_margin();
  float footer_margin() const;
  void set_footer_margin(float value);
  private:
  float _internal_footer_margin() const;
  void _internal_set_footer_margin(float value);
  public:

  // optional float page_scale = 38;
  bool has_page_scale() const;
  private:
  bool _internal_has_page_scale() const;
  public:
  void clear_page_scale();
  float page_scale() const;
  void set_page_scale(float value);
  private:
  float _internal_page_scale() const;
  void _internal_set_page_scale(float value);
  public:

  // optional uint32 orientation = 42 [default = 0];
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  ::PROTOBUF_NAMESPACE_ID::uint32 orientation() const;
  void set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_orientation() const;
  void _internal_set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool should_use_anchored_drawable_wrap_slop = 49;
  bool has_should_use_anchored_drawable_wrap_slop() const;
  private:
  bool _internal_has_should_use_anchored_drawable_wrap_slop() const;
  public:
  void clear_should_use_anchored_drawable_wrap_slop();
  bool should_use_anchored_drawable_wrap_slop() const;
  void set_should_use_anchored_drawable_wrap_slop(bool value);
  private:
  bool _internal_should_use_anchored_drawable_wrap_slop() const;
  void _internal_set_should_use_anchored_drawable_wrap_slop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TP.DocumentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > citation_records_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > toc_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > change_sessions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > page_templates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr printer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paper_id_;
  ::TSP::Reference* stylesheet_;
  ::TSP::Reference* floating_drawables_;
  ::TSP::Reference* body_storage_;
  ::TSP::Reference* section_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* settings_;
  ::TSP::Reference* deprecated_layout_state_;
  ::TSP::Reference* deprecated_view_state_;
  ::TSA::DocumentArchive* super_;
  ::TSP::Reference* most_recent_change_session_;
  ::TSP::Reference* drawables_zorder_;
  ::TSP::Reference* tables_custom_format_list_;
  ::TSP::DataReference* equation_environment_;
  ::TSP::Reference* flow_info_container_;
  float page_width_;
  float page_height_;
  float left_margin_;
  float right_margin_;
  float top_margin_;
  float bottom_margin_;
  float header_margin_;
  bool uses_single_header_footer_;
  bool lays_out_body_vertically_;
  bool change_tracking_enabled_;
  bool show_in_bookmarks_list_paragraph_styles_property_initialized_;
  float footer_margin_;
  float page_scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orientation_;
  bool should_use_anchored_drawable_wrap_slop_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ThemeArchive) */ {
 public:
  inline ThemeArchive() : ThemeArchive(nullptr) {}
  ~ThemeArchive() override;
  explicit constexpr ThemeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeArchive(const ThemeArchive& from);
  ThemeArchive(ThemeArchive&& from) noexcept
    : ThemeArchive() {
    *this = ::std::move(from);
  }

  inline ThemeArchive& operator=(const ThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeArchive& operator=(ThemeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeArchive*>(
               &_ThemeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ThemeArchive& a, ThemeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeArchive* New() const final {
    return CreateMaybeMessage<ThemeArchive>(nullptr);
  }

  ThemeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemeArchive& from);
  void MergeFrom(const ThemeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ThemeArchive";
  }
  protected:
  explicit ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSS.ThemeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ThemeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::ThemeArchive* release_super();
  ::TSS::ThemeArchive* mutable_super();
  void set_allocated_super(::TSS::ThemeArchive* super);
  private:
  const ::TSS::ThemeArchive& _internal_super() const;
  ::TSS::ThemeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ThemeArchive* super);
  ::TSS::ThemeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TP.ThemeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::ThemeArchive* super_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SettingsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SettingsArchive) */ {
 public:
  inline SettingsArchive() : SettingsArchive(nullptr) {}
  ~SettingsArchive() override;
  explicit constexpr SettingsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SettingsArchive(const SettingsArchive& from);
  SettingsArchive(SettingsArchive&& from) noexcept
    : SettingsArchive() {
    *this = ::std::move(from);
  }

  inline SettingsArchive& operator=(const SettingsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettingsArchive& operator=(SettingsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SettingsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SettingsArchive* internal_default_instance() {
    return reinterpret_cast<const SettingsArchive*>(
               &_SettingsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SettingsArchive& a, SettingsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SettingsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettingsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettingsArchive* New() const final {
    return CreateMaybeMessage<SettingsArchive>(nullptr);
  }

  SettingsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettingsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettingsArchive& from);
  void MergeFrom(const SettingsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SettingsArchive";
  }
  protected:
  explicit SettingsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SettingsArchive_FootnoteKind FootnoteKind;
  static constexpr FootnoteKind kFootnoteKindFootnotes =
    SettingsArchive_FootnoteKind_kFootnoteKindFootnotes;
  static constexpr FootnoteKind kFootnoteKindDocumentEndnotes =
    SettingsArchive_FootnoteKind_kFootnoteKindDocumentEndnotes;
  static constexpr FootnoteKind kFootnoteKindSectionEndnotes =
    SettingsArchive_FootnoteKind_kFootnoteKindSectionEndnotes;
  static inline bool FootnoteKind_IsValid(int value) {
    return SettingsArchive_FootnoteKind_IsValid(value);
  }
  static constexpr FootnoteKind FootnoteKind_MIN =
    SettingsArchive_FootnoteKind_FootnoteKind_MIN;
  static constexpr FootnoteKind FootnoteKind_MAX =
    SettingsArchive_FootnoteKind_FootnoteKind_MAX;
  static constexpr int FootnoteKind_ARRAYSIZE =
    SettingsArchive_FootnoteKind_FootnoteKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FootnoteKind_descriptor() {
    return SettingsArchive_FootnoteKind_descriptor();
  }
  template<typename T>
  static inline const std::string& FootnoteKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FootnoteKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FootnoteKind_Name.");
    return SettingsArchive_FootnoteKind_Name(enum_t_value);
  }
  static inline bool FootnoteKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FootnoteKind* value) {
    return SettingsArchive_FootnoteKind_Parse(name, value);
  }

  typedef SettingsArchive_FootnoteFormat FootnoteFormat;
  static constexpr FootnoteFormat kFootnoteFormatNumeric =
    SettingsArchive_FootnoteFormat_kFootnoteFormatNumeric;
  static constexpr FootnoteFormat kFootnoteFormatRoman =
    SettingsArchive_FootnoteFormat_kFootnoteFormatRoman;
  static constexpr FootnoteFormat kFootnoteFormatSymbolic =
    SettingsArchive_FootnoteFormat_kFootnoteFormatSymbolic;
  static constexpr FootnoteFormat kFootnoteFormatJapaneseNumeric =
    SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseNumeric;
  static constexpr FootnoteFormat kFootnoteFormatJapaneseIdeographic =
    SettingsArchive_FootnoteFormat_kFootnoteFormatJapaneseIdeographic;
  static constexpr FootnoteFormat kFootnoteFormatArabicNumeric =
    SettingsArchive_FootnoteFormat_kFootnoteFormatArabicNumeric;
  static inline bool FootnoteFormat_IsValid(int value) {
    return SettingsArchive_FootnoteFormat_IsValid(value);
  }
  static constexpr FootnoteFormat FootnoteFormat_MIN =
    SettingsArchive_FootnoteFormat_FootnoteFormat_MIN;
  static constexpr FootnoteFormat FootnoteFormat_MAX =
    SettingsArchive_FootnoteFormat_FootnoteFormat_MAX;
  static constexpr int FootnoteFormat_ARRAYSIZE =
    SettingsArchive_FootnoteFormat_FootnoteFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FootnoteFormat_descriptor() {
    return SettingsArchive_FootnoteFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& FootnoteFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FootnoteFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FootnoteFormat_Name.");
    return SettingsArchive_FootnoteFormat_Name(enum_t_value);
  }
  static inline bool FootnoteFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FootnoteFormat* value) {
    return SettingsArchive_FootnoteFormat_Parse(name, value);
  }

  typedef SettingsArchive_FootnoteNumbering FootnoteNumbering;
  static constexpr FootnoteNumbering kFootnoteNumberingContinuous =
    SettingsArchive_FootnoteNumbering_kFootnoteNumberingContinuous;
  static constexpr FootnoteNumbering kFootnoteNumberingRestartEachPage =
    SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachPage;
  static constexpr FootnoteNumbering kFootnoteNumberingRestartEachSection =
    SettingsArchive_FootnoteNumbering_kFootnoteNumberingRestartEachSection;
  static inline bool FootnoteNumbering_IsValid(int value) {
    return SettingsArchive_FootnoteNumbering_IsValid(value);
  }
  static constexpr FootnoteNumbering FootnoteNumbering_MIN =
    SettingsArchive_FootnoteNumbering_FootnoteNumbering_MIN;
  static constexpr FootnoteNumbering FootnoteNumbering_MAX =
    SettingsArchive_FootnoteNumbering_FootnoteNumbering_MAX;
  static constexpr int FootnoteNumbering_ARRAYSIZE =
    SettingsArchive_FootnoteNumbering_FootnoteNumbering_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FootnoteNumbering_descriptor() {
    return SettingsArchive_FootnoteNumbering_descriptor();
  }
  template<typename T>
  static inline const std::string& FootnoteNumbering_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FootnoteNumbering>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FootnoteNumbering_Name.");
    return SettingsArchive_FootnoteNumbering_Name(enum_t_value);
  }
  static inline bool FootnoteNumbering_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FootnoteNumbering* value) {
    return SettingsArchive_FootnoteNumbering_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDecimalTabFieldNumber = 20,
    kLanguageFieldNumber = 21,
    kHyphenationLanguageFieldNumber = 22,
    kCreationLocaleFieldNumber = 23,
    kLastLocaleFieldNumber = 24,
    kOrigTemplateFieldNumber = 25,
    kCreationDateFieldNumber = 26,
    kBibliographyFormatFieldNumber = 27,
    kPlaceholderAuthoringFieldNumber = 7,
    kHyphenationFieldNumber = 9,
    kUseLigaturesFieldNumber = 10,
    kTocLinksEnabledFieldNumber = 11,
    kCtBubblesVisibilityFieldNumber = 14,
    kFootnoteKindFieldNumber = 30,
    kDocumentIsRtlFieldNumber = 18,
    kFacingPagesFieldNumber = 34,
    kSectionAuthoringFieldNumber = 40,
    kFootnoteFormatFieldNumber = 31,
    kFootnoteNumberingFieldNumber = 32,
    kFootnoteGapFieldNumber = 33,
    kShowCtDeletionsFieldNumber = 13,
    kChangeBarsVisibleFieldNumber = 15,
    kFormatChangesVisibleFieldNumber = 16,
    kAnnotationsVisibleFieldNumber = 17,
    kBodyFieldNumber = 1,
    kHeadersFieldNumber = 2,
    kFootersFieldNumber = 3,
    kPreviewFieldNumber = 4,
    kCopyMoviesFieldNumber = 5,
    kCopyAssetsFieldNumber = 6,
    kLinksEnabledFieldNumber = 8,
    kShowCtMarkupFieldNumber = 12,
  };
  // optional string decimal_tab = 20;
  bool has_decimal_tab() const;
  private:
  bool _internal_has_decimal_tab() const;
  public:
  void clear_decimal_tab();
  const std::string& decimal_tab() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decimal_tab(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decimal_tab();
  std::string* release_decimal_tab();
  void set_allocated_decimal_tab(std::string* decimal_tab);
  private:
  const std::string& _internal_decimal_tab() const;
  void _internal_set_decimal_tab(const std::string& value);
  std::string* _internal_mutable_decimal_tab();
  public:

  // optional string language = 21;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional string hyphenation_language = 22;
  bool has_hyphenation_language() const;
  private:
  bool _internal_has_hyphenation_language() const;
  public:
  void clear_hyphenation_language();
  const std::string& hyphenation_language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hyphenation_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hyphenation_language();
  std::string* release_hyphenation_language();
  void set_allocated_hyphenation_language(std::string* hyphenation_language);
  private:
  const std::string& _internal_hyphenation_language() const;
  void _internal_set_hyphenation_language(const std::string& value);
  std::string* _internal_mutable_hyphenation_language();
  public:

  // optional string creation_locale = 23;
  bool has_creation_locale() const;
  private:
  bool _internal_has_creation_locale() const;
  public:
  void clear_creation_locale();
  const std::string& creation_locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creation_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creation_locale();
  std::string* release_creation_locale();
  void set_allocated_creation_locale(std::string* creation_locale);
  private:
  const std::string& _internal_creation_locale() const;
  void _internal_set_creation_locale(const std::string& value);
  std::string* _internal_mutable_creation_locale();
  public:

  // optional string last_locale = 24;
  bool has_last_locale() const;
  private:
  bool _internal_has_last_locale() const;
  public:
  void clear_last_locale();
  const std::string& last_locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_locale();
  std::string* release_last_locale();
  void set_allocated_last_locale(std::string* last_locale);
  private:
  const std::string& _internal_last_locale() const;
  void _internal_set_last_locale(const std::string& value);
  std::string* _internal_mutable_last_locale();
  public:

  // optional string orig_template = 25;
  bool has_orig_template() const;
  private:
  bool _internal_has_orig_template() const;
  public:
  void clear_orig_template();
  const std::string& orig_template() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_orig_template(ArgT0&& arg0, ArgT... args);
  std::string* mutable_orig_template();
  std::string* release_orig_template();
  void set_allocated_orig_template(std::string* orig_template);
  private:
  const std::string& _internal_orig_template() const;
  void _internal_set_orig_template(const std::string& value);
  std::string* _internal_mutable_orig_template();
  public:

  // optional string creation_date = 26;
  bool has_creation_date() const;
  private:
  bool _internal_has_creation_date() const;
  public:
  void clear_creation_date();
  const std::string& creation_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creation_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creation_date();
  std::string* release_creation_date();
  void set_allocated_creation_date(std::string* creation_date);
  private:
  const std::string& _internal_creation_date() const;
  void _internal_set_creation_date(const std::string& value);
  std::string* _internal_mutable_creation_date();
  public:

  // optional string bibliography_format = 27;
  bool has_bibliography_format() const;
  private:
  bool _internal_has_bibliography_format() const;
  public:
  void clear_bibliography_format();
  const std::string& bibliography_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bibliography_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bibliography_format();
  std::string* release_bibliography_format();
  void set_allocated_bibliography_format(std::string* bibliography_format);
  private:
  const std::string& _internal_bibliography_format() const;
  void _internal_set_bibliography_format(const std::string& value);
  std::string* _internal_mutable_bibliography_format();
  public:

  // optional bool placeholder_authoring = 7 [default = false];
  bool has_placeholder_authoring() const;
  private:
  bool _internal_has_placeholder_authoring() const;
  public:
  void clear_placeholder_authoring();
  bool placeholder_authoring() const;
  void set_placeholder_authoring(bool value);
  private:
  bool _internal_placeholder_authoring() const;
  void _internal_set_placeholder_authoring(bool value);
  public:

  // optional bool hyphenation = 9 [default = false];
  bool has_hyphenation() const;
  private:
  bool _internal_has_hyphenation() const;
  public:
  void clear_hyphenation();
  bool hyphenation() const;
  void set_hyphenation(bool value);
  private:
  bool _internal_hyphenation() const;
  void _internal_set_hyphenation(bool value);
  public:

  // optional bool use_ligatures = 10 [default = false];
  bool has_use_ligatures() const;
  private:
  bool _internal_has_use_ligatures() const;
  public:
  void clear_use_ligatures();
  bool use_ligatures() const;
  void set_use_ligatures(bool value);
  private:
  bool _internal_use_ligatures() const;
  void _internal_set_use_ligatures(bool value);
  public:

  // optional bool toc_links_enabled = 11 [default = false];
  bool has_toc_links_enabled() const;
  private:
  bool _internal_has_toc_links_enabled() const;
  public:
  void clear_toc_links_enabled();
  bool toc_links_enabled() const;
  void set_toc_links_enabled(bool value);
  private:
  bool _internal_toc_links_enabled() const;
  void _internal_set_toc_links_enabled(bool value);
  public:

  // optional int32 ct_bubbles_visibility = 14;
  bool has_ct_bubbles_visibility() const;
  private:
  bool _internal_has_ct_bubbles_visibility() const;
  public:
  void clear_ct_bubbles_visibility();
  ::PROTOBUF_NAMESPACE_ID::int32 ct_bubbles_visibility() const;
  void set_ct_bubbles_visibility(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ct_bubbles_visibility() const;
  void _internal_set_ct_bubbles_visibility(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
  bool has_footnote_kind() const;
  private:
  bool _internal_has_footnote_kind() const;
  public:
  void clear_footnote_kind();
  ::TP::SettingsArchive_FootnoteKind footnote_kind() const;
  void set_footnote_kind(::TP::SettingsArchive_FootnoteKind value);
  private:
  ::TP::SettingsArchive_FootnoteKind _internal_footnote_kind() const;
  void _internal_set_footnote_kind(::TP::SettingsArchive_FootnoteKind value);
  public:

  // optional bool document_is_rtl = 18 [default = false];
  bool has_document_is_rtl() const;
  private:
  bool _internal_has_document_is_rtl() const;
  public:
  void clear_document_is_rtl();
  bool document_is_rtl() const;
  void set_document_is_rtl(bool value);
  private:
  bool _internal_document_is_rtl() const;
  void _internal_set_document_is_rtl(bool value);
  public:

  // optional bool facing_pages = 34 [default = false];
  bool has_facing_pages() const;
  private:
  bool _internal_has_facing_pages() const;
  public:
  void clear_facing_pages();
  bool facing_pages() const;
  void set_facing_pages(bool value);
  private:
  bool _internal_facing_pages() const;
  void _internal_set_facing_pages(bool value);
  public:

  // optional bool section_authoring = 40 [default = false];
  bool has_section_authoring() const;
  private:
  bool _internal_has_section_authoring() const;
  public:
  void clear_section_authoring();
  bool section_authoring() const;
  void set_section_authoring(bool value);
  private:
  bool _internal_section_authoring() const;
  void _internal_set_section_authoring(bool value);
  public:

  // optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
  bool has_footnote_format() const;
  private:
  bool _internal_has_footnote_format() const;
  public:
  void clear_footnote_format();
  ::TP::SettingsArchive_FootnoteFormat footnote_format() const;
  void set_footnote_format(::TP::SettingsArchive_FootnoteFormat value);
  private:
  ::TP::SettingsArchive_FootnoteFormat _internal_footnote_format() const;
  void _internal_set_footnote_format(::TP::SettingsArchive_FootnoteFormat value);
  public:

  // optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
  bool has_footnote_numbering() const;
  private:
  bool _internal_has_footnote_numbering() const;
  public:
  void clear_footnote_numbering();
  ::TP::SettingsArchive_FootnoteNumbering footnote_numbering() const;
  void set_footnote_numbering(::TP::SettingsArchive_FootnoteNumbering value);
  private:
  ::TP::SettingsArchive_FootnoteNumbering _internal_footnote_numbering() const;
  void _internal_set_footnote_numbering(::TP::SettingsArchive_FootnoteNumbering value);
  public:

  // optional int32 footnote_gap = 33;
  bool has_footnote_gap() const;
  private:
  bool _internal_has_footnote_gap() const;
  public:
  void clear_footnote_gap();
  ::PROTOBUF_NAMESPACE_ID::int32 footnote_gap() const;
  void set_footnote_gap(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_footnote_gap() const;
  void _internal_set_footnote_gap(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool show_ct_deletions = 13 [default = true];
  bool has_show_ct_deletions() const;
  private:
  bool _internal_has_show_ct_deletions() const;
  public:
  void clear_show_ct_deletions();
  bool show_ct_deletions() const;
  void set_show_ct_deletions(bool value);
  private:
  bool _internal_show_ct_deletions() const;
  void _internal_set_show_ct_deletions(bool value);
  public:

  // optional bool change_bars_visible = 15 [default = true];
  bool has_change_bars_visible() const;
  private:
  bool _internal_has_change_bars_visible() const;
  public:
  void clear_change_bars_visible();
  bool change_bars_visible() const;
  void set_change_bars_visible(bool value);
  private:
  bool _internal_change_bars_visible() const;
  void _internal_set_change_bars_visible(bool value);
  public:

  // optional bool format_changes_visible = 16 [default = true];
  bool has_format_changes_visible() const;
  private:
  bool _internal_has_format_changes_visible() const;
  public:
  void clear_format_changes_visible();
  bool format_changes_visible() const;
  void set_format_changes_visible(bool value);
  private:
  bool _internal_format_changes_visible() const;
  void _internal_set_format_changes_visible(bool value);
  public:

  // optional bool annotations_visible = 17 [default = true];
  bool has_annotations_visible() const;
  private:
  bool _internal_has_annotations_visible() const;
  public:
  void clear_annotations_visible();
  bool annotations_visible() const;
  void set_annotations_visible(bool value);
  private:
  bool _internal_annotations_visible() const;
  void _internal_set_annotations_visible(bool value);
  public:

  // optional bool body = 1 [default = true];
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  bool body() const;
  void set_body(bool value);
  private:
  bool _internal_body() const;
  void _internal_set_body(bool value);
  public:

  // optional bool headers = 2 [default = true];
  bool has_headers() const;
  private:
  bool _internal_has_headers() const;
  public:
  void clear_headers();
  bool headers() const;
  void set_headers(bool value);
  private:
  bool _internal_headers() const;
  void _internal_set_headers(bool value);
  public:

  // optional bool footers = 3 [default = true];
  bool has_footers() const;
  private:
  bool _internal_has_footers() const;
  public:
  void clear_footers();
  bool footers() const;
  void set_footers(bool value);
  private:
  bool _internal_footers() const;
  void _internal_set_footers(bool value);
  public:

  // optional bool preview = 4 [default = true];
  bool has_preview() const;
  private:
  bool _internal_has_preview() const;
  public:
  void clear_preview();
  bool preview() const;
  void set_preview(bool value);
  private:
  bool _internal_preview() const;
  void _internal_set_preview(bool value);
  public:

  // optional bool copy_movies = 5 [default = true];
  bool has_copy_movies() const;
  private:
  bool _internal_has_copy_movies() const;
  public:
  void clear_copy_movies();
  bool copy_movies() const;
  void set_copy_movies(bool value);
  private:
  bool _internal_copy_movies() const;
  void _internal_set_copy_movies(bool value);
  public:

  // optional bool copy_assets = 6 [default = true];
  bool has_copy_assets() const;
  private:
  bool _internal_has_copy_assets() const;
  public:
  void clear_copy_assets();
  bool copy_assets() const;
  void set_copy_assets(bool value);
  private:
  bool _internal_copy_assets() const;
  void _internal_set_copy_assets(bool value);
  public:

  // optional bool links_enabled = 8 [default = true];
  bool has_links_enabled() const;
  private:
  bool _internal_has_links_enabled() const;
  public:
  void clear_links_enabled();
  bool links_enabled() const;
  void set_links_enabled(bool value);
  private:
  bool _internal_links_enabled() const;
  void _internal_set_links_enabled(bool value);
  public:

  // optional bool show_ct_markup = 12 [default = true];
  bool has_show_ct_markup() const;
  private:
  bool _internal_has_show_ct_markup() const;
  public:
  void clear_show_ct_markup();
  bool show_ct_markup() const;
  void set_show_ct_markup(bool value);
  private:
  bool _internal_show_ct_markup() const;
  void _internal_set_show_ct_markup(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TP.SettingsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decimal_tab_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hyphenation_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creation_locale_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_locale_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orig_template_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creation_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bibliography_format_;
  bool placeholder_authoring_;
  bool hyphenation_;
  bool use_ligatures_;
  bool toc_links_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 ct_bubbles_visibility_;
  int footnote_kind_;
  bool document_is_rtl_;
  bool facing_pages_;
  bool section_authoring_;
  int footnote_format_;
  int footnote_numbering_;
  ::PROTOBUF_NAMESPACE_ID::int32 footnote_gap_;
  bool show_ct_deletions_;
  bool change_bars_visible_;
  bool format_changes_visible_;
  bool annotations_visible_;
  bool body_;
  bool headers_;
  bool footers_;
  bool preview_;
  bool copy_movies_;
  bool copy_assets_;
  bool links_enabled_;
  bool show_ct_markup_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class PlaceholderArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.PlaceholderArchive) */ {
 public:
  inline PlaceholderArchive() : PlaceholderArchive(nullptr) {}
  ~PlaceholderArchive() override;
  explicit constexpr PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceholderArchive(const PlaceholderArchive& from);
  PlaceholderArchive(PlaceholderArchive&& from) noexcept
    : PlaceholderArchive() {
    *this = ::std::move(from);
  }

  inline PlaceholderArchive& operator=(const PlaceholderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderArchive& operator=(PlaceholderArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceholderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceholderArchive* internal_default_instance() {
    return reinterpret_cast<const PlaceholderArchive*>(
               &_PlaceholderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlaceholderArchive& a, PlaceholderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderArchive* New() const final {
    return CreateMaybeMessage<PlaceholderArchive>(nullptr);
  }

  PlaceholderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceholderArchive& from);
  void MergeFrom(const PlaceholderArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.PlaceholderArchive";
  }
  protected:
  explicit PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSWP.ShapeInfoArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::ShapeInfoArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::ShapeInfoArchive* release_super();
  ::TSWP::ShapeInfoArchive* mutable_super();
  void set_allocated_super(::TSWP::ShapeInfoArchive* super);
  private:
  const ::TSWP::ShapeInfoArchive& _internal_super() const;
  ::TSWP::ShapeInfoArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::ShapeInfoArchive* super);
  ::TSWP::ShapeInfoArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TP.PlaceholderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::ShapeInfoArchive* super_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableTagPairsArchive_DrawableTagPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.DrawableTagPairsArchive.DrawableTagPair) */ {
 public:
  inline DrawableTagPairsArchive_DrawableTagPair() : DrawableTagPairsArchive_DrawableTagPair(nullptr) {}
  ~DrawableTagPairsArchive_DrawableTagPair() override;
  explicit constexpr DrawableTagPairsArchive_DrawableTagPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableTagPairsArchive_DrawableTagPair(const DrawableTagPairsArchive_DrawableTagPair& from);
  DrawableTagPairsArchive_DrawableTagPair(DrawableTagPairsArchive_DrawableTagPair&& from) noexcept
    : DrawableTagPairsArchive_DrawableTagPair() {
    *this = ::std::move(from);
  }

  inline DrawableTagPairsArchive_DrawableTagPair& operator=(const DrawableTagPairsArchive_DrawableTagPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableTagPairsArchive_DrawableTagPair& operator=(DrawableTagPairsArchive_DrawableTagPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableTagPairsArchive_DrawableTagPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableTagPairsArchive_DrawableTagPair* internal_default_instance() {
    return reinterpret_cast<const DrawableTagPairsArchive_DrawableTagPair*>(
               &_DrawableTagPairsArchive_DrawableTagPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DrawableTagPairsArchive_DrawableTagPair& a, DrawableTagPairsArchive_DrawableTagPair& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableTagPairsArchive_DrawableTagPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableTagPairsArchive_DrawableTagPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableTagPairsArchive_DrawableTagPair* New() const final {
    return CreateMaybeMessage<DrawableTagPairsArchive_DrawableTagPair>(nullptr);
  }

  DrawableTagPairsArchive_DrawableTagPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableTagPairsArchive_DrawableTagPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableTagPairsArchive_DrawableTagPair& from);
  void MergeFrom(const DrawableTagPairsArchive_DrawableTagPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableTagPairsArchive_DrawableTagPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.DrawableTagPairsArchive.DrawableTagPair";
  }
  protected:
  explicit DrawableTagPairsArchive_DrawableTagPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kDrawableFieldNumber = 2,
  };
  // required string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // required .TSP.Reference drawable = 2;
  bool has_drawable() const;
  private:
  bool _internal_has_drawable() const;
  public:
  void clear_drawable();
  const ::TSP::Reference& drawable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_drawable();
  ::TSP::Reference* mutable_drawable();
  void set_allocated_drawable(::TSP::Reference* drawable);
  private:
  const ::TSP::Reference& _internal_drawable() const;
  ::TSP::Reference* _internal_mutable_drawable();
  public:
  void unsafe_arena_set_allocated_drawable(
      ::TSP::Reference* drawable);
  ::TSP::Reference* unsafe_arena_release_drawable();

  // @@protoc_insertion_point(class_scope:TP.DrawableTagPairsArchive.DrawableTagPair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::TSP::Reference* drawable_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableTagPairsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.DrawableTagPairsArchive) */ {
 public:
  inline DrawableTagPairsArchive() : DrawableTagPairsArchive(nullptr) {}
  ~DrawableTagPairsArchive() override;
  explicit constexpr DrawableTagPairsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableTagPairsArchive(const DrawableTagPairsArchive& from);
  DrawableTagPairsArchive(DrawableTagPairsArchive&& from) noexcept
    : DrawableTagPairsArchive() {
    *this = ::std::move(from);
  }

  inline DrawableTagPairsArchive& operator=(const DrawableTagPairsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableTagPairsArchive& operator=(DrawableTagPairsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableTagPairsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableTagPairsArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableTagPairsArchive*>(
               &_DrawableTagPairsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DrawableTagPairsArchive& a, DrawableTagPairsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableTagPairsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableTagPairsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableTagPairsArchive* New() const final {
    return CreateMaybeMessage<DrawableTagPairsArchive>(nullptr);
  }

  DrawableTagPairsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableTagPairsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableTagPairsArchive& from);
  void MergeFrom(const DrawableTagPairsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableTagPairsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.DrawableTagPairsArchive";
  }
  protected:
  explicit DrawableTagPairsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DrawableTagPairsArchive_DrawableTagPair DrawableTagPair;

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableTagPairsFieldNumber = 1,
  };
  // repeated .TP.DrawableTagPairsArchive.DrawableTagPair drawable_tag_pairs = 1;
  int drawable_tag_pairs_size() const;
  private:
  int _internal_drawable_tag_pairs_size() const;
  public:
  void clear_drawable_tag_pairs();
  ::TP::DrawableTagPairsArchive_DrawableTagPair* mutable_drawable_tag_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::DrawableTagPairsArchive_DrawableTagPair >*
      mutable_drawable_tag_pairs();
  private:
  const ::TP::DrawableTagPairsArchive_DrawableTagPair& _internal_drawable_tag_pairs(int index) const;
  ::TP::DrawableTagPairsArchive_DrawableTagPair* _internal_add_drawable_tag_pairs();
  public:
  const ::TP::DrawableTagPairsArchive_DrawableTagPair& drawable_tag_pairs(int index) const;
  ::TP::DrawableTagPairsArchive_DrawableTagPair* add_drawable_tag_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::DrawableTagPairsArchive_DrawableTagPair >&
      drawable_tag_pairs() const;

  // @@protoc_insertion_point(class_scope:TP.DrawableTagPairsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::DrawableTagPairsArchive_DrawableTagPair > drawable_tag_pairs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class FloatingDrawablesArchive_DrawableEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.FloatingDrawablesArchive.DrawableEntry) */ {
 public:
  inline FloatingDrawablesArchive_DrawableEntry() : FloatingDrawablesArchive_DrawableEntry(nullptr) {}
  ~FloatingDrawablesArchive_DrawableEntry() override;
  explicit constexpr FloatingDrawablesArchive_DrawableEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatingDrawablesArchive_DrawableEntry(const FloatingDrawablesArchive_DrawableEntry& from);
  FloatingDrawablesArchive_DrawableEntry(FloatingDrawablesArchive_DrawableEntry&& from) noexcept
    : FloatingDrawablesArchive_DrawableEntry() {
    *this = ::std::move(from);
  }

  inline FloatingDrawablesArchive_DrawableEntry& operator=(const FloatingDrawablesArchive_DrawableEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatingDrawablesArchive_DrawableEntry& operator=(FloatingDrawablesArchive_DrawableEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatingDrawablesArchive_DrawableEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatingDrawablesArchive_DrawableEntry* internal_default_instance() {
    return reinterpret_cast<const FloatingDrawablesArchive_DrawableEntry*>(
               &_FloatingDrawablesArchive_DrawableEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FloatingDrawablesArchive_DrawableEntry& a, FloatingDrawablesArchive_DrawableEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatingDrawablesArchive_DrawableEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatingDrawablesArchive_DrawableEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatingDrawablesArchive_DrawableEntry* New() const final {
    return CreateMaybeMessage<FloatingDrawablesArchive_DrawableEntry>(nullptr);
  }

  FloatingDrawablesArchive_DrawableEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatingDrawablesArchive_DrawableEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatingDrawablesArchive_DrawableEntry& from);
  void MergeFrom(const FloatingDrawablesArchive_DrawableEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatingDrawablesArchive_DrawableEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.FloatingDrawablesArchive.DrawableEntry";
  }
  protected:
  explicit FloatingDrawablesArchive_DrawableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableFieldNumber = 1,
  };
  // optional .TSP.Reference drawable = 1;
  bool has_drawable() const;
  private:
  bool _internal_has_drawable() const;
  public:
  void clear_drawable();
  const ::TSP::Reference& drawable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_drawable();
  ::TSP::Reference* mutable_drawable();
  void set_allocated_drawable(::TSP::Reference* drawable);
  private:
  const ::TSP::Reference& _internal_drawable() const;
  ::TSP::Reference* _internal_mutable_drawable();
  public:
  void unsafe_arena_set_allocated_drawable(
      ::TSP::Reference* drawable);
  ::TSP::Reference* unsafe_arena_release_drawable();

  // @@protoc_insertion_point(class_scope:TP.FloatingDrawablesArchive.DrawableEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* drawable_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class FloatingDrawablesArchive_PageGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.FloatingDrawablesArchive.PageGroup) */ {
 public:
  inline FloatingDrawablesArchive_PageGroup() : FloatingDrawablesArchive_PageGroup(nullptr) {}
  ~FloatingDrawablesArchive_PageGroup() override;
  explicit constexpr FloatingDrawablesArchive_PageGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatingDrawablesArchive_PageGroup(const FloatingDrawablesArchive_PageGroup& from);
  FloatingDrawablesArchive_PageGroup(FloatingDrawablesArchive_PageGroup&& from) noexcept
    : FloatingDrawablesArchive_PageGroup() {
    *this = ::std::move(from);
  }

  inline FloatingDrawablesArchive_PageGroup& operator=(const FloatingDrawablesArchive_PageGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatingDrawablesArchive_PageGroup& operator=(FloatingDrawablesArchive_PageGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatingDrawablesArchive_PageGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatingDrawablesArchive_PageGroup* internal_default_instance() {
    return reinterpret_cast<const FloatingDrawablesArchive_PageGroup*>(
               &_FloatingDrawablesArchive_PageGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FloatingDrawablesArchive_PageGroup& a, FloatingDrawablesArchive_PageGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatingDrawablesArchive_PageGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatingDrawablesArchive_PageGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatingDrawablesArchive_PageGroup* New() const final {
    return CreateMaybeMessage<FloatingDrawablesArchive_PageGroup>(nullptr);
  }

  FloatingDrawablesArchive_PageGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatingDrawablesArchive_PageGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatingDrawablesArchive_PageGroup& from);
  void MergeFrom(const FloatingDrawablesArchive_PageGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatingDrawablesArchive_PageGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.FloatingDrawablesArchive.PageGroup";
  }
  protected:
  explicit FloatingDrawablesArchive_PageGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundDrawablesFieldNumber = 2,
    kForegroundDrawablesFieldNumber = 3,
    kDrawablesFieldNumber = 4,
    kPageIndexFieldNumber = 1,
  };
  // repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
  int background_drawables_size() const;
  private:
  int _internal_background_drawables_size() const;
  public:
  void clear_background_drawables();
  ::TP::FloatingDrawablesArchive_DrawableEntry* mutable_background_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
      mutable_background_drawables();
  private:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& _internal_background_drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* _internal_add_background_drawables();
  public:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& background_drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* add_background_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
      background_drawables() const;

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
  int foreground_drawables_size() const;
  private:
  int _internal_foreground_drawables_size() const;
  public:
  void clear_foreground_drawables();
  ::TP::FloatingDrawablesArchive_DrawableEntry* mutable_foreground_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
      mutable_foreground_drawables();
  private:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& _internal_foreground_drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* _internal_add_foreground_drawables();
  public:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& foreground_drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* add_foreground_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
      foreground_drawables() const;

  // repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TP::FloatingDrawablesArchive_DrawableEntry* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
      mutable_drawables();
  private:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& _internal_drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* _internal_add_drawables();
  public:
  const ::TP::FloatingDrawablesArchive_DrawableEntry& drawables(int index) const;
  ::TP::FloatingDrawablesArchive_DrawableEntry* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
      drawables() const;

  // required uint32 page_index = 1;
  bool has_page_index() const;
  private:
  bool _internal_has_page_index() const;
  public:
  void clear_page_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index() const;
  void set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_index() const;
  void _internal_set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.FloatingDrawablesArchive.PageGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry > background_drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry > foreground_drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry > drawables_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class FloatingDrawablesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.FloatingDrawablesArchive) */ {
 public:
  inline FloatingDrawablesArchive() : FloatingDrawablesArchive(nullptr) {}
  ~FloatingDrawablesArchive() override;
  explicit constexpr FloatingDrawablesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatingDrawablesArchive(const FloatingDrawablesArchive& from);
  FloatingDrawablesArchive(FloatingDrawablesArchive&& from) noexcept
    : FloatingDrawablesArchive() {
    *this = ::std::move(from);
  }

  inline FloatingDrawablesArchive& operator=(const FloatingDrawablesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatingDrawablesArchive& operator=(FloatingDrawablesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatingDrawablesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatingDrawablesArchive* internal_default_instance() {
    return reinterpret_cast<const FloatingDrawablesArchive*>(
               &_FloatingDrawablesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FloatingDrawablesArchive& a, FloatingDrawablesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatingDrawablesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatingDrawablesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatingDrawablesArchive* New() const final {
    return CreateMaybeMessage<FloatingDrawablesArchive>(nullptr);
  }

  FloatingDrawablesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatingDrawablesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatingDrawablesArchive& from);
  void MergeFrom(const FloatingDrawablesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatingDrawablesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.FloatingDrawablesArchive";
  }
  protected:
  explicit FloatingDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FloatingDrawablesArchive_DrawableEntry DrawableEntry;
  typedef FloatingDrawablesArchive_PageGroup PageGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kPageGroupsFieldNumber = 1,
    kDrawableTagPairsFieldNumber = 2,
  };
  // repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
  int page_groups_size() const;
  private:
  int _internal_page_groups_size() const;
  public:
  void clear_page_groups();
  ::TP::FloatingDrawablesArchive_PageGroup* mutable_page_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >*
      mutable_page_groups();
  private:
  const ::TP::FloatingDrawablesArchive_PageGroup& _internal_page_groups(int index) const;
  ::TP::FloatingDrawablesArchive_PageGroup* _internal_add_page_groups();
  public:
  const ::TP::FloatingDrawablesArchive_PageGroup& page_groups(int index) const;
  ::TP::FloatingDrawablesArchive_PageGroup* add_page_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >&
      page_groups() const;

  // optional .TP.DrawableTagPairsArchive drawable_tag_pairs = 2;
  bool has_drawable_tag_pairs() const;
  private:
  bool _internal_has_drawable_tag_pairs() const;
  public:
  void clear_drawable_tag_pairs();
  const ::TP::DrawableTagPairsArchive& drawable_tag_pairs() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TP::DrawableTagPairsArchive* release_drawable_tag_pairs();
  ::TP::DrawableTagPairsArchive* mutable_drawable_tag_pairs();
  void set_allocated_drawable_tag_pairs(::TP::DrawableTagPairsArchive* drawable_tag_pairs);
  private:
  const ::TP::DrawableTagPairsArchive& _internal_drawable_tag_pairs() const;
  ::TP::DrawableTagPairsArchive* _internal_mutable_drawable_tag_pairs();
  public:
  void unsafe_arena_set_allocated_drawable_tag_pairs(
      ::TP::DrawableTagPairsArchive* drawable_tag_pairs);
  ::TP::DrawableTagPairsArchive* unsafe_arena_release_drawable_tag_pairs();

  // @@protoc_insertion_point(class_scope:TP.FloatingDrawablesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup > page_groups_;
  ::TP::DrawableTagPairsArchive* drawable_tag_pairs_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawablesZOrderArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.DrawablesZOrderArchive) */ {
 public:
  inline DrawablesZOrderArchive() : DrawablesZOrderArchive(nullptr) {}
  ~DrawablesZOrderArchive() override;
  explicit constexpr DrawablesZOrderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawablesZOrderArchive(const DrawablesZOrderArchive& from);
  DrawablesZOrderArchive(DrawablesZOrderArchive&& from) noexcept
    : DrawablesZOrderArchive() {
    *this = ::std::move(from);
  }

  inline DrawablesZOrderArchive& operator=(const DrawablesZOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawablesZOrderArchive& operator=(DrawablesZOrderArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawablesZOrderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawablesZOrderArchive* internal_default_instance() {
    return reinterpret_cast<const DrawablesZOrderArchive*>(
               &_DrawablesZOrderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DrawablesZOrderArchive& a, DrawablesZOrderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawablesZOrderArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawablesZOrderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawablesZOrderArchive* New() const final {
    return CreateMaybeMessage<DrawablesZOrderArchive>(nullptr);
  }

  DrawablesZOrderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawablesZOrderArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawablesZOrderArchive& from);
  void MergeFrom(const DrawablesZOrderArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawablesZOrderArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.DrawablesZOrderArchive";
  }
  protected:
  explicit DrawablesZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 1,
  };
  // repeated .TSP.Reference drawables = 1;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // @@protoc_insertion_point(class_scope:TP.DrawablesZOrderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class PageMasterArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.PageMasterArchive) */ {
 public:
  inline PageMasterArchive() : PageMasterArchive(nullptr) {}
  ~PageMasterArchive() override;
  explicit constexpr PageMasterArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageMasterArchive(const PageMasterArchive& from);
  PageMasterArchive(PageMasterArchive&& from) noexcept
    : PageMasterArchive() {
    *this = ::std::move(from);
  }

  inline PageMasterArchive& operator=(const PageMasterArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageMasterArchive& operator=(PageMasterArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageMasterArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageMasterArchive* internal_default_instance() {
    return reinterpret_cast<const PageMasterArchive*>(
               &_PageMasterArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PageMasterArchive& a, PageMasterArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PageMasterArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageMasterArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PageMasterArchive* New() const final {
    return CreateMaybeMessage<PageMasterArchive>(nullptr);
  }

  PageMasterArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PageMasterArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PageMasterArchive& from);
  void MergeFrom(const PageMasterArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageMasterArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.PageMasterArchive";
  }
  protected:
  explicit PageMasterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 1,
    kFootersFieldNumber = 2,
    kMasterDrawablesFieldNumber = 3,
    kPageTemplateUuidpathFieldNumber = 4,
  };
  // repeated .TSP.Reference headers = 1;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::TSP::Reference* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_headers();
  private:
  const ::TSP::Reference& _internal_headers(int index) const;
  ::TSP::Reference* _internal_add_headers();
  public:
  const ::TSP::Reference& headers(int index) const;
  ::TSP::Reference* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      headers() const;

  // repeated .TSP.Reference footers = 2;
  int footers_size() const;
  private:
  int _internal_footers_size() const;
  public:
  void clear_footers();
  ::TSP::Reference* mutable_footers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_footers();
  private:
  const ::TSP::Reference& _internal_footers(int index) const;
  ::TSP::Reference* _internal_add_footers();
  public:
  const ::TSP::Reference& footers(int index) const;
  ::TSP::Reference* add_footers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      footers() const;

  // repeated .TSP.Reference master_drawables = 3;
  int master_drawables_size() const;
  private:
  int _internal_master_drawables_size() const;
  public:
  void clear_master_drawables();
  ::TSP::Reference* mutable_master_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_master_drawables();
  private:
  const ::TSP::Reference& _internal_master_drawables(int index) const;
  ::TSP::Reference* _internal_add_master_drawables();
  public:
  const ::TSP::Reference& master_drawables(int index) const;
  ::TSP::Reference* add_master_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      master_drawables() const;

  // optional .TSP.UUIDPath page_template_uuidpath = 4;
  bool has_page_template_uuidpath() const;
  private:
  bool _internal_has_page_template_uuidpath() const;
  public:
  void clear_page_template_uuidpath();
  const ::TSP::UUIDPath& page_template_uuidpath() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_page_template_uuidpath();
  ::TSP::UUIDPath* mutable_page_template_uuidpath();
  void set_allocated_page_template_uuidpath(::TSP::UUIDPath* page_template_uuidpath);
  private:
  const ::TSP::UUIDPath& _internal_page_template_uuidpath() const;
  ::TSP::UUIDPath* _internal_mutable_page_template_uuidpath();
  public:
  void unsafe_arena_set_allocated_page_template_uuidpath(
      ::TSP::UUIDPath* page_template_uuidpath);
  ::TSP::UUIDPath* unsafe_arena_release_page_template_uuidpath();

  // @@protoc_insertion_point(class_scope:TP.PageMasterArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > headers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > footers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > master_drawables_;
  ::TSP::UUIDPath* page_template_uuidpath_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class PageTemplateArchive_TagDrawablePair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.PageTemplateArchive.TagDrawablePair) */ {
 public:
  inline PageTemplateArchive_TagDrawablePair() : PageTemplateArchive_TagDrawablePair(nullptr) {}
  ~PageTemplateArchive_TagDrawablePair() override;
  explicit constexpr PageTemplateArchive_TagDrawablePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageTemplateArchive_TagDrawablePair(const PageTemplateArchive_TagDrawablePair& from);
  PageTemplateArchive_TagDrawablePair(PageTemplateArchive_TagDrawablePair&& from) noexcept
    : PageTemplateArchive_TagDrawablePair() {
    *this = ::std::move(from);
  }

  inline PageTemplateArchive_TagDrawablePair& operator=(const PageTemplateArchive_TagDrawablePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageTemplateArchive_TagDrawablePair& operator=(PageTemplateArchive_TagDrawablePair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageTemplateArchive_TagDrawablePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageTemplateArchive_TagDrawablePair* internal_default_instance() {
    return reinterpret_cast<const PageTemplateArchive_TagDrawablePair*>(
               &_PageTemplateArchive_TagDrawablePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PageTemplateArchive_TagDrawablePair& a, PageTemplateArchive_TagDrawablePair& b) {
    a.Swap(&b);
  }
  inline void Swap(PageTemplateArchive_TagDrawablePair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageTemplateArchive_TagDrawablePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PageTemplateArchive_TagDrawablePair* New() const final {
    return CreateMaybeMessage<PageTemplateArchive_TagDrawablePair>(nullptr);
  }

  PageTemplateArchive_TagDrawablePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PageTemplateArchive_TagDrawablePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PageTemplateArchive_TagDrawablePair& from);
  void MergeFrom(const PageTemplateArchive_TagDrawablePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageTemplateArchive_TagDrawablePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.PageTemplateArchive.TagDrawablePair";
  }
  protected:
  explicit PageTemplateArchive_TagDrawablePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kDrawableFieldNumber = 2,
    kZIndexFieldNumber = 3,
  };
  // required string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // required .TSP.Reference drawable = 2;
  bool has_drawable() const;
  private:
  bool _internal_has_drawable() const;
  public:
  void clear_drawable();
  const ::TSP::Reference& drawable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_drawable();
  ::TSP::Reference* mutable_drawable();
  void set_allocated_drawable(::TSP::Reference* drawable);
  private:
  const ::TSP::Reference& _internal_drawable() const;
  ::TSP::Reference* _internal_mutable_drawable();
  public:
  void unsafe_arena_set_allocated_drawable(
      ::TSP::Reference* drawable);
  ::TSP::Reference* unsafe_arena_release_drawable();

  // required uint32 z_index = 3;
  bool has_z_index() const;
  private:
  bool _internal_has_z_index() const;
  public:
  void clear_z_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 z_index() const;
  void set_z_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_z_index() const;
  void _internal_set_z_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.PageTemplateArchive.TagDrawablePair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::TSP::Reference* drawable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 z_index_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class PageTemplateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.PageTemplateArchive) */ {
 public:
  inline PageTemplateArchive() : PageTemplateArchive(nullptr) {}
  ~PageTemplateArchive() override;
  explicit constexpr PageTemplateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageTemplateArchive(const PageTemplateArchive& from);
  PageTemplateArchive(PageTemplateArchive&& from) noexcept
    : PageTemplateArchive() {
    *this = ::std::move(from);
  }

  inline PageTemplateArchive& operator=(const PageTemplateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageTemplateArchive& operator=(PageTemplateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageTemplateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageTemplateArchive* internal_default_instance() {
    return reinterpret_cast<const PageTemplateArchive*>(
               &_PageTemplateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PageTemplateArchive& a, PageTemplateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PageTemplateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageTemplateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PageTemplateArchive* New() const final {
    return CreateMaybeMessage<PageTemplateArchive>(nullptr);
  }

  PageTemplateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PageTemplateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PageTemplateArchive& from);
  void MergeFrom(const PageTemplateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageTemplateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.PageTemplateArchive";
  }
  protected:
  explicit PageTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PageTemplateArchive_TagDrawablePair TagDrawablePair;

  // accessors -------------------------------------------------------

  enum : int {
    kMasterDrawablesFieldNumber = 2,
    kPlaceholderDrawablesFieldNumber = 3,
    kNameFieldNumber = 1,
    kBackgroundFillFieldNumber = 6,
    kGuideStorageFieldNumber = 7,
    kHeadersFootersMatchPreviousPageFieldNumber = 4,
    kHideHeadersFootersFieldNumber = 5,
  };
  // repeated .TSP.Reference master_drawables = 2;
  int master_drawables_size() const;
  private:
  int _internal_master_drawables_size() const;
  public:
  void clear_master_drawables();
  ::TSP::Reference* mutable_master_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_master_drawables();
  private:
  const ::TSP::Reference& _internal_master_drawables(int index) const;
  ::TSP::Reference* _internal_add_master_drawables();
  public:
  const ::TSP::Reference& master_drawables(int index) const;
  ::TSP::Reference* add_master_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      master_drawables() const;

  // repeated .TP.PageTemplateArchive.TagDrawablePair placeholder_drawables = 3;
  int placeholder_drawables_size() const;
  private:
  int _internal_placeholder_drawables_size() const;
  public:
  void clear_placeholder_drawables();
  ::TP::PageTemplateArchive_TagDrawablePair* mutable_placeholder_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageTemplateArchive_TagDrawablePair >*
      mutable_placeholder_drawables();
  private:
  const ::TP::PageTemplateArchive_TagDrawablePair& _internal_placeholder_drawables(int index) const;
  ::TP::PageTemplateArchive_TagDrawablePair* _internal_add_placeholder_drawables();
  public:
  const ::TP::PageTemplateArchive_TagDrawablePair& placeholder_drawables(int index) const;
  ::TP::PageTemplateArchive_TagDrawablePair* add_placeholder_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageTemplateArchive_TagDrawablePair >&
      placeholder_drawables() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .TSD.FillArchive background_fill = 6;
  bool has_background_fill() const;
  private:
  bool _internal_has_background_fill() const;
  public:
  void clear_background_fill();
  const ::TSD::FillArchive& background_fill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_background_fill();
  ::TSD::FillArchive* mutable_background_fill();
  void set_allocated_background_fill(::TSD::FillArchive* background_fill);
  private:
  const ::TSD::FillArchive& _internal_background_fill() const;
  ::TSD::FillArchive* _internal_mutable_background_fill();
  public:
  void unsafe_arena_set_allocated_background_fill(
      ::TSD::FillArchive* background_fill);
  ::TSD::FillArchive* unsafe_arena_release_background_fill();

  // optional .TSP.Reference guide_storage = 7;
  bool has_guide_storage() const;
  private:
  bool _internal_has_guide_storage() const;
  public:
  void clear_guide_storage();
  const ::TSP::Reference& guide_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_guide_storage();
  ::TSP::Reference* mutable_guide_storage();
  void set_allocated_guide_storage(::TSP::Reference* guide_storage);
  private:
  const ::TSP::Reference& _internal_guide_storage() const;
  ::TSP::Reference* _internal_mutable_guide_storage();
  public:
  void unsafe_arena_set_allocated_guide_storage(
      ::TSP::Reference* guide_storage);
  ::TSP::Reference* unsafe_arena_release_guide_storage();

  // required bool headers_footers_match_previous_page = 4;
  bool has_headers_footers_match_previous_page() const;
  private:
  bool _internal_has_headers_footers_match_previous_page() const;
  public:
  void clear_headers_footers_match_previous_page();
  bool headers_footers_match_previous_page() const;
  void set_headers_footers_match_previous_page(bool value);
  private:
  bool _internal_headers_footers_match_previous_page() const;
  void _internal_set_headers_footers_match_previous_page(bool value);
  public:

  // optional bool hide_headers_footers = 5;
  bool has_hide_headers_footers() const;
  private:
  bool _internal_has_hide_headers_footers() const;
  public:
  void clear_hide_headers_footers();
  bool hide_headers_footers() const;
  void set_hide_headers_footers(bool value);
  private:
  bool _internal_hide_headers_footers() const;
  void _internal_set_hide_headers_footers(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TP.PageTemplateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > master_drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageTemplateArchive_TagDrawablePair > placeholder_drawables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TSD::FillArchive* background_fill_;
  ::TSP::Reference* guide_storage_;
  bool headers_footers_match_previous_page_;
  bool hide_headers_footers_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SectionArchive) */ {
 public:
  inline SectionArchive() : SectionArchive(nullptr) {}
  ~SectionArchive() override;
  explicit constexpr SectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionArchive(const SectionArchive& from);
  SectionArchive(SectionArchive&& from) noexcept
    : SectionArchive() {
    *this = ::std::move(from);
  }

  inline SectionArchive& operator=(const SectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionArchive& operator=(SectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionArchive* internal_default_instance() {
    return reinterpret_cast<const SectionArchive*>(
               &_SectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SectionArchive& a, SectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionArchive* New() const final {
    return CreateMaybeMessage<SectionArchive>(nullptr);
  }

  SectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionArchive& from);
  void MergeFrom(const SectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SectionArchive";
  }
  protected:
  explicit SectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOBSOLETEHeadersFieldNumber = 3,
    kOBSOLETEFootersFieldNumber = 4,
    kOBSOLETEMasterDrawablesFieldNumber = 14,
    kNameFieldNumber = 26,
    kFirstPageMasterFieldNumber = 23,
    kEvenPageMasterFieldNumber = 24,
    kOddPageMasterFieldNumber = 25,
    kUserDefinedGuideStorageFieldNumber = 29,
    kBackgroundFillFieldNumber = 30,
    kSectionHyperlinkUuidFieldNumber = 31,
    kOBSOLETELeftMarginFieldNumber = 5,
    kOBSOLETERightMarginFieldNumber = 6,
    kOBSOLETETopMarginFieldNumber = 7,
    kOBSOLETEBottomMarginFieldNumber = 8,
    kOBSOLETEShowsHeaderFieldNumber = 1,
    kOBSOLETEShowsFooterFieldNumber = 2,
    kOBSOLETELandscapeModeFieldNumber = 13,
    kInheritPreviousHeaderFooterFieldNumber = 17,
    kOBSOLETEHeaderPaddingFieldNumber = 9,
    kOBSOLETEFooterPaddingFieldNumber = 10,
    kOBSOLETEPaperWidthFieldNumber = 11,
    kOBSOLETEPaperHeightFieldNumber = 12,
    kOBSOLETEHeaderMarginFieldNumber = 15,
    kOBSOLETEFooterMarginFieldNumber = 16,
    kSectionStartKindFieldNumber = 20,
    kSectionPageNumberKindFieldNumber = 21,
    kPageMasterFirstPageDifferentFieldNumber = 18,
    kPageMasterEvenOddPagesDifferentFieldNumber = 19,
    kPageMasterFirstPageHidesHeaderFooterFieldNumber = 28,
    kSectionPageNumberStartFieldNumber = 22,
  };
  // repeated .TSP.Reference OBSOLETE_headers = 3;
  int obsolete_headers_size() const;
  private:
  int _internal_obsolete_headers_size() const;
  public:
  void clear_obsolete_headers();
  ::TSP::Reference* mutable_obsolete_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_obsolete_headers();
  private:
  const ::TSP::Reference& _internal_obsolete_headers(int index) const;
  ::TSP::Reference* _internal_add_obsolete_headers();
  public:
  const ::TSP::Reference& obsolete_headers(int index) const;
  ::TSP::Reference* add_obsolete_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      obsolete_headers() const;

  // repeated .TSP.Reference OBSOLETE_footers = 4;
  int obsolete_footers_size() const;
  private:
  int _internal_obsolete_footers_size() const;
  public:
  void clear_obsolete_footers();
  ::TSP::Reference* mutable_obsolete_footers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_obsolete_footers();
  private:
  const ::TSP::Reference& _internal_obsolete_footers(int index) const;
  ::TSP::Reference* _internal_add_obsolete_footers();
  public:
  const ::TSP::Reference& obsolete_footers(int index) const;
  ::TSP::Reference* add_obsolete_footers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      obsolete_footers() const;

  // repeated .TSP.Reference OBSOLETE_master_drawables = 14;
  int obsolete_master_drawables_size() const;
  private:
  int _internal_obsolete_master_drawables_size() const;
  public:
  void clear_obsolete_master_drawables();
  ::TSP::Reference* mutable_obsolete_master_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_obsolete_master_drawables();
  private:
  const ::TSP::Reference& _internal_obsolete_master_drawables(int index) const;
  ::TSP::Reference* _internal_add_obsolete_master_drawables();
  public:
  const ::TSP::Reference& obsolete_master_drawables(int index) const;
  ::TSP::Reference* add_obsolete_master_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      obsolete_master_drawables() const;

  // optional string name = 26;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .TSP.Reference first_page_master = 23;
  bool has_first_page_master() const;
  private:
  bool _internal_has_first_page_master() const;
  public:
  void clear_first_page_master();
  const ::TSP::Reference& first_page_master() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_first_page_master();
  ::TSP::Reference* mutable_first_page_master();
  void set_allocated_first_page_master(::TSP::Reference* first_page_master);
  private:
  const ::TSP::Reference& _internal_first_page_master() const;
  ::TSP::Reference* _internal_mutable_first_page_master();
  public:
  void unsafe_arena_set_allocated_first_page_master(
      ::TSP::Reference* first_page_master);
  ::TSP::Reference* unsafe_arena_release_first_page_master();

  // optional .TSP.Reference even_page_master = 24;
  bool has_even_page_master() const;
  private:
  bool _internal_has_even_page_master() const;
  public:
  void clear_even_page_master();
  const ::TSP::Reference& even_page_master() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_even_page_master();
  ::TSP::Reference* mutable_even_page_master();
  void set_allocated_even_page_master(::TSP::Reference* even_page_master);
  private:
  const ::TSP::Reference& _internal_even_page_master() const;
  ::TSP::Reference* _internal_mutable_even_page_master();
  public:
  void unsafe_arena_set_allocated_even_page_master(
      ::TSP::Reference* even_page_master);
  ::TSP::Reference* unsafe_arena_release_even_page_master();

  // optional .TSP.Reference odd_page_master = 25;
  bool has_odd_page_master() const;
  private:
  bool _internal_has_odd_page_master() const;
  public:
  void clear_odd_page_master();
  const ::TSP::Reference& odd_page_master() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_odd_page_master();
  ::TSP::Reference* mutable_odd_page_master();
  void set_allocated_odd_page_master(::TSP::Reference* odd_page_master);
  private:
  const ::TSP::Reference& _internal_odd_page_master() const;
  ::TSP::Reference* _internal_mutable_odd_page_master();
  public:
  void unsafe_arena_set_allocated_odd_page_master(
      ::TSP::Reference* odd_page_master);
  ::TSP::Reference* unsafe_arena_release_odd_page_master();

  // optional .TSP.Reference user_defined_guide_storage = 29;
  bool has_user_defined_guide_storage() const;
  private:
  bool _internal_has_user_defined_guide_storage() const;
  public:
  void clear_user_defined_guide_storage();
  const ::TSP::Reference& user_defined_guide_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_user_defined_guide_storage();
  ::TSP::Reference* mutable_user_defined_guide_storage();
  void set_allocated_user_defined_guide_storage(::TSP::Reference* user_defined_guide_storage);
  private:
  const ::TSP::Reference& _internal_user_defined_guide_storage() const;
  ::TSP::Reference* _internal_mutable_user_defined_guide_storage();
  public:
  void unsafe_arena_set_allocated_user_defined_guide_storage(
      ::TSP::Reference* user_defined_guide_storage);
  ::TSP::Reference* unsafe_arena_release_user_defined_guide_storage();

  // optional .TSD.FillArchive background_fill = 30;
  bool has_background_fill() const;
  private:
  bool _internal_has_background_fill() const;
  public:
  void clear_background_fill();
  const ::TSD::FillArchive& background_fill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_background_fill();
  ::TSD::FillArchive* mutable_background_fill();
  void set_allocated_background_fill(::TSD::FillArchive* background_fill);
  private:
  const ::TSD::FillArchive& _internal_background_fill() const;
  ::TSD::FillArchive* _internal_mutable_background_fill();
  public:
  void unsafe_arena_set_allocated_background_fill(
      ::TSD::FillArchive* background_fill);
  ::TSD::FillArchive* unsafe_arena_release_background_fill();

  // optional .TSP.UUID section_hyperlink_uuid = 31;
  bool has_section_hyperlink_uuid() const;
  private:
  bool _internal_has_section_hyperlink_uuid() const;
  public:
  void clear_section_hyperlink_uuid();
  const ::TSP::UUID& section_hyperlink_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_section_hyperlink_uuid();
  ::TSP::UUID* mutable_section_hyperlink_uuid();
  void set_allocated_section_hyperlink_uuid(::TSP::UUID* section_hyperlink_uuid);
  private:
  const ::TSP::UUID& _internal_section_hyperlink_uuid() const;
  ::TSP::UUID* _internal_mutable_section_hyperlink_uuid();
  public:
  void unsafe_arena_set_allocated_section_hyperlink_uuid(
      ::TSP::UUID* section_hyperlink_uuid);
  ::TSP::UUID* unsafe_arena_release_section_hyperlink_uuid();

  // optional float OBSOLETE_left_margin = 5;
  bool has_obsolete_left_margin() const;
  private:
  bool _internal_has_obsolete_left_margin() const;
  public:
  void clear_obsolete_left_margin();
  float obsolete_left_margin() const;
  void set_obsolete_left_margin(float value);
  private:
  float _internal_obsolete_left_margin() const;
  void _internal_set_obsolete_left_margin(float value);
  public:

  // optional float OBSOLETE_right_margin = 6;
  bool has_obsolete_right_margin() const;
  private:
  bool _internal_has_obsolete_right_margin() const;
  public:
  void clear_obsolete_right_margin();
  float obsolete_right_margin() const;
  void set_obsolete_right_margin(float value);
  private:
  float _internal_obsolete_right_margin() const;
  void _internal_set_obsolete_right_margin(float value);
  public:

  // optional float OBSOLETE_top_margin = 7;
  bool has_obsolete_top_margin() const;
  private:
  bool _internal_has_obsolete_top_margin() const;
  public:
  void clear_obsolete_top_margin();
  float obsolete_top_margin() const;
  void set_obsolete_top_margin(float value);
  private:
  float _internal_obsolete_top_margin() const;
  void _internal_set_obsolete_top_margin(float value);
  public:

  // optional float OBSOLETE_bottom_margin = 8;
  bool has_obsolete_bottom_margin() const;
  private:
  bool _internal_has_obsolete_bottom_margin() const;
  public:
  void clear_obsolete_bottom_margin();
  float obsolete_bottom_margin() const;
  void set_obsolete_bottom_margin(float value);
  private:
  float _internal_obsolete_bottom_margin() const;
  void _internal_set_obsolete_bottom_margin(float value);
  public:

  // optional bool OBSOLETE_shows_header = 1;
  bool has_obsolete_shows_header() const;
  private:
  bool _internal_has_obsolete_shows_header() const;
  public:
  void clear_obsolete_shows_header();
  bool obsolete_shows_header() const;
  void set_obsolete_shows_header(bool value);
  private:
  bool _internal_obsolete_shows_header() const;
  void _internal_set_obsolete_shows_header(bool value);
  public:

  // optional bool OBSOLETE_shows_footer = 2;
  bool has_obsolete_shows_footer() const;
  private:
  bool _internal_has_obsolete_shows_footer() const;
  public:
  void clear_obsolete_shows_footer();
  bool obsolete_shows_footer() const;
  void set_obsolete_shows_footer(bool value);
  private:
  bool _internal_obsolete_shows_footer() const;
  void _internal_set_obsolete_shows_footer(bool value);
  public:

  // optional bool OBSOLETE_landscape_mode = 13;
  bool has_obsolete_landscape_mode() const;
  private:
  bool _internal_has_obsolete_landscape_mode() const;
  public:
  void clear_obsolete_landscape_mode();
  bool obsolete_landscape_mode() const;
  void set_obsolete_landscape_mode(bool value);
  private:
  bool _internal_obsolete_landscape_mode() const;
  void _internal_set_obsolete_landscape_mode(bool value);
  public:

  // optional bool inherit_previous_header_footer = 17;
  bool has_inherit_previous_header_footer() const;
  private:
  bool _internal_has_inherit_previous_header_footer() const;
  public:
  void clear_inherit_previous_header_footer();
  bool inherit_previous_header_footer() const;
  void set_inherit_previous_header_footer(bool value);
  private:
  bool _internal_inherit_previous_header_footer() const;
  void _internal_set_inherit_previous_header_footer(bool value);
  public:

  // optional float OBSOLETE_header_padding = 9;
  bool has_obsolete_header_padding() const;
  private:
  bool _internal_has_obsolete_header_padding() const;
  public:
  void clear_obsolete_header_padding();
  float obsolete_header_padding() const;
  void set_obsolete_header_padding(float value);
  private:
  float _internal_obsolete_header_padding() const;
  void _internal_set_obsolete_header_padding(float value);
  public:

  // optional float OBSOLETE_footer_padding = 10;
  bool has_obsolete_footer_padding() const;
  private:
  bool _internal_has_obsolete_footer_padding() const;
  public:
  void clear_obsolete_footer_padding();
  float obsolete_footer_padding() const;
  void set_obsolete_footer_padding(float value);
  private:
  float _internal_obsolete_footer_padding() const;
  void _internal_set_obsolete_footer_padding(float value);
  public:

  // optional float OBSOLETE_paper_width = 11;
  bool has_obsolete_paper_width() const;
  private:
  bool _internal_has_obsolete_paper_width() const;
  public:
  void clear_obsolete_paper_width();
  float obsolete_paper_width() const;
  void set_obsolete_paper_width(float value);
  private:
  float _internal_obsolete_paper_width() const;
  void _internal_set_obsolete_paper_width(float value);
  public:

  // optional float OBSOLETE_paper_height = 12;
  bool has_obsolete_paper_height() const;
  private:
  bool _internal_has_obsolete_paper_height() const;
  public:
  void clear_obsolete_paper_height();
  float obsolete_paper_height() const;
  void set_obsolete_paper_height(float value);
  private:
  float _internal_obsolete_paper_height() const;
  void _internal_set_obsolete_paper_height(float value);
  public:

  // optional float OBSOLETE_header_margin = 15;
  bool has_obsolete_header_margin() const;
  private:
  bool _internal_has_obsolete_header_margin() const;
  public:
  void clear_obsolete_header_margin();
  float obsolete_header_margin() const;
  void set_obsolete_header_margin(float value);
  private:
  float _internal_obsolete_header_margin() const;
  void _internal_set_obsolete_header_margin(float value);
  public:

  // optional float OBSOLETE_footer_margin = 16;
  bool has_obsolete_footer_margin() const;
  private:
  bool _internal_has_obsolete_footer_margin() const;
  public:
  void clear_obsolete_footer_margin();
  float obsolete_footer_margin() const;
  void set_obsolete_footer_margin(float value);
  private:
  float _internal_obsolete_footer_margin() const;
  void _internal_set_obsolete_footer_margin(float value);
  public:

  // optional uint32 section_start_kind = 20;
  bool has_section_start_kind() const;
  private:
  bool _internal_has_section_start_kind() const;
  public:
  void clear_section_start_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 section_start_kind() const;
  void set_section_start_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_section_start_kind() const;
  void _internal_set_section_start_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 section_page_number_kind = 21;
  bool has_section_page_number_kind() const;
  private:
  bool _internal_has_section_page_number_kind() const;
  public:
  void clear_section_page_number_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 section_page_number_kind() const;
  void set_section_page_number_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_section_page_number_kind() const;
  void _internal_set_section_page_number_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool page_master_first_page_different = 18;
  bool has_page_master_first_page_different() const;
  private:
  bool _internal_has_page_master_first_page_different() const;
  public:
  void clear_page_master_first_page_different();
  bool page_master_first_page_different() const;
  void set_page_master_first_page_different(bool value);
  private:
  bool _internal_page_master_first_page_different() const;
  void _internal_set_page_master_first_page_different(bool value);
  public:

  // optional bool page_master_even_odd_pages_different = 19;
  bool has_page_master_even_odd_pages_different() const;
  private:
  bool _internal_has_page_master_even_odd_pages_different() const;
  public:
  void clear_page_master_even_odd_pages_different();
  bool page_master_even_odd_pages_different() const;
  void set_page_master_even_odd_pages_different(bool value);
  private:
  bool _internal_page_master_even_odd_pages_different() const;
  void _internal_set_page_master_even_odd_pages_different(bool value);
  public:

  // optional bool page_master_first_page_hides_header_footer = 28;
  bool has_page_master_first_page_hides_header_footer() const;
  private:
  bool _internal_has_page_master_first_page_hides_header_footer() const;
  public:
  void clear_page_master_first_page_hides_header_footer();
  bool page_master_first_page_hides_header_footer() const;
  void set_page_master_first_page_hides_header_footer(bool value);
  private:
  bool _internal_page_master_first_page_hides_header_footer() const;
  void _internal_set_page_master_first_page_hides_header_footer(bool value);
  public:

  // optional uint32 section_page_number_start = 22;
  bool has_section_page_number_start() const;
  private:
  bool _internal_has_section_page_number_start() const;
  public:
  void clear_section_page_number_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 section_page_number_start() const;
  void set_section_page_number_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_section_page_number_start() const;
  void _internal_set_section_page_number_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.SectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > obsolete_headers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > obsolete_footers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > obsolete_master_drawables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TSP::Reference* first_page_master_;
  ::TSP::Reference* even_page_master_;
  ::TSP::Reference* odd_page_master_;
  ::TSP::Reference* user_defined_guide_storage_;
  ::TSD::FillArchive* background_fill_;
  ::TSP::UUID* section_hyperlink_uuid_;
  float obsolete_left_margin_;
  float obsolete_right_margin_;
  float obsolete_top_margin_;
  float obsolete_bottom_margin_;
  bool obsolete_shows_header_;
  bool obsolete_shows_footer_;
  bool obsolete_landscape_mode_;
  bool inherit_previous_header_footer_;
  float obsolete_header_padding_;
  float obsolete_footer_padding_;
  float obsolete_paper_width_;
  float obsolete_paper_height_;
  float obsolete_header_margin_;
  float obsolete_footer_margin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 section_start_kind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 section_page_number_kind_;
  bool page_master_first_page_different_;
  bool page_master_even_odd_pages_different_;
  bool page_master_first_page_hides_header_footer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 section_page_number_start_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class DoublePoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.DoublePoint) */ {
 public:
  inline DoublePoint() : DoublePoint(nullptr) {}
  ~DoublePoint() override;
  explicit constexpr DoublePoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoublePoint(const DoublePoint& from);
  DoublePoint(DoublePoint&& from) noexcept
    : DoublePoint() {
    *this = ::std::move(from);
  }

  inline DoublePoint& operator=(const DoublePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoublePoint& operator=(DoublePoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoublePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoublePoint* internal_default_instance() {
    return reinterpret_cast<const DoublePoint*>(
               &_DoublePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DoublePoint& a, DoublePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(DoublePoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoublePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoublePoint* New() const final {
    return CreateMaybeMessage<DoublePoint>(nullptr);
  }

  DoublePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoublePoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoublePoint& from);
  void MergeFrom(const DoublePoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoublePoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.DoublePoint";
  }
  protected:
  explicit DoublePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:TP.DoublePoint)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class DoubleSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.DoubleSize) */ {
 public:
  inline DoubleSize() : DoubleSize(nullptr) {}
  ~DoubleSize() override;
  explicit constexpr DoubleSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleSize(const DoubleSize& from);
  DoubleSize(DoubleSize&& from) noexcept
    : DoubleSize() {
    *this = ::std::move(from);
  }

  inline DoubleSize& operator=(const DoubleSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleSize& operator=(DoubleSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoubleSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleSize* internal_default_instance() {
    return reinterpret_cast<const DoubleSize*>(
               &_DoubleSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DoubleSize& a, DoubleSize& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleSize* New() const final {
    return CreateMaybeMessage<DoubleSize>(nullptr);
  }

  DoubleSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleSize& from);
  void MergeFrom(const DoubleSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.DoubleSize";
  }
  protected:
  explicit DoubleSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // required double width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // required double height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // @@protoc_insertion_point(class_scope:TP.DoubleSize)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double width_;
  double height_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class AnchorPosArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.AnchorPosArchive) */ {
 public:
  inline AnchorPosArchive() : AnchorPosArchive(nullptr) {}
  ~AnchorPosArchive() override;
  explicit constexpr AnchorPosArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnchorPosArchive(const AnchorPosArchive& from);
  AnchorPosArchive(AnchorPosArchive&& from) noexcept
    : AnchorPosArchive() {
    *this = ::std::move(from);
  }

  inline AnchorPosArchive& operator=(const AnchorPosArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnchorPosArchive& operator=(AnchorPosArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnchorPosArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnchorPosArchive* internal_default_instance() {
    return reinterpret_cast<const AnchorPosArchive*>(
               &_AnchorPosArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AnchorPosArchive& a, AnchorPosArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AnchorPosArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnchorPosArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnchorPosArchive* New() const final {
    return CreateMaybeMessage<AnchorPosArchive>(nullptr);
  }

  AnchorPosArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnchorPosArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnchorPosArchive& from);
  void MergeFrom(const AnchorPosArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnchorPosArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.AnchorPosArchive";
  }
  protected:
  explicit AnchorPosArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentFieldNumber = 1,
    kPositionFieldNumber = 2,
    kDrawableUuidPathFieldNumber = 3,
    kDoublePositionFieldNumber = 4,
  };
  // optional .TSP.Reference attachment = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  PROTOBUF_DEPRECATED void clear_attachment();
  PROTOBUF_DEPRECATED const ::TSP::Reference& attachment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_attachment();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_attachment();
  PROTOBUF_DEPRECATED void set_allocated_attachment(::TSP::Reference* attachment);
  private:
  const ::TSP::Reference& _internal_attachment() const;
  ::TSP::Reference* _internal_mutable_attachment();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_attachment(
      ::TSP::Reference* attachment);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_attachment();

  // optional .TSP.Point position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::TSP::Point& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Point* release_position();
  ::TSP::Point* mutable_position();
  void set_allocated_position(::TSP::Point* position);
  private:
  const ::TSP::Point& _internal_position() const;
  ::TSP::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::TSP::Point* position);
  ::TSP::Point* unsafe_arena_release_position();

  // optional .TSP.UUIDPath drawable_uuid_path = 3;
  bool has_drawable_uuid_path() const;
  private:
  bool _internal_has_drawable_uuid_path() const;
  public:
  void clear_drawable_uuid_path();
  const ::TSP::UUIDPath& drawable_uuid_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_drawable_uuid_path();
  ::TSP::UUIDPath* mutable_drawable_uuid_path();
  void set_allocated_drawable_uuid_path(::TSP::UUIDPath* drawable_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_drawable_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_drawable_uuid_path();
  public:
  void unsafe_arena_set_allocated_drawable_uuid_path(
      ::TSP::UUIDPath* drawable_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_drawable_uuid_path();

  // optional .TP.DoublePoint double_position = 4;
  bool has_double_position() const;
  private:
  bool _internal_has_double_position() const;
  public:
  void clear_double_position();
  const ::TP::DoublePoint& double_position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TP::DoublePoint* release_double_position();
  ::TP::DoublePoint* mutable_double_position();
  void set_allocated_double_position(::TP::DoublePoint* double_position);
  private:
  const ::TP::DoublePoint& _internal_double_position() const;
  ::TP::DoublePoint* _internal_mutable_double_position();
  public:
  void unsafe_arena_set_allocated_double_position(
      ::TP::DoublePoint* double_position);
  ::TP::DoublePoint* unsafe_arena_release_double_position();

  // @@protoc_insertion_point(class_scope:TP.AnchorPosArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* attachment_;
  ::TSP::Point* position_;
  ::TSP::UUIDPath* drawable_uuid_path_;
  ::TP::DoublePoint* double_position_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class TargetHintArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.TargetHintArchive) */ {
 public:
  inline TargetHintArchive() : TargetHintArchive(nullptr) {}
  ~TargetHintArchive() override;
  explicit constexpr TargetHintArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetHintArchive(const TargetHintArchive& from);
  TargetHintArchive(TargetHintArchive&& from) noexcept
    : TargetHintArchive() {
    *this = ::std::move(from);
  }

  inline TargetHintArchive& operator=(const TargetHintArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetHintArchive& operator=(TargetHintArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetHintArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetHintArchive* internal_default_instance() {
    return reinterpret_cast<const TargetHintArchive*>(
               &_TargetHintArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TargetHintArchive& a, TargetHintArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetHintArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetHintArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetHintArchive* New() const final {
    return CreateMaybeMessage<TargetHintArchive>(nullptr);
  }

  TargetHintArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetHintArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetHintArchive& from);
  void MergeFrom(const TargetHintArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetHintArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.TargetHintArchive";
  }
  protected:
  explicit TargetHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameOriginFieldNumber = 1,
    kFrameSizeFieldNumber = 2,
    kRangeFieldNumber = 3,
    kAnchoredRangeFieldNumber = 5,
    kDoubleOriginFieldNumber = 8,
    kDoubleSizeFieldNumber = 9,
    kNextWidowPullsDownFromCharIndexFieldNumber = 4,
    kColumnCountFieldNumber = 6,
    kLineFragmentCountFieldNumber = 7,
    kEndOfLayoutFieldNumber = 10,
    kLastLineIsEmptyAndHasListLabelFieldNumber = 11,
    kTextIsVerticalFieldNumber = 12,
    kTerminatedByBreakFieldNumber = 13,
  };
  // optional .TSP.Point frame_origin = 1;
  bool has_frame_origin() const;
  private:
  bool _internal_has_frame_origin() const;
  public:
  void clear_frame_origin();
  const ::TSP::Point& frame_origin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Point* release_frame_origin();
  ::TSP::Point* mutable_frame_origin();
  void set_allocated_frame_origin(::TSP::Point* frame_origin);
  private:
  const ::TSP::Point& _internal_frame_origin() const;
  ::TSP::Point* _internal_mutable_frame_origin();
  public:
  void unsafe_arena_set_allocated_frame_origin(
      ::TSP::Point* frame_origin);
  ::TSP::Point* unsafe_arena_release_frame_origin();

  // optional .TSP.Size frame_size = 2;
  bool has_frame_size() const;
  private:
  bool _internal_has_frame_size() const;
  public:
  void clear_frame_size();
  const ::TSP::Size& frame_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_frame_size();
  ::TSP::Size* mutable_frame_size();
  void set_allocated_frame_size(::TSP::Size* frame_size);
  private:
  const ::TSP::Size& _internal_frame_size() const;
  ::TSP::Size* _internal_mutable_frame_size();
  public:
  void unsafe_arena_set_allocated_frame_size(
      ::TSP::Size* frame_size);
  ::TSP::Size* unsafe_arena_release_frame_size();

  // optional .TSP.Range range = 3;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSP::Range& range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_range();
  ::TSP::Range* mutable_range();
  void set_allocated_range(::TSP::Range* range);
  private:
  const ::TSP::Range& _internal_range() const;
  ::TSP::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSP::Range* range);
  ::TSP::Range* unsafe_arena_release_range();

  // optional .TSP.Range anchored_range = 5;
  bool has_anchored_range() const;
  private:
  bool _internal_has_anchored_range() const;
  public:
  void clear_anchored_range();
  const ::TSP::Range& anchored_range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_anchored_range();
  ::TSP::Range* mutable_anchored_range();
  void set_allocated_anchored_range(::TSP::Range* anchored_range);
  private:
  const ::TSP::Range& _internal_anchored_range() const;
  ::TSP::Range* _internal_mutable_anchored_range();
  public:
  void unsafe_arena_set_allocated_anchored_range(
      ::TSP::Range* anchored_range);
  ::TSP::Range* unsafe_arena_release_anchored_range();

  // optional .TP.DoublePoint double_origin = 8;
  bool has_double_origin() const;
  private:
  bool _internal_has_double_origin() const;
  public:
  void clear_double_origin();
  const ::TP::DoublePoint& double_origin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TP::DoublePoint* release_double_origin();
  ::TP::DoublePoint* mutable_double_origin();
  void set_allocated_double_origin(::TP::DoublePoint* double_origin);
  private:
  const ::TP::DoublePoint& _internal_double_origin() const;
  ::TP::DoublePoint* _internal_mutable_double_origin();
  public:
  void unsafe_arena_set_allocated_double_origin(
      ::TP::DoublePoint* double_origin);
  ::TP::DoublePoint* unsafe_arena_release_double_origin();

  // optional .TP.DoubleSize double_size = 9;
  bool has_double_size() const;
  private:
  bool _internal_has_double_size() const;
  public:
  void clear_double_size();
  const ::TP::DoubleSize& double_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TP::DoubleSize* release_double_size();
  ::TP::DoubleSize* mutable_double_size();
  void set_allocated_double_size(::TP::DoubleSize* double_size);
  private:
  const ::TP::DoubleSize& _internal_double_size() const;
  ::TP::DoubleSize* _internal_mutable_double_size();
  public:
  void unsafe_arena_set_allocated_double_size(
      ::TP::DoubleSize* double_size);
  ::TP::DoubleSize* unsafe_arena_release_double_size();

  // optional uint32 next_widow_pulls_down_from_char_index = 4;
  bool has_next_widow_pulls_down_from_char_index() const;
  private:
  bool _internal_has_next_widow_pulls_down_from_char_index() const;
  public:
  void clear_next_widow_pulls_down_from_char_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_widow_pulls_down_from_char_index() const;
  void set_next_widow_pulls_down_from_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_widow_pulls_down_from_char_index() const;
  void _internal_set_next_widow_pulls_down_from_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 column_count = 6;
  bool has_column_count() const;
  private:
  bool _internal_has_column_count() const;
  public:
  void clear_column_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count() const;
  void set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_count() const;
  void _internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 line_fragment_count = 7;
  bool has_line_fragment_count() const;
  private:
  bool _internal_has_line_fragment_count() const;
  public:
  void clear_line_fragment_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 line_fragment_count() const;
  void set_line_fragment_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_line_fragment_count() const;
  void _internal_set_line_fragment_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool end_of_layout = 10;
  bool has_end_of_layout() const;
  private:
  bool _internal_has_end_of_layout() const;
  public:
  void clear_end_of_layout();
  bool end_of_layout() const;
  void set_end_of_layout(bool value);
  private:
  bool _internal_end_of_layout() const;
  void _internal_set_end_of_layout(bool value);
  public:

  // optional bool last_line_is_empty_and_has_list_label = 11;
  bool has_last_line_is_empty_and_has_list_label() const;
  private:
  bool _internal_has_last_line_is_empty_and_has_list_label() const;
  public:
  void clear_last_line_is_empty_and_has_list_label();
  bool last_line_is_empty_and_has_list_label() const;
  void set_last_line_is_empty_and_has_list_label(bool value);
  private:
  bool _internal_last_line_is_empty_and_has_list_label() const;
  void _internal_set_last_line_is_empty_and_has_list_label(bool value);
  public:

  // optional bool text_is_vertical = 12;
  bool has_text_is_vertical() const;
  private:
  bool _internal_has_text_is_vertical() const;
  public:
  void clear_text_is_vertical();
  bool text_is_vertical() const;
  void set_text_is_vertical(bool value);
  private:
  bool _internal_text_is_vertical() const;
  void _internal_set_text_is_vertical(bool value);
  public:

  // optional bool terminated_by_break = 13;
  bool has_terminated_by_break() const;
  private:
  bool _internal_has_terminated_by_break() const;
  public:
  void clear_terminated_by_break();
  bool terminated_by_break() const;
  void set_terminated_by_break(bool value);
  private:
  bool _internal_terminated_by_break() const;
  void _internal_set_terminated_by_break(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TP.TargetHintArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Point* frame_origin_;
  ::TSP::Size* frame_size_;
  ::TSP::Range* range_;
  ::TSP::Range* anchored_range_;
  ::TP::DoublePoint* double_origin_;
  ::TP::DoubleSize* double_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_widow_pulls_down_from_char_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 line_fragment_count_;
  bool end_of_layout_;
  bool last_line_is_empty_and_has_list_label_;
  bool text_is_vertical_;
  bool terminated_by_break_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class PageHintArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.PageHintArchive) */ {
 public:
  inline PageHintArchive() : PageHintArchive(nullptr) {}
  ~PageHintArchive() override;
  explicit constexpr PageHintArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageHintArchive(const PageHintArchive& from);
  PageHintArchive(PageHintArchive&& from) noexcept
    : PageHintArchive() {
    *this = ::std::move(from);
  }

  inline PageHintArchive& operator=(const PageHintArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageHintArchive& operator=(PageHintArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageHintArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageHintArchive* internal_default_instance() {
    return reinterpret_cast<const PageHintArchive*>(
               &_PageHintArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PageHintArchive& a, PageHintArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PageHintArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageHintArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PageHintArchive* New() const final {
    return CreateMaybeMessage<PageHintArchive>(nullptr);
  }

  PageHintArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PageHintArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PageHintArchive& from);
  void MergeFrom(const PageHintArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageHintArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.PageHintArchive";
  }
  protected:
  explicit PageHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PageHintArchive_PageKind PageKind;
  static constexpr PageKind kPageKindNone =
    PageHintArchive_PageKind_kPageKindNone;
  static constexpr PageKind kPageKindText =
    PageHintArchive_PageKind_kPageKindText;
  static constexpr PageKind kPageKindFiller =
    PageHintArchive_PageKind_kPageKindFiller;
  static constexpr PageKind kPageKindOrphan =
    PageHintArchive_PageKind_kPageKindOrphan;
  static constexpr PageKind kPageKindEndnote =
    PageHintArchive_PageKind_kPageKindEndnote;
  static constexpr PageKind kPageKindDirty =
    PageHintArchive_PageKind_kPageKindDirty;
  static constexpr PageKind kTPPageKindPageLayout =
    PageHintArchive_PageKind_kTPPageKindPageLayout;
  static inline bool PageKind_IsValid(int value) {
    return PageHintArchive_PageKind_IsValid(value);
  }
  static constexpr PageKind PageKind_MIN =
    PageHintArchive_PageKind_PageKind_MIN;
  static constexpr PageKind PageKind_MAX =
    PageHintArchive_PageKind_PageKind_MAX;
  static constexpr int PageKind_ARRAYSIZE =
    PageHintArchive_PageKind_PageKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PageKind_descriptor() {
    return PageHintArchive_PageKind_descriptor();
  }
  template<typename T>
  static inline const std::string& PageKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PageKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PageKind_Name.");
    return PageHintArchive_PageKind_Name(enum_t_value);
  }
  static inline bool PageKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PageKind* value) {
    return PageHintArchive_PageKind_Parse(name, value);
  }

  typedef PageHintArchive_PageSide PageSide;
  static constexpr PageSide kTPPageSideUnknown =
    PageHintArchive_PageSide_kTPPageSideUnknown;
  static constexpr PageSide kTPPageSideLeft =
    PageHintArchive_PageSide_kTPPageSideLeft;
  static constexpr PageSide kTPPageSideRight =
    PageHintArchive_PageSide_kTPPageSideRight;
  static inline bool PageSide_IsValid(int value) {
    return PageHintArchive_PageSide_IsValid(value);
  }
  static constexpr PageSide PageSide_MIN =
    PageHintArchive_PageSide_PageSide_MIN;
  static constexpr PageSide PageSide_MAX =
    PageHintArchive_PageSide_PageSide_MAX;
  static constexpr int PageSide_ARRAYSIZE =
    PageHintArchive_PageSide_PageSide_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PageSide_descriptor() {
    return PageHintArchive_PageSide_descriptor();
  }
  template<typename T>
  static inline const std::string& PageSide_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PageSide>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PageSide_Name.");
    return PageHintArchive_PageSide_Name(enum_t_value);
  }
  static inline bool PageSide_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PageSide* value) {
    return PageHintArchive_PageSide_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetHintsFieldNumber = 2,
    kAnchoredAttachmentsMapFieldNumber = 8,
    kChildHintsFieldNumber = 12,
    kPartitionedAttachmentUuidsFieldNumber = 13,
    kTextFlowsFieldNumber = 14,
    kFlowHintsFieldNumber = 15,
    kFlowTopicNumbersFieldNumber = 16,
    kFootnoteAutoNumberRangeFieldNumber = 3,
    kFootnoteLayoutRangeFieldNumber = 4,
    kFirstChildHintFieldNumber = 6,
    kLastChildHintFieldNumber = 7,
    kTopicNumbersFieldNumber = 9,
    kPageKindFieldNumber = 1,
    kVersionNumberFieldNumber = 10,
    kPlatformIdFieldNumber = 11,
    kPageSideFieldNumber = 17,
    kPageColumnFieldNumber = 18,
    kPageRowFieldNumber = 19,
  };
  // repeated .TP.TargetHintArchive target_hints = 2;
  int target_hints_size() const;
  private:
  int _internal_target_hints_size() const;
  public:
  void clear_target_hints();
  ::TP::TargetHintArchive* mutable_target_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >*
      mutable_target_hints();
  private:
  const ::TP::TargetHintArchive& _internal_target_hints(int index) const;
  ::TP::TargetHintArchive* _internal_add_target_hints();
  public:
  const ::TP::TargetHintArchive& target_hints(int index) const;
  ::TP::TargetHintArchive* add_target_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >&
      target_hints() const;

  // repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
  int anchored_attachments_map_size() const;
  private:
  int _internal_anchored_attachments_map_size() const;
  public:
  void clear_anchored_attachments_map();
  ::TP::AnchorPosArchive* mutable_anchored_attachments_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::AnchorPosArchive >*
      mutable_anchored_attachments_map();
  private:
  const ::TP::AnchorPosArchive& _internal_anchored_attachments_map(int index) const;
  ::TP::AnchorPosArchive* _internal_add_anchored_attachments_map();
  public:
  const ::TP::AnchorPosArchive& anchored_attachments_map(int index) const;
  ::TP::AnchorPosArchive* add_anchored_attachments_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::AnchorPosArchive >&
      anchored_attachments_map() const;

  // repeated .TSP.Reference child_hints = 12;
  int child_hints_size() const;
  private:
  int _internal_child_hints_size() const;
  public:
  void clear_child_hints();
  ::TSP::Reference* mutable_child_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_child_hints();
  private:
  const ::TSP::Reference& _internal_child_hints(int index) const;
  ::TSP::Reference* _internal_add_child_hints();
  public:
  const ::TSP::Reference& child_hints(int index) const;
  ::TSP::Reference* add_child_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      child_hints() const;

  // repeated .TSP.UUID partitioned_attachment_uuids = 13;
  int partitioned_attachment_uuids_size() const;
  private:
  int _internal_partitioned_attachment_uuids_size() const;
  public:
  void clear_partitioned_attachment_uuids();
  ::TSP::UUID* mutable_partitioned_attachment_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_partitioned_attachment_uuids();
  private:
  const ::TSP::UUID& _internal_partitioned_attachment_uuids(int index) const;
  ::TSP::UUID* _internal_add_partitioned_attachment_uuids();
  public:
  const ::TSP::UUID& partitioned_attachment_uuids(int index) const;
  ::TSP::UUID* add_partitioned_attachment_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      partitioned_attachment_uuids() const;

  // repeated .TSP.Reference text_flows = 14;
  int text_flows_size() const;
  private:
  int _internal_text_flows_size() const;
  public:
  void clear_text_flows();
  ::TSP::Reference* mutable_text_flows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_text_flows();
  private:
  const ::TSP::Reference& _internal_text_flows(int index) const;
  ::TSP::Reference* _internal_add_text_flows();
  public:
  const ::TSP::Reference& text_flows(int index) const;
  ::TSP::Reference* add_text_flows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      text_flows() const;

  // repeated .TP.TargetHintArchive flow_hints = 15;
  int flow_hints_size() const;
  private:
  int _internal_flow_hints_size() const;
  public:
  void clear_flow_hints();
  ::TP::TargetHintArchive* mutable_flow_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >*
      mutable_flow_hints();
  private:
  const ::TP::TargetHintArchive& _internal_flow_hints(int index) const;
  ::TP::TargetHintArchive* _internal_add_flow_hints();
  public:
  const ::TP::TargetHintArchive& flow_hints(int index) const;
  ::TP::TargetHintArchive* add_flow_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >&
      flow_hints() const;

  // repeated .TP.TopicNumberHintsArchive flow_topic_numbers = 16;
  int flow_topic_numbers_size() const;
  private:
  int _internal_flow_topic_numbers_size() const;
  public:
  void clear_flow_topic_numbers();
  ::TP::TopicNumberHintsArchive* mutable_flow_topic_numbers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberHintsArchive >*
      mutable_flow_topic_numbers();
  private:
  const ::TP::TopicNumberHintsArchive& _internal_flow_topic_numbers(int index) const;
  ::TP::TopicNumberHintsArchive* _internal_add_flow_topic_numbers();
  public:
  const ::TP::TopicNumberHintsArchive& flow_topic_numbers(int index) const;
  ::TP::TopicNumberHintsArchive* add_flow_topic_numbers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberHintsArchive >&
      flow_topic_numbers() const;

  // optional .TSP.Range footnote_auto_number_range = 3;
  bool has_footnote_auto_number_range() const;
  private:
  bool _internal_has_footnote_auto_number_range() const;
  public:
  void clear_footnote_auto_number_range();
  const ::TSP::Range& footnote_auto_number_range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_footnote_auto_number_range();
  ::TSP::Range* mutable_footnote_auto_number_range();
  void set_allocated_footnote_auto_number_range(::TSP::Range* footnote_auto_number_range);
  private:
  const ::TSP::Range& _internal_footnote_auto_number_range() const;
  ::TSP::Range* _internal_mutable_footnote_auto_number_range();
  public:
  void unsafe_arena_set_allocated_footnote_auto_number_range(
      ::TSP::Range* footnote_auto_number_range);
  ::TSP::Range* unsafe_arena_release_footnote_auto_number_range();

  // optional .TSP.Range footnote_layout_range = 4;
  bool has_footnote_layout_range() const;
  private:
  bool _internal_has_footnote_layout_range() const;
  public:
  void clear_footnote_layout_range();
  const ::TSP::Range& footnote_layout_range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_footnote_layout_range();
  ::TSP::Range* mutable_footnote_layout_range();
  void set_allocated_footnote_layout_range(::TSP::Range* footnote_layout_range);
  private:
  const ::TSP::Range& _internal_footnote_layout_range() const;
  ::TSP::Range* _internal_mutable_footnote_layout_range();
  public:
  void unsafe_arena_set_allocated_footnote_layout_range(
      ::TSP::Range* footnote_layout_range);
  ::TSP::Range* unsafe_arena_release_footnote_layout_range();

  // optional .TSP.Reference first_child_hint = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_first_child_hint() const;
  private:
  bool _internal_has_first_child_hint() const;
  public:
  PROTOBUF_DEPRECATED void clear_first_child_hint();
  PROTOBUF_DEPRECATED const ::TSP::Reference& first_child_hint() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_first_child_hint();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_first_child_hint();
  PROTOBUF_DEPRECATED void set_allocated_first_child_hint(::TSP::Reference* first_child_hint);
  private:
  const ::TSP::Reference& _internal_first_child_hint() const;
  ::TSP::Reference* _internal_mutable_first_child_hint();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_first_child_hint(
      ::TSP::Reference* first_child_hint);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_first_child_hint();

  // optional .TSP.Reference last_child_hint = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_last_child_hint() const;
  private:
  bool _internal_has_last_child_hint() const;
  public:
  PROTOBUF_DEPRECATED void clear_last_child_hint();
  PROTOBUF_DEPRECATED const ::TSP::Reference& last_child_hint() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_last_child_hint();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_last_child_hint();
  PROTOBUF_DEPRECATED void set_allocated_last_child_hint(::TSP::Reference* last_child_hint);
  private:
  const ::TSP::Reference& _internal_last_child_hint() const;
  ::TSP::Reference* _internal_mutable_last_child_hint();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_last_child_hint(
      ::TSP::Reference* last_child_hint);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_last_child_hint();

  // optional .TP.TopicNumberHintsArchive topic_numbers = 9;
  bool has_topic_numbers() const;
  private:
  bool _internal_has_topic_numbers() const;
  public:
  void clear_topic_numbers();
  const ::TP::TopicNumberHintsArchive& topic_numbers() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TP::TopicNumberHintsArchive* release_topic_numbers();
  ::TP::TopicNumberHintsArchive* mutable_topic_numbers();
  void set_allocated_topic_numbers(::TP::TopicNumberHintsArchive* topic_numbers);
  private:
  const ::TP::TopicNumberHintsArchive& _internal_topic_numbers() const;
  ::TP::TopicNumberHintsArchive* _internal_mutable_topic_numbers();
  public:
  void unsafe_arena_set_allocated_topic_numbers(
      ::TP::TopicNumberHintsArchive* topic_numbers);
  ::TP::TopicNumberHintsArchive* unsafe_arena_release_topic_numbers();

  // optional .TP.PageHintArchive.PageKind page_kind = 1;
  bool has_page_kind() const;
  private:
  bool _internal_has_page_kind() const;
  public:
  void clear_page_kind();
  ::TP::PageHintArchive_PageKind page_kind() const;
  void set_page_kind(::TP::PageHintArchive_PageKind value);
  private:
  ::TP::PageHintArchive_PageKind _internal_page_kind() const;
  void _internal_set_page_kind(::TP::PageHintArchive_PageKind value);
  public:

  // optional uint32 version_number = 10;
  bool has_version_number() const;
  private:
  bool _internal_has_version_number() const;
  public:
  void clear_version_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_number() const;
  void set_version_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version_number() const;
  void _internal_set_version_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 platform_id = 11;
  bool has_platform_id() const;
  private:
  bool _internal_has_platform_id() const;
  public:
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .TP.PageHintArchive.PageSide page_side = 17 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_page_side() const;
  private:
  bool _internal_has_page_side() const;
  public:
  PROTOBUF_DEPRECATED void clear_page_side();
  PROTOBUF_DEPRECATED ::TP::PageHintArchive_PageSide page_side() const;
  PROTOBUF_DEPRECATED void set_page_side(::TP::PageHintArchive_PageSide value);
  private:
  ::TP::PageHintArchive_PageSide _internal_page_side() const;
  void _internal_set_page_side(::TP::PageHintArchive_PageSide value);
  public:

  // optional uint32 page_column = 18;
  bool has_page_column() const;
  private:
  bool _internal_has_page_column() const;
  public:
  void clear_page_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_column() const;
  void set_page_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_column() const;
  void _internal_set_page_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 page_row = 19;
  bool has_page_row() const;
  private:
  bool _internal_has_page_row() const;
  public:
  void clear_page_row();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_row() const;
  void set_page_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_row() const;
  void _internal_set_page_row(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.PageHintArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive > target_hints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::AnchorPosArchive > anchored_attachments_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > child_hints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > partitioned_attachment_uuids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > text_flows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive > flow_hints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberHintsArchive > flow_topic_numbers_;
  ::TSP::Range* footnote_auto_number_range_;
  ::TSP::Range* footnote_layout_range_;
  ::TSP::Reference* first_child_hint_;
  ::TSP::Reference* last_child_hint_;
  ::TP::TopicNumberHintsArchive* topic_numbers_;
  int page_kind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_id_;
  int page_side_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_column_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_row_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class NullChildHintArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.NullChildHintArchive) */ {
 public:
  inline NullChildHintArchive() : NullChildHintArchive(nullptr) {}
  ~NullChildHintArchive() override;
  explicit constexpr NullChildHintArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NullChildHintArchive(const NullChildHintArchive& from);
  NullChildHintArchive(NullChildHintArchive&& from) noexcept
    : NullChildHintArchive() {
    *this = ::std::move(from);
  }

  inline NullChildHintArchive& operator=(const NullChildHintArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullChildHintArchive& operator=(NullChildHintArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NullChildHintArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NullChildHintArchive* internal_default_instance() {
    return reinterpret_cast<const NullChildHintArchive*>(
               &_NullChildHintArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(NullChildHintArchive& a, NullChildHintArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NullChildHintArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullChildHintArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NullChildHintArchive* New() const final {
    return CreateMaybeMessage<NullChildHintArchive>(nullptr);
  }

  NullChildHintArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NullChildHintArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NullChildHintArchive& from);
  void MergeFrom(const NullChildHintArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NullChildHintArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.NullChildHintArchive";
  }
  protected:
  explicit NullChildHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TP.NullChildHintArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionHintArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SectionHintArchive) */ {
 public:
  inline SectionHintArchive() : SectionHintArchive(nullptr) {}
  ~SectionHintArchive() override;
  explicit constexpr SectionHintArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionHintArchive(const SectionHintArchive& from);
  SectionHintArchive(SectionHintArchive&& from) noexcept
    : SectionHintArchive() {
    *this = ::std::move(from);
  }

  inline SectionHintArchive& operator=(const SectionHintArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionHintArchive& operator=(SectionHintArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionHintArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionHintArchive* internal_default_instance() {
    return reinterpret_cast<const SectionHintArchive*>(
               &_SectionHintArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SectionHintArchive& a, SectionHintArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionHintArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionHintArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionHintArchive* New() const final {
    return CreateMaybeMessage<SectionHintArchive>(nullptr);
  }

  SectionHintArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionHintArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionHintArchive& from);
  void MergeFrom(const SectionHintArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionHintArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SectionHintArchive";
  }
  protected:
  explicit SectionHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageHintsFieldNumber = 1,
    kStartPageIndexFieldNumber = 2,
  };
  // repeated .TP.PageHintArchive page_hints = 1;
  int page_hints_size() const;
  private:
  int _internal_page_hints_size() const;
  public:
  void clear_page_hints();
  ::TP::PageHintArchive* mutable_page_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageHintArchive >*
      mutable_page_hints();
  private:
  const ::TP::PageHintArchive& _internal_page_hints(int index) const;
  ::TP::PageHintArchive* _internal_add_page_hints();
  public:
  const ::TP::PageHintArchive& page_hints(int index) const;
  ::TP::PageHintArchive* add_page_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageHintArchive >&
      page_hints() const;

  // optional uint32 start_page_index = 2;
  bool has_start_page_index() const;
  private:
  bool _internal_has_start_page_index() const;
  public:
  void clear_start_page_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_page_index() const;
  void set_start_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_page_index() const;
  void _internal_set_start_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.SectionHintArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageHintArchive > page_hints_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_page_index_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class TextboxHintArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.TextboxHintArchive) */ {
 public:
  inline TextboxHintArchive() : TextboxHintArchive(nullptr) {}
  ~TextboxHintArchive() override;
  explicit constexpr TextboxHintArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextboxHintArchive(const TextboxHintArchive& from);
  TextboxHintArchive(TextboxHintArchive&& from) noexcept
    : TextboxHintArchive() {
    *this = ::std::move(from);
  }

  inline TextboxHintArchive& operator=(const TextboxHintArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextboxHintArchive& operator=(TextboxHintArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextboxHintArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextboxHintArchive* internal_default_instance() {
    return reinterpret_cast<const TextboxHintArchive*>(
               &_TextboxHintArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TextboxHintArchive& a, TextboxHintArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TextboxHintArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextboxHintArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextboxHintArchive* New() const final {
    return CreateMaybeMessage<TextboxHintArchive>(nullptr);
  }

  TextboxHintArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextboxHintArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextboxHintArchive& from);
  void MergeFrom(const TextboxHintArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextboxHintArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.TextboxHintArchive";
  }
  protected:
  explicit TextboxHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // required .TSP.Range range = 1;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSP::Range& range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_range();
  ::TSP::Range* mutable_range();
  void set_allocated_range(::TSP::Range* range);
  private:
  const ::TSP::Range& _internal_range() const;
  ::TSP::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSP::Range* range);
  ::TSP::Range* unsafe_arena_release_range();

  // required .TSP.Size size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TSP::Size& size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_size();
  ::TSP::Size* mutable_size();
  void set_allocated_size(::TSP::Size* size);
  private:
  const ::TSP::Size& _internal_size() const;
  ::TSP::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TSP::Size* size);
  ::TSP::Size* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:TP.TextboxHintArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Range* range_;
  ::TSP::Size* size_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class TopicNumberEntryArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.TopicNumberEntryArchive) */ {
 public:
  inline TopicNumberEntryArchive() : TopicNumberEntryArchive(nullptr) {}
  ~TopicNumberEntryArchive() override;
  explicit constexpr TopicNumberEntryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicNumberEntryArchive(const TopicNumberEntryArchive& from);
  TopicNumberEntryArchive(TopicNumberEntryArchive&& from) noexcept
    : TopicNumberEntryArchive() {
    *this = ::std::move(from);
  }

  inline TopicNumberEntryArchive& operator=(const TopicNumberEntryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicNumberEntryArchive& operator=(TopicNumberEntryArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicNumberEntryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicNumberEntryArchive* internal_default_instance() {
    return reinterpret_cast<const TopicNumberEntryArchive*>(
               &_TopicNumberEntryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TopicNumberEntryArchive& a, TopicNumberEntryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicNumberEntryArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicNumberEntryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopicNumberEntryArchive* New() const final {
    return CreateMaybeMessage<TopicNumberEntryArchive>(nullptr);
  }

  TopicNumberEntryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopicNumberEntryArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopicNumberEntryArchive& from);
  void MergeFrom(const TopicNumberEntryArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicNumberEntryArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.TopicNumberEntryArchive";
  }
  protected:
  explicit TopicNumberEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicNumberFieldNumber = 2,
    kCharacterIndexFieldNumber = 3,
    kListStyleFieldNumber = 1,
  };
  // repeated uint32 topic_number = 2;
  int topic_number_size() const;
  private:
  int _internal_topic_number_size() const;
  public:
  void clear_topic_number();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_topic_number(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_topic_number() const;
  void _internal_add_topic_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_topic_number();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 topic_number(int index) const;
  void set_topic_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_topic_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      topic_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_topic_number();

  // repeated uint32 character_index = 3;
  int character_index_size() const;
  private:
  int _internal_character_index_size() const;
  public:
  void clear_character_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_character_index() const;
  void _internal_add_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_character_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 character_index(int index) const;
  void set_character_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      character_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_character_index();

  // required .TSP.Reference list_style = 1;
  bool has_list_style() const;
  private:
  bool _internal_has_list_style() const;
  public:
  void clear_list_style();
  const ::TSP::Reference& list_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_list_style();
  ::TSP::Reference* mutable_list_style();
  void set_allocated_list_style(::TSP::Reference* list_style);
  private:
  const ::TSP::Reference& _internal_list_style() const;
  ::TSP::Reference* _internal_mutable_list_style();
  public:
  void unsafe_arena_set_allocated_list_style(
      ::TSP::Reference* list_style);
  ::TSP::Reference* unsafe_arena_release_list_style();

  // @@protoc_insertion_point(class_scope:TP.TopicNumberEntryArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > topic_number_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > character_index_;
  ::TSP::Reference* list_style_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class TopicNumberHintsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.TopicNumberHintsArchive) */ {
 public:
  inline TopicNumberHintsArchive() : TopicNumberHintsArchive(nullptr) {}
  ~TopicNumberHintsArchive() override;
  explicit constexpr TopicNumberHintsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicNumberHintsArchive(const TopicNumberHintsArchive& from);
  TopicNumberHintsArchive(TopicNumberHintsArchive&& from) noexcept
    : TopicNumberHintsArchive() {
    *this = ::std::move(from);
  }

  inline TopicNumberHintsArchive& operator=(const TopicNumberHintsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicNumberHintsArchive& operator=(TopicNumberHintsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicNumberHintsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicNumberHintsArchive* internal_default_instance() {
    return reinterpret_cast<const TopicNumberHintsArchive*>(
               &_TopicNumberHintsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TopicNumberHintsArchive& a, TopicNumberHintsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicNumberHintsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicNumberHintsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopicNumberHintsArchive* New() const final {
    return CreateMaybeMessage<TopicNumberHintsArchive>(nullptr);
  }

  TopicNumberHintsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopicNumberHintsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopicNumberHintsArchive& from);
  void MergeFrom(const TopicNumberHintsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicNumberHintsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.TopicNumberHintsArchive";
  }
  protected:
  explicit TopicNumberHintsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicNumbersMapFieldNumber = 2,
    kCharIndexFieldNumber = 1,
    kValidThroughCharIndexFieldNumber = 3,
  };
  // repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
  int topic_numbers_map_size() const;
  private:
  int _internal_topic_numbers_map_size() const;
  public:
  void clear_topic_numbers_map();
  ::TP::TopicNumberEntryArchive* mutable_topic_numbers_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberEntryArchive >*
      mutable_topic_numbers_map();
  private:
  const ::TP::TopicNumberEntryArchive& _internal_topic_numbers_map(int index) const;
  ::TP::TopicNumberEntryArchive* _internal_add_topic_numbers_map();
  public:
  const ::TP::TopicNumberEntryArchive& topic_numbers_map(int index) const;
  ::TP::TopicNumberEntryArchive* add_topic_numbers_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberEntryArchive >&
      topic_numbers_map() const;

  // optional uint32 charIndex = 1;
  bool has_charindex() const;
  private:
  bool _internal_has_charindex() const;
  public:
  void clear_charindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 charindex() const;
  void set_charindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_charindex() const;
  void _internal_set_charindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 valid_through_char_index = 3;
  bool has_valid_through_char_index() const;
  private:
  bool _internal_has_valid_through_char_index() const;
  public:
  void clear_valid_through_char_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 valid_through_char_index() const;
  void set_valid_through_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_valid_through_char_index() const;
  void _internal_set_valid_through_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.TopicNumberHintsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberEntryArchive > topic_numbers_map_;
  ::PROTOBUF_NAMESPACE_ID::uint32 charindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 valid_through_char_index_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class LayoutStateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.LayoutStateArchive) */ {
 public:
  inline LayoutStateArchive() : LayoutStateArchive(nullptr) {}
  ~LayoutStateArchive() override;
  explicit constexpr LayoutStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutStateArchive(const LayoutStateArchive& from);
  LayoutStateArchive(LayoutStateArchive&& from) noexcept
    : LayoutStateArchive() {
    *this = ::std::move(from);
  }

  inline LayoutStateArchive& operator=(const LayoutStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutStateArchive& operator=(LayoutStateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutStateArchive* internal_default_instance() {
    return reinterpret_cast<const LayoutStateArchive*>(
               &_LayoutStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(LayoutStateArchive& a, LayoutStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutStateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayoutStateArchive* New() const final {
    return CreateMaybeMessage<LayoutStateArchive>(nullptr);
  }

  LayoutStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayoutStateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LayoutStateArchive& from);
  void MergeFrom(const LayoutStateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutStateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.LayoutStateArchive";
  }
  protected:
  explicit LayoutStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionHintsFieldNumber = 5,
    kMissingFontsFieldNumber = 7,
    kSectionIndexFieldNumber = 1,
    kSectionPageIndexFieldNumber = 2,
    kDocumentPageIndexFieldNumber = 3,
    kLastPageCountFieldNumber = 4,
    kBodyLengthFieldNumber = 6,
    kOsVersionFieldNumber = 8,
  };
  // repeated .TP.SectionHintArchive section_hints = 5;
  int section_hints_size() const;
  private:
  int _internal_section_hints_size() const;
  public:
  void clear_section_hints();
  ::TP::SectionHintArchive* mutable_section_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionHintArchive >*
      mutable_section_hints();
  private:
  const ::TP::SectionHintArchive& _internal_section_hints(int index) const;
  ::TP::SectionHintArchive* _internal_add_section_hints();
  public:
  const ::TP::SectionHintArchive& section_hints(int index) const;
  ::TP::SectionHintArchive* add_section_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionHintArchive >&
      section_hints() const;

  // repeated string missing_fonts = 7;
  int missing_fonts_size() const;
  private:
  int _internal_missing_fonts_size() const;
  public:
  void clear_missing_fonts();
  const std::string& missing_fonts(int index) const;
  std::string* mutable_missing_fonts(int index);
  void set_missing_fonts(int index, const std::string& value);
  void set_missing_fonts(int index, std::string&& value);
  void set_missing_fonts(int index, const char* value);
  void set_missing_fonts(int index, const char* value, size_t size);
  std::string* add_missing_fonts();
  void add_missing_fonts(const std::string& value);
  void add_missing_fonts(std::string&& value);
  void add_missing_fonts(const char* value);
  void add_missing_fonts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& missing_fonts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_missing_fonts();
  private:
  const std::string& _internal_missing_fonts(int index) const;
  std::string* _internal_add_missing_fonts();
  public:

  // optional uint32 section_index = 1;
  bool has_section_index() const;
  private:
  bool _internal_has_section_index() const;
  public:
  void clear_section_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 section_index() const;
  void set_section_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_section_index() const;
  void _internal_set_section_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 section_page_index = 2;
  bool has_section_page_index() const;
  private:
  bool _internal_has_section_page_index() const;
  public:
  void clear_section_page_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 section_page_index() const;
  void set_section_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_section_page_index() const;
  void _internal_set_section_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 document_page_index = 3;
  bool has_document_page_index() const;
  private:
  bool _internal_has_document_page_index() const;
  public:
  void clear_document_page_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 document_page_index() const;
  void set_document_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_document_page_index() const;
  void _internal_set_document_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 last_page_count = 4;
  bool has_last_page_count() const;
  private:
  bool _internal_has_last_page_count() const;
  public:
  void clear_last_page_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_page_count() const;
  void set_last_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_page_count() const;
  void _internal_set_last_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 body_length = 6;
  bool has_body_length() const;
  private:
  bool _internal_has_body_length() const;
  public:
  void clear_body_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 body_length() const;
  void set_body_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_body_length() const;
  void _internal_set_body_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 os_version = 8;
  bool has_os_version() const;
  private:
  bool _internal_has_os_version() const;
  public:
  void clear_os_version();
  ::PROTOBUF_NAMESPACE_ID::int32 os_version() const;
  void set_os_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_os_version() const;
  void _internal_set_os_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.LayoutStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionHintArchive > section_hints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> missing_fonts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 section_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 section_page_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 document_page_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_page_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 body_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_version_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class CanvasSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.CanvasSelectionArchive) */ {
 public:
  inline CanvasSelectionArchive() : CanvasSelectionArchive(nullptr) {}
  ~CanvasSelectionArchive() override;
  explicit constexpr CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanvasSelectionArchive(const CanvasSelectionArchive& from);
  CanvasSelectionArchive(CanvasSelectionArchive&& from) noexcept
    : CanvasSelectionArchive() {
    *this = ::std::move(from);
  }

  inline CanvasSelectionArchive& operator=(const CanvasSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanvasSelectionArchive& operator=(CanvasSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanvasSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanvasSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const CanvasSelectionArchive*>(
               &_CanvasSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CanvasSelectionArchive& a, CanvasSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CanvasSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanvasSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanvasSelectionArchive* New() const final {
    return CreateMaybeMessage<CanvasSelectionArchive>(nullptr);
  }

  CanvasSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanvasSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanvasSelectionArchive& from);
  void MergeFrom(const CanvasSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanvasSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.CanvasSelectionArchive";
  }
  protected:
  explicit CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 5,
    kExcludedInfosFieldNumber = 6,
    kAdditionalInfosFieldNumber = 7,
    kRangeFieldNumber = 2,
    kContainerFieldNumber = 8,
    kTypeFieldNumber = 1,
    kStyleInsertionBehaviorFieldNumber = 3,
    kCaretAffinityFieldNumber = 4,
  };
  // repeated .TSP.Reference infos = 5;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::TSP::Reference* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_infos();
  private:
  const ::TSP::Reference& _internal_infos(int index) const;
  ::TSP::Reference* _internal_add_infos();
  public:
  const ::TSP::Reference& infos(int index) const;
  ::TSP::Reference* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      infos() const;

  // repeated .TSP.Reference excluded_infos = 6;
  int excluded_infos_size() const;
  private:
  int _internal_excluded_infos_size() const;
  public:
  void clear_excluded_infos();
  ::TSP::Reference* mutable_excluded_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_excluded_infos();
  private:
  const ::TSP::Reference& _internal_excluded_infos(int index) const;
  ::TSP::Reference* _internal_add_excluded_infos();
  public:
  const ::TSP::Reference& excluded_infos(int index) const;
  ::TSP::Reference* add_excluded_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      excluded_infos() const;

  // repeated .TSP.Reference additional_infos = 7;
  int additional_infos_size() const;
  private:
  int _internal_additional_infos_size() const;
  public:
  void clear_additional_infos();
  ::TSP::Reference* mutable_additional_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_additional_infos();
  private:
  const ::TSP::Reference& _internal_additional_infos(int index) const;
  ::TSP::Reference* _internal_add_additional_infos();
  public:
  const ::TSP::Reference& additional_infos(int index) const;
  ::TSP::Reference* add_additional_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      additional_infos() const;

  // required .TSP.Range range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSP::Range& range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_range();
  ::TSP::Range* mutable_range();
  void set_allocated_range(::TSP::Range* range);
  private:
  const ::TSP::Range& _internal_range() const;
  ::TSP::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSP::Range* range);
  ::TSP::Range* unsafe_arena_release_range();

  // optional .TSP.Reference container = 8;
  bool has_container() const;
  private:
  bool _internal_has_container() const;
  public:
  void clear_container();
  const ::TSP::Reference& container() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_container();
  ::TSP::Reference* mutable_container();
  void set_allocated_container(::TSP::Reference* container);
  private:
  const ::TSP::Reference& _internal_container() const;
  ::TSP::Reference* _internal_mutable_container();
  public:
  void unsafe_arena_set_allocated_container(
      ::TSP::Reference* container);
  ::TSP::Reference* unsafe_arena_release_container();

  // required .TSWP.SelectionType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSWP::SelectionType type() const;
  void set_type(::TSWP::SelectionType value);
  private:
  ::TSWP::SelectionType _internal_type() const;
  void _internal_set_type(::TSWP::SelectionType value);
  public:

  // required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
  bool has_style_insertion_behavior() const;
  private:
  bool _internal_has_style_insertion_behavior() const;
  public:
  void clear_style_insertion_behavior();
  ::TSWP::StyleInsertionBehavior style_insertion_behavior() const;
  void set_style_insertion_behavior(::TSWP::StyleInsertionBehavior value);
  private:
  ::TSWP::StyleInsertionBehavior _internal_style_insertion_behavior() const;
  void _internal_set_style_insertion_behavior(::TSWP::StyleInsertionBehavior value);
  public:

  // required .TSWP.CaretAffinity caret_affinity = 4;
  bool has_caret_affinity() const;
  private:
  bool _internal_has_caret_affinity() const;
  public:
  void clear_caret_affinity();
  ::TSWP::CaretAffinity caret_affinity() const;
  void set_caret_affinity(::TSWP::CaretAffinity value);
  private:
  ::TSWP::CaretAffinity _internal_caret_affinity() const;
  void _internal_set_caret_affinity(::TSWP::CaretAffinity value);
  public:

  // @@protoc_insertion_point(class_scope:TP.CanvasSelectionArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > infos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > excluded_infos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > additional_infos_;
  ::TSP::Range* range_;
  ::TSP::Reference* container_;
  int type_;
  int style_insertion_behavior_;
  int caret_affinity_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class AllFootnoteSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.AllFootnoteSelectionArchive) */ {
 public:
  inline AllFootnoteSelectionArchive() : AllFootnoteSelectionArchive(nullptr) {}
  ~AllFootnoteSelectionArchive() override;
  explicit constexpr AllFootnoteSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllFootnoteSelectionArchive(const AllFootnoteSelectionArchive& from);
  AllFootnoteSelectionArchive(AllFootnoteSelectionArchive&& from) noexcept
    : AllFootnoteSelectionArchive() {
    *this = ::std::move(from);
  }

  inline AllFootnoteSelectionArchive& operator=(const AllFootnoteSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllFootnoteSelectionArchive& operator=(AllFootnoteSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllFootnoteSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllFootnoteSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const AllFootnoteSelectionArchive*>(
               &_AllFootnoteSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(AllFootnoteSelectionArchive& a, AllFootnoteSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AllFootnoteSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllFootnoteSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllFootnoteSelectionArchive* New() const final {
    return CreateMaybeMessage<AllFootnoteSelectionArchive>(nullptr);
  }

  AllFootnoteSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllFootnoteSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllFootnoteSelectionArchive& from);
  void MergeFrom(const AllFootnoteSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllFootnoteSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.AllFootnoteSelectionArchive";
  }
  protected:
  explicit AllFootnoteSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TP.AllFootnoteSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class UIStateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.UIStateArchive) */ {
 public:
  inline UIStateArchive() : UIStateArchive(nullptr) {}
  ~UIStateArchive() override;
  explicit constexpr UIStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UIStateArchive(const UIStateArchive& from);
  UIStateArchive(UIStateArchive&& from) noexcept
    : UIStateArchive() {
    *this = ::std::move(from);
  }

  inline UIStateArchive& operator=(const UIStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UIStateArchive& operator=(UIStateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UIStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UIStateArchive* internal_default_instance() {
    return reinterpret_cast<const UIStateArchive*>(
               &_UIStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UIStateArchive& a, UIStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UIStateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UIStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UIStateArchive* New() const final {
    return CreateMaybeMessage<UIStateArchive>(nullptr);
  }

  UIStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UIStateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UIStateArchive& from);
  void MergeFrom(const UIStateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UIStateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.UIStateArchive";
  }
  protected:
  explicit UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartUiStateFieldNumber = 8,
    kSelectedInspectorSwitchSegmentIdentifierFieldNumber = 18,
    kFilteredAuthorNameFieldNumber = 30,
    kVisibleRectOriginFieldNumber = 2,
    kSelectionFieldNumber = 4,
    kSelectionModelFieldNumber = 5,
    kVisibleRectSizeFieldNumber = 7,
    kWindowFrameOriginFieldNumber = 16,
    kWindowFrameSizeFieldNumber = 17,
    kCompatibilitySelectionPathFieldNumber = 25,
    kSelectionPathFieldNumber = 29,
    kFilteredAuthorFieldNumber = 32,
    kFreehandDrawingToolkitStateFieldNumber = 35,
    kSelectionPathTransformerFieldNumber = 37,
    kPencilAnnotationUiStateFieldNumber = 41,
    kOBSOLETEViewScaleFieldNumber = 1,
    kOBSOLETELandscapeFieldNumber = 3,
    kMasterDrawablesSelectableFieldNumber = 6,
    kLayoutBordersVisibleFieldNumber = 10,
    kWordCountHudVisibleFieldNumber = 11,
    kViewScaleModeFieldNumber = 14,
    kWordCountHudTypeFieldNumber = 20,
    kWordCountHudXPositionFieldNumber = 21,
    kShowsPageNavigatorFieldNumber = 13,
    kInspectorHiddenFieldNumber = 19,
    kShouldShowCommentSidebarFieldNumber = 24,
    kChangeTrackingPausedFieldNumber = 28,
    kWordCountHudYPositionFieldNumber = 22,
    kPageViewStateFieldNumber = 33,
    kPresentationAutoScrollSpeedFieldNumber = 36,
    kPencilAnnotationsHiddenFieldNumber = 34,
    kShowsTocNavigatorFieldNumber = 38,
    kEditingDisabledFieldNumber = 40,
    kViewScaleFieldNumber = 15,
    kRulerVisibleFieldNumber = 9,
    kShowsCommentsFieldNumber = 12,
    kShowUserDefinedGuidesFieldNumber = 23,
    kShowsCtmarkupFieldNumber = 26,
    kViewScaleModeIosFieldNumber = 31,
    kShowsCtdeletionsFieldNumber = 27,
    kShowUserDefinedMasterGuidesFieldNumber = 39,
  };
  // repeated .TSCH.ChartUIState chart_ui_state = 8;
  int chart_ui_state_size() const;
  private:
  int _internal_chart_ui_state_size() const;
  public:
  void clear_chart_ui_state();
  ::TSCH::ChartUIState* mutable_chart_ui_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >*
      mutable_chart_ui_state();
  private:
  const ::TSCH::ChartUIState& _internal_chart_ui_state(int index) const;
  ::TSCH::ChartUIState* _internal_add_chart_ui_state();
  public:
  const ::TSCH::ChartUIState& chart_ui_state(int index) const;
  ::TSCH::ChartUIState* add_chart_ui_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >&
      chart_ui_state() const;

  // optional string selected_inspector_switch_segment_identifier = 18;
  bool has_selected_inspector_switch_segment_identifier() const;
  private:
  bool _internal_has_selected_inspector_switch_segment_identifier() const;
  public:
  void clear_selected_inspector_switch_segment_identifier();
  const std::string& selected_inspector_switch_segment_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selected_inspector_switch_segment_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selected_inspector_switch_segment_identifier();
  std::string* release_selected_inspector_switch_segment_identifier();
  void set_allocated_selected_inspector_switch_segment_identifier(std::string* selected_inspector_switch_segment_identifier);
  private:
  const std::string& _internal_selected_inspector_switch_segment_identifier() const;
  void _internal_set_selected_inspector_switch_segment_identifier(const std::string& value);
  std::string* _internal_mutable_selected_inspector_switch_segment_identifier();
  public:

  // optional string filtered_author_name = 30;
  bool has_filtered_author_name() const;
  private:
  bool _internal_has_filtered_author_name() const;
  public:
  void clear_filtered_author_name();
  const std::string& filtered_author_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filtered_author_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filtered_author_name();
  std::string* release_filtered_author_name();
  void set_allocated_filtered_author_name(std::string* filtered_author_name);
  private:
  const std::string& _internal_filtered_author_name() const;
  void _internal_set_filtered_author_name(const std::string& value);
  std::string* _internal_mutable_filtered_author_name();
  public:

  // optional .TSP.Point visible_rect_origin = 2;
  bool has_visible_rect_origin() const;
  private:
  bool _internal_has_visible_rect_origin() const;
  public:
  void clear_visible_rect_origin();
  const ::TSP::Point& visible_rect_origin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Point* release_visible_rect_origin();
  ::TSP::Point* mutable_visible_rect_origin();
  void set_allocated_visible_rect_origin(::TSP::Point* visible_rect_origin);
  private:
  const ::TSP::Point& _internal_visible_rect_origin() const;
  ::TSP::Point* _internal_mutable_visible_rect_origin();
  public:
  void unsafe_arena_set_allocated_visible_rect_origin(
      ::TSP::Point* visible_rect_origin);
  ::TSP::Point* unsafe_arena_release_visible_rect_origin();

  // optional .TSP.Reference selection = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  PROTOBUF_DEPRECATED void clear_selection();
  PROTOBUF_DEPRECATED const ::TSP::Reference& selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_selection();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_selection();
  PROTOBUF_DEPRECATED void set_allocated_selection(::TSP::Reference* selection);
  private:
  const ::TSP::Reference& _internal_selection() const;
  ::TSP::Reference* _internal_mutable_selection();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_selection(
      ::TSP::Reference* selection);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_selection();

  // optional .TSP.Reference selection_model = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_selection_model() const;
  private:
  bool _internal_has_selection_model() const;
  public:
  PROTOBUF_DEPRECATED void clear_selection_model();
  PROTOBUF_DEPRECATED const ::TSP::Reference& selection_model() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_selection_model();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_selection_model();
  PROTOBUF_DEPRECATED void set_allocated_selection_model(::TSP::Reference* selection_model);
  private:
  const ::TSP::Reference& _internal_selection_model() const;
  ::TSP::Reference* _internal_mutable_selection_model();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_selection_model(
      ::TSP::Reference* selection_model);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_selection_model();

  // optional .TSP.Size visible_rect_size = 7;
  bool has_visible_rect_size() const;
  private:
  bool _internal_has_visible_rect_size() const;
  public:
  void clear_visible_rect_size();
  const ::TSP::Size& visible_rect_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_visible_rect_size();
  ::TSP::Size* mutable_visible_rect_size();
  void set_allocated_visible_rect_size(::TSP::Size* visible_rect_size);
  private:
  const ::TSP::Size& _internal_visible_rect_size() const;
  ::TSP::Size* _internal_mutable_visible_rect_size();
  public:
  void unsafe_arena_set_allocated_visible_rect_size(
      ::TSP::Size* visible_rect_size);
  ::TSP::Size* unsafe_arena_release_visible_rect_size();

  // optional .TSP.Point window_frame_origin = 16;
  bool has_window_frame_origin() const;
  private:
  bool _internal_has_window_frame_origin() const;
  public:
  void clear_window_frame_origin();
  const ::TSP::Point& window_frame_origin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Point* release_window_frame_origin();
  ::TSP::Point* mutable_window_frame_origin();
  void set_allocated_window_frame_origin(::TSP::Point* window_frame_origin);
  private:
  const ::TSP::Point& _internal_window_frame_origin() const;
  ::TSP::Point* _internal_mutable_window_frame_origin();
  public:
  void unsafe_arena_set_allocated_window_frame_origin(
      ::TSP::Point* window_frame_origin);
  ::TSP::Point* unsafe_arena_release_window_frame_origin();

  // optional .TSP.Size window_frame_size = 17;
  bool has_window_frame_size() const;
  private:
  bool _internal_has_window_frame_size() const;
  public:
  void clear_window_frame_size();
  const ::TSP::Size& window_frame_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_window_frame_size();
  ::TSP::Size* mutable_window_frame_size();
  void set_allocated_window_frame_size(::TSP::Size* window_frame_size);
  private:
  const ::TSP::Size& _internal_window_frame_size() const;
  ::TSP::Size* _internal_mutable_window_frame_size();
  public:
  void unsafe_arena_set_allocated_window_frame_size(
      ::TSP::Size* window_frame_size);
  ::TSP::Size* unsafe_arena_release_window_frame_size();

  // optional .TSK.SelectionPathArchive compatibility_selection_path = 25;
  bool has_compatibility_selection_path() const;
  private:
  bool _internal_has_compatibility_selection_path() const;
  public:
  void clear_compatibility_selection_path();
  const ::TSK::SelectionPathArchive& compatibility_selection_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::SelectionPathArchive* release_compatibility_selection_path();
  ::TSK::SelectionPathArchive* mutable_compatibility_selection_path();
  void set_allocated_compatibility_selection_path(::TSK::SelectionPathArchive* compatibility_selection_path);
  private:
  const ::TSK::SelectionPathArchive& _internal_compatibility_selection_path() const;
  ::TSK::SelectionPathArchive* _internal_mutable_compatibility_selection_path();
  public:
  void unsafe_arena_set_allocated_compatibility_selection_path(
      ::TSK::SelectionPathArchive* compatibility_selection_path);
  ::TSK::SelectionPathArchive* unsafe_arena_release_compatibility_selection_path();

  // optional .TSK.SelectionPathArchive selection_path = 29;
  bool has_selection_path() const;
  private:
  bool _internal_has_selection_path() const;
  public:
  void clear_selection_path();
  const ::TSK::SelectionPathArchive& selection_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::SelectionPathArchive* release_selection_path();
  ::TSK::SelectionPathArchive* mutable_selection_path();
  void set_allocated_selection_path(::TSK::SelectionPathArchive* selection_path);
  private:
  const ::TSK::SelectionPathArchive& _internal_selection_path() const;
  ::TSK::SelectionPathArchive* _internal_mutable_selection_path();
  public:
  void unsafe_arena_set_allocated_selection_path(
      ::TSK::SelectionPathArchive* selection_path);
  ::TSK::SelectionPathArchive* unsafe_arena_release_selection_path();

  // optional .TSP.Reference filtered_author = 32;
  bool has_filtered_author() const;
  private:
  bool _internal_has_filtered_author() const;
  public:
  void clear_filtered_author();
  const ::TSP::Reference& filtered_author() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_filtered_author();
  ::TSP::Reference* mutable_filtered_author();
  void set_allocated_filtered_author(::TSP::Reference* filtered_author);
  private:
  const ::TSP::Reference& _internal_filtered_author() const;
  ::TSP::Reference* _internal_mutable_filtered_author();
  public:
  void unsafe_arena_set_allocated_filtered_author(
      ::TSP::Reference* filtered_author);
  ::TSP::Reference* unsafe_arena_release_filtered_author();

  // optional .TSP.Reference freehand_drawing_toolkit_state = 35;
  bool has_freehand_drawing_toolkit_state() const;
  private:
  bool _internal_has_freehand_drawing_toolkit_state() const;
  public:
  void clear_freehand_drawing_toolkit_state();
  const ::TSP::Reference& freehand_drawing_toolkit_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_freehand_drawing_toolkit_state();
  ::TSP::Reference* mutable_freehand_drawing_toolkit_state();
  void set_allocated_freehand_drawing_toolkit_state(::TSP::Reference* freehand_drawing_toolkit_state);
  private:
  const ::TSP::Reference& _internal_freehand_drawing_toolkit_state() const;
  ::TSP::Reference* _internal_mutable_freehand_drawing_toolkit_state();
  public:
  void unsafe_arena_set_allocated_freehand_drawing_toolkit_state(
      ::TSP::Reference* freehand_drawing_toolkit_state);
  ::TSP::Reference* unsafe_arena_release_freehand_drawing_toolkit_state();

  // optional .TSP.Reference selection_path_transformer = 37;
  bool has_selection_path_transformer() const;
  private:
  bool _internal_has_selection_path_transformer() const;
  public:
  void clear_selection_path_transformer();
  const ::TSP::Reference& selection_path_transformer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_selection_path_transformer();
  ::TSP::Reference* mutable_selection_path_transformer();
  void set_allocated_selection_path_transformer(::TSP::Reference* selection_path_transformer);
  private:
  const ::TSP::Reference& _internal_selection_path_transformer() const;
  ::TSP::Reference* _internal_mutable_selection_path_transformer();
  public:
  void unsafe_arena_set_allocated_selection_path_transformer(
      ::TSP::Reference* selection_path_transformer);
  ::TSP::Reference* unsafe_arena_release_selection_path_transformer();

  // optional .TSP.Reference pencil_annotation_ui_state = 41;
  bool has_pencil_annotation_ui_state() const;
  private:
  bool _internal_has_pencil_annotation_ui_state() const;
  public:
  void clear_pencil_annotation_ui_state();
  const ::TSP::Reference& pencil_annotation_ui_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_pencil_annotation_ui_state();
  ::TSP::Reference* mutable_pencil_annotation_ui_state();
  void set_allocated_pencil_annotation_ui_state(::TSP::Reference* pencil_annotation_ui_state);
  private:
  const ::TSP::Reference& _internal_pencil_annotation_ui_state() const;
  ::TSP::Reference* _internal_mutable_pencil_annotation_ui_state();
  public:
  void unsafe_arena_set_allocated_pencil_annotation_ui_state(
      ::TSP::Reference* pencil_annotation_ui_state);
  ::TSP::Reference* unsafe_arena_release_pencil_annotation_ui_state();

  // optional float OBSOLETE_view_scale = 1;
  bool has_obsolete_view_scale() const;
  private:
  bool _internal_has_obsolete_view_scale() const;
  public:
  void clear_obsolete_view_scale();
  float obsolete_view_scale() const;
  void set_obsolete_view_scale(float value);
  private:
  float _internal_obsolete_view_scale() const;
  void _internal_set_obsolete_view_scale(float value);
  public:

  // optional bool OBSOLETE_landscape = 3;
  bool has_obsolete_landscape() const;
  private:
  bool _internal_has_obsolete_landscape() const;
  public:
  void clear_obsolete_landscape();
  bool obsolete_landscape() const;
  void set_obsolete_landscape(bool value);
  private:
  bool _internal_obsolete_landscape() const;
  void _internal_set_obsolete_landscape(bool value);
  public:

  // optional bool master_drawables_selectable = 6;
  bool has_master_drawables_selectable() const;
  private:
  bool _internal_has_master_drawables_selectable() const;
  public:
  void clear_master_drawables_selectable();
  bool master_drawables_selectable() const;
  void set_master_drawables_selectable(bool value);
  private:
  bool _internal_master_drawables_selectable() const;
  void _internal_set_master_drawables_selectable(bool value);
  public:

  // optional bool layout_borders_visible = 10 [default = false];
  bool has_layout_borders_visible() const;
  private:
  bool _internal_has_layout_borders_visible() const;
  public:
  void clear_layout_borders_visible();
  bool layout_borders_visible() const;
  void set_layout_borders_visible(bool value);
  private:
  bool _internal_layout_borders_visible() const;
  void _internal_set_layout_borders_visible(bool value);
  public:

  // optional bool word_count_hud_visible = 11 [default = false];
  bool has_word_count_hud_visible() const;
  private:
  bool _internal_has_word_count_hud_visible() const;
  public:
  void clear_word_count_hud_visible();
  bool word_count_hud_visible() const;
  void set_word_count_hud_visible(bool value);
  private:
  bool _internal_word_count_hud_visible() const;
  void _internal_set_word_count_hud_visible(bool value);
  public:

  // optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
  bool has_view_scale_mode() const;
  private:
  bool _internal_has_view_scale_mode() const;
  public:
  void clear_view_scale_mode();
  ::TP::ViewScaleMode view_scale_mode() const;
  void set_view_scale_mode(::TP::ViewScaleMode value);
  private:
  ::TP::ViewScaleMode _internal_view_scale_mode() const;
  void _internal_set_view_scale_mode(::TP::ViewScaleMode value);
  public:

  // optional uint32 word_count_hud_type = 20;
  bool has_word_count_hud_type() const;
  private:
  bool _internal_has_word_count_hud_type() const;
  public:
  void clear_word_count_hud_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 word_count_hud_type() const;
  void set_word_count_hud_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_word_count_hud_type() const;
  void _internal_set_word_count_hud_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float word_count_hud_x_position = 21;
  bool has_word_count_hud_x_position() const;
  private:
  bool _internal_has_word_count_hud_x_position() const;
  public:
  void clear_word_count_hud_x_position();
  float word_count_hud_x_position() const;
  void set_word_count_hud_x_position(float value);
  private:
  float _internal_word_count_hud_x_position() const;
  void _internal_set_word_count_hud_x_position(float value);
  public:

  // optional bool shows_page_navigator = 13 [default = false];
  bool has_shows_page_navigator() const;
  private:
  bool _internal_has_shows_page_navigator() const;
  public:
  void clear_shows_page_navigator();
  bool shows_page_navigator() const;
  void set_shows_page_navigator(bool value);
  private:
  bool _internal_shows_page_navigator() const;
  void _internal_set_shows_page_navigator(bool value);
  public:

  // optional bool inspector_hidden = 19;
  bool has_inspector_hidden() const;
  private:
  bool _internal_has_inspector_hidden() const;
  public:
  void clear_inspector_hidden();
  bool inspector_hidden() const;
  void set_inspector_hidden(bool value);
  private:
  bool _internal_inspector_hidden() const;
  void _internal_set_inspector_hidden(bool value);
  public:

  // optional bool should_show_comment_sidebar = 24 [default = false];
  bool has_should_show_comment_sidebar() const;
  private:
  bool _internal_has_should_show_comment_sidebar() const;
  public:
  void clear_should_show_comment_sidebar();
  bool should_show_comment_sidebar() const;
  void set_should_show_comment_sidebar(bool value);
  private:
  bool _internal_should_show_comment_sidebar() const;
  void _internal_set_should_show_comment_sidebar(bool value);
  public:

  // optional bool change_tracking_paused = 28 [default = false];
  bool has_change_tracking_paused() const;
  private:
  bool _internal_has_change_tracking_paused() const;
  public:
  void clear_change_tracking_paused();
  bool change_tracking_paused() const;
  void set_change_tracking_paused(bool value);
  private:
  bool _internal_change_tracking_paused() const;
  void _internal_set_change_tracking_paused(bool value);
  public:

  // optional float word_count_hud_y_position = 22;
  bool has_word_count_hud_y_position() const;
  private:
  bool _internal_has_word_count_hud_y_position() const;
  public:
  void clear_word_count_hud_y_position();
  float word_count_hud_y_position() const;
  void set_word_count_hud_y_position(float value);
  private:
  float _internal_word_count_hud_y_position() const;
  void _internal_set_word_count_hud_y_position(float value);
  public:

  // optional .TP.PageViewState page_view_state = 33;
  bool has_page_view_state() const;
  private:
  bool _internal_has_page_view_state() const;
  public:
  void clear_page_view_state();
  ::TP::PageViewState page_view_state() const;
  void set_page_view_state(::TP::PageViewState value);
  private:
  ::TP::PageViewState _internal_page_view_state() const;
  void _internal_set_page_view_state(::TP::PageViewState value);
  public:

  // optional float presentation_auto_scroll_speed = 36;
  bool has_presentation_auto_scroll_speed() const;
  private:
  bool _internal_has_presentation_auto_scroll_speed() const;
  public:
  void clear_presentation_auto_scroll_speed();
  float presentation_auto_scroll_speed() const;
  void set_presentation_auto_scroll_speed(float value);
  private:
  float _internal_presentation_auto_scroll_speed() const;
  void _internal_set_presentation_auto_scroll_speed(float value);
  public:

  // optional bool pencil_annotations_hidden = 34 [default = false];
  bool has_pencil_annotations_hidden() const;
  private:
  bool _internal_has_pencil_annotations_hidden() const;
  public:
  void clear_pencil_annotations_hidden();
  bool pencil_annotations_hidden() const;
  void set_pencil_annotations_hidden(bool value);
  private:
  bool _internal_pencil_annotations_hidden() const;
  void _internal_set_pencil_annotations_hidden(bool value);
  public:

  // optional bool shows_toc_navigator = 38 [default = false];
  bool has_shows_toc_navigator() const;
  private:
  bool _internal_has_shows_toc_navigator() const;
  public:
  void clear_shows_toc_navigator();
  bool shows_toc_navigator() const;
  void set_shows_toc_navigator(bool value);
  private:
  bool _internal_shows_toc_navigator() const;
  void _internal_set_shows_toc_navigator(bool value);
  public:

  // optional bool editing_disabled = 40;
  bool has_editing_disabled() const;
  private:
  bool _internal_has_editing_disabled() const;
  public:
  void clear_editing_disabled();
  bool editing_disabled() const;
  void set_editing_disabled(bool value);
  private:
  bool _internal_editing_disabled() const;
  void _internal_set_editing_disabled(bool value);
  public:

  // optional float view_scale = 15 [default = 1.25];
  bool has_view_scale() const;
  private:
  bool _internal_has_view_scale() const;
  public:
  void clear_view_scale();
  float view_scale() const;
  void set_view_scale(float value);
  private:
  float _internal_view_scale() const;
  void _internal_set_view_scale(float value);
  public:

  // optional bool ruler_visible = 9 [default = true];
  bool has_ruler_visible() const;
  private:
  bool _internal_has_ruler_visible() const;
  public:
  void clear_ruler_visible();
  bool ruler_visible() const;
  void set_ruler_visible(bool value);
  private:
  bool _internal_ruler_visible() const;
  void _internal_set_ruler_visible(bool value);
  public:

  // optional bool shows_comments = 12 [default = true];
  bool has_shows_comments() const;
  private:
  bool _internal_has_shows_comments() const;
  public:
  void clear_shows_comments();
  bool shows_comments() const;
  void set_shows_comments(bool value);
  private:
  bool _internal_shows_comments() const;
  void _internal_set_shows_comments(bool value);
  public:

  // optional bool show_user_defined_guides = 23 [default = true];
  bool has_show_user_defined_guides() const;
  private:
  bool _internal_has_show_user_defined_guides() const;
  public:
  void clear_show_user_defined_guides();
  bool show_user_defined_guides() const;
  void set_show_user_defined_guides(bool value);
  private:
  bool _internal_show_user_defined_guides() const;
  void _internal_set_show_user_defined_guides(bool value);
  public:

  // optional bool shows_ctmarkup = 26 [default = true];
  bool has_shows_ctmarkup() const;
  private:
  bool _internal_has_shows_ctmarkup() const;
  public:
  void clear_shows_ctmarkup();
  bool shows_ctmarkup() const;
  void set_shows_ctmarkup(bool value);
  private:
  bool _internal_shows_ctmarkup() const;
  void _internal_set_shows_ctmarkup(bool value);
  public:

  // optional .TP.ViewScaleModeiOS view_scale_mode_ios = 31 [default = ViewScaleModeiOS_UserDefined];
  bool has_view_scale_mode_ios() const;
  private:
  bool _internal_has_view_scale_mode_ios() const;
  public:
  void clear_view_scale_mode_ios();
  ::TP::ViewScaleModeiOS view_scale_mode_ios() const;
  void set_view_scale_mode_ios(::TP::ViewScaleModeiOS value);
  private:
  ::TP::ViewScaleModeiOS _internal_view_scale_mode_ios() const;
  void _internal_set_view_scale_mode_ios(::TP::ViewScaleModeiOS value);
  public:

  // optional bool shows_ctdeletions = 27 [default = true];
  bool has_shows_ctdeletions() const;
  private:
  bool _internal_has_shows_ctdeletions() const;
  public:
  void clear_shows_ctdeletions();
  bool shows_ctdeletions() const;
  void set_shows_ctdeletions(bool value);
  private:
  bool _internal_shows_ctdeletions() const;
  void _internal_set_shows_ctdeletions(bool value);
  public:

  // optional bool show_user_defined_master_guides = 39 [default = true];
  bool has_show_user_defined_master_guides() const;
  private:
  bool _internal_has_show_user_defined_master_guides() const;
  public:
  void clear_show_user_defined_master_guides();
  bool show_user_defined_master_guides() const;
  void set_show_user_defined_master_guides(bool value);
  private:
  bool _internal_show_user_defined_master_guides() const;
  void _internal_set_show_user_defined_master_guides(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TP.UIStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState > chart_ui_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selected_inspector_switch_segment_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filtered_author_name_;
  ::TSP::Point* visible_rect_origin_;
  ::TSP::Reference* selection_;
  ::TSP::Reference* selection_model_;
  ::TSP::Size* visible_rect_size_;
  ::TSP::Point* window_frame_origin_;
  ::TSP::Size* window_frame_size_;
  ::TSK::SelectionPathArchive* compatibility_selection_path_;
  ::TSK::SelectionPathArchive* selection_path_;
  ::TSP::Reference* filtered_author_;
  ::TSP::Reference* freehand_drawing_toolkit_state_;
  ::TSP::Reference* selection_path_transformer_;
  ::TSP::Reference* pencil_annotation_ui_state_;
  float obsolete_view_scale_;
  bool obsolete_landscape_;
  bool master_drawables_selectable_;
  bool layout_borders_visible_;
  bool word_count_hud_visible_;
  int view_scale_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 word_count_hud_type_;
  float word_count_hud_x_position_;
  bool shows_page_navigator_;
  bool inspector_hidden_;
  bool should_show_comment_sidebar_;
  bool change_tracking_paused_;
  float word_count_hud_y_position_;
  int page_view_state_;
  float presentation_auto_scroll_speed_;
  bool pencil_annotations_hidden_;
  bool shows_toc_navigator_;
  bool editing_disabled_;
  float view_scale_;
  bool ruler_visible_;
  bool shows_comments_;
  bool show_user_defined_guides_;
  bool shows_ctmarkup_;
  int view_scale_mode_ios_;
  bool shows_ctdeletions_;
  bool show_user_defined_master_guides_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class ViewStateRootArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.ViewStateRootArchive) */ {
 public:
  inline ViewStateRootArchive() : ViewStateRootArchive(nullptr) {}
  ~ViewStateRootArchive() override;
  explicit constexpr ViewStateRootArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewStateRootArchive(const ViewStateRootArchive& from);
  ViewStateRootArchive(ViewStateRootArchive&& from) noexcept
    : ViewStateRootArchive() {
    *this = ::std::move(from);
  }

  inline ViewStateRootArchive& operator=(const ViewStateRootArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewStateRootArchive& operator=(ViewStateRootArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewStateRootArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewStateRootArchive* internal_default_instance() {
    return reinterpret_cast<const ViewStateRootArchive*>(
               &_ViewStateRootArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ViewStateRootArchive& a, ViewStateRootArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewStateRootArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewStateRootArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewStateRootArchive* New() const final {
    return CreateMaybeMessage<ViewStateRootArchive>(nullptr);
  }

  ViewStateRootArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewStateRootArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewStateRootArchive& from);
  void MergeFrom(const ViewStateRootArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewStateRootArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.ViewStateRootArchive";
  }
  protected:
  explicit ViewStateRootArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutStateFieldNumber = 1,
    kViewStateFieldNumber = 2,
  };
  // optional .TSP.Reference layout_state = 1;
  bool has_layout_state() const;
  private:
  bool _internal_has_layout_state() const;
  public:
  void clear_layout_state();
  const ::TSP::Reference& layout_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_layout_state();
  ::TSP::Reference* mutable_layout_state();
  void set_allocated_layout_state(::TSP::Reference* layout_state);
  private:
  const ::TSP::Reference& _internal_layout_state() const;
  ::TSP::Reference* _internal_mutable_layout_state();
  public:
  void unsafe_arena_set_allocated_layout_state(
      ::TSP::Reference* layout_state);
  ::TSP::Reference* unsafe_arena_release_layout_state();

  // optional .TSP.Reference view_state = 2;
  bool has_view_state() const;
  private:
  bool _internal_has_view_state() const;
  public:
  void clear_view_state();
  const ::TSP::Reference& view_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_view_state();
  ::TSP::Reference* mutable_view_state();
  void set_allocated_view_state(::TSP::Reference* view_state);
  private:
  const ::TSP::Reference& _internal_view_state() const;
  ::TSP::Reference* _internal_mutable_view_state();
  public:
  void unsafe_arena_set_allocated_view_state(
      ::TSP::Reference* view_state);
  ::TSP::Reference* unsafe_arena_release_view_state();

  // @@protoc_insertion_point(class_scope:TP.ViewStateRootArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* layout_state_;
  ::TSP::Reference* view_state_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class UserDefinedGuideMapArchive_UserDefinedGuide PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.UserDefinedGuideMapArchive.UserDefinedGuide) */ {
 public:
  inline UserDefinedGuideMapArchive_UserDefinedGuide() : UserDefinedGuideMapArchive_UserDefinedGuide(nullptr) {}
  ~UserDefinedGuideMapArchive_UserDefinedGuide() override;
  explicit constexpr UserDefinedGuideMapArchive_UserDefinedGuide(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserDefinedGuideMapArchive_UserDefinedGuide(const UserDefinedGuideMapArchive_UserDefinedGuide& from);
  UserDefinedGuideMapArchive_UserDefinedGuide(UserDefinedGuideMapArchive_UserDefinedGuide&& from) noexcept
    : UserDefinedGuideMapArchive_UserDefinedGuide() {
    *this = ::std::move(from);
  }

  inline UserDefinedGuideMapArchive_UserDefinedGuide& operator=(const UserDefinedGuideMapArchive_UserDefinedGuide& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDefinedGuideMapArchive_UserDefinedGuide& operator=(UserDefinedGuideMapArchive_UserDefinedGuide&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserDefinedGuideMapArchive_UserDefinedGuide& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserDefinedGuideMapArchive_UserDefinedGuide* internal_default_instance() {
    return reinterpret_cast<const UserDefinedGuideMapArchive_UserDefinedGuide*>(
               &_UserDefinedGuideMapArchive_UserDefinedGuide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UserDefinedGuideMapArchive_UserDefinedGuide& a, UserDefinedGuideMapArchive_UserDefinedGuide& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDefinedGuideMapArchive_UserDefinedGuide* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDefinedGuideMapArchive_UserDefinedGuide* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDefinedGuideMapArchive_UserDefinedGuide* New() const final {
    return CreateMaybeMessage<UserDefinedGuideMapArchive_UserDefinedGuide>(nullptr);
  }

  UserDefinedGuideMapArchive_UserDefinedGuide* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDefinedGuideMapArchive_UserDefinedGuide>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserDefinedGuideMapArchive_UserDefinedGuide& from);
  void MergeFrom(const UserDefinedGuideMapArchive_UserDefinedGuide& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDefinedGuideMapArchive_UserDefinedGuide* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.UserDefinedGuideMapArchive.UserDefinedGuide";
  }
  protected:
  explicit UserDefinedGuideMapArchive_UserDefinedGuide(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuideStorageFieldNumber = 2,
    kPageIndexFieldNumber = 1,
  };
  // required .TSP.Reference guide_storage = 2;
  bool has_guide_storage() const;
  private:
  bool _internal_has_guide_storage() const;
  public:
  void clear_guide_storage();
  const ::TSP::Reference& guide_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_guide_storage();
  ::TSP::Reference* mutable_guide_storage();
  void set_allocated_guide_storage(::TSP::Reference* guide_storage);
  private:
  const ::TSP::Reference& _internal_guide_storage() const;
  ::TSP::Reference* _internal_mutable_guide_storage();
  public:
  void unsafe_arena_set_allocated_guide_storage(
      ::TSP::Reference* guide_storage);
  ::TSP::Reference* unsafe_arena_release_guide_storage();

  // required uint32 page_index = 1;
  bool has_page_index() const;
  private:
  bool _internal_has_page_index() const;
  public:
  void clear_page_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index() const;
  void set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_index() const;
  void _internal_set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.UserDefinedGuideMapArchive.UserDefinedGuide)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* guide_storage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class UserDefinedGuideMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.UserDefinedGuideMapArchive) */ {
 public:
  inline UserDefinedGuideMapArchive() : UserDefinedGuideMapArchive(nullptr) {}
  ~UserDefinedGuideMapArchive() override;
  explicit constexpr UserDefinedGuideMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserDefinedGuideMapArchive(const UserDefinedGuideMapArchive& from);
  UserDefinedGuideMapArchive(UserDefinedGuideMapArchive&& from) noexcept
    : UserDefinedGuideMapArchive() {
    *this = ::std::move(from);
  }

  inline UserDefinedGuideMapArchive& operator=(const UserDefinedGuideMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDefinedGuideMapArchive& operator=(UserDefinedGuideMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserDefinedGuideMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserDefinedGuideMapArchive* internal_default_instance() {
    return reinterpret_cast<const UserDefinedGuideMapArchive*>(
               &_UserDefinedGuideMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(UserDefinedGuideMapArchive& a, UserDefinedGuideMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDefinedGuideMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDefinedGuideMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDefinedGuideMapArchive* New() const final {
    return CreateMaybeMessage<UserDefinedGuideMapArchive>(nullptr);
  }

  UserDefinedGuideMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDefinedGuideMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserDefinedGuideMapArchive& from);
  void MergeFrom(const UserDefinedGuideMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDefinedGuideMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.UserDefinedGuideMapArchive";
  }
  protected:
  explicit UserDefinedGuideMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserDefinedGuideMapArchive_UserDefinedGuide UserDefinedGuide;

  // accessors -------------------------------------------------------

  enum : int {
    kUserDefinedGuideStoragesFieldNumber = 1,
  };
  // repeated .TP.UserDefinedGuideMapArchive.UserDefinedGuide user_defined_guide_storages = 1;
  int user_defined_guide_storages_size() const;
  private:
  int _internal_user_defined_guide_storages_size() const;
  public:
  void clear_user_defined_guide_storages();
  ::TP::UserDefinedGuideMapArchive_UserDefinedGuide* mutable_user_defined_guide_storages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::UserDefinedGuideMapArchive_UserDefinedGuide >*
      mutable_user_defined_guide_storages();
  private:
  const ::TP::UserDefinedGuideMapArchive_UserDefinedGuide& _internal_user_defined_guide_storages(int index) const;
  ::TP::UserDefinedGuideMapArchive_UserDefinedGuide* _internal_add_user_defined_guide_storages();
  public:
  const ::TP::UserDefinedGuideMapArchive_UserDefinedGuide& user_defined_guide_storages(int index) const;
  ::TP::UserDefinedGuideMapArchive_UserDefinedGuide* add_user_defined_guide_storages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::UserDefinedGuideMapArchive_UserDefinedGuide >&
      user_defined_guide_storages() const;

  // @@protoc_insertion_point(class_scope:TP.UserDefinedGuideMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::UserDefinedGuideMapArchive_UserDefinedGuide > user_defined_guide_storages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SectionSelectionArchive) */ {
 public:
  inline SectionSelectionArchive() : SectionSelectionArchive(nullptr) {}
  ~SectionSelectionArchive() override;
  explicit constexpr SectionSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionSelectionArchive(const SectionSelectionArchive& from);
  SectionSelectionArchive(SectionSelectionArchive&& from) noexcept
    : SectionSelectionArchive() {
    *this = ::std::move(from);
  }

  inline SectionSelectionArchive& operator=(const SectionSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionSelectionArchive& operator=(SectionSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const SectionSelectionArchive*>(
               &_SectionSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SectionSelectionArchive& a, SectionSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionSelectionArchive* New() const final {
    return CreateMaybeMessage<SectionSelectionArchive>(nullptr);
  }

  SectionSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionSelectionArchive& from);
  void MergeFrom(const SectionSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SectionSelectionArchive";
  }
  protected:
  explicit SectionSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionsFieldNumber = 1,
  };
  // repeated .TSP.Reference sections = 1;
  int sections_size() const;
  private:
  int _internal_sections_size() const;
  public:
  void clear_sections();
  ::TSP::Reference* mutable_sections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_sections();
  private:
  const ::TSP::Reference& _internal_sections(int index) const;
  ::TSP::Reference* _internal_add_sections();
  public:
  const ::TSP::Reference& sections(int index) const;
  ::TSP::Reference* add_sections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      sections() const;

  // @@protoc_insertion_point(class_scope:TP.SectionSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > sections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SectionSelectionTransformerArchive) */ {
 public:
  inline SectionSelectionTransformerArchive() : SectionSelectionTransformerArchive(nullptr) {}
  ~SectionSelectionTransformerArchive() override;
  explicit constexpr SectionSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionSelectionTransformerArchive(const SectionSelectionTransformerArchive& from);
  SectionSelectionTransformerArchive(SectionSelectionTransformerArchive&& from) noexcept
    : SectionSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline SectionSelectionTransformerArchive& operator=(const SectionSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionSelectionTransformerArchive& operator=(SectionSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const SectionSelectionTransformerArchive*>(
               &_SectionSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SectionSelectionTransformerArchive& a, SectionSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<SectionSelectionTransformerArchive>(nullptr);
  }

  SectionSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionSelectionTransformerArchive& from);
  void MergeFrom(const SectionSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SectionSelectionTransformerArchive";
  }
  protected:
  explicit SectionSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionUuidPathsFieldNumber = 3,
    kOriginalSelectionFieldNumber = 1,
    kStorageUuidPathFieldNumber = 2,
  };
  // repeated .TSP.UUIDPath section_uuid_paths = 3;
  int section_uuid_paths_size() const;
  private:
  int _internal_section_uuid_paths_size() const;
  public:
  void clear_section_uuid_paths();
  ::TSP::UUIDPath* mutable_section_uuid_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
      mutable_section_uuid_paths();
  private:
  const ::TSP::UUIDPath& _internal_section_uuid_paths(int index) const;
  ::TSP::UUIDPath* _internal_add_section_uuid_paths();
  public:
  const ::TSP::UUIDPath& section_uuid_paths(int index) const;
  ::TSP::UUIDPath* add_section_uuid_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
      section_uuid_paths() const;

  // optional .TSP.Reference original_selection = 1;
  bool has_original_selection() const;
  private:
  bool _internal_has_original_selection() const;
  public:
  void clear_original_selection();
  const ::TSP::Reference& original_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_original_selection();
  ::TSP::Reference* mutable_original_selection();
  void set_allocated_original_selection(::TSP::Reference* original_selection);
  private:
  const ::TSP::Reference& _internal_original_selection() const;
  ::TSP::Reference* _internal_mutable_original_selection();
  public:
  void unsafe_arena_set_allocated_original_selection(
      ::TSP::Reference* original_selection);
  ::TSP::Reference* unsafe_arena_release_original_selection();

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  bool has_storage_uuid_path() const;
  private:
  bool _internal_has_storage_uuid_path() const;
  public:
  void clear_storage_uuid_path();
  const ::TSP::UUIDPath& storage_uuid_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_storage_uuid_path();
  ::TSP::UUIDPath* mutable_storage_uuid_path();
  void set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_storage_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_storage_uuid_path();
  public:
  void unsafe_arena_set_allocated_storage_uuid_path(
      ::TSP::UUIDPath* storage_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_storage_uuid_path();

  // @@protoc_insertion_point(class_scope:TP.SectionSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath > section_uuid_paths_;
  ::TSP::Reference* original_selection_;
  ::TSP::UUIDPath* storage_uuid_path_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionPasteboardObjectArchive_PageDrawables PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SectionPasteboardObjectArchive.PageDrawables) */ {
 public:
  inline SectionPasteboardObjectArchive_PageDrawables() : SectionPasteboardObjectArchive_PageDrawables(nullptr) {}
  ~SectionPasteboardObjectArchive_PageDrawables() override;
  explicit constexpr SectionPasteboardObjectArchive_PageDrawables(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionPasteboardObjectArchive_PageDrawables(const SectionPasteboardObjectArchive_PageDrawables& from);
  SectionPasteboardObjectArchive_PageDrawables(SectionPasteboardObjectArchive_PageDrawables&& from) noexcept
    : SectionPasteboardObjectArchive_PageDrawables() {
    *this = ::std::move(from);
  }

  inline SectionPasteboardObjectArchive_PageDrawables& operator=(const SectionPasteboardObjectArchive_PageDrawables& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionPasteboardObjectArchive_PageDrawables& operator=(SectionPasteboardObjectArchive_PageDrawables&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionPasteboardObjectArchive_PageDrawables& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionPasteboardObjectArchive_PageDrawables* internal_default_instance() {
    return reinterpret_cast<const SectionPasteboardObjectArchive_PageDrawables*>(
               &_SectionPasteboardObjectArchive_PageDrawables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SectionPasteboardObjectArchive_PageDrawables& a, SectionPasteboardObjectArchive_PageDrawables& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionPasteboardObjectArchive_PageDrawables* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionPasteboardObjectArchive_PageDrawables* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionPasteboardObjectArchive_PageDrawables* New() const final {
    return CreateMaybeMessage<SectionPasteboardObjectArchive_PageDrawables>(nullptr);
  }

  SectionPasteboardObjectArchive_PageDrawables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionPasteboardObjectArchive_PageDrawables>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionPasteboardObjectArchive_PageDrawables& from);
  void MergeFrom(const SectionPasteboardObjectArchive_PageDrawables& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionPasteboardObjectArchive_PageDrawables* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SectionPasteboardObjectArchive.PageDrawables";
  }
  protected:
  explicit SectionPasteboardObjectArchive_PageDrawables(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableTagPairsFieldNumber = 2,
    kPageIndexFieldNumber = 1,
  };
  // required .TP.DrawableTagPairsArchive drawable_tag_pairs = 2;
  bool has_drawable_tag_pairs() const;
  private:
  bool _internal_has_drawable_tag_pairs() const;
  public:
  void clear_drawable_tag_pairs();
  const ::TP::DrawableTagPairsArchive& drawable_tag_pairs() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TP::DrawableTagPairsArchive* release_drawable_tag_pairs();
  ::TP::DrawableTagPairsArchive* mutable_drawable_tag_pairs();
  void set_allocated_drawable_tag_pairs(::TP::DrawableTagPairsArchive* drawable_tag_pairs);
  private:
  const ::TP::DrawableTagPairsArchive& _internal_drawable_tag_pairs() const;
  ::TP::DrawableTagPairsArchive* _internal_mutable_drawable_tag_pairs();
  public:
  void unsafe_arena_set_allocated_drawable_tag_pairs(
      ::TP::DrawableTagPairsArchive* drawable_tag_pairs);
  ::TP::DrawableTagPairsArchive* unsafe_arena_release_drawable_tag_pairs();

  // required uint32 page_index = 1;
  bool has_page_index() const;
  private:
  bool _internal_has_page_index() const;
  public:
  void clear_page_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index() const;
  void set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_index() const;
  void _internal_set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.SectionPasteboardObjectArchive.PageDrawables)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TP::DrawableTagPairsArchive* drawable_tag_pairs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_index_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionPasteboardObjectArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SectionPasteboardObjectArchive) */ {
 public:
  inline SectionPasteboardObjectArchive() : SectionPasteboardObjectArchive(nullptr) {}
  ~SectionPasteboardObjectArchive() override;
  explicit constexpr SectionPasteboardObjectArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionPasteboardObjectArchive(const SectionPasteboardObjectArchive& from);
  SectionPasteboardObjectArchive(SectionPasteboardObjectArchive&& from) noexcept
    : SectionPasteboardObjectArchive() {
    *this = ::std::move(from);
  }

  inline SectionPasteboardObjectArchive& operator=(const SectionPasteboardObjectArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionPasteboardObjectArchive& operator=(SectionPasteboardObjectArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionPasteboardObjectArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionPasteboardObjectArchive* internal_default_instance() {
    return reinterpret_cast<const SectionPasteboardObjectArchive*>(
               &_SectionPasteboardObjectArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SectionPasteboardObjectArchive& a, SectionPasteboardObjectArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionPasteboardObjectArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionPasteboardObjectArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionPasteboardObjectArchive* New() const final {
    return CreateMaybeMessage<SectionPasteboardObjectArchive>(nullptr);
  }

  SectionPasteboardObjectArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionPasteboardObjectArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionPasteboardObjectArchive& from);
  void MergeFrom(const SectionPasteboardObjectArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionPasteboardObjectArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SectionPasteboardObjectArchive";
  }
  protected:
  explicit SectionPasteboardObjectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SectionPasteboardObjectArchive_PageDrawables PageDrawables;

  // accessors -------------------------------------------------------

  enum : int {
    kPageDrawablesFieldNumber = 3,
    kOrderedDrawablesFieldNumber = 4,
    kTextStorageFieldNumber = 1,
    kPageCountFieldNumber = 2,
  };
  // repeated .TP.SectionPasteboardObjectArchive.PageDrawables page_drawables = 3;
  int page_drawables_size() const;
  private:
  int _internal_page_drawables_size() const;
  public:
  void clear_page_drawables();
  ::TP::SectionPasteboardObjectArchive_PageDrawables* mutable_page_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionPasteboardObjectArchive_PageDrawables >*
      mutable_page_drawables();
  private:
  const ::TP::SectionPasteboardObjectArchive_PageDrawables& _internal_page_drawables(int index) const;
  ::TP::SectionPasteboardObjectArchive_PageDrawables* _internal_add_page_drawables();
  public:
  const ::TP::SectionPasteboardObjectArchive_PageDrawables& page_drawables(int index) const;
  ::TP::SectionPasteboardObjectArchive_PageDrawables* add_page_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionPasteboardObjectArchive_PageDrawables >&
      page_drawables() const;

  // repeated .TSP.Reference ordered_drawables = 4;
  int ordered_drawables_size() const;
  private:
  int _internal_ordered_drawables_size() const;
  public:
  void clear_ordered_drawables();
  ::TSP::Reference* mutable_ordered_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_ordered_drawables();
  private:
  const ::TSP::Reference& _internal_ordered_drawables(int index) const;
  ::TSP::Reference* _internal_add_ordered_drawables();
  public:
  const ::TSP::Reference& ordered_drawables(int index) const;
  ::TSP::Reference* add_ordered_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      ordered_drawables() const;

  // required .TSP.Reference text_storage = 1;
  bool has_text_storage() const;
  private:
  bool _internal_has_text_storage() const;
  public:
  void clear_text_storage();
  const ::TSP::Reference& text_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_text_storage();
  ::TSP::Reference* mutable_text_storage();
  void set_allocated_text_storage(::TSP::Reference* text_storage);
  private:
  const ::TSP::Reference& _internal_text_storage() const;
  ::TSP::Reference* _internal_mutable_text_storage();
  public:
  void unsafe_arena_set_allocated_text_storage(
      ::TSP::Reference* text_storage);
  ::TSP::Reference* unsafe_arena_release_text_storage();

  // required uint32 page_count = 2;
  bool has_page_count() const;
  private:
  bool _internal_has_page_count() const;
  public:
  void clear_page_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_count() const;
  void set_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_count() const;
  void _internal_set_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TP.SectionPasteboardObjectArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionPasteboardObjectArchive_PageDrawables > page_drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > ordered_drawables_;
  ::TSP::Reference* text_storage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_count_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionsAppNativeObjectArchive_PageTemplatesEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry) */ {
 public:
  inline SectionsAppNativeObjectArchive_PageTemplatesEntry() : SectionsAppNativeObjectArchive_PageTemplatesEntry(nullptr) {}
  ~SectionsAppNativeObjectArchive_PageTemplatesEntry() override;
  explicit constexpr SectionsAppNativeObjectArchive_PageTemplatesEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionsAppNativeObjectArchive_PageTemplatesEntry(const SectionsAppNativeObjectArchive_PageTemplatesEntry& from);
  SectionsAppNativeObjectArchive_PageTemplatesEntry(SectionsAppNativeObjectArchive_PageTemplatesEntry&& from) noexcept
    : SectionsAppNativeObjectArchive_PageTemplatesEntry() {
    *this = ::std::move(from);
  }

  inline SectionsAppNativeObjectArchive_PageTemplatesEntry& operator=(const SectionsAppNativeObjectArchive_PageTemplatesEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionsAppNativeObjectArchive_PageTemplatesEntry& operator=(SectionsAppNativeObjectArchive_PageTemplatesEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionsAppNativeObjectArchive_PageTemplatesEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionsAppNativeObjectArchive_PageTemplatesEntry* internal_default_instance() {
    return reinterpret_cast<const SectionsAppNativeObjectArchive_PageTemplatesEntry*>(
               &_SectionsAppNativeObjectArchive_PageTemplatesEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SectionsAppNativeObjectArchive_PageTemplatesEntry& a, SectionsAppNativeObjectArchive_PageTemplatesEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionsAppNativeObjectArchive_PageTemplatesEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionsAppNativeObjectArchive_PageTemplatesEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionsAppNativeObjectArchive_PageTemplatesEntry* New() const final {
    return CreateMaybeMessage<SectionsAppNativeObjectArchive_PageTemplatesEntry>(nullptr);
  }

  SectionsAppNativeObjectArchive_PageTemplatesEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionsAppNativeObjectArchive_PageTemplatesEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionsAppNativeObjectArchive_PageTemplatesEntry& from);
  void MergeFrom(const SectionsAppNativeObjectArchive_PageTemplatesEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionsAppNativeObjectArchive_PageTemplatesEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SectionsAppNativeObjectArchive.PageTemplatesEntry";
  }
  protected:
  explicit SectionsAppNativeObjectArchive_PageTemplatesEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required .TSP.UUID key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::TSP::UUID& key() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_key();
  ::TSP::UUID* mutable_key();
  void set_allocated_key(::TSP::UUID* key);
  private:
  const ::TSP::UUID& _internal_key() const;
  ::TSP::UUID* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::TSP::UUID* key);
  ::TSP::UUID* unsafe_arena_release_key();

  // required .TSP.Reference value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::TSP::Reference& value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_value();
  ::TSP::Reference* mutable_value();
  void set_allocated_value(::TSP::Reference* value);
  private:
  const ::TSP::Reference& _internal_value() const;
  ::TSP::Reference* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::TSP::Reference* value);
  ::TSP::Reference* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* key_;
  ::TSP::Reference* value_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// -------------------------------------------------------------------

class SectionsAppNativeObjectArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TP.SectionsAppNativeObjectArchive) */ {
 public:
  inline SectionsAppNativeObjectArchive() : SectionsAppNativeObjectArchive(nullptr) {}
  ~SectionsAppNativeObjectArchive() override;
  explicit constexpr SectionsAppNativeObjectArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionsAppNativeObjectArchive(const SectionsAppNativeObjectArchive& from);
  SectionsAppNativeObjectArchive(SectionsAppNativeObjectArchive&& from) noexcept
    : SectionsAppNativeObjectArchive() {
    *this = ::std::move(from);
  }

  inline SectionsAppNativeObjectArchive& operator=(const SectionsAppNativeObjectArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionsAppNativeObjectArchive& operator=(SectionsAppNativeObjectArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionsAppNativeObjectArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionsAppNativeObjectArchive* internal_default_instance() {
    return reinterpret_cast<const SectionsAppNativeObjectArchive*>(
               &_SectionsAppNativeObjectArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SectionsAppNativeObjectArchive& a, SectionsAppNativeObjectArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionsAppNativeObjectArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionsAppNativeObjectArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionsAppNativeObjectArchive* New() const final {
    return CreateMaybeMessage<SectionsAppNativeObjectArchive>(nullptr);
  }

  SectionsAppNativeObjectArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionsAppNativeObjectArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionsAppNativeObjectArchive& from);
  void MergeFrom(const SectionsAppNativeObjectArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionsAppNativeObjectArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TP.SectionsAppNativeObjectArchive";
  }
  protected:
  explicit SectionsAppNativeObjectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SectionsAppNativeObjectArchive_PageTemplatesEntry PageTemplatesEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kSectionPasteboardObjectsFieldNumber = 1,
    kPageTemplatesFieldNumber = 2,
    kFlowsFieldNumber = 3,
  };
  // repeated .TSP.Reference section_pasteboard_objects = 1;
  int section_pasteboard_objects_size() const;
  private:
  int _internal_section_pasteboard_objects_size() const;
  public:
  void clear_section_pasteboard_objects();
  ::TSP::Reference* mutable_section_pasteboard_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_section_pasteboard_objects();
  private:
  const ::TSP::Reference& _internal_section_pasteboard_objects(int index) const;
  ::TSP::Reference* _internal_add_section_pasteboard_objects();
  public:
  const ::TSP::Reference& section_pasteboard_objects(int index) const;
  ::TSP::Reference* add_section_pasteboard_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      section_pasteboard_objects() const;

  // repeated .TP.SectionsAppNativeObjectArchive.PageTemplatesEntry page_templates = 2;
  int page_templates_size() const;
  private:
  int _internal_page_templates_size() const;
  public:
  void clear_page_templates();
  ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry* mutable_page_templates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry >*
      mutable_page_templates();
  private:
  const ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry& _internal_page_templates(int index) const;
  ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry* _internal_add_page_templates();
  public:
  const ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry& page_templates(int index) const;
  ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry* add_page_templates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry >&
      page_templates() const;

  // repeated .TSP.Reference flows = 3;
  int flows_size() const;
  private:
  int _internal_flows_size() const;
  public:
  void clear_flows();
  ::TSP::Reference* mutable_flows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_flows();
  private:
  const ::TSP::Reference& _internal_flows(int index) const;
  ::TSP::Reference* _internal_add_flows();
  public:
  const ::TSP::Reference& flows(int index) const;
  ::TSP::Reference* add_flows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      flows() const;

  // @@protoc_insertion_point(class_scope:TP.SectionsAppNativeObjectArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > section_pasteboard_objects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry > page_templates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > flows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TPArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DocumentArchive

// required .TSA.DocumentArchive super = 15;
inline bool DocumentArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSA::DocumentArchive& DocumentArchive::_internal_super() const {
  const ::TSA::DocumentArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSA::DocumentArchive&>(
      ::TSA::_DocumentArchive_default_instance_);
}
inline const ::TSA::DocumentArchive& DocumentArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.super)
  return _internal_super();
}
inline void DocumentArchive::unsafe_arena_set_allocated_super(
    ::TSA::DocumentArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.super)
}
inline ::TSA::DocumentArchive* DocumentArchive::release_super() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSA::DocumentArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSA::DocumentArchive* DocumentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.super)
  _has_bits_[0] &= ~0x00000400u;
  ::TSA::DocumentArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSA::DocumentArchive* DocumentArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000400u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSA::DocumentArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSA::DocumentArchive* DocumentArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.super)
  return _internal_mutable_super();
}
inline void DocumentArchive::set_allocated_super(::TSA::DocumentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.super)
}

// optional .TSP.Reference stylesheet = 2;
inline bool DocumentArchive::_internal_has_stylesheet() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || stylesheet_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_stylesheet() const {
  return _internal_has_stylesheet();
}
inline const ::TSP::Reference& DocumentArchive::_internal_stylesheet() const {
  const ::TSP::Reference* p = stylesheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::stylesheet() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.stylesheet)
  return _internal_stylesheet();
}
inline void DocumentArchive::unsafe_arena_set_allocated_stylesheet(
    ::TSP::Reference* stylesheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet_);
  }
  stylesheet_ = stylesheet;
  if (stylesheet) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.stylesheet)
}
inline ::TSP::Reference* DocumentArchive::release_stylesheet() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_stylesheet() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.stylesheet)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_stylesheet() {
  _has_bits_[0] |= 0x00000004u;
  if (stylesheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    stylesheet_ = p;
  }
  return stylesheet_;
}
inline ::TSP::Reference* DocumentArchive::mutable_stylesheet() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.stylesheet)
  return _internal_mutable_stylesheet();
}
inline void DocumentArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet_);
  }
  if (stylesheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet)->GetArena();
    if (message_arena != submessage_arena) {
      stylesheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylesheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  stylesheet_ = stylesheet;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.stylesheet)
}

// optional .TSP.Reference floating_drawables = 3;
inline bool DocumentArchive::_internal_has_floating_drawables() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || floating_drawables_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_floating_drawables() const {
  return _internal_has_floating_drawables();
}
inline const ::TSP::Reference& DocumentArchive::_internal_floating_drawables() const {
  const ::TSP::Reference* p = floating_drawables_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::floating_drawables() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.floating_drawables)
  return _internal_floating_drawables();
}
inline void DocumentArchive::unsafe_arena_set_allocated_floating_drawables(
    ::TSP::Reference* floating_drawables) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floating_drawables_);
  }
  floating_drawables_ = floating_drawables;
  if (floating_drawables) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.floating_drawables)
}
inline ::TSP::Reference* DocumentArchive::release_floating_drawables() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = floating_drawables_;
  floating_drawables_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_floating_drawables() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.floating_drawables)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = floating_drawables_;
  floating_drawables_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_floating_drawables() {
  _has_bits_[0] |= 0x00000008u;
  if (floating_drawables_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    floating_drawables_ = p;
  }
  return floating_drawables_;
}
inline ::TSP::Reference* DocumentArchive::mutable_floating_drawables() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.floating_drawables)
  return _internal_mutable_floating_drawables();
}
inline void DocumentArchive::set_allocated_floating_drawables(::TSP::Reference* floating_drawables) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(floating_drawables_);
  }
  if (floating_drawables) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floating_drawables)->GetArena();
    if (message_arena != submessage_arena) {
      floating_drawables = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, floating_drawables, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  floating_drawables_ = floating_drawables;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.floating_drawables)
}

// optional .TSP.Reference body_storage = 4;
inline bool DocumentArchive::_internal_has_body_storage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || body_storage_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_body_storage() const {
  return _internal_has_body_storage();
}
inline const ::TSP::Reference& DocumentArchive::_internal_body_storage() const {
  const ::TSP::Reference* p = body_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::body_storage() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.body_storage)
  return _internal_body_storage();
}
inline void DocumentArchive::unsafe_arena_set_allocated_body_storage(
    ::TSP::Reference* body_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_storage_);
  }
  body_storage_ = body_storage;
  if (body_storage) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.body_storage)
}
inline ::TSP::Reference* DocumentArchive::release_body_storage() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = body_storage_;
  body_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_body_storage() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.body_storage)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = body_storage_;
  body_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_body_storage() {
  _has_bits_[0] |= 0x00000010u;
  if (body_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    body_storage_ = p;
  }
  return body_storage_;
}
inline ::TSP::Reference* DocumentArchive::mutable_body_storage() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.body_storage)
  return _internal_mutable_body_storage();
}
inline void DocumentArchive::set_allocated_body_storage(::TSP::Reference* body_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_storage_);
  }
  if (body_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_storage)->GetArena();
    if (message_arena != submessage_arena) {
      body_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  body_storage_ = body_storage;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.body_storage)
}

// optional .TSP.Reference section = 5;
inline bool DocumentArchive::_internal_has_section() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || section_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_section() const {
  return _internal_has_section();
}
inline const ::TSP::Reference& DocumentArchive::_internal_section() const {
  const ::TSP::Reference* p = section_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::section() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.section)
  return _internal_section();
}
inline void DocumentArchive::unsafe_arena_set_allocated_section(
    ::TSP::Reference* section) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_);
  }
  section_ = section;
  if (section) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.section)
}
inline ::TSP::Reference* DocumentArchive::release_section() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = section_;
  section_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_section() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.section)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = section_;
  section_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_section() {
  _has_bits_[0] |= 0x00000020u;
  if (section_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    section_ = p;
  }
  return section_;
}
inline ::TSP::Reference* DocumentArchive::mutable_section() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.section)
  return _internal_mutable_section();
}
inline void DocumentArchive::set_allocated_section(::TSP::Reference* section) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_);
  }
  if (section) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section)->GetArena();
    if (message_arena != submessage_arena) {
      section = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, section, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  section_ = section;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.section)
}

// optional .TSP.Reference theme = 6;
inline bool DocumentArchive::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& DocumentArchive::_internal_theme() const {
  const ::TSP::Reference* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::theme() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.theme)
  return _internal_theme();
}
inline void DocumentArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.theme)
}
inline ::TSP::Reference* DocumentArchive::release_theme() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.theme)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000040u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    theme_ = p;
  }
  return theme_;
}
inline ::TSP::Reference* DocumentArchive::mutable_theme() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.theme)
  return _internal_mutable_theme();
}
inline void DocumentArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme)->GetArena();
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.theme)
}

// optional .TSP.Reference settings = 7;
inline bool DocumentArchive::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_settings() const {
  return _internal_has_settings();
}
inline const ::TSP::Reference& DocumentArchive::_internal_settings() const {
  const ::TSP::Reference* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::settings() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.settings)
  return _internal_settings();
}
inline void DocumentArchive::unsafe_arena_set_allocated_settings(
    ::TSP::Reference* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.settings)
}
inline ::TSP::Reference* DocumentArchive::release_settings() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.settings)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000080u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::TSP::Reference* DocumentArchive::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.settings)
  return _internal_mutable_settings();
}
inline void DocumentArchive::set_allocated_settings(::TSP::Reference* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings)->GetArena();
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.settings)
}

// optional .TSP.Reference deprecated_layout_state = 11;
inline bool DocumentArchive::_internal_has_deprecated_layout_state() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_layout_state_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_deprecated_layout_state() const {
  return _internal_has_deprecated_layout_state();
}
inline const ::TSP::Reference& DocumentArchive::_internal_deprecated_layout_state() const {
  const ::TSP::Reference* p = deprecated_layout_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::deprecated_layout_state() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.deprecated_layout_state)
  return _internal_deprecated_layout_state();
}
inline void DocumentArchive::unsafe_arena_set_allocated_deprecated_layout_state(
    ::TSP::Reference* deprecated_layout_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_layout_state_);
  }
  deprecated_layout_state_ = deprecated_layout_state;
  if (deprecated_layout_state) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.deprecated_layout_state)
}
inline ::TSP::Reference* DocumentArchive::release_deprecated_layout_state() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = deprecated_layout_state_;
  deprecated_layout_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_deprecated_layout_state() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.deprecated_layout_state)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = deprecated_layout_state_;
  deprecated_layout_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_deprecated_layout_state() {
  _has_bits_[0] |= 0x00000100u;
  if (deprecated_layout_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    deprecated_layout_state_ = p;
  }
  return deprecated_layout_state_;
}
inline ::TSP::Reference* DocumentArchive::mutable_deprecated_layout_state() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.deprecated_layout_state)
  return _internal_mutable_deprecated_layout_state();
}
inline void DocumentArchive::set_allocated_deprecated_layout_state(::TSP::Reference* deprecated_layout_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_layout_state_);
  }
  if (deprecated_layout_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_layout_state)->GetArena();
    if (message_arena != submessage_arena) {
      deprecated_layout_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_layout_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  deprecated_layout_state_ = deprecated_layout_state;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.deprecated_layout_state)
}

// optional .TSP.Reference deprecated_view_state = 12;
inline bool DocumentArchive::_internal_has_deprecated_view_state() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || deprecated_view_state_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_deprecated_view_state() const {
  return _internal_has_deprecated_view_state();
}
inline const ::TSP::Reference& DocumentArchive::_internal_deprecated_view_state() const {
  const ::TSP::Reference* p = deprecated_view_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::deprecated_view_state() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.deprecated_view_state)
  return _internal_deprecated_view_state();
}
inline void DocumentArchive::unsafe_arena_set_allocated_deprecated_view_state(
    ::TSP::Reference* deprecated_view_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_view_state_);
  }
  deprecated_view_state_ = deprecated_view_state;
  if (deprecated_view_state) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.deprecated_view_state)
}
inline ::TSP::Reference* DocumentArchive::release_deprecated_view_state() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = deprecated_view_state_;
  deprecated_view_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_deprecated_view_state() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.deprecated_view_state)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = deprecated_view_state_;
  deprecated_view_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_deprecated_view_state() {
  _has_bits_[0] |= 0x00000200u;
  if (deprecated_view_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    deprecated_view_state_ = p;
  }
  return deprecated_view_state_;
}
inline ::TSP::Reference* DocumentArchive::mutable_deprecated_view_state() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.deprecated_view_state)
  return _internal_mutable_deprecated_view_state();
}
inline void DocumentArchive::set_allocated_deprecated_view_state(::TSP::Reference* deprecated_view_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_view_state_);
  }
  if (deprecated_view_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_view_state)->GetArena();
    if (message_arena != submessage_arena) {
      deprecated_view_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_view_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  deprecated_view_state_ = deprecated_view_state;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.deprecated_view_state)
}

// repeated .TSP.Reference citation_records = 13;
inline int DocumentArchive::_internal_citation_records_size() const {
  return citation_records_.size();
}
inline int DocumentArchive::citation_records_size() const {
  return _internal_citation_records_size();
}
inline ::TSP::Reference* DocumentArchive::mutable_citation_records(int index) {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.citation_records)
  return citation_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_citation_records() {
  // @@protoc_insertion_point(field_mutable_list:TP.DocumentArchive.citation_records)
  return &citation_records_;
}
inline const ::TSP::Reference& DocumentArchive::_internal_citation_records(int index) const {
  return citation_records_.Get(index);
}
inline const ::TSP::Reference& DocumentArchive::citation_records(int index) const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.citation_records)
  return _internal_citation_records(index);
}
inline ::TSP::Reference* DocumentArchive::_internal_add_citation_records() {
  return citation_records_.Add();
}
inline ::TSP::Reference* DocumentArchive::add_citation_records() {
  // @@protoc_insertion_point(field_add:TP.DocumentArchive.citation_records)
  return _internal_add_citation_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::citation_records() const {
  // @@protoc_insertion_point(field_list:TP.DocumentArchive.citation_records)
  return citation_records_;
}

// repeated .TSP.Reference toc_styles = 14;
inline int DocumentArchive::_internal_toc_styles_size() const {
  return toc_styles_.size();
}
inline int DocumentArchive::toc_styles_size() const {
  return _internal_toc_styles_size();
}
inline ::TSP::Reference* DocumentArchive::mutable_toc_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.toc_styles)
  return toc_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_toc_styles() {
  // @@protoc_insertion_point(field_mutable_list:TP.DocumentArchive.toc_styles)
  return &toc_styles_;
}
inline const ::TSP::Reference& DocumentArchive::_internal_toc_styles(int index) const {
  return toc_styles_.Get(index);
}
inline const ::TSP::Reference& DocumentArchive::toc_styles(int index) const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.toc_styles)
  return _internal_toc_styles(index);
}
inline ::TSP::Reference* DocumentArchive::_internal_add_toc_styles() {
  return toc_styles_.Add();
}
inline ::TSP::Reference* DocumentArchive::add_toc_styles() {
  // @@protoc_insertion_point(field_add:TP.DocumentArchive.toc_styles)
  return _internal_add_toc_styles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::toc_styles() const {
  // @@protoc_insertion_point(field_list:TP.DocumentArchive.toc_styles)
  return toc_styles_;
}

// repeated .TSP.Reference change_sessions = 16;
inline int DocumentArchive::_internal_change_sessions_size() const {
  return change_sessions_.size();
}
inline int DocumentArchive::change_sessions_size() const {
  return _internal_change_sessions_size();
}
inline ::TSP::Reference* DocumentArchive::mutable_change_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.change_sessions)
  return change_sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_change_sessions() {
  // @@protoc_insertion_point(field_mutable_list:TP.DocumentArchive.change_sessions)
  return &change_sessions_;
}
inline const ::TSP::Reference& DocumentArchive::_internal_change_sessions(int index) const {
  return change_sessions_.Get(index);
}
inline const ::TSP::Reference& DocumentArchive::change_sessions(int index) const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.change_sessions)
  return _internal_change_sessions(index);
}
inline ::TSP::Reference* DocumentArchive::_internal_add_change_sessions() {
  return change_sessions_.Add();
}
inline ::TSP::Reference* DocumentArchive::add_change_sessions() {
  // @@protoc_insertion_point(field_add:TP.DocumentArchive.change_sessions)
  return _internal_add_change_sessions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::change_sessions() const {
  // @@protoc_insertion_point(field_list:TP.DocumentArchive.change_sessions)
  return change_sessions_;
}

// optional .TSP.Reference most_recent_change_session = 17;
inline bool DocumentArchive::_internal_has_most_recent_change_session() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || most_recent_change_session_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_most_recent_change_session() const {
  return _internal_has_most_recent_change_session();
}
inline const ::TSP::Reference& DocumentArchive::_internal_most_recent_change_session() const {
  const ::TSP::Reference* p = most_recent_change_session_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::most_recent_change_session() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.most_recent_change_session)
  return _internal_most_recent_change_session();
}
inline void DocumentArchive::unsafe_arena_set_allocated_most_recent_change_session(
    ::TSP::Reference* most_recent_change_session) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(most_recent_change_session_);
  }
  most_recent_change_session_ = most_recent_change_session;
  if (most_recent_change_session) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.most_recent_change_session)
}
inline ::TSP::Reference* DocumentArchive::release_most_recent_change_session() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = most_recent_change_session_;
  most_recent_change_session_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_most_recent_change_session() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.most_recent_change_session)
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = most_recent_change_session_;
  most_recent_change_session_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_most_recent_change_session() {
  _has_bits_[0] |= 0x00000800u;
  if (most_recent_change_session_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    most_recent_change_session_ = p;
  }
  return most_recent_change_session_;
}
inline ::TSP::Reference* DocumentArchive::mutable_most_recent_change_session() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.most_recent_change_session)
  return _internal_mutable_most_recent_change_session();
}
inline void DocumentArchive::set_allocated_most_recent_change_session(::TSP::Reference* most_recent_change_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(most_recent_change_session_);
  }
  if (most_recent_change_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(most_recent_change_session)->GetArena();
    if (message_arena != submessage_arena) {
      most_recent_change_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, most_recent_change_session, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  most_recent_change_session_ = most_recent_change_session;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.most_recent_change_session)
}

// optional .TSP.Reference drawables_zorder = 20;
inline bool DocumentArchive::_internal_has_drawables_zorder() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || drawables_zorder_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_drawables_zorder() const {
  return _internal_has_drawables_zorder();
}
inline const ::TSP::Reference& DocumentArchive::_internal_drawables_zorder() const {
  const ::TSP::Reference* p = drawables_zorder_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::drawables_zorder() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.drawables_zorder)
  return _internal_drawables_zorder();
}
inline void DocumentArchive::unsafe_arena_set_allocated_drawables_zorder(
    ::TSP::Reference* drawables_zorder) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawables_zorder_);
  }
  drawables_zorder_ = drawables_zorder;
  if (drawables_zorder) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.drawables_zorder)
}
inline ::TSP::Reference* DocumentArchive::release_drawables_zorder() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = drawables_zorder_;
  drawables_zorder_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_drawables_zorder() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.drawables_zorder)
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = drawables_zorder_;
  drawables_zorder_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_drawables_zorder() {
  _has_bits_[0] |= 0x00001000u;
  if (drawables_zorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    drawables_zorder_ = p;
  }
  return drawables_zorder_;
}
inline ::TSP::Reference* DocumentArchive::mutable_drawables_zorder() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.drawables_zorder)
  return _internal_mutable_drawables_zorder();
}
inline void DocumentArchive::set_allocated_drawables_zorder(::TSP::Reference* drawables_zorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawables_zorder_);
  }
  if (drawables_zorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawables_zorder)->GetArena();
    if (message_arena != submessage_arena) {
      drawables_zorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawables_zorder, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  drawables_zorder_ = drawables_zorder;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.drawables_zorder)
}

// optional bool uses_single_header_footer = 21;
inline bool DocumentArchive::_internal_has_uses_single_header_footer() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool DocumentArchive::has_uses_single_header_footer() const {
  return _internal_has_uses_single_header_footer();
}
inline void DocumentArchive::clear_uses_single_header_footer() {
  uses_single_header_footer_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool DocumentArchive::_internal_uses_single_header_footer() const {
  return uses_single_header_footer_;
}
inline bool DocumentArchive::uses_single_header_footer() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.uses_single_header_footer)
  return _internal_uses_single_header_footer();
}
inline void DocumentArchive::_internal_set_uses_single_header_footer(bool value) {
  _has_bits_[0] |= 0x00800000u;
  uses_single_header_footer_ = value;
}
inline void DocumentArchive::set_uses_single_header_footer(bool value) {
  _internal_set_uses_single_header_footer(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.uses_single_header_footer)
}

// optional float page_width = 30;
inline bool DocumentArchive::_internal_has_page_width() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DocumentArchive::has_page_width() const {
  return _internal_has_page_width();
}
inline void DocumentArchive::clear_page_width() {
  page_width_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float DocumentArchive::_internal_page_width() const {
  return page_width_;
}
inline float DocumentArchive::page_width() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.page_width)
  return _internal_page_width();
}
inline void DocumentArchive::_internal_set_page_width(float value) {
  _has_bits_[0] |= 0x00010000u;
  page_width_ = value;
}
inline void DocumentArchive::set_page_width(float value) {
  _internal_set_page_width(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.page_width)
}

// optional float page_height = 31;
inline bool DocumentArchive::_internal_has_page_height() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DocumentArchive::has_page_height() const {
  return _internal_has_page_height();
}
inline void DocumentArchive::clear_page_height() {
  page_height_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float DocumentArchive::_internal_page_height() const {
  return page_height_;
}
inline float DocumentArchive::page_height() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.page_height)
  return _internal_page_height();
}
inline void DocumentArchive::_internal_set_page_height(float value) {
  _has_bits_[0] |= 0x00020000u;
  page_height_ = value;
}
inline void DocumentArchive::set_page_height(float value) {
  _internal_set_page_height(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.page_height)
}

// optional float left_margin = 32;
inline bool DocumentArchive::_internal_has_left_margin() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DocumentArchive::has_left_margin() const {
  return _internal_has_left_margin();
}
inline void DocumentArchive::clear_left_margin() {
  left_margin_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float DocumentArchive::_internal_left_margin() const {
  return left_margin_;
}
inline float DocumentArchive::left_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.left_margin)
  return _internal_left_margin();
}
inline void DocumentArchive::_internal_set_left_margin(float value) {
  _has_bits_[0] |= 0x00040000u;
  left_margin_ = value;
}
inline void DocumentArchive::set_left_margin(float value) {
  _internal_set_left_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.left_margin)
}

// optional float right_margin = 33;
inline bool DocumentArchive::_internal_has_right_margin() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DocumentArchive::has_right_margin() const {
  return _internal_has_right_margin();
}
inline void DocumentArchive::clear_right_margin() {
  right_margin_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float DocumentArchive::_internal_right_margin() const {
  return right_margin_;
}
inline float DocumentArchive::right_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.right_margin)
  return _internal_right_margin();
}
inline void DocumentArchive::_internal_set_right_margin(float value) {
  _has_bits_[0] |= 0x00080000u;
  right_margin_ = value;
}
inline void DocumentArchive::set_right_margin(float value) {
  _internal_set_right_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.right_margin)
}

// optional float top_margin = 34;
inline bool DocumentArchive::_internal_has_top_margin() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool DocumentArchive::has_top_margin() const {
  return _internal_has_top_margin();
}
inline void DocumentArchive::clear_top_margin() {
  top_margin_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float DocumentArchive::_internal_top_margin() const {
  return top_margin_;
}
inline float DocumentArchive::top_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.top_margin)
  return _internal_top_margin();
}
inline void DocumentArchive::_internal_set_top_margin(float value) {
  _has_bits_[0] |= 0x00100000u;
  top_margin_ = value;
}
inline void DocumentArchive::set_top_margin(float value) {
  _internal_set_top_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.top_margin)
}

// optional float bottom_margin = 35;
inline bool DocumentArchive::_internal_has_bottom_margin() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool DocumentArchive::has_bottom_margin() const {
  return _internal_has_bottom_margin();
}
inline void DocumentArchive::clear_bottom_margin() {
  bottom_margin_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float DocumentArchive::_internal_bottom_margin() const {
  return bottom_margin_;
}
inline float DocumentArchive::bottom_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.bottom_margin)
  return _internal_bottom_margin();
}
inline void DocumentArchive::_internal_set_bottom_margin(float value) {
  _has_bits_[0] |= 0x00200000u;
  bottom_margin_ = value;
}
inline void DocumentArchive::set_bottom_margin(float value) {
  _internal_set_bottom_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.bottom_margin)
}

// optional float header_margin = 36;
inline bool DocumentArchive::_internal_has_header_margin() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool DocumentArchive::has_header_margin() const {
  return _internal_has_header_margin();
}
inline void DocumentArchive::clear_header_margin() {
  header_margin_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float DocumentArchive::_internal_header_margin() const {
  return header_margin_;
}
inline float DocumentArchive::header_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.header_margin)
  return _internal_header_margin();
}
inline void DocumentArchive::_internal_set_header_margin(float value) {
  _has_bits_[0] |= 0x00400000u;
  header_margin_ = value;
}
inline void DocumentArchive::set_header_margin(float value) {
  _internal_set_header_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.header_margin)
}

// optional float footer_margin = 37;
inline bool DocumentArchive::_internal_has_footer_margin() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool DocumentArchive::has_footer_margin() const {
  return _internal_has_footer_margin();
}
inline void DocumentArchive::clear_footer_margin() {
  footer_margin_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float DocumentArchive::_internal_footer_margin() const {
  return footer_margin_;
}
inline float DocumentArchive::footer_margin() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.footer_margin)
  return _internal_footer_margin();
}
inline void DocumentArchive::_internal_set_footer_margin(float value) {
  _has_bits_[0] |= 0x08000000u;
  footer_margin_ = value;
}
inline void DocumentArchive::set_footer_margin(float value) {
  _internal_set_footer_margin(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.footer_margin)
}

// optional float page_scale = 38;
inline bool DocumentArchive::_internal_has_page_scale() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool DocumentArchive::has_page_scale() const {
  return _internal_has_page_scale();
}
inline void DocumentArchive::clear_page_scale() {
  page_scale_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float DocumentArchive::_internal_page_scale() const {
  return page_scale_;
}
inline float DocumentArchive::page_scale() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.page_scale)
  return _internal_page_scale();
}
inline void DocumentArchive::_internal_set_page_scale(float value) {
  _has_bits_[0] |= 0x10000000u;
  page_scale_ = value;
}
inline void DocumentArchive::set_page_scale(float value) {
  _internal_set_page_scale(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.page_scale)
}

// optional bool lays_out_body_vertically = 39;
inline bool DocumentArchive::_internal_has_lays_out_body_vertically() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool DocumentArchive::has_lays_out_body_vertically() const {
  return _internal_has_lays_out_body_vertically();
}
inline void DocumentArchive::clear_lays_out_body_vertically() {
  lays_out_body_vertically_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool DocumentArchive::_internal_lays_out_body_vertically() const {
  return lays_out_body_vertically_;
}
inline bool DocumentArchive::lays_out_body_vertically() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.lays_out_body_vertically)
  return _internal_lays_out_body_vertically();
}
inline void DocumentArchive::_internal_set_lays_out_body_vertically(bool value) {
  _has_bits_[0] |= 0x01000000u;
  lays_out_body_vertically_ = value;
}
inline void DocumentArchive::set_lays_out_body_vertically(bool value) {
  _internal_set_lays_out_body_vertically(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.lays_out_body_vertically)
}

// optional bool change_tracking_enabled = 40;
inline bool DocumentArchive::_internal_has_change_tracking_enabled() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool DocumentArchive::has_change_tracking_enabled() const {
  return _internal_has_change_tracking_enabled();
}
inline void DocumentArchive::clear_change_tracking_enabled() {
  change_tracking_enabled_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool DocumentArchive::_internal_change_tracking_enabled() const {
  return change_tracking_enabled_;
}
inline bool DocumentArchive::change_tracking_enabled() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.change_tracking_enabled)
  return _internal_change_tracking_enabled();
}
inline void DocumentArchive::_internal_set_change_tracking_enabled(bool value) {
  _has_bits_[0] |= 0x02000000u;
  change_tracking_enabled_ = value;
}
inline void DocumentArchive::set_change_tracking_enabled(bool value) {
  _internal_set_change_tracking_enabled(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.change_tracking_enabled)
}

// optional .TSP.Reference tables_custom_format_list = 41;
inline bool DocumentArchive::_internal_has_tables_custom_format_list() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || tables_custom_format_list_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_tables_custom_format_list() const {
  return _internal_has_tables_custom_format_list();
}
inline const ::TSP::Reference& DocumentArchive::_internal_tables_custom_format_list() const {
  const ::TSP::Reference* p = tables_custom_format_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::tables_custom_format_list() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.tables_custom_format_list)
  return _internal_tables_custom_format_list();
}
inline void DocumentArchive::unsafe_arena_set_allocated_tables_custom_format_list(
    ::TSP::Reference* tables_custom_format_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tables_custom_format_list_);
  }
  tables_custom_format_list_ = tables_custom_format_list;
  if (tables_custom_format_list) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.tables_custom_format_list)
}
inline ::TSP::Reference* DocumentArchive::release_tables_custom_format_list() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = tables_custom_format_list_;
  tables_custom_format_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_tables_custom_format_list() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.tables_custom_format_list)
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = tables_custom_format_list_;
  tables_custom_format_list_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_tables_custom_format_list() {
  _has_bits_[0] |= 0x00002000u;
  if (tables_custom_format_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    tables_custom_format_list_ = p;
  }
  return tables_custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::mutable_tables_custom_format_list() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.tables_custom_format_list)
  return _internal_mutable_tables_custom_format_list();
}
inline void DocumentArchive::set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tables_custom_format_list_);
  }
  if (tables_custom_format_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tables_custom_format_list)->GetArena();
    if (message_arena != submessage_arena) {
      tables_custom_format_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tables_custom_format_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  tables_custom_format_list_ = tables_custom_format_list;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.tables_custom_format_list)
}

// optional uint32 orientation = 42 [default = 0];
inline bool DocumentArchive::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool DocumentArchive::has_orientation() const {
  return _internal_has_orientation();
}
inline void DocumentArchive::clear_orientation() {
  orientation_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocumentArchive::_internal_orientation() const {
  return orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocumentArchive::orientation() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.orientation)
  return _internal_orientation();
}
inline void DocumentArchive::_internal_set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  orientation_ = value;
}
inline void DocumentArchive::set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.orientation)
}

// optional string printer_id = 43;
inline bool DocumentArchive::_internal_has_printer_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DocumentArchive::has_printer_id() const {
  return _internal_has_printer_id();
}
inline void DocumentArchive::clear_printer_id() {
  printer_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DocumentArchive::printer_id() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.printer_id)
  return _internal_printer_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DocumentArchive::set_printer_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 printer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.printer_id)
}
inline std::string* DocumentArchive::mutable_printer_id() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.printer_id)
  return _internal_mutable_printer_id();
}
inline const std::string& DocumentArchive::_internal_printer_id() const {
  return printer_id_.Get();
}
inline void DocumentArchive::_internal_set_printer_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  printer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DocumentArchive::_internal_mutable_printer_id() {
  _has_bits_[0] |= 0x00000001u;
  return printer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DocumentArchive::release_printer_id() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.printer_id)
  if (!_internal_has_printer_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return printer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentArchive::set_allocated_printer_id(std::string* printer_id) {
  if (printer_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  printer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), printer_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.printer_id)
}

// optional string paper_id = 44;
inline bool DocumentArchive::_internal_has_paper_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DocumentArchive::has_paper_id() const {
  return _internal_has_paper_id();
}
inline void DocumentArchive::clear_paper_id() {
  paper_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DocumentArchive::paper_id() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.paper_id)
  return _internal_paper_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DocumentArchive::set_paper_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 paper_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.paper_id)
}
inline std::string* DocumentArchive::mutable_paper_id() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.paper_id)
  return _internal_mutable_paper_id();
}
inline const std::string& DocumentArchive::_internal_paper_id() const {
  return paper_id_.Get();
}
inline void DocumentArchive::_internal_set_paper_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  paper_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DocumentArchive::_internal_mutable_paper_id() {
  _has_bits_[0] |= 0x00000002u;
  return paper_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DocumentArchive::release_paper_id() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.paper_id)
  if (!_internal_has_paper_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return paper_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentArchive::set_allocated_paper_id(std::string* paper_id) {
  if (paper_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  paper_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paper_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.paper_id)
}

// optional .TSP.DataReference equation_environment = 45;
inline bool DocumentArchive::_internal_has_equation_environment() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || equation_environment_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_equation_environment() const {
  return _internal_has_equation_environment();
}
inline const ::TSP::DataReference& DocumentArchive::_internal_equation_environment() const {
  const ::TSP::DataReference* p = equation_environment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& DocumentArchive::equation_environment() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.equation_environment)
  return _internal_equation_environment();
}
inline void DocumentArchive::unsafe_arena_set_allocated_equation_environment(
    ::TSP::DataReference* equation_environment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equation_environment_);
  }
  equation_environment_ = equation_environment;
  if (equation_environment) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.equation_environment)
}
inline ::TSP::DataReference* DocumentArchive::release_equation_environment() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::DataReference* temp = equation_environment_;
  equation_environment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* DocumentArchive::unsafe_arena_release_equation_environment() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.equation_environment)
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::DataReference* temp = equation_environment_;
  equation_environment_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* DocumentArchive::_internal_mutable_equation_environment() {
  _has_bits_[0] |= 0x00004000u;
  if (equation_environment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    equation_environment_ = p;
  }
  return equation_environment_;
}
inline ::TSP::DataReference* DocumentArchive::mutable_equation_environment() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.equation_environment)
  return _internal_mutable_equation_environment();
}
inline void DocumentArchive::set_allocated_equation_environment(::TSP::DataReference* equation_environment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(equation_environment_);
  }
  if (equation_environment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equation_environment)->GetArena();
    if (message_arena != submessage_arena) {
      equation_environment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equation_environment, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  equation_environment_ = equation_environment;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.equation_environment)
}

// optional bool show_in_bookmarks_list_paragraph_styles_property_initialized = 46 [default = false];
inline bool DocumentArchive::_internal_has_show_in_bookmarks_list_paragraph_styles_property_initialized() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool DocumentArchive::has_show_in_bookmarks_list_paragraph_styles_property_initialized() const {
  return _internal_has_show_in_bookmarks_list_paragraph_styles_property_initialized();
}
inline void DocumentArchive::clear_show_in_bookmarks_list_paragraph_styles_property_initialized() {
  show_in_bookmarks_list_paragraph_styles_property_initialized_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool DocumentArchive::_internal_show_in_bookmarks_list_paragraph_styles_property_initialized() const {
  return show_in_bookmarks_list_paragraph_styles_property_initialized_;
}
inline bool DocumentArchive::show_in_bookmarks_list_paragraph_styles_property_initialized() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.show_in_bookmarks_list_paragraph_styles_property_initialized)
  return _internal_show_in_bookmarks_list_paragraph_styles_property_initialized();
}
inline void DocumentArchive::_internal_set_show_in_bookmarks_list_paragraph_styles_property_initialized(bool value) {
  _has_bits_[0] |= 0x04000000u;
  show_in_bookmarks_list_paragraph_styles_property_initialized_ = value;
}
inline void DocumentArchive::set_show_in_bookmarks_list_paragraph_styles_property_initialized(bool value) {
  _internal_set_show_in_bookmarks_list_paragraph_styles_property_initialized(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.show_in_bookmarks_list_paragraph_styles_property_initialized)
}

// optional .TSP.Reference flow_info_container = 47;
inline bool DocumentArchive::_internal_has_flow_info_container() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || flow_info_container_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_flow_info_container() const {
  return _internal_has_flow_info_container();
}
inline const ::TSP::Reference& DocumentArchive::_internal_flow_info_container() const {
  const ::TSP::Reference* p = flow_info_container_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::flow_info_container() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.flow_info_container)
  return _internal_flow_info_container();
}
inline void DocumentArchive::unsafe_arena_set_allocated_flow_info_container(
    ::TSP::Reference* flow_info_container) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_container_);
  }
  flow_info_container_ = flow_info_container;
  if (flow_info_container) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DocumentArchive.flow_info_container)
}
inline ::TSP::Reference* DocumentArchive::release_flow_info_container() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = flow_info_container_;
  flow_info_container_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_flow_info_container() {
  // @@protoc_insertion_point(field_release:TP.DocumentArchive.flow_info_container)
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = flow_info_container_;
  flow_info_container_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_flow_info_container() {
  _has_bits_[0] |= 0x00008000u;
  if (flow_info_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    flow_info_container_ = p;
  }
  return flow_info_container_;
}
inline ::TSP::Reference* DocumentArchive::mutable_flow_info_container() {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.flow_info_container)
  return _internal_mutable_flow_info_container();
}
inline void DocumentArchive::set_allocated_flow_info_container(::TSP::Reference* flow_info_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_container_);
  }
  if (flow_info_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_info_container)->GetArena();
    if (message_arena != submessage_arena) {
      flow_info_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_info_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  flow_info_container_ = flow_info_container;
  // @@protoc_insertion_point(field_set_allocated:TP.DocumentArchive.flow_info_container)
}

// repeated .TSP.Reference page_templates = 48;
inline int DocumentArchive::_internal_page_templates_size() const {
  return page_templates_.size();
}
inline int DocumentArchive::page_templates_size() const {
  return _internal_page_templates_size();
}
inline ::TSP::Reference* DocumentArchive::mutable_page_templates(int index) {
  // @@protoc_insertion_point(field_mutable:TP.DocumentArchive.page_templates)
  return page_templates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_page_templates() {
  // @@protoc_insertion_point(field_mutable_list:TP.DocumentArchive.page_templates)
  return &page_templates_;
}
inline const ::TSP::Reference& DocumentArchive::_internal_page_templates(int index) const {
  return page_templates_.Get(index);
}
inline const ::TSP::Reference& DocumentArchive::page_templates(int index) const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.page_templates)
  return _internal_page_templates(index);
}
inline ::TSP::Reference* DocumentArchive::_internal_add_page_templates() {
  return page_templates_.Add();
}
inline ::TSP::Reference* DocumentArchive::add_page_templates() {
  // @@protoc_insertion_point(field_add:TP.DocumentArchive.page_templates)
  return _internal_add_page_templates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::page_templates() const {
  // @@protoc_insertion_point(field_list:TP.DocumentArchive.page_templates)
  return page_templates_;
}

// optional bool should_use_anchored_drawable_wrap_slop = 49;
inline bool DocumentArchive::_internal_has_should_use_anchored_drawable_wrap_slop() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool DocumentArchive::has_should_use_anchored_drawable_wrap_slop() const {
  return _internal_has_should_use_anchored_drawable_wrap_slop();
}
inline void DocumentArchive::clear_should_use_anchored_drawable_wrap_slop() {
  should_use_anchored_drawable_wrap_slop_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool DocumentArchive::_internal_should_use_anchored_drawable_wrap_slop() const {
  return should_use_anchored_drawable_wrap_slop_;
}
inline bool DocumentArchive::should_use_anchored_drawable_wrap_slop() const {
  // @@protoc_insertion_point(field_get:TP.DocumentArchive.should_use_anchored_drawable_wrap_slop)
  return _internal_should_use_anchored_drawable_wrap_slop();
}
inline void DocumentArchive::_internal_set_should_use_anchored_drawable_wrap_slop(bool value) {
  _has_bits_[0] |= 0x40000000u;
  should_use_anchored_drawable_wrap_slop_ = value;
}
inline void DocumentArchive::set_should_use_anchored_drawable_wrap_slop(bool value) {
  _internal_set_should_use_anchored_drawable_wrap_slop(value);
  // @@protoc_insertion_point(field_set:TP.DocumentArchive.should_use_anchored_drawable_wrap_slop)
}

// -------------------------------------------------------------------

// ThemeArchive

// required .TSS.ThemeArchive super = 1;
inline bool ThemeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ThemeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ThemeArchive& ThemeArchive::_internal_super() const {
  const ::TSS::ThemeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ThemeArchive&>(
      ::TSS::_ThemeArchive_default_instance_);
}
inline const ::TSS::ThemeArchive& ThemeArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.ThemeArchive.super)
  return _internal_super();
}
inline void ThemeArchive::unsafe_arena_set_allocated_super(
    ::TSS::ThemeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ThemeArchive.super)
}
inline ::TSS::ThemeArchive* ThemeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::ThemeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::ThemeArchive* ThemeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.ThemeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::ThemeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::ThemeArchive* ThemeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ThemeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::ThemeArchive* ThemeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.ThemeArchive.super)
  return _internal_mutable_super();
}
inline void ThemeArchive::set_allocated_super(::TSS::ThemeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.ThemeArchive.super)
}

// -------------------------------------------------------------------

// SettingsArchive

// optional bool body = 1 [default = true];
inline bool SettingsArchive::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_body() const {
  return _internal_has_body();
}
inline void SettingsArchive::clear_body() {
  body_ = true;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool SettingsArchive::_internal_body() const {
  return body_;
}
inline bool SettingsArchive::body() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.body)
  return _internal_body();
}
inline void SettingsArchive::_internal_set_body(bool value) {
  _has_bits_[0] |= 0x01000000u;
  body_ = value;
}
inline void SettingsArchive::set_body(bool value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.body)
}

// optional bool headers = 2 [default = true];
inline bool SettingsArchive::_internal_has_headers() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_headers() const {
  return _internal_has_headers();
}
inline void SettingsArchive::clear_headers() {
  headers_ = true;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool SettingsArchive::_internal_headers() const {
  return headers_;
}
inline bool SettingsArchive::headers() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.headers)
  return _internal_headers();
}
inline void SettingsArchive::_internal_set_headers(bool value) {
  _has_bits_[0] |= 0x02000000u;
  headers_ = value;
}
inline void SettingsArchive::set_headers(bool value) {
  _internal_set_headers(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.headers)
}

// optional bool footers = 3 [default = true];
inline bool SettingsArchive::_internal_has_footers() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_footers() const {
  return _internal_has_footers();
}
inline void SettingsArchive::clear_footers() {
  footers_ = true;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool SettingsArchive::_internal_footers() const {
  return footers_;
}
inline bool SettingsArchive::footers() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.footers)
  return _internal_footers();
}
inline void SettingsArchive::_internal_set_footers(bool value) {
  _has_bits_[0] |= 0x04000000u;
  footers_ = value;
}
inline void SettingsArchive::set_footers(bool value) {
  _internal_set_footers(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.footers)
}

// optional bool preview = 4 [default = true];
inline bool SettingsArchive::_internal_has_preview() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_preview() const {
  return _internal_has_preview();
}
inline void SettingsArchive::clear_preview() {
  preview_ = true;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool SettingsArchive::_internal_preview() const {
  return preview_;
}
inline bool SettingsArchive::preview() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.preview)
  return _internal_preview();
}
inline void SettingsArchive::_internal_set_preview(bool value) {
  _has_bits_[0] |= 0x08000000u;
  preview_ = value;
}
inline void SettingsArchive::set_preview(bool value) {
  _internal_set_preview(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.preview)
}

// optional bool copy_movies = 5 [default = true];
inline bool SettingsArchive::_internal_has_copy_movies() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_copy_movies() const {
  return _internal_has_copy_movies();
}
inline void SettingsArchive::clear_copy_movies() {
  copy_movies_ = true;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool SettingsArchive::_internal_copy_movies() const {
  return copy_movies_;
}
inline bool SettingsArchive::copy_movies() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.copy_movies)
  return _internal_copy_movies();
}
inline void SettingsArchive::_internal_set_copy_movies(bool value) {
  _has_bits_[0] |= 0x10000000u;
  copy_movies_ = value;
}
inline void SettingsArchive::set_copy_movies(bool value) {
  _internal_set_copy_movies(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.copy_movies)
}

// optional bool copy_assets = 6 [default = true];
inline bool SettingsArchive::_internal_has_copy_assets() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_copy_assets() const {
  return _internal_has_copy_assets();
}
inline void SettingsArchive::clear_copy_assets() {
  copy_assets_ = true;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool SettingsArchive::_internal_copy_assets() const {
  return copy_assets_;
}
inline bool SettingsArchive::copy_assets() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.copy_assets)
  return _internal_copy_assets();
}
inline void SettingsArchive::_internal_set_copy_assets(bool value) {
  _has_bits_[0] |= 0x20000000u;
  copy_assets_ = value;
}
inline void SettingsArchive::set_copy_assets(bool value) {
  _internal_set_copy_assets(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.copy_assets)
}

// optional bool placeholder_authoring = 7 [default = false];
inline bool SettingsArchive::_internal_has_placeholder_authoring() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SettingsArchive::has_placeholder_authoring() const {
  return _internal_has_placeholder_authoring();
}
inline void SettingsArchive::clear_placeholder_authoring() {
  placeholder_authoring_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool SettingsArchive::_internal_placeholder_authoring() const {
  return placeholder_authoring_;
}
inline bool SettingsArchive::placeholder_authoring() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.placeholder_authoring)
  return _internal_placeholder_authoring();
}
inline void SettingsArchive::_internal_set_placeholder_authoring(bool value) {
  _has_bits_[0] |= 0x00000100u;
  placeholder_authoring_ = value;
}
inline void SettingsArchive::set_placeholder_authoring(bool value) {
  _internal_set_placeholder_authoring(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.placeholder_authoring)
}

// optional bool links_enabled = 8 [default = true];
inline bool SettingsArchive::_internal_has_links_enabled() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_links_enabled() const {
  return _internal_has_links_enabled();
}
inline void SettingsArchive::clear_links_enabled() {
  links_enabled_ = true;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool SettingsArchive::_internal_links_enabled() const {
  return links_enabled_;
}
inline bool SettingsArchive::links_enabled() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.links_enabled)
  return _internal_links_enabled();
}
inline void SettingsArchive::_internal_set_links_enabled(bool value) {
  _has_bits_[0] |= 0x40000000u;
  links_enabled_ = value;
}
inline void SettingsArchive::set_links_enabled(bool value) {
  _internal_set_links_enabled(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.links_enabled)
}

// optional bool hyphenation = 9 [default = false];
inline bool SettingsArchive::_internal_has_hyphenation() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SettingsArchive::has_hyphenation() const {
  return _internal_has_hyphenation();
}
inline void SettingsArchive::clear_hyphenation() {
  hyphenation_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool SettingsArchive::_internal_hyphenation() const {
  return hyphenation_;
}
inline bool SettingsArchive::hyphenation() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.hyphenation)
  return _internal_hyphenation();
}
inline void SettingsArchive::_internal_set_hyphenation(bool value) {
  _has_bits_[0] |= 0x00000200u;
  hyphenation_ = value;
}
inline void SettingsArchive::set_hyphenation(bool value) {
  _internal_set_hyphenation(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.hyphenation)
}

// optional bool use_ligatures = 10 [default = false];
inline bool SettingsArchive::_internal_has_use_ligatures() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SettingsArchive::has_use_ligatures() const {
  return _internal_has_use_ligatures();
}
inline void SettingsArchive::clear_use_ligatures() {
  use_ligatures_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool SettingsArchive::_internal_use_ligatures() const {
  return use_ligatures_;
}
inline bool SettingsArchive::use_ligatures() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.use_ligatures)
  return _internal_use_ligatures();
}
inline void SettingsArchive::_internal_set_use_ligatures(bool value) {
  _has_bits_[0] |= 0x00000400u;
  use_ligatures_ = value;
}
inline void SettingsArchive::set_use_ligatures(bool value) {
  _internal_set_use_ligatures(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.use_ligatures)
}

// optional bool toc_links_enabled = 11 [default = false];
inline bool SettingsArchive::_internal_has_toc_links_enabled() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SettingsArchive::has_toc_links_enabled() const {
  return _internal_has_toc_links_enabled();
}
inline void SettingsArchive::clear_toc_links_enabled() {
  toc_links_enabled_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool SettingsArchive::_internal_toc_links_enabled() const {
  return toc_links_enabled_;
}
inline bool SettingsArchive::toc_links_enabled() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.toc_links_enabled)
  return _internal_toc_links_enabled();
}
inline void SettingsArchive::_internal_set_toc_links_enabled(bool value) {
  _has_bits_[0] |= 0x00000800u;
  toc_links_enabled_ = value;
}
inline void SettingsArchive::set_toc_links_enabled(bool value) {
  _internal_set_toc_links_enabled(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.toc_links_enabled)
}

// optional bool show_ct_markup = 12 [default = true];
inline bool SettingsArchive::_internal_has_show_ct_markup() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool SettingsArchive::has_show_ct_markup() const {
  return _internal_has_show_ct_markup();
}
inline void SettingsArchive::clear_show_ct_markup() {
  show_ct_markup_ = true;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool SettingsArchive::_internal_show_ct_markup() const {
  return show_ct_markup_;
}
inline bool SettingsArchive::show_ct_markup() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.show_ct_markup)
  return _internal_show_ct_markup();
}
inline void SettingsArchive::_internal_set_show_ct_markup(bool value) {
  _has_bits_[0] |= 0x80000000u;
  show_ct_markup_ = value;
}
inline void SettingsArchive::set_show_ct_markup(bool value) {
  _internal_set_show_ct_markup(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.show_ct_markup)
}

// optional bool show_ct_deletions = 13 [default = true];
inline bool SettingsArchive::_internal_has_show_ct_deletions() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SettingsArchive::has_show_ct_deletions() const {
  return _internal_has_show_ct_deletions();
}
inline void SettingsArchive::clear_show_ct_deletions() {
  show_ct_deletions_ = true;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool SettingsArchive::_internal_show_ct_deletions() const {
  return show_ct_deletions_;
}
inline bool SettingsArchive::show_ct_deletions() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.show_ct_deletions)
  return _internal_show_ct_deletions();
}
inline void SettingsArchive::_internal_set_show_ct_deletions(bool value) {
  _has_bits_[0] |= 0x00100000u;
  show_ct_deletions_ = value;
}
inline void SettingsArchive::set_show_ct_deletions(bool value) {
  _internal_set_show_ct_deletions(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.show_ct_deletions)
}

// optional int32 ct_bubbles_visibility = 14;
inline bool SettingsArchive::_internal_has_ct_bubbles_visibility() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SettingsArchive::has_ct_bubbles_visibility() const {
  return _internal_has_ct_bubbles_visibility();
}
inline void SettingsArchive::clear_ct_bubbles_visibility() {
  ct_bubbles_visibility_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettingsArchive::_internal_ct_bubbles_visibility() const {
  return ct_bubbles_visibility_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettingsArchive::ct_bubbles_visibility() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.ct_bubbles_visibility)
  return _internal_ct_bubbles_visibility();
}
inline void SettingsArchive::_internal_set_ct_bubbles_visibility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  ct_bubbles_visibility_ = value;
}
inline void SettingsArchive::set_ct_bubbles_visibility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ct_bubbles_visibility(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.ct_bubbles_visibility)
}

// optional bool change_bars_visible = 15 [default = true];
inline bool SettingsArchive::_internal_has_change_bars_visible() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SettingsArchive::has_change_bars_visible() const {
  return _internal_has_change_bars_visible();
}
inline void SettingsArchive::clear_change_bars_visible() {
  change_bars_visible_ = true;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool SettingsArchive::_internal_change_bars_visible() const {
  return change_bars_visible_;
}
inline bool SettingsArchive::change_bars_visible() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.change_bars_visible)
  return _internal_change_bars_visible();
}
inline void SettingsArchive::_internal_set_change_bars_visible(bool value) {
  _has_bits_[0] |= 0x00200000u;
  change_bars_visible_ = value;
}
inline void SettingsArchive::set_change_bars_visible(bool value) {
  _internal_set_change_bars_visible(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.change_bars_visible)
}

// optional bool format_changes_visible = 16 [default = true];
inline bool SettingsArchive::_internal_has_format_changes_visible() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SettingsArchive::has_format_changes_visible() const {
  return _internal_has_format_changes_visible();
}
inline void SettingsArchive::clear_format_changes_visible() {
  format_changes_visible_ = true;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool SettingsArchive::_internal_format_changes_visible() const {
  return format_changes_visible_;
}
inline bool SettingsArchive::format_changes_visible() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.format_changes_visible)
  return _internal_format_changes_visible();
}
inline void SettingsArchive::_internal_set_format_changes_visible(bool value) {
  _has_bits_[0] |= 0x00400000u;
  format_changes_visible_ = value;
}
inline void SettingsArchive::set_format_changes_visible(bool value) {
  _internal_set_format_changes_visible(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.format_changes_visible)
}

// optional bool annotations_visible = 17 [default = true];
inline bool SettingsArchive::_internal_has_annotations_visible() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SettingsArchive::has_annotations_visible() const {
  return _internal_has_annotations_visible();
}
inline void SettingsArchive::clear_annotations_visible() {
  annotations_visible_ = true;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool SettingsArchive::_internal_annotations_visible() const {
  return annotations_visible_;
}
inline bool SettingsArchive::annotations_visible() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.annotations_visible)
  return _internal_annotations_visible();
}
inline void SettingsArchive::_internal_set_annotations_visible(bool value) {
  _has_bits_[0] |= 0x00800000u;
  annotations_visible_ = value;
}
inline void SettingsArchive::set_annotations_visible(bool value) {
  _internal_set_annotations_visible(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.annotations_visible)
}

// optional bool document_is_rtl = 18 [default = false];
inline bool SettingsArchive::_internal_has_document_is_rtl() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SettingsArchive::has_document_is_rtl() const {
  return _internal_has_document_is_rtl();
}
inline void SettingsArchive::clear_document_is_rtl() {
  document_is_rtl_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool SettingsArchive::_internal_document_is_rtl() const {
  return document_is_rtl_;
}
inline bool SettingsArchive::document_is_rtl() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.document_is_rtl)
  return _internal_document_is_rtl();
}
inline void SettingsArchive::_internal_set_document_is_rtl(bool value) {
  _has_bits_[0] |= 0x00004000u;
  document_is_rtl_ = value;
}
inline void SettingsArchive::set_document_is_rtl(bool value) {
  _internal_set_document_is_rtl(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.document_is_rtl)
}

// optional string decimal_tab = 20;
inline bool SettingsArchive::_internal_has_decimal_tab() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SettingsArchive::has_decimal_tab() const {
  return _internal_has_decimal_tab();
}
inline void SettingsArchive::clear_decimal_tab() {
  decimal_tab_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SettingsArchive::decimal_tab() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.decimal_tab)
  return _internal_decimal_tab();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SettingsArchive::set_decimal_tab(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 decimal_tab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.decimal_tab)
}
inline std::string* SettingsArchive::mutable_decimal_tab() {
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.decimal_tab)
  return _internal_mutable_decimal_tab();
}
inline const std::string& SettingsArchive::_internal_decimal_tab() const {
  return decimal_tab_.Get();
}
inline void SettingsArchive::_internal_set_decimal_tab(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  decimal_tab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SettingsArchive::_internal_mutable_decimal_tab() {
  _has_bits_[0] |= 0x00000001u;
  return decimal_tab_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettingsArchive::release_decimal_tab() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.decimal_tab)
  if (!_internal_has_decimal_tab()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return decimal_tab_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettingsArchive::set_allocated_decimal_tab(std::string* decimal_tab) {
  if (decimal_tab != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  decimal_tab_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decimal_tab,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.decimal_tab)
}

// optional string language = 21;
inline bool SettingsArchive::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SettingsArchive::has_language() const {
  return _internal_has_language();
}
inline void SettingsArchive::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SettingsArchive::language() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SettingsArchive::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.language)
}
inline std::string* SettingsArchive::mutable_language() {
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.language)
  return _internal_mutable_language();
}
inline const std::string& SettingsArchive::_internal_language() const {
  return language_.Get();
}
inline void SettingsArchive::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SettingsArchive::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000002u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettingsArchive::release_language() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettingsArchive::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.language)
}

// optional string hyphenation_language = 22;
inline bool SettingsArchive::_internal_has_hyphenation_language() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SettingsArchive::has_hyphenation_language() const {
  return _internal_has_hyphenation_language();
}
inline void SettingsArchive::clear_hyphenation_language() {
  hyphenation_language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SettingsArchive::hyphenation_language() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.hyphenation_language)
  return _internal_hyphenation_language();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SettingsArchive::set_hyphenation_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 hyphenation_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.hyphenation_language)
}
inline std::string* SettingsArchive::mutable_hyphenation_language() {
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.hyphenation_language)
  return _internal_mutable_hyphenation_language();
}
inline const std::string& SettingsArchive::_internal_hyphenation_language() const {
  return hyphenation_language_.Get();
}
inline void SettingsArchive::_internal_set_hyphenation_language(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  hyphenation_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SettingsArchive::_internal_mutable_hyphenation_language() {
  _has_bits_[0] |= 0x00000004u;
  return hyphenation_language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettingsArchive::release_hyphenation_language() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.hyphenation_language)
  if (!_internal_has_hyphenation_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return hyphenation_language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettingsArchive::set_allocated_hyphenation_language(std::string* hyphenation_language) {
  if (hyphenation_language != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hyphenation_language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hyphenation_language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.hyphenation_language)
}

// optional string creation_locale = 23;
inline bool SettingsArchive::_internal_has_creation_locale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SettingsArchive::has_creation_locale() const {
  return _internal_has_creation_locale();
}
inline void SettingsArchive::clear_creation_locale() {
  creation_locale_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SettingsArchive::creation_locale() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.creation_locale)
  return _internal_creation_locale();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SettingsArchive::set_creation_locale(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 creation_locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.creation_locale)
}
inline std::string* SettingsArchive::mutable_creation_locale() {
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.creation_locale)
  return _internal_mutable_creation_locale();
}
inline const std::string& SettingsArchive::_internal_creation_locale() const {
  return creation_locale_.Get();
}
inline void SettingsArchive::_internal_set_creation_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  creation_locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SettingsArchive::_internal_mutable_creation_locale() {
  _has_bits_[0] |= 0x00000008u;
  return creation_locale_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettingsArchive::release_creation_locale() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.creation_locale)
  if (!_internal_has_creation_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return creation_locale_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettingsArchive::set_allocated_creation_locale(std::string* creation_locale) {
  if (creation_locale != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  creation_locale_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creation_locale,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.creation_locale)
}

// optional string last_locale = 24;
inline bool SettingsArchive::_internal_has_last_locale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SettingsArchive::has_last_locale() const {
  return _internal_has_last_locale();
}
inline void SettingsArchive::clear_last_locale() {
  last_locale_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SettingsArchive::last_locale() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.last_locale)
  return _internal_last_locale();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SettingsArchive::set_last_locale(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 last_locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.last_locale)
}
inline std::string* SettingsArchive::mutable_last_locale() {
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.last_locale)
  return _internal_mutable_last_locale();
}
inline const std::string& SettingsArchive::_internal_last_locale() const {
  return last_locale_.Get();
}
inline void SettingsArchive::_internal_set_last_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  last_locale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SettingsArchive::_internal_mutable_last_locale() {
  _has_bits_[0] |= 0x00000010u;
  return last_locale_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettingsArchive::release_last_locale() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.last_locale)
  if (!_internal_has_last_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return last_locale_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettingsArchive::set_allocated_last_locale(std::string* last_locale) {
  if (last_locale != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  last_locale_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_locale,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.last_locale)
}

// optional string orig_template = 25;
inline bool SettingsArchive::_internal_has_orig_template() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SettingsArchive::has_orig_template() const {
  return _internal_has_orig_template();
}
inline void SettingsArchive::clear_orig_template() {
  orig_template_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SettingsArchive::orig_template() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.orig_template)
  return _internal_orig_template();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SettingsArchive::set_orig_template(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 orig_template_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.orig_template)
}
inline std::string* SettingsArchive::mutable_orig_template() {
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.orig_template)
  return _internal_mutable_orig_template();
}
inline const std::string& SettingsArchive::_internal_orig_template() const {
  return orig_template_.Get();
}
inline void SettingsArchive::_internal_set_orig_template(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  orig_template_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SettingsArchive::_internal_mutable_orig_template() {
  _has_bits_[0] |= 0x00000020u;
  return orig_template_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettingsArchive::release_orig_template() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.orig_template)
  if (!_internal_has_orig_template()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return orig_template_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettingsArchive::set_allocated_orig_template(std::string* orig_template) {
  if (orig_template != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  orig_template_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orig_template,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.orig_template)
}

// optional string creation_date = 26;
inline bool SettingsArchive::_internal_has_creation_date() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SettingsArchive::has_creation_date() const {
  return _internal_has_creation_date();
}
inline void SettingsArchive::clear_creation_date() {
  creation_date_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& SettingsArchive::creation_date() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.creation_date)
  return _internal_creation_date();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SettingsArchive::set_creation_date(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 creation_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.creation_date)
}
inline std::string* SettingsArchive::mutable_creation_date() {
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.creation_date)
  return _internal_mutable_creation_date();
}
inline const std::string& SettingsArchive::_internal_creation_date() const {
  return creation_date_.Get();
}
inline void SettingsArchive::_internal_set_creation_date(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  creation_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SettingsArchive::_internal_mutable_creation_date() {
  _has_bits_[0] |= 0x00000040u;
  return creation_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettingsArchive::release_creation_date() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.creation_date)
  if (!_internal_has_creation_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return creation_date_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettingsArchive::set_allocated_creation_date(std::string* creation_date) {
  if (creation_date != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  creation_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creation_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.creation_date)
}

// optional string bibliography_format = 27;
inline bool SettingsArchive::_internal_has_bibliography_format() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SettingsArchive::has_bibliography_format() const {
  return _internal_has_bibliography_format();
}
inline void SettingsArchive::clear_bibliography_format() {
  bibliography_format_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& SettingsArchive::bibliography_format() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.bibliography_format)
  return _internal_bibliography_format();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SettingsArchive::set_bibliography_format(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 bibliography_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.bibliography_format)
}
inline std::string* SettingsArchive::mutable_bibliography_format() {
  // @@protoc_insertion_point(field_mutable:TP.SettingsArchive.bibliography_format)
  return _internal_mutable_bibliography_format();
}
inline const std::string& SettingsArchive::_internal_bibliography_format() const {
  return bibliography_format_.Get();
}
inline void SettingsArchive::_internal_set_bibliography_format(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  bibliography_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SettingsArchive::_internal_mutable_bibliography_format() {
  _has_bits_[0] |= 0x00000080u;
  return bibliography_format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettingsArchive::release_bibliography_format() {
  // @@protoc_insertion_point(field_release:TP.SettingsArchive.bibliography_format)
  if (!_internal_has_bibliography_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return bibliography_format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettingsArchive::set_allocated_bibliography_format(std::string* bibliography_format) {
  if (bibliography_format != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  bibliography_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bibliography_format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.SettingsArchive.bibliography_format)
}

// optional .TP.SettingsArchive.FootnoteKind footnote_kind = 30;
inline bool SettingsArchive::_internal_has_footnote_kind() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SettingsArchive::has_footnote_kind() const {
  return _internal_has_footnote_kind();
}
inline void SettingsArchive::clear_footnote_kind() {
  footnote_kind_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::TP::SettingsArchive_FootnoteKind SettingsArchive::_internal_footnote_kind() const {
  return static_cast< ::TP::SettingsArchive_FootnoteKind >(footnote_kind_);
}
inline ::TP::SettingsArchive_FootnoteKind SettingsArchive::footnote_kind() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.footnote_kind)
  return _internal_footnote_kind();
}
inline void SettingsArchive::_internal_set_footnote_kind(::TP::SettingsArchive_FootnoteKind value) {
  assert(::TP::SettingsArchive_FootnoteKind_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  footnote_kind_ = value;
}
inline void SettingsArchive::set_footnote_kind(::TP::SettingsArchive_FootnoteKind value) {
  _internal_set_footnote_kind(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.footnote_kind)
}

// optional .TP.SettingsArchive.FootnoteFormat footnote_format = 31;
inline bool SettingsArchive::_internal_has_footnote_format() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SettingsArchive::has_footnote_format() const {
  return _internal_has_footnote_format();
}
inline void SettingsArchive::clear_footnote_format() {
  footnote_format_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::TP::SettingsArchive_FootnoteFormat SettingsArchive::_internal_footnote_format() const {
  return static_cast< ::TP::SettingsArchive_FootnoteFormat >(footnote_format_);
}
inline ::TP::SettingsArchive_FootnoteFormat SettingsArchive::footnote_format() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.footnote_format)
  return _internal_footnote_format();
}
inline void SettingsArchive::_internal_set_footnote_format(::TP::SettingsArchive_FootnoteFormat value) {
  assert(::TP::SettingsArchive_FootnoteFormat_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  footnote_format_ = value;
}
inline void SettingsArchive::set_footnote_format(::TP::SettingsArchive_FootnoteFormat value) {
  _internal_set_footnote_format(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.footnote_format)
}

// optional .TP.SettingsArchive.FootnoteNumbering footnote_numbering = 32;
inline bool SettingsArchive::_internal_has_footnote_numbering() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SettingsArchive::has_footnote_numbering() const {
  return _internal_has_footnote_numbering();
}
inline void SettingsArchive::clear_footnote_numbering() {
  footnote_numbering_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::TP::SettingsArchive_FootnoteNumbering SettingsArchive::_internal_footnote_numbering() const {
  return static_cast< ::TP::SettingsArchive_FootnoteNumbering >(footnote_numbering_);
}
inline ::TP::SettingsArchive_FootnoteNumbering SettingsArchive::footnote_numbering() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.footnote_numbering)
  return _internal_footnote_numbering();
}
inline void SettingsArchive::_internal_set_footnote_numbering(::TP::SettingsArchive_FootnoteNumbering value) {
  assert(::TP::SettingsArchive_FootnoteNumbering_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  footnote_numbering_ = value;
}
inline void SettingsArchive::set_footnote_numbering(::TP::SettingsArchive_FootnoteNumbering value) {
  _internal_set_footnote_numbering(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.footnote_numbering)
}

// optional int32 footnote_gap = 33;
inline bool SettingsArchive::_internal_has_footnote_gap() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SettingsArchive::has_footnote_gap() const {
  return _internal_has_footnote_gap();
}
inline void SettingsArchive::clear_footnote_gap() {
  footnote_gap_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettingsArchive::_internal_footnote_gap() const {
  return footnote_gap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettingsArchive::footnote_gap() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.footnote_gap)
  return _internal_footnote_gap();
}
inline void SettingsArchive::_internal_set_footnote_gap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  footnote_gap_ = value;
}
inline void SettingsArchive::set_footnote_gap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_footnote_gap(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.footnote_gap)
}

// optional bool facing_pages = 34 [default = false];
inline bool SettingsArchive::_internal_has_facing_pages() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SettingsArchive::has_facing_pages() const {
  return _internal_has_facing_pages();
}
inline void SettingsArchive::clear_facing_pages() {
  facing_pages_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool SettingsArchive::_internal_facing_pages() const {
  return facing_pages_;
}
inline bool SettingsArchive::facing_pages() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.facing_pages)
  return _internal_facing_pages();
}
inline void SettingsArchive::_internal_set_facing_pages(bool value) {
  _has_bits_[0] |= 0x00008000u;
  facing_pages_ = value;
}
inline void SettingsArchive::set_facing_pages(bool value) {
  _internal_set_facing_pages(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.facing_pages)
}

// optional bool section_authoring = 40 [default = false];
inline bool SettingsArchive::_internal_has_section_authoring() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SettingsArchive::has_section_authoring() const {
  return _internal_has_section_authoring();
}
inline void SettingsArchive::clear_section_authoring() {
  section_authoring_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool SettingsArchive::_internal_section_authoring() const {
  return section_authoring_;
}
inline bool SettingsArchive::section_authoring() const {
  // @@protoc_insertion_point(field_get:TP.SettingsArchive.section_authoring)
  return _internal_section_authoring();
}
inline void SettingsArchive::_internal_set_section_authoring(bool value) {
  _has_bits_[0] |= 0x00010000u;
  section_authoring_ = value;
}
inline void SettingsArchive::set_section_authoring(bool value) {
  _internal_set_section_authoring(value);
  // @@protoc_insertion_point(field_set:TP.SettingsArchive.section_authoring)
}

// -------------------------------------------------------------------

// PlaceholderArchive

// required .TSWP.ShapeInfoArchive super = 1;
inline bool PlaceholderArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool PlaceholderArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::_internal_super() const {
  const ::TSWP::ShapeInfoArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeInfoArchive&>(
      ::TSWP::_ShapeInfoArchive_default_instance_);
}
inline const ::TSWP::ShapeInfoArchive& PlaceholderArchive::super() const {
  // @@protoc_insertion_point(field_get:TP.PlaceholderArchive.super)
  return _internal_super();
}
inline void PlaceholderArchive::unsafe_arena_set_allocated_super(
    ::TSWP::ShapeInfoArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PlaceholderArchive.super)
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TP.PlaceholderArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeInfoArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::ShapeInfoArchive* PlaceholderArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TP.PlaceholderArchive.super)
  return _internal_mutable_super();
}
inline void PlaceholderArchive::set_allocated_super(::TSWP::ShapeInfoArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TP.PlaceholderArchive.super)
}

// -------------------------------------------------------------------

// DrawableTagPairsArchive_DrawableTagPair

// required string tag = 1;
inline bool DrawableTagPairsArchive_DrawableTagPair::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrawableTagPairsArchive_DrawableTagPair::has_tag() const {
  return _internal_has_tag();
}
inline void DrawableTagPairsArchive_DrawableTagPair::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrawableTagPairsArchive_DrawableTagPair::tag() const {
  // @@protoc_insertion_point(field_get:TP.DrawableTagPairsArchive.DrawableTagPair.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DrawableTagPairsArchive_DrawableTagPair::set_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.DrawableTagPairsArchive.DrawableTagPair.tag)
}
inline std::string* DrawableTagPairsArchive_DrawableTagPair::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:TP.DrawableTagPairsArchive.DrawableTagPair.tag)
  return _internal_mutable_tag();
}
inline const std::string& DrawableTagPairsArchive_DrawableTagPair::_internal_tag() const {
  return tag_.Get();
}
inline void DrawableTagPairsArchive_DrawableTagPair::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DrawableTagPairsArchive_DrawableTagPair::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrawableTagPairsArchive_DrawableTagPair::release_tag() {
  // @@protoc_insertion_point(field_release:TP.DrawableTagPairsArchive.DrawableTagPair.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawableTagPairsArchive_DrawableTagPair::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.DrawableTagPairsArchive.DrawableTagPair.tag)
}

// required .TSP.Reference drawable = 2;
inline bool DrawableTagPairsArchive_DrawableTagPair::_internal_has_drawable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || drawable_ != nullptr);
  return value;
}
inline bool DrawableTagPairsArchive_DrawableTagPair::has_drawable() const {
  return _internal_has_drawable();
}
inline const ::TSP::Reference& DrawableTagPairsArchive_DrawableTagPair::_internal_drawable() const {
  const ::TSP::Reference* p = drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableTagPairsArchive_DrawableTagPair::drawable() const {
  // @@protoc_insertion_point(field_get:TP.DrawableTagPairsArchive.DrawableTagPair.drawable)
  return _internal_drawable();
}
inline void DrawableTagPairsArchive_DrawableTagPair::unsafe_arena_set_allocated_drawable(
    ::TSP::Reference* drawable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  drawable_ = drawable;
  if (drawable) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.DrawableTagPairsArchive.DrawableTagPair.drawable)
}
inline ::TSP::Reference* DrawableTagPairsArchive_DrawableTagPair::release_drawable() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DrawableTagPairsArchive_DrawableTagPair::unsafe_arena_release_drawable() {
  // @@protoc_insertion_point(field_release:TP.DrawableTagPairsArchive.DrawableTagPair.drawable)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableTagPairsArchive_DrawableTagPair::_internal_mutable_drawable() {
  _has_bits_[0] |= 0x00000002u;
  if (drawable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    drawable_ = p;
  }
  return drawable_;
}
inline ::TSP::Reference* DrawableTagPairsArchive_DrawableTagPair::mutable_drawable() {
  // @@protoc_insertion_point(field_mutable:TP.DrawableTagPairsArchive.DrawableTagPair.drawable)
  return _internal_mutable_drawable();
}
inline void DrawableTagPairsArchive_DrawableTagPair::set_allocated_drawable(::TSP::Reference* drawable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  if (drawable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable)->GetArena();
    if (message_arena != submessage_arena) {
      drawable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  drawable_ = drawable;
  // @@protoc_insertion_point(field_set_allocated:TP.DrawableTagPairsArchive.DrawableTagPair.drawable)
}

// -------------------------------------------------------------------

// DrawableTagPairsArchive

// repeated .TP.DrawableTagPairsArchive.DrawableTagPair drawable_tag_pairs = 1;
inline int DrawableTagPairsArchive::_internal_drawable_tag_pairs_size() const {
  return drawable_tag_pairs_.size();
}
inline int DrawableTagPairsArchive::drawable_tag_pairs_size() const {
  return _internal_drawable_tag_pairs_size();
}
inline void DrawableTagPairsArchive::clear_drawable_tag_pairs() {
  drawable_tag_pairs_.Clear();
}
inline ::TP::DrawableTagPairsArchive_DrawableTagPair* DrawableTagPairsArchive::mutable_drawable_tag_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:TP.DrawableTagPairsArchive.drawable_tag_pairs)
  return drawable_tag_pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::DrawableTagPairsArchive_DrawableTagPair >*
DrawableTagPairsArchive::mutable_drawable_tag_pairs() {
  // @@protoc_insertion_point(field_mutable_list:TP.DrawableTagPairsArchive.drawable_tag_pairs)
  return &drawable_tag_pairs_;
}
inline const ::TP::DrawableTagPairsArchive_DrawableTagPair& DrawableTagPairsArchive::_internal_drawable_tag_pairs(int index) const {
  return drawable_tag_pairs_.Get(index);
}
inline const ::TP::DrawableTagPairsArchive_DrawableTagPair& DrawableTagPairsArchive::drawable_tag_pairs(int index) const {
  // @@protoc_insertion_point(field_get:TP.DrawableTagPairsArchive.drawable_tag_pairs)
  return _internal_drawable_tag_pairs(index);
}
inline ::TP::DrawableTagPairsArchive_DrawableTagPair* DrawableTagPairsArchive::_internal_add_drawable_tag_pairs() {
  return drawable_tag_pairs_.Add();
}
inline ::TP::DrawableTagPairsArchive_DrawableTagPair* DrawableTagPairsArchive::add_drawable_tag_pairs() {
  // @@protoc_insertion_point(field_add:TP.DrawableTagPairsArchive.drawable_tag_pairs)
  return _internal_add_drawable_tag_pairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::DrawableTagPairsArchive_DrawableTagPair >&
DrawableTagPairsArchive::drawable_tag_pairs() const {
  // @@protoc_insertion_point(field_list:TP.DrawableTagPairsArchive.drawable_tag_pairs)
  return drawable_tag_pairs_;
}

// -------------------------------------------------------------------

// FloatingDrawablesArchive_DrawableEntry

// optional .TSP.Reference drawable = 1;
inline bool FloatingDrawablesArchive_DrawableEntry::_internal_has_drawable() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || drawable_ != nullptr);
  return value;
}
inline bool FloatingDrawablesArchive_DrawableEntry::has_drawable() const {
  return _internal_has_drawable();
}
inline const ::TSP::Reference& FloatingDrawablesArchive_DrawableEntry::_internal_drawable() const {
  const ::TSP::Reference* p = drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FloatingDrawablesArchive_DrawableEntry::drawable() const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.DrawableEntry.drawable)
  return _internal_drawable();
}
inline void FloatingDrawablesArchive_DrawableEntry::unsafe_arena_set_allocated_drawable(
    ::TSP::Reference* drawable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  drawable_ = drawable;
  if (drawable) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.FloatingDrawablesArchive.DrawableEntry.drawable)
}
inline ::TSP::Reference* FloatingDrawablesArchive_DrawableEntry::release_drawable() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* FloatingDrawablesArchive_DrawableEntry::unsafe_arena_release_drawable() {
  // @@protoc_insertion_point(field_release:TP.FloatingDrawablesArchive.DrawableEntry.drawable)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FloatingDrawablesArchive_DrawableEntry::_internal_mutable_drawable() {
  _has_bits_[0] |= 0x00000001u;
  if (drawable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    drawable_ = p;
  }
  return drawable_;
}
inline ::TSP::Reference* FloatingDrawablesArchive_DrawableEntry::mutable_drawable() {
  // @@protoc_insertion_point(field_mutable:TP.FloatingDrawablesArchive.DrawableEntry.drawable)
  return _internal_mutable_drawable();
}
inline void FloatingDrawablesArchive_DrawableEntry::set_allocated_drawable(::TSP::Reference* drawable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  if (drawable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable)->GetArena();
    if (message_arena != submessage_arena) {
      drawable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  drawable_ = drawable;
  // @@protoc_insertion_point(field_set_allocated:TP.FloatingDrawablesArchive.DrawableEntry.drawable)
}

// -------------------------------------------------------------------

// FloatingDrawablesArchive_PageGroup

// required uint32 page_index = 1;
inline bool FloatingDrawablesArchive_PageGroup::_internal_has_page_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FloatingDrawablesArchive_PageGroup::has_page_index() const {
  return _internal_has_page_index();
}
inline void FloatingDrawablesArchive_PageGroup::clear_page_index() {
  page_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FloatingDrawablesArchive_PageGroup::_internal_page_index() const {
  return page_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FloatingDrawablesArchive_PageGroup::page_index() const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.PageGroup.page_index)
  return _internal_page_index();
}
inline void FloatingDrawablesArchive_PageGroup::_internal_set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  page_index_ = value;
}
inline void FloatingDrawablesArchive_PageGroup::set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_index(value);
  // @@protoc_insertion_point(field_set:TP.FloatingDrawablesArchive.PageGroup.page_index)
}

// repeated .TP.FloatingDrawablesArchive.DrawableEntry background_drawables = 2;
inline int FloatingDrawablesArchive_PageGroup::_internal_background_drawables_size() const {
  return background_drawables_.size();
}
inline int FloatingDrawablesArchive_PageGroup::background_drawables_size() const {
  return _internal_background_drawables_size();
}
inline void FloatingDrawablesArchive_PageGroup::clear_background_drawables() {
  background_drawables_.Clear();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::mutable_background_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.FloatingDrawablesArchive.PageGroup.background_drawables)
  return background_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
FloatingDrawablesArchive_PageGroup::mutable_background_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.FloatingDrawablesArchive.PageGroup.background_drawables)
  return &background_drawables_;
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::_internal_background_drawables(int index) const {
  return background_drawables_.Get(index);
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::background_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.PageGroup.background_drawables)
  return _internal_background_drawables(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::_internal_add_background_drawables() {
  return background_drawables_.Add();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::add_background_drawables() {
  // @@protoc_insertion_point(field_add:TP.FloatingDrawablesArchive.PageGroup.background_drawables)
  return _internal_add_background_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
FloatingDrawablesArchive_PageGroup::background_drawables() const {
  // @@protoc_insertion_point(field_list:TP.FloatingDrawablesArchive.PageGroup.background_drawables)
  return background_drawables_;
}

// repeated .TP.FloatingDrawablesArchive.DrawableEntry foreground_drawables = 3;
inline int FloatingDrawablesArchive_PageGroup::_internal_foreground_drawables_size() const {
  return foreground_drawables_.size();
}
inline int FloatingDrawablesArchive_PageGroup::foreground_drawables_size() const {
  return _internal_foreground_drawables_size();
}
inline void FloatingDrawablesArchive_PageGroup::clear_foreground_drawables() {
  foreground_drawables_.Clear();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::mutable_foreground_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.FloatingDrawablesArchive.PageGroup.foreground_drawables)
  return foreground_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
FloatingDrawablesArchive_PageGroup::mutable_foreground_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.FloatingDrawablesArchive.PageGroup.foreground_drawables)
  return &foreground_drawables_;
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::_internal_foreground_drawables(int index) const {
  return foreground_drawables_.Get(index);
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::foreground_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.PageGroup.foreground_drawables)
  return _internal_foreground_drawables(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::_internal_add_foreground_drawables() {
  return foreground_drawables_.Add();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::add_foreground_drawables() {
  // @@protoc_insertion_point(field_add:TP.FloatingDrawablesArchive.PageGroup.foreground_drawables)
  return _internal_add_foreground_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
FloatingDrawablesArchive_PageGroup::foreground_drawables() const {
  // @@protoc_insertion_point(field_list:TP.FloatingDrawablesArchive.PageGroup.foreground_drawables)
  return foreground_drawables_;
}

// repeated .TP.FloatingDrawablesArchive.DrawableEntry drawables = 4;
inline int FloatingDrawablesArchive_PageGroup::_internal_drawables_size() const {
  return drawables_.size();
}
inline int FloatingDrawablesArchive_PageGroup::drawables_size() const {
  return _internal_drawables_size();
}
inline void FloatingDrawablesArchive_PageGroup::clear_drawables() {
  drawables_.Clear();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.FloatingDrawablesArchive.PageGroup.drawables)
  return drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >*
FloatingDrawablesArchive_PageGroup::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.FloatingDrawablesArchive.PageGroup.drawables)
  return &drawables_;
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::_internal_drawables(int index) const {
  return drawables_.Get(index);
}
inline const ::TP::FloatingDrawablesArchive_DrawableEntry& FloatingDrawablesArchive_PageGroup::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.PageGroup.drawables)
  return _internal_drawables(index);
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::_internal_add_drawables() {
  return drawables_.Add();
}
inline ::TP::FloatingDrawablesArchive_DrawableEntry* FloatingDrawablesArchive_PageGroup::add_drawables() {
  // @@protoc_insertion_point(field_add:TP.FloatingDrawablesArchive.PageGroup.drawables)
  return _internal_add_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_DrawableEntry >&
FloatingDrawablesArchive_PageGroup::drawables() const {
  // @@protoc_insertion_point(field_list:TP.FloatingDrawablesArchive.PageGroup.drawables)
  return drawables_;
}

// -------------------------------------------------------------------

// FloatingDrawablesArchive

// repeated .TP.FloatingDrawablesArchive.PageGroup page_groups = 1;
inline int FloatingDrawablesArchive::_internal_page_groups_size() const {
  return page_groups_.size();
}
inline int FloatingDrawablesArchive::page_groups_size() const {
  return _internal_page_groups_size();
}
inline void FloatingDrawablesArchive::clear_page_groups() {
  page_groups_.Clear();
}
inline ::TP::FloatingDrawablesArchive_PageGroup* FloatingDrawablesArchive::mutable_page_groups(int index) {
  // @@protoc_insertion_point(field_mutable:TP.FloatingDrawablesArchive.page_groups)
  return page_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >*
FloatingDrawablesArchive::mutable_page_groups() {
  // @@protoc_insertion_point(field_mutable_list:TP.FloatingDrawablesArchive.page_groups)
  return &page_groups_;
}
inline const ::TP::FloatingDrawablesArchive_PageGroup& FloatingDrawablesArchive::_internal_page_groups(int index) const {
  return page_groups_.Get(index);
}
inline const ::TP::FloatingDrawablesArchive_PageGroup& FloatingDrawablesArchive::page_groups(int index) const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.page_groups)
  return _internal_page_groups(index);
}
inline ::TP::FloatingDrawablesArchive_PageGroup* FloatingDrawablesArchive::_internal_add_page_groups() {
  return page_groups_.Add();
}
inline ::TP::FloatingDrawablesArchive_PageGroup* FloatingDrawablesArchive::add_page_groups() {
  // @@protoc_insertion_point(field_add:TP.FloatingDrawablesArchive.page_groups)
  return _internal_add_page_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::FloatingDrawablesArchive_PageGroup >&
FloatingDrawablesArchive::page_groups() const {
  // @@protoc_insertion_point(field_list:TP.FloatingDrawablesArchive.page_groups)
  return page_groups_;
}

// optional .TP.DrawableTagPairsArchive drawable_tag_pairs = 2;
inline bool FloatingDrawablesArchive::_internal_has_drawable_tag_pairs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || drawable_tag_pairs_ != nullptr);
  return value;
}
inline bool FloatingDrawablesArchive::has_drawable_tag_pairs() const {
  return _internal_has_drawable_tag_pairs();
}
inline void FloatingDrawablesArchive::clear_drawable_tag_pairs() {
  if (drawable_tag_pairs_ != nullptr) drawable_tag_pairs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TP::DrawableTagPairsArchive& FloatingDrawablesArchive::_internal_drawable_tag_pairs() const {
  const ::TP::DrawableTagPairsArchive* p = drawable_tag_pairs_;
  return p != nullptr ? *p : reinterpret_cast<const ::TP::DrawableTagPairsArchive&>(
      ::TP::_DrawableTagPairsArchive_default_instance_);
}
inline const ::TP::DrawableTagPairsArchive& FloatingDrawablesArchive::drawable_tag_pairs() const {
  // @@protoc_insertion_point(field_get:TP.FloatingDrawablesArchive.drawable_tag_pairs)
  return _internal_drawable_tag_pairs();
}
inline void FloatingDrawablesArchive::unsafe_arena_set_allocated_drawable_tag_pairs(
    ::TP::DrawableTagPairsArchive* drawable_tag_pairs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_tag_pairs_);
  }
  drawable_tag_pairs_ = drawable_tag_pairs;
  if (drawable_tag_pairs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.FloatingDrawablesArchive.drawable_tag_pairs)
}
inline ::TP::DrawableTagPairsArchive* FloatingDrawablesArchive::release_drawable_tag_pairs() {
  _has_bits_[0] &= ~0x00000001u;
  ::TP::DrawableTagPairsArchive* temp = drawable_tag_pairs_;
  drawable_tag_pairs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TP::DrawableTagPairsArchive* FloatingDrawablesArchive::unsafe_arena_release_drawable_tag_pairs() {
  // @@protoc_insertion_point(field_release:TP.FloatingDrawablesArchive.drawable_tag_pairs)
  _has_bits_[0] &= ~0x00000001u;
  ::TP::DrawableTagPairsArchive* temp = drawable_tag_pairs_;
  drawable_tag_pairs_ = nullptr;
  return temp;
}
inline ::TP::DrawableTagPairsArchive* FloatingDrawablesArchive::_internal_mutable_drawable_tag_pairs() {
  _has_bits_[0] |= 0x00000001u;
  if (drawable_tag_pairs_ == nullptr) {
    auto* p = CreateMaybeMessage<::TP::DrawableTagPairsArchive>(GetArena());
    drawable_tag_pairs_ = p;
  }
  return drawable_tag_pairs_;
}
inline ::TP::DrawableTagPairsArchive* FloatingDrawablesArchive::mutable_drawable_tag_pairs() {
  // @@protoc_insertion_point(field_mutable:TP.FloatingDrawablesArchive.drawable_tag_pairs)
  return _internal_mutable_drawable_tag_pairs();
}
inline void FloatingDrawablesArchive::set_allocated_drawable_tag_pairs(::TP::DrawableTagPairsArchive* drawable_tag_pairs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete drawable_tag_pairs_;
  }
  if (drawable_tag_pairs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(drawable_tag_pairs);
    if (message_arena != submessage_arena) {
      drawable_tag_pairs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable_tag_pairs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  drawable_tag_pairs_ = drawable_tag_pairs;
  // @@protoc_insertion_point(field_set_allocated:TP.FloatingDrawablesArchive.drawable_tag_pairs)
}

// -------------------------------------------------------------------

// DrawablesZOrderArchive

// repeated .TSP.Reference drawables = 1;
inline int DrawablesZOrderArchive::_internal_drawables_size() const {
  return drawables_.size();
}
inline int DrawablesZOrderArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* DrawablesZOrderArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.DrawablesZOrderArchive.drawables)
  return drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DrawablesZOrderArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.DrawablesZOrderArchive.drawables)
  return &drawables_;
}
inline const ::TSP::Reference& DrawablesZOrderArchive::_internal_drawables(int index) const {
  return drawables_.Get(index);
}
inline const ::TSP::Reference& DrawablesZOrderArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.DrawablesZOrderArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* DrawablesZOrderArchive::_internal_add_drawables() {
  return drawables_.Add();
}
inline ::TSP::Reference* DrawablesZOrderArchive::add_drawables() {
  // @@protoc_insertion_point(field_add:TP.DrawablesZOrderArchive.drawables)
  return _internal_add_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DrawablesZOrderArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TP.DrawablesZOrderArchive.drawables)
  return drawables_;
}

// -------------------------------------------------------------------

// PageMasterArchive

// repeated .TSP.Reference headers = 1;
inline int PageMasterArchive::_internal_headers_size() const {
  return headers_.size();
}
inline int PageMasterArchive::headers_size() const {
  return _internal_headers_size();
}
inline ::TSP::Reference* PageMasterArchive::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageMasterArchive.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PageMasterArchive::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageMasterArchive.headers)
  return &headers_;
}
inline const ::TSP::Reference& PageMasterArchive::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::TSP::Reference& PageMasterArchive::headers(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageMasterArchive.headers)
  return _internal_headers(index);
}
inline ::TSP::Reference* PageMasterArchive::_internal_add_headers() {
  return headers_.Add();
}
inline ::TSP::Reference* PageMasterArchive::add_headers() {
  // @@protoc_insertion_point(field_add:TP.PageMasterArchive.headers)
  return _internal_add_headers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PageMasterArchive::headers() const {
  // @@protoc_insertion_point(field_list:TP.PageMasterArchive.headers)
  return headers_;
}

// repeated .TSP.Reference footers = 2;
inline int PageMasterArchive::_internal_footers_size() const {
  return footers_.size();
}
inline int PageMasterArchive::footers_size() const {
  return _internal_footers_size();
}
inline ::TSP::Reference* PageMasterArchive::mutable_footers(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageMasterArchive.footers)
  return footers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PageMasterArchive::mutable_footers() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageMasterArchive.footers)
  return &footers_;
}
inline const ::TSP::Reference& PageMasterArchive::_internal_footers(int index) const {
  return footers_.Get(index);
}
inline const ::TSP::Reference& PageMasterArchive::footers(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageMasterArchive.footers)
  return _internal_footers(index);
}
inline ::TSP::Reference* PageMasterArchive::_internal_add_footers() {
  return footers_.Add();
}
inline ::TSP::Reference* PageMasterArchive::add_footers() {
  // @@protoc_insertion_point(field_add:TP.PageMasterArchive.footers)
  return _internal_add_footers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PageMasterArchive::footers() const {
  // @@protoc_insertion_point(field_list:TP.PageMasterArchive.footers)
  return footers_;
}

// repeated .TSP.Reference master_drawables = 3;
inline int PageMasterArchive::_internal_master_drawables_size() const {
  return master_drawables_.size();
}
inline int PageMasterArchive::master_drawables_size() const {
  return _internal_master_drawables_size();
}
inline ::TSP::Reference* PageMasterArchive::mutable_master_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageMasterArchive.master_drawables)
  return master_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PageMasterArchive::mutable_master_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageMasterArchive.master_drawables)
  return &master_drawables_;
}
inline const ::TSP::Reference& PageMasterArchive::_internal_master_drawables(int index) const {
  return master_drawables_.Get(index);
}
inline const ::TSP::Reference& PageMasterArchive::master_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageMasterArchive.master_drawables)
  return _internal_master_drawables(index);
}
inline ::TSP::Reference* PageMasterArchive::_internal_add_master_drawables() {
  return master_drawables_.Add();
}
inline ::TSP::Reference* PageMasterArchive::add_master_drawables() {
  // @@protoc_insertion_point(field_add:TP.PageMasterArchive.master_drawables)
  return _internal_add_master_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PageMasterArchive::master_drawables() const {
  // @@protoc_insertion_point(field_list:TP.PageMasterArchive.master_drawables)
  return master_drawables_;
}

// optional .TSP.UUIDPath page_template_uuidpath = 4;
inline bool PageMasterArchive::_internal_has_page_template_uuidpath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || page_template_uuidpath_ != nullptr);
  return value;
}
inline bool PageMasterArchive::has_page_template_uuidpath() const {
  return _internal_has_page_template_uuidpath();
}
inline const ::TSP::UUIDPath& PageMasterArchive::_internal_page_template_uuidpath() const {
  const ::TSP::UUIDPath* p = page_template_uuidpath_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& PageMasterArchive::page_template_uuidpath() const {
  // @@protoc_insertion_point(field_get:TP.PageMasterArchive.page_template_uuidpath)
  return _internal_page_template_uuidpath();
}
inline void PageMasterArchive::unsafe_arena_set_allocated_page_template_uuidpath(
    ::TSP::UUIDPath* page_template_uuidpath) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_template_uuidpath_);
  }
  page_template_uuidpath_ = page_template_uuidpath;
  if (page_template_uuidpath) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageMasterArchive.page_template_uuidpath)
}
inline ::TSP::UUIDPath* PageMasterArchive::release_page_template_uuidpath() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = page_template_uuidpath_;
  page_template_uuidpath_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* PageMasterArchive::unsafe_arena_release_page_template_uuidpath() {
  // @@protoc_insertion_point(field_release:TP.PageMasterArchive.page_template_uuidpath)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = page_template_uuidpath_;
  page_template_uuidpath_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* PageMasterArchive::_internal_mutable_page_template_uuidpath() {
  _has_bits_[0] |= 0x00000001u;
  if (page_template_uuidpath_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    page_template_uuidpath_ = p;
  }
  return page_template_uuidpath_;
}
inline ::TSP::UUIDPath* PageMasterArchive::mutable_page_template_uuidpath() {
  // @@protoc_insertion_point(field_mutable:TP.PageMasterArchive.page_template_uuidpath)
  return _internal_mutable_page_template_uuidpath();
}
inline void PageMasterArchive::set_allocated_page_template_uuidpath(::TSP::UUIDPath* page_template_uuidpath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_template_uuidpath_);
  }
  if (page_template_uuidpath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(page_template_uuidpath)->GetArena();
    if (message_arena != submessage_arena) {
      page_template_uuidpath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page_template_uuidpath, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  page_template_uuidpath_ = page_template_uuidpath;
  // @@protoc_insertion_point(field_set_allocated:TP.PageMasterArchive.page_template_uuidpath)
}

// -------------------------------------------------------------------

// PageTemplateArchive_TagDrawablePair

// required string tag = 1;
inline bool PageTemplateArchive_TagDrawablePair::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PageTemplateArchive_TagDrawablePair::has_tag() const {
  return _internal_has_tag();
}
inline void PageTemplateArchive_TagDrawablePair::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PageTemplateArchive_TagDrawablePair::tag() const {
  // @@protoc_insertion_point(field_get:TP.PageTemplateArchive.TagDrawablePair.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PageTemplateArchive_TagDrawablePair::set_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.PageTemplateArchive.TagDrawablePair.tag)
}
inline std::string* PageTemplateArchive_TagDrawablePair::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:TP.PageTemplateArchive.TagDrawablePair.tag)
  return _internal_mutable_tag();
}
inline const std::string& PageTemplateArchive_TagDrawablePair::_internal_tag() const {
  return tag_.Get();
}
inline void PageTemplateArchive_TagDrawablePair::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* PageTemplateArchive_TagDrawablePair::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PageTemplateArchive_TagDrawablePair::release_tag() {
  // @@protoc_insertion_point(field_release:TP.PageTemplateArchive.TagDrawablePair.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PageTemplateArchive_TagDrawablePair::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.PageTemplateArchive.TagDrawablePair.tag)
}

// required .TSP.Reference drawable = 2;
inline bool PageTemplateArchive_TagDrawablePair::_internal_has_drawable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || drawable_ != nullptr);
  return value;
}
inline bool PageTemplateArchive_TagDrawablePair::has_drawable() const {
  return _internal_has_drawable();
}
inline const ::TSP::Reference& PageTemplateArchive_TagDrawablePair::_internal_drawable() const {
  const ::TSP::Reference* p = drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PageTemplateArchive_TagDrawablePair::drawable() const {
  // @@protoc_insertion_point(field_get:TP.PageTemplateArchive.TagDrawablePair.drawable)
  return _internal_drawable();
}
inline void PageTemplateArchive_TagDrawablePair::unsafe_arena_set_allocated_drawable(
    ::TSP::Reference* drawable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  drawable_ = drawable;
  if (drawable) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageTemplateArchive.TagDrawablePair.drawable)
}
inline ::TSP::Reference* PageTemplateArchive_TagDrawablePair::release_drawable() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PageTemplateArchive_TagDrawablePair::unsafe_arena_release_drawable() {
  // @@protoc_insertion_point(field_release:TP.PageTemplateArchive.TagDrawablePair.drawable)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = drawable_;
  drawable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PageTemplateArchive_TagDrawablePair::_internal_mutable_drawable() {
  _has_bits_[0] |= 0x00000002u;
  if (drawable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    drawable_ = p;
  }
  return drawable_;
}
inline ::TSP::Reference* PageTemplateArchive_TagDrawablePair::mutable_drawable() {
  // @@protoc_insertion_point(field_mutable:TP.PageTemplateArchive.TagDrawablePair.drawable)
  return _internal_mutable_drawable();
}
inline void PageTemplateArchive_TagDrawablePair::set_allocated_drawable(::TSP::Reference* drawable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_);
  }
  if (drawable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable)->GetArena();
    if (message_arena != submessage_arena) {
      drawable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  drawable_ = drawable;
  // @@protoc_insertion_point(field_set_allocated:TP.PageTemplateArchive.TagDrawablePair.drawable)
}

// required uint32 z_index = 3;
inline bool PageTemplateArchive_TagDrawablePair::_internal_has_z_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PageTemplateArchive_TagDrawablePair::has_z_index() const {
  return _internal_has_z_index();
}
inline void PageTemplateArchive_TagDrawablePair::clear_z_index() {
  z_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageTemplateArchive_TagDrawablePair::_internal_z_index() const {
  return z_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageTemplateArchive_TagDrawablePair::z_index() const {
  // @@protoc_insertion_point(field_get:TP.PageTemplateArchive.TagDrawablePair.z_index)
  return _internal_z_index();
}
inline void PageTemplateArchive_TagDrawablePair::_internal_set_z_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  z_index_ = value;
}
inline void PageTemplateArchive_TagDrawablePair::set_z_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_z_index(value);
  // @@protoc_insertion_point(field_set:TP.PageTemplateArchive.TagDrawablePair.z_index)
}

// -------------------------------------------------------------------

// PageTemplateArchive

// optional string name = 1;
inline bool PageTemplateArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PageTemplateArchive::has_name() const {
  return _internal_has_name();
}
inline void PageTemplateArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PageTemplateArchive::name() const {
  // @@protoc_insertion_point(field_get:TP.PageTemplateArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PageTemplateArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.PageTemplateArchive.name)
}
inline std::string* PageTemplateArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TP.PageTemplateArchive.name)
  return _internal_mutable_name();
}
inline const std::string& PageTemplateArchive::_internal_name() const {
  return name_.Get();
}
inline void PageTemplateArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* PageTemplateArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PageTemplateArchive::release_name() {
  // @@protoc_insertion_point(field_release:TP.PageTemplateArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PageTemplateArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.PageTemplateArchive.name)
}

// repeated .TSP.Reference master_drawables = 2;
inline int PageTemplateArchive::_internal_master_drawables_size() const {
  return master_drawables_.size();
}
inline int PageTemplateArchive::master_drawables_size() const {
  return _internal_master_drawables_size();
}
inline ::TSP::Reference* PageTemplateArchive::mutable_master_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageTemplateArchive.master_drawables)
  return master_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PageTemplateArchive::mutable_master_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageTemplateArchive.master_drawables)
  return &master_drawables_;
}
inline const ::TSP::Reference& PageTemplateArchive::_internal_master_drawables(int index) const {
  return master_drawables_.Get(index);
}
inline const ::TSP::Reference& PageTemplateArchive::master_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageTemplateArchive.master_drawables)
  return _internal_master_drawables(index);
}
inline ::TSP::Reference* PageTemplateArchive::_internal_add_master_drawables() {
  return master_drawables_.Add();
}
inline ::TSP::Reference* PageTemplateArchive::add_master_drawables() {
  // @@protoc_insertion_point(field_add:TP.PageTemplateArchive.master_drawables)
  return _internal_add_master_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PageTemplateArchive::master_drawables() const {
  // @@protoc_insertion_point(field_list:TP.PageTemplateArchive.master_drawables)
  return master_drawables_;
}

// repeated .TP.PageTemplateArchive.TagDrawablePair placeholder_drawables = 3;
inline int PageTemplateArchive::_internal_placeholder_drawables_size() const {
  return placeholder_drawables_.size();
}
inline int PageTemplateArchive::placeholder_drawables_size() const {
  return _internal_placeholder_drawables_size();
}
inline void PageTemplateArchive::clear_placeholder_drawables() {
  placeholder_drawables_.Clear();
}
inline ::TP::PageTemplateArchive_TagDrawablePair* PageTemplateArchive::mutable_placeholder_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageTemplateArchive.placeholder_drawables)
  return placeholder_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageTemplateArchive_TagDrawablePair >*
PageTemplateArchive::mutable_placeholder_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageTemplateArchive.placeholder_drawables)
  return &placeholder_drawables_;
}
inline const ::TP::PageTemplateArchive_TagDrawablePair& PageTemplateArchive::_internal_placeholder_drawables(int index) const {
  return placeholder_drawables_.Get(index);
}
inline const ::TP::PageTemplateArchive_TagDrawablePair& PageTemplateArchive::placeholder_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageTemplateArchive.placeholder_drawables)
  return _internal_placeholder_drawables(index);
}
inline ::TP::PageTemplateArchive_TagDrawablePair* PageTemplateArchive::_internal_add_placeholder_drawables() {
  return placeholder_drawables_.Add();
}
inline ::TP::PageTemplateArchive_TagDrawablePair* PageTemplateArchive::add_placeholder_drawables() {
  // @@protoc_insertion_point(field_add:TP.PageTemplateArchive.placeholder_drawables)
  return _internal_add_placeholder_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageTemplateArchive_TagDrawablePair >&
PageTemplateArchive::placeholder_drawables() const {
  // @@protoc_insertion_point(field_list:TP.PageTemplateArchive.placeholder_drawables)
  return placeholder_drawables_;
}

// required bool headers_footers_match_previous_page = 4;
inline bool PageTemplateArchive::_internal_has_headers_footers_match_previous_page() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PageTemplateArchive::has_headers_footers_match_previous_page() const {
  return _internal_has_headers_footers_match_previous_page();
}
inline void PageTemplateArchive::clear_headers_footers_match_previous_page() {
  headers_footers_match_previous_page_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PageTemplateArchive::_internal_headers_footers_match_previous_page() const {
  return headers_footers_match_previous_page_;
}
inline bool PageTemplateArchive::headers_footers_match_previous_page() const {
  // @@protoc_insertion_point(field_get:TP.PageTemplateArchive.headers_footers_match_previous_page)
  return _internal_headers_footers_match_previous_page();
}
inline void PageTemplateArchive::_internal_set_headers_footers_match_previous_page(bool value) {
  _has_bits_[0] |= 0x00000008u;
  headers_footers_match_previous_page_ = value;
}
inline void PageTemplateArchive::set_headers_footers_match_previous_page(bool value) {
  _internal_set_headers_footers_match_previous_page(value);
  // @@protoc_insertion_point(field_set:TP.PageTemplateArchive.headers_footers_match_previous_page)
}

// optional bool hide_headers_footers = 5;
inline bool PageTemplateArchive::_internal_has_hide_headers_footers() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PageTemplateArchive::has_hide_headers_footers() const {
  return _internal_has_hide_headers_footers();
}
inline void PageTemplateArchive::clear_hide_headers_footers() {
  hide_headers_footers_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PageTemplateArchive::_internal_hide_headers_footers() const {
  return hide_headers_footers_;
}
inline bool PageTemplateArchive::hide_headers_footers() const {
  // @@protoc_insertion_point(field_get:TP.PageTemplateArchive.hide_headers_footers)
  return _internal_hide_headers_footers();
}
inline void PageTemplateArchive::_internal_set_hide_headers_footers(bool value) {
  _has_bits_[0] |= 0x00000010u;
  hide_headers_footers_ = value;
}
inline void PageTemplateArchive::set_hide_headers_footers(bool value) {
  _internal_set_hide_headers_footers(value);
  // @@protoc_insertion_point(field_set:TP.PageTemplateArchive.hide_headers_footers)
}

// optional .TSD.FillArchive background_fill = 6;
inline bool PageTemplateArchive::_internal_has_background_fill() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || background_fill_ != nullptr);
  return value;
}
inline bool PageTemplateArchive::has_background_fill() const {
  return _internal_has_background_fill();
}
inline const ::TSD::FillArchive& PageTemplateArchive::_internal_background_fill() const {
  const ::TSD::FillArchive* p = background_fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& PageTemplateArchive::background_fill() const {
  // @@protoc_insertion_point(field_get:TP.PageTemplateArchive.background_fill)
  return _internal_background_fill();
}
inline void PageTemplateArchive::unsafe_arena_set_allocated_background_fill(
    ::TSD::FillArchive* background_fill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_fill_);
  }
  background_fill_ = background_fill;
  if (background_fill) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageTemplateArchive.background_fill)
}
inline ::TSD::FillArchive* PageTemplateArchive::release_background_fill() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::FillArchive* temp = background_fill_;
  background_fill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* PageTemplateArchive::unsafe_arena_release_background_fill() {
  // @@protoc_insertion_point(field_release:TP.PageTemplateArchive.background_fill)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::FillArchive* temp = background_fill_;
  background_fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* PageTemplateArchive::_internal_mutable_background_fill() {
  _has_bits_[0] |= 0x00000002u;
  if (background_fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    background_fill_ = p;
  }
  return background_fill_;
}
inline ::TSD::FillArchive* PageTemplateArchive::mutable_background_fill() {
  // @@protoc_insertion_point(field_mutable:TP.PageTemplateArchive.background_fill)
  return _internal_mutable_background_fill();
}
inline void PageTemplateArchive::set_allocated_background_fill(::TSD::FillArchive* background_fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_fill_);
  }
  if (background_fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_fill)->GetArena();
    if (message_arena != submessage_arena) {
      background_fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  background_fill_ = background_fill;
  // @@protoc_insertion_point(field_set_allocated:TP.PageTemplateArchive.background_fill)
}

// optional .TSP.Reference guide_storage = 7;
inline bool PageTemplateArchive::_internal_has_guide_storage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || guide_storage_ != nullptr);
  return value;
}
inline bool PageTemplateArchive::has_guide_storage() const {
  return _internal_has_guide_storage();
}
inline const ::TSP::Reference& PageTemplateArchive::_internal_guide_storage() const {
  const ::TSP::Reference* p = guide_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PageTemplateArchive::guide_storage() const {
  // @@protoc_insertion_point(field_get:TP.PageTemplateArchive.guide_storage)
  return _internal_guide_storage();
}
inline void PageTemplateArchive::unsafe_arena_set_allocated_guide_storage(
    ::TSP::Reference* guide_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guide_storage_);
  }
  guide_storage_ = guide_storage;
  if (guide_storage) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageTemplateArchive.guide_storage)
}
inline ::TSP::Reference* PageTemplateArchive::release_guide_storage() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = guide_storage_;
  guide_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PageTemplateArchive::unsafe_arena_release_guide_storage() {
  // @@protoc_insertion_point(field_release:TP.PageTemplateArchive.guide_storage)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = guide_storage_;
  guide_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PageTemplateArchive::_internal_mutable_guide_storage() {
  _has_bits_[0] |= 0x00000004u;
  if (guide_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    guide_storage_ = p;
  }
  return guide_storage_;
}
inline ::TSP::Reference* PageTemplateArchive::mutable_guide_storage() {
  // @@protoc_insertion_point(field_mutable:TP.PageTemplateArchive.guide_storage)
  return _internal_mutable_guide_storage();
}
inline void PageTemplateArchive::set_allocated_guide_storage(::TSP::Reference* guide_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(guide_storage_);
  }
  if (guide_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guide_storage)->GetArena();
    if (message_arena != submessage_arena) {
      guide_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guide_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  guide_storage_ = guide_storage;
  // @@protoc_insertion_point(field_set_allocated:TP.PageTemplateArchive.guide_storage)
}

// -------------------------------------------------------------------

// SectionArchive

// optional bool OBSOLETE_shows_header = 1;
inline bool SectionArchive::_internal_has_obsolete_shows_header() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_shows_header() const {
  return _internal_has_obsolete_shows_header();
}
inline void SectionArchive::clear_obsolete_shows_header() {
  obsolete_shows_header_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool SectionArchive::_internal_obsolete_shows_header() const {
  return obsolete_shows_header_;
}
inline bool SectionArchive::obsolete_shows_header() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_shows_header)
  return _internal_obsolete_shows_header();
}
inline void SectionArchive::_internal_set_obsolete_shows_header(bool value) {
  _has_bits_[0] |= 0x00000800u;
  obsolete_shows_header_ = value;
}
inline void SectionArchive::set_obsolete_shows_header(bool value) {
  _internal_set_obsolete_shows_header(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_shows_header)
}

// optional bool OBSOLETE_shows_footer = 2;
inline bool SectionArchive::_internal_has_obsolete_shows_footer() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_shows_footer() const {
  return _internal_has_obsolete_shows_footer();
}
inline void SectionArchive::clear_obsolete_shows_footer() {
  obsolete_shows_footer_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool SectionArchive::_internal_obsolete_shows_footer() const {
  return obsolete_shows_footer_;
}
inline bool SectionArchive::obsolete_shows_footer() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_shows_footer)
  return _internal_obsolete_shows_footer();
}
inline void SectionArchive::_internal_set_obsolete_shows_footer(bool value) {
  _has_bits_[0] |= 0x00001000u;
  obsolete_shows_footer_ = value;
}
inline void SectionArchive::set_obsolete_shows_footer(bool value) {
  _internal_set_obsolete_shows_footer(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_shows_footer)
}

// repeated .TSP.Reference OBSOLETE_headers = 3;
inline int SectionArchive::_internal_obsolete_headers_size() const {
  return obsolete_headers_.size();
}
inline int SectionArchive::obsolete_headers_size() const {
  return _internal_obsolete_headers_size();
}
inline ::TSP::Reference* SectionArchive::mutable_obsolete_headers(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.OBSOLETE_headers)
  return obsolete_headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SectionArchive::mutable_obsolete_headers() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionArchive.OBSOLETE_headers)
  return &obsolete_headers_;
}
inline const ::TSP::Reference& SectionArchive::_internal_obsolete_headers(int index) const {
  return obsolete_headers_.Get(index);
}
inline const ::TSP::Reference& SectionArchive::obsolete_headers(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_headers)
  return _internal_obsolete_headers(index);
}
inline ::TSP::Reference* SectionArchive::_internal_add_obsolete_headers() {
  return obsolete_headers_.Add();
}
inline ::TSP::Reference* SectionArchive::add_obsolete_headers() {
  // @@protoc_insertion_point(field_add:TP.SectionArchive.OBSOLETE_headers)
  return _internal_add_obsolete_headers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SectionArchive::obsolete_headers() const {
  // @@protoc_insertion_point(field_list:TP.SectionArchive.OBSOLETE_headers)
  return obsolete_headers_;
}

// repeated .TSP.Reference OBSOLETE_footers = 4;
inline int SectionArchive::_internal_obsolete_footers_size() const {
  return obsolete_footers_.size();
}
inline int SectionArchive::obsolete_footers_size() const {
  return _internal_obsolete_footers_size();
}
inline ::TSP::Reference* SectionArchive::mutable_obsolete_footers(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.OBSOLETE_footers)
  return obsolete_footers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SectionArchive::mutable_obsolete_footers() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionArchive.OBSOLETE_footers)
  return &obsolete_footers_;
}
inline const ::TSP::Reference& SectionArchive::_internal_obsolete_footers(int index) const {
  return obsolete_footers_.Get(index);
}
inline const ::TSP::Reference& SectionArchive::obsolete_footers(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_footers)
  return _internal_obsolete_footers(index);
}
inline ::TSP::Reference* SectionArchive::_internal_add_obsolete_footers() {
  return obsolete_footers_.Add();
}
inline ::TSP::Reference* SectionArchive::add_obsolete_footers() {
  // @@protoc_insertion_point(field_add:TP.SectionArchive.OBSOLETE_footers)
  return _internal_add_obsolete_footers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SectionArchive::obsolete_footers() const {
  // @@protoc_insertion_point(field_list:TP.SectionArchive.OBSOLETE_footers)
  return obsolete_footers_;
}

// optional float OBSOLETE_left_margin = 5;
inline bool SectionArchive::_internal_has_obsolete_left_margin() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_left_margin() const {
  return _internal_has_obsolete_left_margin();
}
inline void SectionArchive::clear_obsolete_left_margin() {
  obsolete_left_margin_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float SectionArchive::_internal_obsolete_left_margin() const {
  return obsolete_left_margin_;
}
inline float SectionArchive::obsolete_left_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_left_margin)
  return _internal_obsolete_left_margin();
}
inline void SectionArchive::_internal_set_obsolete_left_margin(float value) {
  _has_bits_[0] |= 0x00000080u;
  obsolete_left_margin_ = value;
}
inline void SectionArchive::set_obsolete_left_margin(float value) {
  _internal_set_obsolete_left_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_left_margin)
}

// optional float OBSOLETE_right_margin = 6;
inline bool SectionArchive::_internal_has_obsolete_right_margin() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_right_margin() const {
  return _internal_has_obsolete_right_margin();
}
inline void SectionArchive::clear_obsolete_right_margin() {
  obsolete_right_margin_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float SectionArchive::_internal_obsolete_right_margin() const {
  return obsolete_right_margin_;
}
inline float SectionArchive::obsolete_right_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_right_margin)
  return _internal_obsolete_right_margin();
}
inline void SectionArchive::_internal_set_obsolete_right_margin(float value) {
  _has_bits_[0] |= 0x00000100u;
  obsolete_right_margin_ = value;
}
inline void SectionArchive::set_obsolete_right_margin(float value) {
  _internal_set_obsolete_right_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_right_margin)
}

// optional float OBSOLETE_top_margin = 7;
inline bool SectionArchive::_internal_has_obsolete_top_margin() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_top_margin() const {
  return _internal_has_obsolete_top_margin();
}
inline void SectionArchive::clear_obsolete_top_margin() {
  obsolete_top_margin_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float SectionArchive::_internal_obsolete_top_margin() const {
  return obsolete_top_margin_;
}
inline float SectionArchive::obsolete_top_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_top_margin)
  return _internal_obsolete_top_margin();
}
inline void SectionArchive::_internal_set_obsolete_top_margin(float value) {
  _has_bits_[0] |= 0x00000200u;
  obsolete_top_margin_ = value;
}
inline void SectionArchive::set_obsolete_top_margin(float value) {
  _internal_set_obsolete_top_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_top_margin)
}

// optional float OBSOLETE_bottom_margin = 8;
inline bool SectionArchive::_internal_has_obsolete_bottom_margin() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_bottom_margin() const {
  return _internal_has_obsolete_bottom_margin();
}
inline void SectionArchive::clear_obsolete_bottom_margin() {
  obsolete_bottom_margin_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float SectionArchive::_internal_obsolete_bottom_margin() const {
  return obsolete_bottom_margin_;
}
inline float SectionArchive::obsolete_bottom_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_bottom_margin)
  return _internal_obsolete_bottom_margin();
}
inline void SectionArchive::_internal_set_obsolete_bottom_margin(float value) {
  _has_bits_[0] |= 0x00000400u;
  obsolete_bottom_margin_ = value;
}
inline void SectionArchive::set_obsolete_bottom_margin(float value) {
  _internal_set_obsolete_bottom_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_bottom_margin)
}

// optional float OBSOLETE_header_padding = 9;
inline bool SectionArchive::_internal_has_obsolete_header_padding() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_header_padding() const {
  return _internal_has_obsolete_header_padding();
}
inline void SectionArchive::clear_obsolete_header_padding() {
  obsolete_header_padding_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float SectionArchive::_internal_obsolete_header_padding() const {
  return obsolete_header_padding_;
}
inline float SectionArchive::obsolete_header_padding() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_header_padding)
  return _internal_obsolete_header_padding();
}
inline void SectionArchive::_internal_set_obsolete_header_padding(float value) {
  _has_bits_[0] |= 0x00008000u;
  obsolete_header_padding_ = value;
}
inline void SectionArchive::set_obsolete_header_padding(float value) {
  _internal_set_obsolete_header_padding(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_header_padding)
}

// optional float OBSOLETE_footer_padding = 10;
inline bool SectionArchive::_internal_has_obsolete_footer_padding() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_footer_padding() const {
  return _internal_has_obsolete_footer_padding();
}
inline void SectionArchive::clear_obsolete_footer_padding() {
  obsolete_footer_padding_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float SectionArchive::_internal_obsolete_footer_padding() const {
  return obsolete_footer_padding_;
}
inline float SectionArchive::obsolete_footer_padding() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_footer_padding)
  return _internal_obsolete_footer_padding();
}
inline void SectionArchive::_internal_set_obsolete_footer_padding(float value) {
  _has_bits_[0] |= 0x00010000u;
  obsolete_footer_padding_ = value;
}
inline void SectionArchive::set_obsolete_footer_padding(float value) {
  _internal_set_obsolete_footer_padding(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_footer_padding)
}

// optional float OBSOLETE_paper_width = 11;
inline bool SectionArchive::_internal_has_obsolete_paper_width() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_paper_width() const {
  return _internal_has_obsolete_paper_width();
}
inline void SectionArchive::clear_obsolete_paper_width() {
  obsolete_paper_width_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float SectionArchive::_internal_obsolete_paper_width() const {
  return obsolete_paper_width_;
}
inline float SectionArchive::obsolete_paper_width() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_paper_width)
  return _internal_obsolete_paper_width();
}
inline void SectionArchive::_internal_set_obsolete_paper_width(float value) {
  _has_bits_[0] |= 0x00020000u;
  obsolete_paper_width_ = value;
}
inline void SectionArchive::set_obsolete_paper_width(float value) {
  _internal_set_obsolete_paper_width(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_paper_width)
}

// optional float OBSOLETE_paper_height = 12;
inline bool SectionArchive::_internal_has_obsolete_paper_height() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_paper_height() const {
  return _internal_has_obsolete_paper_height();
}
inline void SectionArchive::clear_obsolete_paper_height() {
  obsolete_paper_height_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float SectionArchive::_internal_obsolete_paper_height() const {
  return obsolete_paper_height_;
}
inline float SectionArchive::obsolete_paper_height() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_paper_height)
  return _internal_obsolete_paper_height();
}
inline void SectionArchive::_internal_set_obsolete_paper_height(float value) {
  _has_bits_[0] |= 0x00040000u;
  obsolete_paper_height_ = value;
}
inline void SectionArchive::set_obsolete_paper_height(float value) {
  _internal_set_obsolete_paper_height(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_paper_height)
}

// optional bool OBSOLETE_landscape_mode = 13;
inline bool SectionArchive::_internal_has_obsolete_landscape_mode() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_landscape_mode() const {
  return _internal_has_obsolete_landscape_mode();
}
inline void SectionArchive::clear_obsolete_landscape_mode() {
  obsolete_landscape_mode_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool SectionArchive::_internal_obsolete_landscape_mode() const {
  return obsolete_landscape_mode_;
}
inline bool SectionArchive::obsolete_landscape_mode() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_landscape_mode)
  return _internal_obsolete_landscape_mode();
}
inline void SectionArchive::_internal_set_obsolete_landscape_mode(bool value) {
  _has_bits_[0] |= 0x00002000u;
  obsolete_landscape_mode_ = value;
}
inline void SectionArchive::set_obsolete_landscape_mode(bool value) {
  _internal_set_obsolete_landscape_mode(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_landscape_mode)
}

// repeated .TSP.Reference OBSOLETE_master_drawables = 14;
inline int SectionArchive::_internal_obsolete_master_drawables_size() const {
  return obsolete_master_drawables_.size();
}
inline int SectionArchive::obsolete_master_drawables_size() const {
  return _internal_obsolete_master_drawables_size();
}
inline ::TSP::Reference* SectionArchive::mutable_obsolete_master_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.OBSOLETE_master_drawables)
  return obsolete_master_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SectionArchive::mutable_obsolete_master_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionArchive.OBSOLETE_master_drawables)
  return &obsolete_master_drawables_;
}
inline const ::TSP::Reference& SectionArchive::_internal_obsolete_master_drawables(int index) const {
  return obsolete_master_drawables_.Get(index);
}
inline const ::TSP::Reference& SectionArchive::obsolete_master_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_master_drawables)
  return _internal_obsolete_master_drawables(index);
}
inline ::TSP::Reference* SectionArchive::_internal_add_obsolete_master_drawables() {
  return obsolete_master_drawables_.Add();
}
inline ::TSP::Reference* SectionArchive::add_obsolete_master_drawables() {
  // @@protoc_insertion_point(field_add:TP.SectionArchive.OBSOLETE_master_drawables)
  return _internal_add_obsolete_master_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SectionArchive::obsolete_master_drawables() const {
  // @@protoc_insertion_point(field_list:TP.SectionArchive.OBSOLETE_master_drawables)
  return obsolete_master_drawables_;
}

// optional float OBSOLETE_header_margin = 15;
inline bool SectionArchive::_internal_has_obsolete_header_margin() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_header_margin() const {
  return _internal_has_obsolete_header_margin();
}
inline void SectionArchive::clear_obsolete_header_margin() {
  obsolete_header_margin_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float SectionArchive::_internal_obsolete_header_margin() const {
  return obsolete_header_margin_;
}
inline float SectionArchive::obsolete_header_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_header_margin)
  return _internal_obsolete_header_margin();
}
inline void SectionArchive::_internal_set_obsolete_header_margin(float value) {
  _has_bits_[0] |= 0x00080000u;
  obsolete_header_margin_ = value;
}
inline void SectionArchive::set_obsolete_header_margin(float value) {
  _internal_set_obsolete_header_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_header_margin)
}

// optional float OBSOLETE_footer_margin = 16;
inline bool SectionArchive::_internal_has_obsolete_footer_margin() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SectionArchive::has_obsolete_footer_margin() const {
  return _internal_has_obsolete_footer_margin();
}
inline void SectionArchive::clear_obsolete_footer_margin() {
  obsolete_footer_margin_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float SectionArchive::_internal_obsolete_footer_margin() const {
  return obsolete_footer_margin_;
}
inline float SectionArchive::obsolete_footer_margin() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.OBSOLETE_footer_margin)
  return _internal_obsolete_footer_margin();
}
inline void SectionArchive::_internal_set_obsolete_footer_margin(float value) {
  _has_bits_[0] |= 0x00100000u;
  obsolete_footer_margin_ = value;
}
inline void SectionArchive::set_obsolete_footer_margin(float value) {
  _internal_set_obsolete_footer_margin(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.OBSOLETE_footer_margin)
}

// optional bool inherit_previous_header_footer = 17;
inline bool SectionArchive::_internal_has_inherit_previous_header_footer() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SectionArchive::has_inherit_previous_header_footer() const {
  return _internal_has_inherit_previous_header_footer();
}
inline void SectionArchive::clear_inherit_previous_header_footer() {
  inherit_previous_header_footer_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool SectionArchive::_internal_inherit_previous_header_footer() const {
  return inherit_previous_header_footer_;
}
inline bool SectionArchive::inherit_previous_header_footer() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.inherit_previous_header_footer)
  return _internal_inherit_previous_header_footer();
}
inline void SectionArchive::_internal_set_inherit_previous_header_footer(bool value) {
  _has_bits_[0] |= 0x00004000u;
  inherit_previous_header_footer_ = value;
}
inline void SectionArchive::set_inherit_previous_header_footer(bool value) {
  _internal_set_inherit_previous_header_footer(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.inherit_previous_header_footer)
}

// optional bool page_master_first_page_different = 18;
inline bool SectionArchive::_internal_has_page_master_first_page_different() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SectionArchive::has_page_master_first_page_different() const {
  return _internal_has_page_master_first_page_different();
}
inline void SectionArchive::clear_page_master_first_page_different() {
  page_master_first_page_different_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool SectionArchive::_internal_page_master_first_page_different() const {
  return page_master_first_page_different_;
}
inline bool SectionArchive::page_master_first_page_different() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.page_master_first_page_different)
  return _internal_page_master_first_page_different();
}
inline void SectionArchive::_internal_set_page_master_first_page_different(bool value) {
  _has_bits_[0] |= 0x00800000u;
  page_master_first_page_different_ = value;
}
inline void SectionArchive::set_page_master_first_page_different(bool value) {
  _internal_set_page_master_first_page_different(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.page_master_first_page_different)
}

// optional bool page_master_even_odd_pages_different = 19;
inline bool SectionArchive::_internal_has_page_master_even_odd_pages_different() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SectionArchive::has_page_master_even_odd_pages_different() const {
  return _internal_has_page_master_even_odd_pages_different();
}
inline void SectionArchive::clear_page_master_even_odd_pages_different() {
  page_master_even_odd_pages_different_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool SectionArchive::_internal_page_master_even_odd_pages_different() const {
  return page_master_even_odd_pages_different_;
}
inline bool SectionArchive::page_master_even_odd_pages_different() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.page_master_even_odd_pages_different)
  return _internal_page_master_even_odd_pages_different();
}
inline void SectionArchive::_internal_set_page_master_even_odd_pages_different(bool value) {
  _has_bits_[0] |= 0x01000000u;
  page_master_even_odd_pages_different_ = value;
}
inline void SectionArchive::set_page_master_even_odd_pages_different(bool value) {
  _internal_set_page_master_even_odd_pages_different(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.page_master_even_odd_pages_different)
}

// optional uint32 section_start_kind = 20;
inline bool SectionArchive::_internal_has_section_start_kind() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SectionArchive::has_section_start_kind() const {
  return _internal_has_section_start_kind();
}
inline void SectionArchive::clear_section_start_kind() {
  section_start_kind_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionArchive::_internal_section_start_kind() const {
  return section_start_kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionArchive::section_start_kind() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.section_start_kind)
  return _internal_section_start_kind();
}
inline void SectionArchive::_internal_set_section_start_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  section_start_kind_ = value;
}
inline void SectionArchive::set_section_start_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_section_start_kind(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.section_start_kind)
}

// optional uint32 section_page_number_kind = 21;
inline bool SectionArchive::_internal_has_section_page_number_kind() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SectionArchive::has_section_page_number_kind() const {
  return _internal_has_section_page_number_kind();
}
inline void SectionArchive::clear_section_page_number_kind() {
  section_page_number_kind_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionArchive::_internal_section_page_number_kind() const {
  return section_page_number_kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionArchive::section_page_number_kind() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.section_page_number_kind)
  return _internal_section_page_number_kind();
}
inline void SectionArchive::_internal_set_section_page_number_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  section_page_number_kind_ = value;
}
inline void SectionArchive::set_section_page_number_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_section_page_number_kind(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.section_page_number_kind)
}

// optional uint32 section_page_number_start = 22;
inline bool SectionArchive::_internal_has_section_page_number_start() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SectionArchive::has_section_page_number_start() const {
  return _internal_has_section_page_number_start();
}
inline void SectionArchive::clear_section_page_number_start() {
  section_page_number_start_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionArchive::_internal_section_page_number_start() const {
  return section_page_number_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionArchive::section_page_number_start() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.section_page_number_start)
  return _internal_section_page_number_start();
}
inline void SectionArchive::_internal_set_section_page_number_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  section_page_number_start_ = value;
}
inline void SectionArchive::set_section_page_number_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_section_page_number_start(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.section_page_number_start)
}

// optional .TSP.Reference first_page_master = 23;
inline bool SectionArchive::_internal_has_first_page_master() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || first_page_master_ != nullptr);
  return value;
}
inline bool SectionArchive::has_first_page_master() const {
  return _internal_has_first_page_master();
}
inline const ::TSP::Reference& SectionArchive::_internal_first_page_master() const {
  const ::TSP::Reference* p = first_page_master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SectionArchive::first_page_master() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.first_page_master)
  return _internal_first_page_master();
}
inline void SectionArchive::unsafe_arena_set_allocated_first_page_master(
    ::TSP::Reference* first_page_master) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_page_master_);
  }
  first_page_master_ = first_page_master;
  if (first_page_master) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionArchive.first_page_master)
}
inline ::TSP::Reference* SectionArchive::release_first_page_master() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = first_page_master_;
  first_page_master_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SectionArchive::unsafe_arena_release_first_page_master() {
  // @@protoc_insertion_point(field_release:TP.SectionArchive.first_page_master)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = first_page_master_;
  first_page_master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SectionArchive::_internal_mutable_first_page_master() {
  _has_bits_[0] |= 0x00000002u;
  if (first_page_master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    first_page_master_ = p;
  }
  return first_page_master_;
}
inline ::TSP::Reference* SectionArchive::mutable_first_page_master() {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.first_page_master)
  return _internal_mutable_first_page_master();
}
inline void SectionArchive::set_allocated_first_page_master(::TSP::Reference* first_page_master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_page_master_);
  }
  if (first_page_master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_page_master)->GetArena();
    if (message_arena != submessage_arena) {
      first_page_master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_page_master, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  first_page_master_ = first_page_master;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionArchive.first_page_master)
}

// optional .TSP.Reference even_page_master = 24;
inline bool SectionArchive::_internal_has_even_page_master() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || even_page_master_ != nullptr);
  return value;
}
inline bool SectionArchive::has_even_page_master() const {
  return _internal_has_even_page_master();
}
inline const ::TSP::Reference& SectionArchive::_internal_even_page_master() const {
  const ::TSP::Reference* p = even_page_master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SectionArchive::even_page_master() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.even_page_master)
  return _internal_even_page_master();
}
inline void SectionArchive::unsafe_arena_set_allocated_even_page_master(
    ::TSP::Reference* even_page_master) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(even_page_master_);
  }
  even_page_master_ = even_page_master;
  if (even_page_master) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionArchive.even_page_master)
}
inline ::TSP::Reference* SectionArchive::release_even_page_master() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = even_page_master_;
  even_page_master_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SectionArchive::unsafe_arena_release_even_page_master() {
  // @@protoc_insertion_point(field_release:TP.SectionArchive.even_page_master)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = even_page_master_;
  even_page_master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SectionArchive::_internal_mutable_even_page_master() {
  _has_bits_[0] |= 0x00000004u;
  if (even_page_master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    even_page_master_ = p;
  }
  return even_page_master_;
}
inline ::TSP::Reference* SectionArchive::mutable_even_page_master() {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.even_page_master)
  return _internal_mutable_even_page_master();
}
inline void SectionArchive::set_allocated_even_page_master(::TSP::Reference* even_page_master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(even_page_master_);
  }
  if (even_page_master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(even_page_master)->GetArena();
    if (message_arena != submessage_arena) {
      even_page_master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, even_page_master, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  even_page_master_ = even_page_master;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionArchive.even_page_master)
}

// optional .TSP.Reference odd_page_master = 25;
inline bool SectionArchive::_internal_has_odd_page_master() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || odd_page_master_ != nullptr);
  return value;
}
inline bool SectionArchive::has_odd_page_master() const {
  return _internal_has_odd_page_master();
}
inline const ::TSP::Reference& SectionArchive::_internal_odd_page_master() const {
  const ::TSP::Reference* p = odd_page_master_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SectionArchive::odd_page_master() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.odd_page_master)
  return _internal_odd_page_master();
}
inline void SectionArchive::unsafe_arena_set_allocated_odd_page_master(
    ::TSP::Reference* odd_page_master) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odd_page_master_);
  }
  odd_page_master_ = odd_page_master;
  if (odd_page_master) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionArchive.odd_page_master)
}
inline ::TSP::Reference* SectionArchive::release_odd_page_master() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = odd_page_master_;
  odd_page_master_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SectionArchive::unsafe_arena_release_odd_page_master() {
  // @@protoc_insertion_point(field_release:TP.SectionArchive.odd_page_master)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = odd_page_master_;
  odd_page_master_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SectionArchive::_internal_mutable_odd_page_master() {
  _has_bits_[0] |= 0x00000008u;
  if (odd_page_master_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    odd_page_master_ = p;
  }
  return odd_page_master_;
}
inline ::TSP::Reference* SectionArchive::mutable_odd_page_master() {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.odd_page_master)
  return _internal_mutable_odd_page_master();
}
inline void SectionArchive::set_allocated_odd_page_master(::TSP::Reference* odd_page_master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(odd_page_master_);
  }
  if (odd_page_master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odd_page_master)->GetArena();
    if (message_arena != submessage_arena) {
      odd_page_master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odd_page_master, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  odd_page_master_ = odd_page_master;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionArchive.odd_page_master)
}

// optional string name = 26;
inline bool SectionArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SectionArchive::has_name() const {
  return _internal_has_name();
}
inline void SectionArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SectionArchive::name() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SectionArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.SectionArchive.name)
}
inline std::string* SectionArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.name)
  return _internal_mutable_name();
}
inline const std::string& SectionArchive::_internal_name() const {
  return name_.Get();
}
inline void SectionArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SectionArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SectionArchive::release_name() {
  // @@protoc_insertion_point(field_release:TP.SectionArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SectionArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.SectionArchive.name)
}

// optional bool page_master_first_page_hides_header_footer = 28;
inline bool SectionArchive::_internal_has_page_master_first_page_hides_header_footer() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SectionArchive::has_page_master_first_page_hides_header_footer() const {
  return _internal_has_page_master_first_page_hides_header_footer();
}
inline void SectionArchive::clear_page_master_first_page_hides_header_footer() {
  page_master_first_page_hides_header_footer_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool SectionArchive::_internal_page_master_first_page_hides_header_footer() const {
  return page_master_first_page_hides_header_footer_;
}
inline bool SectionArchive::page_master_first_page_hides_header_footer() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.page_master_first_page_hides_header_footer)
  return _internal_page_master_first_page_hides_header_footer();
}
inline void SectionArchive::_internal_set_page_master_first_page_hides_header_footer(bool value) {
  _has_bits_[0] |= 0x02000000u;
  page_master_first_page_hides_header_footer_ = value;
}
inline void SectionArchive::set_page_master_first_page_hides_header_footer(bool value) {
  _internal_set_page_master_first_page_hides_header_footer(value);
  // @@protoc_insertion_point(field_set:TP.SectionArchive.page_master_first_page_hides_header_footer)
}

// optional .TSP.Reference user_defined_guide_storage = 29;
inline bool SectionArchive::_internal_has_user_defined_guide_storage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || user_defined_guide_storage_ != nullptr);
  return value;
}
inline bool SectionArchive::has_user_defined_guide_storage() const {
  return _internal_has_user_defined_guide_storage();
}
inline const ::TSP::Reference& SectionArchive::_internal_user_defined_guide_storage() const {
  const ::TSP::Reference* p = user_defined_guide_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SectionArchive::user_defined_guide_storage() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.user_defined_guide_storage)
  return _internal_user_defined_guide_storage();
}
inline void SectionArchive::unsafe_arena_set_allocated_user_defined_guide_storage(
    ::TSP::Reference* user_defined_guide_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_defined_guide_storage_);
  }
  user_defined_guide_storage_ = user_defined_guide_storage;
  if (user_defined_guide_storage) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionArchive.user_defined_guide_storage)
}
inline ::TSP::Reference* SectionArchive::release_user_defined_guide_storage() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = user_defined_guide_storage_;
  user_defined_guide_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SectionArchive::unsafe_arena_release_user_defined_guide_storage() {
  // @@protoc_insertion_point(field_release:TP.SectionArchive.user_defined_guide_storage)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = user_defined_guide_storage_;
  user_defined_guide_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SectionArchive::_internal_mutable_user_defined_guide_storage() {
  _has_bits_[0] |= 0x00000010u;
  if (user_defined_guide_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    user_defined_guide_storage_ = p;
  }
  return user_defined_guide_storage_;
}
inline ::TSP::Reference* SectionArchive::mutable_user_defined_guide_storage() {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.user_defined_guide_storage)
  return _internal_mutable_user_defined_guide_storage();
}
inline void SectionArchive::set_allocated_user_defined_guide_storage(::TSP::Reference* user_defined_guide_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_defined_guide_storage_);
  }
  if (user_defined_guide_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_defined_guide_storage)->GetArena();
    if (message_arena != submessage_arena) {
      user_defined_guide_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_defined_guide_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  user_defined_guide_storage_ = user_defined_guide_storage;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionArchive.user_defined_guide_storage)
}

// optional .TSD.FillArchive background_fill = 30;
inline bool SectionArchive::_internal_has_background_fill() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || background_fill_ != nullptr);
  return value;
}
inline bool SectionArchive::has_background_fill() const {
  return _internal_has_background_fill();
}
inline const ::TSD::FillArchive& SectionArchive::_internal_background_fill() const {
  const ::TSD::FillArchive* p = background_fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& SectionArchive::background_fill() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.background_fill)
  return _internal_background_fill();
}
inline void SectionArchive::unsafe_arena_set_allocated_background_fill(
    ::TSD::FillArchive* background_fill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_fill_);
  }
  background_fill_ = background_fill;
  if (background_fill) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionArchive.background_fill)
}
inline ::TSD::FillArchive* SectionArchive::release_background_fill() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::FillArchive* temp = background_fill_;
  background_fill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* SectionArchive::unsafe_arena_release_background_fill() {
  // @@protoc_insertion_point(field_release:TP.SectionArchive.background_fill)
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::FillArchive* temp = background_fill_;
  background_fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* SectionArchive::_internal_mutable_background_fill() {
  _has_bits_[0] |= 0x00000020u;
  if (background_fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    background_fill_ = p;
  }
  return background_fill_;
}
inline ::TSD::FillArchive* SectionArchive::mutable_background_fill() {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.background_fill)
  return _internal_mutable_background_fill();
}
inline void SectionArchive::set_allocated_background_fill(::TSD::FillArchive* background_fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_fill_);
  }
  if (background_fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_fill)->GetArena();
    if (message_arena != submessage_arena) {
      background_fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  background_fill_ = background_fill;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionArchive.background_fill)
}

// optional .TSP.UUID section_hyperlink_uuid = 31;
inline bool SectionArchive::_internal_has_section_hyperlink_uuid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || section_hyperlink_uuid_ != nullptr);
  return value;
}
inline bool SectionArchive::has_section_hyperlink_uuid() const {
  return _internal_has_section_hyperlink_uuid();
}
inline const ::TSP::UUID& SectionArchive::_internal_section_hyperlink_uuid() const {
  const ::TSP::UUID* p = section_hyperlink_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& SectionArchive::section_hyperlink_uuid() const {
  // @@protoc_insertion_point(field_get:TP.SectionArchive.section_hyperlink_uuid)
  return _internal_section_hyperlink_uuid();
}
inline void SectionArchive::unsafe_arena_set_allocated_section_hyperlink_uuid(
    ::TSP::UUID* section_hyperlink_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_hyperlink_uuid_);
  }
  section_hyperlink_uuid_ = section_hyperlink_uuid;
  if (section_hyperlink_uuid) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionArchive.section_hyperlink_uuid)
}
inline ::TSP::UUID* SectionArchive::release_section_hyperlink_uuid() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = section_hyperlink_uuid_;
  section_hyperlink_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* SectionArchive::unsafe_arena_release_section_hyperlink_uuid() {
  // @@protoc_insertion_point(field_release:TP.SectionArchive.section_hyperlink_uuid)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = section_hyperlink_uuid_;
  section_hyperlink_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* SectionArchive::_internal_mutable_section_hyperlink_uuid() {
  _has_bits_[0] |= 0x00000040u;
  if (section_hyperlink_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    section_hyperlink_uuid_ = p;
  }
  return section_hyperlink_uuid_;
}
inline ::TSP::UUID* SectionArchive::mutable_section_hyperlink_uuid() {
  // @@protoc_insertion_point(field_mutable:TP.SectionArchive.section_hyperlink_uuid)
  return _internal_mutable_section_hyperlink_uuid();
}
inline void SectionArchive::set_allocated_section_hyperlink_uuid(::TSP::UUID* section_hyperlink_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_hyperlink_uuid_);
  }
  if (section_hyperlink_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_hyperlink_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      section_hyperlink_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, section_hyperlink_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  section_hyperlink_uuid_ = section_hyperlink_uuid;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionArchive.section_hyperlink_uuid)
}

// -------------------------------------------------------------------

// DoublePoint

// required double x = 1;
inline bool DoublePoint::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DoublePoint::has_x() const {
  return _internal_has_x();
}
inline void DoublePoint::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DoublePoint::_internal_x() const {
  return x_;
}
inline double DoublePoint::x() const {
  // @@protoc_insertion_point(field_get:TP.DoublePoint.x)
  return _internal_x();
}
inline void DoublePoint::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void DoublePoint::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TP.DoublePoint.x)
}

// required double y = 2;
inline bool DoublePoint::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DoublePoint::has_y() const {
  return _internal_has_y();
}
inline void DoublePoint::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DoublePoint::_internal_y() const {
  return y_;
}
inline double DoublePoint::y() const {
  // @@protoc_insertion_point(field_get:TP.DoublePoint.y)
  return _internal_y();
}
inline void DoublePoint::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void DoublePoint::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TP.DoublePoint.y)
}

// -------------------------------------------------------------------

// DoubleSize

// required double width = 1;
inline bool DoubleSize::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DoubleSize::has_width() const {
  return _internal_has_width();
}
inline void DoubleSize::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DoubleSize::_internal_width() const {
  return width_;
}
inline double DoubleSize::width() const {
  // @@protoc_insertion_point(field_get:TP.DoubleSize.width)
  return _internal_width();
}
inline void DoubleSize::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void DoubleSize::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:TP.DoubleSize.width)
}

// required double height = 2;
inline bool DoubleSize::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DoubleSize::has_height() const {
  return _internal_has_height();
}
inline void DoubleSize::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DoubleSize::_internal_height() const {
  return height_;
}
inline double DoubleSize::height() const {
  // @@protoc_insertion_point(field_get:TP.DoubleSize.height)
  return _internal_height();
}
inline void DoubleSize::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void DoubleSize::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:TP.DoubleSize.height)
}

// -------------------------------------------------------------------

// AnchorPosArchive

// optional .TSP.Reference attachment = 1 [deprecated = true];
inline bool AnchorPosArchive::_internal_has_attachment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || attachment_ != nullptr);
  return value;
}
inline bool AnchorPosArchive::has_attachment() const {
  return _internal_has_attachment();
}
inline const ::TSP::Reference& AnchorPosArchive::_internal_attachment() const {
  const ::TSP::Reference* p = attachment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& AnchorPosArchive::attachment() const {
  // @@protoc_insertion_point(field_get:TP.AnchorPosArchive.attachment)
  return _internal_attachment();
}
inline void AnchorPosArchive::unsafe_arena_set_allocated_attachment(
    ::TSP::Reference* attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  attachment_ = attachment;
  if (attachment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.AnchorPosArchive.attachment)
}
inline ::TSP::Reference* AnchorPosArchive::release_attachment() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = attachment_;
  attachment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* AnchorPosArchive::unsafe_arena_release_attachment() {
  // @@protoc_insertion_point(field_release:TP.AnchorPosArchive.attachment)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = attachment_;
  attachment_ = nullptr;
  return temp;
}
inline ::TSP::Reference* AnchorPosArchive::_internal_mutable_attachment() {
  _has_bits_[0] |= 0x00000001u;
  if (attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    attachment_ = p;
  }
  return attachment_;
}
inline ::TSP::Reference* AnchorPosArchive::mutable_attachment() {
  // @@protoc_insertion_point(field_mutable:TP.AnchorPosArchive.attachment)
  return _internal_mutable_attachment();
}
inline void AnchorPosArchive::set_allocated_attachment(::TSP::Reference* attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  if (attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment)->GetArena();
    if (message_arena != submessage_arena) {
      attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attachment_ = attachment;
  // @@protoc_insertion_point(field_set_allocated:TP.AnchorPosArchive.attachment)
}

// optional .TSP.Point position = 2;
inline bool AnchorPosArchive::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool AnchorPosArchive::has_position() const {
  return _internal_has_position();
}
inline const ::TSP::Point& AnchorPosArchive::_internal_position() const {
  const ::TSP::Point* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& AnchorPosArchive::position() const {
  // @@protoc_insertion_point(field_get:TP.AnchorPosArchive.position)
  return _internal_position();
}
inline void AnchorPosArchive::unsafe_arena_set_allocated_position(
    ::TSP::Point* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.AnchorPosArchive.position)
}
inline ::TSP::Point* AnchorPosArchive::release_position() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Point* AnchorPosArchive::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:TP.AnchorPosArchive.position)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::TSP::Point* AnchorPosArchive::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::TSP::Point* AnchorPosArchive::mutable_position() {
  // @@protoc_insertion_point(field_mutable:TP.AnchorPosArchive.position)
  return _internal_mutable_position();
}
inline void AnchorPosArchive::set_allocated_position(::TSP::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TP.AnchorPosArchive.position)
}

// optional .TSP.UUIDPath drawable_uuid_path = 3;
inline bool AnchorPosArchive::_internal_has_drawable_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || drawable_uuid_path_ != nullptr);
  return value;
}
inline bool AnchorPosArchive::has_drawable_uuid_path() const {
  return _internal_has_drawable_uuid_path();
}
inline const ::TSP::UUIDPath& AnchorPosArchive::_internal_drawable_uuid_path() const {
  const ::TSP::UUIDPath* p = drawable_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& AnchorPosArchive::drawable_uuid_path() const {
  // @@protoc_insertion_point(field_get:TP.AnchorPosArchive.drawable_uuid_path)
  return _internal_drawable_uuid_path();
}
inline void AnchorPosArchive::unsafe_arena_set_allocated_drawable_uuid_path(
    ::TSP::UUIDPath* drawable_uuid_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_uuid_path_);
  }
  drawable_uuid_path_ = drawable_uuid_path;
  if (drawable_uuid_path) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.AnchorPosArchive.drawable_uuid_path)
}
inline ::TSP::UUIDPath* AnchorPosArchive::release_drawable_uuid_path() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = drawable_uuid_path_;
  drawable_uuid_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* AnchorPosArchive::unsafe_arena_release_drawable_uuid_path() {
  // @@protoc_insertion_point(field_release:TP.AnchorPosArchive.drawable_uuid_path)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = drawable_uuid_path_;
  drawable_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* AnchorPosArchive::_internal_mutable_drawable_uuid_path() {
  _has_bits_[0] |= 0x00000004u;
  if (drawable_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    drawable_uuid_path_ = p;
  }
  return drawable_uuid_path_;
}
inline ::TSP::UUIDPath* AnchorPosArchive::mutable_drawable_uuid_path() {
  // @@protoc_insertion_point(field_mutable:TP.AnchorPosArchive.drawable_uuid_path)
  return _internal_mutable_drawable_uuid_path();
}
inline void AnchorPosArchive::set_allocated_drawable_uuid_path(::TSP::UUIDPath* drawable_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_uuid_path_);
  }
  if (drawable_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_uuid_path)->GetArena();
    if (message_arena != submessage_arena) {
      drawable_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  drawable_uuid_path_ = drawable_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TP.AnchorPosArchive.drawable_uuid_path)
}

// optional .TP.DoublePoint double_position = 4;
inline bool AnchorPosArchive::_internal_has_double_position() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || double_position_ != nullptr);
  return value;
}
inline bool AnchorPosArchive::has_double_position() const {
  return _internal_has_double_position();
}
inline void AnchorPosArchive::clear_double_position() {
  if (double_position_ != nullptr) double_position_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TP::DoublePoint& AnchorPosArchive::_internal_double_position() const {
  const ::TP::DoublePoint* p = double_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::TP::DoublePoint&>(
      ::TP::_DoublePoint_default_instance_);
}
inline const ::TP::DoublePoint& AnchorPosArchive::double_position() const {
  // @@protoc_insertion_point(field_get:TP.AnchorPosArchive.double_position)
  return _internal_double_position();
}
inline void AnchorPosArchive::unsafe_arena_set_allocated_double_position(
    ::TP::DoublePoint* double_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_position_);
  }
  double_position_ = double_position;
  if (double_position) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.AnchorPosArchive.double_position)
}
inline ::TP::DoublePoint* AnchorPosArchive::release_double_position() {
  _has_bits_[0] &= ~0x00000008u;
  ::TP::DoublePoint* temp = double_position_;
  double_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TP::DoublePoint* AnchorPosArchive::unsafe_arena_release_double_position() {
  // @@protoc_insertion_point(field_release:TP.AnchorPosArchive.double_position)
  _has_bits_[0] &= ~0x00000008u;
  ::TP::DoublePoint* temp = double_position_;
  double_position_ = nullptr;
  return temp;
}
inline ::TP::DoublePoint* AnchorPosArchive::_internal_mutable_double_position() {
  _has_bits_[0] |= 0x00000008u;
  if (double_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TP::DoublePoint>(GetArena());
    double_position_ = p;
  }
  return double_position_;
}
inline ::TP::DoublePoint* AnchorPosArchive::mutable_double_position() {
  // @@protoc_insertion_point(field_mutable:TP.AnchorPosArchive.double_position)
  return _internal_mutable_double_position();
}
inline void AnchorPosArchive::set_allocated_double_position(::TP::DoublePoint* double_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete double_position_;
  }
  if (double_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_position);
    if (message_arena != submessage_arena) {
      double_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  double_position_ = double_position;
  // @@protoc_insertion_point(field_set_allocated:TP.AnchorPosArchive.double_position)
}

// -------------------------------------------------------------------

// TargetHintArchive

// optional .TSP.Point frame_origin = 1;
inline bool TargetHintArchive::_internal_has_frame_origin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || frame_origin_ != nullptr);
  return value;
}
inline bool TargetHintArchive::has_frame_origin() const {
  return _internal_has_frame_origin();
}
inline const ::TSP::Point& TargetHintArchive::_internal_frame_origin() const {
  const ::TSP::Point* p = frame_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& TargetHintArchive::frame_origin() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.frame_origin)
  return _internal_frame_origin();
}
inline void TargetHintArchive::unsafe_arena_set_allocated_frame_origin(
    ::TSP::Point* frame_origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_origin_);
  }
  frame_origin_ = frame_origin;
  if (frame_origin) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TargetHintArchive.frame_origin)
}
inline ::TSP::Point* TargetHintArchive::release_frame_origin() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Point* temp = frame_origin_;
  frame_origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Point* TargetHintArchive::unsafe_arena_release_frame_origin() {
  // @@protoc_insertion_point(field_release:TP.TargetHintArchive.frame_origin)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Point* temp = frame_origin_;
  frame_origin_ = nullptr;
  return temp;
}
inline ::TSP::Point* TargetHintArchive::_internal_mutable_frame_origin() {
  _has_bits_[0] |= 0x00000001u;
  if (frame_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArena());
    frame_origin_ = p;
  }
  return frame_origin_;
}
inline ::TSP::Point* TargetHintArchive::mutable_frame_origin() {
  // @@protoc_insertion_point(field_mutable:TP.TargetHintArchive.frame_origin)
  return _internal_mutable_frame_origin();
}
inline void TargetHintArchive::set_allocated_frame_origin(::TSP::Point* frame_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_origin_);
  }
  if (frame_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_origin)->GetArena();
    if (message_arena != submessage_arena) {
      frame_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_origin_ = frame_origin;
  // @@protoc_insertion_point(field_set_allocated:TP.TargetHintArchive.frame_origin)
}

// optional .TSP.Size frame_size = 2;
inline bool TargetHintArchive::_internal_has_frame_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || frame_size_ != nullptr);
  return value;
}
inline bool TargetHintArchive::has_frame_size() const {
  return _internal_has_frame_size();
}
inline const ::TSP::Size& TargetHintArchive::_internal_frame_size() const {
  const ::TSP::Size* p = frame_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& TargetHintArchive::frame_size() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.frame_size)
  return _internal_frame_size();
}
inline void TargetHintArchive::unsafe_arena_set_allocated_frame_size(
    ::TSP::Size* frame_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_size_);
  }
  frame_size_ = frame_size;
  if (frame_size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TargetHintArchive.frame_size)
}
inline ::TSP::Size* TargetHintArchive::release_frame_size() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = frame_size_;
  frame_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* TargetHintArchive::unsafe_arena_release_frame_size() {
  // @@protoc_insertion_point(field_release:TP.TargetHintArchive.frame_size)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = frame_size_;
  frame_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* TargetHintArchive::_internal_mutable_frame_size() {
  _has_bits_[0] |= 0x00000002u;
  if (frame_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    frame_size_ = p;
  }
  return frame_size_;
}
inline ::TSP::Size* TargetHintArchive::mutable_frame_size() {
  // @@protoc_insertion_point(field_mutable:TP.TargetHintArchive.frame_size)
  return _internal_mutable_frame_size();
}
inline void TargetHintArchive::set_allocated_frame_size(::TSP::Size* frame_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_size_);
  }
  if (frame_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_size)->GetArena();
    if (message_arena != submessage_arena) {
      frame_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  frame_size_ = frame_size;
  // @@protoc_insertion_point(field_set_allocated:TP.TargetHintArchive.frame_size)
}

// optional .TSP.Range range = 3;
inline bool TargetHintArchive::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool TargetHintArchive::has_range() const {
  return _internal_has_range();
}
inline const ::TSP::Range& TargetHintArchive::_internal_range() const {
  const ::TSP::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& TargetHintArchive::range() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.range)
  return _internal_range();
}
inline void TargetHintArchive::unsafe_arena_set_allocated_range(
    ::TSP::Range* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TargetHintArchive.range)
}
inline ::TSP::Range* TargetHintArchive::release_range() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* TargetHintArchive::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TP.TargetHintArchive.range)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::TSP::Range* TargetHintArchive::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000004u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::TSP::Range* TargetHintArchive::mutable_range() {
  // @@protoc_insertion_point(field_mutable:TP.TargetHintArchive.range)
  return _internal_mutable_range();
}
inline void TargetHintArchive::set_allocated_range(::TSP::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range)->GetArena();
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TP.TargetHintArchive.range)
}

// optional uint32 next_widow_pulls_down_from_char_index = 4;
inline bool TargetHintArchive::_internal_has_next_widow_pulls_down_from_char_index() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TargetHintArchive::has_next_widow_pulls_down_from_char_index() const {
  return _internal_has_next_widow_pulls_down_from_char_index();
}
inline void TargetHintArchive::clear_next_widow_pulls_down_from_char_index() {
  next_widow_pulls_down_from_char_index_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetHintArchive::_internal_next_widow_pulls_down_from_char_index() const {
  return next_widow_pulls_down_from_char_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetHintArchive::next_widow_pulls_down_from_char_index() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.next_widow_pulls_down_from_char_index)
  return _internal_next_widow_pulls_down_from_char_index();
}
inline void TargetHintArchive::_internal_set_next_widow_pulls_down_from_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  next_widow_pulls_down_from_char_index_ = value;
}
inline void TargetHintArchive::set_next_widow_pulls_down_from_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_next_widow_pulls_down_from_char_index(value);
  // @@protoc_insertion_point(field_set:TP.TargetHintArchive.next_widow_pulls_down_from_char_index)
}

// optional .TSP.Range anchored_range = 5;
inline bool TargetHintArchive::_internal_has_anchored_range() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || anchored_range_ != nullptr);
  return value;
}
inline bool TargetHintArchive::has_anchored_range() const {
  return _internal_has_anchored_range();
}
inline const ::TSP::Range& TargetHintArchive::_internal_anchored_range() const {
  const ::TSP::Range* p = anchored_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& TargetHintArchive::anchored_range() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.anchored_range)
  return _internal_anchored_range();
}
inline void TargetHintArchive::unsafe_arena_set_allocated_anchored_range(
    ::TSP::Range* anchored_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchored_range_);
  }
  anchored_range_ = anchored_range;
  if (anchored_range) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TargetHintArchive.anchored_range)
}
inline ::TSP::Range* TargetHintArchive::release_anchored_range() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Range* temp = anchored_range_;
  anchored_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* TargetHintArchive::unsafe_arena_release_anchored_range() {
  // @@protoc_insertion_point(field_release:TP.TargetHintArchive.anchored_range)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Range* temp = anchored_range_;
  anchored_range_ = nullptr;
  return temp;
}
inline ::TSP::Range* TargetHintArchive::_internal_mutable_anchored_range() {
  _has_bits_[0] |= 0x00000008u;
  if (anchored_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    anchored_range_ = p;
  }
  return anchored_range_;
}
inline ::TSP::Range* TargetHintArchive::mutable_anchored_range() {
  // @@protoc_insertion_point(field_mutable:TP.TargetHintArchive.anchored_range)
  return _internal_mutable_anchored_range();
}
inline void TargetHintArchive::set_allocated_anchored_range(::TSP::Range* anchored_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchored_range_);
  }
  if (anchored_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchored_range)->GetArena();
    if (message_arena != submessage_arena) {
      anchored_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchored_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  anchored_range_ = anchored_range;
  // @@protoc_insertion_point(field_set_allocated:TP.TargetHintArchive.anchored_range)
}

// optional uint32 column_count = 6;
inline bool TargetHintArchive::_internal_has_column_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TargetHintArchive::has_column_count() const {
  return _internal_has_column_count();
}
inline void TargetHintArchive::clear_column_count() {
  column_count_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetHintArchive::_internal_column_count() const {
  return column_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetHintArchive::column_count() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.column_count)
  return _internal_column_count();
}
inline void TargetHintArchive::_internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  column_count_ = value;
}
inline void TargetHintArchive::set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:TP.TargetHintArchive.column_count)
}

// optional uint32 line_fragment_count = 7;
inline bool TargetHintArchive::_internal_has_line_fragment_count() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TargetHintArchive::has_line_fragment_count() const {
  return _internal_has_line_fragment_count();
}
inline void TargetHintArchive::clear_line_fragment_count() {
  line_fragment_count_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetHintArchive::_internal_line_fragment_count() const {
  return line_fragment_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetHintArchive::line_fragment_count() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.line_fragment_count)
  return _internal_line_fragment_count();
}
inline void TargetHintArchive::_internal_set_line_fragment_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  line_fragment_count_ = value;
}
inline void TargetHintArchive::set_line_fragment_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_line_fragment_count(value);
  // @@protoc_insertion_point(field_set:TP.TargetHintArchive.line_fragment_count)
}

// optional .TP.DoublePoint double_origin = 8;
inline bool TargetHintArchive::_internal_has_double_origin() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || double_origin_ != nullptr);
  return value;
}
inline bool TargetHintArchive::has_double_origin() const {
  return _internal_has_double_origin();
}
inline void TargetHintArchive::clear_double_origin() {
  if (double_origin_ != nullptr) double_origin_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TP::DoublePoint& TargetHintArchive::_internal_double_origin() const {
  const ::TP::DoublePoint* p = double_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TP::DoublePoint&>(
      ::TP::_DoublePoint_default_instance_);
}
inline const ::TP::DoublePoint& TargetHintArchive::double_origin() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.double_origin)
  return _internal_double_origin();
}
inline void TargetHintArchive::unsafe_arena_set_allocated_double_origin(
    ::TP::DoublePoint* double_origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_origin_);
  }
  double_origin_ = double_origin;
  if (double_origin) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TargetHintArchive.double_origin)
}
inline ::TP::DoublePoint* TargetHintArchive::release_double_origin() {
  _has_bits_[0] &= ~0x00000010u;
  ::TP::DoublePoint* temp = double_origin_;
  double_origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TP::DoublePoint* TargetHintArchive::unsafe_arena_release_double_origin() {
  // @@protoc_insertion_point(field_release:TP.TargetHintArchive.double_origin)
  _has_bits_[0] &= ~0x00000010u;
  ::TP::DoublePoint* temp = double_origin_;
  double_origin_ = nullptr;
  return temp;
}
inline ::TP::DoublePoint* TargetHintArchive::_internal_mutable_double_origin() {
  _has_bits_[0] |= 0x00000010u;
  if (double_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TP::DoublePoint>(GetArena());
    double_origin_ = p;
  }
  return double_origin_;
}
inline ::TP::DoublePoint* TargetHintArchive::mutable_double_origin() {
  // @@protoc_insertion_point(field_mutable:TP.TargetHintArchive.double_origin)
  return _internal_mutable_double_origin();
}
inline void TargetHintArchive::set_allocated_double_origin(::TP::DoublePoint* double_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete double_origin_;
  }
  if (double_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_origin);
    if (message_arena != submessage_arena) {
      double_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  double_origin_ = double_origin;
  // @@protoc_insertion_point(field_set_allocated:TP.TargetHintArchive.double_origin)
}

// optional .TP.DoubleSize double_size = 9;
inline bool TargetHintArchive::_internal_has_double_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || double_size_ != nullptr);
  return value;
}
inline bool TargetHintArchive::has_double_size() const {
  return _internal_has_double_size();
}
inline void TargetHintArchive::clear_double_size() {
  if (double_size_ != nullptr) double_size_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TP::DoubleSize& TargetHintArchive::_internal_double_size() const {
  const ::TP::DoubleSize* p = double_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TP::DoubleSize&>(
      ::TP::_DoubleSize_default_instance_);
}
inline const ::TP::DoubleSize& TargetHintArchive::double_size() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.double_size)
  return _internal_double_size();
}
inline void TargetHintArchive::unsafe_arena_set_allocated_double_size(
    ::TP::DoubleSize* double_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_size_);
  }
  double_size_ = double_size;
  if (double_size) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TargetHintArchive.double_size)
}
inline ::TP::DoubleSize* TargetHintArchive::release_double_size() {
  _has_bits_[0] &= ~0x00000020u;
  ::TP::DoubleSize* temp = double_size_;
  double_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TP::DoubleSize* TargetHintArchive::unsafe_arena_release_double_size() {
  // @@protoc_insertion_point(field_release:TP.TargetHintArchive.double_size)
  _has_bits_[0] &= ~0x00000020u;
  ::TP::DoubleSize* temp = double_size_;
  double_size_ = nullptr;
  return temp;
}
inline ::TP::DoubleSize* TargetHintArchive::_internal_mutable_double_size() {
  _has_bits_[0] |= 0x00000020u;
  if (double_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TP::DoubleSize>(GetArena());
    double_size_ = p;
  }
  return double_size_;
}
inline ::TP::DoubleSize* TargetHintArchive::mutable_double_size() {
  // @@protoc_insertion_point(field_mutable:TP.TargetHintArchive.double_size)
  return _internal_mutable_double_size();
}
inline void TargetHintArchive::set_allocated_double_size(::TP::DoubleSize* double_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete double_size_;
  }
  if (double_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_size);
    if (message_arena != submessage_arena) {
      double_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  double_size_ = double_size;
  // @@protoc_insertion_point(field_set_allocated:TP.TargetHintArchive.double_size)
}

// optional bool end_of_layout = 10;
inline bool TargetHintArchive::_internal_has_end_of_layout() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TargetHintArchive::has_end_of_layout() const {
  return _internal_has_end_of_layout();
}
inline void TargetHintArchive::clear_end_of_layout() {
  end_of_layout_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool TargetHintArchive::_internal_end_of_layout() const {
  return end_of_layout_;
}
inline bool TargetHintArchive::end_of_layout() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.end_of_layout)
  return _internal_end_of_layout();
}
inline void TargetHintArchive::_internal_set_end_of_layout(bool value) {
  _has_bits_[0] |= 0x00000200u;
  end_of_layout_ = value;
}
inline void TargetHintArchive::set_end_of_layout(bool value) {
  _internal_set_end_of_layout(value);
  // @@protoc_insertion_point(field_set:TP.TargetHintArchive.end_of_layout)
}

// optional bool last_line_is_empty_and_has_list_label = 11;
inline bool TargetHintArchive::_internal_has_last_line_is_empty_and_has_list_label() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TargetHintArchive::has_last_line_is_empty_and_has_list_label() const {
  return _internal_has_last_line_is_empty_and_has_list_label();
}
inline void TargetHintArchive::clear_last_line_is_empty_and_has_list_label() {
  last_line_is_empty_and_has_list_label_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool TargetHintArchive::_internal_last_line_is_empty_and_has_list_label() const {
  return last_line_is_empty_and_has_list_label_;
}
inline bool TargetHintArchive::last_line_is_empty_and_has_list_label() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.last_line_is_empty_and_has_list_label)
  return _internal_last_line_is_empty_and_has_list_label();
}
inline void TargetHintArchive::_internal_set_last_line_is_empty_and_has_list_label(bool value) {
  _has_bits_[0] |= 0x00000400u;
  last_line_is_empty_and_has_list_label_ = value;
}
inline void TargetHintArchive::set_last_line_is_empty_and_has_list_label(bool value) {
  _internal_set_last_line_is_empty_and_has_list_label(value);
  // @@protoc_insertion_point(field_set:TP.TargetHintArchive.last_line_is_empty_and_has_list_label)
}

// optional bool text_is_vertical = 12;
inline bool TargetHintArchive::_internal_has_text_is_vertical() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TargetHintArchive::has_text_is_vertical() const {
  return _internal_has_text_is_vertical();
}
inline void TargetHintArchive::clear_text_is_vertical() {
  text_is_vertical_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TargetHintArchive::_internal_text_is_vertical() const {
  return text_is_vertical_;
}
inline bool TargetHintArchive::text_is_vertical() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.text_is_vertical)
  return _internal_text_is_vertical();
}
inline void TargetHintArchive::_internal_set_text_is_vertical(bool value) {
  _has_bits_[0] |= 0x00000800u;
  text_is_vertical_ = value;
}
inline void TargetHintArchive::set_text_is_vertical(bool value) {
  _internal_set_text_is_vertical(value);
  // @@protoc_insertion_point(field_set:TP.TargetHintArchive.text_is_vertical)
}

// optional bool terminated_by_break = 13;
inline bool TargetHintArchive::_internal_has_terminated_by_break() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TargetHintArchive::has_terminated_by_break() const {
  return _internal_has_terminated_by_break();
}
inline void TargetHintArchive::clear_terminated_by_break() {
  terminated_by_break_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool TargetHintArchive::_internal_terminated_by_break() const {
  return terminated_by_break_;
}
inline bool TargetHintArchive::terminated_by_break() const {
  // @@protoc_insertion_point(field_get:TP.TargetHintArchive.terminated_by_break)
  return _internal_terminated_by_break();
}
inline void TargetHintArchive::_internal_set_terminated_by_break(bool value) {
  _has_bits_[0] |= 0x00001000u;
  terminated_by_break_ = value;
}
inline void TargetHintArchive::set_terminated_by_break(bool value) {
  _internal_set_terminated_by_break(value);
  // @@protoc_insertion_point(field_set:TP.TargetHintArchive.terminated_by_break)
}

// -------------------------------------------------------------------

// PageHintArchive

// optional .TP.PageHintArchive.PageKind page_kind = 1;
inline bool PageHintArchive::_internal_has_page_kind() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PageHintArchive::has_page_kind() const {
  return _internal_has_page_kind();
}
inline void PageHintArchive::clear_page_kind() {
  page_kind_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TP::PageHintArchive_PageKind PageHintArchive::_internal_page_kind() const {
  return static_cast< ::TP::PageHintArchive_PageKind >(page_kind_);
}
inline ::TP::PageHintArchive_PageKind PageHintArchive::page_kind() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.page_kind)
  return _internal_page_kind();
}
inline void PageHintArchive::_internal_set_page_kind(::TP::PageHintArchive_PageKind value) {
  assert(::TP::PageHintArchive_PageKind_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  page_kind_ = value;
}
inline void PageHintArchive::set_page_kind(::TP::PageHintArchive_PageKind value) {
  _internal_set_page_kind(value);
  // @@protoc_insertion_point(field_set:TP.PageHintArchive.page_kind)
}

// repeated .TP.TargetHintArchive target_hints = 2;
inline int PageHintArchive::_internal_target_hints_size() const {
  return target_hints_.size();
}
inline int PageHintArchive::target_hints_size() const {
  return _internal_target_hints_size();
}
inline void PageHintArchive::clear_target_hints() {
  target_hints_.Clear();
}
inline ::TP::TargetHintArchive* PageHintArchive::mutable_target_hints(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.target_hints)
  return target_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >*
PageHintArchive::mutable_target_hints() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageHintArchive.target_hints)
  return &target_hints_;
}
inline const ::TP::TargetHintArchive& PageHintArchive::_internal_target_hints(int index) const {
  return target_hints_.Get(index);
}
inline const ::TP::TargetHintArchive& PageHintArchive::target_hints(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.target_hints)
  return _internal_target_hints(index);
}
inline ::TP::TargetHintArchive* PageHintArchive::_internal_add_target_hints() {
  return target_hints_.Add();
}
inline ::TP::TargetHintArchive* PageHintArchive::add_target_hints() {
  // @@protoc_insertion_point(field_add:TP.PageHintArchive.target_hints)
  return _internal_add_target_hints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >&
PageHintArchive::target_hints() const {
  // @@protoc_insertion_point(field_list:TP.PageHintArchive.target_hints)
  return target_hints_;
}

// optional .TSP.Range footnote_auto_number_range = 3;
inline bool PageHintArchive::_internal_has_footnote_auto_number_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || footnote_auto_number_range_ != nullptr);
  return value;
}
inline bool PageHintArchive::has_footnote_auto_number_range() const {
  return _internal_has_footnote_auto_number_range();
}
inline const ::TSP::Range& PageHintArchive::_internal_footnote_auto_number_range() const {
  const ::TSP::Range* p = footnote_auto_number_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& PageHintArchive::footnote_auto_number_range() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.footnote_auto_number_range)
  return _internal_footnote_auto_number_range();
}
inline void PageHintArchive::unsafe_arena_set_allocated_footnote_auto_number_range(
    ::TSP::Range* footnote_auto_number_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footnote_auto_number_range_);
  }
  footnote_auto_number_range_ = footnote_auto_number_range;
  if (footnote_auto_number_range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageHintArchive.footnote_auto_number_range)
}
inline ::TSP::Range* PageHintArchive::release_footnote_auto_number_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = footnote_auto_number_range_;
  footnote_auto_number_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* PageHintArchive::unsafe_arena_release_footnote_auto_number_range() {
  // @@protoc_insertion_point(field_release:TP.PageHintArchive.footnote_auto_number_range)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = footnote_auto_number_range_;
  footnote_auto_number_range_ = nullptr;
  return temp;
}
inline ::TSP::Range* PageHintArchive::_internal_mutable_footnote_auto_number_range() {
  _has_bits_[0] |= 0x00000001u;
  if (footnote_auto_number_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    footnote_auto_number_range_ = p;
  }
  return footnote_auto_number_range_;
}
inline ::TSP::Range* PageHintArchive::mutable_footnote_auto_number_range() {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.footnote_auto_number_range)
  return _internal_mutable_footnote_auto_number_range();
}
inline void PageHintArchive::set_allocated_footnote_auto_number_range(::TSP::Range* footnote_auto_number_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(footnote_auto_number_range_);
  }
  if (footnote_auto_number_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footnote_auto_number_range)->GetArena();
    if (message_arena != submessage_arena) {
      footnote_auto_number_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footnote_auto_number_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  footnote_auto_number_range_ = footnote_auto_number_range;
  // @@protoc_insertion_point(field_set_allocated:TP.PageHintArchive.footnote_auto_number_range)
}

// optional .TSP.Range footnote_layout_range = 4;
inline bool PageHintArchive::_internal_has_footnote_layout_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || footnote_layout_range_ != nullptr);
  return value;
}
inline bool PageHintArchive::has_footnote_layout_range() const {
  return _internal_has_footnote_layout_range();
}
inline const ::TSP::Range& PageHintArchive::_internal_footnote_layout_range() const {
  const ::TSP::Range* p = footnote_layout_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& PageHintArchive::footnote_layout_range() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.footnote_layout_range)
  return _internal_footnote_layout_range();
}
inline void PageHintArchive::unsafe_arena_set_allocated_footnote_layout_range(
    ::TSP::Range* footnote_layout_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footnote_layout_range_);
  }
  footnote_layout_range_ = footnote_layout_range;
  if (footnote_layout_range) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageHintArchive.footnote_layout_range)
}
inline ::TSP::Range* PageHintArchive::release_footnote_layout_range() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = footnote_layout_range_;
  footnote_layout_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* PageHintArchive::unsafe_arena_release_footnote_layout_range() {
  // @@protoc_insertion_point(field_release:TP.PageHintArchive.footnote_layout_range)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = footnote_layout_range_;
  footnote_layout_range_ = nullptr;
  return temp;
}
inline ::TSP::Range* PageHintArchive::_internal_mutable_footnote_layout_range() {
  _has_bits_[0] |= 0x00000002u;
  if (footnote_layout_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    footnote_layout_range_ = p;
  }
  return footnote_layout_range_;
}
inline ::TSP::Range* PageHintArchive::mutable_footnote_layout_range() {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.footnote_layout_range)
  return _internal_mutable_footnote_layout_range();
}
inline void PageHintArchive::set_allocated_footnote_layout_range(::TSP::Range* footnote_layout_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(footnote_layout_range_);
  }
  if (footnote_layout_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footnote_layout_range)->GetArena();
    if (message_arena != submessage_arena) {
      footnote_layout_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footnote_layout_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  footnote_layout_range_ = footnote_layout_range;
  // @@protoc_insertion_point(field_set_allocated:TP.PageHintArchive.footnote_layout_range)
}

// optional .TSP.Reference first_child_hint = 6 [deprecated = true];
inline bool PageHintArchive::_internal_has_first_child_hint() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || first_child_hint_ != nullptr);
  return value;
}
inline bool PageHintArchive::has_first_child_hint() const {
  return _internal_has_first_child_hint();
}
inline const ::TSP::Reference& PageHintArchive::_internal_first_child_hint() const {
  const ::TSP::Reference* p = first_child_hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PageHintArchive::first_child_hint() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.first_child_hint)
  return _internal_first_child_hint();
}
inline void PageHintArchive::unsafe_arena_set_allocated_first_child_hint(
    ::TSP::Reference* first_child_hint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_child_hint_);
  }
  first_child_hint_ = first_child_hint;
  if (first_child_hint) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageHintArchive.first_child_hint)
}
inline ::TSP::Reference* PageHintArchive::release_first_child_hint() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = first_child_hint_;
  first_child_hint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PageHintArchive::unsafe_arena_release_first_child_hint() {
  // @@protoc_insertion_point(field_release:TP.PageHintArchive.first_child_hint)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = first_child_hint_;
  first_child_hint_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PageHintArchive::_internal_mutable_first_child_hint() {
  _has_bits_[0] |= 0x00000004u;
  if (first_child_hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    first_child_hint_ = p;
  }
  return first_child_hint_;
}
inline ::TSP::Reference* PageHintArchive::mutable_first_child_hint() {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.first_child_hint)
  return _internal_mutable_first_child_hint();
}
inline void PageHintArchive::set_allocated_first_child_hint(::TSP::Reference* first_child_hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_child_hint_);
  }
  if (first_child_hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_child_hint)->GetArena();
    if (message_arena != submessage_arena) {
      first_child_hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_child_hint, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  first_child_hint_ = first_child_hint;
  // @@protoc_insertion_point(field_set_allocated:TP.PageHintArchive.first_child_hint)
}

// optional .TSP.Reference last_child_hint = 7 [deprecated = true];
inline bool PageHintArchive::_internal_has_last_child_hint() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || last_child_hint_ != nullptr);
  return value;
}
inline bool PageHintArchive::has_last_child_hint() const {
  return _internal_has_last_child_hint();
}
inline const ::TSP::Reference& PageHintArchive::_internal_last_child_hint() const {
  const ::TSP::Reference* p = last_child_hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PageHintArchive::last_child_hint() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.last_child_hint)
  return _internal_last_child_hint();
}
inline void PageHintArchive::unsafe_arena_set_allocated_last_child_hint(
    ::TSP::Reference* last_child_hint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_child_hint_);
  }
  last_child_hint_ = last_child_hint;
  if (last_child_hint) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageHintArchive.last_child_hint)
}
inline ::TSP::Reference* PageHintArchive::release_last_child_hint() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = last_child_hint_;
  last_child_hint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PageHintArchive::unsafe_arena_release_last_child_hint() {
  // @@protoc_insertion_point(field_release:TP.PageHintArchive.last_child_hint)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = last_child_hint_;
  last_child_hint_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PageHintArchive::_internal_mutable_last_child_hint() {
  _has_bits_[0] |= 0x00000008u;
  if (last_child_hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    last_child_hint_ = p;
  }
  return last_child_hint_;
}
inline ::TSP::Reference* PageHintArchive::mutable_last_child_hint() {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.last_child_hint)
  return _internal_mutable_last_child_hint();
}
inline void PageHintArchive::set_allocated_last_child_hint(::TSP::Reference* last_child_hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_child_hint_);
  }
  if (last_child_hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_child_hint)->GetArena();
    if (message_arena != submessage_arena) {
      last_child_hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_child_hint, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  last_child_hint_ = last_child_hint;
  // @@protoc_insertion_point(field_set_allocated:TP.PageHintArchive.last_child_hint)
}

// repeated .TP.AnchorPosArchive anchored_attachments_map = 8;
inline int PageHintArchive::_internal_anchored_attachments_map_size() const {
  return anchored_attachments_map_.size();
}
inline int PageHintArchive::anchored_attachments_map_size() const {
  return _internal_anchored_attachments_map_size();
}
inline void PageHintArchive::clear_anchored_attachments_map() {
  anchored_attachments_map_.Clear();
}
inline ::TP::AnchorPosArchive* PageHintArchive::mutable_anchored_attachments_map(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.anchored_attachments_map)
  return anchored_attachments_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::AnchorPosArchive >*
PageHintArchive::mutable_anchored_attachments_map() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageHintArchive.anchored_attachments_map)
  return &anchored_attachments_map_;
}
inline const ::TP::AnchorPosArchive& PageHintArchive::_internal_anchored_attachments_map(int index) const {
  return anchored_attachments_map_.Get(index);
}
inline const ::TP::AnchorPosArchive& PageHintArchive::anchored_attachments_map(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.anchored_attachments_map)
  return _internal_anchored_attachments_map(index);
}
inline ::TP::AnchorPosArchive* PageHintArchive::_internal_add_anchored_attachments_map() {
  return anchored_attachments_map_.Add();
}
inline ::TP::AnchorPosArchive* PageHintArchive::add_anchored_attachments_map() {
  // @@protoc_insertion_point(field_add:TP.PageHintArchive.anchored_attachments_map)
  return _internal_add_anchored_attachments_map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::AnchorPosArchive >&
PageHintArchive::anchored_attachments_map() const {
  // @@protoc_insertion_point(field_list:TP.PageHintArchive.anchored_attachments_map)
  return anchored_attachments_map_;
}

// optional .TP.TopicNumberHintsArchive topic_numbers = 9;
inline bool PageHintArchive::_internal_has_topic_numbers() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || topic_numbers_ != nullptr);
  return value;
}
inline bool PageHintArchive::has_topic_numbers() const {
  return _internal_has_topic_numbers();
}
inline void PageHintArchive::clear_topic_numbers() {
  if (topic_numbers_ != nullptr) topic_numbers_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TP::TopicNumberHintsArchive& PageHintArchive::_internal_topic_numbers() const {
  const ::TP::TopicNumberHintsArchive* p = topic_numbers_;
  return p != nullptr ? *p : reinterpret_cast<const ::TP::TopicNumberHintsArchive&>(
      ::TP::_TopicNumberHintsArchive_default_instance_);
}
inline const ::TP::TopicNumberHintsArchive& PageHintArchive::topic_numbers() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.topic_numbers)
  return _internal_topic_numbers();
}
inline void PageHintArchive::unsafe_arena_set_allocated_topic_numbers(
    ::TP::TopicNumberHintsArchive* topic_numbers) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic_numbers_);
  }
  topic_numbers_ = topic_numbers;
  if (topic_numbers) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.PageHintArchive.topic_numbers)
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::release_topic_numbers() {
  _has_bits_[0] &= ~0x00000010u;
  ::TP::TopicNumberHintsArchive* temp = topic_numbers_;
  topic_numbers_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::unsafe_arena_release_topic_numbers() {
  // @@protoc_insertion_point(field_release:TP.PageHintArchive.topic_numbers)
  _has_bits_[0] &= ~0x00000010u;
  ::TP::TopicNumberHintsArchive* temp = topic_numbers_;
  topic_numbers_ = nullptr;
  return temp;
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::_internal_mutable_topic_numbers() {
  _has_bits_[0] |= 0x00000010u;
  if (topic_numbers_ == nullptr) {
    auto* p = CreateMaybeMessage<::TP::TopicNumberHintsArchive>(GetArena());
    topic_numbers_ = p;
  }
  return topic_numbers_;
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::mutable_topic_numbers() {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.topic_numbers)
  return _internal_mutable_topic_numbers();
}
inline void PageHintArchive::set_allocated_topic_numbers(::TP::TopicNumberHintsArchive* topic_numbers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topic_numbers_;
  }
  if (topic_numbers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topic_numbers);
    if (message_arena != submessage_arena) {
      topic_numbers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_numbers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  topic_numbers_ = topic_numbers;
  // @@protoc_insertion_point(field_set_allocated:TP.PageHintArchive.topic_numbers)
}

// optional uint32 version_number = 10;
inline bool PageHintArchive::_internal_has_version_number() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PageHintArchive::has_version_number() const {
  return _internal_has_version_number();
}
inline void PageHintArchive::clear_version_number() {
  version_number_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageHintArchive::_internal_version_number() const {
  return version_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageHintArchive::version_number() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.version_number)
  return _internal_version_number();
}
inline void PageHintArchive::_internal_set_version_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  version_number_ = value;
}
inline void PageHintArchive::set_version_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version_number(value);
  // @@protoc_insertion_point(field_set:TP.PageHintArchive.version_number)
}

// optional uint32 platform_id = 11;
inline bool PageHintArchive::_internal_has_platform_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PageHintArchive::has_platform_id() const {
  return _internal_has_platform_id();
}
inline void PageHintArchive::clear_platform_id() {
  platform_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageHintArchive::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageHintArchive::platform_id() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.platform_id)
  return _internal_platform_id();
}
inline void PageHintArchive::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  platform_id_ = value;
}
inline void PageHintArchive::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:TP.PageHintArchive.platform_id)
}

// repeated .TSP.Reference child_hints = 12;
inline int PageHintArchive::_internal_child_hints_size() const {
  return child_hints_.size();
}
inline int PageHintArchive::child_hints_size() const {
  return _internal_child_hints_size();
}
inline ::TSP::Reference* PageHintArchive::mutable_child_hints(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.child_hints)
  return child_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PageHintArchive::mutable_child_hints() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageHintArchive.child_hints)
  return &child_hints_;
}
inline const ::TSP::Reference& PageHintArchive::_internal_child_hints(int index) const {
  return child_hints_.Get(index);
}
inline const ::TSP::Reference& PageHintArchive::child_hints(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.child_hints)
  return _internal_child_hints(index);
}
inline ::TSP::Reference* PageHintArchive::_internal_add_child_hints() {
  return child_hints_.Add();
}
inline ::TSP::Reference* PageHintArchive::add_child_hints() {
  // @@protoc_insertion_point(field_add:TP.PageHintArchive.child_hints)
  return _internal_add_child_hints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PageHintArchive::child_hints() const {
  // @@protoc_insertion_point(field_list:TP.PageHintArchive.child_hints)
  return child_hints_;
}

// repeated .TSP.UUID partitioned_attachment_uuids = 13;
inline int PageHintArchive::_internal_partitioned_attachment_uuids_size() const {
  return partitioned_attachment_uuids_.size();
}
inline int PageHintArchive::partitioned_attachment_uuids_size() const {
  return _internal_partitioned_attachment_uuids_size();
}
inline ::TSP::UUID* PageHintArchive::mutable_partitioned_attachment_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.partitioned_attachment_uuids)
  return partitioned_attachment_uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
PageHintArchive::mutable_partitioned_attachment_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageHintArchive.partitioned_attachment_uuids)
  return &partitioned_attachment_uuids_;
}
inline const ::TSP::UUID& PageHintArchive::_internal_partitioned_attachment_uuids(int index) const {
  return partitioned_attachment_uuids_.Get(index);
}
inline const ::TSP::UUID& PageHintArchive::partitioned_attachment_uuids(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.partitioned_attachment_uuids)
  return _internal_partitioned_attachment_uuids(index);
}
inline ::TSP::UUID* PageHintArchive::_internal_add_partitioned_attachment_uuids() {
  return partitioned_attachment_uuids_.Add();
}
inline ::TSP::UUID* PageHintArchive::add_partitioned_attachment_uuids() {
  // @@protoc_insertion_point(field_add:TP.PageHintArchive.partitioned_attachment_uuids)
  return _internal_add_partitioned_attachment_uuids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
PageHintArchive::partitioned_attachment_uuids() const {
  // @@protoc_insertion_point(field_list:TP.PageHintArchive.partitioned_attachment_uuids)
  return partitioned_attachment_uuids_;
}

// repeated .TSP.Reference text_flows = 14;
inline int PageHintArchive::_internal_text_flows_size() const {
  return text_flows_.size();
}
inline int PageHintArchive::text_flows_size() const {
  return _internal_text_flows_size();
}
inline ::TSP::Reference* PageHintArchive::mutable_text_flows(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.text_flows)
  return text_flows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PageHintArchive::mutable_text_flows() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageHintArchive.text_flows)
  return &text_flows_;
}
inline const ::TSP::Reference& PageHintArchive::_internal_text_flows(int index) const {
  return text_flows_.Get(index);
}
inline const ::TSP::Reference& PageHintArchive::text_flows(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.text_flows)
  return _internal_text_flows(index);
}
inline ::TSP::Reference* PageHintArchive::_internal_add_text_flows() {
  return text_flows_.Add();
}
inline ::TSP::Reference* PageHintArchive::add_text_flows() {
  // @@protoc_insertion_point(field_add:TP.PageHintArchive.text_flows)
  return _internal_add_text_flows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PageHintArchive::text_flows() const {
  // @@protoc_insertion_point(field_list:TP.PageHintArchive.text_flows)
  return text_flows_;
}

// repeated .TP.TargetHintArchive flow_hints = 15;
inline int PageHintArchive::_internal_flow_hints_size() const {
  return flow_hints_.size();
}
inline int PageHintArchive::flow_hints_size() const {
  return _internal_flow_hints_size();
}
inline void PageHintArchive::clear_flow_hints() {
  flow_hints_.Clear();
}
inline ::TP::TargetHintArchive* PageHintArchive::mutable_flow_hints(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.flow_hints)
  return flow_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >*
PageHintArchive::mutable_flow_hints() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageHintArchive.flow_hints)
  return &flow_hints_;
}
inline const ::TP::TargetHintArchive& PageHintArchive::_internal_flow_hints(int index) const {
  return flow_hints_.Get(index);
}
inline const ::TP::TargetHintArchive& PageHintArchive::flow_hints(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.flow_hints)
  return _internal_flow_hints(index);
}
inline ::TP::TargetHintArchive* PageHintArchive::_internal_add_flow_hints() {
  return flow_hints_.Add();
}
inline ::TP::TargetHintArchive* PageHintArchive::add_flow_hints() {
  // @@protoc_insertion_point(field_add:TP.PageHintArchive.flow_hints)
  return _internal_add_flow_hints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TargetHintArchive >&
PageHintArchive::flow_hints() const {
  // @@protoc_insertion_point(field_list:TP.PageHintArchive.flow_hints)
  return flow_hints_;
}

// repeated .TP.TopicNumberHintsArchive flow_topic_numbers = 16;
inline int PageHintArchive::_internal_flow_topic_numbers_size() const {
  return flow_topic_numbers_.size();
}
inline int PageHintArchive::flow_topic_numbers_size() const {
  return _internal_flow_topic_numbers_size();
}
inline void PageHintArchive::clear_flow_topic_numbers() {
  flow_topic_numbers_.Clear();
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::mutable_flow_topic_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:TP.PageHintArchive.flow_topic_numbers)
  return flow_topic_numbers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberHintsArchive >*
PageHintArchive::mutable_flow_topic_numbers() {
  // @@protoc_insertion_point(field_mutable_list:TP.PageHintArchive.flow_topic_numbers)
  return &flow_topic_numbers_;
}
inline const ::TP::TopicNumberHintsArchive& PageHintArchive::_internal_flow_topic_numbers(int index) const {
  return flow_topic_numbers_.Get(index);
}
inline const ::TP::TopicNumberHintsArchive& PageHintArchive::flow_topic_numbers(int index) const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.flow_topic_numbers)
  return _internal_flow_topic_numbers(index);
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::_internal_add_flow_topic_numbers() {
  return flow_topic_numbers_.Add();
}
inline ::TP::TopicNumberHintsArchive* PageHintArchive::add_flow_topic_numbers() {
  // @@protoc_insertion_point(field_add:TP.PageHintArchive.flow_topic_numbers)
  return _internal_add_flow_topic_numbers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberHintsArchive >&
PageHintArchive::flow_topic_numbers() const {
  // @@protoc_insertion_point(field_list:TP.PageHintArchive.flow_topic_numbers)
  return flow_topic_numbers_;
}

// optional .TP.PageHintArchive.PageSide page_side = 17 [deprecated = true];
inline bool PageHintArchive::_internal_has_page_side() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PageHintArchive::has_page_side() const {
  return _internal_has_page_side();
}
inline void PageHintArchive::clear_page_side() {
  page_side_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::TP::PageHintArchive_PageSide PageHintArchive::_internal_page_side() const {
  return static_cast< ::TP::PageHintArchive_PageSide >(page_side_);
}
inline ::TP::PageHintArchive_PageSide PageHintArchive::page_side() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.page_side)
  return _internal_page_side();
}
inline void PageHintArchive::_internal_set_page_side(::TP::PageHintArchive_PageSide value) {
  assert(::TP::PageHintArchive_PageSide_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  page_side_ = value;
}
inline void PageHintArchive::set_page_side(::TP::PageHintArchive_PageSide value) {
  _internal_set_page_side(value);
  // @@protoc_insertion_point(field_set:TP.PageHintArchive.page_side)
}

// optional uint32 page_column = 18;
inline bool PageHintArchive::_internal_has_page_column() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PageHintArchive::has_page_column() const {
  return _internal_has_page_column();
}
inline void PageHintArchive::clear_page_column() {
  page_column_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageHintArchive::_internal_page_column() const {
  return page_column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageHintArchive::page_column() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.page_column)
  return _internal_page_column();
}
inline void PageHintArchive::_internal_set_page_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  page_column_ = value;
}
inline void PageHintArchive::set_page_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_column(value);
  // @@protoc_insertion_point(field_set:TP.PageHintArchive.page_column)
}

// optional uint32 page_row = 19;
inline bool PageHintArchive::_internal_has_page_row() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PageHintArchive::has_page_row() const {
  return _internal_has_page_row();
}
inline void PageHintArchive::clear_page_row() {
  page_row_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageHintArchive::_internal_page_row() const {
  return page_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageHintArchive::page_row() const {
  // @@protoc_insertion_point(field_get:TP.PageHintArchive.page_row)
  return _internal_page_row();
}
inline void PageHintArchive::_internal_set_page_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  page_row_ = value;
}
inline void PageHintArchive::set_page_row(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_row(value);
  // @@protoc_insertion_point(field_set:TP.PageHintArchive.page_row)
}

// -------------------------------------------------------------------

// NullChildHintArchive

// -------------------------------------------------------------------

// SectionHintArchive

// repeated .TP.PageHintArchive page_hints = 1;
inline int SectionHintArchive::_internal_page_hints_size() const {
  return page_hints_.size();
}
inline int SectionHintArchive::page_hints_size() const {
  return _internal_page_hints_size();
}
inline void SectionHintArchive::clear_page_hints() {
  page_hints_.Clear();
}
inline ::TP::PageHintArchive* SectionHintArchive::mutable_page_hints(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionHintArchive.page_hints)
  return page_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageHintArchive >*
SectionHintArchive::mutable_page_hints() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionHintArchive.page_hints)
  return &page_hints_;
}
inline const ::TP::PageHintArchive& SectionHintArchive::_internal_page_hints(int index) const {
  return page_hints_.Get(index);
}
inline const ::TP::PageHintArchive& SectionHintArchive::page_hints(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionHintArchive.page_hints)
  return _internal_page_hints(index);
}
inline ::TP::PageHintArchive* SectionHintArchive::_internal_add_page_hints() {
  return page_hints_.Add();
}
inline ::TP::PageHintArchive* SectionHintArchive::add_page_hints() {
  // @@protoc_insertion_point(field_add:TP.SectionHintArchive.page_hints)
  return _internal_add_page_hints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::PageHintArchive >&
SectionHintArchive::page_hints() const {
  // @@protoc_insertion_point(field_list:TP.SectionHintArchive.page_hints)
  return page_hints_;
}

// optional uint32 start_page_index = 2;
inline bool SectionHintArchive::_internal_has_start_page_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SectionHintArchive::has_start_page_index() const {
  return _internal_has_start_page_index();
}
inline void SectionHintArchive::clear_start_page_index() {
  start_page_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionHintArchive::_internal_start_page_index() const {
  return start_page_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionHintArchive::start_page_index() const {
  // @@protoc_insertion_point(field_get:TP.SectionHintArchive.start_page_index)
  return _internal_start_page_index();
}
inline void SectionHintArchive::_internal_set_start_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  start_page_index_ = value;
}
inline void SectionHintArchive::set_start_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_page_index(value);
  // @@protoc_insertion_point(field_set:TP.SectionHintArchive.start_page_index)
}

// -------------------------------------------------------------------

// TextboxHintArchive

// required .TSP.Range range = 1;
inline bool TextboxHintArchive::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool TextboxHintArchive::has_range() const {
  return _internal_has_range();
}
inline const ::TSP::Range& TextboxHintArchive::_internal_range() const {
  const ::TSP::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& TextboxHintArchive::range() const {
  // @@protoc_insertion_point(field_get:TP.TextboxHintArchive.range)
  return _internal_range();
}
inline void TextboxHintArchive::unsafe_arena_set_allocated_range(
    ::TSP::Range* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TextboxHintArchive.range)
}
inline ::TSP::Range* TextboxHintArchive::release_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* TextboxHintArchive::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TP.TextboxHintArchive.range)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::TSP::Range* TextboxHintArchive::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000001u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::TSP::Range* TextboxHintArchive::mutable_range() {
  // @@protoc_insertion_point(field_mutable:TP.TextboxHintArchive.range)
  return _internal_mutable_range();
}
inline void TextboxHintArchive::set_allocated_range(::TSP::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range)->GetArena();
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TP.TextboxHintArchive.range)
}

// required .TSP.Size size = 2;
inline bool TextboxHintArchive::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool TextboxHintArchive::has_size() const {
  return _internal_has_size();
}
inline const ::TSP::Size& TextboxHintArchive::_internal_size() const {
  const ::TSP::Size* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& TextboxHintArchive::size() const {
  // @@protoc_insertion_point(field_get:TP.TextboxHintArchive.size)
  return _internal_size();
}
inline void TextboxHintArchive::unsafe_arena_set_allocated_size(
    ::TSP::Size* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TextboxHintArchive.size)
}
inline ::TSP::Size* TextboxHintArchive::release_size() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = size_;
  size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* TextboxHintArchive::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:TP.TextboxHintArchive.size)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::TSP::Size* TextboxHintArchive::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000002u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::TSP::Size* TextboxHintArchive::mutable_size() {
  // @@protoc_insertion_point(field_mutable:TP.TextboxHintArchive.size)
  return _internal_mutable_size();
}
inline void TextboxHintArchive::set_allocated_size(::TSP::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size)->GetArena();
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:TP.TextboxHintArchive.size)
}

// -------------------------------------------------------------------

// TopicNumberEntryArchive

// required .TSP.Reference list_style = 1;
inline bool TopicNumberEntryArchive::_internal_has_list_style() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || list_style_ != nullptr);
  return value;
}
inline bool TopicNumberEntryArchive::has_list_style() const {
  return _internal_has_list_style();
}
inline const ::TSP::Reference& TopicNumberEntryArchive::_internal_list_style() const {
  const ::TSP::Reference* p = list_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TopicNumberEntryArchive::list_style() const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberEntryArchive.list_style)
  return _internal_list_style();
}
inline void TopicNumberEntryArchive::unsafe_arena_set_allocated_list_style(
    ::TSP::Reference* list_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_style_);
  }
  list_style_ = list_style;
  if (list_style) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.TopicNumberEntryArchive.list_style)
}
inline ::TSP::Reference* TopicNumberEntryArchive::release_list_style() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = list_style_;
  list_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TopicNumberEntryArchive::unsafe_arena_release_list_style() {
  // @@protoc_insertion_point(field_release:TP.TopicNumberEntryArchive.list_style)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = list_style_;
  list_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TopicNumberEntryArchive::_internal_mutable_list_style() {
  _has_bits_[0] |= 0x00000001u;
  if (list_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    list_style_ = p;
  }
  return list_style_;
}
inline ::TSP::Reference* TopicNumberEntryArchive::mutable_list_style() {
  // @@protoc_insertion_point(field_mutable:TP.TopicNumberEntryArchive.list_style)
  return _internal_mutable_list_style();
}
inline void TopicNumberEntryArchive::set_allocated_list_style(::TSP::Reference* list_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_style_);
  }
  if (list_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_style)->GetArena();
    if (message_arena != submessage_arena) {
      list_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  list_style_ = list_style;
  // @@protoc_insertion_point(field_set_allocated:TP.TopicNumberEntryArchive.list_style)
}

// repeated uint32 topic_number = 2;
inline int TopicNumberEntryArchive::_internal_topic_number_size() const {
  return topic_number_.size();
}
inline int TopicNumberEntryArchive::topic_number_size() const {
  return _internal_topic_number_size();
}
inline void TopicNumberEntryArchive::clear_topic_number() {
  topic_number_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopicNumberEntryArchive::_internal_topic_number(int index) const {
  return topic_number_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopicNumberEntryArchive::topic_number(int index) const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberEntryArchive.topic_number)
  return _internal_topic_number(index);
}
inline void TopicNumberEntryArchive::set_topic_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  topic_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:TP.TopicNumberEntryArchive.topic_number)
}
inline void TopicNumberEntryArchive::_internal_add_topic_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  topic_number_.Add(value);
}
inline void TopicNumberEntryArchive::add_topic_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_topic_number(value);
  // @@protoc_insertion_point(field_add:TP.TopicNumberEntryArchive.topic_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TopicNumberEntryArchive::_internal_topic_number() const {
  return topic_number_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TopicNumberEntryArchive::topic_number() const {
  // @@protoc_insertion_point(field_list:TP.TopicNumberEntryArchive.topic_number)
  return _internal_topic_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TopicNumberEntryArchive::_internal_mutable_topic_number() {
  return &topic_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TopicNumberEntryArchive::mutable_topic_number() {
  // @@protoc_insertion_point(field_mutable_list:TP.TopicNumberEntryArchive.topic_number)
  return _internal_mutable_topic_number();
}

// repeated uint32 character_index = 3;
inline int TopicNumberEntryArchive::_internal_character_index_size() const {
  return character_index_.size();
}
inline int TopicNumberEntryArchive::character_index_size() const {
  return _internal_character_index_size();
}
inline void TopicNumberEntryArchive::clear_character_index() {
  character_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopicNumberEntryArchive::_internal_character_index(int index) const {
  return character_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopicNumberEntryArchive::character_index(int index) const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberEntryArchive.character_index)
  return _internal_character_index(index);
}
inline void TopicNumberEntryArchive::set_character_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  character_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:TP.TopicNumberEntryArchive.character_index)
}
inline void TopicNumberEntryArchive::_internal_add_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  character_index_.Add(value);
}
inline void TopicNumberEntryArchive::add_character_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_character_index(value);
  // @@protoc_insertion_point(field_add:TP.TopicNumberEntryArchive.character_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TopicNumberEntryArchive::_internal_character_index() const {
  return character_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TopicNumberEntryArchive::character_index() const {
  // @@protoc_insertion_point(field_list:TP.TopicNumberEntryArchive.character_index)
  return _internal_character_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TopicNumberEntryArchive::_internal_mutable_character_index() {
  return &character_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TopicNumberEntryArchive::mutable_character_index() {
  // @@protoc_insertion_point(field_mutable_list:TP.TopicNumberEntryArchive.character_index)
  return _internal_mutable_character_index();
}

// -------------------------------------------------------------------

// TopicNumberHintsArchive

// optional uint32 charIndex = 1;
inline bool TopicNumberHintsArchive::_internal_has_charindex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopicNumberHintsArchive::has_charindex() const {
  return _internal_has_charindex();
}
inline void TopicNumberHintsArchive::clear_charindex() {
  charindex_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopicNumberHintsArchive::_internal_charindex() const {
  return charindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopicNumberHintsArchive::charindex() const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberHintsArchive.charIndex)
  return _internal_charindex();
}
inline void TopicNumberHintsArchive::_internal_set_charindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  charindex_ = value;
}
inline void TopicNumberHintsArchive::set_charindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_charindex(value);
  // @@protoc_insertion_point(field_set:TP.TopicNumberHintsArchive.charIndex)
}

// repeated .TP.TopicNumberEntryArchive topic_numbers_map = 2;
inline int TopicNumberHintsArchive::_internal_topic_numbers_map_size() const {
  return topic_numbers_map_.size();
}
inline int TopicNumberHintsArchive::topic_numbers_map_size() const {
  return _internal_topic_numbers_map_size();
}
inline void TopicNumberHintsArchive::clear_topic_numbers_map() {
  topic_numbers_map_.Clear();
}
inline ::TP::TopicNumberEntryArchive* TopicNumberHintsArchive::mutable_topic_numbers_map(int index) {
  // @@protoc_insertion_point(field_mutable:TP.TopicNumberHintsArchive.topic_numbers_map)
  return topic_numbers_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberEntryArchive >*
TopicNumberHintsArchive::mutable_topic_numbers_map() {
  // @@protoc_insertion_point(field_mutable_list:TP.TopicNumberHintsArchive.topic_numbers_map)
  return &topic_numbers_map_;
}
inline const ::TP::TopicNumberEntryArchive& TopicNumberHintsArchive::_internal_topic_numbers_map(int index) const {
  return topic_numbers_map_.Get(index);
}
inline const ::TP::TopicNumberEntryArchive& TopicNumberHintsArchive::topic_numbers_map(int index) const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberHintsArchive.topic_numbers_map)
  return _internal_topic_numbers_map(index);
}
inline ::TP::TopicNumberEntryArchive* TopicNumberHintsArchive::_internal_add_topic_numbers_map() {
  return topic_numbers_map_.Add();
}
inline ::TP::TopicNumberEntryArchive* TopicNumberHintsArchive::add_topic_numbers_map() {
  // @@protoc_insertion_point(field_add:TP.TopicNumberHintsArchive.topic_numbers_map)
  return _internal_add_topic_numbers_map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::TopicNumberEntryArchive >&
TopicNumberHintsArchive::topic_numbers_map() const {
  // @@protoc_insertion_point(field_list:TP.TopicNumberHintsArchive.topic_numbers_map)
  return topic_numbers_map_;
}

// optional uint32 valid_through_char_index = 3;
inline bool TopicNumberHintsArchive::_internal_has_valid_through_char_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TopicNumberHintsArchive::has_valid_through_char_index() const {
  return _internal_has_valid_through_char_index();
}
inline void TopicNumberHintsArchive::clear_valid_through_char_index() {
  valid_through_char_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopicNumberHintsArchive::_internal_valid_through_char_index() const {
  return valid_through_char_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopicNumberHintsArchive::valid_through_char_index() const {
  // @@protoc_insertion_point(field_get:TP.TopicNumberHintsArchive.valid_through_char_index)
  return _internal_valid_through_char_index();
}
inline void TopicNumberHintsArchive::_internal_set_valid_through_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  valid_through_char_index_ = value;
}
inline void TopicNumberHintsArchive::set_valid_through_char_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_valid_through_char_index(value);
  // @@protoc_insertion_point(field_set:TP.TopicNumberHintsArchive.valid_through_char_index)
}

// -------------------------------------------------------------------

// LayoutStateArchive

// optional uint32 section_index = 1;
inline bool LayoutStateArchive::_internal_has_section_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayoutStateArchive::has_section_index() const {
  return _internal_has_section_index();
}
inline void LayoutStateArchive::clear_section_index() {
  section_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutStateArchive::_internal_section_index() const {
  return section_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutStateArchive::section_index() const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.section_index)
  return _internal_section_index();
}
inline void LayoutStateArchive::_internal_set_section_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  section_index_ = value;
}
inline void LayoutStateArchive::set_section_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_section_index(value);
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.section_index)
}

// optional uint32 section_page_index = 2;
inline bool LayoutStateArchive::_internal_has_section_page_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayoutStateArchive::has_section_page_index() const {
  return _internal_has_section_page_index();
}
inline void LayoutStateArchive::clear_section_page_index() {
  section_page_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutStateArchive::_internal_section_page_index() const {
  return section_page_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutStateArchive::section_page_index() const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.section_page_index)
  return _internal_section_page_index();
}
inline void LayoutStateArchive::_internal_set_section_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  section_page_index_ = value;
}
inline void LayoutStateArchive::set_section_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_section_page_index(value);
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.section_page_index)
}

// optional uint32 document_page_index = 3;
inline bool LayoutStateArchive::_internal_has_document_page_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LayoutStateArchive::has_document_page_index() const {
  return _internal_has_document_page_index();
}
inline void LayoutStateArchive::clear_document_page_index() {
  document_page_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutStateArchive::_internal_document_page_index() const {
  return document_page_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutStateArchive::document_page_index() const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.document_page_index)
  return _internal_document_page_index();
}
inline void LayoutStateArchive::_internal_set_document_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  document_page_index_ = value;
}
inline void LayoutStateArchive::set_document_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_document_page_index(value);
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.document_page_index)
}

// optional uint32 last_page_count = 4;
inline bool LayoutStateArchive::_internal_has_last_page_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LayoutStateArchive::has_last_page_count() const {
  return _internal_has_last_page_count();
}
inline void LayoutStateArchive::clear_last_page_count() {
  last_page_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutStateArchive::_internal_last_page_count() const {
  return last_page_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutStateArchive::last_page_count() const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.last_page_count)
  return _internal_last_page_count();
}
inline void LayoutStateArchive::_internal_set_last_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  last_page_count_ = value;
}
inline void LayoutStateArchive::set_last_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_page_count(value);
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.last_page_count)
}

// repeated .TP.SectionHintArchive section_hints = 5;
inline int LayoutStateArchive::_internal_section_hints_size() const {
  return section_hints_.size();
}
inline int LayoutStateArchive::section_hints_size() const {
  return _internal_section_hints_size();
}
inline void LayoutStateArchive::clear_section_hints() {
  section_hints_.Clear();
}
inline ::TP::SectionHintArchive* LayoutStateArchive::mutable_section_hints(int index) {
  // @@protoc_insertion_point(field_mutable:TP.LayoutStateArchive.section_hints)
  return section_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionHintArchive >*
LayoutStateArchive::mutable_section_hints() {
  // @@protoc_insertion_point(field_mutable_list:TP.LayoutStateArchive.section_hints)
  return &section_hints_;
}
inline const ::TP::SectionHintArchive& LayoutStateArchive::_internal_section_hints(int index) const {
  return section_hints_.Get(index);
}
inline const ::TP::SectionHintArchive& LayoutStateArchive::section_hints(int index) const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.section_hints)
  return _internal_section_hints(index);
}
inline ::TP::SectionHintArchive* LayoutStateArchive::_internal_add_section_hints() {
  return section_hints_.Add();
}
inline ::TP::SectionHintArchive* LayoutStateArchive::add_section_hints() {
  // @@protoc_insertion_point(field_add:TP.LayoutStateArchive.section_hints)
  return _internal_add_section_hints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionHintArchive >&
LayoutStateArchive::section_hints() const {
  // @@protoc_insertion_point(field_list:TP.LayoutStateArchive.section_hints)
  return section_hints_;
}

// optional uint32 body_length = 6;
inline bool LayoutStateArchive::_internal_has_body_length() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LayoutStateArchive::has_body_length() const {
  return _internal_has_body_length();
}
inline void LayoutStateArchive::clear_body_length() {
  body_length_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutStateArchive::_internal_body_length() const {
  return body_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutStateArchive::body_length() const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.body_length)
  return _internal_body_length();
}
inline void LayoutStateArchive::_internal_set_body_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  body_length_ = value;
}
inline void LayoutStateArchive::set_body_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_body_length(value);
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.body_length)
}

// repeated string missing_fonts = 7;
inline int LayoutStateArchive::_internal_missing_fonts_size() const {
  return missing_fonts_.size();
}
inline int LayoutStateArchive::missing_fonts_size() const {
  return _internal_missing_fonts_size();
}
inline void LayoutStateArchive::clear_missing_fonts() {
  missing_fonts_.Clear();
}
inline std::string* LayoutStateArchive::add_missing_fonts() {
  // @@protoc_insertion_point(field_add_mutable:TP.LayoutStateArchive.missing_fonts)
  return _internal_add_missing_fonts();
}
inline const std::string& LayoutStateArchive::_internal_missing_fonts(int index) const {
  return missing_fonts_.Get(index);
}
inline const std::string& LayoutStateArchive::missing_fonts(int index) const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.missing_fonts)
  return _internal_missing_fonts(index);
}
inline std::string* LayoutStateArchive::mutable_missing_fonts(int index) {
  // @@protoc_insertion_point(field_mutable:TP.LayoutStateArchive.missing_fonts)
  return missing_fonts_.Mutable(index);
}
inline void LayoutStateArchive::set_missing_fonts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.missing_fonts)
  missing_fonts_.Mutable(index)->assign(value);
}
inline void LayoutStateArchive::set_missing_fonts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.missing_fonts)
  missing_fonts_.Mutable(index)->assign(std::move(value));
}
inline void LayoutStateArchive::set_missing_fonts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  missing_fonts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TP.LayoutStateArchive.missing_fonts)
}
inline void LayoutStateArchive::set_missing_fonts(int index, const char* value, size_t size) {
  missing_fonts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TP.LayoutStateArchive.missing_fonts)
}
inline std::string* LayoutStateArchive::_internal_add_missing_fonts() {
  return missing_fonts_.Add();
}
inline void LayoutStateArchive::add_missing_fonts(const std::string& value) {
  missing_fonts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TP.LayoutStateArchive.missing_fonts)
}
inline void LayoutStateArchive::add_missing_fonts(std::string&& value) {
  missing_fonts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TP.LayoutStateArchive.missing_fonts)
}
inline void LayoutStateArchive::add_missing_fonts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  missing_fonts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TP.LayoutStateArchive.missing_fonts)
}
inline void LayoutStateArchive::add_missing_fonts(const char* value, size_t size) {
  missing_fonts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TP.LayoutStateArchive.missing_fonts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LayoutStateArchive::missing_fonts() const {
  // @@protoc_insertion_point(field_list:TP.LayoutStateArchive.missing_fonts)
  return missing_fonts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LayoutStateArchive::mutable_missing_fonts() {
  // @@protoc_insertion_point(field_mutable_list:TP.LayoutStateArchive.missing_fonts)
  return &missing_fonts_;
}

// optional int32 os_version = 8;
inline bool LayoutStateArchive::_internal_has_os_version() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LayoutStateArchive::has_os_version() const {
  return _internal_has_os_version();
}
inline void LayoutStateArchive::clear_os_version() {
  os_version_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayoutStateArchive::_internal_os_version() const {
  return os_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayoutStateArchive::os_version() const {
  // @@protoc_insertion_point(field_get:TP.LayoutStateArchive.os_version)
  return _internal_os_version();
}
inline void LayoutStateArchive::_internal_set_os_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  os_version_ = value;
}
inline void LayoutStateArchive::set_os_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_os_version(value);
  // @@protoc_insertion_point(field_set:TP.LayoutStateArchive.os_version)
}

// -------------------------------------------------------------------

// CanvasSelectionArchive

// required .TSWP.SelectionType type = 1;
inline bool CanvasSelectionArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CanvasSelectionArchive::has_type() const {
  return _internal_has_type();
}
inline void CanvasSelectionArchive::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TSWP::SelectionType CanvasSelectionArchive::_internal_type() const {
  return static_cast< ::TSWP::SelectionType >(type_);
}
inline ::TSWP::SelectionType CanvasSelectionArchive::type() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.type)
  return _internal_type();
}
inline void CanvasSelectionArchive::_internal_set_type(::TSWP::SelectionType value) {
  assert(::TSWP::SelectionType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void CanvasSelectionArchive::set_type(::TSWP::SelectionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TP.CanvasSelectionArchive.type)
}

// required .TSP.Range range = 2;
inline bool CanvasSelectionArchive::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool CanvasSelectionArchive::has_range() const {
  return _internal_has_range();
}
inline const ::TSP::Range& CanvasSelectionArchive::_internal_range() const {
  const ::TSP::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& CanvasSelectionArchive::range() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.range)
  return _internal_range();
}
inline void CanvasSelectionArchive::unsafe_arena_set_allocated_range(
    ::TSP::Range* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.CanvasSelectionArchive.range)
}
inline ::TSP::Range* CanvasSelectionArchive::release_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* CanvasSelectionArchive::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TP.CanvasSelectionArchive.range)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::TSP::Range* CanvasSelectionArchive::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000001u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::TSP::Range* CanvasSelectionArchive::mutable_range() {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionArchive.range)
  return _internal_mutable_range();
}
inline void CanvasSelectionArchive::set_allocated_range(::TSP::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range)->GetArena();
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TP.CanvasSelectionArchive.range)
}

// required .TSWP.StyleInsertionBehavior style_insertion_behavior = 3;
inline bool CanvasSelectionArchive::_internal_has_style_insertion_behavior() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CanvasSelectionArchive::has_style_insertion_behavior() const {
  return _internal_has_style_insertion_behavior();
}
inline void CanvasSelectionArchive::clear_style_insertion_behavior() {
  style_insertion_behavior_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSWP::StyleInsertionBehavior CanvasSelectionArchive::_internal_style_insertion_behavior() const {
  return static_cast< ::TSWP::StyleInsertionBehavior >(style_insertion_behavior_);
}
inline ::TSWP::StyleInsertionBehavior CanvasSelectionArchive::style_insertion_behavior() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.style_insertion_behavior)
  return _internal_style_insertion_behavior();
}
inline void CanvasSelectionArchive::_internal_set_style_insertion_behavior(::TSWP::StyleInsertionBehavior value) {
  assert(::TSWP::StyleInsertionBehavior_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  style_insertion_behavior_ = value;
}
inline void CanvasSelectionArchive::set_style_insertion_behavior(::TSWP::StyleInsertionBehavior value) {
  _internal_set_style_insertion_behavior(value);
  // @@protoc_insertion_point(field_set:TP.CanvasSelectionArchive.style_insertion_behavior)
}

// required .TSWP.CaretAffinity caret_affinity = 4;
inline bool CanvasSelectionArchive::_internal_has_caret_affinity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CanvasSelectionArchive::has_caret_affinity() const {
  return _internal_has_caret_affinity();
}
inline void CanvasSelectionArchive::clear_caret_affinity() {
  caret_affinity_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::TSWP::CaretAffinity CanvasSelectionArchive::_internal_caret_affinity() const {
  return static_cast< ::TSWP::CaretAffinity >(caret_affinity_);
}
inline ::TSWP::CaretAffinity CanvasSelectionArchive::caret_affinity() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.caret_affinity)
  return _internal_caret_affinity();
}
inline void CanvasSelectionArchive::_internal_set_caret_affinity(::TSWP::CaretAffinity value) {
  assert(::TSWP::CaretAffinity_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  caret_affinity_ = value;
}
inline void CanvasSelectionArchive::set_caret_affinity(::TSWP::CaretAffinity value) {
  _internal_set_caret_affinity(value);
  // @@protoc_insertion_point(field_set:TP.CanvasSelectionArchive.caret_affinity)
}

// repeated .TSP.Reference infos = 5;
inline int CanvasSelectionArchive::_internal_infos_size() const {
  return infos_.size();
}
inline int CanvasSelectionArchive::infos_size() const {
  return _internal_infos_size();
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionArchive.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:TP.CanvasSelectionArchive.infos)
  return &infos_;
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::TSP::Reference& CanvasSelectionArchive::infos(int index) const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.infos)
  return _internal_infos(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_add_infos() {
  return infos_.Add();
}
inline ::TSP::Reference* CanvasSelectionArchive::add_infos() {
  // @@protoc_insertion_point(field_add:TP.CanvasSelectionArchive.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::infos() const {
  // @@protoc_insertion_point(field_list:TP.CanvasSelectionArchive.infos)
  return infos_;
}

// repeated .TSP.Reference excluded_infos = 6;
inline int CanvasSelectionArchive::_internal_excluded_infos_size() const {
  return excluded_infos_.size();
}
inline int CanvasSelectionArchive::excluded_infos_size() const {
  return _internal_excluded_infos_size();
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_excluded_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionArchive.excluded_infos)
  return excluded_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_excluded_infos() {
  // @@protoc_insertion_point(field_mutable_list:TP.CanvasSelectionArchive.excluded_infos)
  return &excluded_infos_;
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_excluded_infos(int index) const {
  return excluded_infos_.Get(index);
}
inline const ::TSP::Reference& CanvasSelectionArchive::excluded_infos(int index) const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.excluded_infos)
  return _internal_excluded_infos(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_add_excluded_infos() {
  return excluded_infos_.Add();
}
inline ::TSP::Reference* CanvasSelectionArchive::add_excluded_infos() {
  // @@protoc_insertion_point(field_add:TP.CanvasSelectionArchive.excluded_infos)
  return _internal_add_excluded_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::excluded_infos() const {
  // @@protoc_insertion_point(field_list:TP.CanvasSelectionArchive.excluded_infos)
  return excluded_infos_;
}

// repeated .TSP.Reference additional_infos = 7;
inline int CanvasSelectionArchive::_internal_additional_infos_size() const {
  return additional_infos_.size();
}
inline int CanvasSelectionArchive::additional_infos_size() const {
  return _internal_additional_infos_size();
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_additional_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionArchive.additional_infos)
  return additional_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CanvasSelectionArchive::mutable_additional_infos() {
  // @@protoc_insertion_point(field_mutable_list:TP.CanvasSelectionArchive.additional_infos)
  return &additional_infos_;
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_additional_infos(int index) const {
  return additional_infos_.Get(index);
}
inline const ::TSP::Reference& CanvasSelectionArchive::additional_infos(int index) const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.additional_infos)
  return _internal_additional_infos(index);
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_add_additional_infos() {
  return additional_infos_.Add();
}
inline ::TSP::Reference* CanvasSelectionArchive::add_additional_infos() {
  // @@protoc_insertion_point(field_add:TP.CanvasSelectionArchive.additional_infos)
  return _internal_add_additional_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CanvasSelectionArchive::additional_infos() const {
  // @@protoc_insertion_point(field_list:TP.CanvasSelectionArchive.additional_infos)
  return additional_infos_;
}

// optional .TSP.Reference container = 8;
inline bool CanvasSelectionArchive::_internal_has_container() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || container_ != nullptr);
  return value;
}
inline bool CanvasSelectionArchive::has_container() const {
  return _internal_has_container();
}
inline const ::TSP::Reference& CanvasSelectionArchive::_internal_container() const {
  const ::TSP::Reference* p = container_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CanvasSelectionArchive::container() const {
  // @@protoc_insertion_point(field_get:TP.CanvasSelectionArchive.container)
  return _internal_container();
}
inline void CanvasSelectionArchive::unsafe_arena_set_allocated_container(
    ::TSP::Reference* container) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_);
  }
  container_ = container;
  if (container) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.CanvasSelectionArchive.container)
}
inline ::TSP::Reference* CanvasSelectionArchive::release_container() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = container_;
  container_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CanvasSelectionArchive::unsafe_arena_release_container() {
  // @@protoc_insertion_point(field_release:TP.CanvasSelectionArchive.container)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = container_;
  container_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CanvasSelectionArchive::_internal_mutable_container() {
  _has_bits_[0] |= 0x00000002u;
  if (container_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    container_ = p;
  }
  return container_;
}
inline ::TSP::Reference* CanvasSelectionArchive::mutable_container() {
  // @@protoc_insertion_point(field_mutable:TP.CanvasSelectionArchive.container)
  return _internal_mutable_container();
}
inline void CanvasSelectionArchive::set_allocated_container(::TSP::Reference* container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_);
  }
  if (container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container)->GetArena();
    if (message_arena != submessage_arena) {
      container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  container_ = container;
  // @@protoc_insertion_point(field_set_allocated:TP.CanvasSelectionArchive.container)
}

// -------------------------------------------------------------------

// AllFootnoteSelectionArchive

// -------------------------------------------------------------------

// UIStateArchive

// optional float OBSOLETE_view_scale = 1;
inline bool UIStateArchive::_internal_has_obsolete_view_scale() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool UIStateArchive::has_obsolete_view_scale() const {
  return _internal_has_obsolete_view_scale();
}
inline void UIStateArchive::clear_obsolete_view_scale() {
  obsolete_view_scale_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float UIStateArchive::_internal_obsolete_view_scale() const {
  return obsolete_view_scale_;
}
inline float UIStateArchive::obsolete_view_scale() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.OBSOLETE_view_scale)
  return _internal_obsolete_view_scale();
}
inline void UIStateArchive::_internal_set_obsolete_view_scale(float value) {
  _has_bits_[0] |= 0x00004000u;
  obsolete_view_scale_ = value;
}
inline void UIStateArchive::set_obsolete_view_scale(float value) {
  _internal_set_obsolete_view_scale(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.OBSOLETE_view_scale)
}

// optional .TSP.Point visible_rect_origin = 2;
inline bool UIStateArchive::_internal_has_visible_rect_origin() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || visible_rect_origin_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_visible_rect_origin() const {
  return _internal_has_visible_rect_origin();
}
inline const ::TSP::Point& UIStateArchive::_internal_visible_rect_origin() const {
  const ::TSP::Point* p = visible_rect_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::visible_rect_origin() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.visible_rect_origin)
  return _internal_visible_rect_origin();
}
inline void UIStateArchive::unsafe_arena_set_allocated_visible_rect_origin(
    ::TSP::Point* visible_rect_origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_rect_origin_);
  }
  visible_rect_origin_ = visible_rect_origin;
  if (visible_rect_origin) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.visible_rect_origin)
}
inline ::TSP::Point* UIStateArchive::release_visible_rect_origin() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Point* temp = visible_rect_origin_;
  visible_rect_origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_visible_rect_origin() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.visible_rect_origin)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Point* temp = visible_rect_origin_;
  visible_rect_origin_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_visible_rect_origin() {
  _has_bits_[0] |= 0x00000004u;
  if (visible_rect_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArena());
    visible_rect_origin_ = p;
  }
  return visible_rect_origin_;
}
inline ::TSP::Point* UIStateArchive::mutable_visible_rect_origin() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.visible_rect_origin)
  return _internal_mutable_visible_rect_origin();
}
inline void UIStateArchive::set_allocated_visible_rect_origin(::TSP::Point* visible_rect_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_rect_origin_);
  }
  if (visible_rect_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_rect_origin)->GetArena();
    if (message_arena != submessage_arena) {
      visible_rect_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_rect_origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  visible_rect_origin_ = visible_rect_origin;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.visible_rect_origin)
}

// optional bool OBSOLETE_landscape = 3;
inline bool UIStateArchive::_internal_has_obsolete_landscape() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool UIStateArchive::has_obsolete_landscape() const {
  return _internal_has_obsolete_landscape();
}
inline void UIStateArchive::clear_obsolete_landscape() {
  obsolete_landscape_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool UIStateArchive::_internal_obsolete_landscape() const {
  return obsolete_landscape_;
}
inline bool UIStateArchive::obsolete_landscape() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.OBSOLETE_landscape)
  return _internal_obsolete_landscape();
}
inline void UIStateArchive::_internal_set_obsolete_landscape(bool value) {
  _has_bits_[0] |= 0x00008000u;
  obsolete_landscape_ = value;
}
inline void UIStateArchive::set_obsolete_landscape(bool value) {
  _internal_set_obsolete_landscape(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.OBSOLETE_landscape)
}

// optional .TSP.Reference selection = 4 [deprecated = true];
inline bool UIStateArchive::_internal_has_selection() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || selection_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TSP::Reference& UIStateArchive::_internal_selection() const {
  const ::TSP::Reference* p = selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::selection() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.selection)
  return _internal_selection();
}
inline void UIStateArchive::unsafe_arena_set_allocated_selection(
    ::TSP::Reference* selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  selection_ = selection;
  if (selection) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.selection)
}
inline ::TSP::Reference* UIStateArchive::release_selection() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = selection_;
  selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.selection)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = selection_;
  selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_selection() {
  _has_bits_[0] |= 0x00000008u;
  if (selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    selection_ = p;
  }
  return selection_;
}
inline ::TSP::Reference* UIStateArchive::mutable_selection() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.selection)
  return _internal_mutable_selection();
}
inline void UIStateArchive::set_allocated_selection(::TSP::Reference* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection)->GetArena();
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.selection)
}

// optional .TSP.Reference selection_model = 5 [deprecated = true];
inline bool UIStateArchive::_internal_has_selection_model() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || selection_model_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_selection_model() const {
  return _internal_has_selection_model();
}
inline const ::TSP::Reference& UIStateArchive::_internal_selection_model() const {
  const ::TSP::Reference* p = selection_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::selection_model() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.selection_model)
  return _internal_selection_model();
}
inline void UIStateArchive::unsafe_arena_set_allocated_selection_model(
    ::TSP::Reference* selection_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_model_);
  }
  selection_model_ = selection_model;
  if (selection_model) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.selection_model)
}
inline ::TSP::Reference* UIStateArchive::release_selection_model() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = selection_model_;
  selection_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_selection_model() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.selection_model)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = selection_model_;
  selection_model_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_selection_model() {
  _has_bits_[0] |= 0x00000010u;
  if (selection_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    selection_model_ = p;
  }
  return selection_model_;
}
inline ::TSP::Reference* UIStateArchive::mutable_selection_model() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.selection_model)
  return _internal_mutable_selection_model();
}
inline void UIStateArchive::set_allocated_selection_model(::TSP::Reference* selection_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_model_);
  }
  if (selection_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_model)->GetArena();
    if (message_arena != submessage_arena) {
      selection_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  selection_model_ = selection_model;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.selection_model)
}

// optional bool master_drawables_selectable = 6;
inline bool UIStateArchive::_internal_has_master_drawables_selectable() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool UIStateArchive::has_master_drawables_selectable() const {
  return _internal_has_master_drawables_selectable();
}
inline void UIStateArchive::clear_master_drawables_selectable() {
  master_drawables_selectable_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool UIStateArchive::_internal_master_drawables_selectable() const {
  return master_drawables_selectable_;
}
inline bool UIStateArchive::master_drawables_selectable() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.master_drawables_selectable)
  return _internal_master_drawables_selectable();
}
inline void UIStateArchive::_internal_set_master_drawables_selectable(bool value) {
  _has_bits_[0] |= 0x00010000u;
  master_drawables_selectable_ = value;
}
inline void UIStateArchive::set_master_drawables_selectable(bool value) {
  _internal_set_master_drawables_selectable(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.master_drawables_selectable)
}

// optional .TSP.Size visible_rect_size = 7;
inline bool UIStateArchive::_internal_has_visible_rect_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || visible_rect_size_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_visible_rect_size() const {
  return _internal_has_visible_rect_size();
}
inline const ::TSP::Size& UIStateArchive::_internal_visible_rect_size() const {
  const ::TSP::Size* p = visible_rect_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& UIStateArchive::visible_rect_size() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.visible_rect_size)
  return _internal_visible_rect_size();
}
inline void UIStateArchive::unsafe_arena_set_allocated_visible_rect_size(
    ::TSP::Size* visible_rect_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_rect_size_);
  }
  visible_rect_size_ = visible_rect_size;
  if (visible_rect_size) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.visible_rect_size)
}
inline ::TSP::Size* UIStateArchive::release_visible_rect_size() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Size* temp = visible_rect_size_;
  visible_rect_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* UIStateArchive::unsafe_arena_release_visible_rect_size() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.visible_rect_size)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Size* temp = visible_rect_size_;
  visible_rect_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* UIStateArchive::_internal_mutable_visible_rect_size() {
  _has_bits_[0] |= 0x00000020u;
  if (visible_rect_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    visible_rect_size_ = p;
  }
  return visible_rect_size_;
}
inline ::TSP::Size* UIStateArchive::mutable_visible_rect_size() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.visible_rect_size)
  return _internal_mutable_visible_rect_size();
}
inline void UIStateArchive::set_allocated_visible_rect_size(::TSP::Size* visible_rect_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_rect_size_);
  }
  if (visible_rect_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_rect_size)->GetArena();
    if (message_arena != submessage_arena) {
      visible_rect_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_rect_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  visible_rect_size_ = visible_rect_size;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.visible_rect_size)
}

// repeated .TSCH.ChartUIState chart_ui_state = 8;
inline int UIStateArchive::_internal_chart_ui_state_size() const {
  return chart_ui_state_.size();
}
inline int UIStateArchive::chart_ui_state_size() const {
  return _internal_chart_ui_state_size();
}
inline ::TSCH::ChartUIState* UIStateArchive::mutable_chart_ui_state(int index) {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.chart_ui_state)
  return chart_ui_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >*
UIStateArchive::mutable_chart_ui_state() {
  // @@protoc_insertion_point(field_mutable_list:TP.UIStateArchive.chart_ui_state)
  return &chart_ui_state_;
}
inline const ::TSCH::ChartUIState& UIStateArchive::_internal_chart_ui_state(int index) const {
  return chart_ui_state_.Get(index);
}
inline const ::TSCH::ChartUIState& UIStateArchive::chart_ui_state(int index) const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.chart_ui_state)
  return _internal_chart_ui_state(index);
}
inline ::TSCH::ChartUIState* UIStateArchive::_internal_add_chart_ui_state() {
  return chart_ui_state_.Add();
}
inline ::TSCH::ChartUIState* UIStateArchive::add_chart_ui_state() {
  // @@protoc_insertion_point(field_add:TP.UIStateArchive.chart_ui_state)
  return _internal_add_chart_ui_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartUIState >&
UIStateArchive::chart_ui_state() const {
  // @@protoc_insertion_point(field_list:TP.UIStateArchive.chart_ui_state)
  return chart_ui_state_;
}

// optional bool ruler_visible = 9 [default = true];
inline bool UIStateArchive::_internal_has_ruler_visible() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool UIStateArchive::has_ruler_visible() const {
  return _internal_has_ruler_visible();
}
inline void UIStateArchive::clear_ruler_visible() {
  ruler_visible_ = true;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool UIStateArchive::_internal_ruler_visible() const {
  return ruler_visible_;
}
inline bool UIStateArchive::ruler_visible() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.ruler_visible)
  return _internal_ruler_visible();
}
inline void UIStateArchive::_internal_set_ruler_visible(bool value) {
  _has_bits_[1] |= 0x00000002u;
  ruler_visible_ = value;
}
inline void UIStateArchive::set_ruler_visible(bool value) {
  _internal_set_ruler_visible(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.ruler_visible)
}

// optional bool layout_borders_visible = 10 [default = false];
inline bool UIStateArchive::_internal_has_layout_borders_visible() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool UIStateArchive::has_layout_borders_visible() const {
  return _internal_has_layout_borders_visible();
}
inline void UIStateArchive::clear_layout_borders_visible() {
  layout_borders_visible_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool UIStateArchive::_internal_layout_borders_visible() const {
  return layout_borders_visible_;
}
inline bool UIStateArchive::layout_borders_visible() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.layout_borders_visible)
  return _internal_layout_borders_visible();
}
inline void UIStateArchive::_internal_set_layout_borders_visible(bool value) {
  _has_bits_[0] |= 0x00020000u;
  layout_borders_visible_ = value;
}
inline void UIStateArchive::set_layout_borders_visible(bool value) {
  _internal_set_layout_borders_visible(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.layout_borders_visible)
}

// optional bool word_count_hud_visible = 11 [default = false];
inline bool UIStateArchive::_internal_has_word_count_hud_visible() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool UIStateArchive::has_word_count_hud_visible() const {
  return _internal_has_word_count_hud_visible();
}
inline void UIStateArchive::clear_word_count_hud_visible() {
  word_count_hud_visible_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool UIStateArchive::_internal_word_count_hud_visible() const {
  return word_count_hud_visible_;
}
inline bool UIStateArchive::word_count_hud_visible() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.word_count_hud_visible)
  return _internal_word_count_hud_visible();
}
inline void UIStateArchive::_internal_set_word_count_hud_visible(bool value) {
  _has_bits_[0] |= 0x00040000u;
  word_count_hud_visible_ = value;
}
inline void UIStateArchive::set_word_count_hud_visible(bool value) {
  _internal_set_word_count_hud_visible(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.word_count_hud_visible)
}

// optional bool shows_comments = 12 [default = true];
inline bool UIStateArchive::_internal_has_shows_comments() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_comments() const {
  return _internal_has_shows_comments();
}
inline void UIStateArchive::clear_shows_comments() {
  shows_comments_ = true;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool UIStateArchive::_internal_shows_comments() const {
  return shows_comments_;
}
inline bool UIStateArchive::shows_comments() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.shows_comments)
  return _internal_shows_comments();
}
inline void UIStateArchive::_internal_set_shows_comments(bool value) {
  _has_bits_[1] |= 0x00000004u;
  shows_comments_ = value;
}
inline void UIStateArchive::set_shows_comments(bool value) {
  _internal_set_shows_comments(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.shows_comments)
}

// optional bool shows_page_navigator = 13 [default = false];
inline bool UIStateArchive::_internal_has_shows_page_navigator() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_page_navigator() const {
  return _internal_has_shows_page_navigator();
}
inline void UIStateArchive::clear_shows_page_navigator() {
  shows_page_navigator_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool UIStateArchive::_internal_shows_page_navigator() const {
  return shows_page_navigator_;
}
inline bool UIStateArchive::shows_page_navigator() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.shows_page_navigator)
  return _internal_shows_page_navigator();
}
inline void UIStateArchive::_internal_set_shows_page_navigator(bool value) {
  _has_bits_[0] |= 0x00400000u;
  shows_page_navigator_ = value;
}
inline void UIStateArchive::set_shows_page_navigator(bool value) {
  _internal_set_shows_page_navigator(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.shows_page_navigator)
}

// optional .TP.ViewScaleMode view_scale_mode = 14 [default = ViewScaleMode_UserDefined];
inline bool UIStateArchive::_internal_has_view_scale_mode() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool UIStateArchive::has_view_scale_mode() const {
  return _internal_has_view_scale_mode();
}
inline void UIStateArchive::clear_view_scale_mode() {
  view_scale_mode_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::TP::ViewScaleMode UIStateArchive::_internal_view_scale_mode() const {
  return static_cast< ::TP::ViewScaleMode >(view_scale_mode_);
}
inline ::TP::ViewScaleMode UIStateArchive::view_scale_mode() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.view_scale_mode)
  return _internal_view_scale_mode();
}
inline void UIStateArchive::_internal_set_view_scale_mode(::TP::ViewScaleMode value) {
  assert(::TP::ViewScaleMode_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  view_scale_mode_ = value;
}
inline void UIStateArchive::set_view_scale_mode(::TP::ViewScaleMode value) {
  _internal_set_view_scale_mode(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.view_scale_mode)
}

// optional float view_scale = 15 [default = 1.25];
inline bool UIStateArchive::_internal_has_view_scale() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool UIStateArchive::has_view_scale() const {
  return _internal_has_view_scale();
}
inline void UIStateArchive::clear_view_scale() {
  view_scale_ = 1.25f;
  _has_bits_[1] &= ~0x00000001u;
}
inline float UIStateArchive::_internal_view_scale() const {
  return view_scale_;
}
inline float UIStateArchive::view_scale() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.view_scale)
  return _internal_view_scale();
}
inline void UIStateArchive::_internal_set_view_scale(float value) {
  _has_bits_[1] |= 0x00000001u;
  view_scale_ = value;
}
inline void UIStateArchive::set_view_scale(float value) {
  _internal_set_view_scale(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.view_scale)
}

// optional .TSP.Point window_frame_origin = 16;
inline bool UIStateArchive::_internal_has_window_frame_origin() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || window_frame_origin_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_window_frame_origin() const {
  return _internal_has_window_frame_origin();
}
inline const ::TSP::Point& UIStateArchive::_internal_window_frame_origin() const {
  const ::TSP::Point* p = window_frame_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& UIStateArchive::window_frame_origin() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.window_frame_origin)
  return _internal_window_frame_origin();
}
inline void UIStateArchive::unsafe_arena_set_allocated_window_frame_origin(
    ::TSP::Point* window_frame_origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_frame_origin_);
  }
  window_frame_origin_ = window_frame_origin;
  if (window_frame_origin) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.window_frame_origin)
}
inline ::TSP::Point* UIStateArchive::release_window_frame_origin() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Point* temp = window_frame_origin_;
  window_frame_origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Point* UIStateArchive::unsafe_arena_release_window_frame_origin() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.window_frame_origin)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Point* temp = window_frame_origin_;
  window_frame_origin_ = nullptr;
  return temp;
}
inline ::TSP::Point* UIStateArchive::_internal_mutable_window_frame_origin() {
  _has_bits_[0] |= 0x00000040u;
  if (window_frame_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArena());
    window_frame_origin_ = p;
  }
  return window_frame_origin_;
}
inline ::TSP::Point* UIStateArchive::mutable_window_frame_origin() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.window_frame_origin)
  return _internal_mutable_window_frame_origin();
}
inline void UIStateArchive::set_allocated_window_frame_origin(::TSP::Point* window_frame_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_frame_origin_);
  }
  if (window_frame_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_frame_origin)->GetArena();
    if (message_arena != submessage_arena) {
      window_frame_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_frame_origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  window_frame_origin_ = window_frame_origin;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.window_frame_origin)
}

// optional .TSP.Size window_frame_size = 17;
inline bool UIStateArchive::_internal_has_window_frame_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || window_frame_size_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_window_frame_size() const {
  return _internal_has_window_frame_size();
}
inline const ::TSP::Size& UIStateArchive::_internal_window_frame_size() const {
  const ::TSP::Size* p = window_frame_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& UIStateArchive::window_frame_size() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.window_frame_size)
  return _internal_window_frame_size();
}
inline void UIStateArchive::unsafe_arena_set_allocated_window_frame_size(
    ::TSP::Size* window_frame_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_frame_size_);
  }
  window_frame_size_ = window_frame_size;
  if (window_frame_size) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.window_frame_size)
}
inline ::TSP::Size* UIStateArchive::release_window_frame_size() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Size* temp = window_frame_size_;
  window_frame_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* UIStateArchive::unsafe_arena_release_window_frame_size() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.window_frame_size)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Size* temp = window_frame_size_;
  window_frame_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* UIStateArchive::_internal_mutable_window_frame_size() {
  _has_bits_[0] |= 0x00000080u;
  if (window_frame_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    window_frame_size_ = p;
  }
  return window_frame_size_;
}
inline ::TSP::Size* UIStateArchive::mutable_window_frame_size() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.window_frame_size)
  return _internal_mutable_window_frame_size();
}
inline void UIStateArchive::set_allocated_window_frame_size(::TSP::Size* window_frame_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_frame_size_);
  }
  if (window_frame_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_frame_size)->GetArena();
    if (message_arena != submessage_arena) {
      window_frame_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_frame_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  window_frame_size_ = window_frame_size;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.window_frame_size)
}

// optional string selected_inspector_switch_segment_identifier = 18;
inline bool UIStateArchive::_internal_has_selected_inspector_switch_segment_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UIStateArchive::has_selected_inspector_switch_segment_identifier() const {
  return _internal_has_selected_inspector_switch_segment_identifier();
}
inline void UIStateArchive::clear_selected_inspector_switch_segment_identifier() {
  selected_inspector_switch_segment_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UIStateArchive::selected_inspector_switch_segment_identifier() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.selected_inspector_switch_segment_identifier)
  return _internal_selected_inspector_switch_segment_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void UIStateArchive::set_selected_inspector_switch_segment_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 selected_inspector_switch_segment_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.selected_inspector_switch_segment_identifier)
}
inline std::string* UIStateArchive::mutable_selected_inspector_switch_segment_identifier() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.selected_inspector_switch_segment_identifier)
  return _internal_mutable_selected_inspector_switch_segment_identifier();
}
inline const std::string& UIStateArchive::_internal_selected_inspector_switch_segment_identifier() const {
  return selected_inspector_switch_segment_identifier_.Get();
}
inline void UIStateArchive::_internal_set_selected_inspector_switch_segment_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  selected_inspector_switch_segment_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* UIStateArchive::_internal_mutable_selected_inspector_switch_segment_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return selected_inspector_switch_segment_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UIStateArchive::release_selected_inspector_switch_segment_identifier() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.selected_inspector_switch_segment_identifier)
  if (!_internal_has_selected_inspector_switch_segment_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return selected_inspector_switch_segment_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UIStateArchive::set_allocated_selected_inspector_switch_segment_identifier(std::string* selected_inspector_switch_segment_identifier) {
  if (selected_inspector_switch_segment_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selected_inspector_switch_segment_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selected_inspector_switch_segment_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.selected_inspector_switch_segment_identifier)
}

// optional bool inspector_hidden = 19;
inline bool UIStateArchive::_internal_has_inspector_hidden() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool UIStateArchive::has_inspector_hidden() const {
  return _internal_has_inspector_hidden();
}
inline void UIStateArchive::clear_inspector_hidden() {
  inspector_hidden_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool UIStateArchive::_internal_inspector_hidden() const {
  return inspector_hidden_;
}
inline bool UIStateArchive::inspector_hidden() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.inspector_hidden)
  return _internal_inspector_hidden();
}
inline void UIStateArchive::_internal_set_inspector_hidden(bool value) {
  _has_bits_[0] |= 0x00800000u;
  inspector_hidden_ = value;
}
inline void UIStateArchive::set_inspector_hidden(bool value) {
  _internal_set_inspector_hidden(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.inspector_hidden)
}

// optional uint32 word_count_hud_type = 20;
inline bool UIStateArchive::_internal_has_word_count_hud_type() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool UIStateArchive::has_word_count_hud_type() const {
  return _internal_has_word_count_hud_type();
}
inline void UIStateArchive::clear_word_count_hud_type() {
  word_count_hud_type_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::_internal_word_count_hud_type() const {
  return word_count_hud_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UIStateArchive::word_count_hud_type() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.word_count_hud_type)
  return _internal_word_count_hud_type();
}
inline void UIStateArchive::_internal_set_word_count_hud_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  word_count_hud_type_ = value;
}
inline void UIStateArchive::set_word_count_hud_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_word_count_hud_type(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.word_count_hud_type)
}

// optional float word_count_hud_x_position = 21;
inline bool UIStateArchive::_internal_has_word_count_hud_x_position() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool UIStateArchive::has_word_count_hud_x_position() const {
  return _internal_has_word_count_hud_x_position();
}
inline void UIStateArchive::clear_word_count_hud_x_position() {
  word_count_hud_x_position_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float UIStateArchive::_internal_word_count_hud_x_position() const {
  return word_count_hud_x_position_;
}
inline float UIStateArchive::word_count_hud_x_position() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.word_count_hud_x_position)
  return _internal_word_count_hud_x_position();
}
inline void UIStateArchive::_internal_set_word_count_hud_x_position(float value) {
  _has_bits_[0] |= 0x00200000u;
  word_count_hud_x_position_ = value;
}
inline void UIStateArchive::set_word_count_hud_x_position(float value) {
  _internal_set_word_count_hud_x_position(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.word_count_hud_x_position)
}

// optional float word_count_hud_y_position = 22;
inline bool UIStateArchive::_internal_has_word_count_hud_y_position() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_word_count_hud_y_position() const {
  return _internal_has_word_count_hud_y_position();
}
inline void UIStateArchive::clear_word_count_hud_y_position() {
  word_count_hud_y_position_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float UIStateArchive::_internal_word_count_hud_y_position() const {
  return word_count_hud_y_position_;
}
inline float UIStateArchive::word_count_hud_y_position() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.word_count_hud_y_position)
  return _internal_word_count_hud_y_position();
}
inline void UIStateArchive::_internal_set_word_count_hud_y_position(float value) {
  _has_bits_[0] |= 0x04000000u;
  word_count_hud_y_position_ = value;
}
inline void UIStateArchive::set_word_count_hud_y_position(float value) {
  _internal_set_word_count_hud_y_position(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.word_count_hud_y_position)
}

// optional bool show_user_defined_guides = 23 [default = true];
inline bool UIStateArchive::_internal_has_show_user_defined_guides() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool UIStateArchive::has_show_user_defined_guides() const {
  return _internal_has_show_user_defined_guides();
}
inline void UIStateArchive::clear_show_user_defined_guides() {
  show_user_defined_guides_ = true;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool UIStateArchive::_internal_show_user_defined_guides() const {
  return show_user_defined_guides_;
}
inline bool UIStateArchive::show_user_defined_guides() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.show_user_defined_guides)
  return _internal_show_user_defined_guides();
}
inline void UIStateArchive::_internal_set_show_user_defined_guides(bool value) {
  _has_bits_[1] |= 0x00000008u;
  show_user_defined_guides_ = value;
}
inline void UIStateArchive::set_show_user_defined_guides(bool value) {
  _internal_set_show_user_defined_guides(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.show_user_defined_guides)
}

// optional bool should_show_comment_sidebar = 24 [default = false];
inline bool UIStateArchive::_internal_has_should_show_comment_sidebar() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_should_show_comment_sidebar() const {
  return _internal_has_should_show_comment_sidebar();
}
inline void UIStateArchive::clear_should_show_comment_sidebar() {
  should_show_comment_sidebar_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool UIStateArchive::_internal_should_show_comment_sidebar() const {
  return should_show_comment_sidebar_;
}
inline bool UIStateArchive::should_show_comment_sidebar() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.should_show_comment_sidebar)
  return _internal_should_show_comment_sidebar();
}
inline void UIStateArchive::_internal_set_should_show_comment_sidebar(bool value) {
  _has_bits_[0] |= 0x01000000u;
  should_show_comment_sidebar_ = value;
}
inline void UIStateArchive::set_should_show_comment_sidebar(bool value) {
  _internal_set_should_show_comment_sidebar(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.should_show_comment_sidebar)
}

// optional .TSK.SelectionPathArchive compatibility_selection_path = 25;
inline bool UIStateArchive::_internal_has_compatibility_selection_path() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || compatibility_selection_path_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_compatibility_selection_path() const {
  return _internal_has_compatibility_selection_path();
}
inline const ::TSK::SelectionPathArchive& UIStateArchive::_internal_compatibility_selection_path() const {
  const ::TSK::SelectionPathArchive* p = compatibility_selection_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::SelectionPathArchive&>(
      ::TSK::_SelectionPathArchive_default_instance_);
}
inline const ::TSK::SelectionPathArchive& UIStateArchive::compatibility_selection_path() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.compatibility_selection_path)
  return _internal_compatibility_selection_path();
}
inline void UIStateArchive::unsafe_arena_set_allocated_compatibility_selection_path(
    ::TSK::SelectionPathArchive* compatibility_selection_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compatibility_selection_path_);
  }
  compatibility_selection_path_ = compatibility_selection_path;
  if (compatibility_selection_path) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.compatibility_selection_path)
}
inline ::TSK::SelectionPathArchive* UIStateArchive::release_compatibility_selection_path() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSK::SelectionPathArchive* temp = compatibility_selection_path_;
  compatibility_selection_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::unsafe_arena_release_compatibility_selection_path() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.compatibility_selection_path)
  _has_bits_[0] &= ~0x00000100u;
  ::TSK::SelectionPathArchive* temp = compatibility_selection_path_;
  compatibility_selection_path_ = nullptr;
  return temp;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::_internal_mutable_compatibility_selection_path() {
  _has_bits_[0] |= 0x00000100u;
  if (compatibility_selection_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::SelectionPathArchive>(GetArena());
    compatibility_selection_path_ = p;
  }
  return compatibility_selection_path_;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::mutable_compatibility_selection_path() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.compatibility_selection_path)
  return _internal_mutable_compatibility_selection_path();
}
inline void UIStateArchive::set_allocated_compatibility_selection_path(::TSK::SelectionPathArchive* compatibility_selection_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(compatibility_selection_path_);
  }
  if (compatibility_selection_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compatibility_selection_path)->GetArena();
    if (message_arena != submessage_arena) {
      compatibility_selection_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compatibility_selection_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  compatibility_selection_path_ = compatibility_selection_path;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.compatibility_selection_path)
}

// optional bool shows_ctmarkup = 26 [default = true];
inline bool UIStateArchive::_internal_has_shows_ctmarkup() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_ctmarkup() const {
  return _internal_has_shows_ctmarkup();
}
inline void UIStateArchive::clear_shows_ctmarkup() {
  shows_ctmarkup_ = true;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool UIStateArchive::_internal_shows_ctmarkup() const {
  return shows_ctmarkup_;
}
inline bool UIStateArchive::shows_ctmarkup() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.shows_ctmarkup)
  return _internal_shows_ctmarkup();
}
inline void UIStateArchive::_internal_set_shows_ctmarkup(bool value) {
  _has_bits_[1] |= 0x00000010u;
  shows_ctmarkup_ = value;
}
inline void UIStateArchive::set_shows_ctmarkup(bool value) {
  _internal_set_shows_ctmarkup(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.shows_ctmarkup)
}

// optional bool shows_ctdeletions = 27 [default = true];
inline bool UIStateArchive::_internal_has_shows_ctdeletions() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_ctdeletions() const {
  return _internal_has_shows_ctdeletions();
}
inline void UIStateArchive::clear_shows_ctdeletions() {
  shows_ctdeletions_ = true;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool UIStateArchive::_internal_shows_ctdeletions() const {
  return shows_ctdeletions_;
}
inline bool UIStateArchive::shows_ctdeletions() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.shows_ctdeletions)
  return _internal_shows_ctdeletions();
}
inline void UIStateArchive::_internal_set_shows_ctdeletions(bool value) {
  _has_bits_[1] |= 0x00000040u;
  shows_ctdeletions_ = value;
}
inline void UIStateArchive::set_shows_ctdeletions(bool value) {
  _internal_set_shows_ctdeletions(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.shows_ctdeletions)
}

// optional bool change_tracking_paused = 28 [default = false];
inline bool UIStateArchive::_internal_has_change_tracking_paused() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_change_tracking_paused() const {
  return _internal_has_change_tracking_paused();
}
inline void UIStateArchive::clear_change_tracking_paused() {
  change_tracking_paused_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool UIStateArchive::_internal_change_tracking_paused() const {
  return change_tracking_paused_;
}
inline bool UIStateArchive::change_tracking_paused() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.change_tracking_paused)
  return _internal_change_tracking_paused();
}
inline void UIStateArchive::_internal_set_change_tracking_paused(bool value) {
  _has_bits_[0] |= 0x02000000u;
  change_tracking_paused_ = value;
}
inline void UIStateArchive::set_change_tracking_paused(bool value) {
  _internal_set_change_tracking_paused(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.change_tracking_paused)
}

// optional .TSK.SelectionPathArchive selection_path = 29;
inline bool UIStateArchive::_internal_has_selection_path() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || selection_path_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_selection_path() const {
  return _internal_has_selection_path();
}
inline const ::TSK::SelectionPathArchive& UIStateArchive::_internal_selection_path() const {
  const ::TSK::SelectionPathArchive* p = selection_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::SelectionPathArchive&>(
      ::TSK::_SelectionPathArchive_default_instance_);
}
inline const ::TSK::SelectionPathArchive& UIStateArchive::selection_path() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.selection_path)
  return _internal_selection_path();
}
inline void UIStateArchive::unsafe_arena_set_allocated_selection_path(
    ::TSK::SelectionPathArchive* selection_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_);
  }
  selection_path_ = selection_path;
  if (selection_path) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.selection_path)
}
inline ::TSK::SelectionPathArchive* UIStateArchive::release_selection_path() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSK::SelectionPathArchive* temp = selection_path_;
  selection_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::unsafe_arena_release_selection_path() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.selection_path)
  _has_bits_[0] &= ~0x00000200u;
  ::TSK::SelectionPathArchive* temp = selection_path_;
  selection_path_ = nullptr;
  return temp;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::_internal_mutable_selection_path() {
  _has_bits_[0] |= 0x00000200u;
  if (selection_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::SelectionPathArchive>(GetArena());
    selection_path_ = p;
  }
  return selection_path_;
}
inline ::TSK::SelectionPathArchive* UIStateArchive::mutable_selection_path() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.selection_path)
  return _internal_mutable_selection_path();
}
inline void UIStateArchive::set_allocated_selection_path(::TSK::SelectionPathArchive* selection_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_);
  }
  if (selection_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path)->GetArena();
    if (message_arena != submessage_arena) {
      selection_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  selection_path_ = selection_path;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.selection_path)
}

// optional string filtered_author_name = 30;
inline bool UIStateArchive::_internal_has_filtered_author_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UIStateArchive::has_filtered_author_name() const {
  return _internal_has_filtered_author_name();
}
inline void UIStateArchive::clear_filtered_author_name() {
  filtered_author_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UIStateArchive::filtered_author_name() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.filtered_author_name)
  return _internal_filtered_author_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void UIStateArchive::set_filtered_author_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filtered_author_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.filtered_author_name)
}
inline std::string* UIStateArchive::mutable_filtered_author_name() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.filtered_author_name)
  return _internal_mutable_filtered_author_name();
}
inline const std::string& UIStateArchive::_internal_filtered_author_name() const {
  return filtered_author_name_.Get();
}
inline void UIStateArchive::_internal_set_filtered_author_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filtered_author_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* UIStateArchive::_internal_mutable_filtered_author_name() {
  _has_bits_[0] |= 0x00000002u;
  return filtered_author_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UIStateArchive::release_filtered_author_name() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.filtered_author_name)
  if (!_internal_has_filtered_author_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filtered_author_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UIStateArchive::set_allocated_filtered_author_name(std::string* filtered_author_name) {
  if (filtered_author_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filtered_author_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filtered_author_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.filtered_author_name)
}

// optional .TP.ViewScaleModeiOS view_scale_mode_ios = 31 [default = ViewScaleModeiOS_UserDefined];
inline bool UIStateArchive::_internal_has_view_scale_mode_ios() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool UIStateArchive::has_view_scale_mode_ios() const {
  return _internal_has_view_scale_mode_ios();
}
inline void UIStateArchive::clear_view_scale_mode_ios() {
  view_scale_mode_ios_ = 1;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::TP::ViewScaleModeiOS UIStateArchive::_internal_view_scale_mode_ios() const {
  return static_cast< ::TP::ViewScaleModeiOS >(view_scale_mode_ios_);
}
inline ::TP::ViewScaleModeiOS UIStateArchive::view_scale_mode_ios() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.view_scale_mode_ios)
  return _internal_view_scale_mode_ios();
}
inline void UIStateArchive::_internal_set_view_scale_mode_ios(::TP::ViewScaleModeiOS value) {
  assert(::TP::ViewScaleModeiOS_IsValid(value));
  _has_bits_[1] |= 0x00000020u;
  view_scale_mode_ios_ = value;
}
inline void UIStateArchive::set_view_scale_mode_ios(::TP::ViewScaleModeiOS value) {
  _internal_set_view_scale_mode_ios(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.view_scale_mode_ios)
}

// optional .TSP.Reference filtered_author = 32;
inline bool UIStateArchive::_internal_has_filtered_author() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || filtered_author_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_filtered_author() const {
  return _internal_has_filtered_author();
}
inline const ::TSP::Reference& UIStateArchive::_internal_filtered_author() const {
  const ::TSP::Reference* p = filtered_author_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::filtered_author() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.filtered_author)
  return _internal_filtered_author();
}
inline void UIStateArchive::unsafe_arena_set_allocated_filtered_author(
    ::TSP::Reference* filtered_author) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filtered_author_);
  }
  filtered_author_ = filtered_author;
  if (filtered_author) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.filtered_author)
}
inline ::TSP::Reference* UIStateArchive::release_filtered_author() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = filtered_author_;
  filtered_author_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_filtered_author() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.filtered_author)
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = filtered_author_;
  filtered_author_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_filtered_author() {
  _has_bits_[0] |= 0x00000400u;
  if (filtered_author_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    filtered_author_ = p;
  }
  return filtered_author_;
}
inline ::TSP::Reference* UIStateArchive::mutable_filtered_author() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.filtered_author)
  return _internal_mutable_filtered_author();
}
inline void UIStateArchive::set_allocated_filtered_author(::TSP::Reference* filtered_author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filtered_author_);
  }
  if (filtered_author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filtered_author)->GetArena();
    if (message_arena != submessage_arena) {
      filtered_author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filtered_author, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  filtered_author_ = filtered_author;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.filtered_author)
}

// optional .TP.PageViewState page_view_state = 33;
inline bool UIStateArchive::_internal_has_page_view_state() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_page_view_state() const {
  return _internal_has_page_view_state();
}
inline void UIStateArchive::clear_page_view_state() {
  page_view_state_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::TP::PageViewState UIStateArchive::_internal_page_view_state() const {
  return static_cast< ::TP::PageViewState >(page_view_state_);
}
inline ::TP::PageViewState UIStateArchive::page_view_state() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.page_view_state)
  return _internal_page_view_state();
}
inline void UIStateArchive::_internal_set_page_view_state(::TP::PageViewState value) {
  assert(::TP::PageViewState_IsValid(value));
  _has_bits_[0] |= 0x08000000u;
  page_view_state_ = value;
}
inline void UIStateArchive::set_page_view_state(::TP::PageViewState value) {
  _internal_set_page_view_state(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.page_view_state)
}

// optional bool pencil_annotations_hidden = 34 [default = false];
inline bool UIStateArchive::_internal_has_pencil_annotations_hidden() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_pencil_annotations_hidden() const {
  return _internal_has_pencil_annotations_hidden();
}
inline void UIStateArchive::clear_pencil_annotations_hidden() {
  pencil_annotations_hidden_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool UIStateArchive::_internal_pencil_annotations_hidden() const {
  return pencil_annotations_hidden_;
}
inline bool UIStateArchive::pencil_annotations_hidden() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.pencil_annotations_hidden)
  return _internal_pencil_annotations_hidden();
}
inline void UIStateArchive::_internal_set_pencil_annotations_hidden(bool value) {
  _has_bits_[0] |= 0x20000000u;
  pencil_annotations_hidden_ = value;
}
inline void UIStateArchive::set_pencil_annotations_hidden(bool value) {
  _internal_set_pencil_annotations_hidden(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.pencil_annotations_hidden)
}

// optional .TSP.Reference freehand_drawing_toolkit_state = 35;
inline bool UIStateArchive::_internal_has_freehand_drawing_toolkit_state() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || freehand_drawing_toolkit_state_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_freehand_drawing_toolkit_state() const {
  return _internal_has_freehand_drawing_toolkit_state();
}
inline const ::TSP::Reference& UIStateArchive::_internal_freehand_drawing_toolkit_state() const {
  const ::TSP::Reference* p = freehand_drawing_toolkit_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::freehand_drawing_toolkit_state() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.freehand_drawing_toolkit_state)
  return _internal_freehand_drawing_toolkit_state();
}
inline void UIStateArchive::unsafe_arena_set_allocated_freehand_drawing_toolkit_state(
    ::TSP::Reference* freehand_drawing_toolkit_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freehand_drawing_toolkit_state_);
  }
  freehand_drawing_toolkit_state_ = freehand_drawing_toolkit_state;
  if (freehand_drawing_toolkit_state) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.freehand_drawing_toolkit_state)
}
inline ::TSP::Reference* UIStateArchive::release_freehand_drawing_toolkit_state() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = freehand_drawing_toolkit_state_;
  freehand_drawing_toolkit_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_freehand_drawing_toolkit_state() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.freehand_drawing_toolkit_state)
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = freehand_drawing_toolkit_state_;
  freehand_drawing_toolkit_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_freehand_drawing_toolkit_state() {
  _has_bits_[0] |= 0x00000800u;
  if (freehand_drawing_toolkit_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    freehand_drawing_toolkit_state_ = p;
  }
  return freehand_drawing_toolkit_state_;
}
inline ::TSP::Reference* UIStateArchive::mutable_freehand_drawing_toolkit_state() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.freehand_drawing_toolkit_state)
  return _internal_mutable_freehand_drawing_toolkit_state();
}
inline void UIStateArchive::set_allocated_freehand_drawing_toolkit_state(::TSP::Reference* freehand_drawing_toolkit_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(freehand_drawing_toolkit_state_);
  }
  if (freehand_drawing_toolkit_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freehand_drawing_toolkit_state)->GetArena();
    if (message_arena != submessage_arena) {
      freehand_drawing_toolkit_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freehand_drawing_toolkit_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  freehand_drawing_toolkit_state_ = freehand_drawing_toolkit_state;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.freehand_drawing_toolkit_state)
}

// optional float presentation_auto_scroll_speed = 36;
inline bool UIStateArchive::_internal_has_presentation_auto_scroll_speed() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_presentation_auto_scroll_speed() const {
  return _internal_has_presentation_auto_scroll_speed();
}
inline void UIStateArchive::clear_presentation_auto_scroll_speed() {
  presentation_auto_scroll_speed_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float UIStateArchive::_internal_presentation_auto_scroll_speed() const {
  return presentation_auto_scroll_speed_;
}
inline float UIStateArchive::presentation_auto_scroll_speed() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.presentation_auto_scroll_speed)
  return _internal_presentation_auto_scroll_speed();
}
inline void UIStateArchive::_internal_set_presentation_auto_scroll_speed(float value) {
  _has_bits_[0] |= 0x10000000u;
  presentation_auto_scroll_speed_ = value;
}
inline void UIStateArchive::set_presentation_auto_scroll_speed(float value) {
  _internal_set_presentation_auto_scroll_speed(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.presentation_auto_scroll_speed)
}

// optional .TSP.Reference selection_path_transformer = 37;
inline bool UIStateArchive::_internal_has_selection_path_transformer() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || selection_path_transformer_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_selection_path_transformer() const {
  return _internal_has_selection_path_transformer();
}
inline const ::TSP::Reference& UIStateArchive::_internal_selection_path_transformer() const {
  const ::TSP::Reference* p = selection_path_transformer_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::selection_path_transformer() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.selection_path_transformer)
  return _internal_selection_path_transformer();
}
inline void UIStateArchive::unsafe_arena_set_allocated_selection_path_transformer(
    ::TSP::Reference* selection_path_transformer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer_);
  }
  selection_path_transformer_ = selection_path_transformer;
  if (selection_path_transformer) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.selection_path_transformer)
}
inline ::TSP::Reference* UIStateArchive::release_selection_path_transformer() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = selection_path_transformer_;
  selection_path_transformer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_selection_path_transformer() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.selection_path_transformer)
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = selection_path_transformer_;
  selection_path_transformer_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_selection_path_transformer() {
  _has_bits_[0] |= 0x00001000u;
  if (selection_path_transformer_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    selection_path_transformer_ = p;
  }
  return selection_path_transformer_;
}
inline ::TSP::Reference* UIStateArchive::mutable_selection_path_transformer() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.selection_path_transformer)
  return _internal_mutable_selection_path_transformer();
}
inline void UIStateArchive::set_allocated_selection_path_transformer(::TSP::Reference* selection_path_transformer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer_);
  }
  if (selection_path_transformer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_path_transformer)->GetArena();
    if (message_arena != submessage_arena) {
      selection_path_transformer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_path_transformer, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  selection_path_transformer_ = selection_path_transformer;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.selection_path_transformer)
}

// optional bool shows_toc_navigator = 38 [default = false];
inline bool UIStateArchive::_internal_has_shows_toc_navigator() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_shows_toc_navigator() const {
  return _internal_has_shows_toc_navigator();
}
inline void UIStateArchive::clear_shows_toc_navigator() {
  shows_toc_navigator_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool UIStateArchive::_internal_shows_toc_navigator() const {
  return shows_toc_navigator_;
}
inline bool UIStateArchive::shows_toc_navigator() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.shows_toc_navigator)
  return _internal_shows_toc_navigator();
}
inline void UIStateArchive::_internal_set_shows_toc_navigator(bool value) {
  _has_bits_[0] |= 0x40000000u;
  shows_toc_navigator_ = value;
}
inline void UIStateArchive::set_shows_toc_navigator(bool value) {
  _internal_set_shows_toc_navigator(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.shows_toc_navigator)
}

// optional bool show_user_defined_master_guides = 39 [default = true];
inline bool UIStateArchive::_internal_has_show_user_defined_master_guides() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool UIStateArchive::has_show_user_defined_master_guides() const {
  return _internal_has_show_user_defined_master_guides();
}
inline void UIStateArchive::clear_show_user_defined_master_guides() {
  show_user_defined_master_guides_ = true;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool UIStateArchive::_internal_show_user_defined_master_guides() const {
  return show_user_defined_master_guides_;
}
inline bool UIStateArchive::show_user_defined_master_guides() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.show_user_defined_master_guides)
  return _internal_show_user_defined_master_guides();
}
inline void UIStateArchive::_internal_set_show_user_defined_master_guides(bool value) {
  _has_bits_[1] |= 0x00000080u;
  show_user_defined_master_guides_ = value;
}
inline void UIStateArchive::set_show_user_defined_master_guides(bool value) {
  _internal_set_show_user_defined_master_guides(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.show_user_defined_master_guides)
}

// optional bool editing_disabled = 40;
inline bool UIStateArchive::_internal_has_editing_disabled() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool UIStateArchive::has_editing_disabled() const {
  return _internal_has_editing_disabled();
}
inline void UIStateArchive::clear_editing_disabled() {
  editing_disabled_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool UIStateArchive::_internal_editing_disabled() const {
  return editing_disabled_;
}
inline bool UIStateArchive::editing_disabled() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.editing_disabled)
  return _internal_editing_disabled();
}
inline void UIStateArchive::_internal_set_editing_disabled(bool value) {
  _has_bits_[0] |= 0x80000000u;
  editing_disabled_ = value;
}
inline void UIStateArchive::set_editing_disabled(bool value) {
  _internal_set_editing_disabled(value);
  // @@protoc_insertion_point(field_set:TP.UIStateArchive.editing_disabled)
}

// optional .TSP.Reference pencil_annotation_ui_state = 41;
inline bool UIStateArchive::_internal_has_pencil_annotation_ui_state() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || pencil_annotation_ui_state_ != nullptr);
  return value;
}
inline bool UIStateArchive::has_pencil_annotation_ui_state() const {
  return _internal_has_pencil_annotation_ui_state();
}
inline const ::TSP::Reference& UIStateArchive::_internal_pencil_annotation_ui_state() const {
  const ::TSP::Reference* p = pencil_annotation_ui_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateArchive::pencil_annotation_ui_state() const {
  // @@protoc_insertion_point(field_get:TP.UIStateArchive.pencil_annotation_ui_state)
  return _internal_pencil_annotation_ui_state();
}
inline void UIStateArchive::unsafe_arena_set_allocated_pencil_annotation_ui_state(
    ::TSP::Reference* pencil_annotation_ui_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_ui_state_);
  }
  pencil_annotation_ui_state_ = pencil_annotation_ui_state;
  if (pencil_annotation_ui_state) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UIStateArchive.pencil_annotation_ui_state)
}
inline ::TSP::Reference* UIStateArchive::release_pencil_annotation_ui_state() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = pencil_annotation_ui_state_;
  pencil_annotation_ui_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UIStateArchive::unsafe_arena_release_pencil_annotation_ui_state() {
  // @@protoc_insertion_point(field_release:TP.UIStateArchive.pencil_annotation_ui_state)
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = pencil_annotation_ui_state_;
  pencil_annotation_ui_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateArchive::_internal_mutable_pencil_annotation_ui_state() {
  _has_bits_[0] |= 0x00002000u;
  if (pencil_annotation_ui_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    pencil_annotation_ui_state_ = p;
  }
  return pencil_annotation_ui_state_;
}
inline ::TSP::Reference* UIStateArchive::mutable_pencil_annotation_ui_state() {
  // @@protoc_insertion_point(field_mutable:TP.UIStateArchive.pencil_annotation_ui_state)
  return _internal_mutable_pencil_annotation_ui_state();
}
inline void UIStateArchive::set_allocated_pencil_annotation_ui_state(::TSP::Reference* pencil_annotation_ui_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_ui_state_);
  }
  if (pencil_annotation_ui_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_ui_state)->GetArena();
    if (message_arena != submessage_arena) {
      pencil_annotation_ui_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pencil_annotation_ui_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  pencil_annotation_ui_state_ = pencil_annotation_ui_state;
  // @@protoc_insertion_point(field_set_allocated:TP.UIStateArchive.pencil_annotation_ui_state)
}

// -------------------------------------------------------------------

// ViewStateRootArchive

// optional .TSP.Reference layout_state = 1;
inline bool ViewStateRootArchive::_internal_has_layout_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || layout_state_ != nullptr);
  return value;
}
inline bool ViewStateRootArchive::has_layout_state() const {
  return _internal_has_layout_state();
}
inline const ::TSP::Reference& ViewStateRootArchive::_internal_layout_state() const {
  const ::TSP::Reference* p = layout_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ViewStateRootArchive::layout_state() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateRootArchive.layout_state)
  return _internal_layout_state();
}
inline void ViewStateRootArchive::unsafe_arena_set_allocated_layout_state(
    ::TSP::Reference* layout_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout_state_);
  }
  layout_state_ = layout_state;
  if (layout_state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ViewStateRootArchive.layout_state)
}
inline ::TSP::Reference* ViewStateRootArchive::release_layout_state() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = layout_state_;
  layout_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ViewStateRootArchive::unsafe_arena_release_layout_state() {
  // @@protoc_insertion_point(field_release:TP.ViewStateRootArchive.layout_state)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = layout_state_;
  layout_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ViewStateRootArchive::_internal_mutable_layout_state() {
  _has_bits_[0] |= 0x00000001u;
  if (layout_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    layout_state_ = p;
  }
  return layout_state_;
}
inline ::TSP::Reference* ViewStateRootArchive::mutable_layout_state() {
  // @@protoc_insertion_point(field_mutable:TP.ViewStateRootArchive.layout_state)
  return _internal_mutable_layout_state();
}
inline void ViewStateRootArchive::set_allocated_layout_state(::TSP::Reference* layout_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout_state_);
  }
  if (layout_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout_state)->GetArena();
    if (message_arena != submessage_arena) {
      layout_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layout_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layout_state_ = layout_state;
  // @@protoc_insertion_point(field_set_allocated:TP.ViewStateRootArchive.layout_state)
}

// optional .TSP.Reference view_state = 2;
inline bool ViewStateRootArchive::_internal_has_view_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || view_state_ != nullptr);
  return value;
}
inline bool ViewStateRootArchive::has_view_state() const {
  return _internal_has_view_state();
}
inline const ::TSP::Reference& ViewStateRootArchive::_internal_view_state() const {
  const ::TSP::Reference* p = view_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ViewStateRootArchive::view_state() const {
  // @@protoc_insertion_point(field_get:TP.ViewStateRootArchive.view_state)
  return _internal_view_state();
}
inline void ViewStateRootArchive::unsafe_arena_set_allocated_view_state(
    ::TSP::Reference* view_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_state_);
  }
  view_state_ = view_state;
  if (view_state) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.ViewStateRootArchive.view_state)
}
inline ::TSP::Reference* ViewStateRootArchive::release_view_state() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = view_state_;
  view_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ViewStateRootArchive::unsafe_arena_release_view_state() {
  // @@protoc_insertion_point(field_release:TP.ViewStateRootArchive.view_state)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = view_state_;
  view_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ViewStateRootArchive::_internal_mutable_view_state() {
  _has_bits_[0] |= 0x00000002u;
  if (view_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    view_state_ = p;
  }
  return view_state_;
}
inline ::TSP::Reference* ViewStateRootArchive::mutable_view_state() {
  // @@protoc_insertion_point(field_mutable:TP.ViewStateRootArchive.view_state)
  return _internal_mutable_view_state();
}
inline void ViewStateRootArchive::set_allocated_view_state(::TSP::Reference* view_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_state_);
  }
  if (view_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_state)->GetArena();
    if (message_arena != submessage_arena) {
      view_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  view_state_ = view_state;
  // @@protoc_insertion_point(field_set_allocated:TP.ViewStateRootArchive.view_state)
}

// -------------------------------------------------------------------

// UserDefinedGuideMapArchive_UserDefinedGuide

// required uint32 page_index = 1;
inline bool UserDefinedGuideMapArchive_UserDefinedGuide::_internal_has_page_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserDefinedGuideMapArchive_UserDefinedGuide::has_page_index() const {
  return _internal_has_page_index();
}
inline void UserDefinedGuideMapArchive_UserDefinedGuide::clear_page_index() {
  page_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserDefinedGuideMapArchive_UserDefinedGuide::_internal_page_index() const {
  return page_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserDefinedGuideMapArchive_UserDefinedGuide::page_index() const {
  // @@protoc_insertion_point(field_get:TP.UserDefinedGuideMapArchive.UserDefinedGuide.page_index)
  return _internal_page_index();
}
inline void UserDefinedGuideMapArchive_UserDefinedGuide::_internal_set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  page_index_ = value;
}
inline void UserDefinedGuideMapArchive_UserDefinedGuide::set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_index(value);
  // @@protoc_insertion_point(field_set:TP.UserDefinedGuideMapArchive.UserDefinedGuide.page_index)
}

// required .TSP.Reference guide_storage = 2;
inline bool UserDefinedGuideMapArchive_UserDefinedGuide::_internal_has_guide_storage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || guide_storage_ != nullptr);
  return value;
}
inline bool UserDefinedGuideMapArchive_UserDefinedGuide::has_guide_storage() const {
  return _internal_has_guide_storage();
}
inline const ::TSP::Reference& UserDefinedGuideMapArchive_UserDefinedGuide::_internal_guide_storage() const {
  const ::TSP::Reference* p = guide_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UserDefinedGuideMapArchive_UserDefinedGuide::guide_storage() const {
  // @@protoc_insertion_point(field_get:TP.UserDefinedGuideMapArchive.UserDefinedGuide.guide_storage)
  return _internal_guide_storage();
}
inline void UserDefinedGuideMapArchive_UserDefinedGuide::unsafe_arena_set_allocated_guide_storage(
    ::TSP::Reference* guide_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guide_storage_);
  }
  guide_storage_ = guide_storage;
  if (guide_storage) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.UserDefinedGuideMapArchive.UserDefinedGuide.guide_storage)
}
inline ::TSP::Reference* UserDefinedGuideMapArchive_UserDefinedGuide::release_guide_storage() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = guide_storage_;
  guide_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UserDefinedGuideMapArchive_UserDefinedGuide::unsafe_arena_release_guide_storage() {
  // @@protoc_insertion_point(field_release:TP.UserDefinedGuideMapArchive.UserDefinedGuide.guide_storage)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = guide_storage_;
  guide_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UserDefinedGuideMapArchive_UserDefinedGuide::_internal_mutable_guide_storage() {
  _has_bits_[0] |= 0x00000001u;
  if (guide_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    guide_storage_ = p;
  }
  return guide_storage_;
}
inline ::TSP::Reference* UserDefinedGuideMapArchive_UserDefinedGuide::mutable_guide_storage() {
  // @@protoc_insertion_point(field_mutable:TP.UserDefinedGuideMapArchive.UserDefinedGuide.guide_storage)
  return _internal_mutable_guide_storage();
}
inline void UserDefinedGuideMapArchive_UserDefinedGuide::set_allocated_guide_storage(::TSP::Reference* guide_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(guide_storage_);
  }
  if (guide_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guide_storage)->GetArena();
    if (message_arena != submessage_arena) {
      guide_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guide_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guide_storage_ = guide_storage;
  // @@protoc_insertion_point(field_set_allocated:TP.UserDefinedGuideMapArchive.UserDefinedGuide.guide_storage)
}

// -------------------------------------------------------------------

// UserDefinedGuideMapArchive

// repeated .TP.UserDefinedGuideMapArchive.UserDefinedGuide user_defined_guide_storages = 1;
inline int UserDefinedGuideMapArchive::_internal_user_defined_guide_storages_size() const {
  return user_defined_guide_storages_.size();
}
inline int UserDefinedGuideMapArchive::user_defined_guide_storages_size() const {
  return _internal_user_defined_guide_storages_size();
}
inline void UserDefinedGuideMapArchive::clear_user_defined_guide_storages() {
  user_defined_guide_storages_.Clear();
}
inline ::TP::UserDefinedGuideMapArchive_UserDefinedGuide* UserDefinedGuideMapArchive::mutable_user_defined_guide_storages(int index) {
  // @@protoc_insertion_point(field_mutable:TP.UserDefinedGuideMapArchive.user_defined_guide_storages)
  return user_defined_guide_storages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::UserDefinedGuideMapArchive_UserDefinedGuide >*
UserDefinedGuideMapArchive::mutable_user_defined_guide_storages() {
  // @@protoc_insertion_point(field_mutable_list:TP.UserDefinedGuideMapArchive.user_defined_guide_storages)
  return &user_defined_guide_storages_;
}
inline const ::TP::UserDefinedGuideMapArchive_UserDefinedGuide& UserDefinedGuideMapArchive::_internal_user_defined_guide_storages(int index) const {
  return user_defined_guide_storages_.Get(index);
}
inline const ::TP::UserDefinedGuideMapArchive_UserDefinedGuide& UserDefinedGuideMapArchive::user_defined_guide_storages(int index) const {
  // @@protoc_insertion_point(field_get:TP.UserDefinedGuideMapArchive.user_defined_guide_storages)
  return _internal_user_defined_guide_storages(index);
}
inline ::TP::UserDefinedGuideMapArchive_UserDefinedGuide* UserDefinedGuideMapArchive::_internal_add_user_defined_guide_storages() {
  return user_defined_guide_storages_.Add();
}
inline ::TP::UserDefinedGuideMapArchive_UserDefinedGuide* UserDefinedGuideMapArchive::add_user_defined_guide_storages() {
  // @@protoc_insertion_point(field_add:TP.UserDefinedGuideMapArchive.user_defined_guide_storages)
  return _internal_add_user_defined_guide_storages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::UserDefinedGuideMapArchive_UserDefinedGuide >&
UserDefinedGuideMapArchive::user_defined_guide_storages() const {
  // @@protoc_insertion_point(field_list:TP.UserDefinedGuideMapArchive.user_defined_guide_storages)
  return user_defined_guide_storages_;
}

// -------------------------------------------------------------------

// SectionSelectionArchive

// repeated .TSP.Reference sections = 1;
inline int SectionSelectionArchive::_internal_sections_size() const {
  return sections_.size();
}
inline int SectionSelectionArchive::sections_size() const {
  return _internal_sections_size();
}
inline ::TSP::Reference* SectionSelectionArchive::mutable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionSelectionArchive.sections)
  return sections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SectionSelectionArchive::mutable_sections() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionSelectionArchive.sections)
  return &sections_;
}
inline const ::TSP::Reference& SectionSelectionArchive::_internal_sections(int index) const {
  return sections_.Get(index);
}
inline const ::TSP::Reference& SectionSelectionArchive::sections(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionSelectionArchive.sections)
  return _internal_sections(index);
}
inline ::TSP::Reference* SectionSelectionArchive::_internal_add_sections() {
  return sections_.Add();
}
inline ::TSP::Reference* SectionSelectionArchive::add_sections() {
  // @@protoc_insertion_point(field_add:TP.SectionSelectionArchive.sections)
  return _internal_add_sections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SectionSelectionArchive::sections() const {
  // @@protoc_insertion_point(field_list:TP.SectionSelectionArchive.sections)
  return sections_;
}

// -------------------------------------------------------------------

// SectionSelectionTransformerArchive

// optional .TSP.Reference original_selection = 1;
inline bool SectionSelectionTransformerArchive::_internal_has_original_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || original_selection_ != nullptr);
  return value;
}
inline bool SectionSelectionTransformerArchive::has_original_selection() const {
  return _internal_has_original_selection();
}
inline const ::TSP::Reference& SectionSelectionTransformerArchive::_internal_original_selection() const {
  const ::TSP::Reference* p = original_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SectionSelectionTransformerArchive::original_selection() const {
  // @@protoc_insertion_point(field_get:TP.SectionSelectionTransformerArchive.original_selection)
  return _internal_original_selection();
}
inline void SectionSelectionTransformerArchive::unsafe_arena_set_allocated_original_selection(
    ::TSP::Reference* original_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_selection_);
  }
  original_selection_ = original_selection;
  if (original_selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionSelectionTransformerArchive.original_selection)
}
inline ::TSP::Reference* SectionSelectionTransformerArchive::release_original_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = original_selection_;
  original_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SectionSelectionTransformerArchive::unsafe_arena_release_original_selection() {
  // @@protoc_insertion_point(field_release:TP.SectionSelectionTransformerArchive.original_selection)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = original_selection_;
  original_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SectionSelectionTransformerArchive::_internal_mutable_original_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (original_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    original_selection_ = p;
  }
  return original_selection_;
}
inline ::TSP::Reference* SectionSelectionTransformerArchive::mutable_original_selection() {
  // @@protoc_insertion_point(field_mutable:TP.SectionSelectionTransformerArchive.original_selection)
  return _internal_mutable_original_selection();
}
inline void SectionSelectionTransformerArchive::set_allocated_original_selection(::TSP::Reference* original_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_selection_);
  }
  if (original_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_selection)->GetArena();
    if (message_arena != submessage_arena) {
      original_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  original_selection_ = original_selection;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionSelectionTransformerArchive.original_selection)
}

// optional .TSP.UUIDPath storage_uuid_path = 2;
inline bool SectionSelectionTransformerArchive::_internal_has_storage_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_uuid_path_ != nullptr);
  return value;
}
inline bool SectionSelectionTransformerArchive::has_storage_uuid_path() const {
  return _internal_has_storage_uuid_path();
}
inline const ::TSP::UUIDPath& SectionSelectionTransformerArchive::_internal_storage_uuid_path() const {
  const ::TSP::UUIDPath* p = storage_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& SectionSelectionTransformerArchive::storage_uuid_path() const {
  // @@protoc_insertion_point(field_get:TP.SectionSelectionTransformerArchive.storage_uuid_path)
  return _internal_storage_uuid_path();
}
inline void SectionSelectionTransformerArchive::unsafe_arena_set_allocated_storage_uuid_path(
    ::TSP::UUIDPath* storage_uuid_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  storage_uuid_path_ = storage_uuid_path;
  if (storage_uuid_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionSelectionTransformerArchive.storage_uuid_path)
}
inline ::TSP::UUIDPath* SectionSelectionTransformerArchive::release_storage_uuid_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* SectionSelectionTransformerArchive::unsafe_arena_release_storage_uuid_path() {
  // @@protoc_insertion_point(field_release:TP.SectionSelectionTransformerArchive.storage_uuid_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* SectionSelectionTransformerArchive::_internal_mutable_storage_uuid_path() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    storage_uuid_path_ = p;
  }
  return storage_uuid_path_;
}
inline ::TSP::UUIDPath* SectionSelectionTransformerArchive::mutable_storage_uuid_path() {
  // @@protoc_insertion_point(field_mutable:TP.SectionSelectionTransformerArchive.storage_uuid_path)
  return _internal_mutable_storage_uuid_path();
}
inline void SectionSelectionTransformerArchive::set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  if (storage_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path)->GetArena();
    if (message_arena != submessage_arena) {
      storage_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_uuid_path_ = storage_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionSelectionTransformerArchive.storage_uuid_path)
}

// repeated .TSP.UUIDPath section_uuid_paths = 3;
inline int SectionSelectionTransformerArchive::_internal_section_uuid_paths_size() const {
  return section_uuid_paths_.size();
}
inline int SectionSelectionTransformerArchive::section_uuid_paths_size() const {
  return _internal_section_uuid_paths_size();
}
inline ::TSP::UUIDPath* SectionSelectionTransformerArchive::mutable_section_uuid_paths(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionSelectionTransformerArchive.section_uuid_paths)
  return section_uuid_paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
SectionSelectionTransformerArchive::mutable_section_uuid_paths() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionSelectionTransformerArchive.section_uuid_paths)
  return &section_uuid_paths_;
}
inline const ::TSP::UUIDPath& SectionSelectionTransformerArchive::_internal_section_uuid_paths(int index) const {
  return section_uuid_paths_.Get(index);
}
inline const ::TSP::UUIDPath& SectionSelectionTransformerArchive::section_uuid_paths(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionSelectionTransformerArchive.section_uuid_paths)
  return _internal_section_uuid_paths(index);
}
inline ::TSP::UUIDPath* SectionSelectionTransformerArchive::_internal_add_section_uuid_paths() {
  return section_uuid_paths_.Add();
}
inline ::TSP::UUIDPath* SectionSelectionTransformerArchive::add_section_uuid_paths() {
  // @@protoc_insertion_point(field_add:TP.SectionSelectionTransformerArchive.section_uuid_paths)
  return _internal_add_section_uuid_paths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
SectionSelectionTransformerArchive::section_uuid_paths() const {
  // @@protoc_insertion_point(field_list:TP.SectionSelectionTransformerArchive.section_uuid_paths)
  return section_uuid_paths_;
}

// -------------------------------------------------------------------

// SectionPasteboardObjectArchive_PageDrawables

// required uint32 page_index = 1;
inline bool SectionPasteboardObjectArchive_PageDrawables::_internal_has_page_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SectionPasteboardObjectArchive_PageDrawables::has_page_index() const {
  return _internal_has_page_index();
}
inline void SectionPasteboardObjectArchive_PageDrawables::clear_page_index() {
  page_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionPasteboardObjectArchive_PageDrawables::_internal_page_index() const {
  return page_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionPasteboardObjectArchive_PageDrawables::page_index() const {
  // @@protoc_insertion_point(field_get:TP.SectionPasteboardObjectArchive.PageDrawables.page_index)
  return _internal_page_index();
}
inline void SectionPasteboardObjectArchive_PageDrawables::_internal_set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  page_index_ = value;
}
inline void SectionPasteboardObjectArchive_PageDrawables::set_page_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_index(value);
  // @@protoc_insertion_point(field_set:TP.SectionPasteboardObjectArchive.PageDrawables.page_index)
}

// required .TP.DrawableTagPairsArchive drawable_tag_pairs = 2;
inline bool SectionPasteboardObjectArchive_PageDrawables::_internal_has_drawable_tag_pairs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || drawable_tag_pairs_ != nullptr);
  return value;
}
inline bool SectionPasteboardObjectArchive_PageDrawables::has_drawable_tag_pairs() const {
  return _internal_has_drawable_tag_pairs();
}
inline void SectionPasteboardObjectArchive_PageDrawables::clear_drawable_tag_pairs() {
  if (drawable_tag_pairs_ != nullptr) drawable_tag_pairs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TP::DrawableTagPairsArchive& SectionPasteboardObjectArchive_PageDrawables::_internal_drawable_tag_pairs() const {
  const ::TP::DrawableTagPairsArchive* p = drawable_tag_pairs_;
  return p != nullptr ? *p : reinterpret_cast<const ::TP::DrawableTagPairsArchive&>(
      ::TP::_DrawableTagPairsArchive_default_instance_);
}
inline const ::TP::DrawableTagPairsArchive& SectionPasteboardObjectArchive_PageDrawables::drawable_tag_pairs() const {
  // @@protoc_insertion_point(field_get:TP.SectionPasteboardObjectArchive.PageDrawables.drawable_tag_pairs)
  return _internal_drawable_tag_pairs();
}
inline void SectionPasteboardObjectArchive_PageDrawables::unsafe_arena_set_allocated_drawable_tag_pairs(
    ::TP::DrawableTagPairsArchive* drawable_tag_pairs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_tag_pairs_);
  }
  drawable_tag_pairs_ = drawable_tag_pairs;
  if (drawable_tag_pairs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionPasteboardObjectArchive.PageDrawables.drawable_tag_pairs)
}
inline ::TP::DrawableTagPairsArchive* SectionPasteboardObjectArchive_PageDrawables::release_drawable_tag_pairs() {
  _has_bits_[0] &= ~0x00000001u;
  ::TP::DrawableTagPairsArchive* temp = drawable_tag_pairs_;
  drawable_tag_pairs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TP::DrawableTagPairsArchive* SectionPasteboardObjectArchive_PageDrawables::unsafe_arena_release_drawable_tag_pairs() {
  // @@protoc_insertion_point(field_release:TP.SectionPasteboardObjectArchive.PageDrawables.drawable_tag_pairs)
  _has_bits_[0] &= ~0x00000001u;
  ::TP::DrawableTagPairsArchive* temp = drawable_tag_pairs_;
  drawable_tag_pairs_ = nullptr;
  return temp;
}
inline ::TP::DrawableTagPairsArchive* SectionPasteboardObjectArchive_PageDrawables::_internal_mutable_drawable_tag_pairs() {
  _has_bits_[0] |= 0x00000001u;
  if (drawable_tag_pairs_ == nullptr) {
    auto* p = CreateMaybeMessage<::TP::DrawableTagPairsArchive>(GetArena());
    drawable_tag_pairs_ = p;
  }
  return drawable_tag_pairs_;
}
inline ::TP::DrawableTagPairsArchive* SectionPasteboardObjectArchive_PageDrawables::mutable_drawable_tag_pairs() {
  // @@protoc_insertion_point(field_mutable:TP.SectionPasteboardObjectArchive.PageDrawables.drawable_tag_pairs)
  return _internal_mutable_drawable_tag_pairs();
}
inline void SectionPasteboardObjectArchive_PageDrawables::set_allocated_drawable_tag_pairs(::TP::DrawableTagPairsArchive* drawable_tag_pairs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete drawable_tag_pairs_;
  }
  if (drawable_tag_pairs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(drawable_tag_pairs);
    if (message_arena != submessage_arena) {
      drawable_tag_pairs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable_tag_pairs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  drawable_tag_pairs_ = drawable_tag_pairs;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionPasteboardObjectArchive.PageDrawables.drawable_tag_pairs)
}

// -------------------------------------------------------------------

// SectionPasteboardObjectArchive

// required .TSP.Reference text_storage = 1;
inline bool SectionPasteboardObjectArchive::_internal_has_text_storage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || text_storage_ != nullptr);
  return value;
}
inline bool SectionPasteboardObjectArchive::has_text_storage() const {
  return _internal_has_text_storage();
}
inline const ::TSP::Reference& SectionPasteboardObjectArchive::_internal_text_storage() const {
  const ::TSP::Reference* p = text_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SectionPasteboardObjectArchive::text_storage() const {
  // @@protoc_insertion_point(field_get:TP.SectionPasteboardObjectArchive.text_storage)
  return _internal_text_storage();
}
inline void SectionPasteboardObjectArchive::unsafe_arena_set_allocated_text_storage(
    ::TSP::Reference* text_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_storage_);
  }
  text_storage_ = text_storage;
  if (text_storage) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionPasteboardObjectArchive.text_storage)
}
inline ::TSP::Reference* SectionPasteboardObjectArchive::release_text_storage() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = text_storage_;
  text_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SectionPasteboardObjectArchive::unsafe_arena_release_text_storage() {
  // @@protoc_insertion_point(field_release:TP.SectionPasteboardObjectArchive.text_storage)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = text_storage_;
  text_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SectionPasteboardObjectArchive::_internal_mutable_text_storage() {
  _has_bits_[0] |= 0x00000001u;
  if (text_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    text_storage_ = p;
  }
  return text_storage_;
}
inline ::TSP::Reference* SectionPasteboardObjectArchive::mutable_text_storage() {
  // @@protoc_insertion_point(field_mutable:TP.SectionPasteboardObjectArchive.text_storage)
  return _internal_mutable_text_storage();
}
inline void SectionPasteboardObjectArchive::set_allocated_text_storage(::TSP::Reference* text_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_storage_);
  }
  if (text_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_storage)->GetArena();
    if (message_arena != submessage_arena) {
      text_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_storage_ = text_storage;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionPasteboardObjectArchive.text_storage)
}

// required uint32 page_count = 2;
inline bool SectionPasteboardObjectArchive::_internal_has_page_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SectionPasteboardObjectArchive::has_page_count() const {
  return _internal_has_page_count();
}
inline void SectionPasteboardObjectArchive::clear_page_count() {
  page_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionPasteboardObjectArchive::_internal_page_count() const {
  return page_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectionPasteboardObjectArchive::page_count() const {
  // @@protoc_insertion_point(field_get:TP.SectionPasteboardObjectArchive.page_count)
  return _internal_page_count();
}
inline void SectionPasteboardObjectArchive::_internal_set_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  page_count_ = value;
}
inline void SectionPasteboardObjectArchive::set_page_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_count(value);
  // @@protoc_insertion_point(field_set:TP.SectionPasteboardObjectArchive.page_count)
}

// repeated .TP.SectionPasteboardObjectArchive.PageDrawables page_drawables = 3;
inline int SectionPasteboardObjectArchive::_internal_page_drawables_size() const {
  return page_drawables_.size();
}
inline int SectionPasteboardObjectArchive::page_drawables_size() const {
  return _internal_page_drawables_size();
}
inline void SectionPasteboardObjectArchive::clear_page_drawables() {
  page_drawables_.Clear();
}
inline ::TP::SectionPasteboardObjectArchive_PageDrawables* SectionPasteboardObjectArchive::mutable_page_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionPasteboardObjectArchive.page_drawables)
  return page_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionPasteboardObjectArchive_PageDrawables >*
SectionPasteboardObjectArchive::mutable_page_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionPasteboardObjectArchive.page_drawables)
  return &page_drawables_;
}
inline const ::TP::SectionPasteboardObjectArchive_PageDrawables& SectionPasteboardObjectArchive::_internal_page_drawables(int index) const {
  return page_drawables_.Get(index);
}
inline const ::TP::SectionPasteboardObjectArchive_PageDrawables& SectionPasteboardObjectArchive::page_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionPasteboardObjectArchive.page_drawables)
  return _internal_page_drawables(index);
}
inline ::TP::SectionPasteboardObjectArchive_PageDrawables* SectionPasteboardObjectArchive::_internal_add_page_drawables() {
  return page_drawables_.Add();
}
inline ::TP::SectionPasteboardObjectArchive_PageDrawables* SectionPasteboardObjectArchive::add_page_drawables() {
  // @@protoc_insertion_point(field_add:TP.SectionPasteboardObjectArchive.page_drawables)
  return _internal_add_page_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionPasteboardObjectArchive_PageDrawables >&
SectionPasteboardObjectArchive::page_drawables() const {
  // @@protoc_insertion_point(field_list:TP.SectionPasteboardObjectArchive.page_drawables)
  return page_drawables_;
}

// repeated .TSP.Reference ordered_drawables = 4;
inline int SectionPasteboardObjectArchive::_internal_ordered_drawables_size() const {
  return ordered_drawables_.size();
}
inline int SectionPasteboardObjectArchive::ordered_drawables_size() const {
  return _internal_ordered_drawables_size();
}
inline ::TSP::Reference* SectionPasteboardObjectArchive::mutable_ordered_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionPasteboardObjectArchive.ordered_drawables)
  return ordered_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SectionPasteboardObjectArchive::mutable_ordered_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionPasteboardObjectArchive.ordered_drawables)
  return &ordered_drawables_;
}
inline const ::TSP::Reference& SectionPasteboardObjectArchive::_internal_ordered_drawables(int index) const {
  return ordered_drawables_.Get(index);
}
inline const ::TSP::Reference& SectionPasteboardObjectArchive::ordered_drawables(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionPasteboardObjectArchive.ordered_drawables)
  return _internal_ordered_drawables(index);
}
inline ::TSP::Reference* SectionPasteboardObjectArchive::_internal_add_ordered_drawables() {
  return ordered_drawables_.Add();
}
inline ::TSP::Reference* SectionPasteboardObjectArchive::add_ordered_drawables() {
  // @@protoc_insertion_point(field_add:TP.SectionPasteboardObjectArchive.ordered_drawables)
  return _internal_add_ordered_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SectionPasteboardObjectArchive::ordered_drawables() const {
  // @@protoc_insertion_point(field_list:TP.SectionPasteboardObjectArchive.ordered_drawables)
  return ordered_drawables_;
}

// -------------------------------------------------------------------

// SectionsAppNativeObjectArchive_PageTemplatesEntry

// required .TSP.UUID key = 1;
inline bool SectionsAppNativeObjectArchive_PageTemplatesEntry::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || key_ != nullptr);
  return value;
}
inline bool SectionsAppNativeObjectArchive_PageTemplatesEntry::has_key() const {
  return _internal_has_key();
}
inline const ::TSP::UUID& SectionsAppNativeObjectArchive_PageTemplatesEntry::_internal_key() const {
  const ::TSP::UUID* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& SectionsAppNativeObjectArchive_PageTemplatesEntry::key() const {
  // @@protoc_insertion_point(field_get:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry.key)
  return _internal_key();
}
inline void SectionsAppNativeObjectArchive_PageTemplatesEntry::unsafe_arena_set_allocated_key(
    ::TSP::UUID* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry.key)
}
inline ::TSP::UUID* SectionsAppNativeObjectArchive_PageTemplatesEntry::release_key() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = key_;
  key_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* SectionsAppNativeObjectArchive_PageTemplatesEntry::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry.key)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::TSP::UUID* SectionsAppNativeObjectArchive_PageTemplatesEntry::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::TSP::UUID* SectionsAppNativeObjectArchive_PageTemplatesEntry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry.key)
  return _internal_mutable_key();
}
inline void SectionsAppNativeObjectArchive_PageTemplatesEntry::set_allocated_key(::TSP::UUID* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key)->GetArena();
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry.key)
}

// required .TSP.Reference value = 2;
inline bool SectionsAppNativeObjectArchive_PageTemplatesEntry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool SectionsAppNativeObjectArchive_PageTemplatesEntry::has_value() const {
  return _internal_has_value();
}
inline const ::TSP::Reference& SectionsAppNativeObjectArchive_PageTemplatesEntry::_internal_value() const {
  const ::TSP::Reference* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SectionsAppNativeObjectArchive_PageTemplatesEntry::value() const {
  // @@protoc_insertion_point(field_get:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry.value)
  return _internal_value();
}
inline void SectionsAppNativeObjectArchive_PageTemplatesEntry::unsafe_arena_set_allocated_value(
    ::TSP::Reference* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry.value)
}
inline ::TSP::Reference* SectionsAppNativeObjectArchive_PageTemplatesEntry::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SectionsAppNativeObjectArchive_PageTemplatesEntry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry.value)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SectionsAppNativeObjectArchive_PageTemplatesEntry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::TSP::Reference* SectionsAppNativeObjectArchive_PageTemplatesEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry.value)
  return _internal_mutable_value();
}
inline void SectionsAppNativeObjectArchive_PageTemplatesEntry::set_allocated_value(::TSP::Reference* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:TP.SectionsAppNativeObjectArchive.PageTemplatesEntry.value)
}

// -------------------------------------------------------------------

// SectionsAppNativeObjectArchive

// repeated .TSP.Reference section_pasteboard_objects = 1;
inline int SectionsAppNativeObjectArchive::_internal_section_pasteboard_objects_size() const {
  return section_pasteboard_objects_.size();
}
inline int SectionsAppNativeObjectArchive::section_pasteboard_objects_size() const {
  return _internal_section_pasteboard_objects_size();
}
inline ::TSP::Reference* SectionsAppNativeObjectArchive::mutable_section_pasteboard_objects(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionsAppNativeObjectArchive.section_pasteboard_objects)
  return section_pasteboard_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SectionsAppNativeObjectArchive::mutable_section_pasteboard_objects() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionsAppNativeObjectArchive.section_pasteboard_objects)
  return &section_pasteboard_objects_;
}
inline const ::TSP::Reference& SectionsAppNativeObjectArchive::_internal_section_pasteboard_objects(int index) const {
  return section_pasteboard_objects_.Get(index);
}
inline const ::TSP::Reference& SectionsAppNativeObjectArchive::section_pasteboard_objects(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionsAppNativeObjectArchive.section_pasteboard_objects)
  return _internal_section_pasteboard_objects(index);
}
inline ::TSP::Reference* SectionsAppNativeObjectArchive::_internal_add_section_pasteboard_objects() {
  return section_pasteboard_objects_.Add();
}
inline ::TSP::Reference* SectionsAppNativeObjectArchive::add_section_pasteboard_objects() {
  // @@protoc_insertion_point(field_add:TP.SectionsAppNativeObjectArchive.section_pasteboard_objects)
  return _internal_add_section_pasteboard_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SectionsAppNativeObjectArchive::section_pasteboard_objects() const {
  // @@protoc_insertion_point(field_list:TP.SectionsAppNativeObjectArchive.section_pasteboard_objects)
  return section_pasteboard_objects_;
}

// repeated .TP.SectionsAppNativeObjectArchive.PageTemplatesEntry page_templates = 2;
inline int SectionsAppNativeObjectArchive::_internal_page_templates_size() const {
  return page_templates_.size();
}
inline int SectionsAppNativeObjectArchive::page_templates_size() const {
  return _internal_page_templates_size();
}
inline void SectionsAppNativeObjectArchive::clear_page_templates() {
  page_templates_.Clear();
}
inline ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry* SectionsAppNativeObjectArchive::mutable_page_templates(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionsAppNativeObjectArchive.page_templates)
  return page_templates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry >*
SectionsAppNativeObjectArchive::mutable_page_templates() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionsAppNativeObjectArchive.page_templates)
  return &page_templates_;
}
inline const ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry& SectionsAppNativeObjectArchive::_internal_page_templates(int index) const {
  return page_templates_.Get(index);
}
inline const ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry& SectionsAppNativeObjectArchive::page_templates(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionsAppNativeObjectArchive.page_templates)
  return _internal_page_templates(index);
}
inline ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry* SectionsAppNativeObjectArchive::_internal_add_page_templates() {
  return page_templates_.Add();
}
inline ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry* SectionsAppNativeObjectArchive::add_page_templates() {
  // @@protoc_insertion_point(field_add:TP.SectionsAppNativeObjectArchive.page_templates)
  return _internal_add_page_templates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TP::SectionsAppNativeObjectArchive_PageTemplatesEntry >&
SectionsAppNativeObjectArchive::page_templates() const {
  // @@protoc_insertion_point(field_list:TP.SectionsAppNativeObjectArchive.page_templates)
  return page_templates_;
}

// repeated .TSP.Reference flows = 3;
inline int SectionsAppNativeObjectArchive::_internal_flows_size() const {
  return flows_.size();
}
inline int SectionsAppNativeObjectArchive::flows_size() const {
  return _internal_flows_size();
}
inline ::TSP::Reference* SectionsAppNativeObjectArchive::mutable_flows(int index) {
  // @@protoc_insertion_point(field_mutable:TP.SectionsAppNativeObjectArchive.flows)
  return flows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SectionsAppNativeObjectArchive::mutable_flows() {
  // @@protoc_insertion_point(field_mutable_list:TP.SectionsAppNativeObjectArchive.flows)
  return &flows_;
}
inline const ::TSP::Reference& SectionsAppNativeObjectArchive::_internal_flows(int index) const {
  return flows_.Get(index);
}
inline const ::TSP::Reference& SectionsAppNativeObjectArchive::flows(int index) const {
  // @@protoc_insertion_point(field_get:TP.SectionsAppNativeObjectArchive.flows)
  return _internal_flows(index);
}
inline ::TSP::Reference* SectionsAppNativeObjectArchive::_internal_add_flows() {
  return flows_.Add();
}
inline ::TSP::Reference* SectionsAppNativeObjectArchive::add_flows() {
  // @@protoc_insertion_point(field_add:TP.SectionsAppNativeObjectArchive.flows)
  return _internal_add_flows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SectionsAppNativeObjectArchive::flows() const {
  // @@protoc_insertion_point(field_list:TP.SectionsAppNativeObjectArchive.flows)
  return flows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TP

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TP::SettingsArchive_FootnoteKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::SettingsArchive_FootnoteKind>() {
  return ::TP::SettingsArchive_FootnoteKind_descriptor();
}
template <> struct is_proto_enum< ::TP::SettingsArchive_FootnoteFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::SettingsArchive_FootnoteFormat>() {
  return ::TP::SettingsArchive_FootnoteFormat_descriptor();
}
template <> struct is_proto_enum< ::TP::SettingsArchive_FootnoteNumbering> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::SettingsArchive_FootnoteNumbering>() {
  return ::TP::SettingsArchive_FootnoteNumbering_descriptor();
}
template <> struct is_proto_enum< ::TP::PageHintArchive_PageKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::PageHintArchive_PageKind>() {
  return ::TP::PageHintArchive_PageKind_descriptor();
}
template <> struct is_proto_enum< ::TP::PageHintArchive_PageSide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::PageHintArchive_PageSide>() {
  return ::TP::PageHintArchive_PageSide_descriptor();
}
template <> struct is_proto_enum< ::TP::ViewScaleMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::ViewScaleMode>() {
  return ::TP::ViewScaleMode_descriptor();
}
template <> struct is_proto_enum< ::TP::ViewScaleModeiOS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::ViewScaleModeiOS>() {
  return ::TP::ViewScaleModeiOS_descriptor();
}
template <> struct is_proto_enum< ::TP::PageViewState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TP::PageViewState>() {
  return ::TP::PageViewState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TPArchives_2eproto
