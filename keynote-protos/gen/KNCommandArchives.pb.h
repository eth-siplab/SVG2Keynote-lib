// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KNCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KNCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSDCommandArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSAArchives.pb.h"
#include "TSTArchives.pb.h"
#include "KNArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KNCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KNCommandArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[61]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KNCommandArchives_2eproto;
namespace KN {
class ActionGhostSelectionTransformerArchive;
struct ActionGhostSelectionTransformerArchiveDefaultTypeInternal;
extern ActionGhostSelectionTransformerArchiveDefaultTypeInternal _ActionGhostSelectionTransformerArchive_default_instance_;
class CanvasSelectionTransformerArchive;
struct CanvasSelectionTransformerArchiveDefaultTypeInternal;
extern CanvasSelectionTransformerArchiveDefaultTypeInternal _CanvasSelectionTransformerArchive_default_instance_;
class ChartInfoGeometryCommandArchive;
struct ChartInfoGeometryCommandArchiveDefaultTypeInternal;
extern ChartInfoGeometryCommandArchiveDefaultTypeInternal _ChartInfoGeometryCommandArchive_default_instance_;
class CommandBuildChunkSetValueArchive;
struct CommandBuildChunkSetValueArchiveDefaultTypeInternal;
extern CommandBuildChunkSetValueArchiveDefaultTypeInternal _CommandBuildChunkSetValueArchive_default_instance_;
class CommandBuildSetValueArchive;
struct CommandBuildSetValueArchiveDefaultTypeInternal;
extern CommandBuildSetValueArchiveDefaultTypeInternal _CommandBuildSetValueArchive_default_instance_;
class CommandBuildUpdateChunkCountArchive;
struct CommandBuildUpdateChunkCountArchiveDefaultTypeInternal;
extern CommandBuildUpdateChunkCountArchiveDefaultTypeInternal _CommandBuildUpdateChunkCountArchive_default_instance_;
class CommandBuildUpdateChunkReferentsArchive;
struct CommandBuildUpdateChunkReferentsArchiveDefaultTypeInternal;
extern CommandBuildUpdateChunkReferentsArchiveDefaultTypeInternal _CommandBuildUpdateChunkReferentsArchive_default_instance_;
class CommandChangeTemplateSlideArchive;
struct CommandChangeTemplateSlideArchiveDefaultTypeInternal;
extern CommandChangeTemplateSlideArchiveDefaultTypeInternal _CommandChangeTemplateSlideArchive_default_instance_;
class CommandInsertTemplateArchive;
struct CommandInsertTemplateArchiveDefaultTypeInternal;
extern CommandInsertTemplateArchiveDefaultTypeInternal _CommandInsertTemplateArchive_default_instance_;
class CommandMoveTemplatesArchive;
struct CommandMoveTemplatesArchiveDefaultTypeInternal;
extern CommandMoveTemplatesArchiveDefaultTypeInternal _CommandMoveTemplatesArchive_default_instance_;
class CommandPrimitiveInsertTemplateArchive;
struct CommandPrimitiveInsertTemplateArchiveDefaultTypeInternal;
extern CommandPrimitiveInsertTemplateArchiveDefaultTypeInternal _CommandPrimitiveInsertTemplateArchive_default_instance_;
class CommandPrimitiveRemoveTemplateArchive;
struct CommandPrimitiveRemoveTemplateArchiveDefaultTypeInternal;
extern CommandPrimitiveRemoveTemplateArchiveDefaultTypeInternal _CommandPrimitiveRemoveTemplateArchive_default_instance_;
class CommandRemoveTemplateArchive;
struct CommandRemoveTemplateArchiveDefaultTypeInternal;
extern CommandRemoveTemplateArchiveDefaultTypeInternal _CommandRemoveTemplateArchive_default_instance_;
class CommandSetThemeCustomEffectTimingCurveArchive;
struct CommandSetThemeCustomEffectTimingCurveArchiveDefaultTypeInternal;
extern CommandSetThemeCustomEffectTimingCurveArchiveDefaultTypeInternal _CommandSetThemeCustomEffectTimingCurveArchive_default_instance_;
class CommandShowChangeSlideSizeArchive;
struct CommandShowChangeSlideSizeArchiveDefaultTypeInternal;
extern CommandShowChangeSlideSizeArchiveDefaultTypeInternal _CommandShowChangeSlideSizeArchive_default_instance_;
class CommandShowChangeThemeArchive;
struct CommandShowChangeThemeArchiveDefaultTypeInternal;
extern CommandShowChangeThemeArchiveDefaultTypeInternal _CommandShowChangeThemeArchive_default_instance_;
class CommandShowChangeThemeArchive_IdentifierToStyleMap;
struct CommandShowChangeThemeArchive_IdentifierToStyleMapDefaultTypeInternal;
extern CommandShowChangeThemeArchive_IdentifierToStyleMapDefaultTypeInternal _CommandShowChangeThemeArchive_IdentifierToStyleMap_default_instance_;
class CommandShowInsertSlideArchive;
struct CommandShowInsertSlideArchiveDefaultTypeInternal;
extern CommandShowInsertSlideArchiveDefaultTypeInternal _CommandShowInsertSlideArchive_default_instance_;
class CommandShowMarkOutOfSyncRecordingArchive;
struct CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal;
extern CommandShowMarkOutOfSyncRecordingArchiveDefaultTypeInternal _CommandShowMarkOutOfSyncRecordingArchive_default_instance_;
class CommandShowMarkOutOfSyncRecordingIfNeededArchive;
struct CommandShowMarkOutOfSyncRecordingIfNeededArchiveDefaultTypeInternal;
extern CommandShowMarkOutOfSyncRecordingIfNeededArchiveDefaultTypeInternal _CommandShowMarkOutOfSyncRecordingIfNeededArchive_default_instance_;
class CommandShowMoveSlideArchive;
struct CommandShowMoveSlideArchiveDefaultTypeInternal;
extern CommandShowMoveSlideArchiveDefaultTypeInternal _CommandShowMoveSlideArchive_default_instance_;
class CommandShowRemoveRecordingArchive;
struct CommandShowRemoveRecordingArchiveDefaultTypeInternal;
extern CommandShowRemoveRecordingArchiveDefaultTypeInternal _CommandShowRemoveRecordingArchive_default_instance_;
class CommandShowRemoveSlideArchive;
struct CommandShowRemoveSlideArchiveDefaultTypeInternal;
extern CommandShowRemoveSlideArchiveDefaultTypeInternal _CommandShowRemoveSlideArchive_default_instance_;
class CommandShowReplaceRecordingArchive;
struct CommandShowReplaceRecordingArchiveDefaultTypeInternal;
extern CommandShowReplaceRecordingArchiveDefaultTypeInternal _CommandShowReplaceRecordingArchive_default_instance_;
class CommandShowSetSlideNumberVisibilityArchive;
struct CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal;
extern CommandShowSetSlideNumberVisibilityArchiveDefaultTypeInternal _CommandShowSetSlideNumberVisibilityArchive_default_instance_;
class CommandShowSetSoundtrack;
struct CommandShowSetSoundtrackDefaultTypeInternal;
extern CommandShowSetSoundtrackDefaultTypeInternal _CommandShowSetSoundtrack_default_instance_;
class CommandShowSetValueArchive;
struct CommandShowSetValueArchiveDefaultTypeInternal;
extern CommandShowSetValueArchiveDefaultTypeInternal _CommandShowSetValueArchive_default_instance_;
class CommandShowSetValueArchive_PropertyValue;
struct CommandShowSetValueArchive_PropertyValueDefaultTypeInternal;
extern CommandShowSetValueArchive_PropertyValueDefaultTypeInternal _CommandShowSetValueArchive_PropertyValue_default_instance_;
class CommandSlideInsertBuildArchive;
struct CommandSlideInsertBuildArchiveDefaultTypeInternal;
extern CommandSlideInsertBuildArchiveDefaultTypeInternal _CommandSlideInsertBuildArchive_default_instance_;
class CommandSlideInsertBuildChunkArchive;
struct CommandSlideInsertBuildChunkArchiveDefaultTypeInternal;
extern CommandSlideInsertBuildChunkArchiveDefaultTypeInternal _CommandSlideInsertBuildChunkArchive_default_instance_;
class CommandSlideInsertDrawablesArchive;
struct CommandSlideInsertDrawablesArchiveDefaultTypeInternal;
extern CommandSlideInsertDrawablesArchiveDefaultTypeInternal _CommandSlideInsertDrawablesArchive_default_instance_;
class CommandSlideMoveBuildChunksArchive;
struct CommandSlideMoveBuildChunksArchiveDefaultTypeInternal;
extern CommandSlideMoveBuildChunksArchiveDefaultTypeInternal _CommandSlideMoveBuildChunksArchive_default_instance_;
class CommandSlideMoveDrawableZOrderArchive;
struct CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal;
extern CommandSlideMoveDrawableZOrderArchiveDefaultTypeInternal _CommandSlideMoveDrawableZOrderArchive_default_instance_;
class CommandSlideNodeSetPropertyArchive;
struct CommandSlideNodeSetPropertyArchiveDefaultTypeInternal;
extern CommandSlideNodeSetPropertyArchiveDefaultTypeInternal _CommandSlideNodeSetPropertyArchive_default_instance_;
class CommandSlideNodeSetViewStatePropertyArchive;
struct CommandSlideNodeSetViewStatePropertyArchiveDefaultTypeInternal;
extern CommandSlideNodeSetViewStatePropertyArchiveDefaultTypeInternal _CommandSlideNodeSetViewStatePropertyArchive_default_instance_;
class CommandSlidePrimitiveSetTemplateArchive;
struct CommandSlidePrimitiveSetTemplateArchiveDefaultTypeInternal;
extern CommandSlidePrimitiveSetTemplateArchiveDefaultTypeInternal _CommandSlidePrimitiveSetTemplateArchive_default_instance_;
class CommandSlidePropagateSetPlaceholderForTagArchive;
struct CommandSlidePropagateSetPlaceholderForTagArchiveDefaultTypeInternal;
extern CommandSlidePropagateSetPlaceholderForTagArchiveDefaultTypeInternal _CommandSlidePropagateSetPlaceholderForTagArchive_default_instance_;
class CommandSlideRemoveBuildArchive;
struct CommandSlideRemoveBuildArchiveDefaultTypeInternal;
extern CommandSlideRemoveBuildArchiveDefaultTypeInternal _CommandSlideRemoveBuildArchive_default_instance_;
class CommandSlideRemoveBuildChunkArchive;
struct CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal;
extern CommandSlideRemoveBuildChunkArchiveDefaultTypeInternal _CommandSlideRemoveBuildChunkArchive_default_instance_;
class CommandSlideRemoveDrawableArchive;
struct CommandSlideRemoveDrawableArchiveDefaultTypeInternal;
extern CommandSlideRemoveDrawableArchiveDefaultTypeInternal _CommandSlideRemoveDrawableArchive_default_instance_;
class CommandSlideResetTemplateBackgroundObjectsArchive;
struct CommandSlideResetTemplateBackgroundObjectsArchiveDefaultTypeInternal;
extern CommandSlideResetTemplateBackgroundObjectsArchiveDefaultTypeInternal _CommandSlideResetTemplateBackgroundObjectsArchive_default_instance_;
class CommandSlideSetBackgroundFillArchive;
struct CommandSlideSetBackgroundFillArchiveDefaultTypeInternal;
extern CommandSlideSetBackgroundFillArchiveDefaultTypeInternal _CommandSlideSetBackgroundFillArchive_default_instance_;
class CommandSlideSetPlaceholdersForTagsArchive;
struct CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal;
extern CommandSlideSetPlaceholdersForTagsArchiveDefaultTypeInternal _CommandSlideSetPlaceholdersForTagsArchive_default_instance_;
class CommandSlideSetStyleArchive;
struct CommandSlideSetStyleArchiveDefaultTypeInternal;
extern CommandSlideSetStyleArchiveDefaultTypeInternal _CommandSlideSetStyleArchive_default_instance_;
class CommandSlideUpdateTemplateDrawables;
struct CommandSlideUpdateTemplateDrawablesDefaultTypeInternal;
extern CommandSlideUpdateTemplateDrawablesDefaultTypeInternal _CommandSlideUpdateTemplateDrawables_default_instance_;
class CommandSoundtrackSetValue;
struct CommandSoundtrackSetValueDefaultTypeInternal;
extern CommandSoundtrackSetValueDefaultTypeInternal _CommandSoundtrackSetValue_default_instance_;
class CommandSoundtrackSetValue_PropertyValue;
struct CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal;
extern CommandSoundtrackSetValue_PropertyValueDefaultTypeInternal _CommandSoundtrackSetValue_PropertyValue_default_instance_;
class CommandTemplateSetBodyStylesArchive;
struct CommandTemplateSetBodyStylesArchiveDefaultTypeInternal;
extern CommandTemplateSetBodyStylesArchiveDefaultTypeInternal _CommandTemplateSetBodyStylesArchive_default_instance_;
class CommandTemplateSetThumbnailTextArchive;
struct CommandTemplateSetThumbnailTextArchiveDefaultTypeInternal;
extern CommandTemplateSetThumbnailTextArchiveDefaultTypeInternal _CommandTemplateSetThumbnailTextArchive_default_instance_;
class CommandTemplateSlideSetPlaceholderForTagArchive;
struct CommandTemplateSlideSetPlaceholderForTagArchiveDefaultTypeInternal;
extern CommandTemplateSlideSetPlaceholderForTagArchiveDefaultTypeInternal _CommandTemplateSlideSetPlaceholderForTagArchive_default_instance_;
class CommandTransitionSetValueArchive;
struct CommandTransitionSetValueArchiveDefaultTypeInternal;
extern CommandTransitionSetValueArchiveDefaultTypeInternal _CommandTransitionSetValueArchive_default_instance_;
class DocumentSelectionTransformerArchive;
struct DocumentSelectionTransformerArchiveDefaultTypeInternal;
extern DocumentSelectionTransformerArchiveDefaultTypeInternal _DocumentSelectionTransformerArchive_default_instance_;
class InsertBuildDescriptionArchive;
struct InsertBuildDescriptionArchiveDefaultTypeInternal;
extern InsertBuildDescriptionArchiveDefaultTypeInternal _InsertBuildDescriptionArchive_default_instance_;
class NoteCanvasSelectionTransformerArchive;
struct NoteCanvasSelectionTransformerArchiveDefaultTypeInternal;
extern NoteCanvasSelectionTransformerArchiveDefaultTypeInternal _NoteCanvasSelectionTransformerArchive_default_instance_;
class OutlineCanvasSelectionTransformerArchive;
struct OutlineCanvasSelectionTransformerArchiveDefaultTypeInternal;
extern OutlineCanvasSelectionTransformerArchiveDefaultTypeInternal _OutlineCanvasSelectionTransformerArchive_default_instance_;
class OutlineSelectionTransformerArchive;
struct OutlineSelectionTransformerArchiveDefaultTypeInternal;
extern OutlineSelectionTransformerArchiveDefaultTypeInternal _OutlineSelectionTransformerArchive_default_instance_;
class RemoveBuildDescriptionArchive;
struct RemoveBuildDescriptionArchiveDefaultTypeInternal;
extern RemoveBuildDescriptionArchiveDefaultTypeInternal _RemoveBuildDescriptionArchive_default_instance_;
class SlideCollectionSelectionTransformerArchive;
struct SlideCollectionSelectionTransformerArchiveDefaultTypeInternal;
extern SlideCollectionSelectionTransformerArchiveDefaultTypeInternal _SlideCollectionSelectionTransformerArchive_default_instance_;
class SlideCollectionSelectionTransformerHelperArchive;
struct SlideCollectionSelectionTransformerHelperArchiveDefaultTypeInternal;
extern SlideCollectionSelectionTransformerHelperArchiveDefaultTypeInternal _SlideCollectionSelectionTransformerHelperArchive_default_instance_;
class UIStateCommandGroupArchive;
struct UIStateCommandGroupArchiveDefaultTypeInternal;
extern UIStateCommandGroupArchiveDefaultTypeInternal _UIStateCommandGroupArchive_default_instance_;
class UndoObjectArchive;
struct UndoObjectArchiveDefaultTypeInternal;
extern UndoObjectArchiveDefaultTypeInternal _UndoObjectArchive_default_instance_;
}  // namespace KN
PROTOBUF_NAMESPACE_OPEN
template<> ::KN::ActionGhostSelectionTransformerArchive* Arena::CreateMaybeMessage<::KN::ActionGhostSelectionTransformerArchive>(Arena*);
template<> ::KN::CanvasSelectionTransformerArchive* Arena::CreateMaybeMessage<::KN::CanvasSelectionTransformerArchive>(Arena*);
template<> ::KN::ChartInfoGeometryCommandArchive* Arena::CreateMaybeMessage<::KN::ChartInfoGeometryCommandArchive>(Arena*);
template<> ::KN::CommandBuildChunkSetValueArchive* Arena::CreateMaybeMessage<::KN::CommandBuildChunkSetValueArchive>(Arena*);
template<> ::KN::CommandBuildSetValueArchive* Arena::CreateMaybeMessage<::KN::CommandBuildSetValueArchive>(Arena*);
template<> ::KN::CommandBuildUpdateChunkCountArchive* Arena::CreateMaybeMessage<::KN::CommandBuildUpdateChunkCountArchive>(Arena*);
template<> ::KN::CommandBuildUpdateChunkReferentsArchive* Arena::CreateMaybeMessage<::KN::CommandBuildUpdateChunkReferentsArchive>(Arena*);
template<> ::KN::CommandChangeTemplateSlideArchive* Arena::CreateMaybeMessage<::KN::CommandChangeTemplateSlideArchive>(Arena*);
template<> ::KN::CommandInsertTemplateArchive* Arena::CreateMaybeMessage<::KN::CommandInsertTemplateArchive>(Arena*);
template<> ::KN::CommandMoveTemplatesArchive* Arena::CreateMaybeMessage<::KN::CommandMoveTemplatesArchive>(Arena*);
template<> ::KN::CommandPrimitiveInsertTemplateArchive* Arena::CreateMaybeMessage<::KN::CommandPrimitiveInsertTemplateArchive>(Arena*);
template<> ::KN::CommandPrimitiveRemoveTemplateArchive* Arena::CreateMaybeMessage<::KN::CommandPrimitiveRemoveTemplateArchive>(Arena*);
template<> ::KN::CommandRemoveTemplateArchive* Arena::CreateMaybeMessage<::KN::CommandRemoveTemplateArchive>(Arena*);
template<> ::KN::CommandSetThemeCustomEffectTimingCurveArchive* Arena::CreateMaybeMessage<::KN::CommandSetThemeCustomEffectTimingCurveArchive>(Arena*);
template<> ::KN::CommandShowChangeSlideSizeArchive* Arena::CreateMaybeMessage<::KN::CommandShowChangeSlideSizeArchive>(Arena*);
template<> ::KN::CommandShowChangeThemeArchive* Arena::CreateMaybeMessage<::KN::CommandShowChangeThemeArchive>(Arena*);
template<> ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* Arena::CreateMaybeMessage<::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap>(Arena*);
template<> ::KN::CommandShowInsertSlideArchive* Arena::CreateMaybeMessage<::KN::CommandShowInsertSlideArchive>(Arena*);
template<> ::KN::CommandShowMarkOutOfSyncRecordingArchive* Arena::CreateMaybeMessage<::KN::CommandShowMarkOutOfSyncRecordingArchive>(Arena*);
template<> ::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive* Arena::CreateMaybeMessage<::KN::CommandShowMarkOutOfSyncRecordingIfNeededArchive>(Arena*);
template<> ::KN::CommandShowMoveSlideArchive* Arena::CreateMaybeMessage<::KN::CommandShowMoveSlideArchive>(Arena*);
template<> ::KN::CommandShowRemoveRecordingArchive* Arena::CreateMaybeMessage<::KN::CommandShowRemoveRecordingArchive>(Arena*);
template<> ::KN::CommandShowRemoveSlideArchive* Arena::CreateMaybeMessage<::KN::CommandShowRemoveSlideArchive>(Arena*);
template<> ::KN::CommandShowReplaceRecordingArchive* Arena::CreateMaybeMessage<::KN::CommandShowReplaceRecordingArchive>(Arena*);
template<> ::KN::CommandShowSetSlideNumberVisibilityArchive* Arena::CreateMaybeMessage<::KN::CommandShowSetSlideNumberVisibilityArchive>(Arena*);
template<> ::KN::CommandShowSetSoundtrack* Arena::CreateMaybeMessage<::KN::CommandShowSetSoundtrack>(Arena*);
template<> ::KN::CommandShowSetValueArchive* Arena::CreateMaybeMessage<::KN::CommandShowSetValueArchive>(Arena*);
template<> ::KN::CommandShowSetValueArchive_PropertyValue* Arena::CreateMaybeMessage<::KN::CommandShowSetValueArchive_PropertyValue>(Arena*);
template<> ::KN::CommandSlideInsertBuildArchive* Arena::CreateMaybeMessage<::KN::CommandSlideInsertBuildArchive>(Arena*);
template<> ::KN::CommandSlideInsertBuildChunkArchive* Arena::CreateMaybeMessage<::KN::CommandSlideInsertBuildChunkArchive>(Arena*);
template<> ::KN::CommandSlideInsertDrawablesArchive* Arena::CreateMaybeMessage<::KN::CommandSlideInsertDrawablesArchive>(Arena*);
template<> ::KN::CommandSlideMoveBuildChunksArchive* Arena::CreateMaybeMessage<::KN::CommandSlideMoveBuildChunksArchive>(Arena*);
template<> ::KN::CommandSlideMoveDrawableZOrderArchive* Arena::CreateMaybeMessage<::KN::CommandSlideMoveDrawableZOrderArchive>(Arena*);
template<> ::KN::CommandSlideNodeSetPropertyArchive* Arena::CreateMaybeMessage<::KN::CommandSlideNodeSetPropertyArchive>(Arena*);
template<> ::KN::CommandSlideNodeSetViewStatePropertyArchive* Arena::CreateMaybeMessage<::KN::CommandSlideNodeSetViewStatePropertyArchive>(Arena*);
template<> ::KN::CommandSlidePrimitiveSetTemplateArchive* Arena::CreateMaybeMessage<::KN::CommandSlidePrimitiveSetTemplateArchive>(Arena*);
template<> ::KN::CommandSlidePropagateSetPlaceholderForTagArchive* Arena::CreateMaybeMessage<::KN::CommandSlidePropagateSetPlaceholderForTagArchive>(Arena*);
template<> ::KN::CommandSlideRemoveBuildArchive* Arena::CreateMaybeMessage<::KN::CommandSlideRemoveBuildArchive>(Arena*);
template<> ::KN::CommandSlideRemoveBuildChunkArchive* Arena::CreateMaybeMessage<::KN::CommandSlideRemoveBuildChunkArchive>(Arena*);
template<> ::KN::CommandSlideRemoveDrawableArchive* Arena::CreateMaybeMessage<::KN::CommandSlideRemoveDrawableArchive>(Arena*);
template<> ::KN::CommandSlideResetTemplateBackgroundObjectsArchive* Arena::CreateMaybeMessage<::KN::CommandSlideResetTemplateBackgroundObjectsArchive>(Arena*);
template<> ::KN::CommandSlideSetBackgroundFillArchive* Arena::CreateMaybeMessage<::KN::CommandSlideSetBackgroundFillArchive>(Arena*);
template<> ::KN::CommandSlideSetPlaceholdersForTagsArchive* Arena::CreateMaybeMessage<::KN::CommandSlideSetPlaceholdersForTagsArchive>(Arena*);
template<> ::KN::CommandSlideSetStyleArchive* Arena::CreateMaybeMessage<::KN::CommandSlideSetStyleArchive>(Arena*);
template<> ::KN::CommandSlideUpdateTemplateDrawables* Arena::CreateMaybeMessage<::KN::CommandSlideUpdateTemplateDrawables>(Arena*);
template<> ::KN::CommandSoundtrackSetValue* Arena::CreateMaybeMessage<::KN::CommandSoundtrackSetValue>(Arena*);
template<> ::KN::CommandSoundtrackSetValue_PropertyValue* Arena::CreateMaybeMessage<::KN::CommandSoundtrackSetValue_PropertyValue>(Arena*);
template<> ::KN::CommandTemplateSetBodyStylesArchive* Arena::CreateMaybeMessage<::KN::CommandTemplateSetBodyStylesArchive>(Arena*);
template<> ::KN::CommandTemplateSetThumbnailTextArchive* Arena::CreateMaybeMessage<::KN::CommandTemplateSetThumbnailTextArchive>(Arena*);
template<> ::KN::CommandTemplateSlideSetPlaceholderForTagArchive* Arena::CreateMaybeMessage<::KN::CommandTemplateSlideSetPlaceholderForTagArchive>(Arena*);
template<> ::KN::CommandTransitionSetValueArchive* Arena::CreateMaybeMessage<::KN::CommandTransitionSetValueArchive>(Arena*);
template<> ::KN::DocumentSelectionTransformerArchive* Arena::CreateMaybeMessage<::KN::DocumentSelectionTransformerArchive>(Arena*);
template<> ::KN::InsertBuildDescriptionArchive* Arena::CreateMaybeMessage<::KN::InsertBuildDescriptionArchive>(Arena*);
template<> ::KN::NoteCanvasSelectionTransformerArchive* Arena::CreateMaybeMessage<::KN::NoteCanvasSelectionTransformerArchive>(Arena*);
template<> ::KN::OutlineCanvasSelectionTransformerArchive* Arena::CreateMaybeMessage<::KN::OutlineCanvasSelectionTransformerArchive>(Arena*);
template<> ::KN::OutlineSelectionTransformerArchive* Arena::CreateMaybeMessage<::KN::OutlineSelectionTransformerArchive>(Arena*);
template<> ::KN::RemoveBuildDescriptionArchive* Arena::CreateMaybeMessage<::KN::RemoveBuildDescriptionArchive>(Arena*);
template<> ::KN::SlideCollectionSelectionTransformerArchive* Arena::CreateMaybeMessage<::KN::SlideCollectionSelectionTransformerArchive>(Arena*);
template<> ::KN::SlideCollectionSelectionTransformerHelperArchive* Arena::CreateMaybeMessage<::KN::SlideCollectionSelectionTransformerHelperArchive>(Arena*);
template<> ::KN::UIStateCommandGroupArchive* Arena::CreateMaybeMessage<::KN::UIStateCommandGroupArchive>(Arena*);
template<> ::KN::UndoObjectArchive* Arena::CreateMaybeMessage<::KN::UndoObjectArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KN {

enum CommandShowInsertSlideArchive_Kind : int {
  CommandShowInsertSlideArchive_Kind_kKindInsertSlide = 0,
  CommandShowInsertSlideArchive_Kind_kKindInsertSlideForPaste = 1,
  CommandShowInsertSlideArchive_Kind_kKindInsertSlideForDuplicate = 2
};
bool CommandShowInsertSlideArchive_Kind_IsValid(int value);
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive_Kind_Kind_MIN = CommandShowInsertSlideArchive_Kind_kKindInsertSlide;
constexpr CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive_Kind_Kind_MAX = CommandShowInsertSlideArchive_Kind_kKindInsertSlideForDuplicate;
constexpr int CommandShowInsertSlideArchive_Kind_Kind_ARRAYSIZE = CommandShowInsertSlideArchive_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandShowInsertSlideArchive_Kind_descriptor();
template<typename T>
inline const std::string& CommandShowInsertSlideArchive_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandShowInsertSlideArchive_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandShowInsertSlideArchive_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandShowInsertSlideArchive_Kind_descriptor(), enum_t_value);
}
inline bool CommandShowInsertSlideArchive_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandShowInsertSlideArchive_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandShowInsertSlideArchive_Kind>(
    CommandShowInsertSlideArchive_Kind_descriptor(), name, value);
}
enum AnimationReferent : int {
  kRelativeToStart = 1,
  kRelativeToEnd = 2
};
bool AnimationReferent_IsValid(int value);
constexpr AnimationReferent AnimationReferent_MIN = kRelativeToStart;
constexpr AnimationReferent AnimationReferent_MAX = kRelativeToEnd;
constexpr int AnimationReferent_ARRAYSIZE = AnimationReferent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnimationReferent_descriptor();
template<typename T>
inline const std::string& AnimationReferent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnimationReferent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnimationReferent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnimationReferent_descriptor(), enum_t_value);
}
inline bool AnimationReferent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnimationReferent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnimationReferent>(
    AnimationReferent_descriptor(), name, value);
}
// ===================================================================

class UIStateCommandGroupArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.UIStateCommandGroupArchive) */ {
 public:
  inline UIStateCommandGroupArchive() : UIStateCommandGroupArchive(nullptr) {}
  ~UIStateCommandGroupArchive() override;
  explicit constexpr UIStateCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UIStateCommandGroupArchive(const UIStateCommandGroupArchive& from);
  UIStateCommandGroupArchive(UIStateCommandGroupArchive&& from) noexcept
    : UIStateCommandGroupArchive() {
    *this = ::std::move(from);
  }

  inline UIStateCommandGroupArchive& operator=(const UIStateCommandGroupArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UIStateCommandGroupArchive& operator=(UIStateCommandGroupArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UIStateCommandGroupArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UIStateCommandGroupArchive* internal_default_instance() {
    return reinterpret_cast<const UIStateCommandGroupArchive*>(
               &_UIStateCommandGroupArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UIStateCommandGroupArchive& a, UIStateCommandGroupArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UIStateCommandGroupArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UIStateCommandGroupArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UIStateCommandGroupArchive* New() const final {
    return new UIStateCommandGroupArchive();
  }

  UIStateCommandGroupArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UIStateCommandGroupArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UIStateCommandGroupArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UIStateCommandGroupArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UIStateCommandGroupArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.UIStateCommandGroupArchive";
  }
  protected:
  explicit UIStateCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlideNodesToEditFieldNumber = 4,
    kTemplateSlideNodesToApplyFieldNumber = 5,
    kThumbnailSizesFieldNumber = 6,
    kSelectedSlideNodesFieldNumber = 7,
    kRestoreSelectedSlideNodesFieldNumber = 8,
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kUiStateFieldNumber = 2,
  };
  // repeated .TSP.Reference slideNodesToEdit = 4;
  int slidenodestoedit_size() const;
  private:
  int _internal_slidenodestoedit_size() const;
  public:
  void clear_slidenodestoedit();
  ::TSP::Reference* mutable_slidenodestoedit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slidenodestoedit();
  private:
  const ::TSP::Reference& _internal_slidenodestoedit(int index) const;
  ::TSP::Reference* _internal_add_slidenodestoedit();
  public:
  const ::TSP::Reference& slidenodestoedit(int index) const;
  ::TSP::Reference* add_slidenodestoedit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slidenodestoedit() const;

  // repeated .TSP.Reference template_slide_nodes_to_apply = 5;
  int template_slide_nodes_to_apply_size() const;
  private:
  int _internal_template_slide_nodes_to_apply_size() const;
  public:
  void clear_template_slide_nodes_to_apply();
  ::TSP::Reference* mutable_template_slide_nodes_to_apply(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_template_slide_nodes_to_apply();
  private:
  const ::TSP::Reference& _internal_template_slide_nodes_to_apply(int index) const;
  ::TSP::Reference* _internal_add_template_slide_nodes_to_apply();
  public:
  const ::TSP::Reference& template_slide_nodes_to_apply(int index) const;
  ::TSP::Reference* add_template_slide_nodes_to_apply();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      template_slide_nodes_to_apply() const;

  // repeated .TSP.Size thumbnailSizes = 6;
  int thumbnailsizes_size() const;
  private:
  int _internal_thumbnailsizes_size() const;
  public:
  void clear_thumbnailsizes();
  ::TSP::Size* mutable_thumbnailsizes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >*
      mutable_thumbnailsizes();
  private:
  const ::TSP::Size& _internal_thumbnailsizes(int index) const;
  ::TSP::Size* _internal_add_thumbnailsizes();
  public:
  const ::TSP::Size& thumbnailsizes(int index) const;
  ::TSP::Size* add_thumbnailsizes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >&
      thumbnailsizes() const;

  // repeated .TSP.Reference selectedSlideNodes = 7;
  int selectedslidenodes_size() const;
  private:
  int _internal_selectedslidenodes_size() const;
  public:
  void clear_selectedslidenodes();
  ::TSP::Reference* mutable_selectedslidenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_selectedslidenodes();
  private:
  const ::TSP::Reference& _internal_selectedslidenodes(int index) const;
  ::TSP::Reference* _internal_add_selectedslidenodes();
  public:
  const ::TSP::Reference& selectedslidenodes(int index) const;
  ::TSP::Reference* add_selectedslidenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      selectedslidenodes() const;

  // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
  int restoreselectedslidenodes_size() const;
  private:
  int _internal_restoreselectedslidenodes_size() const;
  public:
  void clear_restoreselectedslidenodes();
  ::TSP::Reference* mutable_restoreselectedslidenodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_restoreselectedslidenodes();
  private:
  const ::TSP::Reference& _internal_restoreselectedslidenodes(int index) const;
  ::TSP::Reference* _internal_add_restoreselectedslidenodes();
  public:
  const ::TSP::Reference& restoreselectedslidenodes(int index) const;
  ::TSP::Reference* add_restoreselectedslidenodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      restoreselectedslidenodes() const;

  // required string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_MUST_USE_RESULT std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandGroupArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandGroupArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandGroupArchive* release_super();
  ::TSK::CommandGroupArchive* mutable_super();
  void set_allocated_super(::TSK::CommandGroupArchive* super);
  private:
  const ::TSK::CommandGroupArchive& _internal_super() const;
  ::TSK::CommandGroupArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandGroupArchive* super);
  ::TSK::CommandGroupArchive* unsafe_arena_release_super();

  // required .TSP.Reference uiState = 2;
  bool has_uistate() const;
  private:
  bool _internal_has_uistate() const;
  public:
  void clear_uistate();
  const ::TSP::Reference& uistate() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_uistate();
  ::TSP::Reference* mutable_uistate();
  void set_allocated_uistate(::TSP::Reference* uistate);
  private:
  const ::TSP::Reference& _internal_uistate() const;
  ::TSP::Reference* _internal_mutable_uistate();
  public:
  void unsafe_arena_set_allocated_uistate(
      ::TSP::Reference* uistate);
  ::TSP::Reference* unsafe_arena_release_uistate();

  // @@protoc_insertion_point(class_scope:KN.UIStateCommandGroupArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slidenodestoedit_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > template_slide_nodes_to_apply_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size > thumbnailsizes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > selectedslidenodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > restoreselectedslidenodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::TSK::CommandGroupArchive* super_;
  ::TSP::Reference* uistate_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideInsertDrawablesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideInsertDrawablesArchive) */ {
 public:
  inline CommandSlideInsertDrawablesArchive() : CommandSlideInsertDrawablesArchive(nullptr) {}
  ~CommandSlideInsertDrawablesArchive() override;
  explicit constexpr CommandSlideInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideInsertDrawablesArchive(const CommandSlideInsertDrawablesArchive& from);
  CommandSlideInsertDrawablesArchive(CommandSlideInsertDrawablesArchive&& from) noexcept
    : CommandSlideInsertDrawablesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideInsertDrawablesArchive& operator=(const CommandSlideInsertDrawablesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideInsertDrawablesArchive& operator=(CommandSlideInsertDrawablesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideInsertDrawablesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideInsertDrawablesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideInsertDrawablesArchive*>(
               &_CommandSlideInsertDrawablesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandSlideInsertDrawablesArchive& a, CommandSlideInsertDrawablesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideInsertDrawablesArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideInsertDrawablesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideInsertDrawablesArchive* New() const final {
    return new CommandSlideInsertDrawablesArchive();
  }

  CommandSlideInsertDrawablesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideInsertDrawablesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideInsertDrawablesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideInsertDrawablesArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideInsertDrawablesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideInsertDrawablesArchive";
  }
  protected:
  explicit CommandSlideInsertDrawablesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 3,
    kIdsOfDrawablesUsingObjectPlaceholderGeometryFieldNumber = 6,
    kSagePlaceholderTagsListFieldNumber = 7,
    kInsertBuildDescriptionsFieldNumber = 10,
    kRemoveBuildDescriptionsFieldNumber = 11,
    kCustomFormatKeysFieldNumber = 13,
    kWorkingDrawablesFieldNumber = 18,
    kWorkingInsertBuildDescriptionsFieldNumber = 19,
    kInstructionalTextListFieldNumber = 20,
    kSuperFieldNumber = 1,
    kSlideIdFieldNumber = 2,
    kArgsListFieldNumber = 4,
    kUndoArchiveFieldNumber = 8,
    kGeometryOfObjectPlaceholderForComparisonToRestoreLinkFieldNumber = 17,
    kUpdateGeometryToMatchObjectPlaceholderFieldNumber = 5,
    kIsPastingFieldNumber = 9,
    kRemoveSlideSpecificHyperlinksFieldNumber = 12,
    kSavedNextUntitledResolverIndexFieldNumber = 16,
  };
  // repeated .TSP.Reference drawables = 3;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // repeated .TSP.UUID ids_of_drawables_using_object_placeholder_geometry = 6;
  int ids_of_drawables_using_object_placeholder_geometry_size() const;
  private:
  int _internal_ids_of_drawables_using_object_placeholder_geometry_size() const;
  public:
  void clear_ids_of_drawables_using_object_placeholder_geometry();
  ::TSP::UUID* mutable_ids_of_drawables_using_object_placeholder_geometry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_ids_of_drawables_using_object_placeholder_geometry();
  private:
  const ::TSP::UUID& _internal_ids_of_drawables_using_object_placeholder_geometry(int index) const;
  ::TSP::UUID* _internal_add_ids_of_drawables_using_object_placeholder_geometry();
  public:
  const ::TSP::UUID& ids_of_drawables_using_object_placeholder_geometry(int index) const;
  ::TSP::UUID* add_ids_of_drawables_using_object_placeholder_geometry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      ids_of_drawables_using_object_placeholder_geometry() const;

  // repeated string sage_placeholder_tags_list = 7;
  int sage_placeholder_tags_list_size() const;
  private:
  int _internal_sage_placeholder_tags_list_size() const;
  public:
  void clear_sage_placeholder_tags_list();
  const std::string& sage_placeholder_tags_list(int index) const;
  std::string* mutable_sage_placeholder_tags_list(int index);
  void set_sage_placeholder_tags_list(int index, const std::string& value);
  void set_sage_placeholder_tags_list(int index, std::string&& value);
  void set_sage_placeholder_tags_list(int index, const char* value);
  void set_sage_placeholder_tags_list(int index, const char* value, size_t size);
  std::string* add_sage_placeholder_tags_list();
  void add_sage_placeholder_tags_list(const std::string& value);
  void add_sage_placeholder_tags_list(std::string&& value);
  void add_sage_placeholder_tags_list(const char* value);
  void add_sage_placeholder_tags_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sage_placeholder_tags_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sage_placeholder_tags_list();
  private:
  const std::string& _internal_sage_placeholder_tags_list(int index) const;
  std::string* _internal_add_sage_placeholder_tags_list();
  public:

  // repeated .TSP.Reference insert_build_descriptions = 10;
  int insert_build_descriptions_size() const;
  private:
  int _internal_insert_build_descriptions_size() const;
  public:
  void clear_insert_build_descriptions();
  ::TSP::Reference* mutable_insert_build_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_insert_build_descriptions();
  private:
  const ::TSP::Reference& _internal_insert_build_descriptions(int index) const;
  ::TSP::Reference* _internal_add_insert_build_descriptions();
  public:
  const ::TSP::Reference& insert_build_descriptions(int index) const;
  ::TSP::Reference* add_insert_build_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      insert_build_descriptions() const;

  // repeated .TSP.Reference remove_build_descriptions = 11;
  int remove_build_descriptions_size() const;
  private:
  int _internal_remove_build_descriptions_size() const;
  public:
  void clear_remove_build_descriptions();
  ::TSP::Reference* mutable_remove_build_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_remove_build_descriptions();
  private:
  const ::TSP::Reference& _internal_remove_build_descriptions(int index) const;
  ::TSP::Reference* _internal_add_remove_build_descriptions();
  public:
  const ::TSP::Reference& remove_build_descriptions(int index) const;
  ::TSP::Reference* add_remove_build_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      remove_build_descriptions() const;

  // repeated .TSP.UUID custom_format_keys = 13;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // repeated .TSP.Reference working_drawables = 18;
  int working_drawables_size() const;
  private:
  int _internal_working_drawables_size() const;
  public:
  void clear_working_drawables();
  ::TSP::Reference* mutable_working_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_working_drawables();
  private:
  const ::TSP::Reference& _internal_working_drawables(int index) const;
  ::TSP::Reference* _internal_add_working_drawables();
  public:
  const ::TSP::Reference& working_drawables(int index) const;
  ::TSP::Reference* add_working_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      working_drawables() const;

  // repeated .TSP.Reference working_insert_build_descriptions = 19;
  int working_insert_build_descriptions_size() const;
  private:
  int _internal_working_insert_build_descriptions_size() const;
  public:
  void clear_working_insert_build_descriptions();
  ::TSP::Reference* mutable_working_insert_build_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_working_insert_build_descriptions();
  private:
  const ::TSP::Reference& _internal_working_insert_build_descriptions(int index) const;
  ::TSP::Reference* _internal_add_working_insert_build_descriptions();
  public:
  const ::TSP::Reference& working_insert_build_descriptions(int index) const;
  ::TSP::Reference* add_working_insert_build_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      working_insert_build_descriptions() const;

  // repeated string instructional_text_list = 20;
  int instructional_text_list_size() const;
  private:
  int _internal_instructional_text_list_size() const;
  public:
  void clear_instructional_text_list();
  const std::string& instructional_text_list(int index) const;
  std::string* mutable_instructional_text_list(int index);
  void set_instructional_text_list(int index, const std::string& value);
  void set_instructional_text_list(int index, std::string&& value);
  void set_instructional_text_list(int index, const char* value);
  void set_instructional_text_list(int index, const char* value, size_t size);
  std::string* add_instructional_text_list();
  void add_instructional_text_list(const std::string& value);
  void add_instructional_text_list(std::string&& value);
  void add_instructional_text_list(const char* value);
  void add_instructional_text_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& instructional_text_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_instructional_text_list();
  private:
  const std::string& _internal_instructional_text_list(int index) const;
  std::string* _internal_add_instructional_text_list();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID slide_id = 2;
  bool has_slide_id() const;
  private:
  bool _internal_has_slide_id() const;
  public:
  void clear_slide_id();
  const ::TSP::UUID& slide_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_slide_id();
  ::TSP::UUID* mutable_slide_id();
  void set_allocated_slide_id(::TSP::UUID* slide_id);
  private:
  const ::TSP::UUID& _internal_slide_id() const;
  ::TSP::UUID* _internal_mutable_slide_id();
  public:
  void unsafe_arena_set_allocated_slide_id(
      ::TSP::UUID* slide_id);
  ::TSP::UUID* unsafe_arena_release_slide_id();

  // optional .KN.MixedIdOperationArgs args_list = 4;
  bool has_args_list() const;
  private:
  bool _internal_has_args_list() const;
  public:
  void clear_args_list();
  const ::KN::MixedIdOperationArgs& args_list() const;
  PROTOBUF_MUST_USE_RESULT ::KN::MixedIdOperationArgs* release_args_list();
  ::KN::MixedIdOperationArgs* mutable_args_list();
  void set_allocated_args_list(::KN::MixedIdOperationArgs* args_list);
  private:
  const ::KN::MixedIdOperationArgs& _internal_args_list() const;
  ::KN::MixedIdOperationArgs* _internal_mutable_args_list();
  public:
  void unsafe_arena_set_allocated_args_list(
      ::KN::MixedIdOperationArgs* args_list);
  ::KN::MixedIdOperationArgs* unsafe_arena_release_args_list();

  // optional .TSP.Reference undo_archive = 8;
  bool has_undo_archive() const;
  private:
  bool _internal_has_undo_archive() const;
  public:
  void clear_undo_archive();
  const ::TSP::Reference& undo_archive() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_undo_archive();
  ::TSP::Reference* mutable_undo_archive();
  void set_allocated_undo_archive(::TSP::Reference* undo_archive);
  private:
  const ::TSP::Reference& _internal_undo_archive() const;
  ::TSP::Reference* _internal_mutable_undo_archive();
  public:
  void unsafe_arena_set_allocated_undo_archive(
      ::TSP::Reference* undo_archive);
  ::TSP::Reference* unsafe_arena_release_undo_archive();

  // optional .TSD.GeometryArchive geometry_of_object_placeholder_for_comparison_to_restore_link = 17;
  bool has_geometry_of_object_placeholder_for_comparison_to_restore_link() const;
  private:
  bool _internal_has_geometry_of_object_placeholder_for_comparison_to_restore_link() const;
  public:
  void clear_geometry_of_object_placeholder_for_comparison_to_restore_link();
  const ::TSD::GeometryArchive& geometry_of_object_placeholder_for_comparison_to_restore_link() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::GeometryArchive* release_geometry_of_object_placeholder_for_comparison_to_restore_link();
  ::TSD::GeometryArchive* mutable_geometry_of_object_placeholder_for_comparison_to_restore_link();
  void set_allocated_geometry_of_object_placeholder_for_comparison_to_restore_link(::TSD::GeometryArchive* geometry_of_object_placeholder_for_comparison_to_restore_link);
  private:
  const ::TSD::GeometryArchive& _internal_geometry_of_object_placeholder_for_comparison_to_restore_link() const;
  ::TSD::GeometryArchive* _internal_mutable_geometry_of_object_placeholder_for_comparison_to_restore_link();
  public:
  void unsafe_arena_set_allocated_geometry_of_object_placeholder_for_comparison_to_restore_link(
      ::TSD::GeometryArchive* geometry_of_object_placeholder_for_comparison_to_restore_link);
  ::TSD::GeometryArchive* unsafe_arena_release_geometry_of_object_placeholder_for_comparison_to_restore_link();

  // required bool update_geometry_to_match_object_placeholder = 5;
  bool has_update_geometry_to_match_object_placeholder() const;
  private:
  bool _internal_has_update_geometry_to_match_object_placeholder() const;
  public:
  void clear_update_geometry_to_match_object_placeholder();
  bool update_geometry_to_match_object_placeholder() const;
  void set_update_geometry_to_match_object_placeholder(bool value);
  private:
  bool _internal_update_geometry_to_match_object_placeholder() const;
  void _internal_set_update_geometry_to_match_object_placeholder(bool value);
  public:

  // optional bool is_pasting = 9;
  bool has_is_pasting() const;
  private:
  bool _internal_has_is_pasting() const;
  public:
  void clear_is_pasting();
  bool is_pasting() const;
  void set_is_pasting(bool value);
  private:
  bool _internal_is_pasting() const;
  void _internal_set_is_pasting(bool value);
  public:

  // optional bool remove_slide_specific_hyperlinks = 12;
  bool has_remove_slide_specific_hyperlinks() const;
  private:
  bool _internal_has_remove_slide_specific_hyperlinks() const;
  public:
  void clear_remove_slide_specific_hyperlinks();
  bool remove_slide_specific_hyperlinks() const;
  void set_remove_slide_specific_hyperlinks(bool value);
  private:
  bool _internal_remove_slide_specific_hyperlinks() const;
  void _internal_set_remove_slide_specific_hyperlinks(bool value);
  public:

  // optional uint32 saved_next_untitled_resolver_index = 16;
  bool has_saved_next_untitled_resolver_index() const;
  private:
  bool _internal_has_saved_next_untitled_resolver_index() const;
  public:
  void clear_saved_next_untitled_resolver_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 saved_next_untitled_resolver_index() const;
  void set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_saved_next_untitled_resolver_index() const;
  void _internal_set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideInsertDrawablesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > ids_of_drawables_using_object_placeholder_geometry_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sage_placeholder_tags_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > insert_build_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > remove_build_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > working_drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > working_insert_build_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> instructional_text_list_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* slide_id_;
  ::KN::MixedIdOperationArgs* args_list_;
  ::TSP::Reference* undo_archive_;
  ::TSD::GeometryArchive* geometry_of_object_placeholder_for_comparison_to_restore_link_;
  bool update_geometry_to_match_object_placeholder_;
  bool is_pasting_;
  bool remove_slide_specific_hyperlinks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 saved_next_untitled_resolver_index_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideSetPlaceholdersForTagsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideSetPlaceholdersForTagsArchive) */ {
 public:
  inline CommandSlideSetPlaceholdersForTagsArchive() : CommandSlideSetPlaceholdersForTagsArchive(nullptr) {}
  ~CommandSlideSetPlaceholdersForTagsArchive() override;
  explicit constexpr CommandSlideSetPlaceholdersForTagsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideSetPlaceholdersForTagsArchive(const CommandSlideSetPlaceholdersForTagsArchive& from);
  CommandSlideSetPlaceholdersForTagsArchive(CommandSlideSetPlaceholdersForTagsArchive&& from) noexcept
    : CommandSlideSetPlaceholdersForTagsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideSetPlaceholdersForTagsArchive& operator=(const CommandSlideSetPlaceholdersForTagsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideSetPlaceholdersForTagsArchive& operator=(CommandSlideSetPlaceholdersForTagsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideSetPlaceholdersForTagsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideSetPlaceholdersForTagsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideSetPlaceholdersForTagsArchive*>(
               &_CommandSlideSetPlaceholdersForTagsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandSlideSetPlaceholdersForTagsArchive& a, CommandSlideSetPlaceholdersForTagsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideSetPlaceholdersForTagsArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideSetPlaceholdersForTagsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideSetPlaceholdersForTagsArchive* New() const final {
    return new CommandSlideSetPlaceholdersForTagsArchive();
  }

  CommandSlideSetPlaceholdersForTagsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideSetPlaceholdersForTagsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideSetPlaceholdersForTagsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideSetPlaceholdersForTagsArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideSetPlaceholdersForTagsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideSetPlaceholdersForTagsArchive";
  }
  protected:
  explicit CommandSlideSetPlaceholdersForTagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 3,
    kTagsFieldNumber = 4,
    kOldTagsFieldNumber = 5,
    kOldInfosFieldNumber = 6,
    kSuperFieldNumber = 1,
    kSlideIdFieldNumber = 2,
  };
  // repeated .TSP.Reference infos = 3;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::TSP::Reference* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_infos();
  private:
  const ::TSP::Reference& _internal_infos(int index) const;
  ::TSP::Reference* _internal_add_infos();
  public:
  const ::TSP::Reference& infos(int index) const;
  ::TSP::Reference* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      infos() const;

  // repeated string tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string old_tags = 5;
  int old_tags_size() const;
  private:
  int _internal_old_tags_size() const;
  public:
  void clear_old_tags();
  const std::string& old_tags(int index) const;
  std::string* mutable_old_tags(int index);
  void set_old_tags(int index, const std::string& value);
  void set_old_tags(int index, std::string&& value);
  void set_old_tags(int index, const char* value);
  void set_old_tags(int index, const char* value, size_t size);
  std::string* add_old_tags();
  void add_old_tags(const std::string& value);
  void add_old_tags(std::string&& value);
  void add_old_tags(const char* value);
  void add_old_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& old_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_old_tags();
  private:
  const std::string& _internal_old_tags(int index) const;
  std::string* _internal_add_old_tags();
  public:

  // repeated .TSP.Reference old_infos = 6;
  int old_infos_size() const;
  private:
  int _internal_old_infos_size() const;
  public:
  void clear_old_infos();
  ::TSP::Reference* mutable_old_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_infos();
  private:
  const ::TSP::Reference& _internal_old_infos(int index) const;
  ::TSP::Reference* _internal_add_old_infos();
  public:
  const ::TSP::Reference& old_infos(int index) const;
  ::TSP::Reference* add_old_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_infos() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID slide_id = 2;
  bool has_slide_id() const;
  private:
  bool _internal_has_slide_id() const;
  public:
  void clear_slide_id();
  const ::TSP::UUID& slide_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_slide_id();
  ::TSP::UUID* mutable_slide_id();
  void set_allocated_slide_id(::TSP::UUID* slide_id);
  private:
  const ::TSP::UUID& _internal_slide_id() const;
  ::TSP::UUID* _internal_mutable_slide_id();
  public:
  void unsafe_arena_set_allocated_slide_id(
      ::TSP::UUID* slide_id);
  ::TSP::UUID* unsafe_arena_release_slide_id();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideSetPlaceholdersForTagsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > infos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> old_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_infos_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* slide_id_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandTemplateSlideSetPlaceholderForTagArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandTemplateSlideSetPlaceholderForTagArchive) */ {
 public:
  inline CommandTemplateSlideSetPlaceholderForTagArchive() : CommandTemplateSlideSetPlaceholderForTagArchive(nullptr) {}
  ~CommandTemplateSlideSetPlaceholderForTagArchive() override;
  explicit constexpr CommandTemplateSlideSetPlaceholderForTagArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandTemplateSlideSetPlaceholderForTagArchive(const CommandTemplateSlideSetPlaceholderForTagArchive& from);
  CommandTemplateSlideSetPlaceholderForTagArchive(CommandTemplateSlideSetPlaceholderForTagArchive&& from) noexcept
    : CommandTemplateSlideSetPlaceholderForTagArchive() {
    *this = ::std::move(from);
  }

  inline CommandTemplateSlideSetPlaceholderForTagArchive& operator=(const CommandTemplateSlideSetPlaceholderForTagArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandTemplateSlideSetPlaceholderForTagArchive& operator=(CommandTemplateSlideSetPlaceholderForTagArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandTemplateSlideSetPlaceholderForTagArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandTemplateSlideSetPlaceholderForTagArchive* internal_default_instance() {
    return reinterpret_cast<const CommandTemplateSlideSetPlaceholderForTagArchive*>(
               &_CommandTemplateSlideSetPlaceholderForTagArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommandTemplateSlideSetPlaceholderForTagArchive& a, CommandTemplateSlideSetPlaceholderForTagArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandTemplateSlideSetPlaceholderForTagArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandTemplateSlideSetPlaceholderForTagArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandTemplateSlideSetPlaceholderForTagArchive* New() const final {
    return new CommandTemplateSlideSetPlaceholderForTagArchive();
  }

  CommandTemplateSlideSetPlaceholderForTagArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandTemplateSlideSetPlaceholderForTagArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandTemplateSlideSetPlaceholderForTagArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandTemplateSlideSetPlaceholderForTagArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTemplateSlideSetPlaceholderForTagArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandTemplateSlideSetPlaceholderForTagArchive";
  }
  protected:
  explicit CommandTemplateSlideSetPlaceholderForTagArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 3,
    kSuperFieldNumber = 1,
    kPlaceholderIdFieldNumber = 2,
  };
  // optional string tag = 3;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_MUST_USE_RESULT std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::KN::CommandSlideSetPlaceholdersForTagsArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::KN::CommandSlideSetPlaceholdersForTagsArchive* release_super();
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* mutable_super();
  void set_allocated_super(::KN::CommandSlideSetPlaceholdersForTagsArchive* super);
  private:
  const ::KN::CommandSlideSetPlaceholdersForTagsArchive& _internal_super() const;
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::KN::CommandSlideSetPlaceholdersForTagsArchive* super);
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* unsafe_arena_release_super();

  // required .TSP.UUID placeholder_id = 2;
  bool has_placeholder_id() const;
  private:
  bool _internal_has_placeholder_id() const;
  public:
  void clear_placeholder_id();
  const ::TSP::UUID& placeholder_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_placeholder_id();
  ::TSP::UUID* mutable_placeholder_id();
  void set_allocated_placeholder_id(::TSP::UUID* placeholder_id);
  private:
  const ::TSP::UUID& _internal_placeholder_id() const;
  ::TSP::UUID* _internal_mutable_placeholder_id();
  public:
  void unsafe_arena_set_allocated_placeholder_id(
      ::TSP::UUID* placeholder_id);
  ::TSP::UUID* unsafe_arena_release_placeholder_id();

  // @@protoc_insertion_point(class_scope:KN.CommandTemplateSlideSetPlaceholderForTagArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* super_;
  ::TSP::UUID* placeholder_id_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlidePropagateSetPlaceholderForTagArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlidePropagateSetPlaceholderForTagArchive) */ {
 public:
  inline CommandSlidePropagateSetPlaceholderForTagArchive() : CommandSlidePropagateSetPlaceholderForTagArchive(nullptr) {}
  ~CommandSlidePropagateSetPlaceholderForTagArchive() override;
  explicit constexpr CommandSlidePropagateSetPlaceholderForTagArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlidePropagateSetPlaceholderForTagArchive(const CommandSlidePropagateSetPlaceholderForTagArchive& from);
  CommandSlidePropagateSetPlaceholderForTagArchive(CommandSlidePropagateSetPlaceholderForTagArchive&& from) noexcept
    : CommandSlidePropagateSetPlaceholderForTagArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlidePropagateSetPlaceholderForTagArchive& operator=(const CommandSlidePropagateSetPlaceholderForTagArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlidePropagateSetPlaceholderForTagArchive& operator=(CommandSlidePropagateSetPlaceholderForTagArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlidePropagateSetPlaceholderForTagArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlidePropagateSetPlaceholderForTagArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlidePropagateSetPlaceholderForTagArchive*>(
               &_CommandSlidePropagateSetPlaceholderForTagArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommandSlidePropagateSetPlaceholderForTagArchive& a, CommandSlidePropagateSetPlaceholderForTagArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlidePropagateSetPlaceholderForTagArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlidePropagateSetPlaceholderForTagArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlidePropagateSetPlaceholderForTagArchive* New() const final {
    return new CommandSlidePropagateSetPlaceholderForTagArchive();
  }

  CommandSlidePropagateSetPlaceholderForTagArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlidePropagateSetPlaceholderForTagArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlidePropagateSetPlaceholderForTagArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlidePropagateSetPlaceholderForTagArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlidePropagateSetPlaceholderForTagArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlidePropagateSetPlaceholderForTagArchive";
  }
  protected:
  explicit CommandSlidePropagateSetPlaceholderForTagArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPlaceholderIdFieldNumber = 2,
    kOriginalIdFieldNumber = 3,
  };
  // required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::KN::CommandSlideSetPlaceholdersForTagsArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::KN::CommandSlideSetPlaceholdersForTagsArchive* release_super();
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* mutable_super();
  void set_allocated_super(::KN::CommandSlideSetPlaceholdersForTagsArchive* super);
  private:
  const ::KN::CommandSlideSetPlaceholdersForTagsArchive& _internal_super() const;
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::KN::CommandSlideSetPlaceholdersForTagsArchive* super);
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* unsafe_arena_release_super();

  // required .TSP.UUID placeholder_id = 2;
  bool has_placeholder_id() const;
  private:
  bool _internal_has_placeholder_id() const;
  public:
  void clear_placeholder_id();
  const ::TSP::UUID& placeholder_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_placeholder_id();
  ::TSP::UUID* mutable_placeholder_id();
  void set_allocated_placeholder_id(::TSP::UUID* placeholder_id);
  private:
  const ::TSP::UUID& _internal_placeholder_id() const;
  ::TSP::UUID* _internal_mutable_placeholder_id();
  public:
  void unsafe_arena_set_allocated_placeholder_id(
      ::TSP::UUID* placeholder_id);
  ::TSP::UUID* unsafe_arena_release_placeholder_id();

  // required .TSP.UUID original_id = 3;
  bool has_original_id() const;
  private:
  bool _internal_has_original_id() const;
  public:
  void clear_original_id();
  const ::TSP::UUID& original_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_original_id();
  ::TSP::UUID* mutable_original_id();
  void set_allocated_original_id(::TSP::UUID* original_id);
  private:
  const ::TSP::UUID& _internal_original_id() const;
  ::TSP::UUID* _internal_mutable_original_id();
  public:
  void unsafe_arena_set_allocated_original_id(
      ::TSP::UUID* original_id);
  ::TSP::UUID* unsafe_arena_release_original_id();

  // @@protoc_insertion_point(class_scope:KN.CommandSlidePropagateSetPlaceholderForTagArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* super_;
  ::TSP::UUID* placeholder_id_;
  ::TSP::UUID* original_id_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideRemoveDrawableArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideRemoveDrawableArchive) */ {
 public:
  inline CommandSlideRemoveDrawableArchive() : CommandSlideRemoveDrawableArchive(nullptr) {}
  ~CommandSlideRemoveDrawableArchive() override;
  explicit constexpr CommandSlideRemoveDrawableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideRemoveDrawableArchive(const CommandSlideRemoveDrawableArchive& from);
  CommandSlideRemoveDrawableArchive(CommandSlideRemoveDrawableArchive&& from) noexcept
    : CommandSlideRemoveDrawableArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideRemoveDrawableArchive& operator=(const CommandSlideRemoveDrawableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideRemoveDrawableArchive& operator=(CommandSlideRemoveDrawableArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideRemoveDrawableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideRemoveDrawableArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideRemoveDrawableArchive*>(
               &_CommandSlideRemoveDrawableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandSlideRemoveDrawableArchive& a, CommandSlideRemoveDrawableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideRemoveDrawableArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideRemoveDrawableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideRemoveDrawableArchive* New() const final {
    return new CommandSlideRemoveDrawableArchive();
  }

  CommandSlideRemoveDrawableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideRemoveDrawableArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideRemoveDrawableArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideRemoveDrawableArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideRemoveDrawableArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideRemoveDrawableArchive";
  }
  protected:
  explicit CommandSlideRemoveDrawableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSortedDrawablesFieldNumber = 3,
    kPlaceholderTagsFieldNumber = 5,
    kInsertBuildDescriptionsFieldNumber = 6,
    kRemoveBuildDescriptionsFieldNumber = 7,
    kDrawablesUsingObjectPlaceholderGeometryFieldNumber = 8,
    kInverseInsertHyperlinkCommandsFieldNumber = 9,
    kDrawableIndexesForUndoFieldNumber = 10,
    kInstructionalTextListFieldNumber = 11,
    kSuperFieldNumber = 1,
    kSlideIdFieldNumber = 2,
    kArgsListFieldNumber = 4,
  };
  // repeated .TSP.Reference sortedDrawables = 3;
  int sorteddrawables_size() const;
  private:
  int _internal_sorteddrawables_size() const;
  public:
  void clear_sorteddrawables();
  ::TSP::Reference* mutable_sorteddrawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_sorteddrawables();
  private:
  const ::TSP::Reference& _internal_sorteddrawables(int index) const;
  ::TSP::Reference* _internal_add_sorteddrawables();
  public:
  const ::TSP::Reference& sorteddrawables(int index) const;
  ::TSP::Reference* add_sorteddrawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      sorteddrawables() const;

  // repeated string placeholderTags = 5;
  int placeholdertags_size() const;
  private:
  int _internal_placeholdertags_size() const;
  public:
  void clear_placeholdertags();
  const std::string& placeholdertags(int index) const;
  std::string* mutable_placeholdertags(int index);
  void set_placeholdertags(int index, const std::string& value);
  void set_placeholdertags(int index, std::string&& value);
  void set_placeholdertags(int index, const char* value);
  void set_placeholdertags(int index, const char* value, size_t size);
  std::string* add_placeholdertags();
  void add_placeholdertags(const std::string& value);
  void add_placeholdertags(std::string&& value);
  void add_placeholdertags(const char* value);
  void add_placeholdertags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& placeholdertags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_placeholdertags();
  private:
  const std::string& _internal_placeholdertags(int index) const;
  std::string* _internal_add_placeholdertags();
  public:

  // repeated .TSP.Reference insert_build_descriptions = 6;
  int insert_build_descriptions_size() const;
  private:
  int _internal_insert_build_descriptions_size() const;
  public:
  void clear_insert_build_descriptions();
  ::TSP::Reference* mutable_insert_build_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_insert_build_descriptions();
  private:
  const ::TSP::Reference& _internal_insert_build_descriptions(int index) const;
  ::TSP::Reference* _internal_add_insert_build_descriptions();
  public:
  const ::TSP::Reference& insert_build_descriptions(int index) const;
  ::TSP::Reference* add_insert_build_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      insert_build_descriptions() const;

  // repeated .TSP.Reference remove_build_descriptions = 7;
  int remove_build_descriptions_size() const;
  private:
  int _internal_remove_build_descriptions_size() const;
  public:
  void clear_remove_build_descriptions();
  ::TSP::Reference* mutable_remove_build_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_remove_build_descriptions();
  private:
  const ::TSP::Reference& _internal_remove_build_descriptions(int index) const;
  ::TSP::Reference* _internal_add_remove_build_descriptions();
  public:
  const ::TSP::Reference& remove_build_descriptions(int index) const;
  ::TSP::Reference* add_remove_build_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      remove_build_descriptions() const;

  // repeated .TSP.Reference drawables_using_object_placeholder_geometry = 8;
  int drawables_using_object_placeholder_geometry_size() const;
  private:
  int _internal_drawables_using_object_placeholder_geometry_size() const;
  public:
  void clear_drawables_using_object_placeholder_geometry();
  ::TSP::Reference* mutable_drawables_using_object_placeholder_geometry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables_using_object_placeholder_geometry();
  private:
  const ::TSP::Reference& _internal_drawables_using_object_placeholder_geometry(int index) const;
  ::TSP::Reference* _internal_add_drawables_using_object_placeholder_geometry();
  public:
  const ::TSP::Reference& drawables_using_object_placeholder_geometry(int index) const;
  ::TSP::Reference* add_drawables_using_object_placeholder_geometry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables_using_object_placeholder_geometry() const;

  // repeated .TSP.Reference inverse_insert_hyperlink_commands = 9;
  int inverse_insert_hyperlink_commands_size() const;
  private:
  int _internal_inverse_insert_hyperlink_commands_size() const;
  public:
  void clear_inverse_insert_hyperlink_commands();
  ::TSP::Reference* mutable_inverse_insert_hyperlink_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_inverse_insert_hyperlink_commands();
  private:
  const ::TSP::Reference& _internal_inverse_insert_hyperlink_commands(int index) const;
  ::TSP::Reference* _internal_add_inverse_insert_hyperlink_commands();
  public:
  const ::TSP::Reference& inverse_insert_hyperlink_commands(int index) const;
  ::TSP::Reference* add_inverse_insert_hyperlink_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      inverse_insert_hyperlink_commands() const;

  // repeated uint32 drawable_indexes_for_undo = 10;
  int drawable_indexes_for_undo_size() const;
  private:
  int _internal_drawable_indexes_for_undo_size() const;
  public:
  void clear_drawable_indexes_for_undo();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drawable_indexes_for_undo(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_drawable_indexes_for_undo() const;
  void _internal_add_drawable_indexes_for_undo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_drawable_indexes_for_undo();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 drawable_indexes_for_undo(int index) const;
  void set_drawable_indexes_for_undo(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_drawable_indexes_for_undo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      drawable_indexes_for_undo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_drawable_indexes_for_undo();

  // repeated string instructional_text_list = 11;
  int instructional_text_list_size() const;
  private:
  int _internal_instructional_text_list_size() const;
  public:
  void clear_instructional_text_list();
  const std::string& instructional_text_list(int index) const;
  std::string* mutable_instructional_text_list(int index);
  void set_instructional_text_list(int index, const std::string& value);
  void set_instructional_text_list(int index, std::string&& value);
  void set_instructional_text_list(int index, const char* value);
  void set_instructional_text_list(int index, const char* value, size_t size);
  std::string* add_instructional_text_list();
  void add_instructional_text_list(const std::string& value);
  void add_instructional_text_list(std::string&& value);
  void add_instructional_text_list(const char* value);
  void add_instructional_text_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& instructional_text_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_instructional_text_list();
  private:
  const std::string& _internal_instructional_text_list(int index) const;
  std::string* _internal_add_instructional_text_list();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID slide_id = 2;
  bool has_slide_id() const;
  private:
  bool _internal_has_slide_id() const;
  public:
  void clear_slide_id();
  const ::TSP::UUID& slide_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_slide_id();
  ::TSP::UUID* mutable_slide_id();
  void set_allocated_slide_id(::TSP::UUID* slide_id);
  private:
  const ::TSP::UUID& _internal_slide_id() const;
  ::TSP::UUID* _internal_mutable_slide_id();
  public:
  void unsafe_arena_set_allocated_slide_id(
      ::TSP::UUID* slide_id);
  ::TSP::UUID* unsafe_arena_release_slide_id();

  // required .KN.MixedIdOperationArgs args_list = 4;
  bool has_args_list() const;
  private:
  bool _internal_has_args_list() const;
  public:
  void clear_args_list();
  const ::KN::MixedIdOperationArgs& args_list() const;
  PROTOBUF_MUST_USE_RESULT ::KN::MixedIdOperationArgs* release_args_list();
  ::KN::MixedIdOperationArgs* mutable_args_list();
  void set_allocated_args_list(::KN::MixedIdOperationArgs* args_list);
  private:
  const ::KN::MixedIdOperationArgs& _internal_args_list() const;
  ::KN::MixedIdOperationArgs* _internal_mutable_args_list();
  public:
  void unsafe_arena_set_allocated_args_list(
      ::KN::MixedIdOperationArgs* args_list);
  ::KN::MixedIdOperationArgs* unsafe_arena_release_args_list();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideRemoveDrawableArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > sorteddrawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> placeholdertags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > insert_build_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > remove_build_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_using_object_placeholder_geometry_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > inverse_insert_hyperlink_commands_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > drawable_indexes_for_undo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> instructional_text_list_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* slide_id_;
  ::KN::MixedIdOperationArgs* args_list_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideMoveDrawableZOrderArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideMoveDrawableZOrderArchive) */ {
 public:
  inline CommandSlideMoveDrawableZOrderArchive() : CommandSlideMoveDrawableZOrderArchive(nullptr) {}
  ~CommandSlideMoveDrawableZOrderArchive() override;
  explicit constexpr CommandSlideMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideMoveDrawableZOrderArchive(const CommandSlideMoveDrawableZOrderArchive& from);
  CommandSlideMoveDrawableZOrderArchive(CommandSlideMoveDrawableZOrderArchive&& from) noexcept
    : CommandSlideMoveDrawableZOrderArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideMoveDrawableZOrderArchive& operator=(const CommandSlideMoveDrawableZOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideMoveDrawableZOrderArchive& operator=(CommandSlideMoveDrawableZOrderArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideMoveDrawableZOrderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideMoveDrawableZOrderArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideMoveDrawableZOrderArchive*>(
               &_CommandSlideMoveDrawableZOrderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommandSlideMoveDrawableZOrderArchive& a, CommandSlideMoveDrawableZOrderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideMoveDrawableZOrderArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideMoveDrawableZOrderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideMoveDrawableZOrderArchive* New() const final {
    return new CommandSlideMoveDrawableZOrderArchive();
  }

  CommandSlideMoveDrawableZOrderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideMoveDrawableZOrderArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideMoveDrawableZOrderArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideMoveDrawableZOrderArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideMoveDrawableZOrderArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideMoveDrawableZOrderArchive";
  }
  protected:
  explicit CommandSlideMoveDrawableZOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldOrderedInfosFieldNumber = 4,
    kArgsListFieldNumber = 6,
    kOldOrderedInfosOnSlideForUndoFieldNumber = 8,
    kSuperFieldNumber = 1,
    kSlideIdFieldNumber = 7,
  };
  // repeated .TSP.Reference old_ordered_infos = 4;
  int old_ordered_infos_size() const;
  private:
  int _internal_old_ordered_infos_size() const;
  public:
  void clear_old_ordered_infos();
  ::TSP::Reference* mutable_old_ordered_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_ordered_infos();
  private:
  const ::TSP::Reference& _internal_old_ordered_infos(int index) const;
  ::TSP::Reference* _internal_add_old_ordered_infos();
  public:
  const ::TSP::Reference& old_ordered_infos(int index) const;
  ::TSP::Reference* add_old_ordered_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_ordered_infos() const;

  // repeated .TSK.RearrangeIdOperationArgs args_list = 6;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::RearrangeIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::RearrangeIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::RearrangeIdOperationArgs& args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
      args_list() const;

  // repeated .TSP.Reference old_ordered_infos_on_slide_for_undo = 8;
  int old_ordered_infos_on_slide_for_undo_size() const;
  private:
  int _internal_old_ordered_infos_on_slide_for_undo_size() const;
  public:
  void clear_old_ordered_infos_on_slide_for_undo();
  ::TSP::Reference* mutable_old_ordered_infos_on_slide_for_undo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_ordered_infos_on_slide_for_undo();
  private:
  const ::TSP::Reference& _internal_old_ordered_infos_on_slide_for_undo(int index) const;
  ::TSP::Reference* _internal_add_old_ordered_infos_on_slide_for_undo();
  public:
  const ::TSP::Reference& old_ordered_infos_on_slide_for_undo(int index) const;
  ::TSP::Reference* add_old_ordered_infos_on_slide_for_undo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_ordered_infos_on_slide_for_undo() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID slide_id = 7;
  bool has_slide_id() const;
  private:
  bool _internal_has_slide_id() const;
  public:
  void clear_slide_id();
  const ::TSP::UUID& slide_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_slide_id();
  ::TSP::UUID* mutable_slide_id();
  void set_allocated_slide_id(::TSP::UUID* slide_id);
  private:
  const ::TSP::UUID& _internal_slide_id() const;
  ::TSP::UUID* _internal_mutable_slide_id();
  public:
  void unsafe_arena_set_allocated_slide_id(
      ::TSP::UUID* slide_id);
  ::TSP::UUID* unsafe_arena_release_slide_id();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideMoveDrawableZOrderArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_ordered_infos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs > args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_ordered_infos_on_slide_for_undo_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* slide_id_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideNodeSetPropertyArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideNodeSetPropertyArchive) */ {
 public:
  inline CommandSlideNodeSetPropertyArchive() : CommandSlideNodeSetPropertyArchive(nullptr) {}
  ~CommandSlideNodeSetPropertyArchive() override;
  explicit constexpr CommandSlideNodeSetPropertyArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideNodeSetPropertyArchive(const CommandSlideNodeSetPropertyArchive& from);
  CommandSlideNodeSetPropertyArchive(CommandSlideNodeSetPropertyArchive&& from) noexcept
    : CommandSlideNodeSetPropertyArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideNodeSetPropertyArchive& operator=(const CommandSlideNodeSetPropertyArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideNodeSetPropertyArchive& operator=(CommandSlideNodeSetPropertyArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideNodeSetPropertyArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideNodeSetPropertyArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideNodeSetPropertyArchive*>(
               &_CommandSlideNodeSetPropertyArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommandSlideNodeSetPropertyArchive& a, CommandSlideNodeSetPropertyArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideNodeSetPropertyArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideNodeSetPropertyArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideNodeSetPropertyArchive* New() const final {
    return new CommandSlideNodeSetPropertyArchive();
  }

  CommandSlideNodeSetPropertyArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideNodeSetPropertyArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideNodeSetPropertyArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideNodeSetPropertyArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideNodeSetPropertyArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideNodeSetPropertyArchive";
  }
  protected:
  explicit CommandSlideNodeSetPropertyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSlideNodeIdPathFieldNumber = 2,
    kOldValueFieldNumber = 4,
    kValueFieldNumber = 5,
  };
  // required string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_MUST_USE_RESULT std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath slide_node_id_path = 2;
  bool has_slide_node_id_path() const;
  private:
  bool _internal_has_slide_node_id_path() const;
  public:
  void clear_slide_node_id_path();
  const ::TSP::UUIDPath& slide_node_id_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_slide_node_id_path();
  ::TSP::UUIDPath* mutable_slide_node_id_path();
  void set_allocated_slide_node_id_path(::TSP::UUIDPath* slide_node_id_path);
  private:
  const ::TSP::UUIDPath& _internal_slide_node_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_slide_node_id_path();
  public:
  void unsafe_arena_set_allocated_slide_node_id_path(
      ::TSP::UUIDPath* slide_node_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_slide_node_id_path();

  // required bool old_value = 4;
  bool has_old_value() const;
  private:
  bool _internal_has_old_value() const;
  public:
  void clear_old_value();
  bool old_value() const;
  void set_old_value(bool value);
  private:
  bool _internal_old_value() const;
  void _internal_set_old_value(bool value);
  public:

  // required bool value = 5;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideNodeSetPropertyArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* slide_node_id_path_;
  bool old_value_;
  bool value_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideNodeSetViewStatePropertyArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideNodeSetViewStatePropertyArchive) */ {
 public:
  inline CommandSlideNodeSetViewStatePropertyArchive() : CommandSlideNodeSetViewStatePropertyArchive(nullptr) {}
  ~CommandSlideNodeSetViewStatePropertyArchive() override;
  explicit constexpr CommandSlideNodeSetViewStatePropertyArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideNodeSetViewStatePropertyArchive(const CommandSlideNodeSetViewStatePropertyArchive& from);
  CommandSlideNodeSetViewStatePropertyArchive(CommandSlideNodeSetViewStatePropertyArchive&& from) noexcept
    : CommandSlideNodeSetViewStatePropertyArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideNodeSetViewStatePropertyArchive& operator=(const CommandSlideNodeSetViewStatePropertyArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideNodeSetViewStatePropertyArchive& operator=(CommandSlideNodeSetViewStatePropertyArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideNodeSetViewStatePropertyArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideNodeSetViewStatePropertyArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideNodeSetViewStatePropertyArchive*>(
               &_CommandSlideNodeSetViewStatePropertyArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CommandSlideNodeSetViewStatePropertyArchive& a, CommandSlideNodeSetViewStatePropertyArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideNodeSetViewStatePropertyArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideNodeSetViewStatePropertyArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideNodeSetViewStatePropertyArchive* New() const final {
    return new CommandSlideNodeSetViewStatePropertyArchive();
  }

  CommandSlideNodeSetViewStatePropertyArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideNodeSetViewStatePropertyArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideNodeSetViewStatePropertyArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideNodeSetViewStatePropertyArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideNodeSetViewStatePropertyArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideNodeSetViewStatePropertyArchive";
  }
  protected:
  explicit CommandSlideNodeSetViewStatePropertyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSlideNodeIdPathFieldNumber = 2,
    kOldValueFieldNumber = 4,
    kValueFieldNumber = 5,
  };
  // required string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_MUST_USE_RESULT std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath slide_node_id_path = 2;
  bool has_slide_node_id_path() const;
  private:
  bool _internal_has_slide_node_id_path() const;
  public:
  void clear_slide_node_id_path();
  const ::TSP::UUIDPath& slide_node_id_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_slide_node_id_path();
  ::TSP::UUIDPath* mutable_slide_node_id_path();
  void set_allocated_slide_node_id_path(::TSP::UUIDPath* slide_node_id_path);
  private:
  const ::TSP::UUIDPath& _internal_slide_node_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_slide_node_id_path();
  public:
  void unsafe_arena_set_allocated_slide_node_id_path(
      ::TSP::UUIDPath* slide_node_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_slide_node_id_path();

  // required bool old_value = 4;
  bool has_old_value() const;
  private:
  bool _internal_has_old_value() const;
  public:
  void clear_old_value();
  bool old_value() const;
  void set_old_value(bool value);
  private:
  bool _internal_old_value() const;
  void _internal_set_old_value(bool value);
  public:

  // required bool value = 5;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideNodeSetViewStatePropertyArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* slide_node_id_path_;
  bool old_value_;
  bool value_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideSetBackgroundFillArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideSetBackgroundFillArchive) */ {
 public:
  inline CommandSlideSetBackgroundFillArchive() : CommandSlideSetBackgroundFillArchive(nullptr) {}
  ~CommandSlideSetBackgroundFillArchive() override;
  explicit constexpr CommandSlideSetBackgroundFillArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideSetBackgroundFillArchive(const CommandSlideSetBackgroundFillArchive& from);
  CommandSlideSetBackgroundFillArchive(CommandSlideSetBackgroundFillArchive&& from) noexcept
    : CommandSlideSetBackgroundFillArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideSetBackgroundFillArchive& operator=(const CommandSlideSetBackgroundFillArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideSetBackgroundFillArchive& operator=(CommandSlideSetBackgroundFillArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideSetBackgroundFillArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideSetBackgroundFillArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideSetBackgroundFillArchive*>(
               &_CommandSlideSetBackgroundFillArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CommandSlideSetBackgroundFillArchive& a, CommandSlideSetBackgroundFillArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideSetBackgroundFillArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideSetBackgroundFillArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideSetBackgroundFillArchive* New() const final {
    return new CommandSlideSetBackgroundFillArchive();
  }

  CommandSlideSetBackgroundFillArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideSetBackgroundFillArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideSetBackgroundFillArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideSetBackgroundFillArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideSetBackgroundFillArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideSetBackgroundFillArchive";
  }
  protected:
  explicit CommandSlideSetBackgroundFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideIdPathFieldNumber = 2,
    kOldFillFieldNumber = 3,
    kNewFillFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath slide_id_path = 2;
  bool has_slide_id_path() const;
  private:
  bool _internal_has_slide_id_path() const;
  public:
  void clear_slide_id_path();
  const ::TSP::UUIDPath& slide_id_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_slide_id_path();
  ::TSP::UUIDPath* mutable_slide_id_path();
  void set_allocated_slide_id_path(::TSP::UUIDPath* slide_id_path);
  private:
  const ::TSP::UUIDPath& _internal_slide_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_slide_id_path();
  public:
  void unsafe_arena_set_allocated_slide_id_path(
      ::TSP::UUIDPath* slide_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_slide_id_path();

  // optional .TSD.FillArchive old_fill = 3;
  bool has_old_fill() const;
  private:
  bool _internal_has_old_fill() const;
  public:
  void clear_old_fill();
  const ::TSD::FillArchive& old_fill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_old_fill();
  ::TSD::FillArchive* mutable_old_fill();
  void set_allocated_old_fill(::TSD::FillArchive* old_fill);
  private:
  const ::TSD::FillArchive& _internal_old_fill() const;
  ::TSD::FillArchive* _internal_mutable_old_fill();
  public:
  void unsafe_arena_set_allocated_old_fill(
      ::TSD::FillArchive* old_fill);
  ::TSD::FillArchive* unsafe_arena_release_old_fill();

  // required .TSD.FillArchive new_fill = 4;
  bool has_new_fill() const;
  private:
  bool _internal_has_new_fill() const;
  public:
  void clear_new_fill();
  const ::TSD::FillArchive& new_fill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_new_fill();
  ::TSD::FillArchive* mutable_new_fill();
  void set_allocated_new_fill(::TSD::FillArchive* new_fill);
  private:
  const ::TSD::FillArchive& _internal_new_fill() const;
  ::TSD::FillArchive* _internal_mutable_new_fill();
  public:
  void unsafe_arena_set_allocated_new_fill(
      ::TSD::FillArchive* new_fill);
  ::TSD::FillArchive* unsafe_arena_release_new_fill();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideSetBackgroundFillArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* slide_id_path_;
  ::TSD::FillArchive* old_fill_;
  ::TSD::FillArchive* new_fill_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideSetStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideSetStyleArchive) */ {
 public:
  inline CommandSlideSetStyleArchive() : CommandSlideSetStyleArchive(nullptr) {}
  ~CommandSlideSetStyleArchive() override;
  explicit constexpr CommandSlideSetStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideSetStyleArchive(const CommandSlideSetStyleArchive& from);
  CommandSlideSetStyleArchive(CommandSlideSetStyleArchive&& from) noexcept
    : CommandSlideSetStyleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideSetStyleArchive& operator=(const CommandSlideSetStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideSetStyleArchive& operator=(CommandSlideSetStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideSetStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideSetStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideSetStyleArchive*>(
               &_CommandSlideSetStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommandSlideSetStyleArchive& a, CommandSlideSetStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideSetStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideSetStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideSetStyleArchive* New() const final {
    return new CommandSlideSetStyleArchive();
  }

  CommandSlideSetStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideSetStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideSetStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideSetStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideSetStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideSetStyleArchive";
  }
  protected:
  explicit CommandSlideSetStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideIdPathFieldNumber = 2,
    kSlideStyleFieldNumber = 3,
    kOldSlideStyleFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath slide_id_path = 2;
  bool has_slide_id_path() const;
  private:
  bool _internal_has_slide_id_path() const;
  public:
  void clear_slide_id_path();
  const ::TSP::UUIDPath& slide_id_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_slide_id_path();
  ::TSP::UUIDPath* mutable_slide_id_path();
  void set_allocated_slide_id_path(::TSP::UUIDPath* slide_id_path);
  private:
  const ::TSP::UUIDPath& _internal_slide_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_slide_id_path();
  public:
  void unsafe_arena_set_allocated_slide_id_path(
      ::TSP::UUIDPath* slide_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_slide_id_path();

  // required .TSP.Reference slide_style = 3;
  bool has_slide_style() const;
  private:
  bool _internal_has_slide_style() const;
  public:
  void clear_slide_style();
  const ::TSP::Reference& slide_style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_slide_style();
  ::TSP::Reference* mutable_slide_style();
  void set_allocated_slide_style(::TSP::Reference* slide_style);
  private:
  const ::TSP::Reference& _internal_slide_style() const;
  ::TSP::Reference* _internal_mutable_slide_style();
  public:
  void unsafe_arena_set_allocated_slide_style(
      ::TSP::Reference* slide_style);
  ::TSP::Reference* unsafe_arena_release_slide_style();

  // optional .TSP.Reference old_slide_style = 4;
  bool has_old_slide_style() const;
  private:
  bool _internal_has_old_slide_style() const;
  public:
  void clear_old_slide_style();
  const ::TSP::Reference& old_slide_style() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_slide_style();
  ::TSP::Reference* mutable_old_slide_style();
  void set_allocated_old_slide_style(::TSP::Reference* old_slide_style);
  private:
  const ::TSP::Reference& _internal_old_slide_style() const;
  ::TSP::Reference* _internal_mutable_old_slide_style();
  public:
  void unsafe_arena_set_allocated_old_slide_style(
      ::TSP::Reference* old_slide_style);
  ::TSP::Reference* unsafe_arena_release_old_slide_style();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideSetStyleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* slide_id_path_;
  ::TSP::Reference* slide_style_;
  ::TSP::Reference* old_slide_style_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowMarkOutOfSyncRecordingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowMarkOutOfSyncRecordingArchive) */ {
 public:
  inline CommandShowMarkOutOfSyncRecordingArchive() : CommandShowMarkOutOfSyncRecordingArchive(nullptr) {}
  ~CommandShowMarkOutOfSyncRecordingArchive() override;
  explicit constexpr CommandShowMarkOutOfSyncRecordingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowMarkOutOfSyncRecordingArchive(const CommandShowMarkOutOfSyncRecordingArchive& from);
  CommandShowMarkOutOfSyncRecordingArchive(CommandShowMarkOutOfSyncRecordingArchive&& from) noexcept
    : CommandShowMarkOutOfSyncRecordingArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowMarkOutOfSyncRecordingArchive& operator=(const CommandShowMarkOutOfSyncRecordingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowMarkOutOfSyncRecordingArchive& operator=(CommandShowMarkOutOfSyncRecordingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowMarkOutOfSyncRecordingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowMarkOutOfSyncRecordingArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowMarkOutOfSyncRecordingArchive*>(
               &_CommandShowMarkOutOfSyncRecordingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CommandShowMarkOutOfSyncRecordingArchive& a, CommandShowMarkOutOfSyncRecordingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowMarkOutOfSyncRecordingArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowMarkOutOfSyncRecordingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowMarkOutOfSyncRecordingArchive* New() const final {
    return new CommandShowMarkOutOfSyncRecordingArchive();
  }

  CommandShowMarkOutOfSyncRecordingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowMarkOutOfSyncRecordingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowMarkOutOfSyncRecordingArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowMarkOutOfSyncRecordingArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowMarkOutOfSyncRecordingArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowMarkOutOfSyncRecordingArchive";
  }
  protected:
  explicit CommandShowMarkOutOfSyncRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kOldRecordingFieldNumber = 3,
    kOldModificationDateFieldNumber = 6,
    kNewModificationDateFieldNumber = 7,
    kOldIsRecordingOutOfSyncFieldNumber = 4,
    kNewIsRecordingOutOfSyncFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // optional .TSP.Reference old_recording = 3;
  bool has_old_recording() const;
  private:
  bool _internal_has_old_recording() const;
  public:
  void clear_old_recording();
  const ::TSP::Reference& old_recording() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_recording();
  ::TSP::Reference* mutable_old_recording();
  void set_allocated_old_recording(::TSP::Reference* old_recording);
  private:
  const ::TSP::Reference& _internal_old_recording() const;
  ::TSP::Reference* _internal_mutable_old_recording();
  public:
  void unsafe_arena_set_allocated_old_recording(
      ::TSP::Reference* old_recording);
  ::TSP::Reference* unsafe_arena_release_old_recording();

  // optional .TSP.Date old_modification_date = 6;
  bool has_old_modification_date() const;
  private:
  bool _internal_has_old_modification_date() const;
  public:
  void clear_old_modification_date();
  const ::TSP::Date& old_modification_date() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Date* release_old_modification_date();
  ::TSP::Date* mutable_old_modification_date();
  void set_allocated_old_modification_date(::TSP::Date* old_modification_date);
  private:
  const ::TSP::Date& _internal_old_modification_date() const;
  ::TSP::Date* _internal_mutable_old_modification_date();
  public:
  void unsafe_arena_set_allocated_old_modification_date(
      ::TSP::Date* old_modification_date);
  ::TSP::Date* unsafe_arena_release_old_modification_date();

  // optional .TSP.Date new_modification_date = 7;
  bool has_new_modification_date() const;
  private:
  bool _internal_has_new_modification_date() const;
  public:
  void clear_new_modification_date();
  const ::TSP::Date& new_modification_date() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Date* release_new_modification_date();
  ::TSP::Date* mutable_new_modification_date();
  void set_allocated_new_modification_date(::TSP::Date* new_modification_date);
  private:
  const ::TSP::Date& _internal_new_modification_date() const;
  ::TSP::Date* _internal_mutable_new_modification_date();
  public:
  void unsafe_arena_set_allocated_new_modification_date(
      ::TSP::Date* new_modification_date);
  ::TSP::Date* unsafe_arena_release_new_modification_date();

  // optional bool old_is_recording_out_of_sync = 4 [default = false];
  bool has_old_is_recording_out_of_sync() const;
  private:
  bool _internal_has_old_is_recording_out_of_sync() const;
  public:
  void clear_old_is_recording_out_of_sync();
  bool old_is_recording_out_of_sync() const;
  void set_old_is_recording_out_of_sync(bool value);
  private:
  bool _internal_old_is_recording_out_of_sync() const;
  void _internal_set_old_is_recording_out_of_sync(bool value);
  public:

  // optional bool new_is_recording_out_of_sync = 5 [default = false];
  bool has_new_is_recording_out_of_sync() const;
  private:
  bool _internal_has_new_is_recording_out_of_sync() const;
  public:
  void clear_new_is_recording_out_of_sync();
  bool new_is_recording_out_of_sync() const;
  void set_new_is_recording_out_of_sync(bool value);
  private:
  bool _internal_new_is_recording_out_of_sync() const;
  void _internal_set_new_is_recording_out_of_sync(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandShowMarkOutOfSyncRecordingArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* show_;
  ::TSP::Reference* old_recording_;
  ::TSP::Date* old_modification_date_;
  ::TSP::Date* new_modification_date_;
  bool old_is_recording_out_of_sync_;
  bool new_is_recording_out_of_sync_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowMarkOutOfSyncRecordingIfNeededArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive) */ {
 public:
  inline CommandShowMarkOutOfSyncRecordingIfNeededArchive() : CommandShowMarkOutOfSyncRecordingIfNeededArchive(nullptr) {}
  ~CommandShowMarkOutOfSyncRecordingIfNeededArchive() override;
  explicit constexpr CommandShowMarkOutOfSyncRecordingIfNeededArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowMarkOutOfSyncRecordingIfNeededArchive(const CommandShowMarkOutOfSyncRecordingIfNeededArchive& from);
  CommandShowMarkOutOfSyncRecordingIfNeededArchive(CommandShowMarkOutOfSyncRecordingIfNeededArchive&& from) noexcept
    : CommandShowMarkOutOfSyncRecordingIfNeededArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowMarkOutOfSyncRecordingIfNeededArchive& operator=(const CommandShowMarkOutOfSyncRecordingIfNeededArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowMarkOutOfSyncRecordingIfNeededArchive& operator=(CommandShowMarkOutOfSyncRecordingIfNeededArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowMarkOutOfSyncRecordingIfNeededArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowMarkOutOfSyncRecordingIfNeededArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowMarkOutOfSyncRecordingIfNeededArchive*>(
               &_CommandShowMarkOutOfSyncRecordingIfNeededArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CommandShowMarkOutOfSyncRecordingIfNeededArchive& a, CommandShowMarkOutOfSyncRecordingIfNeededArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowMarkOutOfSyncRecordingIfNeededArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowMarkOutOfSyncRecordingIfNeededArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowMarkOutOfSyncRecordingIfNeededArchive* New() const final {
    return new CommandShowMarkOutOfSyncRecordingIfNeededArchive();
  }

  CommandShowMarkOutOfSyncRecordingIfNeededArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowMarkOutOfSyncRecordingIfNeededArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowMarkOutOfSyncRecordingIfNeededArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowMarkOutOfSyncRecordingIfNeededArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowMarkOutOfSyncRecordingIfNeededArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive";
  }
  protected:
  explicit CommandShowMarkOutOfSyncRecordingIfNeededArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOutOfSyncTokenFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUID out_of_sync_token = 2;
  bool has_out_of_sync_token() const;
  private:
  bool _internal_has_out_of_sync_token() const;
  public:
  void clear_out_of_sync_token();
  const ::TSP::UUID& out_of_sync_token() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_out_of_sync_token();
  ::TSP::UUID* mutable_out_of_sync_token();
  void set_allocated_out_of_sync_token(::TSP::UUID* out_of_sync_token);
  private:
  const ::TSP::UUID& _internal_out_of_sync_token() const;
  ::TSP::UUID* _internal_mutable_out_of_sync_token();
  public:
  void unsafe_arena_set_allocated_out_of_sync_token(
      ::TSP::UUID* out_of_sync_token);
  ::TSP::UUID* unsafe_arena_release_out_of_sync_token();

  // @@protoc_insertion_point(class_scope:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* out_of_sync_token_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowRemoveRecordingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowRemoveRecordingArchive) */ {
 public:
  inline CommandShowRemoveRecordingArchive() : CommandShowRemoveRecordingArchive(nullptr) {}
  ~CommandShowRemoveRecordingArchive() override;
  explicit constexpr CommandShowRemoveRecordingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowRemoveRecordingArchive(const CommandShowRemoveRecordingArchive& from);
  CommandShowRemoveRecordingArchive(CommandShowRemoveRecordingArchive&& from) noexcept
    : CommandShowRemoveRecordingArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowRemoveRecordingArchive& operator=(const CommandShowRemoveRecordingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowRemoveRecordingArchive& operator=(CommandShowRemoveRecordingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowRemoveRecordingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowRemoveRecordingArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowRemoveRecordingArchive*>(
               &_CommandShowRemoveRecordingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CommandShowRemoveRecordingArchive& a, CommandShowRemoveRecordingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowRemoveRecordingArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowRemoveRecordingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowRemoveRecordingArchive* New() const final {
    return new CommandShowRemoveRecordingArchive();
  }

  CommandShowRemoveRecordingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowRemoveRecordingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowRemoveRecordingArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowRemoveRecordingArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowRemoveRecordingArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowRemoveRecordingArchive";
  }
  protected:
  explicit CommandShowRemoveRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kOldRecordingFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // optional .TSP.Reference old_recording = 3;
  bool has_old_recording() const;
  private:
  bool _internal_has_old_recording() const;
  public:
  void clear_old_recording();
  const ::TSP::Reference& old_recording() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_recording();
  ::TSP::Reference* mutable_old_recording();
  void set_allocated_old_recording(::TSP::Reference* old_recording);
  private:
  const ::TSP::Reference& _internal_old_recording() const;
  ::TSP::Reference* _internal_mutable_old_recording();
  public:
  void unsafe_arena_set_allocated_old_recording(
      ::TSP::Reference* old_recording);
  ::TSP::Reference* unsafe_arena_release_old_recording();

  // @@protoc_insertion_point(class_scope:KN.CommandShowRemoveRecordingArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* show_;
  ::TSP::Reference* old_recording_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowReplaceRecordingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowReplaceRecordingArchive) */ {
 public:
  inline CommandShowReplaceRecordingArchive() : CommandShowReplaceRecordingArchive(nullptr) {}
  ~CommandShowReplaceRecordingArchive() override;
  explicit constexpr CommandShowReplaceRecordingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowReplaceRecordingArchive(const CommandShowReplaceRecordingArchive& from);
  CommandShowReplaceRecordingArchive(CommandShowReplaceRecordingArchive&& from) noexcept
    : CommandShowReplaceRecordingArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowReplaceRecordingArchive& operator=(const CommandShowReplaceRecordingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowReplaceRecordingArchive& operator=(CommandShowReplaceRecordingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowReplaceRecordingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowReplaceRecordingArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowReplaceRecordingArchive*>(
               &_CommandShowReplaceRecordingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CommandShowReplaceRecordingArchive& a, CommandShowReplaceRecordingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowReplaceRecordingArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowReplaceRecordingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowReplaceRecordingArchive* New() const final {
    return new CommandShowReplaceRecordingArchive();
  }

  CommandShowReplaceRecordingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowReplaceRecordingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowReplaceRecordingArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowReplaceRecordingArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowReplaceRecordingArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowReplaceRecordingArchive";
  }
  protected:
  explicit CommandShowReplaceRecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kReplacementRecordingFieldNumber = 3,
    kOldRecordingFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // required .TSP.Reference replacement_recording = 3;
  bool has_replacement_recording() const;
  private:
  bool _internal_has_replacement_recording() const;
  public:
  void clear_replacement_recording();
  const ::TSP::Reference& replacement_recording() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_replacement_recording();
  ::TSP::Reference* mutable_replacement_recording();
  void set_allocated_replacement_recording(::TSP::Reference* replacement_recording);
  private:
  const ::TSP::Reference& _internal_replacement_recording() const;
  ::TSP::Reference* _internal_mutable_replacement_recording();
  public:
  void unsafe_arena_set_allocated_replacement_recording(
      ::TSP::Reference* replacement_recording);
  ::TSP::Reference* unsafe_arena_release_replacement_recording();

  // optional .TSP.Reference old_recording = 5;
  bool has_old_recording() const;
  private:
  bool _internal_has_old_recording() const;
  public:
  void clear_old_recording();
  const ::TSP::Reference& old_recording() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_recording();
  ::TSP::Reference* mutable_old_recording();
  void set_allocated_old_recording(::TSP::Reference* old_recording);
  private:
  const ::TSP::Reference& _internal_old_recording() const;
  ::TSP::Reference* _internal_mutable_old_recording();
  public:
  void unsafe_arena_set_allocated_old_recording(
      ::TSP::Reference* old_recording);
  ::TSP::Reference* unsafe_arena_release_old_recording();

  // @@protoc_insertion_point(class_scope:KN.CommandShowReplaceRecordingArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* show_;
  ::TSP::Reference* replacement_recording_;
  ::TSP::Reference* old_recording_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowSetValueArchive_PropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowSetValueArchive.PropertyValue) */ {
 public:
  inline CommandShowSetValueArchive_PropertyValue() : CommandShowSetValueArchive_PropertyValue(nullptr) {}
  ~CommandShowSetValueArchive_PropertyValue() override;
  explicit constexpr CommandShowSetValueArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowSetValueArchive_PropertyValue(const CommandShowSetValueArchive_PropertyValue& from);
  CommandShowSetValueArchive_PropertyValue(CommandShowSetValueArchive_PropertyValue&& from) noexcept
    : CommandShowSetValueArchive_PropertyValue() {
    *this = ::std::move(from);
  }

  inline CommandShowSetValueArchive_PropertyValue& operator=(const CommandShowSetValueArchive_PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowSetValueArchive_PropertyValue& operator=(CommandShowSetValueArchive_PropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowSetValueArchive_PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowSetValueArchive_PropertyValue* internal_default_instance() {
    return reinterpret_cast<const CommandShowSetValueArchive_PropertyValue*>(
               &_CommandShowSetValueArchive_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CommandShowSetValueArchive_PropertyValue& a, CommandShowSetValueArchive_PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowSetValueArchive_PropertyValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowSetValueArchive_PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowSetValueArchive_PropertyValue* New() const final {
    return new CommandShowSetValueArchive_PropertyValue();
  }

  CommandShowSetValueArchive_PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowSetValueArchive_PropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowSetValueArchive_PropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowSetValueArchive_PropertyValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowSetValueArchive_PropertyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowSetValueArchive.PropertyValue";
  }
  protected:
  explicit CommandShowSetValueArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeValueFieldNumber = 4,
    kDoubleValueFieldNumber = 2,
    kBoolValueFieldNumber = 1,
    kShowModeValueFieldNumber = 3,
  };
  // optional .TSP.Size size_value = 4;
  bool has_size_value() const;
  private:
  bool _internal_has_size_value() const;
  public:
  void clear_size_value();
  const ::TSP::Size& size_value() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Size* release_size_value();
  ::TSP::Size* mutable_size_value();
  void set_allocated_size_value(::TSP::Size* size_value);
  private:
  const ::TSP::Size& _internal_size_value() const;
  ::TSP::Size* _internal_mutable_size_value();
  public:
  void unsafe_arena_set_allocated_size_value(
      ::TSP::Size* size_value);
  ::TSP::Size* unsafe_arena_release_size_value();

  // optional double double_value = 2;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // optional bool bool_value = 1;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
  bool has_show_mode_value() const;
  private:
  bool _internal_has_show_mode_value() const;
  public:
  void clear_show_mode_value();
  ::KN::ShowArchive_KNShowMode show_mode_value() const;
  void set_show_mode_value(::KN::ShowArchive_KNShowMode value);
  private:
  ::KN::ShowArchive_KNShowMode _internal_show_mode_value() const;
  void _internal_set_show_mode_value(::KN::ShowArchive_KNShowMode value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandShowSetValueArchive.PropertyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Size* size_value_;
  double double_value_;
  bool bool_value_;
  int show_mode_value_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowSetValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowSetValueArchive) */ {
 public:
  inline CommandShowSetValueArchive() : CommandShowSetValueArchive(nullptr) {}
  ~CommandShowSetValueArchive() override;
  explicit constexpr CommandShowSetValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowSetValueArchive(const CommandShowSetValueArchive& from);
  CommandShowSetValueArchive(CommandShowSetValueArchive&& from) noexcept
    : CommandShowSetValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowSetValueArchive& operator=(const CommandShowSetValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowSetValueArchive& operator=(CommandShowSetValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowSetValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowSetValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowSetValueArchive*>(
               &_CommandShowSetValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CommandShowSetValueArchive& a, CommandShowSetValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowSetValueArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowSetValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowSetValueArchive* New() const final {
    return new CommandShowSetValueArchive();
  }

  CommandShowSetValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowSetValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowSetValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowSetValueArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowSetValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowSetValueArchive";
  }
  protected:
  explicit CommandShowSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandShowSetValueArchive_PropertyValue PropertyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kOldValueFieldNumber = 4,
    kNewValueFieldNumber = 5,
  };
  // required string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_MUST_USE_RESULT std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
  bool has_old_value() const;
  private:
  bool _internal_has_old_value() const;
  public:
  void clear_old_value();
  const ::KN::CommandShowSetValueArchive_PropertyValue& old_value() const;
  PROTOBUF_MUST_USE_RESULT ::KN::CommandShowSetValueArchive_PropertyValue* release_old_value();
  ::KN::CommandShowSetValueArchive_PropertyValue* mutable_old_value();
  void set_allocated_old_value(::KN::CommandShowSetValueArchive_PropertyValue* old_value);
  private:
  const ::KN::CommandShowSetValueArchive_PropertyValue& _internal_old_value() const;
  ::KN::CommandShowSetValueArchive_PropertyValue* _internal_mutable_old_value();
  public:
  void unsafe_arena_set_allocated_old_value(
      ::KN::CommandShowSetValueArchive_PropertyValue* old_value);
  ::KN::CommandShowSetValueArchive_PropertyValue* unsafe_arena_release_old_value();

  // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
  bool has_new_value() const;
  private:
  bool _internal_has_new_value() const;
  public:
  void clear_new_value();
  const ::KN::CommandShowSetValueArchive_PropertyValue& new_value() const;
  PROTOBUF_MUST_USE_RESULT ::KN::CommandShowSetValueArchive_PropertyValue* release_new_value();
  ::KN::CommandShowSetValueArchive_PropertyValue* mutable_new_value();
  void set_allocated_new_value(::KN::CommandShowSetValueArchive_PropertyValue* new_value);
  private:
  const ::KN::CommandShowSetValueArchive_PropertyValue& _internal_new_value() const;
  ::KN::CommandShowSetValueArchive_PropertyValue* _internal_mutable_new_value();
  public:
  void unsafe_arena_set_allocated_new_value(
      ::KN::CommandShowSetValueArchive_PropertyValue* new_value);
  ::KN::CommandShowSetValueArchive_PropertyValue* unsafe_arena_release_new_value();

  // @@protoc_insertion_point(class_scope:KN.CommandShowSetValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* show_;
  ::KN::CommandShowSetValueArchive_PropertyValue* old_value_;
  ::KN::CommandShowSetValueArchive_PropertyValue* new_value_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowInsertSlideArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowInsertSlideArchive) */ {
 public:
  inline CommandShowInsertSlideArchive() : CommandShowInsertSlideArchive(nullptr) {}
  ~CommandShowInsertSlideArchive() override;
  explicit constexpr CommandShowInsertSlideArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowInsertSlideArchive(const CommandShowInsertSlideArchive& from);
  CommandShowInsertSlideArchive(CommandShowInsertSlideArchive&& from) noexcept
    : CommandShowInsertSlideArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowInsertSlideArchive& operator=(const CommandShowInsertSlideArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowInsertSlideArchive& operator=(CommandShowInsertSlideArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowInsertSlideArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowInsertSlideArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowInsertSlideArchive*>(
               &_CommandShowInsertSlideArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CommandShowInsertSlideArchive& a, CommandShowInsertSlideArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowInsertSlideArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowInsertSlideArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowInsertSlideArchive* New() const final {
    return new CommandShowInsertSlideArchive();
  }

  CommandShowInsertSlideArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowInsertSlideArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowInsertSlideArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowInsertSlideArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowInsertSlideArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowInsertSlideArchive";
  }
  protected:
  explicit CommandShowInsertSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandShowInsertSlideArchive_Kind Kind;
  static constexpr Kind kKindInsertSlide =
    CommandShowInsertSlideArchive_Kind_kKindInsertSlide;
  static constexpr Kind kKindInsertSlideForPaste =
    CommandShowInsertSlideArchive_Kind_kKindInsertSlideForPaste;
  static constexpr Kind kKindInsertSlideForDuplicate =
    CommandShowInsertSlideArchive_Kind_kKindInsertSlideForDuplicate;
  static inline bool Kind_IsValid(int value) {
    return CommandShowInsertSlideArchive_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    CommandShowInsertSlideArchive_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    CommandShowInsertSlideArchive_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    CommandShowInsertSlideArchive_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return CommandShowInsertSlideArchive_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return CommandShowInsertSlideArchive_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return CommandShowInsertSlideArchive_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSlideNodesBeingInsertedFieldNumber = 2,
    kInsertedArgsListFieldNumber = 3,
    kIdsOfSlideNodesWithDepthChangesFieldNumber = 4,
    kDepthsOfSlideNodesWithDepthChangesFieldNumber = 5,
    kOldDepthsOfSlideNodesWithDepthChangesFieldNumber = 6,
    kSlideNodesForDepthFixUpFieldNumber = 7,
    kDepthsOfSlideNodesForDepthFixUpFieldNumber = 8,
    kOldDepthsOfSlideNodesForDepthFixUpFieldNumber = 9,
    kTemplateSlideNodesBeingInsertedFieldNumber = 11,
    kCustomFormatKeysFieldNumber = 12,
    kCollapsedStateOfSlideNodesBeingInsertedFieldNumber = 13,
    kWorkingSlideNodesBeingInsertedFieldNumber = 14,
    kSuperFieldNumber = 1,
    kUndoArchiveFieldNumber = 15,
    kKindFieldNumber = 10,
  };
  // repeated .TSP.Reference slide_nodes_being_inserted = 2;
  int slide_nodes_being_inserted_size() const;
  private:
  int _internal_slide_nodes_being_inserted_size() const;
  public:
  void clear_slide_nodes_being_inserted();
  ::TSP::Reference* mutable_slide_nodes_being_inserted(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slide_nodes_being_inserted();
  private:
  const ::TSP::Reference& _internal_slide_nodes_being_inserted(int index) const;
  ::TSP::Reference* _internal_add_slide_nodes_being_inserted();
  public:
  const ::TSP::Reference& slide_nodes_being_inserted(int index) const;
  ::TSP::Reference* add_slide_nodes_being_inserted();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slide_nodes_being_inserted() const;

  // repeated .TSK.AddIdOperationArgs inserted_args_list = 3;
  int inserted_args_list_size() const;
  private:
  int _internal_inserted_args_list_size() const;
  public:
  void clear_inserted_args_list();
  ::TSK::AddIdOperationArgs* mutable_inserted_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
      mutable_inserted_args_list();
  private:
  const ::TSK::AddIdOperationArgs& _internal_inserted_args_list(int index) const;
  ::TSK::AddIdOperationArgs* _internal_add_inserted_args_list();
  public:
  const ::TSK::AddIdOperationArgs& inserted_args_list(int index) const;
  ::TSK::AddIdOperationArgs* add_inserted_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
      inserted_args_list() const;

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  int ids_of_slide_nodes_with_depth_changes_size() const;
  private:
  int _internal_ids_of_slide_nodes_with_depth_changes_size() const;
  public:
  void clear_ids_of_slide_nodes_with_depth_changes();
  ::TSP::UUID* mutable_ids_of_slide_nodes_with_depth_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_ids_of_slide_nodes_with_depth_changes();
  private:
  const ::TSP::UUID& _internal_ids_of_slide_nodes_with_depth_changes(int index) const;
  ::TSP::UUID* _internal_add_ids_of_slide_nodes_with_depth_changes();
  public:
  const ::TSP::UUID& ids_of_slide_nodes_with_depth_changes(int index) const;
  ::TSP::UUID* add_ids_of_slide_nodes_with_depth_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      ids_of_slide_nodes_with_depth_changes() const;

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  int depths_of_slide_nodes_with_depth_changes_size() const;
  private:
  int _internal_depths_of_slide_nodes_with_depth_changes_size() const;
  public:
  void clear_depths_of_slide_nodes_with_depth_changes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_depths_of_slide_nodes_with_depth_changes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_depths_of_slide_nodes_with_depth_changes() const;
  void _internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_depths_of_slide_nodes_with_depth_changes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 depths_of_slide_nodes_with_depth_changes(int index) const;
  void set_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      depths_of_slide_nodes_with_depth_changes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_depths_of_slide_nodes_with_depth_changes();

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  int old_depths_of_slide_nodes_with_depth_changes_size() const;
  private:
  int _internal_old_depths_of_slide_nodes_with_depth_changes_size() const;
  public:
  void clear_old_depths_of_slide_nodes_with_depth_changes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_depths_of_slide_nodes_with_depth_changes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_old_depths_of_slide_nodes_with_depth_changes() const;
  void _internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_old_depths_of_slide_nodes_with_depth_changes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 old_depths_of_slide_nodes_with_depth_changes(int index) const;
  void set_old_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      old_depths_of_slide_nodes_with_depth_changes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_old_depths_of_slide_nodes_with_depth_changes();

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  int slide_nodes_for_depth_fix_up_size() const;
  private:
  int _internal_slide_nodes_for_depth_fix_up_size() const;
  public:
  void clear_slide_nodes_for_depth_fix_up();
  ::TSP::Reference* mutable_slide_nodes_for_depth_fix_up(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slide_nodes_for_depth_fix_up();
  private:
  const ::TSP::Reference& _internal_slide_nodes_for_depth_fix_up(int index) const;
  ::TSP::Reference* _internal_add_slide_nodes_for_depth_fix_up();
  public:
  const ::TSP::Reference& slide_nodes_for_depth_fix_up(int index) const;
  ::TSP::Reference* add_slide_nodes_for_depth_fix_up();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slide_nodes_for_depth_fix_up() const;

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  int depths_of_slide_nodes_for_depth_fix_up_size() const;
  private:
  int _internal_depths_of_slide_nodes_for_depth_fix_up_size() const;
  public:
  void clear_depths_of_slide_nodes_for_depth_fix_up();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_depths_of_slide_nodes_for_depth_fix_up(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_depths_of_slide_nodes_for_depth_fix_up() const;
  void _internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_depths_of_slide_nodes_for_depth_fix_up();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 depths_of_slide_nodes_for_depth_fix_up(int index) const;
  void set_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      depths_of_slide_nodes_for_depth_fix_up() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_depths_of_slide_nodes_for_depth_fix_up();

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  int old_depths_of_slide_nodes_for_depth_fix_up_size() const;
  private:
  int _internal_old_depths_of_slide_nodes_for_depth_fix_up_size() const;
  public:
  void clear_old_depths_of_slide_nodes_for_depth_fix_up();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_depths_of_slide_nodes_for_depth_fix_up(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_old_depths_of_slide_nodes_for_depth_fix_up() const;
  void _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 old_depths_of_slide_nodes_for_depth_fix_up(int index) const;
  void set_old_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      old_depths_of_slide_nodes_for_depth_fix_up() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_old_depths_of_slide_nodes_for_depth_fix_up();

  // repeated .TSP.Reference template_slide_nodes_being_inserted = 11;
  int template_slide_nodes_being_inserted_size() const;
  private:
  int _internal_template_slide_nodes_being_inserted_size() const;
  public:
  void clear_template_slide_nodes_being_inserted();
  ::TSP::Reference* mutable_template_slide_nodes_being_inserted(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_template_slide_nodes_being_inserted();
  private:
  const ::TSP::Reference& _internal_template_slide_nodes_being_inserted(int index) const;
  ::TSP::Reference* _internal_add_template_slide_nodes_being_inserted();
  public:
  const ::TSP::Reference& template_slide_nodes_being_inserted(int index) const;
  ::TSP::Reference* add_template_slide_nodes_being_inserted();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      template_slide_nodes_being_inserted() const;

  // repeated .TSP.UUID custom_format_keys = 12;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // repeated bool collapsed_state_of_slide_nodes_being_inserted = 13;
  int collapsed_state_of_slide_nodes_being_inserted_size() const;
  private:
  int _internal_collapsed_state_of_slide_nodes_being_inserted_size() const;
  public:
  void clear_collapsed_state_of_slide_nodes_being_inserted();
  private:
  bool _internal_collapsed_state_of_slide_nodes_being_inserted(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_collapsed_state_of_slide_nodes_being_inserted() const;
  void _internal_add_collapsed_state_of_slide_nodes_being_inserted(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_collapsed_state_of_slide_nodes_being_inserted();
  public:
  bool collapsed_state_of_slide_nodes_being_inserted(int index) const;
  void set_collapsed_state_of_slide_nodes_being_inserted(int index, bool value);
  void add_collapsed_state_of_slide_nodes_being_inserted(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      collapsed_state_of_slide_nodes_being_inserted() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_collapsed_state_of_slide_nodes_being_inserted();

  // repeated .TSP.Reference working_slide_nodes_being_inserted = 14;
  int working_slide_nodes_being_inserted_size() const;
  private:
  int _internal_working_slide_nodes_being_inserted_size() const;
  public:
  void clear_working_slide_nodes_being_inserted();
  ::TSP::Reference* mutable_working_slide_nodes_being_inserted(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_working_slide_nodes_being_inserted();
  private:
  const ::TSP::Reference& _internal_working_slide_nodes_being_inserted(int index) const;
  ::TSP::Reference* _internal_add_working_slide_nodes_being_inserted();
  public:
  const ::TSP::Reference& working_slide_nodes_being_inserted(int index) const;
  ::TSP::Reference* add_working_slide_nodes_being_inserted();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      working_slide_nodes_being_inserted() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference undo_archive = 15;
  bool has_undo_archive() const;
  private:
  bool _internal_has_undo_archive() const;
  public:
  void clear_undo_archive();
  const ::TSP::Reference& undo_archive() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_undo_archive();
  ::TSP::Reference* mutable_undo_archive();
  void set_allocated_undo_archive(::TSP::Reference* undo_archive);
  private:
  const ::TSP::Reference& _internal_undo_archive() const;
  ::TSP::Reference* _internal_mutable_undo_archive();
  public:
  void unsafe_arena_set_allocated_undo_archive(
      ::TSP::Reference* undo_archive);
  ::TSP::Reference* unsafe_arena_release_undo_archive();

  // optional .KN.CommandShowInsertSlideArchive.Kind kind = 10 [default = kKindInsertSlide];
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::KN::CommandShowInsertSlideArchive_Kind kind() const;
  void set_kind(::KN::CommandShowInsertSlideArchive_Kind value);
  private:
  ::KN::CommandShowInsertSlideArchive_Kind _internal_kind() const;
  void _internal_set_kind(::KN::CommandShowInsertSlideArchive_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandShowInsertSlideArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slide_nodes_being_inserted_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs > inserted_args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > ids_of_slide_nodes_with_depth_changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > depths_of_slide_nodes_with_depth_changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > old_depths_of_slide_nodes_with_depth_changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slide_nodes_for_depth_fix_up_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > depths_of_slide_nodes_for_depth_fix_up_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > old_depths_of_slide_nodes_for_depth_fix_up_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > template_slide_nodes_being_inserted_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > collapsed_state_of_slide_nodes_being_inserted_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > working_slide_nodes_being_inserted_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* undo_archive_;
  int kind_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowMoveSlideArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowMoveSlideArchive) */ {
 public:
  inline CommandShowMoveSlideArchive() : CommandShowMoveSlideArchive(nullptr) {}
  ~CommandShowMoveSlideArchive() override;
  explicit constexpr CommandShowMoveSlideArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowMoveSlideArchive(const CommandShowMoveSlideArchive& from);
  CommandShowMoveSlideArchive(CommandShowMoveSlideArchive&& from) noexcept
    : CommandShowMoveSlideArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowMoveSlideArchive& operator=(const CommandShowMoveSlideArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowMoveSlideArchive& operator=(CommandShowMoveSlideArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowMoveSlideArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowMoveSlideArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowMoveSlideArchive*>(
               &_CommandShowMoveSlideArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommandShowMoveSlideArchive& a, CommandShowMoveSlideArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowMoveSlideArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowMoveSlideArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowMoveSlideArchive* New() const final {
    return new CommandShowMoveSlideArchive();
  }

  CommandShowMoveSlideArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowMoveSlideArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowMoveSlideArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowMoveSlideArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowMoveSlideArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowMoveSlideArchive";
  }
  protected:
  explicit CommandShowMoveSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlideNodesBeingMovedLinearlyFieldNumber = 2,
    kRearrangedArgsListFieldNumber = 3,
    kIdsOfSlideNodesWithDepthChangesFieldNumber = 4,
    kDepthsOfSlideNodesWithDepthChangesFieldNumber = 5,
    kOldDepthsOfSlideNodesWithDepthChangesFieldNumber = 6,
    kSlideNodesForDepthFixUpFieldNumber = 7,
    kDepthsOfSlideNodesForDepthFixUpFieldNumber = 8,
    kOldDepthsOfSlideNodesForDepthFixUpFieldNumber = 9,
    kSuperFieldNumber = 1,
  };
  // repeated .TSP.Reference slide_nodes_being_moved_linearly = 2;
  int slide_nodes_being_moved_linearly_size() const;
  private:
  int _internal_slide_nodes_being_moved_linearly_size() const;
  public:
  void clear_slide_nodes_being_moved_linearly();
  ::TSP::Reference* mutable_slide_nodes_being_moved_linearly(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slide_nodes_being_moved_linearly();
  private:
  const ::TSP::Reference& _internal_slide_nodes_being_moved_linearly(int index) const;
  ::TSP::Reference* _internal_add_slide_nodes_being_moved_linearly();
  public:
  const ::TSP::Reference& slide_nodes_being_moved_linearly(int index) const;
  ::TSP::Reference* add_slide_nodes_being_moved_linearly();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slide_nodes_being_moved_linearly() const;

  // repeated .TSK.RearrangeIdOperationArgs rearranged_args_list = 3;
  int rearranged_args_list_size() const;
  private:
  int _internal_rearranged_args_list_size() const;
  public:
  void clear_rearranged_args_list();
  ::TSK::RearrangeIdOperationArgs* mutable_rearranged_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
      mutable_rearranged_args_list();
  private:
  const ::TSK::RearrangeIdOperationArgs& _internal_rearranged_args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* _internal_add_rearranged_args_list();
  public:
  const ::TSK::RearrangeIdOperationArgs& rearranged_args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* add_rearranged_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
      rearranged_args_list() const;

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  int ids_of_slide_nodes_with_depth_changes_size() const;
  private:
  int _internal_ids_of_slide_nodes_with_depth_changes_size() const;
  public:
  void clear_ids_of_slide_nodes_with_depth_changes();
  ::TSP::UUID* mutable_ids_of_slide_nodes_with_depth_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_ids_of_slide_nodes_with_depth_changes();
  private:
  const ::TSP::UUID& _internal_ids_of_slide_nodes_with_depth_changes(int index) const;
  ::TSP::UUID* _internal_add_ids_of_slide_nodes_with_depth_changes();
  public:
  const ::TSP::UUID& ids_of_slide_nodes_with_depth_changes(int index) const;
  ::TSP::UUID* add_ids_of_slide_nodes_with_depth_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      ids_of_slide_nodes_with_depth_changes() const;

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  int depths_of_slide_nodes_with_depth_changes_size() const;
  private:
  int _internal_depths_of_slide_nodes_with_depth_changes_size() const;
  public:
  void clear_depths_of_slide_nodes_with_depth_changes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_depths_of_slide_nodes_with_depth_changes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_depths_of_slide_nodes_with_depth_changes() const;
  void _internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_depths_of_slide_nodes_with_depth_changes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 depths_of_slide_nodes_with_depth_changes(int index) const;
  void set_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      depths_of_slide_nodes_with_depth_changes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_depths_of_slide_nodes_with_depth_changes();

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  int old_depths_of_slide_nodes_with_depth_changes_size() const;
  private:
  int _internal_old_depths_of_slide_nodes_with_depth_changes_size() const;
  public:
  void clear_old_depths_of_slide_nodes_with_depth_changes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_depths_of_slide_nodes_with_depth_changes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_old_depths_of_slide_nodes_with_depth_changes() const;
  void _internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_old_depths_of_slide_nodes_with_depth_changes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 old_depths_of_slide_nodes_with_depth_changes(int index) const;
  void set_old_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      old_depths_of_slide_nodes_with_depth_changes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_old_depths_of_slide_nodes_with_depth_changes();

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  int slide_nodes_for_depth_fix_up_size() const;
  private:
  int _internal_slide_nodes_for_depth_fix_up_size() const;
  public:
  void clear_slide_nodes_for_depth_fix_up();
  ::TSP::Reference* mutable_slide_nodes_for_depth_fix_up(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slide_nodes_for_depth_fix_up();
  private:
  const ::TSP::Reference& _internal_slide_nodes_for_depth_fix_up(int index) const;
  ::TSP::Reference* _internal_add_slide_nodes_for_depth_fix_up();
  public:
  const ::TSP::Reference& slide_nodes_for_depth_fix_up(int index) const;
  ::TSP::Reference* add_slide_nodes_for_depth_fix_up();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slide_nodes_for_depth_fix_up() const;

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  int depths_of_slide_nodes_for_depth_fix_up_size() const;
  private:
  int _internal_depths_of_slide_nodes_for_depth_fix_up_size() const;
  public:
  void clear_depths_of_slide_nodes_for_depth_fix_up();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_depths_of_slide_nodes_for_depth_fix_up(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_depths_of_slide_nodes_for_depth_fix_up() const;
  void _internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_depths_of_slide_nodes_for_depth_fix_up();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 depths_of_slide_nodes_for_depth_fix_up(int index) const;
  void set_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      depths_of_slide_nodes_for_depth_fix_up() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_depths_of_slide_nodes_for_depth_fix_up();

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  int old_depths_of_slide_nodes_for_depth_fix_up_size() const;
  private:
  int _internal_old_depths_of_slide_nodes_for_depth_fix_up_size() const;
  public:
  void clear_old_depths_of_slide_nodes_for_depth_fix_up();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_depths_of_slide_nodes_for_depth_fix_up(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_old_depths_of_slide_nodes_for_depth_fix_up() const;
  void _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 old_depths_of_slide_nodes_for_depth_fix_up(int index) const;
  void set_old_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      old_depths_of_slide_nodes_for_depth_fix_up() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_old_depths_of_slide_nodes_for_depth_fix_up();

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:KN.CommandShowMoveSlideArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slide_nodes_being_moved_linearly_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs > rearranged_args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > ids_of_slide_nodes_with_depth_changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > depths_of_slide_nodes_with_depth_changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > old_depths_of_slide_nodes_with_depth_changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slide_nodes_for_depth_fix_up_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > depths_of_slide_nodes_for_depth_fix_up_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > old_depths_of_slide_nodes_for_depth_fix_up_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowRemoveSlideArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowRemoveSlideArchive) */ {
 public:
  inline CommandShowRemoveSlideArchive() : CommandShowRemoveSlideArchive(nullptr) {}
  ~CommandShowRemoveSlideArchive() override;
  explicit constexpr CommandShowRemoveSlideArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowRemoveSlideArchive(const CommandShowRemoveSlideArchive& from);
  CommandShowRemoveSlideArchive(CommandShowRemoveSlideArchive&& from) noexcept
    : CommandShowRemoveSlideArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowRemoveSlideArchive& operator=(const CommandShowRemoveSlideArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowRemoveSlideArchive& operator=(CommandShowRemoveSlideArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowRemoveSlideArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowRemoveSlideArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowRemoveSlideArchive*>(
               &_CommandShowRemoveSlideArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommandShowRemoveSlideArchive& a, CommandShowRemoveSlideArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowRemoveSlideArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowRemoveSlideArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowRemoveSlideArchive* New() const final {
    return new CommandShowRemoveSlideArchive();
  }

  CommandShowRemoveSlideArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowRemoveSlideArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowRemoveSlideArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowRemoveSlideArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowRemoveSlideArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowRemoveSlideArchive";
  }
  protected:
  explicit CommandShowRemoveSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlideNodesBeingRemovedFieldNumber = 2,
    kRemovedArgsListFieldNumber = 3,
    kIdsOfSlideNodesWithDepthChangesFieldNumber = 4,
    kDepthsOfSlideNodesWithDepthChangesFieldNumber = 5,
    kOldDepthsOfSlideNodesWithDepthChangesFieldNumber = 6,
    kSlideNodesForDepthFixUpFieldNumber = 7,
    kDepthsOfSlideNodesForDepthFixUpFieldNumber = 8,
    kOldDepthsOfSlideNodesForDepthFixUpFieldNumber = 9,
    kCollapsedStateOfSlideNodesBeingRemovedFieldNumber = 11,
    kSuperFieldNumber = 1,
  };
  // repeated .TSP.Reference slide_nodes_being_removed = 2;
  int slide_nodes_being_removed_size() const;
  private:
  int _internal_slide_nodes_being_removed_size() const;
  public:
  void clear_slide_nodes_being_removed();
  ::TSP::Reference* mutable_slide_nodes_being_removed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slide_nodes_being_removed();
  private:
  const ::TSP::Reference& _internal_slide_nodes_being_removed(int index) const;
  ::TSP::Reference* _internal_add_slide_nodes_being_removed();
  public:
  const ::TSP::Reference& slide_nodes_being_removed(int index) const;
  ::TSP::Reference* add_slide_nodes_being_removed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slide_nodes_being_removed() const;

  // repeated .TSK.RemoveIdOperationArgs removed_args_list = 3;
  int removed_args_list_size() const;
  private:
  int _internal_removed_args_list_size() const;
  public:
  void clear_removed_args_list();
  ::TSK::RemoveIdOperationArgs* mutable_removed_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
      mutable_removed_args_list();
  private:
  const ::TSK::RemoveIdOperationArgs& _internal_removed_args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* _internal_add_removed_args_list();
  public:
  const ::TSK::RemoveIdOperationArgs& removed_args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* add_removed_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
      removed_args_list() const;

  // repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  int ids_of_slide_nodes_with_depth_changes_size() const;
  private:
  int _internal_ids_of_slide_nodes_with_depth_changes_size() const;
  public:
  void clear_ids_of_slide_nodes_with_depth_changes();
  ::TSP::UUID* mutable_ids_of_slide_nodes_with_depth_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_ids_of_slide_nodes_with_depth_changes();
  private:
  const ::TSP::UUID& _internal_ids_of_slide_nodes_with_depth_changes(int index) const;
  ::TSP::UUID* _internal_add_ids_of_slide_nodes_with_depth_changes();
  public:
  const ::TSP::UUID& ids_of_slide_nodes_with_depth_changes(int index) const;
  ::TSP::UUID* add_ids_of_slide_nodes_with_depth_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      ids_of_slide_nodes_with_depth_changes() const;

  // repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  int depths_of_slide_nodes_with_depth_changes_size() const;
  private:
  int _internal_depths_of_slide_nodes_with_depth_changes_size() const;
  public:
  void clear_depths_of_slide_nodes_with_depth_changes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_depths_of_slide_nodes_with_depth_changes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_depths_of_slide_nodes_with_depth_changes() const;
  void _internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_depths_of_slide_nodes_with_depth_changes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 depths_of_slide_nodes_with_depth_changes(int index) const;
  void set_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      depths_of_slide_nodes_with_depth_changes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_depths_of_slide_nodes_with_depth_changes();

  // repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  int old_depths_of_slide_nodes_with_depth_changes_size() const;
  private:
  int _internal_old_depths_of_slide_nodes_with_depth_changes_size() const;
  public:
  void clear_old_depths_of_slide_nodes_with_depth_changes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_depths_of_slide_nodes_with_depth_changes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_old_depths_of_slide_nodes_with_depth_changes() const;
  void _internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_old_depths_of_slide_nodes_with_depth_changes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 old_depths_of_slide_nodes_with_depth_changes(int index) const;
  void set_old_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      old_depths_of_slide_nodes_with_depth_changes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_old_depths_of_slide_nodes_with_depth_changes();

  // repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  int slide_nodes_for_depth_fix_up_size() const;
  private:
  int _internal_slide_nodes_for_depth_fix_up_size() const;
  public:
  void clear_slide_nodes_for_depth_fix_up();
  ::TSP::Reference* mutable_slide_nodes_for_depth_fix_up(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_slide_nodes_for_depth_fix_up();
  private:
  const ::TSP::Reference& _internal_slide_nodes_for_depth_fix_up(int index) const;
  ::TSP::Reference* _internal_add_slide_nodes_for_depth_fix_up();
  public:
  const ::TSP::Reference& slide_nodes_for_depth_fix_up(int index) const;
  ::TSP::Reference* add_slide_nodes_for_depth_fix_up();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      slide_nodes_for_depth_fix_up() const;

  // repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  int depths_of_slide_nodes_for_depth_fix_up_size() const;
  private:
  int _internal_depths_of_slide_nodes_for_depth_fix_up_size() const;
  public:
  void clear_depths_of_slide_nodes_for_depth_fix_up();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_depths_of_slide_nodes_for_depth_fix_up(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_depths_of_slide_nodes_for_depth_fix_up() const;
  void _internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_depths_of_slide_nodes_for_depth_fix_up();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 depths_of_slide_nodes_for_depth_fix_up(int index) const;
  void set_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      depths_of_slide_nodes_for_depth_fix_up() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_depths_of_slide_nodes_for_depth_fix_up();

  // repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  int old_depths_of_slide_nodes_for_depth_fix_up_size() const;
  private:
  int _internal_old_depths_of_slide_nodes_for_depth_fix_up_size() const;
  public:
  void clear_old_depths_of_slide_nodes_for_depth_fix_up();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_depths_of_slide_nodes_for_depth_fix_up(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_old_depths_of_slide_nodes_for_depth_fix_up() const;
  void _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 old_depths_of_slide_nodes_for_depth_fix_up(int index) const;
  void set_old_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      old_depths_of_slide_nodes_for_depth_fix_up() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_old_depths_of_slide_nodes_for_depth_fix_up();

  // repeated bool collapsed_state_of_slide_nodes_being_removed = 11;
  int collapsed_state_of_slide_nodes_being_removed_size() const;
  private:
  int _internal_collapsed_state_of_slide_nodes_being_removed_size() const;
  public:
  void clear_collapsed_state_of_slide_nodes_being_removed();
  private:
  bool _internal_collapsed_state_of_slide_nodes_being_removed(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_collapsed_state_of_slide_nodes_being_removed() const;
  void _internal_add_collapsed_state_of_slide_nodes_being_removed(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_collapsed_state_of_slide_nodes_being_removed();
  public:
  bool collapsed_state_of_slide_nodes_being_removed(int index) const;
  void set_collapsed_state_of_slide_nodes_being_removed(int index, bool value);
  void add_collapsed_state_of_slide_nodes_being_removed(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      collapsed_state_of_slide_nodes_being_removed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_collapsed_state_of_slide_nodes_being_removed();

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:KN.CommandShowRemoveSlideArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slide_nodes_being_removed_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs > removed_args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > ids_of_slide_nodes_with_depth_changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > depths_of_slide_nodes_with_depth_changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > old_depths_of_slide_nodes_with_depth_changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > slide_nodes_for_depth_fix_up_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > depths_of_slide_nodes_for_depth_fix_up_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > old_depths_of_slide_nodes_for_depth_fix_up_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > collapsed_state_of_slide_nodes_being_removed_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowChangeThemeArchive_IdentifierToStyleMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap) */ {
 public:
  inline CommandShowChangeThemeArchive_IdentifierToStyleMap() : CommandShowChangeThemeArchive_IdentifierToStyleMap(nullptr) {}
  ~CommandShowChangeThemeArchive_IdentifierToStyleMap() override;
  explicit constexpr CommandShowChangeThemeArchive_IdentifierToStyleMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowChangeThemeArchive_IdentifierToStyleMap(const CommandShowChangeThemeArchive_IdentifierToStyleMap& from);
  CommandShowChangeThemeArchive_IdentifierToStyleMap(CommandShowChangeThemeArchive_IdentifierToStyleMap&& from) noexcept
    : CommandShowChangeThemeArchive_IdentifierToStyleMap() {
    *this = ::std::move(from);
  }

  inline CommandShowChangeThemeArchive_IdentifierToStyleMap& operator=(const CommandShowChangeThemeArchive_IdentifierToStyleMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowChangeThemeArchive_IdentifierToStyleMap& operator=(CommandShowChangeThemeArchive_IdentifierToStyleMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowChangeThemeArchive_IdentifierToStyleMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowChangeThemeArchive_IdentifierToStyleMap* internal_default_instance() {
    return reinterpret_cast<const CommandShowChangeThemeArchive_IdentifierToStyleMap*>(
               &_CommandShowChangeThemeArchive_IdentifierToStyleMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CommandShowChangeThemeArchive_IdentifierToStyleMap& a, CommandShowChangeThemeArchive_IdentifierToStyleMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowChangeThemeArchive_IdentifierToStyleMap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowChangeThemeArchive_IdentifierToStyleMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowChangeThemeArchive_IdentifierToStyleMap* New() const final {
    return new CommandShowChangeThemeArchive_IdentifierToStyleMap();
  }

  CommandShowChangeThemeArchive_IdentifierToStyleMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowChangeThemeArchive_IdentifierToStyleMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowChangeThemeArchive_IdentifierToStyleMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowChangeThemeArchive_IdentifierToStyleMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowChangeThemeArchive_IdentifierToStyleMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowChangeThemeArchive.IdentifierToStyleMap";
  }
  protected:
  explicit CommandShowChangeThemeArchive_IdentifierToStyleMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStylesFieldNumber = 1,
  };
  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry styles = 1;
  int styles_size() const;
  private:
  int _internal_styles_size() const;
  public:
  void clear_styles();
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* mutable_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
      mutable_styles();
  private:
  const ::TSS::StylesheetArchive_IdentifiedStyleEntry& _internal_styles(int index) const;
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* _internal_add_styles();
  public:
  const ::TSS::StylesheetArchive_IdentifiedStyleEntry& styles(int index) const;
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* add_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
      styles() const;

  // @@protoc_insertion_point(class_scope:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry > styles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowChangeThemeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowChangeThemeArchive) */ {
 public:
  inline CommandShowChangeThemeArchive() : CommandShowChangeThemeArchive(nullptr) {}
  ~CommandShowChangeThemeArchive() override;
  explicit constexpr CommandShowChangeThemeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowChangeThemeArchive(const CommandShowChangeThemeArchive& from);
  CommandShowChangeThemeArchive(CommandShowChangeThemeArchive&& from) noexcept
    : CommandShowChangeThemeArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowChangeThemeArchive& operator=(const CommandShowChangeThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowChangeThemeArchive& operator=(CommandShowChangeThemeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowChangeThemeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowChangeThemeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowChangeThemeArchive*>(
               &_CommandShowChangeThemeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CommandShowChangeThemeArchive& a, CommandShowChangeThemeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowChangeThemeArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowChangeThemeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowChangeThemeArchive* New() const final {
    return new CommandShowChangeThemeArchive();
  }

  CommandShowChangeThemeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowChangeThemeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowChangeThemeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowChangeThemeArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowChangeThemeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowChangeThemeArchive";
  }
  protected:
  explicit CommandShowChangeThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandShowChangeThemeArchive_IdentifierToStyleMap IdentifierToStyleMap;

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateIdentifierFieldNumber = 5,
    kOldTemplateIdentifierFieldNumber = 6,
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kThemeFieldNumber = 3,
    kOldThemeFieldNumber = 4,
    kIdentifierToStyleMapFieldNumber = 7,
    kOldIdentifierToStyleMapFieldNumber = 8,
  };
  // optional string template_identifier = 5;
  bool has_template_identifier() const;
  private:
  bool _internal_has_template_identifier() const;
  public:
  void clear_template_identifier();
  const std::string& template_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_template_identifier();
  void set_allocated_template_identifier(std::string* template_identifier);
  private:
  const std::string& _internal_template_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_identifier(const std::string& value);
  std::string* _internal_mutable_template_identifier();
  public:

  // optional string old_template_identifier = 6;
  bool has_old_template_identifier() const;
  private:
  bool _internal_has_old_template_identifier() const;
  public:
  void clear_old_template_identifier();
  const std::string& old_template_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_template_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_template_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_old_template_identifier();
  void set_allocated_old_template_identifier(std::string* old_template_identifier);
  private:
  const std::string& _internal_old_template_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_template_identifier(const std::string& value);
  std::string* _internal_mutable_old_template_identifier();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // required .TSP.Reference theme = 3;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // optional .TSP.Reference old_theme = 4;
  bool has_old_theme() const;
  private:
  bool _internal_has_old_theme() const;
  public:
  void clear_old_theme();
  const ::TSP::Reference& old_theme() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_theme();
  ::TSP::Reference* mutable_old_theme();
  void set_allocated_old_theme(::TSP::Reference* old_theme);
  private:
  const ::TSP::Reference& _internal_old_theme() const;
  ::TSP::Reference* _internal_mutable_old_theme();
  public:
  void unsafe_arena_set_allocated_old_theme(
      ::TSP::Reference* old_theme);
  ::TSP::Reference* unsafe_arena_release_old_theme();

  // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap identifier_to_style_map = 7;
  bool has_identifier_to_style_map() const;
  private:
  bool _internal_has_identifier_to_style_map() const;
  public:
  void clear_identifier_to_style_map();
  const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& identifier_to_style_map() const;
  PROTOBUF_MUST_USE_RESULT ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* release_identifier_to_style_map();
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* mutable_identifier_to_style_map();
  void set_allocated_identifier_to_style_map(::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* identifier_to_style_map);
  private:
  const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& _internal_identifier_to_style_map() const;
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* _internal_mutable_identifier_to_style_map();
  public:
  void unsafe_arena_set_allocated_identifier_to_style_map(
      ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* identifier_to_style_map);
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* unsafe_arena_release_identifier_to_style_map();

  // optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap old_identifier_to_style_map = 8;
  bool has_old_identifier_to_style_map() const;
  private:
  bool _internal_has_old_identifier_to_style_map() const;
  public:
  void clear_old_identifier_to_style_map();
  const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& old_identifier_to_style_map() const;
  PROTOBUF_MUST_USE_RESULT ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* release_old_identifier_to_style_map();
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* mutable_old_identifier_to_style_map();
  void set_allocated_old_identifier_to_style_map(::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* old_identifier_to_style_map);
  private:
  const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& _internal_old_identifier_to_style_map() const;
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* _internal_mutable_old_identifier_to_style_map();
  public:
  void unsafe_arena_set_allocated_old_identifier_to_style_map(
      ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* old_identifier_to_style_map);
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* unsafe_arena_release_old_identifier_to_style_map();

  // @@protoc_insertion_point(class_scope:KN.CommandShowChangeThemeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_template_identifier_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* show_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* old_theme_;
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* identifier_to_style_map_;
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* old_identifier_to_style_map_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowChangeSlideSizeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowChangeSlideSizeArchive) */ {
 public:
  inline CommandShowChangeSlideSizeArchive() : CommandShowChangeSlideSizeArchive(nullptr) {}
  ~CommandShowChangeSlideSizeArchive() override;
  explicit constexpr CommandShowChangeSlideSizeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowChangeSlideSizeArchive(const CommandShowChangeSlideSizeArchive& from);
  CommandShowChangeSlideSizeArchive(CommandShowChangeSlideSizeArchive&& from) noexcept
    : CommandShowChangeSlideSizeArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowChangeSlideSizeArchive& operator=(const CommandShowChangeSlideSizeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowChangeSlideSizeArchive& operator=(CommandShowChangeSlideSizeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowChangeSlideSizeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowChangeSlideSizeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowChangeSlideSizeArchive*>(
               &_CommandShowChangeSlideSizeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CommandShowChangeSlideSizeArchive& a, CommandShowChangeSlideSizeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowChangeSlideSizeArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowChangeSlideSizeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowChangeSlideSizeArchive* New() const final {
    return new CommandShowChangeSlideSizeArchive();
  }

  CommandShowChangeSlideSizeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowChangeSlideSizeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowChangeSlideSizeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowChangeSlideSizeArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowChangeSlideSizeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowChangeSlideSizeArchive";
  }
  protected:
  explicit CommandShowChangeSlideSizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Size size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TSP::Size& size() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Size* release_size();
  ::TSP::Size* mutable_size();
  void set_allocated_size(::TSP::Size* size);
  private:
  const ::TSP::Size& _internal_size() const;
  ::TSP::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TSP::Size* size);
  ::TSP::Size* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:KN.CommandShowChangeSlideSizeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Size* size_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetThemeCustomEffectTimingCurveArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSetThemeCustomEffectTimingCurveArchive) */ {
 public:
  inline CommandSetThemeCustomEffectTimingCurveArchive() : CommandSetThemeCustomEffectTimingCurveArchive(nullptr) {}
  ~CommandSetThemeCustomEffectTimingCurveArchive() override;
  explicit constexpr CommandSetThemeCustomEffectTimingCurveArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetThemeCustomEffectTimingCurveArchive(const CommandSetThemeCustomEffectTimingCurveArchive& from);
  CommandSetThemeCustomEffectTimingCurveArchive(CommandSetThemeCustomEffectTimingCurveArchive&& from) noexcept
    : CommandSetThemeCustomEffectTimingCurveArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetThemeCustomEffectTimingCurveArchive& operator=(const CommandSetThemeCustomEffectTimingCurveArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetThemeCustomEffectTimingCurveArchive& operator=(CommandSetThemeCustomEffectTimingCurveArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetThemeCustomEffectTimingCurveArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetThemeCustomEffectTimingCurveArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetThemeCustomEffectTimingCurveArchive*>(
               &_CommandSetThemeCustomEffectTimingCurveArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CommandSetThemeCustomEffectTimingCurveArchive& a, CommandSetThemeCustomEffectTimingCurveArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetThemeCustomEffectTimingCurveArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetThemeCustomEffectTimingCurveArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSetThemeCustomEffectTimingCurveArchive* New() const final {
    return new CommandSetThemeCustomEffectTimingCurveArchive();
  }

  CommandSetThemeCustomEffectTimingCurveArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSetThemeCustomEffectTimingCurveArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetThemeCustomEffectTimingCurveArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSetThemeCustomEffectTimingCurveArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetThemeCustomEffectTimingCurveArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSetThemeCustomEffectTimingCurveArchive";
  }
  protected:
  explicit CommandSetThemeCustomEffectTimingCurveArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSuperFieldNumber = 1,
    kPathSourceFieldNumber = 3,
    kOldPathSourceFieldNumber = 4,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSD.PathSourceArchive path_source = 3;
  bool has_path_source() const;
  private:
  bool _internal_has_path_source() const;
  public:
  void clear_path_source();
  const ::TSD::PathSourceArchive& path_source() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::PathSourceArchive* release_path_source();
  ::TSD::PathSourceArchive* mutable_path_source();
  void set_allocated_path_source(::TSD::PathSourceArchive* path_source);
  private:
  const ::TSD::PathSourceArchive& _internal_path_source() const;
  ::TSD::PathSourceArchive* _internal_mutable_path_source();
  public:
  void unsafe_arena_set_allocated_path_source(
      ::TSD::PathSourceArchive* path_source);
  ::TSD::PathSourceArchive* unsafe_arena_release_path_source();

  // optional .TSD.PathSourceArchive old_path_source = 4;
  bool has_old_path_source() const;
  private:
  bool _internal_has_old_path_source() const;
  public:
  void clear_old_path_source();
  const ::TSD::PathSourceArchive& old_path_source() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::PathSourceArchive* release_old_path_source();
  ::TSD::PathSourceArchive* mutable_old_path_source();
  void set_allocated_old_path_source(::TSD::PathSourceArchive* old_path_source);
  private:
  const ::TSD::PathSourceArchive& _internal_old_path_source() const;
  ::TSD::PathSourceArchive* _internal_mutable_old_path_source();
  public:
  void unsafe_arena_set_allocated_old_path_source(
      ::TSD::PathSourceArchive* old_path_source);
  ::TSD::PathSourceArchive* unsafe_arena_release_old_path_source();

  // @@protoc_insertion_point(class_scope:KN.CommandSetThemeCustomEffectTimingCurveArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TSK::CommandArchive* super_;
  ::TSD::PathSourceArchive* path_source_;
  ::TSD::PathSourceArchive* old_path_source_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMoveTemplatesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandMoveTemplatesArchive) */ {
 public:
  inline CommandMoveTemplatesArchive() : CommandMoveTemplatesArchive(nullptr) {}
  ~CommandMoveTemplatesArchive() override;
  explicit constexpr CommandMoveTemplatesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMoveTemplatesArchive(const CommandMoveTemplatesArchive& from);
  CommandMoveTemplatesArchive(CommandMoveTemplatesArchive&& from) noexcept
    : CommandMoveTemplatesArchive() {
    *this = ::std::move(from);
  }

  inline CommandMoveTemplatesArchive& operator=(const CommandMoveTemplatesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMoveTemplatesArchive& operator=(CommandMoveTemplatesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMoveTemplatesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMoveTemplatesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMoveTemplatesArchive*>(
               &_CommandMoveTemplatesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CommandMoveTemplatesArchive& a, CommandMoveTemplatesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMoveTemplatesArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMoveTemplatesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMoveTemplatesArchive* New() const final {
    return new CommandMoveTemplatesArchive();
  }

  CommandMoveTemplatesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMoveTemplatesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMoveTemplatesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandMoveTemplatesArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMoveTemplatesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandMoveTemplatesArchive";
  }
  protected:
  explicit CommandMoveTemplatesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateSlidesFieldNumber = 3,
    kPreviousIndexesKeysFieldNumber = 4,
    kPreviousIndexesValuesFieldNumber = 5,
    kFinalTemplateArrangementFieldNumber = 6,
    kSuperFieldNumber = 1,
  };
  // repeated .TSP.Reference template_slides = 3;
  int template_slides_size() const;
  private:
  int _internal_template_slides_size() const;
  public:
  void clear_template_slides();
  ::TSP::Reference* mutable_template_slides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_template_slides();
  private:
  const ::TSP::Reference& _internal_template_slides(int index) const;
  ::TSP::Reference* _internal_add_template_slides();
  public:
  const ::TSP::Reference& template_slides(int index) const;
  ::TSP::Reference* add_template_slides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      template_slides() const;

  // repeated .TSP.Reference previous_indexes_keys = 4;
  int previous_indexes_keys_size() const;
  private:
  int _internal_previous_indexes_keys_size() const;
  public:
  void clear_previous_indexes_keys();
  ::TSP::Reference* mutable_previous_indexes_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_previous_indexes_keys();
  private:
  const ::TSP::Reference& _internal_previous_indexes_keys(int index) const;
  ::TSP::Reference* _internal_add_previous_indexes_keys();
  public:
  const ::TSP::Reference& previous_indexes_keys(int index) const;
  ::TSP::Reference* add_previous_indexes_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      previous_indexes_keys() const;

  // repeated uint32 previous_indexes_values = 5;
  int previous_indexes_values_size() const;
  private:
  int _internal_previous_indexes_values_size() const;
  public:
  void clear_previous_indexes_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_previous_indexes_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_previous_indexes_values() const;
  void _internal_add_previous_indexes_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_previous_indexes_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 previous_indexes_values(int index) const;
  void set_previous_indexes_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_previous_indexes_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      previous_indexes_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_previous_indexes_values();

  // repeated .TSP.Reference final_template_arrangement = 6;
  int final_template_arrangement_size() const;
  private:
  int _internal_final_template_arrangement_size() const;
  public:
  void clear_final_template_arrangement();
  ::TSP::Reference* mutable_final_template_arrangement(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_final_template_arrangement();
  private:
  const ::TSP::Reference& _internal_final_template_arrangement(int index) const;
  ::TSP::Reference* _internal_add_final_template_arrangement();
  public:
  const ::TSP::Reference& final_template_arrangement(int index) const;
  ::TSP::Reference* add_final_template_arrangement();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      final_template_arrangement() const;

  // required .TSD.ContainerReorderChildrenCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ContainerReorderChildrenCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ContainerReorderChildrenCommandArchive* release_super();
  ::TSD::ContainerReorderChildrenCommandArchive* mutable_super();
  void set_allocated_super(::TSD::ContainerReorderChildrenCommandArchive* super);
  private:
  const ::TSD::ContainerReorderChildrenCommandArchive& _internal_super() const;
  ::TSD::ContainerReorderChildrenCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ContainerReorderChildrenCommandArchive* super);
  ::TSD::ContainerReorderChildrenCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:KN.CommandMoveTemplatesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > template_slides_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > previous_indexes_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > previous_indexes_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > final_template_arrangement_;
  ::TSD::ContainerReorderChildrenCommandArchive* super_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandInsertTemplateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandInsertTemplateArchive) */ {
 public:
  inline CommandInsertTemplateArchive() : CommandInsertTemplateArchive(nullptr) {}
  ~CommandInsertTemplateArchive() override;
  explicit constexpr CommandInsertTemplateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInsertTemplateArchive(const CommandInsertTemplateArchive& from);
  CommandInsertTemplateArchive(CommandInsertTemplateArchive&& from) noexcept
    : CommandInsertTemplateArchive() {
    *this = ::std::move(from);
  }

  inline CommandInsertTemplateArchive& operator=(const CommandInsertTemplateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInsertTemplateArchive& operator=(CommandInsertTemplateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInsertTemplateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInsertTemplateArchive* internal_default_instance() {
    return reinterpret_cast<const CommandInsertTemplateArchive*>(
               &_CommandInsertTemplateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CommandInsertTemplateArchive& a, CommandInsertTemplateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInsertTemplateArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInsertTemplateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandInsertTemplateArchive* New() const final {
    return new CommandInsertTemplateArchive();
  }

  CommandInsertTemplateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandInsertTemplateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandInsertTemplateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandInsertTemplateArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInsertTemplateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandInsertTemplateArchive";
  }
  protected:
  explicit CommandInsertTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndoTemplateChangeCommandsFieldNumber = 7,
    kSuperFieldNumber = 1,
    kUndoReplacementTemplateSlideNodeFieldNumber = 9,
    kSetInsertedSlideAsDefaultTemplateSlideFieldNumber = 8,
  };
  // repeated .TSP.Reference undo_template_change_commands = 7;
  int undo_template_change_commands_size() const;
  private:
  int _internal_undo_template_change_commands_size() const;
  public:
  void clear_undo_template_change_commands();
  ::TSP::Reference* mutable_undo_template_change_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_undo_template_change_commands();
  private:
  const ::TSP::Reference& _internal_undo_template_change_commands(int index) const;
  ::TSP::Reference* _internal_add_undo_template_change_commands();
  public:
  const ::TSP::Reference& undo_template_change_commands(int index) const;
  ::TSP::Reference* add_undo_template_change_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      undo_template_change_commands() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference undo_replacement_template_slide_node = 9;
  bool has_undo_replacement_template_slide_node() const;
  private:
  bool _internal_has_undo_replacement_template_slide_node() const;
  public:
  void clear_undo_replacement_template_slide_node();
  const ::TSP::Reference& undo_replacement_template_slide_node() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_undo_replacement_template_slide_node();
  ::TSP::Reference* mutable_undo_replacement_template_slide_node();
  void set_allocated_undo_replacement_template_slide_node(::TSP::Reference* undo_replacement_template_slide_node);
  private:
  const ::TSP::Reference& _internal_undo_replacement_template_slide_node() const;
  ::TSP::Reference* _internal_mutable_undo_replacement_template_slide_node();
  public:
  void unsafe_arena_set_allocated_undo_replacement_template_slide_node(
      ::TSP::Reference* undo_replacement_template_slide_node);
  ::TSP::Reference* unsafe_arena_release_undo_replacement_template_slide_node();

  // required bool set_inserted_slide_as_default_template_slide = 8;
  bool has_set_inserted_slide_as_default_template_slide() const;
  private:
  bool _internal_has_set_inserted_slide_as_default_template_slide() const;
  public:
  void clear_set_inserted_slide_as_default_template_slide();
  bool set_inserted_slide_as_default_template_slide() const;
  void set_set_inserted_slide_as_default_template_slide(bool value);
  private:
  bool _internal_set_inserted_slide_as_default_template_slide() const;
  void _internal_set_set_inserted_slide_as_default_template_slide(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandInsertTemplateArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > undo_template_change_commands_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* undo_replacement_template_slide_node_;
  bool set_inserted_slide_as_default_template_slide_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPrimitiveInsertTemplateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandPrimitiveInsertTemplateArchive) */ {
 public:
  inline CommandPrimitiveInsertTemplateArchive() : CommandPrimitiveInsertTemplateArchive(nullptr) {}
  ~CommandPrimitiveInsertTemplateArchive() override;
  explicit constexpr CommandPrimitiveInsertTemplateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPrimitiveInsertTemplateArchive(const CommandPrimitiveInsertTemplateArchive& from);
  CommandPrimitiveInsertTemplateArchive(CommandPrimitiveInsertTemplateArchive&& from) noexcept
    : CommandPrimitiveInsertTemplateArchive() {
    *this = ::std::move(from);
  }

  inline CommandPrimitiveInsertTemplateArchive& operator=(const CommandPrimitiveInsertTemplateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPrimitiveInsertTemplateArchive& operator=(CommandPrimitiveInsertTemplateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPrimitiveInsertTemplateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPrimitiveInsertTemplateArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPrimitiveInsertTemplateArchive*>(
               &_CommandPrimitiveInsertTemplateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CommandPrimitiveInsertTemplateArchive& a, CommandPrimitiveInsertTemplateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPrimitiveInsertTemplateArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPrimitiveInsertTemplateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandPrimitiveInsertTemplateArchive* New() const final {
    return new CommandPrimitiveInsertTemplateArchive();
  }

  CommandPrimitiveInsertTemplateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandPrimitiveInsertTemplateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPrimitiveInsertTemplateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandPrimitiveInsertTemplateArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPrimitiveInsertTemplateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandPrimitiveInsertTemplateArchive";
  }
  protected:
  explicit CommandPrimitiveInsertTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFormatKeysFieldNumber = 3,
    kPreviousClassicThemeRecordsFieldNumber = 4,
    kSuperFieldNumber = 1,
    kWasInsertedWithDropFieldNumber = 2,
  };
  // repeated .TSP.UUID custom_format_keys = 3;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // repeated .TSP.Reference previous_classic_theme_records = 4;
  int previous_classic_theme_records_size() const;
  private:
  int _internal_previous_classic_theme_records_size() const;
  public:
  void clear_previous_classic_theme_records();
  ::TSP::Reference* mutable_previous_classic_theme_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_previous_classic_theme_records();
  private:
  const ::TSP::Reference& _internal_previous_classic_theme_records(int index) const;
  ::TSP::Reference* _internal_add_previous_classic_theme_records();
  public:
  const ::TSP::Reference& previous_classic_theme_records(int index) const;
  ::TSP::Reference* add_previous_classic_theme_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      previous_classic_theme_records() const;

  // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ContainerInsertChildrenCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ContainerInsertChildrenCommandArchive* release_super();
  ::TSD::ContainerInsertChildrenCommandArchive* mutable_super();
  void set_allocated_super(::TSD::ContainerInsertChildrenCommandArchive* super);
  private:
  const ::TSD::ContainerInsertChildrenCommandArchive& _internal_super() const;
  ::TSD::ContainerInsertChildrenCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ContainerInsertChildrenCommandArchive* super);
  ::TSD::ContainerInsertChildrenCommandArchive* unsafe_arena_release_super();

  // required bool was_inserted_with_drop = 2;
  bool has_was_inserted_with_drop() const;
  private:
  bool _internal_has_was_inserted_with_drop() const;
  public:
  void clear_was_inserted_with_drop();
  bool was_inserted_with_drop() const;
  void set_was_inserted_with_drop(bool value);
  private:
  bool _internal_was_inserted_with_drop() const;
  void _internal_set_was_inserted_with_drop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandPrimitiveInsertTemplateArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > previous_classic_theme_records_;
  ::TSD::ContainerInsertChildrenCommandArchive* super_;
  bool was_inserted_with_drop_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRemoveTemplateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandRemoveTemplateArchive) */ {
 public:
  inline CommandRemoveTemplateArchive() : CommandRemoveTemplateArchive(nullptr) {}
  ~CommandRemoveTemplateArchive() override;
  explicit constexpr CommandRemoveTemplateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRemoveTemplateArchive(const CommandRemoveTemplateArchive& from);
  CommandRemoveTemplateArchive(CommandRemoveTemplateArchive&& from) noexcept
    : CommandRemoveTemplateArchive() {
    *this = ::std::move(from);
  }

  inline CommandRemoveTemplateArchive& operator=(const CommandRemoveTemplateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRemoveTemplateArchive& operator=(CommandRemoveTemplateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRemoveTemplateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRemoveTemplateArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRemoveTemplateArchive*>(
               &_CommandRemoveTemplateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CommandRemoveTemplateArchive& a, CommandRemoveTemplateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRemoveTemplateArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRemoveTemplateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandRemoveTemplateArchive* New() const final {
    return new CommandRemoveTemplateArchive();
  }

  CommandRemoveTemplateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandRemoveTemplateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRemoveTemplateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandRemoveTemplateArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRemoveTemplateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandRemoveTemplateArchive";
  }
  protected:
  explicit CommandRemoveTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateChangeCommandsFieldNumber = 6,
    kSuperFieldNumber = 1,
    kReplacementTemplateSlideNodeFieldNumber = 5,
    kDefaultTemplateSlideNodeWasReplacedFieldNumber = 7,
  };
  // repeated .TSP.Reference template_change_commands = 6;
  int template_change_commands_size() const;
  private:
  int _internal_template_change_commands_size() const;
  public:
  void clear_template_change_commands();
  ::TSP::Reference* mutable_template_change_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_template_change_commands();
  private:
  const ::TSP::Reference& _internal_template_change_commands(int index) const;
  ::TSP::Reference* _internal_add_template_change_commands();
  public:
  const ::TSP::Reference& template_change_commands(int index) const;
  ::TSP::Reference* add_template_change_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      template_change_commands() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference replacement_template_slide_node = 5;
  bool has_replacement_template_slide_node() const;
  private:
  bool _internal_has_replacement_template_slide_node() const;
  public:
  void clear_replacement_template_slide_node();
  const ::TSP::Reference& replacement_template_slide_node() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_replacement_template_slide_node();
  ::TSP::Reference* mutable_replacement_template_slide_node();
  void set_allocated_replacement_template_slide_node(::TSP::Reference* replacement_template_slide_node);
  private:
  const ::TSP::Reference& _internal_replacement_template_slide_node() const;
  ::TSP::Reference* _internal_mutable_replacement_template_slide_node();
  public:
  void unsafe_arena_set_allocated_replacement_template_slide_node(
      ::TSP::Reference* replacement_template_slide_node);
  ::TSP::Reference* unsafe_arena_release_replacement_template_slide_node();

  // optional bool default_template_slide_node_was_replaced = 7;
  bool has_default_template_slide_node_was_replaced() const;
  private:
  bool _internal_has_default_template_slide_node_was_replaced() const;
  public:
  void clear_default_template_slide_node_was_replaced();
  bool default_template_slide_node_was_replaced() const;
  void set_default_template_slide_node_was_replaced(bool value);
  private:
  bool _internal_default_template_slide_node_was_replaced() const;
  void _internal_set_default_template_slide_node_was_replaced(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandRemoveTemplateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > template_change_commands_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* replacement_template_slide_node_;
  bool default_template_slide_node_was_replaced_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPrimitiveRemoveTemplateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandPrimitiveRemoveTemplateArchive) */ {
 public:
  inline CommandPrimitiveRemoveTemplateArchive() : CommandPrimitiveRemoveTemplateArchive(nullptr) {}
  ~CommandPrimitiveRemoveTemplateArchive() override;
  explicit constexpr CommandPrimitiveRemoveTemplateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPrimitiveRemoveTemplateArchive(const CommandPrimitiveRemoveTemplateArchive& from);
  CommandPrimitiveRemoveTemplateArchive(CommandPrimitiveRemoveTemplateArchive&& from) noexcept
    : CommandPrimitiveRemoveTemplateArchive() {
    *this = ::std::move(from);
  }

  inline CommandPrimitiveRemoveTemplateArchive& operator=(const CommandPrimitiveRemoveTemplateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPrimitiveRemoveTemplateArchive& operator=(CommandPrimitiveRemoveTemplateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPrimitiveRemoveTemplateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPrimitiveRemoveTemplateArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPrimitiveRemoveTemplateArchive*>(
               &_CommandPrimitiveRemoveTemplateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CommandPrimitiveRemoveTemplateArchive& a, CommandPrimitiveRemoveTemplateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPrimitiveRemoveTemplateArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPrimitiveRemoveTemplateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandPrimitiveRemoveTemplateArchive* New() const final {
    return new CommandPrimitiveRemoveTemplateArchive();
  }

  CommandPrimitiveRemoveTemplateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandPrimitiveRemoveTemplateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPrimitiveRemoveTemplateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandPrimitiveRemoveTemplateArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPrimitiveRemoveTemplateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandPrimitiveRemoveTemplateArchive";
  }
  protected:
  explicit CommandPrimitiveRemoveTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousClassicThemeRecordsFieldNumber = 3,
    kSuperFieldNumber = 1,
  };
  // repeated .TSP.Reference previous_classic_theme_records = 3;
  int previous_classic_theme_records_size() const;
  private:
  int _internal_previous_classic_theme_records_size() const;
  public:
  void clear_previous_classic_theme_records();
  ::TSP::Reference* mutable_previous_classic_theme_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_previous_classic_theme_records();
  private:
  const ::TSP::Reference& _internal_previous_classic_theme_records(int index) const;
  ::TSP::Reference* _internal_add_previous_classic_theme_records();
  public:
  const ::TSP::Reference& previous_classic_theme_records(int index) const;
  ::TSP::Reference* add_previous_classic_theme_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      previous_classic_theme_records() const;

  // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ContainerRemoveChildrenCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ContainerRemoveChildrenCommandArchive* release_super();
  ::TSD::ContainerRemoveChildrenCommandArchive* mutable_super();
  void set_allocated_super(::TSD::ContainerRemoveChildrenCommandArchive* super);
  private:
  const ::TSD::ContainerRemoveChildrenCommandArchive& _internal_super() const;
  ::TSD::ContainerRemoveChildrenCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ContainerRemoveChildrenCommandArchive* super);
  ::TSD::ContainerRemoveChildrenCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:KN.CommandPrimitiveRemoveTemplateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > previous_classic_theme_records_;
  ::TSD::ContainerRemoveChildrenCommandArchive* super_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideInsertBuildArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideInsertBuildArchive) */ {
 public:
  inline CommandSlideInsertBuildArchive() : CommandSlideInsertBuildArchive(nullptr) {}
  ~CommandSlideInsertBuildArchive() override;
  explicit constexpr CommandSlideInsertBuildArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideInsertBuildArchive(const CommandSlideInsertBuildArchive& from);
  CommandSlideInsertBuildArchive(CommandSlideInsertBuildArchive&& from) noexcept
    : CommandSlideInsertBuildArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideInsertBuildArchive& operator=(const CommandSlideInsertBuildArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideInsertBuildArchive& operator=(CommandSlideInsertBuildArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideInsertBuildArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideInsertBuildArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideInsertBuildArchive*>(
               &_CommandSlideInsertBuildArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CommandSlideInsertBuildArchive& a, CommandSlideInsertBuildArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideInsertBuildArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideInsertBuildArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideInsertBuildArchive* New() const final {
    return new CommandSlideInsertBuildArchive();
  }

  CommandSlideInsertBuildArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideInsertBuildArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideInsertBuildArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideInsertBuildArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideInsertBuildArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideInsertBuildArchive";
  }
  protected:
  explicit CommandSlideInsertBuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldTuplesToUpdateFieldNumber = 5,
    kSuperFieldNumber = 1,
    kInsertBuildDescriptionFieldNumber = 2,
    kIdentifierForChunkToInsertAfterFieldNumber = 3,
    kShouldCreateChunksFieldNumber = 4,
    kWasInitializedOverTheWireFieldNumber = 6,
    kHasBeenCommittedFieldNumber = 7,
  };
  // repeated .TSP.Reference old_tuples_to_update = 5;
  int old_tuples_to_update_size() const;
  private:
  int _internal_old_tuples_to_update_size() const;
  public:
  void clear_old_tuples_to_update();
  ::TSP::Reference* mutable_old_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_old_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_old_tuples_to_update();
  public:
  const ::TSP::Reference& old_tuples_to_update(int index) const;
  ::TSP::Reference* add_old_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_tuples_to_update() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference insert_build_description = 2;
  bool has_insert_build_description() const;
  private:
  bool _internal_has_insert_build_description() const;
  public:
  void clear_insert_build_description();
  const ::TSP::Reference& insert_build_description() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_insert_build_description();
  ::TSP::Reference* mutable_insert_build_description();
  void set_allocated_insert_build_description(::TSP::Reference* insert_build_description);
  private:
  const ::TSP::Reference& _internal_insert_build_description() const;
  ::TSP::Reference* _internal_mutable_insert_build_description();
  public:
  void unsafe_arena_set_allocated_insert_build_description(
      ::TSP::Reference* insert_build_description);
  ::TSP::Reference* unsafe_arena_release_insert_build_description();

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 3;
  bool has_identifier_for_chunk_to_insert_after() const;
  private:
  bool _internal_has_identifier_for_chunk_to_insert_after() const;
  public:
  void clear_identifier_for_chunk_to_insert_after();
  const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_insert_after() const;
  PROTOBUF_MUST_USE_RESULT ::KN::BuildChunkIdentifierArchive* release_identifier_for_chunk_to_insert_after();
  ::KN::BuildChunkIdentifierArchive* mutable_identifier_for_chunk_to_insert_after();
  void set_allocated_identifier_for_chunk_to_insert_after(::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after);
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifier_for_chunk_to_insert_after() const;
  ::KN::BuildChunkIdentifierArchive* _internal_mutable_identifier_for_chunk_to_insert_after();
  public:
  void unsafe_arena_set_allocated_identifier_for_chunk_to_insert_after(
      ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after);
  ::KN::BuildChunkIdentifierArchive* unsafe_arena_release_identifier_for_chunk_to_insert_after();

  // optional bool should_create_chunks = 4;
  bool has_should_create_chunks() const;
  private:
  bool _internal_has_should_create_chunks() const;
  public:
  void clear_should_create_chunks();
  bool should_create_chunks() const;
  void set_should_create_chunks(bool value);
  private:
  bool _internal_should_create_chunks() const;
  void _internal_set_should_create_chunks(bool value);
  public:

  // optional bool was_initialized_over_the_wire = 6;
  bool has_was_initialized_over_the_wire() const;
  private:
  bool _internal_has_was_initialized_over_the_wire() const;
  public:
  void clear_was_initialized_over_the_wire();
  bool was_initialized_over_the_wire() const;
  void set_was_initialized_over_the_wire(bool value);
  private:
  bool _internal_was_initialized_over_the_wire() const;
  void _internal_set_was_initialized_over_the_wire(bool value);
  public:

  // optional bool has_been_committed = 7;
  bool has_has_been_committed() const;
  private:
  bool _internal_has_has_been_committed() const;
  public:
  void clear_has_been_committed();
  bool has_been_committed() const;
  void set_has_been_committed(bool value);
  private:
  bool _internal_has_been_committed() const;
  void _internal_set_has_been_committed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideInsertBuildArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_tuples_to_update_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* insert_build_description_;
  ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after_;
  bool should_create_chunks_;
  bool was_initialized_over_the_wire_;
  bool has_been_committed_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InsertBuildDescriptionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.InsertBuildDescriptionArchive) */ {
 public:
  inline InsertBuildDescriptionArchive() : InsertBuildDescriptionArchive(nullptr) {}
  ~InsertBuildDescriptionArchive() override;
  explicit constexpr InsertBuildDescriptionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertBuildDescriptionArchive(const InsertBuildDescriptionArchive& from);
  InsertBuildDescriptionArchive(InsertBuildDescriptionArchive&& from) noexcept
    : InsertBuildDescriptionArchive() {
    *this = ::std::move(from);
  }

  inline InsertBuildDescriptionArchive& operator=(const InsertBuildDescriptionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertBuildDescriptionArchive& operator=(InsertBuildDescriptionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertBuildDescriptionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertBuildDescriptionArchive* internal_default_instance() {
    return reinterpret_cast<const InsertBuildDescriptionArchive*>(
               &_InsertBuildDescriptionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(InsertBuildDescriptionArchive& a, InsertBuildDescriptionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertBuildDescriptionArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertBuildDescriptionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertBuildDescriptionArchive* New() const final {
    return new InsertBuildDescriptionArchive();
  }

  InsertBuildDescriptionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertBuildDescriptionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertBuildDescriptionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InsertBuildDescriptionArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertBuildDescriptionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.InsertBuildDescriptionArchive";
  }
  protected:
  explicit InsertBuildDescriptionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksToInsertFieldNumber = 3,
    kIdentifersForChunksToInsertAfterFieldNumber = 5,
    kTuplesToUpdateFieldNumber = 6,
    kFallbackChunkIdentifiersFieldNumber = 7,
    kSlideIdFieldNumber = 1,
    kBuildToInsertFieldNumber = 2,
    kShouldAssignChunkIdentifiersFieldNumber = 4,
    kIsForPasteFieldNumber = 8,
  };
  // repeated .TSP.Reference chunks_to_insert = 3;
  int chunks_to_insert_size() const;
  private:
  int _internal_chunks_to_insert_size() const;
  public:
  void clear_chunks_to_insert();
  ::TSP::Reference* mutable_chunks_to_insert(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_chunks_to_insert();
  private:
  const ::TSP::Reference& _internal_chunks_to_insert(int index) const;
  ::TSP::Reference* _internal_add_chunks_to_insert();
  public:
  const ::TSP::Reference& chunks_to_insert(int index) const;
  ::TSP::Reference* add_chunks_to_insert();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      chunks_to_insert() const;

  // repeated .KN.BuildChunkIdentifierArchive identifers_for_chunks_to_insert_after = 5;
  int identifers_for_chunks_to_insert_after_size() const;
  private:
  int _internal_identifers_for_chunks_to_insert_after_size() const;
  public:
  void clear_identifers_for_chunks_to_insert_after();
  ::KN::BuildChunkIdentifierArchive* mutable_identifers_for_chunks_to_insert_after(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifers_for_chunks_to_insert_after();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifers_for_chunks_to_insert_after(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifers_for_chunks_to_insert_after();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifers_for_chunks_to_insert_after(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifers_for_chunks_to_insert_after();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifers_for_chunks_to_insert_after() const;

  // repeated .TSP.Reference tuples_to_update = 6;
  int tuples_to_update_size() const;
  private:
  int _internal_tuples_to_update_size() const;
  public:
  void clear_tuples_to_update();
  ::TSP::Reference* mutable_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_tuples_to_update();
  public:
  const ::TSP::Reference& tuples_to_update(int index) const;
  ::TSP::Reference* add_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      tuples_to_update() const;

  // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
  int fallback_chunk_identifiers_size() const;
  private:
  int _internal_fallback_chunk_identifiers_size() const;
  public:
  void clear_fallback_chunk_identifiers();
  ::KN::BuildChunkIdentifierArchive* mutable_fallback_chunk_identifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_fallback_chunk_identifiers();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_fallback_chunk_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_fallback_chunk_identifiers();
  public:
  const ::KN::BuildChunkIdentifierArchive& fallback_chunk_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_fallback_chunk_identifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      fallback_chunk_identifiers() const;

  // required .TSP.UUID slide_id = 1;
  bool has_slide_id() const;
  private:
  bool _internal_has_slide_id() const;
  public:
  void clear_slide_id();
  const ::TSP::UUID& slide_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_slide_id();
  ::TSP::UUID* mutable_slide_id();
  void set_allocated_slide_id(::TSP::UUID* slide_id);
  private:
  const ::TSP::UUID& _internal_slide_id() const;
  ::TSP::UUID* _internal_mutable_slide_id();
  public:
  void unsafe_arena_set_allocated_slide_id(
      ::TSP::UUID* slide_id);
  ::TSP::UUID* unsafe_arena_release_slide_id();

  // required .TSP.Reference build_to_insert = 2;
  bool has_build_to_insert() const;
  private:
  bool _internal_has_build_to_insert() const;
  public:
  void clear_build_to_insert();
  const ::TSP::Reference& build_to_insert() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_build_to_insert();
  ::TSP::Reference* mutable_build_to_insert();
  void set_allocated_build_to_insert(::TSP::Reference* build_to_insert);
  private:
  const ::TSP::Reference& _internal_build_to_insert() const;
  ::TSP::Reference* _internal_mutable_build_to_insert();
  public:
  void unsafe_arena_set_allocated_build_to_insert(
      ::TSP::Reference* build_to_insert);
  ::TSP::Reference* unsafe_arena_release_build_to_insert();

  // required bool should_assign_chunk_identifiers = 4;
  bool has_should_assign_chunk_identifiers() const;
  private:
  bool _internal_has_should_assign_chunk_identifiers() const;
  public:
  void clear_should_assign_chunk_identifiers();
  bool should_assign_chunk_identifiers() const;
  void set_should_assign_chunk_identifiers(bool value);
  private:
  bool _internal_should_assign_chunk_identifiers() const;
  void _internal_set_should_assign_chunk_identifiers(bool value);
  public:

  // required bool is_for_paste = 8;
  bool has_is_for_paste() const;
  private:
  bool _internal_has_is_for_paste() const;
  public:
  void clear_is_for_paste();
  bool is_for_paste() const;
  void set_is_for_paste(bool value);
  private:
  bool _internal_is_for_paste() const;
  void _internal_set_is_for_paste(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.InsertBuildDescriptionArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > chunks_to_insert_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifers_for_chunks_to_insert_after_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > tuples_to_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > fallback_chunk_identifiers_;
  ::TSP::UUID* slide_id_;
  ::TSP::Reference* build_to_insert_;
  bool should_assign_chunk_identifiers_;
  bool is_for_paste_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoObjectArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.UndoObjectArchive) */ {
 public:
  inline UndoObjectArchive() : UndoObjectArchive(nullptr) {}
  ~UndoObjectArchive() override;
  explicit constexpr UndoObjectArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoObjectArchive(const UndoObjectArchive& from);
  UndoObjectArchive(UndoObjectArchive&& from) noexcept
    : UndoObjectArchive() {
    *this = ::std::move(from);
  }

  inline UndoObjectArchive& operator=(const UndoObjectArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoObjectArchive& operator=(UndoObjectArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoObjectArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoObjectArchive* internal_default_instance() {
    return reinterpret_cast<const UndoObjectArchive*>(
               &_UndoObjectArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UndoObjectArchive& a, UndoObjectArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoObjectArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoObjectArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoObjectArchive* New() const final {
    return new UndoObjectArchive();
  }

  UndoObjectArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoObjectArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UndoObjectArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UndoObjectArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoObjectArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.UndoObjectArchive";
  }
  protected:
  explicit UndoObjectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSD.UndoObjectArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::UndoObjectArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::UndoObjectArchive* release_super();
  ::TSD::UndoObjectArchive* mutable_super();
  void set_allocated_super(::TSD::UndoObjectArchive* super);
  private:
  const ::TSD::UndoObjectArchive& _internal_super() const;
  ::TSD::UndoObjectArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::UndoObjectArchive* super);
  ::TSD::UndoObjectArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:KN.UndoObjectArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::UndoObjectArchive* super_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideRemoveBuildArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideRemoveBuildArchive) */ {
 public:
  inline CommandSlideRemoveBuildArchive() : CommandSlideRemoveBuildArchive(nullptr) {}
  ~CommandSlideRemoveBuildArchive() override;
  explicit constexpr CommandSlideRemoveBuildArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideRemoveBuildArchive(const CommandSlideRemoveBuildArchive& from);
  CommandSlideRemoveBuildArchive(CommandSlideRemoveBuildArchive&& from) noexcept
    : CommandSlideRemoveBuildArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideRemoveBuildArchive& operator=(const CommandSlideRemoveBuildArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideRemoveBuildArchive& operator=(CommandSlideRemoveBuildArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideRemoveBuildArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideRemoveBuildArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideRemoveBuildArchive*>(
               &_CommandSlideRemoveBuildArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CommandSlideRemoveBuildArchive& a, CommandSlideRemoveBuildArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideRemoveBuildArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideRemoveBuildArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideRemoveBuildArchive* New() const final {
    return new CommandSlideRemoveBuildArchive();
  }

  CommandSlideRemoveBuildArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideRemoveBuildArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideRemoveBuildArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideRemoveBuildArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideRemoveBuildArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideRemoveBuildArchive";
  }
  protected:
  explicit CommandSlideRemoveBuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksToInsertFieldNumber = 4,
    kIdentifiersForChunksToInsertAfterFieldNumber = 5,
    kOldTuplesToUpdateFieldNumber = 6,
    kFallbackChunkIdentifiersFieldNumber = 7,
    kSuperFieldNumber = 1,
    kRemoveBuildDescriptionFieldNumber = 2,
    kBuildFieldNumber = 3,
  };
  // repeated .TSP.Reference chunks_to_insert = 4;
  int chunks_to_insert_size() const;
  private:
  int _internal_chunks_to_insert_size() const;
  public:
  void clear_chunks_to_insert();
  ::TSP::Reference* mutable_chunks_to_insert(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_chunks_to_insert();
  private:
  const ::TSP::Reference& _internal_chunks_to_insert(int index) const;
  ::TSP::Reference* _internal_add_chunks_to_insert();
  public:
  const ::TSP::Reference& chunks_to_insert(int index) const;
  ::TSP::Reference* add_chunks_to_insert();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      chunks_to_insert() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 5;
  int identifiers_for_chunks_to_insert_after_size() const;
  private:
  int _internal_identifiers_for_chunks_to_insert_after_size() const;
  public:
  void clear_identifiers_for_chunks_to_insert_after();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_chunks_to_insert_after(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_chunks_to_insert_after();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_chunks_to_insert_after(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_chunks_to_insert_after();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_chunks_to_insert_after(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_chunks_to_insert_after();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_chunks_to_insert_after() const;

  // repeated .TSP.Reference old_tuples_to_update = 6;
  int old_tuples_to_update_size() const;
  private:
  int _internal_old_tuples_to_update_size() const;
  public:
  void clear_old_tuples_to_update();
  ::TSP::Reference* mutable_old_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_old_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_old_tuples_to_update();
  public:
  const ::TSP::Reference& old_tuples_to_update(int index) const;
  ::TSP::Reference* add_old_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_tuples_to_update() const;

  // repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
  int fallback_chunk_identifiers_size() const;
  private:
  int _internal_fallback_chunk_identifiers_size() const;
  public:
  void clear_fallback_chunk_identifiers();
  ::KN::BuildChunkIdentifierArchive* mutable_fallback_chunk_identifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_fallback_chunk_identifiers();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_fallback_chunk_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_fallback_chunk_identifiers();
  public:
  const ::KN::BuildChunkIdentifierArchive& fallback_chunk_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_fallback_chunk_identifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      fallback_chunk_identifiers() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference remove_build_description = 2;
  bool has_remove_build_description() const;
  private:
  bool _internal_has_remove_build_description() const;
  public:
  void clear_remove_build_description();
  const ::TSP::Reference& remove_build_description() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_remove_build_description();
  ::TSP::Reference* mutable_remove_build_description();
  void set_allocated_remove_build_description(::TSP::Reference* remove_build_description);
  private:
  const ::TSP::Reference& _internal_remove_build_description() const;
  ::TSP::Reference* _internal_mutable_remove_build_description();
  public:
  void unsafe_arena_set_allocated_remove_build_description(
      ::TSP::Reference* remove_build_description);
  ::TSP::Reference* unsafe_arena_release_remove_build_description();

  // optional .TSP.Reference build = 3;
  bool has_build() const;
  private:
  bool _internal_has_build() const;
  public:
  void clear_build();
  const ::TSP::Reference& build() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_build();
  ::TSP::Reference* mutable_build();
  void set_allocated_build(::TSP::Reference* build);
  private:
  const ::TSP::Reference& _internal_build() const;
  ::TSP::Reference* _internal_mutable_build();
  public:
  void unsafe_arena_set_allocated_build(
      ::TSP::Reference* build);
  ::TSP::Reference* unsafe_arena_release_build();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideRemoveBuildArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > chunks_to_insert_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_chunks_to_insert_after_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_tuples_to_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > fallback_chunk_identifiers_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* remove_build_description_;
  ::TSP::Reference* build_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoveBuildDescriptionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.RemoveBuildDescriptionArchive) */ {
 public:
  inline RemoveBuildDescriptionArchive() : RemoveBuildDescriptionArchive(nullptr) {}
  ~RemoveBuildDescriptionArchive() override;
  explicit constexpr RemoveBuildDescriptionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveBuildDescriptionArchive(const RemoveBuildDescriptionArchive& from);
  RemoveBuildDescriptionArchive(RemoveBuildDescriptionArchive&& from) noexcept
    : RemoveBuildDescriptionArchive() {
    *this = ::std::move(from);
  }

  inline RemoveBuildDescriptionArchive& operator=(const RemoveBuildDescriptionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveBuildDescriptionArchive& operator=(RemoveBuildDescriptionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveBuildDescriptionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveBuildDescriptionArchive* internal_default_instance() {
    return reinterpret_cast<const RemoveBuildDescriptionArchive*>(
               &_RemoveBuildDescriptionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(RemoveBuildDescriptionArchive& a, RemoveBuildDescriptionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveBuildDescriptionArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveBuildDescriptionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveBuildDescriptionArchive* New() const final {
    return new RemoveBuildDescriptionArchive();
  }

  RemoveBuildDescriptionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveBuildDescriptionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveBuildDescriptionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveBuildDescriptionArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveBuildDescriptionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.RemoveBuildDescriptionArchive";
  }
  protected:
  explicit RemoveBuildDescriptionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuplesToUpdateFieldNumber = 5,
    kSlideIdFieldNumber = 1,
    kBuildIdFieldNumber = 2,
    kShouldRemoveChunksFieldNumber = 3,
    kShouldRemoveChunkIdentifiersFieldNumber = 4,
  };
  // repeated .TSP.Reference tuples_to_update = 5;
  int tuples_to_update_size() const;
  private:
  int _internal_tuples_to_update_size() const;
  public:
  void clear_tuples_to_update();
  ::TSP::Reference* mutable_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_tuples_to_update();
  public:
  const ::TSP::Reference& tuples_to_update(int index) const;
  ::TSP::Reference* add_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      tuples_to_update() const;

  // optional .TSP.UUID slide_id = 1;
  bool has_slide_id() const;
  private:
  bool _internal_has_slide_id() const;
  public:
  void clear_slide_id();
  const ::TSP::UUID& slide_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_slide_id();
  ::TSP::UUID* mutable_slide_id();
  void set_allocated_slide_id(::TSP::UUID* slide_id);
  private:
  const ::TSP::UUID& _internal_slide_id() const;
  ::TSP::UUID* _internal_mutable_slide_id();
  public:
  void unsafe_arena_set_allocated_slide_id(
      ::TSP::UUID* slide_id);
  ::TSP::UUID* unsafe_arena_release_slide_id();

  // optional .TSP.UUID build_id = 2;
  bool has_build_id() const;
  private:
  bool _internal_has_build_id() const;
  public:
  void clear_build_id();
  const ::TSP::UUID& build_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_build_id();
  ::TSP::UUID* mutable_build_id();
  void set_allocated_build_id(::TSP::UUID* build_id);
  private:
  const ::TSP::UUID& _internal_build_id() const;
  ::TSP::UUID* _internal_mutable_build_id();
  public:
  void unsafe_arena_set_allocated_build_id(
      ::TSP::UUID* build_id);
  ::TSP::UUID* unsafe_arena_release_build_id();

  // optional bool should_remove_chunks = 3;
  bool has_should_remove_chunks() const;
  private:
  bool _internal_has_should_remove_chunks() const;
  public:
  void clear_should_remove_chunks();
  bool should_remove_chunks() const;
  void set_should_remove_chunks(bool value);
  private:
  bool _internal_should_remove_chunks() const;
  void _internal_set_should_remove_chunks(bool value);
  public:

  // optional bool should_remove_chunk_identifiers = 4;
  bool has_should_remove_chunk_identifiers() const;
  private:
  bool _internal_has_should_remove_chunk_identifiers() const;
  public:
  void clear_should_remove_chunk_identifiers();
  bool should_remove_chunk_identifiers() const;
  void set_should_remove_chunk_identifiers(bool value);
  private:
  bool _internal_should_remove_chunk_identifiers() const;
  void _internal_set_should_remove_chunk_identifiers(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.RemoveBuildDescriptionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > tuples_to_update_;
  ::TSP::UUID* slide_id_;
  ::TSP::UUID* build_id_;
  bool should_remove_chunks_;
  bool should_remove_chunk_identifiers_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideInsertBuildChunkArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideInsertBuildChunkArchive) */ {
 public:
  inline CommandSlideInsertBuildChunkArchive() : CommandSlideInsertBuildChunkArchive(nullptr) {}
  ~CommandSlideInsertBuildChunkArchive() override;
  explicit constexpr CommandSlideInsertBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideInsertBuildChunkArchive(const CommandSlideInsertBuildChunkArchive& from);
  CommandSlideInsertBuildChunkArchive(CommandSlideInsertBuildChunkArchive&& from) noexcept
    : CommandSlideInsertBuildChunkArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideInsertBuildChunkArchive& operator=(const CommandSlideInsertBuildChunkArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideInsertBuildChunkArchive& operator=(CommandSlideInsertBuildChunkArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideInsertBuildChunkArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideInsertBuildChunkArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideInsertBuildChunkArchive*>(
               &_CommandSlideInsertBuildChunkArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CommandSlideInsertBuildChunkArchive& a, CommandSlideInsertBuildChunkArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideInsertBuildChunkArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideInsertBuildChunkArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideInsertBuildChunkArchive* New() const final {
    return new CommandSlideInsertBuildChunkArchive();
  }

  CommandSlideInsertBuildChunkArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideInsertBuildChunkArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideInsertBuildChunkArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideInsertBuildChunkArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideInsertBuildChunkArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideInsertBuildChunkArchive";
  }
  protected:
  explicit CommandSlideInsertBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuplesToUpdateFieldNumber = 5,
    kOldTuplesToUpdateFieldNumber = 6,
    kSuperFieldNumber = 1,
    kSlideIdFieldNumber = 2,
    kChunkToInsertFieldNumber = 3,
    kIdentifierForChunkToInsertAfterFieldNumber = 4,
    kNeedsSelectionUpdateFieldNumber = 7,
    kShouldAssignChunkIdentifierFieldNumber = 8,
  };
  // repeated .TSP.Reference tuples_to_update = 5;
  int tuples_to_update_size() const;
  private:
  int _internal_tuples_to_update_size() const;
  public:
  void clear_tuples_to_update();
  ::TSP::Reference* mutable_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_tuples_to_update();
  public:
  const ::TSP::Reference& tuples_to_update(int index) const;
  ::TSP::Reference* add_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      tuples_to_update() const;

  // repeated .TSP.Reference old_tuples_to_update = 6;
  int old_tuples_to_update_size() const;
  private:
  int _internal_old_tuples_to_update_size() const;
  public:
  void clear_old_tuples_to_update();
  ::TSP::Reference* mutable_old_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_old_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_old_tuples_to_update();
  public:
  const ::TSP::Reference& old_tuples_to_update(int index) const;
  ::TSP::Reference* add_old_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_tuples_to_update() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID slide_id = 2;
  bool has_slide_id() const;
  private:
  bool _internal_has_slide_id() const;
  public:
  void clear_slide_id();
  const ::TSP::UUID& slide_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_slide_id();
  ::TSP::UUID* mutable_slide_id();
  void set_allocated_slide_id(::TSP::UUID* slide_id);
  private:
  const ::TSP::UUID& _internal_slide_id() const;
  ::TSP::UUID* _internal_mutable_slide_id();
  public:
  void unsafe_arena_set_allocated_slide_id(
      ::TSP::UUID* slide_id);
  ::TSP::UUID* unsafe_arena_release_slide_id();

  // required .TSP.Reference chunk_to_insert = 3;
  bool has_chunk_to_insert() const;
  private:
  bool _internal_has_chunk_to_insert() const;
  public:
  void clear_chunk_to_insert();
  const ::TSP::Reference& chunk_to_insert() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_chunk_to_insert();
  ::TSP::Reference* mutable_chunk_to_insert();
  void set_allocated_chunk_to_insert(::TSP::Reference* chunk_to_insert);
  private:
  const ::TSP::Reference& _internal_chunk_to_insert() const;
  ::TSP::Reference* _internal_mutable_chunk_to_insert();
  public:
  void unsafe_arena_set_allocated_chunk_to_insert(
      ::TSP::Reference* chunk_to_insert);
  ::TSP::Reference* unsafe_arena_release_chunk_to_insert();

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 4;
  bool has_identifier_for_chunk_to_insert_after() const;
  private:
  bool _internal_has_identifier_for_chunk_to_insert_after() const;
  public:
  void clear_identifier_for_chunk_to_insert_after();
  const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_insert_after() const;
  PROTOBUF_MUST_USE_RESULT ::KN::BuildChunkIdentifierArchive* release_identifier_for_chunk_to_insert_after();
  ::KN::BuildChunkIdentifierArchive* mutable_identifier_for_chunk_to_insert_after();
  void set_allocated_identifier_for_chunk_to_insert_after(::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after);
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifier_for_chunk_to_insert_after() const;
  ::KN::BuildChunkIdentifierArchive* _internal_mutable_identifier_for_chunk_to_insert_after();
  public:
  void unsafe_arena_set_allocated_identifier_for_chunk_to_insert_after(
      ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after);
  ::KN::BuildChunkIdentifierArchive* unsafe_arena_release_identifier_for_chunk_to_insert_after();

  // optional bool needs_selection_update = 7;
  bool has_needs_selection_update() const;
  private:
  bool _internal_has_needs_selection_update() const;
  public:
  void clear_needs_selection_update();
  bool needs_selection_update() const;
  void set_needs_selection_update(bool value);
  private:
  bool _internal_needs_selection_update() const;
  void _internal_set_needs_selection_update(bool value);
  public:

  // optional bool should_assign_chunk_identifier = 8;
  bool has_should_assign_chunk_identifier() const;
  private:
  bool _internal_has_should_assign_chunk_identifier() const;
  public:
  void clear_should_assign_chunk_identifier();
  bool should_assign_chunk_identifier() const;
  void set_should_assign_chunk_identifier(bool value);
  private:
  bool _internal_should_assign_chunk_identifier() const;
  void _internal_set_should_assign_chunk_identifier(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideInsertBuildChunkArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > tuples_to_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_tuples_to_update_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* slide_id_;
  ::TSP::Reference* chunk_to_insert_;
  ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after_;
  bool needs_selection_update_;
  bool should_assign_chunk_identifier_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideRemoveBuildChunkArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideRemoveBuildChunkArchive) */ {
 public:
  inline CommandSlideRemoveBuildChunkArchive() : CommandSlideRemoveBuildChunkArchive(nullptr) {}
  ~CommandSlideRemoveBuildChunkArchive() override;
  explicit constexpr CommandSlideRemoveBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideRemoveBuildChunkArchive(const CommandSlideRemoveBuildChunkArchive& from);
  CommandSlideRemoveBuildChunkArchive(CommandSlideRemoveBuildChunkArchive&& from) noexcept
    : CommandSlideRemoveBuildChunkArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideRemoveBuildChunkArchive& operator=(const CommandSlideRemoveBuildChunkArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideRemoveBuildChunkArchive& operator=(CommandSlideRemoveBuildChunkArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideRemoveBuildChunkArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideRemoveBuildChunkArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideRemoveBuildChunkArchive*>(
               &_CommandSlideRemoveBuildChunkArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CommandSlideRemoveBuildChunkArchive& a, CommandSlideRemoveBuildChunkArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideRemoveBuildChunkArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideRemoveBuildChunkArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideRemoveBuildChunkArchive* New() const final {
    return new CommandSlideRemoveBuildChunkArchive();
  }

  CommandSlideRemoveBuildChunkArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideRemoveBuildChunkArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideRemoveBuildChunkArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideRemoveBuildChunkArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideRemoveBuildChunkArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideRemoveBuildChunkArchive";
  }
  protected:
  explicit CommandSlideRemoveBuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuplesToUpdateFieldNumber = 6,
    kOldTuplesToUpdateFieldNumber = 7,
    kSuperFieldNumber = 1,
    kSlideIdFieldNumber = 2,
    kRemovedChunkFieldNumber = 3,
    kIdentifierForChunkToRemoveFieldNumber = 4,
    kIdentifierForChunkToInsertAfterFieldNumber = 5,
    kNeedsSelectionUpdateFieldNumber = 8,
  };
  // repeated .TSP.Reference tuples_to_update = 6;
  int tuples_to_update_size() const;
  private:
  int _internal_tuples_to_update_size() const;
  public:
  void clear_tuples_to_update();
  ::TSP::Reference* mutable_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_tuples_to_update();
  public:
  const ::TSP::Reference& tuples_to_update(int index) const;
  ::TSP::Reference* add_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      tuples_to_update() const;

  // repeated .TSP.Reference old_tuples_to_update = 7;
  int old_tuples_to_update_size() const;
  private:
  int _internal_old_tuples_to_update_size() const;
  public:
  void clear_old_tuples_to_update();
  ::TSP::Reference* mutable_old_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_old_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_old_tuples_to_update();
  public:
  const ::TSP::Reference& old_tuples_to_update(int index) const;
  ::TSP::Reference* add_old_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_tuples_to_update() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID slide_id = 2;
  bool has_slide_id() const;
  private:
  bool _internal_has_slide_id() const;
  public:
  void clear_slide_id();
  const ::TSP::UUID& slide_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_slide_id();
  ::TSP::UUID* mutable_slide_id();
  void set_allocated_slide_id(::TSP::UUID* slide_id);
  private:
  const ::TSP::UUID& _internal_slide_id() const;
  ::TSP::UUID* _internal_mutable_slide_id();
  public:
  void unsafe_arena_set_allocated_slide_id(
      ::TSP::UUID* slide_id);
  ::TSP::UUID* unsafe_arena_release_slide_id();

  // optional .TSP.Reference removed_chunk = 3;
  bool has_removed_chunk() const;
  private:
  bool _internal_has_removed_chunk() const;
  public:
  void clear_removed_chunk();
  const ::TSP::Reference& removed_chunk() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_removed_chunk();
  ::TSP::Reference* mutable_removed_chunk();
  void set_allocated_removed_chunk(::TSP::Reference* removed_chunk);
  private:
  const ::TSP::Reference& _internal_removed_chunk() const;
  ::TSP::Reference* _internal_mutable_removed_chunk();
  public:
  void unsafe_arena_set_allocated_removed_chunk(
      ::TSP::Reference* removed_chunk);
  ::TSP::Reference* unsafe_arena_release_removed_chunk();

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_remove = 4;
  bool has_identifier_for_chunk_to_remove() const;
  private:
  bool _internal_has_identifier_for_chunk_to_remove() const;
  public:
  void clear_identifier_for_chunk_to_remove();
  const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_remove() const;
  PROTOBUF_MUST_USE_RESULT ::KN::BuildChunkIdentifierArchive* release_identifier_for_chunk_to_remove();
  ::KN::BuildChunkIdentifierArchive* mutable_identifier_for_chunk_to_remove();
  void set_allocated_identifier_for_chunk_to_remove(::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_remove);
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifier_for_chunk_to_remove() const;
  ::KN::BuildChunkIdentifierArchive* _internal_mutable_identifier_for_chunk_to_remove();
  public:
  void unsafe_arena_set_allocated_identifier_for_chunk_to_remove(
      ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_remove);
  ::KN::BuildChunkIdentifierArchive* unsafe_arena_release_identifier_for_chunk_to_remove();

  // optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 5;
  bool has_identifier_for_chunk_to_insert_after() const;
  private:
  bool _internal_has_identifier_for_chunk_to_insert_after() const;
  public:
  void clear_identifier_for_chunk_to_insert_after();
  const ::KN::BuildChunkIdentifierArchive& identifier_for_chunk_to_insert_after() const;
  PROTOBUF_MUST_USE_RESULT ::KN::BuildChunkIdentifierArchive* release_identifier_for_chunk_to_insert_after();
  ::KN::BuildChunkIdentifierArchive* mutable_identifier_for_chunk_to_insert_after();
  void set_allocated_identifier_for_chunk_to_insert_after(::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after);
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifier_for_chunk_to_insert_after() const;
  ::KN::BuildChunkIdentifierArchive* _internal_mutable_identifier_for_chunk_to_insert_after();
  public:
  void unsafe_arena_set_allocated_identifier_for_chunk_to_insert_after(
      ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after);
  ::KN::BuildChunkIdentifierArchive* unsafe_arena_release_identifier_for_chunk_to_insert_after();

  // optional bool needs_selection_update = 8;
  bool has_needs_selection_update() const;
  private:
  bool _internal_has_needs_selection_update() const;
  public:
  void clear_needs_selection_update();
  bool needs_selection_update() const;
  void set_needs_selection_update(bool value);
  private:
  bool _internal_needs_selection_update() const;
  void _internal_set_needs_selection_update(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSlideRemoveBuildChunkArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > tuples_to_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_tuples_to_update_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* slide_id_;
  ::TSP::Reference* removed_chunk_;
  ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_remove_;
  ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after_;
  bool needs_selection_update_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideMoveBuildChunksArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideMoveBuildChunksArchive) */ {
 public:
  inline CommandSlideMoveBuildChunksArchive() : CommandSlideMoveBuildChunksArchive(nullptr) {}
  ~CommandSlideMoveBuildChunksArchive() override;
  explicit constexpr CommandSlideMoveBuildChunksArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideMoveBuildChunksArchive(const CommandSlideMoveBuildChunksArchive& from);
  CommandSlideMoveBuildChunksArchive(CommandSlideMoveBuildChunksArchive&& from) noexcept
    : CommandSlideMoveBuildChunksArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideMoveBuildChunksArchive& operator=(const CommandSlideMoveBuildChunksArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideMoveBuildChunksArchive& operator=(CommandSlideMoveBuildChunksArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideMoveBuildChunksArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideMoveBuildChunksArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideMoveBuildChunksArchive*>(
               &_CommandSlideMoveBuildChunksArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CommandSlideMoveBuildChunksArchive& a, CommandSlideMoveBuildChunksArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideMoveBuildChunksArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideMoveBuildChunksArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideMoveBuildChunksArchive* New() const final {
    return new CommandSlideMoveBuildChunksArchive();
  }

  CommandSlideMoveBuildChunksArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideMoveBuildChunksArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideMoveBuildChunksArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideMoveBuildChunksArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideMoveBuildChunksArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideMoveBuildChunksArchive";
  }
  protected:
  explicit CommandSlideMoveBuildChunksArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiersForChunksToMoveFieldNumber = 2,
    kIdentifiersForChunksToMoveAfterFieldNumber = 3,
    kIdentifiersForChunksToMoveAfterForUndoFieldNumber = 4,
    kTuplesToUpdateFieldNumber = 5,
    kOldTuplesToUpdateFieldNumber = 6,
    kIdentifiersForChunksToMoveIncludingClusteredInactiveChunksFieldNumber = 7,
    kSuperFieldNumber = 1,
  };
  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move = 2;
  int identifiers_for_chunks_to_move_size() const;
  private:
  int _internal_identifiers_for_chunks_to_move_size() const;
  public:
  void clear_identifiers_for_chunks_to_move();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_chunks_to_move(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_chunks_to_move();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_chunks_to_move(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_chunks_to_move();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_chunks_to_move(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_chunks_to_move();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_chunks_to_move() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after = 3;
  int identifiers_for_chunks_to_move_after_size() const;
  private:
  int _internal_identifiers_for_chunks_to_move_after_size() const;
  public:
  void clear_identifiers_for_chunks_to_move_after();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_chunks_to_move_after(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_chunks_to_move_after();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_chunks_to_move_after(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_chunks_to_move_after();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_chunks_to_move_after(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_chunks_to_move_after();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_chunks_to_move_after() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after_for_undo = 4;
  int identifiers_for_chunks_to_move_after_for_undo_size() const;
  private:
  int _internal_identifiers_for_chunks_to_move_after_for_undo_size() const;
  public:
  void clear_identifiers_for_chunks_to_move_after_for_undo();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_chunks_to_move_after_for_undo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_chunks_to_move_after_for_undo();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_chunks_to_move_after_for_undo(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_chunks_to_move_after_for_undo();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_chunks_to_move_after_for_undo(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_chunks_to_move_after_for_undo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_chunks_to_move_after_for_undo() const;

  // repeated .TSP.Reference tuples_to_update = 5;
  int tuples_to_update_size() const;
  private:
  int _internal_tuples_to_update_size() const;
  public:
  void clear_tuples_to_update();
  ::TSP::Reference* mutable_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_tuples_to_update();
  public:
  const ::TSP::Reference& tuples_to_update(int index) const;
  ::TSP::Reference* add_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      tuples_to_update() const;

  // repeated .TSP.Reference old_tuples_to_update = 6;
  int old_tuples_to_update_size() const;
  private:
  int _internal_old_tuples_to_update_size() const;
  public:
  void clear_old_tuples_to_update();
  ::TSP::Reference* mutable_old_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_old_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_old_tuples_to_update();
  public:
  const ::TSP::Reference& old_tuples_to_update(int index) const;
  ::TSP::Reference* add_old_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_tuples_to_update() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_including_clustered_inactive_chunks = 7;
  int identifiers_for_chunks_to_move_including_clustered_inactive_chunks_size() const;
  private:
  int _internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks_size() const;
  public:
  void clear_identifiers_for_chunks_to_move_including_clustered_inactive_chunks();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_chunks_to_move_including_clustered_inactive_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_chunks_to_move_including_clustered_inactive_chunks();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_chunks_to_move_including_clustered_inactive_chunks();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_chunks_to_move_including_clustered_inactive_chunks(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_chunks_to_move_including_clustered_inactive_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_chunks_to_move_including_clustered_inactive_chunks() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideMoveBuildChunksArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_chunks_to_move_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_chunks_to_move_after_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_chunks_to_move_after_for_undo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > tuples_to_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_tuples_to_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_chunks_to_move_including_clustered_inactive_chunks_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandBuildSetValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandBuildSetValueArchive) */ {
 public:
  inline CommandBuildSetValueArchive() : CommandBuildSetValueArchive(nullptr) {}
  ~CommandBuildSetValueArchive() override;
  explicit constexpr CommandBuildSetValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandBuildSetValueArchive(const CommandBuildSetValueArchive& from);
  CommandBuildSetValueArchive(CommandBuildSetValueArchive&& from) noexcept
    : CommandBuildSetValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandBuildSetValueArchive& operator=(const CommandBuildSetValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandBuildSetValueArchive& operator=(CommandBuildSetValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandBuildSetValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandBuildSetValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandBuildSetValueArchive*>(
               &_CommandBuildSetValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CommandBuildSetValueArchive& a, CommandBuildSetValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandBuildSetValueArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandBuildSetValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandBuildSetValueArchive* New() const final {
    return new CommandBuildSetValueArchive();
  }

  CommandBuildSetValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandBuildSetValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandBuildSetValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandBuildSetValueArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandBuildSetValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandBuildSetValueArchive";
  }
  protected:
  explicit CommandBuildSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksToAddFieldNumber = 3,
    kIdentifiersForChunksToInsertAfterFieldNumber = 4,
    kIdentifiersForChunksToRemoveFieldNumber = 5,
    kTuplesToUpdateFieldNumber = 6,
    kOldTuplesToUpdateForSubCommandsFieldNumber = 8,
    kIdentifiersForAddedChunksFieldNumber = 9,
    kGeneratedIdentifiersFieldNumber = 10,
    kRemovedChunksFieldNumber = 11,
    kIdentifiersForChunksPriorToRemovedChunksFieldNumber = 12,
    kOldChunkIdentifiersFieldNumber = 14,
    kChunksRemovedDuringUndoFieldNumber = 15,
    kSuperFieldNumber = 1,
    kTupleFieldNumber = 2,
    kOldTupleForMainPropertyFieldNumber = 7,
    kOldChunkIDSeedFieldNumber = 13,
  };
  // repeated .TSP.Reference chunks_to_add = 3;
  int chunks_to_add_size() const;
  private:
  int _internal_chunks_to_add_size() const;
  public:
  void clear_chunks_to_add();
  ::TSP::Reference* mutable_chunks_to_add(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_chunks_to_add();
  private:
  const ::TSP::Reference& _internal_chunks_to_add(int index) const;
  ::TSP::Reference* _internal_add_chunks_to_add();
  public:
  const ::TSP::Reference& chunks_to_add(int index) const;
  ::TSP::Reference* add_chunks_to_add();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      chunks_to_add() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 4;
  int identifiers_for_chunks_to_insert_after_size() const;
  private:
  int _internal_identifiers_for_chunks_to_insert_after_size() const;
  public:
  void clear_identifiers_for_chunks_to_insert_after();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_chunks_to_insert_after(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_chunks_to_insert_after();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_chunks_to_insert_after(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_chunks_to_insert_after();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_chunks_to_insert_after(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_chunks_to_insert_after();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_chunks_to_insert_after() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 5;
  int identifiers_for_chunks_to_remove_size() const;
  private:
  int _internal_identifiers_for_chunks_to_remove_size() const;
  public:
  void clear_identifiers_for_chunks_to_remove();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_chunks_to_remove(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_chunks_to_remove();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_chunks_to_remove(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_chunks_to_remove();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_chunks_to_remove(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_chunks_to_remove();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_chunks_to_remove() const;

  // repeated .TSP.Reference tuples_to_update = 6;
  int tuples_to_update_size() const;
  private:
  int _internal_tuples_to_update_size() const;
  public:
  void clear_tuples_to_update();
  ::TSP::Reference* mutable_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_tuples_to_update();
  public:
  const ::TSP::Reference& tuples_to_update(int index) const;
  ::TSP::Reference* add_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      tuples_to_update() const;

  // repeated .TSP.Reference old_tuples_to_update_for_sub_commands = 8;
  int old_tuples_to_update_for_sub_commands_size() const;
  private:
  int _internal_old_tuples_to_update_for_sub_commands_size() const;
  public:
  void clear_old_tuples_to_update_for_sub_commands();
  ::TSP::Reference* mutable_old_tuples_to_update_for_sub_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_tuples_to_update_for_sub_commands();
  private:
  const ::TSP::Reference& _internal_old_tuples_to_update_for_sub_commands(int index) const;
  ::TSP::Reference* _internal_add_old_tuples_to_update_for_sub_commands();
  public:
  const ::TSP::Reference& old_tuples_to_update_for_sub_commands(int index) const;
  ::TSP::Reference* add_old_tuples_to_update_for_sub_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_tuples_to_update_for_sub_commands() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 9;
  int identifiers_for_added_chunks_size() const;
  private:
  int _internal_identifiers_for_added_chunks_size() const;
  public:
  void clear_identifiers_for_added_chunks();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_added_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_added_chunks();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_added_chunks(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_added_chunks();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_added_chunks(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_added_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_added_chunks() const;

  // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 10;
  int generated_identifiers_size() const;
  private:
  int _internal_generated_identifiers_size() const;
  public:
  void clear_generated_identifiers();
  ::KN::BuildChunkIdentifierArchive* mutable_generated_identifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_generated_identifiers();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_generated_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_generated_identifiers();
  public:
  const ::KN::BuildChunkIdentifierArchive& generated_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_generated_identifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      generated_identifiers() const;

  // repeated .TSP.Reference removed_chunks = 11;
  int removed_chunks_size() const;
  private:
  int _internal_removed_chunks_size() const;
  public:
  void clear_removed_chunks();
  ::TSP::Reference* mutable_removed_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_removed_chunks();
  private:
  const ::TSP::Reference& _internal_removed_chunks(int index) const;
  ::TSP::Reference* _internal_add_removed_chunks();
  public:
  const ::TSP::Reference& removed_chunks(int index) const;
  ::TSP::Reference* add_removed_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      removed_chunks() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 12;
  int identifiers_for_chunks_prior_to_removed_chunks_size() const;
  private:
  int _internal_identifiers_for_chunks_prior_to_removed_chunks_size() const;
  public:
  void clear_identifiers_for_chunks_prior_to_removed_chunks();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_chunks_prior_to_removed_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_chunks_prior_to_removed_chunks();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_chunks_prior_to_removed_chunks(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_chunks_prior_to_removed_chunks();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_chunks_prior_to_removed_chunks(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_chunks_prior_to_removed_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_chunks_prior_to_removed_chunks() const;

  // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 14;
  int old_chunk_identifiers_size() const;
  private:
  int _internal_old_chunk_identifiers_size() const;
  public:
  void clear_old_chunk_identifiers();
  ::KN::BuildChunkIdentifierArchive* mutable_old_chunk_identifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_old_chunk_identifiers();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_old_chunk_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_old_chunk_identifiers();
  public:
  const ::KN::BuildChunkIdentifierArchive& old_chunk_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_old_chunk_identifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      old_chunk_identifiers() const;

  // repeated .TSP.Reference chunks_removed_during_undo = 15;
  int chunks_removed_during_undo_size() const;
  private:
  int _internal_chunks_removed_during_undo_size() const;
  public:
  void clear_chunks_removed_during_undo();
  ::TSP::Reference* mutable_chunks_removed_during_undo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_chunks_removed_during_undo();
  private:
  const ::TSP::Reference& _internal_chunks_removed_during_undo(int index) const;
  ::TSP::Reference* _internal_add_chunks_removed_during_undo();
  public:
  const ::TSP::Reference& chunks_removed_during_undo(int index) const;
  ::TSP::Reference* add_chunks_removed_during_undo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      chunks_removed_during_undo() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference tuple = 2;
  bool has_tuple() const;
  private:
  bool _internal_has_tuple() const;
  public:
  void clear_tuple();
  const ::TSP::Reference& tuple() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_tuple();
  ::TSP::Reference* mutable_tuple();
  void set_allocated_tuple(::TSP::Reference* tuple);
  private:
  const ::TSP::Reference& _internal_tuple() const;
  ::TSP::Reference* _internal_mutable_tuple();
  public:
  void unsafe_arena_set_allocated_tuple(
      ::TSP::Reference* tuple);
  ::TSP::Reference* unsafe_arena_release_tuple();

  // optional .TSP.Reference old_tuple_for_main_property = 7;
  bool has_old_tuple_for_main_property() const;
  private:
  bool _internal_has_old_tuple_for_main_property() const;
  public:
  void clear_old_tuple_for_main_property();
  const ::TSP::Reference& old_tuple_for_main_property() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_tuple_for_main_property();
  ::TSP::Reference* mutable_old_tuple_for_main_property();
  void set_allocated_old_tuple_for_main_property(::TSP::Reference* old_tuple_for_main_property);
  private:
  const ::TSP::Reference& _internal_old_tuple_for_main_property() const;
  ::TSP::Reference* _internal_mutable_old_tuple_for_main_property();
  public:
  void unsafe_arena_set_allocated_old_tuple_for_main_property(
      ::TSP::Reference* old_tuple_for_main_property);
  ::TSP::Reference* unsafe_arena_release_old_tuple_for_main_property();

  // optional uint32 old_chunk_ID_seed = 13;
  bool has_old_chunk_id_seed() const;
  private:
  bool _internal_has_old_chunk_id_seed() const;
  public:
  void clear_old_chunk_id_seed();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_chunk_id_seed() const;
  void set_old_chunk_id_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_chunk_id_seed() const;
  void _internal_set_old_chunk_id_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandBuildSetValueArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > chunks_to_add_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_chunks_to_insert_after_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_chunks_to_remove_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > tuples_to_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_tuples_to_update_for_sub_commands_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_added_chunks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > generated_identifiers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > removed_chunks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_chunks_prior_to_removed_chunks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > old_chunk_identifiers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > chunks_removed_during_undo_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* tuple_;
  ::TSP::Reference* old_tuple_for_main_property_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_chunk_id_seed_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandBuildUpdateChunkReferentsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandBuildUpdateChunkReferentsArchive) */ {
 public:
  inline CommandBuildUpdateChunkReferentsArchive() : CommandBuildUpdateChunkReferentsArchive(nullptr) {}
  ~CommandBuildUpdateChunkReferentsArchive() override;
  explicit constexpr CommandBuildUpdateChunkReferentsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandBuildUpdateChunkReferentsArchive(const CommandBuildUpdateChunkReferentsArchive& from);
  CommandBuildUpdateChunkReferentsArchive(CommandBuildUpdateChunkReferentsArchive&& from) noexcept
    : CommandBuildUpdateChunkReferentsArchive() {
    *this = ::std::move(from);
  }

  inline CommandBuildUpdateChunkReferentsArchive& operator=(const CommandBuildUpdateChunkReferentsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandBuildUpdateChunkReferentsArchive& operator=(CommandBuildUpdateChunkReferentsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandBuildUpdateChunkReferentsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandBuildUpdateChunkReferentsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandBuildUpdateChunkReferentsArchive*>(
               &_CommandBuildUpdateChunkReferentsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CommandBuildUpdateChunkReferentsArchive& a, CommandBuildUpdateChunkReferentsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandBuildUpdateChunkReferentsArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandBuildUpdateChunkReferentsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandBuildUpdateChunkReferentsArchive* New() const final {
    return new CommandBuildUpdateChunkReferentsArchive();
  }

  CommandBuildUpdateChunkReferentsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandBuildUpdateChunkReferentsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandBuildUpdateChunkReferentsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandBuildUpdateChunkReferentsArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandBuildUpdateChunkReferentsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandBuildUpdateChunkReferentsArchive";
  }
  protected:
  explicit CommandBuildUpdateChunkReferentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuplesToUpdateFieldNumber = 3,
    kOldTuplesToUpdateFieldNumber = 4,
    kSuperFieldNumber = 1,
    kBuildIdFieldNumber = 2,
  };
  // repeated .TSP.Reference tuples_to_update = 3;
  int tuples_to_update_size() const;
  private:
  int _internal_tuples_to_update_size() const;
  public:
  void clear_tuples_to_update();
  ::TSP::Reference* mutable_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_tuples_to_update();
  public:
  const ::TSP::Reference& tuples_to_update(int index) const;
  ::TSP::Reference* add_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      tuples_to_update() const;

  // repeated .TSP.Reference old_tuples_to_update = 4;
  int old_tuples_to_update_size() const;
  private:
  int _internal_old_tuples_to_update_size() const;
  public:
  void clear_old_tuples_to_update();
  ::TSP::Reference* mutable_old_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_old_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_old_tuples_to_update();
  public:
  const ::TSP::Reference& old_tuples_to_update(int index) const;
  ::TSP::Reference* add_old_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_tuples_to_update() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID build_id = 2;
  bool has_build_id() const;
  private:
  bool _internal_has_build_id() const;
  public:
  void clear_build_id();
  const ::TSP::UUID& build_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_build_id();
  ::TSP::UUID* mutable_build_id();
  void set_allocated_build_id(::TSP::UUID* build_id);
  private:
  const ::TSP::UUID& _internal_build_id() const;
  ::TSP::UUID* _internal_mutable_build_id();
  public:
  void unsafe_arena_set_allocated_build_id(
      ::TSP::UUID* build_id);
  ::TSP::UUID* unsafe_arena_release_build_id();

  // @@protoc_insertion_point(class_scope:KN.CommandBuildUpdateChunkReferentsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > tuples_to_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_tuples_to_update_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* build_id_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandBuildUpdateChunkCountArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandBuildUpdateChunkCountArchive) */ {
 public:
  inline CommandBuildUpdateChunkCountArchive() : CommandBuildUpdateChunkCountArchive(nullptr) {}
  ~CommandBuildUpdateChunkCountArchive() override;
  explicit constexpr CommandBuildUpdateChunkCountArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandBuildUpdateChunkCountArchive(const CommandBuildUpdateChunkCountArchive& from);
  CommandBuildUpdateChunkCountArchive(CommandBuildUpdateChunkCountArchive&& from) noexcept
    : CommandBuildUpdateChunkCountArchive() {
    *this = ::std::move(from);
  }

  inline CommandBuildUpdateChunkCountArchive& operator=(const CommandBuildUpdateChunkCountArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandBuildUpdateChunkCountArchive& operator=(CommandBuildUpdateChunkCountArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandBuildUpdateChunkCountArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandBuildUpdateChunkCountArchive* internal_default_instance() {
    return reinterpret_cast<const CommandBuildUpdateChunkCountArchive*>(
               &_CommandBuildUpdateChunkCountArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CommandBuildUpdateChunkCountArchive& a, CommandBuildUpdateChunkCountArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandBuildUpdateChunkCountArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandBuildUpdateChunkCountArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandBuildUpdateChunkCountArchive* New() const final {
    return new CommandBuildUpdateChunkCountArchive();
  }

  CommandBuildUpdateChunkCountArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandBuildUpdateChunkCountArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandBuildUpdateChunkCountArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandBuildUpdateChunkCountArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandBuildUpdateChunkCountArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandBuildUpdateChunkCountArchive";
  }
  protected:
  explicit CommandBuildUpdateChunkCountArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableIdsFieldNumber = 3,
    kExpectedDeliveryStyleTuplesFieldNumber = 4,
    kChunksToAddFieldNumber = 5,
    kIdentifiersForChunksToInsertAfterFieldNumber = 6,
    kIdentifiersForChunksToRemoveFieldNumber = 7,
    kTuplesToUpdateFieldNumber = 8,
    kOldTuplesToUpdateFieldNumber = 10,
    kIdentifiersForAddedChunksFieldNumber = 11,
    kGeneratedIdentifiersFieldNumber = 12,
    kRemovedChunksFieldNumber = 13,
    kIdentifiersForChunksPriorToRemovedChunksFieldNumber = 14,
    kOldDeliveryStyleTuplesFieldNumber = 15,
    kOldChunkIDSeedsFieldNumber = 16,
    kOldChunkIdentifiersFieldNumber = 17,
    kWorkingBuildsFieldNumber = 18,
    kChunksRemovedDuringUndoFieldNumber = 19,
    kChunksAddedDuringUndoFieldNumber = 20,
    kSuperFieldNumber = 1,
    kSlideIdFieldNumber = 2,
    kNeedsAsyncProcessChangesSelectionUpdateFieldNumber = 9,
  };
  // repeated .TSP.UUID drawable_ids = 3;
  int drawable_ids_size() const;
  private:
  int _internal_drawable_ids_size() const;
  public:
  void clear_drawable_ids();
  ::TSP::UUID* mutable_drawable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_drawable_ids();
  private:
  const ::TSP::UUID& _internal_drawable_ids(int index) const;
  ::TSP::UUID* _internal_add_drawable_ids();
  public:
  const ::TSP::UUID& drawable_ids(int index) const;
  ::TSP::UUID* add_drawable_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      drawable_ids() const;

  // repeated .TSP.Reference expected_delivery_style_tuples = 4;
  int expected_delivery_style_tuples_size() const;
  private:
  int _internal_expected_delivery_style_tuples_size() const;
  public:
  void clear_expected_delivery_style_tuples();
  ::TSP::Reference* mutable_expected_delivery_style_tuples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_expected_delivery_style_tuples();
  private:
  const ::TSP::Reference& _internal_expected_delivery_style_tuples(int index) const;
  ::TSP::Reference* _internal_add_expected_delivery_style_tuples();
  public:
  const ::TSP::Reference& expected_delivery_style_tuples(int index) const;
  ::TSP::Reference* add_expected_delivery_style_tuples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      expected_delivery_style_tuples() const;

  // repeated .TSP.Reference chunks_to_add = 5;
  int chunks_to_add_size() const;
  private:
  int _internal_chunks_to_add_size() const;
  public:
  void clear_chunks_to_add();
  ::TSP::Reference* mutable_chunks_to_add(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_chunks_to_add();
  private:
  const ::TSP::Reference& _internal_chunks_to_add(int index) const;
  ::TSP::Reference* _internal_add_chunks_to_add();
  public:
  const ::TSP::Reference& chunks_to_add(int index) const;
  ::TSP::Reference* add_chunks_to_add();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      chunks_to_add() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 6;
  int identifiers_for_chunks_to_insert_after_size() const;
  private:
  int _internal_identifiers_for_chunks_to_insert_after_size() const;
  public:
  void clear_identifiers_for_chunks_to_insert_after();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_chunks_to_insert_after(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_chunks_to_insert_after();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_chunks_to_insert_after(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_chunks_to_insert_after();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_chunks_to_insert_after(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_chunks_to_insert_after();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_chunks_to_insert_after() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 7;
  int identifiers_for_chunks_to_remove_size() const;
  private:
  int _internal_identifiers_for_chunks_to_remove_size() const;
  public:
  void clear_identifiers_for_chunks_to_remove();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_chunks_to_remove(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_chunks_to_remove();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_chunks_to_remove(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_chunks_to_remove();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_chunks_to_remove(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_chunks_to_remove();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_chunks_to_remove() const;

  // repeated .TSP.Reference tuples_to_update = 8;
  int tuples_to_update_size() const;
  private:
  int _internal_tuples_to_update_size() const;
  public:
  void clear_tuples_to_update();
  ::TSP::Reference* mutable_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_tuples_to_update();
  public:
  const ::TSP::Reference& tuples_to_update(int index) const;
  ::TSP::Reference* add_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      tuples_to_update() const;

  // repeated .TSP.Reference old_tuples_to_update = 10;
  int old_tuples_to_update_size() const;
  private:
  int _internal_old_tuples_to_update_size() const;
  public:
  void clear_old_tuples_to_update();
  ::TSP::Reference* mutable_old_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_old_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_old_tuples_to_update();
  public:
  const ::TSP::Reference& old_tuples_to_update(int index) const;
  ::TSP::Reference* add_old_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_tuples_to_update() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 11;
  int identifiers_for_added_chunks_size() const;
  private:
  int _internal_identifiers_for_added_chunks_size() const;
  public:
  void clear_identifiers_for_added_chunks();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_added_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_added_chunks();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_added_chunks(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_added_chunks();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_added_chunks(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_added_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_added_chunks() const;

  // repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 12;
  int generated_identifiers_size() const;
  private:
  int _internal_generated_identifiers_size() const;
  public:
  void clear_generated_identifiers();
  ::KN::BuildChunkIdentifierArchive* mutable_generated_identifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_generated_identifiers();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_generated_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_generated_identifiers();
  public:
  const ::KN::BuildChunkIdentifierArchive& generated_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_generated_identifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      generated_identifiers() const;

  // repeated .TSP.Reference removed_chunks = 13;
  int removed_chunks_size() const;
  private:
  int _internal_removed_chunks_size() const;
  public:
  void clear_removed_chunks();
  ::TSP::Reference* mutable_removed_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_removed_chunks();
  private:
  const ::TSP::Reference& _internal_removed_chunks(int index) const;
  ::TSP::Reference* _internal_add_removed_chunks();
  public:
  const ::TSP::Reference& removed_chunks(int index) const;
  ::TSP::Reference* add_removed_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      removed_chunks() const;

  // repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 14;
  int identifiers_for_chunks_prior_to_removed_chunks_size() const;
  private:
  int _internal_identifiers_for_chunks_prior_to_removed_chunks_size() const;
  public:
  void clear_identifiers_for_chunks_prior_to_removed_chunks();
  ::KN::BuildChunkIdentifierArchive* mutable_identifiers_for_chunks_prior_to_removed_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_identifiers_for_chunks_prior_to_removed_chunks();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_identifiers_for_chunks_prior_to_removed_chunks(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_identifiers_for_chunks_prior_to_removed_chunks();
  public:
  const ::KN::BuildChunkIdentifierArchive& identifiers_for_chunks_prior_to_removed_chunks(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_identifiers_for_chunks_prior_to_removed_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      identifiers_for_chunks_prior_to_removed_chunks() const;

  // repeated .TSP.Reference old_delivery_style_tuples = 15;
  int old_delivery_style_tuples_size() const;
  private:
  int _internal_old_delivery_style_tuples_size() const;
  public:
  void clear_old_delivery_style_tuples();
  ::TSP::Reference* mutable_old_delivery_style_tuples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_delivery_style_tuples();
  private:
  const ::TSP::Reference& _internal_old_delivery_style_tuples(int index) const;
  ::TSP::Reference* _internal_add_old_delivery_style_tuples();
  public:
  const ::TSP::Reference& old_delivery_style_tuples(int index) const;
  ::TSP::Reference* add_old_delivery_style_tuples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_delivery_style_tuples() const;

  // repeated uint32 old_chunk_ID_seeds = 16;
  int old_chunk_id_seeds_size() const;
  private:
  int _internal_old_chunk_id_seeds_size() const;
  public:
  void clear_old_chunk_id_seeds();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_chunk_id_seeds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_old_chunk_id_seeds() const;
  void _internal_add_old_chunk_id_seeds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_old_chunk_id_seeds();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 old_chunk_id_seeds(int index) const;
  void set_old_chunk_id_seeds(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_old_chunk_id_seeds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      old_chunk_id_seeds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_old_chunk_id_seeds();

  // repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 17;
  int old_chunk_identifiers_size() const;
  private:
  int _internal_old_chunk_identifiers_size() const;
  public:
  void clear_old_chunk_identifiers();
  ::KN::BuildChunkIdentifierArchive* mutable_old_chunk_identifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_old_chunk_identifiers();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_old_chunk_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_old_chunk_identifiers();
  public:
  const ::KN::BuildChunkIdentifierArchive& old_chunk_identifiers(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_old_chunk_identifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      old_chunk_identifiers() const;

  // repeated .TSP.Reference working_builds = 18;
  int working_builds_size() const;
  private:
  int _internal_working_builds_size() const;
  public:
  void clear_working_builds();
  ::TSP::Reference* mutable_working_builds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_working_builds();
  private:
  const ::TSP::Reference& _internal_working_builds(int index) const;
  ::TSP::Reference* _internal_add_working_builds();
  public:
  const ::TSP::Reference& working_builds(int index) const;
  ::TSP::Reference* add_working_builds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      working_builds() const;

  // repeated .TSP.Reference chunks_removed_during_undo = 19;
  int chunks_removed_during_undo_size() const;
  private:
  int _internal_chunks_removed_during_undo_size() const;
  public:
  void clear_chunks_removed_during_undo();
  ::TSP::Reference* mutable_chunks_removed_during_undo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_chunks_removed_during_undo();
  private:
  const ::TSP::Reference& _internal_chunks_removed_during_undo(int index) const;
  ::TSP::Reference* _internal_add_chunks_removed_during_undo();
  public:
  const ::TSP::Reference& chunks_removed_during_undo(int index) const;
  ::TSP::Reference* add_chunks_removed_during_undo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      chunks_removed_during_undo() const;

  // repeated .TSP.Reference chunks_added_during_undo = 20;
  int chunks_added_during_undo_size() const;
  private:
  int _internal_chunks_added_during_undo_size() const;
  public:
  void clear_chunks_added_during_undo();
  ::TSP::Reference* mutable_chunks_added_during_undo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_chunks_added_during_undo();
  private:
  const ::TSP::Reference& _internal_chunks_added_during_undo(int index) const;
  ::TSP::Reference* _internal_add_chunks_added_during_undo();
  public:
  const ::TSP::Reference& chunks_added_during_undo(int index) const;
  ::TSP::Reference* add_chunks_added_during_undo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      chunks_added_during_undo() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID slide_id = 2;
  bool has_slide_id() const;
  private:
  bool _internal_has_slide_id() const;
  public:
  void clear_slide_id();
  const ::TSP::UUID& slide_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_slide_id();
  ::TSP::UUID* mutable_slide_id();
  void set_allocated_slide_id(::TSP::UUID* slide_id);
  private:
  const ::TSP::UUID& _internal_slide_id() const;
  ::TSP::UUID* _internal_mutable_slide_id();
  public:
  void unsafe_arena_set_allocated_slide_id(
      ::TSP::UUID* slide_id);
  ::TSP::UUID* unsafe_arena_release_slide_id();

  // optional bool needs_async_process_changes_selection_update = 9;
  bool has_needs_async_process_changes_selection_update() const;
  private:
  bool _internal_has_needs_async_process_changes_selection_update() const;
  public:
  void clear_needs_async_process_changes_selection_update();
  bool needs_async_process_changes_selection_update() const;
  void set_needs_async_process_changes_selection_update(bool value);
  private:
  bool _internal_needs_async_process_changes_selection_update() const;
  void _internal_set_needs_async_process_changes_selection_update(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandBuildUpdateChunkCountArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > drawable_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > expected_delivery_style_tuples_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > chunks_to_add_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_chunks_to_insert_after_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_chunks_to_remove_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > tuples_to_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_tuples_to_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_added_chunks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > generated_identifiers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > removed_chunks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > identifiers_for_chunks_prior_to_removed_chunks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_delivery_style_tuples_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > old_chunk_id_seeds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > old_chunk_identifiers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > working_builds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > chunks_removed_during_undo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > chunks_added_during_undo_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* slide_id_;
  bool needs_async_process_changes_selection_update_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandBuildChunkSetValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandBuildChunkSetValueArchive) */ {
 public:
  inline CommandBuildChunkSetValueArchive() : CommandBuildChunkSetValueArchive(nullptr) {}
  ~CommandBuildChunkSetValueArchive() override;
  explicit constexpr CommandBuildChunkSetValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandBuildChunkSetValueArchive(const CommandBuildChunkSetValueArchive& from);
  CommandBuildChunkSetValueArchive(CommandBuildChunkSetValueArchive&& from) noexcept
    : CommandBuildChunkSetValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandBuildChunkSetValueArchive& operator=(const CommandBuildChunkSetValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandBuildChunkSetValueArchive& operator=(CommandBuildChunkSetValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandBuildChunkSetValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandBuildChunkSetValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandBuildChunkSetValueArchive*>(
               &_CommandBuildChunkSetValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CommandBuildChunkSetValueArchive& a, CommandBuildChunkSetValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandBuildChunkSetValueArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandBuildChunkSetValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandBuildChunkSetValueArchive* New() const final {
    return new CommandBuildChunkSetValueArchive();
  }

  CommandBuildChunkSetValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandBuildChunkSetValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandBuildChunkSetValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandBuildChunkSetValueArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandBuildChunkSetValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandBuildChunkSetValueArchive";
  }
  protected:
  explicit CommandBuildChunkSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuplesToUpdateFieldNumber = 2,
    kOldTuplesToUpdateFieldNumber = 3,
    kSuperFieldNumber = 1,
  };
  // repeated .TSP.Reference tuples_to_update = 2;
  int tuples_to_update_size() const;
  private:
  int _internal_tuples_to_update_size() const;
  public:
  void clear_tuples_to_update();
  ::TSP::Reference* mutable_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_tuples_to_update();
  public:
  const ::TSP::Reference& tuples_to_update(int index) const;
  ::TSP::Reference* add_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      tuples_to_update() const;

  // repeated .TSP.Reference old_tuples_to_update = 3;
  int old_tuples_to_update_size() const;
  private:
  int _internal_old_tuples_to_update_size() const;
  public:
  void clear_old_tuples_to_update();
  ::TSP::Reference* mutable_old_tuples_to_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_tuples_to_update();
  private:
  const ::TSP::Reference& _internal_old_tuples_to_update(int index) const;
  ::TSP::Reference* _internal_add_old_tuples_to_update();
  public:
  const ::TSP::Reference& old_tuples_to_update(int index) const;
  ::TSP::Reference* add_old_tuples_to_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_tuples_to_update() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:KN.CommandBuildChunkSetValueArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > tuples_to_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_tuples_to_update_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandTransitionSetValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandTransitionSetValueArchive) */ {
 public:
  inline CommandTransitionSetValueArchive() : CommandTransitionSetValueArchive(nullptr) {}
  ~CommandTransitionSetValueArchive() override;
  explicit constexpr CommandTransitionSetValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandTransitionSetValueArchive(const CommandTransitionSetValueArchive& from);
  CommandTransitionSetValueArchive(CommandTransitionSetValueArchive&& from) noexcept
    : CommandTransitionSetValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandTransitionSetValueArchive& operator=(const CommandTransitionSetValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandTransitionSetValueArchive& operator=(CommandTransitionSetValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandTransitionSetValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandTransitionSetValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandTransitionSetValueArchive*>(
               &_CommandTransitionSetValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CommandTransitionSetValueArchive& a, CommandTransitionSetValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandTransitionSetValueArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandTransitionSetValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandTransitionSetValueArchive* New() const final {
    return new CommandTransitionSetValueArchive();
  }

  CommandTransitionSetValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandTransitionSetValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandTransitionSetValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandTransitionSetValueArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTransitionSetValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandTransitionSetValueArchive";
  }
  protected:
  explicit CommandTransitionSetValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 5,
    kSuperFieldNumber = 1,
    kSlideNodeIdPathFieldNumber = 2,
    kOldAttributesFieldNumber = 3,
    kAttributesFieldNumber = 4,
  };
  // optional string property = 5;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_MUST_USE_RESULT std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath slide_node_id_path = 2;
  bool has_slide_node_id_path() const;
  private:
  bool _internal_has_slide_node_id_path() const;
  public:
  void clear_slide_node_id_path();
  const ::TSP::UUIDPath& slide_node_id_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_slide_node_id_path();
  ::TSP::UUIDPath* mutable_slide_node_id_path();
  void set_allocated_slide_node_id_path(::TSP::UUIDPath* slide_node_id_path);
  private:
  const ::TSP::UUIDPath& _internal_slide_node_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_slide_node_id_path();
  public:
  void unsafe_arena_set_allocated_slide_node_id_path(
      ::TSP::UUIDPath* slide_node_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_slide_node_id_path();

  // optional .KN.TransitionAttributesArchive old_attributes = 3;
  bool has_old_attributes() const;
  private:
  bool _internal_has_old_attributes() const;
  public:
  void clear_old_attributes();
  const ::KN::TransitionAttributesArchive& old_attributes() const;
  PROTOBUF_MUST_USE_RESULT ::KN::TransitionAttributesArchive* release_old_attributes();
  ::KN::TransitionAttributesArchive* mutable_old_attributes();
  void set_allocated_old_attributes(::KN::TransitionAttributesArchive* old_attributes);
  private:
  const ::KN::TransitionAttributesArchive& _internal_old_attributes() const;
  ::KN::TransitionAttributesArchive* _internal_mutable_old_attributes();
  public:
  void unsafe_arena_set_allocated_old_attributes(
      ::KN::TransitionAttributesArchive* old_attributes);
  ::KN::TransitionAttributesArchive* unsafe_arena_release_old_attributes();

  // optional .KN.TransitionAttributesArchive attributes = 4;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::KN::TransitionAttributesArchive& attributes() const;
  PROTOBUF_MUST_USE_RESULT ::KN::TransitionAttributesArchive* release_attributes();
  ::KN::TransitionAttributesArchive* mutable_attributes();
  void set_allocated_attributes(::KN::TransitionAttributesArchive* attributes);
  private:
  const ::KN::TransitionAttributesArchive& _internal_attributes() const;
  ::KN::TransitionAttributesArchive* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::KN::TransitionAttributesArchive* attributes);
  ::KN::TransitionAttributesArchive* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:KN.CommandTransitionSetValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* slide_node_id_path_;
  ::KN::TransitionAttributesArchive* old_attributes_;
  ::KN::TransitionAttributesArchive* attributes_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowSetSlideNumberVisibilityArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowSetSlideNumberVisibilityArchive) */ {
 public:
  inline CommandShowSetSlideNumberVisibilityArchive() : CommandShowSetSlideNumberVisibilityArchive(nullptr) {}
  ~CommandShowSetSlideNumberVisibilityArchive() override;
  explicit constexpr CommandShowSetSlideNumberVisibilityArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowSetSlideNumberVisibilityArchive(const CommandShowSetSlideNumberVisibilityArchive& from);
  CommandShowSetSlideNumberVisibilityArchive(CommandShowSetSlideNumberVisibilityArchive&& from) noexcept
    : CommandShowSetSlideNumberVisibilityArchive() {
    *this = ::std::move(from);
  }

  inline CommandShowSetSlideNumberVisibilityArchive& operator=(const CommandShowSetSlideNumberVisibilityArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowSetSlideNumberVisibilityArchive& operator=(CommandShowSetSlideNumberVisibilityArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowSetSlideNumberVisibilityArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowSetSlideNumberVisibilityArchive* internal_default_instance() {
    return reinterpret_cast<const CommandShowSetSlideNumberVisibilityArchive*>(
               &_CommandShowSetSlideNumberVisibilityArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CommandShowSetSlideNumberVisibilityArchive& a, CommandShowSetSlideNumberVisibilityArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowSetSlideNumberVisibilityArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowSetSlideNumberVisibilityArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowSetSlideNumberVisibilityArchive* New() const final {
    return new CommandShowSetSlideNumberVisibilityArchive();
  }

  CommandShowSetSlideNumberVisibilityArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowSetSlideNumberVisibilityArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowSetSlideNumberVisibilityArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowSetSlideNumberVisibilityArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowSetSlideNumberVisibilityArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowSetSlideNumberVisibilityArchive";
  }
  protected:
  explicit CommandShowSetSlideNumberVisibilityArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsOfSlideNodesToSkipFieldNumber = 4,
    kIdsOfSlideNodesAlreadyCorrectFieldNumber = 5,
    kSuperFieldNumber = 1,
    kSlideNumbersVisibleFieldNumber = 3,
    kIsUndoFieldNumber = 6,
  };
  // repeated .TSP.UUID ids_of_slide_nodes_to_skip = 4;
  int ids_of_slide_nodes_to_skip_size() const;
  private:
  int _internal_ids_of_slide_nodes_to_skip_size() const;
  public:
  void clear_ids_of_slide_nodes_to_skip();
  ::TSP::UUID* mutable_ids_of_slide_nodes_to_skip(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_ids_of_slide_nodes_to_skip();
  private:
  const ::TSP::UUID& _internal_ids_of_slide_nodes_to_skip(int index) const;
  ::TSP::UUID* _internal_add_ids_of_slide_nodes_to_skip();
  public:
  const ::TSP::UUID& ids_of_slide_nodes_to_skip(int index) const;
  ::TSP::UUID* add_ids_of_slide_nodes_to_skip();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      ids_of_slide_nodes_to_skip() const;

  // repeated .TSP.UUID ids_of_slide_nodes_already_correct = 5;
  int ids_of_slide_nodes_already_correct_size() const;
  private:
  int _internal_ids_of_slide_nodes_already_correct_size() const;
  public:
  void clear_ids_of_slide_nodes_already_correct();
  ::TSP::UUID* mutable_ids_of_slide_nodes_already_correct(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_ids_of_slide_nodes_already_correct();
  private:
  const ::TSP::UUID& _internal_ids_of_slide_nodes_already_correct(int index) const;
  ::TSP::UUID* _internal_add_ids_of_slide_nodes_already_correct();
  public:
  const ::TSP::UUID& ids_of_slide_nodes_already_correct(int index) const;
  ::TSP::UUID* add_ids_of_slide_nodes_already_correct();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      ids_of_slide_nodes_already_correct() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool slide_numbers_visible = 3;
  bool has_slide_numbers_visible() const;
  private:
  bool _internal_has_slide_numbers_visible() const;
  public:
  void clear_slide_numbers_visible();
  bool slide_numbers_visible() const;
  void set_slide_numbers_visible(bool value);
  private:
  bool _internal_slide_numbers_visible() const;
  void _internal_set_slide_numbers_visible(bool value);
  public:

  // required bool is_undo = 6;
  bool has_is_undo() const;
  private:
  bool _internal_has_is_undo() const;
  public:
  void clear_is_undo();
  bool is_undo() const;
  void set_is_undo(bool value);
  private:
  bool _internal_is_undo() const;
  void _internal_set_is_undo(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandShowSetSlideNumberVisibilityArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > ids_of_slide_nodes_to_skip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > ids_of_slide_nodes_already_correct_;
  ::TSK::CommandArchive* super_;
  bool slide_numbers_visible_;
  bool is_undo_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandTemplateSetThumbnailTextArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandTemplateSetThumbnailTextArchive) */ {
 public:
  inline CommandTemplateSetThumbnailTextArchive() : CommandTemplateSetThumbnailTextArchive(nullptr) {}
  ~CommandTemplateSetThumbnailTextArchive() override;
  explicit constexpr CommandTemplateSetThumbnailTextArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandTemplateSetThumbnailTextArchive(const CommandTemplateSetThumbnailTextArchive& from);
  CommandTemplateSetThumbnailTextArchive(CommandTemplateSetThumbnailTextArchive&& from) noexcept
    : CommandTemplateSetThumbnailTextArchive() {
    *this = ::std::move(from);
  }

  inline CommandTemplateSetThumbnailTextArchive& operator=(const CommandTemplateSetThumbnailTextArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandTemplateSetThumbnailTextArchive& operator=(CommandTemplateSetThumbnailTextArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandTemplateSetThumbnailTextArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandTemplateSetThumbnailTextArchive* internal_default_instance() {
    return reinterpret_cast<const CommandTemplateSetThumbnailTextArchive*>(
               &_CommandTemplateSetThumbnailTextArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CommandTemplateSetThumbnailTextArchive& a, CommandTemplateSetThumbnailTextArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandTemplateSetThumbnailTextArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandTemplateSetThumbnailTextArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandTemplateSetThumbnailTextArchive* New() const final {
    return new CommandTemplateSetThumbnailTextArchive();
  }

  CommandTemplateSetThumbnailTextArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandTemplateSetThumbnailTextArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandTemplateSetThumbnailTextArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandTemplateSetThumbnailTextArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTemplateSetThumbnailTextArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandTemplateSetThumbnailTextArchive";
  }
  protected:
  explicit CommandTemplateSetThumbnailTextArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewTextFieldNumber = 4,
    kOldTextFieldNumber = 5,
    kSuperFieldNumber = 1,
    kTemplateIdFieldNumber = 2,
    kIsBodyFieldNumber = 3,
  };
  // optional string new_text = 4;
  bool has_new_text() const;
  private:
  bool _internal_has_new_text() const;
  public:
  void clear_new_text();
  const std::string& new_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_new_text();
  void set_allocated_new_text(std::string* new_text);
  private:
  const std::string& _internal_new_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_text(const std::string& value);
  std::string* _internal_mutable_new_text();
  public:

  // optional string old_text = 5;
  bool has_old_text() const;
  private:
  bool _internal_has_old_text() const;
  public:
  void clear_old_text();
  const std::string& old_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_old_text();
  void set_allocated_old_text(std::string* old_text);
  private:
  const std::string& _internal_old_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_text(const std::string& value);
  std::string* _internal_mutable_old_text();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID template_id = 2;
  bool has_template_id() const;
  private:
  bool _internal_has_template_id() const;
  public:
  void clear_template_id();
  const ::TSP::UUID& template_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_template_id();
  ::TSP::UUID* mutable_template_id();
  void set_allocated_template_id(::TSP::UUID* template_id);
  private:
  const ::TSP::UUID& _internal_template_id() const;
  ::TSP::UUID* _internal_mutable_template_id();
  public:
  void unsafe_arena_set_allocated_template_id(
      ::TSP::UUID* template_id);
  ::TSP::UUID* unsafe_arena_release_template_id();

  // required bool is_body = 3;
  bool has_is_body() const;
  private:
  bool _internal_has_is_body() const;
  public:
  void clear_is_body();
  bool is_body() const;
  void set_is_body(bool value);
  private:
  bool _internal_is_body() const;
  void _internal_set_is_body(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandTemplateSetThumbnailTextArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_text_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* template_id_;
  bool is_body_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandTemplateSetBodyStylesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandTemplateSetBodyStylesArchive) */ {
 public:
  inline CommandTemplateSetBodyStylesArchive() : CommandTemplateSetBodyStylesArchive(nullptr) {}
  ~CommandTemplateSetBodyStylesArchive() override;
  explicit constexpr CommandTemplateSetBodyStylesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandTemplateSetBodyStylesArchive(const CommandTemplateSetBodyStylesArchive& from);
  CommandTemplateSetBodyStylesArchive(CommandTemplateSetBodyStylesArchive&& from) noexcept
    : CommandTemplateSetBodyStylesArchive() {
    *this = ::std::move(from);
  }

  inline CommandTemplateSetBodyStylesArchive& operator=(const CommandTemplateSetBodyStylesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandTemplateSetBodyStylesArchive& operator=(CommandTemplateSetBodyStylesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandTemplateSetBodyStylesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandTemplateSetBodyStylesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandTemplateSetBodyStylesArchive*>(
               &_CommandTemplateSetBodyStylesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CommandTemplateSetBodyStylesArchive& a, CommandTemplateSetBodyStylesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandTemplateSetBodyStylesArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandTemplateSetBodyStylesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandTemplateSetBodyStylesArchive* New() const final {
    return new CommandTemplateSetBodyStylesArchive();
  }

  CommandTemplateSetBodyStylesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandTemplateSetBodyStylesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandTemplateSetBodyStylesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandTemplateSetBodyStylesArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTemplateSetBodyStylesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandTemplateSetBodyStylesArchive";
  }
  protected:
  explicit CommandTemplateSetBodyStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewParagraphStylesFieldNumber = 3,
    kNewListStylesFieldNumber = 4,
    kOldParagraphStylesFieldNumber = 5,
    kOldListStylesFieldNumber = 6,
    kSuperFieldNumber = 1,
    kTemplateIdFieldNumber = 2,
  };
  // repeated .TSP.Reference new_paragraph_styles = 3;
  int new_paragraph_styles_size() const;
  private:
  int _internal_new_paragraph_styles_size() const;
  public:
  void clear_new_paragraph_styles();
  ::TSP::Reference* mutable_new_paragraph_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_new_paragraph_styles();
  private:
  const ::TSP::Reference& _internal_new_paragraph_styles(int index) const;
  ::TSP::Reference* _internal_add_new_paragraph_styles();
  public:
  const ::TSP::Reference& new_paragraph_styles(int index) const;
  ::TSP::Reference* add_new_paragraph_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      new_paragraph_styles() const;

  // repeated .TSP.Reference new_list_styles = 4;
  int new_list_styles_size() const;
  private:
  int _internal_new_list_styles_size() const;
  public:
  void clear_new_list_styles();
  ::TSP::Reference* mutable_new_list_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_new_list_styles();
  private:
  const ::TSP::Reference& _internal_new_list_styles(int index) const;
  ::TSP::Reference* _internal_add_new_list_styles();
  public:
  const ::TSP::Reference& new_list_styles(int index) const;
  ::TSP::Reference* add_new_list_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      new_list_styles() const;

  // repeated .TSP.Reference old_paragraph_styles = 5;
  int old_paragraph_styles_size() const;
  private:
  int _internal_old_paragraph_styles_size() const;
  public:
  void clear_old_paragraph_styles();
  ::TSP::Reference* mutable_old_paragraph_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_paragraph_styles();
  private:
  const ::TSP::Reference& _internal_old_paragraph_styles(int index) const;
  ::TSP::Reference* _internal_add_old_paragraph_styles();
  public:
  const ::TSP::Reference& old_paragraph_styles(int index) const;
  ::TSP::Reference* add_old_paragraph_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_paragraph_styles() const;

  // repeated .TSP.Reference old_list_styles = 6;
  int old_list_styles_size() const;
  private:
  int _internal_old_list_styles_size() const;
  public:
  void clear_old_list_styles();
  ::TSP::Reference* mutable_old_list_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_list_styles();
  private:
  const ::TSP::Reference& _internal_old_list_styles(int index) const;
  ::TSP::Reference* _internal_add_old_list_styles();
  public:
  const ::TSP::Reference& old_list_styles(int index) const;
  ::TSP::Reference* add_old_list_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_list_styles() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID template_id = 2;
  bool has_template_id() const;
  private:
  bool _internal_has_template_id() const;
  public:
  void clear_template_id();
  const ::TSP::UUID& template_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_template_id();
  ::TSP::UUID* mutable_template_id();
  void set_allocated_template_id(::TSP::UUID* template_id);
  private:
  const ::TSP::UUID& _internal_template_id() const;
  ::TSP::UUID* _internal_mutable_template_id();
  public:
  void unsafe_arena_set_allocated_template_id(
      ::TSP::UUID* template_id);
  ::TSP::UUID* unsafe_arena_release_template_id();

  // @@protoc_insertion_point(class_scope:KN.CommandTemplateSetBodyStylesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > new_paragraph_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > new_list_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_paragraph_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_list_styles_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* template_id_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChangeTemplateSlideArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandChangeTemplateSlideArchive) */ {
 public:
  inline CommandChangeTemplateSlideArchive() : CommandChangeTemplateSlideArchive(nullptr) {}
  ~CommandChangeTemplateSlideArchive() override;
  explicit constexpr CommandChangeTemplateSlideArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChangeTemplateSlideArchive(const CommandChangeTemplateSlideArchive& from);
  CommandChangeTemplateSlideArchive(CommandChangeTemplateSlideArchive&& from) noexcept
    : CommandChangeTemplateSlideArchive() {
    *this = ::std::move(from);
  }

  inline CommandChangeTemplateSlideArchive& operator=(const CommandChangeTemplateSlideArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChangeTemplateSlideArchive& operator=(CommandChangeTemplateSlideArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChangeTemplateSlideArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChangeTemplateSlideArchive* internal_default_instance() {
    return reinterpret_cast<const CommandChangeTemplateSlideArchive*>(
               &_CommandChangeTemplateSlideArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CommandChangeTemplateSlideArchive& a, CommandChangeTemplateSlideArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChangeTemplateSlideArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChangeTemplateSlideArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandChangeTemplateSlideArchive* New() const final {
    return new CommandChangeTemplateSlideArchive();
  }

  CommandChangeTemplateSlideArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandChangeTemplateSlideArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChangeTemplateSlideArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandChangeTemplateSlideArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChangeTemplateSlideArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandChangeTemplateSlideArchive";
  }
  protected:
  explicit CommandChangeTemplateSlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideIdPathFieldNumber = 2,
    kTemplateSlideNodeFieldNumber = 3,
    kOldTemplateSlideNodeFieldNumber = 4,
    kTargetPrototypeFieldNumber = 6,
    kIsUndoRedoFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath slide_id_path = 2;
  bool has_slide_id_path() const;
  private:
  bool _internal_has_slide_id_path() const;
  public:
  void clear_slide_id_path();
  const ::TSP::UUIDPath& slide_id_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_slide_id_path();
  ::TSP::UUIDPath* mutable_slide_id_path();
  void set_allocated_slide_id_path(::TSP::UUIDPath* slide_id_path);
  private:
  const ::TSP::UUIDPath& _internal_slide_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_slide_id_path();
  public:
  void unsafe_arena_set_allocated_slide_id_path(
      ::TSP::UUIDPath* slide_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_slide_id_path();

  // required .TSP.Reference template_slide_node = 3;
  bool has_template_slide_node() const;
  private:
  bool _internal_has_template_slide_node() const;
  public:
  void clear_template_slide_node();
  const ::TSP::Reference& template_slide_node() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_template_slide_node();
  ::TSP::Reference* mutable_template_slide_node();
  void set_allocated_template_slide_node(::TSP::Reference* template_slide_node);
  private:
  const ::TSP::Reference& _internal_template_slide_node() const;
  ::TSP::Reference* _internal_mutable_template_slide_node();
  public:
  void unsafe_arena_set_allocated_template_slide_node(
      ::TSP::Reference* template_slide_node);
  ::TSP::Reference* unsafe_arena_release_template_slide_node();

  // optional .TSP.Reference old_template_slide_node = 4;
  bool has_old_template_slide_node() const;
  private:
  bool _internal_has_old_template_slide_node() const;
  public:
  void clear_old_template_slide_node();
  const ::TSP::Reference& old_template_slide_node() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_template_slide_node();
  ::TSP::Reference* mutable_old_template_slide_node();
  void set_allocated_old_template_slide_node(::TSP::Reference* old_template_slide_node);
  private:
  const ::TSP::Reference& _internal_old_template_slide_node() const;
  ::TSP::Reference* _internal_mutable_old_template_slide_node();
  public:
  void unsafe_arena_set_allocated_old_template_slide_node(
      ::TSP::Reference* old_template_slide_node);
  ::TSP::Reference* unsafe_arena_release_old_template_slide_node();

  // optional .TSP.Reference target_prototype = 6;
  bool has_target_prototype() const;
  private:
  bool _internal_has_target_prototype() const;
  public:
  void clear_target_prototype();
  const ::TSP::Reference& target_prototype() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_target_prototype();
  ::TSP::Reference* mutable_target_prototype();
  void set_allocated_target_prototype(::TSP::Reference* target_prototype);
  private:
  const ::TSP::Reference& _internal_target_prototype() const;
  ::TSP::Reference* _internal_mutable_target_prototype();
  public:
  void unsafe_arena_set_allocated_target_prototype(
      ::TSP::Reference* target_prototype);
  ::TSP::Reference* unsafe_arena_release_target_prototype();

  // required bool is_undo_redo = 5;
  bool has_is_undo_redo() const;
  private:
  bool _internal_has_is_undo_redo() const;
  public:
  void clear_is_undo_redo();
  bool is_undo_redo() const;
  void set_is_undo_redo(bool value);
  private:
  bool _internal_is_undo_redo() const;
  void _internal_set_is_undo_redo(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandChangeTemplateSlideArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* slide_id_path_;
  ::TSP::Reference* template_slide_node_;
  ::TSP::Reference* old_template_slide_node_;
  ::TSP::Reference* target_prototype_;
  bool is_undo_redo_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlidePrimitiveSetTemplateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlidePrimitiveSetTemplateArchive) */ {
 public:
  inline CommandSlidePrimitiveSetTemplateArchive() : CommandSlidePrimitiveSetTemplateArchive(nullptr) {}
  ~CommandSlidePrimitiveSetTemplateArchive() override;
  explicit constexpr CommandSlidePrimitiveSetTemplateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlidePrimitiveSetTemplateArchive(const CommandSlidePrimitiveSetTemplateArchive& from);
  CommandSlidePrimitiveSetTemplateArchive(CommandSlidePrimitiveSetTemplateArchive&& from) noexcept
    : CommandSlidePrimitiveSetTemplateArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlidePrimitiveSetTemplateArchive& operator=(const CommandSlidePrimitiveSetTemplateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlidePrimitiveSetTemplateArchive& operator=(CommandSlidePrimitiveSetTemplateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlidePrimitiveSetTemplateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlidePrimitiveSetTemplateArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlidePrimitiveSetTemplateArchive*>(
               &_CommandSlidePrimitiveSetTemplateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CommandSlidePrimitiveSetTemplateArchive& a, CommandSlidePrimitiveSetTemplateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlidePrimitiveSetTemplateArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlidePrimitiveSetTemplateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlidePrimitiveSetTemplateArchive* New() const final {
    return new CommandSlidePrimitiveSetTemplateArchive();
  }

  CommandSlidePrimitiveSetTemplateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlidePrimitiveSetTemplateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlidePrimitiveSetTemplateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlidePrimitiveSetTemplateArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlidePrimitiveSetTemplateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlidePrimitiveSetTemplateArchive";
  }
  protected:
  explicit CommandSlidePrimitiveSetTemplateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideIdPathFieldNumber = 2,
    kTemplateIdFieldNumber = 3,
    kOldTemplateSlideNodeFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath slide_id_path = 2;
  bool has_slide_id_path() const;
  private:
  bool _internal_has_slide_id_path() const;
  public:
  void clear_slide_id_path();
  const ::TSP::UUIDPath& slide_id_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_slide_id_path();
  ::TSP::UUIDPath* mutable_slide_id_path();
  void set_allocated_slide_id_path(::TSP::UUIDPath* slide_id_path);
  private:
  const ::TSP::UUIDPath& _internal_slide_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_slide_id_path();
  public:
  void unsafe_arena_set_allocated_slide_id_path(
      ::TSP::UUIDPath* slide_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_slide_id_path();

  // required .TSP.UUID template_id = 3;
  bool has_template_id() const;
  private:
  bool _internal_has_template_id() const;
  public:
  void clear_template_id();
  const ::TSP::UUID& template_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_template_id();
  ::TSP::UUID* mutable_template_id();
  void set_allocated_template_id(::TSP::UUID* template_id);
  private:
  const ::TSP::UUID& _internal_template_id() const;
  ::TSP::UUID* _internal_mutable_template_id();
  public:
  void unsafe_arena_set_allocated_template_id(
      ::TSP::UUID* template_id);
  ::TSP::UUID* unsafe_arena_release_template_id();

  // optional .TSP.Reference old_template_slide_node = 4;
  bool has_old_template_slide_node() const;
  private:
  bool _internal_has_old_template_slide_node() const;
  public:
  void clear_old_template_slide_node();
  const ::TSP::Reference& old_template_slide_node() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_template_slide_node();
  ::TSP::Reference* mutable_old_template_slide_node();
  void set_allocated_old_template_slide_node(::TSP::Reference* old_template_slide_node);
  private:
  const ::TSP::Reference& _internal_old_template_slide_node() const;
  ::TSP::Reference* _internal_mutable_old_template_slide_node();
  public:
  void unsafe_arena_set_allocated_old_template_slide_node(
      ::TSP::Reference* old_template_slide_node);
  ::TSP::Reference* unsafe_arena_release_old_template_slide_node();

  // @@protoc_insertion_point(class_scope:KN.CommandSlidePrimitiveSetTemplateArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* slide_id_path_;
  ::TSP::UUID* template_id_;
  ::TSP::Reference* old_template_slide_node_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideResetTemplateBackgroundObjectsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideResetTemplateBackgroundObjectsArchive) */ {
 public:
  inline CommandSlideResetTemplateBackgroundObjectsArchive() : CommandSlideResetTemplateBackgroundObjectsArchive(nullptr) {}
  ~CommandSlideResetTemplateBackgroundObjectsArchive() override;
  explicit constexpr CommandSlideResetTemplateBackgroundObjectsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideResetTemplateBackgroundObjectsArchive(const CommandSlideResetTemplateBackgroundObjectsArchive& from);
  CommandSlideResetTemplateBackgroundObjectsArchive(CommandSlideResetTemplateBackgroundObjectsArchive&& from) noexcept
    : CommandSlideResetTemplateBackgroundObjectsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSlideResetTemplateBackgroundObjectsArchive& operator=(const CommandSlideResetTemplateBackgroundObjectsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideResetTemplateBackgroundObjectsArchive& operator=(CommandSlideResetTemplateBackgroundObjectsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideResetTemplateBackgroundObjectsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideResetTemplateBackgroundObjectsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSlideResetTemplateBackgroundObjectsArchive*>(
               &_CommandSlideResetTemplateBackgroundObjectsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CommandSlideResetTemplateBackgroundObjectsArchive& a, CommandSlideResetTemplateBackgroundObjectsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideResetTemplateBackgroundObjectsArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideResetTemplateBackgroundObjectsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideResetTemplateBackgroundObjectsArchive* New() const final {
    return new CommandSlideResetTemplateBackgroundObjectsArchive();
  }

  CommandSlideResetTemplateBackgroundObjectsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideResetTemplateBackgroundObjectsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideResetTemplateBackgroundObjectsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideResetTemplateBackgroundObjectsArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideResetTemplateBackgroundObjectsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideResetTemplateBackgroundObjectsArchive";
  }
  protected:
  explicit CommandSlideResetTemplateBackgroundObjectsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSlideIdPathFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath slide_id_path = 2;
  bool has_slide_id_path() const;
  private:
  bool _internal_has_slide_id_path() const;
  public:
  void clear_slide_id_path();
  const ::TSP::UUIDPath& slide_id_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_slide_id_path();
  ::TSP::UUIDPath* mutable_slide_id_path();
  void set_allocated_slide_id_path(::TSP::UUIDPath* slide_id_path);
  private:
  const ::TSP::UUIDPath& _internal_slide_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_slide_id_path();
  public:
  void unsafe_arena_set_allocated_slide_id_path(
      ::TSP::UUIDPath* slide_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_slide_id_path();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideResetTemplateBackgroundObjectsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* slide_id_path_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandShowSetSoundtrack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandShowSetSoundtrack) */ {
 public:
  inline CommandShowSetSoundtrack() : CommandShowSetSoundtrack(nullptr) {}
  ~CommandShowSetSoundtrack() override;
  explicit constexpr CommandShowSetSoundtrack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandShowSetSoundtrack(const CommandShowSetSoundtrack& from);
  CommandShowSetSoundtrack(CommandShowSetSoundtrack&& from) noexcept
    : CommandShowSetSoundtrack() {
    *this = ::std::move(from);
  }

  inline CommandShowSetSoundtrack& operator=(const CommandShowSetSoundtrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandShowSetSoundtrack& operator=(CommandShowSetSoundtrack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandShowSetSoundtrack& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandShowSetSoundtrack* internal_default_instance() {
    return reinterpret_cast<const CommandShowSetSoundtrack*>(
               &_CommandShowSetSoundtrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CommandShowSetSoundtrack& a, CommandShowSetSoundtrack& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandShowSetSoundtrack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandShowSetSoundtrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandShowSetSoundtrack* New() const final {
    return new CommandShowSetSoundtrack();
  }

  CommandShowSetSoundtrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandShowSetSoundtrack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandShowSetSoundtrack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandShowSetSoundtrack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandShowSetSoundtrack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandShowSetSoundtrack";
  }
  protected:
  explicit CommandShowSetSoundtrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowFieldNumber = 2,
    kSoundtrackFieldNumber = 3,
    kOldSoundtrackFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference show = 2;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::TSP::Reference& show() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_show();
  ::TSP::Reference* mutable_show();
  void set_allocated_show(::TSP::Reference* show);
  private:
  const ::TSP::Reference& _internal_show() const;
  ::TSP::Reference* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::TSP::Reference* show);
  ::TSP::Reference* unsafe_arena_release_show();

  // optional .TSP.Reference soundtrack = 3;
  bool has_soundtrack() const;
  private:
  bool _internal_has_soundtrack() const;
  public:
  void clear_soundtrack();
  const ::TSP::Reference& soundtrack() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_soundtrack();
  ::TSP::Reference* mutable_soundtrack();
  void set_allocated_soundtrack(::TSP::Reference* soundtrack);
  private:
  const ::TSP::Reference& _internal_soundtrack() const;
  ::TSP::Reference* _internal_mutable_soundtrack();
  public:
  void unsafe_arena_set_allocated_soundtrack(
      ::TSP::Reference* soundtrack);
  ::TSP::Reference* unsafe_arena_release_soundtrack();

  // optional .TSP.Reference old_soundtrack = 4;
  bool has_old_soundtrack() const;
  private:
  bool _internal_has_old_soundtrack() const;
  public:
  void clear_old_soundtrack();
  const ::TSP::Reference& old_soundtrack() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_old_soundtrack();
  ::TSP::Reference* mutable_old_soundtrack();
  void set_allocated_old_soundtrack(::TSP::Reference* old_soundtrack);
  private:
  const ::TSP::Reference& _internal_old_soundtrack() const;
  ::TSP::Reference* _internal_mutable_old_soundtrack();
  public:
  void unsafe_arena_set_allocated_old_soundtrack(
      ::TSP::Reference* old_soundtrack);
  ::TSP::Reference* unsafe_arena_release_old_soundtrack();

  // @@protoc_insertion_point(class_scope:KN.CommandShowSetSoundtrack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* show_;
  ::TSP::Reference* soundtrack_;
  ::TSP::Reference* old_soundtrack_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSoundtrackSetValue_PropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSoundtrackSetValue.PropertyValue) */ {
 public:
  inline CommandSoundtrackSetValue_PropertyValue() : CommandSoundtrackSetValue_PropertyValue(nullptr) {}
  ~CommandSoundtrackSetValue_PropertyValue() override;
  explicit constexpr CommandSoundtrackSetValue_PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSoundtrackSetValue_PropertyValue(const CommandSoundtrackSetValue_PropertyValue& from);
  CommandSoundtrackSetValue_PropertyValue(CommandSoundtrackSetValue_PropertyValue&& from) noexcept
    : CommandSoundtrackSetValue_PropertyValue() {
    *this = ::std::move(from);
  }

  inline CommandSoundtrackSetValue_PropertyValue& operator=(const CommandSoundtrackSetValue_PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSoundtrackSetValue_PropertyValue& operator=(CommandSoundtrackSetValue_PropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSoundtrackSetValue_PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSoundtrackSetValue_PropertyValue* internal_default_instance() {
    return reinterpret_cast<const CommandSoundtrackSetValue_PropertyValue*>(
               &_CommandSoundtrackSetValue_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CommandSoundtrackSetValue_PropertyValue& a, CommandSoundtrackSetValue_PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSoundtrackSetValue_PropertyValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSoundtrackSetValue_PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSoundtrackSetValue_PropertyValue* New() const final {
    return new CommandSoundtrackSetValue_PropertyValue();
  }

  CommandSoundtrackSetValue_PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSoundtrackSetValue_PropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSoundtrackSetValue_PropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSoundtrackSetValue_PropertyValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSoundtrackSetValue_PropertyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSoundtrackSetValue.PropertyValue";
  }
  protected:
  explicit CommandSoundtrackSetValue_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaReferenceValuesFieldNumber = 3,
    kDoubleValueFieldNumber = 1,
    kModeValueFieldNumber = 2,
  };
  // repeated .TSP.DataReference media_reference_values = 3;
  int media_reference_values_size() const;
  private:
  int _internal_media_reference_values_size() const;
  public:
  void clear_media_reference_values();
  ::TSP::DataReference* mutable_media_reference_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
      mutable_media_reference_values();
  private:
  const ::TSP::DataReference& _internal_media_reference_values(int index) const;
  ::TSP::DataReference* _internal_add_media_reference_values();
  public:
  const ::TSP::DataReference& media_reference_values(int index) const;
  ::TSP::DataReference* add_media_reference_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
      media_reference_values() const;

  // optional double double_value = 1;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
  bool has_mode_value() const;
  private:
  bool _internal_has_mode_value() const;
  public:
  void clear_mode_value();
  ::KN::Soundtrack_SoundtrackMode mode_value() const;
  void set_mode_value(::KN::Soundtrack_SoundtrackMode value);
  private:
  ::KN::Soundtrack_SoundtrackMode _internal_mode_value() const;
  void _internal_set_mode_value(::KN::Soundtrack_SoundtrackMode value);
  public:

  // @@protoc_insertion_point(class_scope:KN.CommandSoundtrackSetValue.PropertyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference > media_reference_values_;
  double double_value_;
  int mode_value_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSoundtrackSetValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSoundtrackSetValue) */ {
 public:
  inline CommandSoundtrackSetValue() : CommandSoundtrackSetValue(nullptr) {}
  ~CommandSoundtrackSetValue() override;
  explicit constexpr CommandSoundtrackSetValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSoundtrackSetValue(const CommandSoundtrackSetValue& from);
  CommandSoundtrackSetValue(CommandSoundtrackSetValue&& from) noexcept
    : CommandSoundtrackSetValue() {
    *this = ::std::move(from);
  }

  inline CommandSoundtrackSetValue& operator=(const CommandSoundtrackSetValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSoundtrackSetValue& operator=(CommandSoundtrackSetValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSoundtrackSetValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSoundtrackSetValue* internal_default_instance() {
    return reinterpret_cast<const CommandSoundtrackSetValue*>(
               &_CommandSoundtrackSetValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CommandSoundtrackSetValue& a, CommandSoundtrackSetValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSoundtrackSetValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSoundtrackSetValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSoundtrackSetValue* New() const final {
    return new CommandSoundtrackSetValue();
  }

  CommandSoundtrackSetValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSoundtrackSetValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSoundtrackSetValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSoundtrackSetValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSoundtrackSetValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSoundtrackSetValue";
  }
  protected:
  explicit CommandSoundtrackSetValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandSoundtrackSetValue_PropertyValue PropertyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kSoundtrackIdFieldNumber = 2,
    kOldValueFieldNumber = 4,
    kNewValueFieldNumber = 5,
  };
  // optional string property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_MUST_USE_RESULT std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUID soundtrack_id = 2;
  bool has_soundtrack_id() const;
  private:
  bool _internal_has_soundtrack_id() const;
  public:
  void clear_soundtrack_id();
  const ::TSP::UUID& soundtrack_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_soundtrack_id();
  ::TSP::UUID* mutable_soundtrack_id();
  void set_allocated_soundtrack_id(::TSP::UUID* soundtrack_id);
  private:
  const ::TSP::UUID& _internal_soundtrack_id() const;
  ::TSP::UUID* _internal_mutable_soundtrack_id();
  public:
  void unsafe_arena_set_allocated_soundtrack_id(
      ::TSP::UUID* soundtrack_id);
  ::TSP::UUID* unsafe_arena_release_soundtrack_id();

  // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
  bool has_old_value() const;
  private:
  bool _internal_has_old_value() const;
  public:
  void clear_old_value();
  const ::KN::CommandSoundtrackSetValue_PropertyValue& old_value() const;
  PROTOBUF_MUST_USE_RESULT ::KN::CommandSoundtrackSetValue_PropertyValue* release_old_value();
  ::KN::CommandSoundtrackSetValue_PropertyValue* mutable_old_value();
  void set_allocated_old_value(::KN::CommandSoundtrackSetValue_PropertyValue* old_value);
  private:
  const ::KN::CommandSoundtrackSetValue_PropertyValue& _internal_old_value() const;
  ::KN::CommandSoundtrackSetValue_PropertyValue* _internal_mutable_old_value();
  public:
  void unsafe_arena_set_allocated_old_value(
      ::KN::CommandSoundtrackSetValue_PropertyValue* old_value);
  ::KN::CommandSoundtrackSetValue_PropertyValue* unsafe_arena_release_old_value();

  // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
  bool has_new_value() const;
  private:
  bool _internal_has_new_value() const;
  public:
  void clear_new_value();
  const ::KN::CommandSoundtrackSetValue_PropertyValue& new_value() const;
  PROTOBUF_MUST_USE_RESULT ::KN::CommandSoundtrackSetValue_PropertyValue* release_new_value();
  ::KN::CommandSoundtrackSetValue_PropertyValue* mutable_new_value();
  void set_allocated_new_value(::KN::CommandSoundtrackSetValue_PropertyValue* new_value);
  private:
  const ::KN::CommandSoundtrackSetValue_PropertyValue& _internal_new_value() const;
  ::KN::CommandSoundtrackSetValue_PropertyValue* _internal_mutable_new_value();
  public:
  void unsafe_arena_set_allocated_new_value(
      ::KN::CommandSoundtrackSetValue_PropertyValue* new_value);
  ::KN::CommandSoundtrackSetValue_PropertyValue* unsafe_arena_release_new_value();

  // @@protoc_insertion_point(class_scope:KN.CommandSoundtrackSetValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* soundtrack_id_;
  ::KN::CommandSoundtrackSetValue_PropertyValue* old_value_;
  ::KN::CommandSoundtrackSetValue_PropertyValue* new_value_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSlideUpdateTemplateDrawables final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CommandSlideUpdateTemplateDrawables) */ {
 public:
  inline CommandSlideUpdateTemplateDrawables() : CommandSlideUpdateTemplateDrawables(nullptr) {}
  ~CommandSlideUpdateTemplateDrawables() override;
  explicit constexpr CommandSlideUpdateTemplateDrawables(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSlideUpdateTemplateDrawables(const CommandSlideUpdateTemplateDrawables& from);
  CommandSlideUpdateTemplateDrawables(CommandSlideUpdateTemplateDrawables&& from) noexcept
    : CommandSlideUpdateTemplateDrawables() {
    *this = ::std::move(from);
  }

  inline CommandSlideUpdateTemplateDrawables& operator=(const CommandSlideUpdateTemplateDrawables& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSlideUpdateTemplateDrawables& operator=(CommandSlideUpdateTemplateDrawables&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSlideUpdateTemplateDrawables& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSlideUpdateTemplateDrawables* internal_default_instance() {
    return reinterpret_cast<const CommandSlideUpdateTemplateDrawables*>(
               &_CommandSlideUpdateTemplateDrawables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CommandSlideUpdateTemplateDrawables& a, CommandSlideUpdateTemplateDrawables& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSlideUpdateTemplateDrawables* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSlideUpdateTemplateDrawables* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSlideUpdateTemplateDrawables* New() const final {
    return new CommandSlideUpdateTemplateDrawables();
  }

  CommandSlideUpdateTemplateDrawables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSlideUpdateTemplateDrawables>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSlideUpdateTemplateDrawables& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandSlideUpdateTemplateDrawables& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSlideUpdateTemplateDrawables* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CommandSlideUpdateTemplateDrawables";
  }
  protected:
  explicit CommandSlideUpdateTemplateDrawables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdPlacementOperationArgsFieldNumber = 3,
    kOldChildInfosForUndoFieldNumber = 4,
    kSuperFieldNumber = 1,
    kSlideIdFieldNumber = 2,
  };
  // repeated .TSK.IdPlacementOperationArgs id_placement_operation_args = 3;
  int id_placement_operation_args_size() const;
  private:
  int _internal_id_placement_operation_args_size() const;
  public:
  void clear_id_placement_operation_args();
  ::TSK::IdPlacementOperationArgs* mutable_id_placement_operation_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >*
      mutable_id_placement_operation_args();
  private:
  const ::TSK::IdPlacementOperationArgs& _internal_id_placement_operation_args(int index) const;
  ::TSK::IdPlacementOperationArgs* _internal_add_id_placement_operation_args();
  public:
  const ::TSK::IdPlacementOperationArgs& id_placement_operation_args(int index) const;
  ::TSK::IdPlacementOperationArgs* add_id_placement_operation_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >&
      id_placement_operation_args() const;

  // repeated .TSP.Reference old_child_infos_for_undo = 4;
  int old_child_infos_for_undo_size() const;
  private:
  int _internal_old_child_infos_for_undo_size() const;
  public:
  void clear_old_child_infos_for_undo();
  ::TSP::Reference* mutable_old_child_infos_for_undo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_old_child_infos_for_undo();
  private:
  const ::TSP::Reference& _internal_old_child_infos_for_undo(int index) const;
  ::TSP::Reference* _internal_add_old_child_infos_for_undo();
  public:
  const ::TSP::Reference& old_child_infos_for_undo(int index) const;
  ::TSP::Reference* add_old_child_infos_for_undo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      old_child_infos_for_undo() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.UUID slide_id = 2;
  bool has_slide_id() const;
  private:
  bool _internal_has_slide_id() const;
  public:
  void clear_slide_id();
  const ::TSP::UUID& slide_id() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUID* release_slide_id();
  ::TSP::UUID* mutable_slide_id();
  void set_allocated_slide_id(::TSP::UUID* slide_id);
  private:
  const ::TSP::UUID& _internal_slide_id() const;
  ::TSP::UUID* _internal_mutable_slide_id();
  public:
  void unsafe_arena_set_allocated_slide_id(
      ::TSP::UUID* slide_id);
  ::TSP::UUID* unsafe_arena_release_slide_id();

  // @@protoc_insertion_point(class_scope:KN.CommandSlideUpdateTemplateDrawables)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs > id_placement_operation_args_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > old_child_infos_for_undo_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUID* slide_id_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartInfoGeometryCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ChartInfoGeometryCommandArchive) */ {
 public:
  inline ChartInfoGeometryCommandArchive() : ChartInfoGeometryCommandArchive(nullptr) {}
  ~ChartInfoGeometryCommandArchive() override;
  explicit constexpr ChartInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartInfoGeometryCommandArchive(const ChartInfoGeometryCommandArchive& from);
  ChartInfoGeometryCommandArchive(ChartInfoGeometryCommandArchive&& from) noexcept
    : ChartInfoGeometryCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChartInfoGeometryCommandArchive& operator=(const ChartInfoGeometryCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartInfoGeometryCommandArchive& operator=(ChartInfoGeometryCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartInfoGeometryCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartInfoGeometryCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChartInfoGeometryCommandArchive*>(
               &_ChartInfoGeometryCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ChartInfoGeometryCommandArchive& a, ChartInfoGeometryCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartInfoGeometryCommandArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartInfoGeometryCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartInfoGeometryCommandArchive* New() const final {
    return new ChartInfoGeometryCommandArchive();
  }

  ChartInfoGeometryCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartInfoGeometryCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartInfoGeometryCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartInfoGeometryCommandArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartInfoGeometryCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ChartInfoGeometryCommandArchive";
  }
  protected:
  explicit ChartInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPreviousLegendOffsetFieldNumber = 2,
    kPreviousLegendSizeFieldNumber = 3,
    kAdjustedLegendOffsetFieldNumber = 4,
    kAdjustedLegendSizeFieldNumber = 5,
  };
  // required .TSD.InfoGeometryCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoGeometryCommandArchive& super() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::InfoGeometryCommandArchive* release_super();
  ::TSD::InfoGeometryCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoGeometryCommandArchive* super);
  private:
  const ::TSD::InfoGeometryCommandArchive& _internal_super() const;
  ::TSD::InfoGeometryCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoGeometryCommandArchive* super);
  ::TSD::InfoGeometryCommandArchive* unsafe_arena_release_super();

  // required .TSP.Point previous_legend_offset = 2;
  bool has_previous_legend_offset() const;
  private:
  bool _internal_has_previous_legend_offset() const;
  public:
  void clear_previous_legend_offset();
  const ::TSP::Point& previous_legend_offset() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Point* release_previous_legend_offset();
  ::TSP::Point* mutable_previous_legend_offset();
  void set_allocated_previous_legend_offset(::TSP::Point* previous_legend_offset);
  private:
  const ::TSP::Point& _internal_previous_legend_offset() const;
  ::TSP::Point* _internal_mutable_previous_legend_offset();
  public:
  void unsafe_arena_set_allocated_previous_legend_offset(
      ::TSP::Point* previous_legend_offset);
  ::TSP::Point* unsafe_arena_release_previous_legend_offset();

  // required .TSP.Size previous_legend_size = 3;
  bool has_previous_legend_size() const;
  private:
  bool _internal_has_previous_legend_size() const;
  public:
  void clear_previous_legend_size();
  const ::TSP::Size& previous_legend_size() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Size* release_previous_legend_size();
  ::TSP::Size* mutable_previous_legend_size();
  void set_allocated_previous_legend_size(::TSP::Size* previous_legend_size);
  private:
  const ::TSP::Size& _internal_previous_legend_size() const;
  ::TSP::Size* _internal_mutable_previous_legend_size();
  public:
  void unsafe_arena_set_allocated_previous_legend_size(
      ::TSP::Size* previous_legend_size);
  ::TSP::Size* unsafe_arena_release_previous_legend_size();

  // required .TSP.Point adjusted_legend_offset = 4;
  bool has_adjusted_legend_offset() const;
  private:
  bool _internal_has_adjusted_legend_offset() const;
  public:
  void clear_adjusted_legend_offset();
  const ::TSP::Point& adjusted_legend_offset() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Point* release_adjusted_legend_offset();
  ::TSP::Point* mutable_adjusted_legend_offset();
  void set_allocated_adjusted_legend_offset(::TSP::Point* adjusted_legend_offset);
  private:
  const ::TSP::Point& _internal_adjusted_legend_offset() const;
  ::TSP::Point* _internal_mutable_adjusted_legend_offset();
  public:
  void unsafe_arena_set_allocated_adjusted_legend_offset(
      ::TSP::Point* adjusted_legend_offset);
  ::TSP::Point* unsafe_arena_release_adjusted_legend_offset();

  // required .TSP.Size adjusted_legend_size = 5;
  bool has_adjusted_legend_size() const;
  private:
  bool _internal_has_adjusted_legend_size() const;
  public:
  void clear_adjusted_legend_size();
  const ::TSP::Size& adjusted_legend_size() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Size* release_adjusted_legend_size();
  ::TSP::Size* mutable_adjusted_legend_size();
  void set_allocated_adjusted_legend_size(::TSP::Size* adjusted_legend_size);
  private:
  const ::TSP::Size& _internal_adjusted_legend_size() const;
  ::TSP::Size* _internal_mutable_adjusted_legend_size();
  public:
  void unsafe_arena_set_allocated_adjusted_legend_size(
      ::TSP::Size* adjusted_legend_size);
  ::TSP::Size* unsafe_arena_release_adjusted_legend_size();

  // @@protoc_insertion_point(class_scope:KN.ChartInfoGeometryCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoGeometryCommandArchive* super_;
  ::TSP::Point* previous_legend_offset_;
  ::TSP::Size* previous_legend_size_;
  ::TSP::Point* adjusted_legend_offset_;
  ::TSP::Size* adjusted_legend_size_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CanvasSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.CanvasSelectionTransformerArchive) */ {
 public:
  inline CanvasSelectionTransformerArchive() : CanvasSelectionTransformerArchive(nullptr) {}
  ~CanvasSelectionTransformerArchive() override;
  explicit constexpr CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanvasSelectionTransformerArchive(const CanvasSelectionTransformerArchive& from);
  CanvasSelectionTransformerArchive(CanvasSelectionTransformerArchive&& from) noexcept
    : CanvasSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline CanvasSelectionTransformerArchive& operator=(const CanvasSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanvasSelectionTransformerArchive& operator=(CanvasSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanvasSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanvasSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const CanvasSelectionTransformerArchive*>(
               &_CanvasSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CanvasSelectionTransformerArchive& a, CanvasSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanvasSelectionTransformerArchive* New() const final {
    return new CanvasSelectionTransformerArchive();
  }

  CanvasSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanvasSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanvasSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CanvasSelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanvasSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.CanvasSelectionTransformerArchive";
  }
  protected:
  explicit CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildChunkIdsFieldNumber = 2,
    kActionBuildIdsFieldNumber = 3,
    kOriginallySelectedDrawableUuidsFieldNumber = 4,
    kTransformerHelperFieldNumber = 1,
  };
  // repeated .KN.BuildChunkIdentifierArchive build_chunk_ids = 2;
  int build_chunk_ids_size() const;
  private:
  int _internal_build_chunk_ids_size() const;
  public:
  void clear_build_chunk_ids();
  ::KN::BuildChunkIdentifierArchive* mutable_build_chunk_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
      mutable_build_chunk_ids();
  private:
  const ::KN::BuildChunkIdentifierArchive& _internal_build_chunk_ids(int index) const;
  ::KN::BuildChunkIdentifierArchive* _internal_add_build_chunk_ids();
  public:
  const ::KN::BuildChunkIdentifierArchive& build_chunk_ids(int index) const;
  ::KN::BuildChunkIdentifierArchive* add_build_chunk_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
      build_chunk_ids() const;

  // repeated .TSP.UUID action_build_ids = 3;
  int action_build_ids_size() const;
  private:
  int _internal_action_build_ids_size() const;
  public:
  void clear_action_build_ids();
  ::TSP::UUID* mutable_action_build_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_action_build_ids();
  private:
  const ::TSP::UUID& _internal_action_build_ids(int index) const;
  ::TSP::UUID* _internal_add_action_build_ids();
  public:
  const ::TSP::UUID& action_build_ids(int index) const;
  ::TSP::UUID* add_action_build_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      action_build_ids() const;

  // repeated .TSP.UUID originally_selected_drawable_uuids = 4;
  int originally_selected_drawable_uuids_size() const;
  private:
  int _internal_originally_selected_drawable_uuids_size() const;
  public:
  void clear_originally_selected_drawable_uuids();
  ::TSP::UUID* mutable_originally_selected_drawable_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_originally_selected_drawable_uuids();
  private:
  const ::TSP::UUID& _internal_originally_selected_drawable_uuids(int index) const;
  ::TSP::UUID* _internal_add_originally_selected_drawable_uuids();
  public:
  const ::TSP::UUID& originally_selected_drawable_uuids(int index) const;
  ::TSP::UUID* add_originally_selected_drawable_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      originally_selected_drawable_uuids() const;

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  bool has_transformer_helper() const;
  private:
  bool _internal_has_transformer_helper() const;
  public:
  void clear_transformer_helper();
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::InfoCollectionSelectionTransformerHelperArchive* release_transformer_helper();
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* mutable_transformer_helper();
  void set_allocated_transformer_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper);
  private:
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& _internal_transformer_helper() const;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* _internal_mutable_transformer_helper();
  public:
  void unsafe_arena_set_allocated_transformer_helper(
      ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper);
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* unsafe_arena_release_transformer_helper();

  // @@protoc_insertion_point(class_scope:KN.CanvasSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive > build_chunk_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > action_build_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > originally_selected_drawable_uuids_;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ActionGhostSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.ActionGhostSelectionTransformerArchive) */ {
 public:
  inline ActionGhostSelectionTransformerArchive() : ActionGhostSelectionTransformerArchive(nullptr) {}
  ~ActionGhostSelectionTransformerArchive() override;
  explicit constexpr ActionGhostSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionGhostSelectionTransformerArchive(const ActionGhostSelectionTransformerArchive& from);
  ActionGhostSelectionTransformerArchive(ActionGhostSelectionTransformerArchive&& from) noexcept
    : ActionGhostSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline ActionGhostSelectionTransformerArchive& operator=(const ActionGhostSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionGhostSelectionTransformerArchive& operator=(ActionGhostSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionGhostSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionGhostSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const ActionGhostSelectionTransformerArchive*>(
               &_ActionGhostSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ActionGhostSelectionTransformerArchive& a, ActionGhostSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionGhostSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionGhostSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionGhostSelectionTransformerArchive* New() const final {
    return new ActionGhostSelectionTransformerArchive();
  }

  ActionGhostSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionGhostSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActionGhostSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActionGhostSelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionGhostSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.ActionGhostSelectionTransformerArchive";
  }
  protected:
  explicit ActionGhostSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:KN.ActionGhostSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DocumentSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.DocumentSelectionTransformerArchive) */ {
 public:
  inline DocumentSelectionTransformerArchive() : DocumentSelectionTransformerArchive(nullptr) {}
  ~DocumentSelectionTransformerArchive() override;
  explicit constexpr DocumentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentSelectionTransformerArchive(const DocumentSelectionTransformerArchive& from);
  DocumentSelectionTransformerArchive(DocumentSelectionTransformerArchive&& from) noexcept
    : DocumentSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline DocumentSelectionTransformerArchive& operator=(const DocumentSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentSelectionTransformerArchive& operator=(DocumentSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentSelectionTransformerArchive*>(
               &_DocumentSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(DocumentSelectionTransformerArchive& a, DocumentSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentSelectionTransformerArchive* New() const final {
    return new DocumentSelectionTransformerArchive();
  }

  DocumentSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DocumentSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DocumentSelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.DocumentSelectionTransformerArchive";
  }
  protected:
  explicit DocumentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentSelectionFieldNumber = 1,
  };
  // required .TSP.Reference document_selection = 1;
  bool has_document_selection() const;
  private:
  bool _internal_has_document_selection() const;
  public:
  void clear_document_selection();
  const ::TSP::Reference& document_selection() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_document_selection();
  ::TSP::Reference* mutable_document_selection();
  void set_allocated_document_selection(::TSP::Reference* document_selection);
  private:
  const ::TSP::Reference& _internal_document_selection() const;
  ::TSP::Reference* _internal_mutable_document_selection();
  public:
  void unsafe_arena_set_allocated_document_selection(
      ::TSP::Reference* document_selection);
  ::TSP::Reference* unsafe_arena_release_document_selection();

  // @@protoc_insertion_point(class_scope:KN.DocumentSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* document_selection_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class NoteCanvasSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.NoteCanvasSelectionTransformerArchive) */ {
 public:
  inline NoteCanvasSelectionTransformerArchive() : NoteCanvasSelectionTransformerArchive(nullptr) {}
  ~NoteCanvasSelectionTransformerArchive() override;
  explicit constexpr NoteCanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoteCanvasSelectionTransformerArchive(const NoteCanvasSelectionTransformerArchive& from);
  NoteCanvasSelectionTransformerArchive(NoteCanvasSelectionTransformerArchive&& from) noexcept
    : NoteCanvasSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline NoteCanvasSelectionTransformerArchive& operator=(const NoteCanvasSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoteCanvasSelectionTransformerArchive& operator=(NoteCanvasSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoteCanvasSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoteCanvasSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const NoteCanvasSelectionTransformerArchive*>(
               &_NoteCanvasSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(NoteCanvasSelectionTransformerArchive& a, NoteCanvasSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NoteCanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoteCanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NoteCanvasSelectionTransformerArchive* New() const final {
    return new NoteCanvasSelectionTransformerArchive();
  }

  NoteCanvasSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoteCanvasSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoteCanvasSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NoteCanvasSelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoteCanvasSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.NoteCanvasSelectionTransformerArchive";
  }
  protected:
  explicit NoteCanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformerHelperFieldNumber = 1,
  };
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  bool has_transformer_helper() const;
  private:
  bool _internal_has_transformer_helper() const;
  public:
  void clear_transformer_helper();
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::InfoCollectionSelectionTransformerHelperArchive* release_transformer_helper();
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* mutable_transformer_helper();
  void set_allocated_transformer_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper);
  private:
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& _internal_transformer_helper() const;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* _internal_mutable_transformer_helper();
  public:
  void unsafe_arena_set_allocated_transformer_helper(
      ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper);
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* unsafe_arena_release_transformer_helper();

  // @@protoc_insertion_point(class_scope:KN.NoteCanvasSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class OutlineCanvasSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.OutlineCanvasSelectionTransformerArchive) */ {
 public:
  inline OutlineCanvasSelectionTransformerArchive() : OutlineCanvasSelectionTransformerArchive(nullptr) {}
  ~OutlineCanvasSelectionTransformerArchive() override;
  explicit constexpr OutlineCanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutlineCanvasSelectionTransformerArchive(const OutlineCanvasSelectionTransformerArchive& from);
  OutlineCanvasSelectionTransformerArchive(OutlineCanvasSelectionTransformerArchive&& from) noexcept
    : OutlineCanvasSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline OutlineCanvasSelectionTransformerArchive& operator=(const OutlineCanvasSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutlineCanvasSelectionTransformerArchive& operator=(OutlineCanvasSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutlineCanvasSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutlineCanvasSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const OutlineCanvasSelectionTransformerArchive*>(
               &_OutlineCanvasSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(OutlineCanvasSelectionTransformerArchive& a, OutlineCanvasSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(OutlineCanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutlineCanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutlineCanvasSelectionTransformerArchive* New() const final {
    return new OutlineCanvasSelectionTransformerArchive();
  }

  OutlineCanvasSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutlineCanvasSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutlineCanvasSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutlineCanvasSelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutlineCanvasSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.OutlineCanvasSelectionTransformerArchive";
  }
  protected:
  explicit OutlineCanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanvasSelectionTransformerFieldNumber = 1,
    kStorageUuidPathFieldNumber = 2,
  };
  // required .TSP.Reference canvas_selection_transformer = 1;
  bool has_canvas_selection_transformer() const;
  private:
  bool _internal_has_canvas_selection_transformer() const;
  public:
  void clear_canvas_selection_transformer();
  const ::TSP::Reference& canvas_selection_transformer() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Reference* release_canvas_selection_transformer();
  ::TSP::Reference* mutable_canvas_selection_transformer();
  void set_allocated_canvas_selection_transformer(::TSP::Reference* canvas_selection_transformer);
  private:
  const ::TSP::Reference& _internal_canvas_selection_transformer() const;
  ::TSP::Reference* _internal_mutable_canvas_selection_transformer();
  public:
  void unsafe_arena_set_allocated_canvas_selection_transformer(
      ::TSP::Reference* canvas_selection_transformer);
  ::TSP::Reference* unsafe_arena_release_canvas_selection_transformer();

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  bool has_storage_uuid_path() const;
  private:
  bool _internal_has_storage_uuid_path() const;
  public:
  void clear_storage_uuid_path();
  const ::TSP::UUIDPath& storage_uuid_path() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_storage_uuid_path();
  ::TSP::UUIDPath* mutable_storage_uuid_path();
  void set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_storage_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_storage_uuid_path();
  public:
  void unsafe_arena_set_allocated_storage_uuid_path(
      ::TSP::UUIDPath* storage_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_storage_uuid_path();

  // @@protoc_insertion_point(class_scope:KN.OutlineCanvasSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* canvas_selection_transformer_;
  ::TSP::UUIDPath* storage_uuid_path_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideCollectionSelectionTransformerHelperArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideCollectionSelectionTransformerHelperArchive) */ {
 public:
  inline SlideCollectionSelectionTransformerHelperArchive() : SlideCollectionSelectionTransformerHelperArchive(nullptr) {}
  ~SlideCollectionSelectionTransformerHelperArchive() override;
  explicit constexpr SlideCollectionSelectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideCollectionSelectionTransformerHelperArchive(const SlideCollectionSelectionTransformerHelperArchive& from);
  SlideCollectionSelectionTransformerHelperArchive(SlideCollectionSelectionTransformerHelperArchive&& from) noexcept
    : SlideCollectionSelectionTransformerHelperArchive() {
    *this = ::std::move(from);
  }

  inline SlideCollectionSelectionTransformerHelperArchive& operator=(const SlideCollectionSelectionTransformerHelperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideCollectionSelectionTransformerHelperArchive& operator=(SlideCollectionSelectionTransformerHelperArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideCollectionSelectionTransformerHelperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideCollectionSelectionTransformerHelperArchive* internal_default_instance() {
    return reinterpret_cast<const SlideCollectionSelectionTransformerHelperArchive*>(
               &_SlideCollectionSelectionTransformerHelperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SlideCollectionSelectionTransformerHelperArchive& a, SlideCollectionSelectionTransformerHelperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideCollectionSelectionTransformerHelperArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideCollectionSelectionTransformerHelperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideCollectionSelectionTransformerHelperArchive* New() const final {
    return new SlideCollectionSelectionTransformerHelperArchive();
  }

  SlideCollectionSelectionTransformerHelperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideCollectionSelectionTransformerHelperArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideCollectionSelectionTransformerHelperArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideCollectionSelectionTransformerHelperArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideCollectionSelectionTransformerHelperArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideCollectionSelectionTransformerHelperArchive";
  }
  protected:
  explicit SlideCollectionSelectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlideNodesFieldNumber = 1,
    kSlideNodeToEditFieldNumber = 2,
    kSlideCollectionIsThemeFieldNumber = 3,
    kPreviousPrimarySelectedIndexFieldNumber = 4,
  };
  // repeated .TSP.UUIDPath slide_nodes = 1;
  int slide_nodes_size() const;
  private:
  int _internal_slide_nodes_size() const;
  public:
  void clear_slide_nodes();
  ::TSP::UUIDPath* mutable_slide_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
      mutable_slide_nodes();
  private:
  const ::TSP::UUIDPath& _internal_slide_nodes(int index) const;
  ::TSP::UUIDPath* _internal_add_slide_nodes();
  public:
  const ::TSP::UUIDPath& slide_nodes(int index) const;
  ::TSP::UUIDPath* add_slide_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
      slide_nodes() const;

  // optional .TSP.UUIDPath slide_node_to_edit = 2;
  bool has_slide_node_to_edit() const;
  private:
  bool _internal_has_slide_node_to_edit() const;
  public:
  void clear_slide_node_to_edit();
  const ::TSP::UUIDPath& slide_node_to_edit() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::UUIDPath* release_slide_node_to_edit();
  ::TSP::UUIDPath* mutable_slide_node_to_edit();
  void set_allocated_slide_node_to_edit(::TSP::UUIDPath* slide_node_to_edit);
  private:
  const ::TSP::UUIDPath& _internal_slide_node_to_edit() const;
  ::TSP::UUIDPath* _internal_mutable_slide_node_to_edit();
  public:
  void unsafe_arena_set_allocated_slide_node_to_edit(
      ::TSP::UUIDPath* slide_node_to_edit);
  ::TSP::UUIDPath* unsafe_arena_release_slide_node_to_edit();

  // optional bool slide_collection_is_theme = 3 [default = false];
  bool has_slide_collection_is_theme() const;
  private:
  bool _internal_has_slide_collection_is_theme() const;
  public:
  void clear_slide_collection_is_theme();
  bool slide_collection_is_theme() const;
  void set_slide_collection_is_theme(bool value);
  private:
  bool _internal_slide_collection_is_theme() const;
  void _internal_set_slide_collection_is_theme(bool value);
  public:

  // optional uint32 previous_primary_selected_index = 4;
  bool has_previous_primary_selected_index() const;
  private:
  bool _internal_has_previous_primary_selected_index() const;
  public:
  void clear_previous_primary_selected_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 previous_primary_selected_index() const;
  void set_previous_primary_selected_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_previous_primary_selected_index() const;
  void _internal_set_previous_primary_selected_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:KN.SlideCollectionSelectionTransformerHelperArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath > slide_nodes_;
  ::TSP::UUIDPath* slide_node_to_edit_;
  bool slide_collection_is_theme_;
  ::PROTOBUF_NAMESPACE_ID::uint32 previous_primary_selected_index_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SlideCollectionSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.SlideCollectionSelectionTransformerArchive) */ {
 public:
  inline SlideCollectionSelectionTransformerArchive() : SlideCollectionSelectionTransformerArchive(nullptr) {}
  ~SlideCollectionSelectionTransformerArchive() override;
  explicit constexpr SlideCollectionSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlideCollectionSelectionTransformerArchive(const SlideCollectionSelectionTransformerArchive& from);
  SlideCollectionSelectionTransformerArchive(SlideCollectionSelectionTransformerArchive&& from) noexcept
    : SlideCollectionSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline SlideCollectionSelectionTransformerArchive& operator=(const SlideCollectionSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlideCollectionSelectionTransformerArchive& operator=(SlideCollectionSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlideCollectionSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlideCollectionSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const SlideCollectionSelectionTransformerArchive*>(
               &_SlideCollectionSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SlideCollectionSelectionTransformerArchive& a, SlideCollectionSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SlideCollectionSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlideCollectionSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlideCollectionSelectionTransformerArchive* New() const final {
    return new SlideCollectionSelectionTransformerArchive();
  }

  SlideCollectionSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlideCollectionSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlideCollectionSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlideCollectionSelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlideCollectionSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.SlideCollectionSelectionTransformerArchive";
  }
  protected:
  explicit SlideCollectionSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformerHelperFieldNumber = 1,
  };
  // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  bool has_transformer_helper() const;
  private:
  bool _internal_has_transformer_helper() const;
  public:
  void clear_transformer_helper();
  const ::KN::SlideCollectionSelectionTransformerHelperArchive& transformer_helper() const;
  PROTOBUF_MUST_USE_RESULT ::KN::SlideCollectionSelectionTransformerHelperArchive* release_transformer_helper();
  ::KN::SlideCollectionSelectionTransformerHelperArchive* mutable_transformer_helper();
  void set_allocated_transformer_helper(::KN::SlideCollectionSelectionTransformerHelperArchive* transformer_helper);
  private:
  const ::KN::SlideCollectionSelectionTransformerHelperArchive& _internal_transformer_helper() const;
  ::KN::SlideCollectionSelectionTransformerHelperArchive* _internal_mutable_transformer_helper();
  public:
  void unsafe_arena_set_allocated_transformer_helper(
      ::KN::SlideCollectionSelectionTransformerHelperArchive* transformer_helper);
  ::KN::SlideCollectionSelectionTransformerHelperArchive* unsafe_arena_release_transformer_helper();

  // @@protoc_insertion_point(class_scope:KN.SlideCollectionSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::KN::SlideCollectionSelectionTransformerHelperArchive* transformer_helper_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class OutlineSelectionTransformerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KN.OutlineSelectionTransformerArchive) */ {
 public:
  inline OutlineSelectionTransformerArchive() : OutlineSelectionTransformerArchive(nullptr) {}
  ~OutlineSelectionTransformerArchive() override;
  explicit constexpr OutlineSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutlineSelectionTransformerArchive(const OutlineSelectionTransformerArchive& from);
  OutlineSelectionTransformerArchive(OutlineSelectionTransformerArchive&& from) noexcept
    : OutlineSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline OutlineSelectionTransformerArchive& operator=(const OutlineSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutlineSelectionTransformerArchive& operator=(OutlineSelectionTransformerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutlineSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutlineSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const OutlineSelectionTransformerArchive*>(
               &_OutlineSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(OutlineSelectionTransformerArchive& a, OutlineSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(OutlineSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutlineSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutlineSelectionTransformerArchive* New() const final {
    return new OutlineSelectionTransformerArchive();
  }

  OutlineSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutlineSelectionTransformerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutlineSelectionTransformerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutlineSelectionTransformerArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutlineSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KN.OutlineSelectionTransformerArchive";
  }
  protected:
  explicit OutlineSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionRangeAddressesFieldNumber = 3,
    kTransformerHelperFieldNumber = 1,
    kCanHaveRangeInSelectedParagraphFieldNumber = 2,
  };
  // repeated .TSK.RangeAddress selection_range_addresses = 3;
  int selection_range_addresses_size() const;
  private:
  int _internal_selection_range_addresses_size() const;
  public:
  void clear_selection_range_addresses();
  ::TSK::RangeAddress* mutable_selection_range_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RangeAddress >*
      mutable_selection_range_addresses();
  private:
  const ::TSK::RangeAddress& _internal_selection_range_addresses(int index) const;
  ::TSK::RangeAddress* _internal_add_selection_range_addresses();
  public:
  const ::TSK::RangeAddress& selection_range_addresses(int index) const;
  ::TSK::RangeAddress* add_selection_range_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RangeAddress >&
      selection_range_addresses() const;

  // required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  bool has_transformer_helper() const;
  private:
  bool _internal_has_transformer_helper() const;
  public:
  void clear_transformer_helper();
  const ::KN::SlideCollectionSelectionTransformerHelperArchive& transformer_helper() const;
  PROTOBUF_MUST_USE_RESULT ::KN::SlideCollectionSelectionTransformerHelperArchive* release_transformer_helper();
  ::KN::SlideCollectionSelectionTransformerHelperArchive* mutable_transformer_helper();
  void set_allocated_transformer_helper(::KN::SlideCollectionSelectionTransformerHelperArchive* transformer_helper);
  private:
  const ::KN::SlideCollectionSelectionTransformerHelperArchive& _internal_transformer_helper() const;
  ::KN::SlideCollectionSelectionTransformerHelperArchive* _internal_mutable_transformer_helper();
  public:
  void unsafe_arena_set_allocated_transformer_helper(
      ::KN::SlideCollectionSelectionTransformerHelperArchive* transformer_helper);
  ::KN::SlideCollectionSelectionTransformerHelperArchive* unsafe_arena_release_transformer_helper();

  // optional bool can_have_range_in_selected_paragraph = 2 [default = false];
  bool has_can_have_range_in_selected_paragraph() const;
  private:
  bool _internal_has_can_have_range_in_selected_paragraph() const;
  public:
  void clear_can_have_range_in_selected_paragraph();
  bool can_have_range_in_selected_paragraph() const;
  void set_can_have_range_in_selected_paragraph(bool value);
  private:
  bool _internal_can_have_range_in_selected_paragraph() const;
  void _internal_set_can_have_range_in_selected_paragraph(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KN.OutlineSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RangeAddress > selection_range_addresses_;
  ::KN::SlideCollectionSelectionTransformerHelperArchive* transformer_helper_;
  bool can_have_range_in_selected_paragraph_;
  friend struct ::TableStruct_KNCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UIStateCommandGroupArchive

// required .TSK.CommandGroupArchive super = 1;
inline bool UIStateCommandGroupArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool UIStateCommandGroupArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandGroupArchive& UIStateCommandGroupArchive::_internal_super() const {
  const ::TSK::CommandGroupArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandGroupArchive&>(
      ::TSK::_CommandGroupArchive_default_instance_);
}
inline const ::TSK::CommandGroupArchive& UIStateCommandGroupArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.super)
  return _internal_super();
}
inline void UIStateCommandGroupArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandGroupArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateCommandGroupArchive.super)
}
inline ::TSK::CommandGroupArchive* UIStateCommandGroupArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandGroupArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandGroupArchive* UIStateCommandGroupArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.UIStateCommandGroupArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandGroupArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandGroupArchive* UIStateCommandGroupArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandGroupArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandGroupArchive* UIStateCommandGroupArchive::mutable_super() {
  ::TSK::CommandGroupArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.super)
  return _msg;
}
inline void UIStateCommandGroupArchive::set_allocated_super(::TSK::CommandGroupArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateCommandGroupArchive.super)
}

// required .TSP.Reference uiState = 2;
inline bool UIStateCommandGroupArchive::_internal_has_uistate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || uistate_ != nullptr);
  return value;
}
inline bool UIStateCommandGroupArchive::has_uistate() const {
  return _internal_has_uistate();
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::_internal_uistate() const {
  const ::TSP::Reference* p = uistate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::uistate() const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.uiState)
  return _internal_uistate();
}
inline void UIStateCommandGroupArchive::unsafe_arena_set_allocated_uistate(
    ::TSP::Reference* uistate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uistate_);
  }
  uistate_ = uistate;
  if (uistate) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UIStateCommandGroupArchive.uiState)
}
inline ::TSP::Reference* UIStateCommandGroupArchive::release_uistate() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = uistate_;
  uistate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UIStateCommandGroupArchive::unsafe_arena_release_uistate() {
  // @@protoc_insertion_point(field_release:KN.UIStateCommandGroupArchive.uiState)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = uistate_;
  uistate_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UIStateCommandGroupArchive::_internal_mutable_uistate() {
  _has_bits_[0] |= 0x00000004u;
  if (uistate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    uistate_ = p;
  }
  return uistate_;
}
inline ::TSP::Reference* UIStateCommandGroupArchive::mutable_uistate() {
  ::TSP::Reference* _msg = _internal_mutable_uistate();
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.uiState)
  return _msg;
}
inline void UIStateCommandGroupArchive::set_allocated_uistate(::TSP::Reference* uistate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uistate_);
  }
  if (uistate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uistate));
    if (message_arena != submessage_arena) {
      uistate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uistate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uistate_ = uistate;
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateCommandGroupArchive.uiState)
}

// required string property = 3;
inline bool UIStateCommandGroupArchive::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UIStateCommandGroupArchive::has_property() const {
  return _internal_has_property();
}
inline void UIStateCommandGroupArchive::clear_property() {
  property_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UIStateCommandGroupArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UIStateCommandGroupArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.UIStateCommandGroupArchive.property)
}
inline std::string* UIStateCommandGroupArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.property)
  return _s;
}
inline const std::string& UIStateCommandGroupArchive::_internal_property() const {
  return property_.Get();
}
inline void UIStateCommandGroupArchive::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UIStateCommandGroupArchive::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000001u;
  return property_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UIStateCommandGroupArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.UIStateCommandGroupArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UIStateCommandGroupArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.UIStateCommandGroupArchive.property)
}

// repeated .TSP.Reference slideNodesToEdit = 4;
inline int UIStateCommandGroupArchive::_internal_slidenodestoedit_size() const {
  return slidenodestoedit_.size();
}
inline int UIStateCommandGroupArchive::slidenodestoedit_size() const {
  return _internal_slidenodestoedit_size();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::mutable_slidenodestoedit(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.slideNodesToEdit)
  return slidenodestoedit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateCommandGroupArchive::mutable_slidenodestoedit() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateCommandGroupArchive.slideNodesToEdit)
  return &slidenodestoedit_;
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::_internal_slidenodestoedit(int index) const {
  return slidenodestoedit_.Get(index);
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::slidenodestoedit(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.slideNodesToEdit)
  return _internal_slidenodestoedit(index);
}
inline ::TSP::Reference* UIStateCommandGroupArchive::_internal_add_slidenodestoedit() {
  return slidenodestoedit_.Add();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::add_slidenodestoedit() {
  ::TSP::Reference* _add = _internal_add_slidenodestoedit();
  // @@protoc_insertion_point(field_add:KN.UIStateCommandGroupArchive.slideNodesToEdit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateCommandGroupArchive::slidenodestoedit() const {
  // @@protoc_insertion_point(field_list:KN.UIStateCommandGroupArchive.slideNodesToEdit)
  return slidenodestoedit_;
}

// repeated .TSP.Reference template_slide_nodes_to_apply = 5;
inline int UIStateCommandGroupArchive::_internal_template_slide_nodes_to_apply_size() const {
  return template_slide_nodes_to_apply_.size();
}
inline int UIStateCommandGroupArchive::template_slide_nodes_to_apply_size() const {
  return _internal_template_slide_nodes_to_apply_size();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::mutable_template_slide_nodes_to_apply(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.template_slide_nodes_to_apply)
  return template_slide_nodes_to_apply_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateCommandGroupArchive::mutable_template_slide_nodes_to_apply() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateCommandGroupArchive.template_slide_nodes_to_apply)
  return &template_slide_nodes_to_apply_;
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::_internal_template_slide_nodes_to_apply(int index) const {
  return template_slide_nodes_to_apply_.Get(index);
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::template_slide_nodes_to_apply(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.template_slide_nodes_to_apply)
  return _internal_template_slide_nodes_to_apply(index);
}
inline ::TSP::Reference* UIStateCommandGroupArchive::_internal_add_template_slide_nodes_to_apply() {
  return template_slide_nodes_to_apply_.Add();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::add_template_slide_nodes_to_apply() {
  ::TSP::Reference* _add = _internal_add_template_slide_nodes_to_apply();
  // @@protoc_insertion_point(field_add:KN.UIStateCommandGroupArchive.template_slide_nodes_to_apply)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateCommandGroupArchive::template_slide_nodes_to_apply() const {
  // @@protoc_insertion_point(field_list:KN.UIStateCommandGroupArchive.template_slide_nodes_to_apply)
  return template_slide_nodes_to_apply_;
}

// repeated .TSP.Size thumbnailSizes = 6;
inline int UIStateCommandGroupArchive::_internal_thumbnailsizes_size() const {
  return thumbnailsizes_.size();
}
inline int UIStateCommandGroupArchive::thumbnailsizes_size() const {
  return _internal_thumbnailsizes_size();
}
inline ::TSP::Size* UIStateCommandGroupArchive::mutable_thumbnailsizes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.thumbnailSizes)
  return thumbnailsizes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >*
UIStateCommandGroupArchive::mutable_thumbnailsizes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateCommandGroupArchive.thumbnailSizes)
  return &thumbnailsizes_;
}
inline const ::TSP::Size& UIStateCommandGroupArchive::_internal_thumbnailsizes(int index) const {
  return thumbnailsizes_.Get(index);
}
inline const ::TSP::Size& UIStateCommandGroupArchive::thumbnailsizes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.thumbnailSizes)
  return _internal_thumbnailsizes(index);
}
inline ::TSP::Size* UIStateCommandGroupArchive::_internal_add_thumbnailsizes() {
  return thumbnailsizes_.Add();
}
inline ::TSP::Size* UIStateCommandGroupArchive::add_thumbnailsizes() {
  ::TSP::Size* _add = _internal_add_thumbnailsizes();
  // @@protoc_insertion_point(field_add:KN.UIStateCommandGroupArchive.thumbnailSizes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Size >&
UIStateCommandGroupArchive::thumbnailsizes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateCommandGroupArchive.thumbnailSizes)
  return thumbnailsizes_;
}

// repeated .TSP.Reference selectedSlideNodes = 7;
inline int UIStateCommandGroupArchive::_internal_selectedslidenodes_size() const {
  return selectedslidenodes_.size();
}
inline int UIStateCommandGroupArchive::selectedslidenodes_size() const {
  return _internal_selectedslidenodes_size();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::mutable_selectedslidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.selectedSlideNodes)
  return selectedslidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateCommandGroupArchive::mutable_selectedslidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateCommandGroupArchive.selectedSlideNodes)
  return &selectedslidenodes_;
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::_internal_selectedslidenodes(int index) const {
  return selectedslidenodes_.Get(index);
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::selectedslidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.selectedSlideNodes)
  return _internal_selectedslidenodes(index);
}
inline ::TSP::Reference* UIStateCommandGroupArchive::_internal_add_selectedslidenodes() {
  return selectedslidenodes_.Add();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::add_selectedslidenodes() {
  ::TSP::Reference* _add = _internal_add_selectedslidenodes();
  // @@protoc_insertion_point(field_add:KN.UIStateCommandGroupArchive.selectedSlideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateCommandGroupArchive::selectedslidenodes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateCommandGroupArchive.selectedSlideNodes)
  return selectedslidenodes_;
}

// repeated .TSP.Reference restoreSelectedSlideNodes = 8;
inline int UIStateCommandGroupArchive::_internal_restoreselectedslidenodes_size() const {
  return restoreselectedslidenodes_.size();
}
inline int UIStateCommandGroupArchive::restoreselectedslidenodes_size() const {
  return _internal_restoreselectedslidenodes_size();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::mutable_restoreselectedslidenodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.UIStateCommandGroupArchive.restoreSelectedSlideNodes)
  return restoreselectedslidenodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UIStateCommandGroupArchive::mutable_restoreselectedslidenodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.UIStateCommandGroupArchive.restoreSelectedSlideNodes)
  return &restoreselectedslidenodes_;
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::_internal_restoreselectedslidenodes(int index) const {
  return restoreselectedslidenodes_.Get(index);
}
inline const ::TSP::Reference& UIStateCommandGroupArchive::restoreselectedslidenodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.UIStateCommandGroupArchive.restoreSelectedSlideNodes)
  return _internal_restoreselectedslidenodes(index);
}
inline ::TSP::Reference* UIStateCommandGroupArchive::_internal_add_restoreselectedslidenodes() {
  return restoreselectedslidenodes_.Add();
}
inline ::TSP::Reference* UIStateCommandGroupArchive::add_restoreselectedslidenodes() {
  ::TSP::Reference* _add = _internal_add_restoreselectedslidenodes();
  // @@protoc_insertion_point(field_add:KN.UIStateCommandGroupArchive.restoreSelectedSlideNodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UIStateCommandGroupArchive::restoreselectedslidenodes() const {
  // @@protoc_insertion_point(field_list:KN.UIStateCommandGroupArchive.restoreSelectedSlideNodes)
  return restoreselectedslidenodes_;
}

// -------------------------------------------------------------------

// CommandSlideInsertDrawablesArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideInsertDrawablesArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideInsertDrawablesArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.super)
  return _internal_super();
}
inline void CommandSlideInsertDrawablesArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertDrawablesArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideInsertDrawablesArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertDrawablesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertDrawablesArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertDrawablesArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideInsertDrawablesArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.super)
  return _msg;
}
inline void CommandSlideInsertDrawablesArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertDrawablesArchive.super)
}

// required .TSP.UUID slide_id = 2;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_slide_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_ != nullptr);
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_slide_id() const {
  return _internal_has_slide_id();
}
inline const ::TSP::UUID& CommandSlideInsertDrawablesArchive::_internal_slide_id() const {
  const ::TSP::UUID* p = slide_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSlideInsertDrawablesArchive::slide_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.slide_id)
  return _internal_slide_id();
}
inline void CommandSlideInsertDrawablesArchive::unsafe_arena_set_allocated_slide_id(
    ::TSP::UUID* slide_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  slide_id_ = slide_id;
  if (slide_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertDrawablesArchive.slide_id)
}
inline ::TSP::UUID* CommandSlideInsertDrawablesArchive::release_slide_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSlideInsertDrawablesArchive::unsafe_arena_release_slide_id() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertDrawablesArchive.slide_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSlideInsertDrawablesArchive::_internal_mutable_slide_id() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    slide_id_ = p;
  }
  return slide_id_;
}
inline ::TSP::UUID* CommandSlideInsertDrawablesArchive::mutable_slide_id() {
  ::TSP::UUID* _msg = _internal_mutable_slide_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.slide_id)
  return _msg;
}
inline void CommandSlideInsertDrawablesArchive::set_allocated_slide_id(::TSP::UUID* slide_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  if (slide_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id));
    if (message_arena != submessage_arena) {
      slide_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_ = slide_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertDrawablesArchive.slide_id)
}

// repeated .TSP.Reference drawables = 3;
inline int CommandSlideInsertDrawablesArchive::_internal_drawables_size() const {
  return drawables_.size();
}
inline int CommandSlideInsertDrawablesArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.drawables)
  return drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideInsertDrawablesArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertDrawablesArchive.drawables)
  return &drawables_;
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::_internal_drawables(int index) const {
  return drawables_.Get(index);
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::_internal_add_drawables() {
  return drawables_.Add();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideInsertDrawablesArchive::drawables() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertDrawablesArchive.drawables)
  return drawables_;
}

// repeated .TSP.Reference working_drawables = 18;
inline int CommandSlideInsertDrawablesArchive::_internal_working_drawables_size() const {
  return working_drawables_.size();
}
inline int CommandSlideInsertDrawablesArchive::working_drawables_size() const {
  return _internal_working_drawables_size();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::mutable_working_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.working_drawables)
  return working_drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideInsertDrawablesArchive::mutable_working_drawables() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertDrawablesArchive.working_drawables)
  return &working_drawables_;
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::_internal_working_drawables(int index) const {
  return working_drawables_.Get(index);
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::working_drawables(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.working_drawables)
  return _internal_working_drawables(index);
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::_internal_add_working_drawables() {
  return working_drawables_.Add();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::add_working_drawables() {
  ::TSP::Reference* _add = _internal_add_working_drawables();
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.working_drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideInsertDrawablesArchive::working_drawables() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertDrawablesArchive.working_drawables)
  return working_drawables_;
}

// optional .KN.MixedIdOperationArgs args_list = 4;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_args_list() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || args_list_ != nullptr);
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_args_list() const {
  return _internal_has_args_list();
}
inline const ::KN::MixedIdOperationArgs& CommandSlideInsertDrawablesArchive::_internal_args_list() const {
  const ::KN::MixedIdOperationArgs* p = args_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::MixedIdOperationArgs&>(
      ::KN::_MixedIdOperationArgs_default_instance_);
}
inline const ::KN::MixedIdOperationArgs& CommandSlideInsertDrawablesArchive::args_list() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.args_list)
  return _internal_args_list();
}
inline void CommandSlideInsertDrawablesArchive::unsafe_arena_set_allocated_args_list(
    ::KN::MixedIdOperationArgs* args_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(args_list_);
  }
  args_list_ = args_list;
  if (args_list) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertDrawablesArchive.args_list)
}
inline ::KN::MixedIdOperationArgs* CommandSlideInsertDrawablesArchive::release_args_list() {
  _has_bits_[0] &= ~0x00000004u;
  ::KN::MixedIdOperationArgs* temp = args_list_;
  args_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::MixedIdOperationArgs* CommandSlideInsertDrawablesArchive::unsafe_arena_release_args_list() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertDrawablesArchive.args_list)
  _has_bits_[0] &= ~0x00000004u;
  ::KN::MixedIdOperationArgs* temp = args_list_;
  args_list_ = nullptr;
  return temp;
}
inline ::KN::MixedIdOperationArgs* CommandSlideInsertDrawablesArchive::_internal_mutable_args_list() {
  _has_bits_[0] |= 0x00000004u;
  if (args_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::MixedIdOperationArgs>(GetArenaForAllocation());
    args_list_ = p;
  }
  return args_list_;
}
inline ::KN::MixedIdOperationArgs* CommandSlideInsertDrawablesArchive::mutable_args_list() {
  ::KN::MixedIdOperationArgs* _msg = _internal_mutable_args_list();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.args_list)
  return _msg;
}
inline void CommandSlideInsertDrawablesArchive::set_allocated_args_list(::KN::MixedIdOperationArgs* args_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(args_list_);
  }
  if (args_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(args_list));
    if (message_arena != submessage_arena) {
      args_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, args_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  args_list_ = args_list;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertDrawablesArchive.args_list)
}

// required bool update_geometry_to_match_object_placeholder = 5;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_update_geometry_to_match_object_placeholder() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_update_geometry_to_match_object_placeholder() const {
  return _internal_has_update_geometry_to_match_object_placeholder();
}
inline void CommandSlideInsertDrawablesArchive::clear_update_geometry_to_match_object_placeholder() {
  update_geometry_to_match_object_placeholder_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandSlideInsertDrawablesArchive::_internal_update_geometry_to_match_object_placeholder() const {
  return update_geometry_to_match_object_placeholder_;
}
inline bool CommandSlideInsertDrawablesArchive::update_geometry_to_match_object_placeholder() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.update_geometry_to_match_object_placeholder)
  return _internal_update_geometry_to_match_object_placeholder();
}
inline void CommandSlideInsertDrawablesArchive::_internal_set_update_geometry_to_match_object_placeholder(bool value) {
  _has_bits_[0] |= 0x00000020u;
  update_geometry_to_match_object_placeholder_ = value;
}
inline void CommandSlideInsertDrawablesArchive::set_update_geometry_to_match_object_placeholder(bool value) {
  _internal_set_update_geometry_to_match_object_placeholder(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertDrawablesArchive.update_geometry_to_match_object_placeholder)
}

// repeated .TSP.UUID ids_of_drawables_using_object_placeholder_geometry = 6;
inline int CommandSlideInsertDrawablesArchive::_internal_ids_of_drawables_using_object_placeholder_geometry_size() const {
  return ids_of_drawables_using_object_placeholder_geometry_.size();
}
inline int CommandSlideInsertDrawablesArchive::ids_of_drawables_using_object_placeholder_geometry_size() const {
  return _internal_ids_of_drawables_using_object_placeholder_geometry_size();
}
inline ::TSP::UUID* CommandSlideInsertDrawablesArchive::mutable_ids_of_drawables_using_object_placeholder_geometry(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.ids_of_drawables_using_object_placeholder_geometry)
  return ids_of_drawables_using_object_placeholder_geometry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSlideInsertDrawablesArchive::mutable_ids_of_drawables_using_object_placeholder_geometry() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertDrawablesArchive.ids_of_drawables_using_object_placeholder_geometry)
  return &ids_of_drawables_using_object_placeholder_geometry_;
}
inline const ::TSP::UUID& CommandSlideInsertDrawablesArchive::_internal_ids_of_drawables_using_object_placeholder_geometry(int index) const {
  return ids_of_drawables_using_object_placeholder_geometry_.Get(index);
}
inline const ::TSP::UUID& CommandSlideInsertDrawablesArchive::ids_of_drawables_using_object_placeholder_geometry(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.ids_of_drawables_using_object_placeholder_geometry)
  return _internal_ids_of_drawables_using_object_placeholder_geometry(index);
}
inline ::TSP::UUID* CommandSlideInsertDrawablesArchive::_internal_add_ids_of_drawables_using_object_placeholder_geometry() {
  return ids_of_drawables_using_object_placeholder_geometry_.Add();
}
inline ::TSP::UUID* CommandSlideInsertDrawablesArchive::add_ids_of_drawables_using_object_placeholder_geometry() {
  ::TSP::UUID* _add = _internal_add_ids_of_drawables_using_object_placeholder_geometry();
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.ids_of_drawables_using_object_placeholder_geometry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSlideInsertDrawablesArchive::ids_of_drawables_using_object_placeholder_geometry() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertDrawablesArchive.ids_of_drawables_using_object_placeholder_geometry)
  return ids_of_drawables_using_object_placeholder_geometry_;
}

// repeated string sage_placeholder_tags_list = 7;
inline int CommandSlideInsertDrawablesArchive::_internal_sage_placeholder_tags_list_size() const {
  return sage_placeholder_tags_list_.size();
}
inline int CommandSlideInsertDrawablesArchive::sage_placeholder_tags_list_size() const {
  return _internal_sage_placeholder_tags_list_size();
}
inline void CommandSlideInsertDrawablesArchive::clear_sage_placeholder_tags_list() {
  sage_placeholder_tags_list_.Clear();
}
inline std::string* CommandSlideInsertDrawablesArchive::add_sage_placeholder_tags_list() {
  std::string* _s = _internal_add_sage_placeholder_tags_list();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
  return _s;
}
inline const std::string& CommandSlideInsertDrawablesArchive::_internal_sage_placeholder_tags_list(int index) const {
  return sage_placeholder_tags_list_.Get(index);
}
inline const std::string& CommandSlideInsertDrawablesArchive::sage_placeholder_tags_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
  return _internal_sage_placeholder_tags_list(index);
}
inline std::string* CommandSlideInsertDrawablesArchive::mutable_sage_placeholder_tags_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
  return sage_placeholder_tags_list_.Mutable(index);
}
inline void CommandSlideInsertDrawablesArchive::set_sage_placeholder_tags_list(int index, const std::string& value) {
  sage_placeholder_tags_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
}
inline void CommandSlideInsertDrawablesArchive::set_sage_placeholder_tags_list(int index, std::string&& value) {
  sage_placeholder_tags_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
}
inline void CommandSlideInsertDrawablesArchive::set_sage_placeholder_tags_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sage_placeholder_tags_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
}
inline void CommandSlideInsertDrawablesArchive::set_sage_placeholder_tags_list(int index, const char* value, size_t size) {
  sage_placeholder_tags_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
}
inline std::string* CommandSlideInsertDrawablesArchive::_internal_add_sage_placeholder_tags_list() {
  return sage_placeholder_tags_list_.Add();
}
inline void CommandSlideInsertDrawablesArchive::add_sage_placeholder_tags_list(const std::string& value) {
  sage_placeholder_tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
}
inline void CommandSlideInsertDrawablesArchive::add_sage_placeholder_tags_list(std::string&& value) {
  sage_placeholder_tags_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
}
inline void CommandSlideInsertDrawablesArchive::add_sage_placeholder_tags_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sage_placeholder_tags_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
}
inline void CommandSlideInsertDrawablesArchive::add_sage_placeholder_tags_list(const char* value, size_t size) {
  sage_placeholder_tags_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandSlideInsertDrawablesArchive::sage_placeholder_tags_list() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
  return sage_placeholder_tags_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandSlideInsertDrawablesArchive::mutable_sage_placeholder_tags_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertDrawablesArchive.sage_placeholder_tags_list)
  return &sage_placeholder_tags_list_;
}

// repeated string instructional_text_list = 20;
inline int CommandSlideInsertDrawablesArchive::_internal_instructional_text_list_size() const {
  return instructional_text_list_.size();
}
inline int CommandSlideInsertDrawablesArchive::instructional_text_list_size() const {
  return _internal_instructional_text_list_size();
}
inline void CommandSlideInsertDrawablesArchive::clear_instructional_text_list() {
  instructional_text_list_.Clear();
}
inline std::string* CommandSlideInsertDrawablesArchive::add_instructional_text_list() {
  std::string* _s = _internal_add_instructional_text_list();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
  return _s;
}
inline const std::string& CommandSlideInsertDrawablesArchive::_internal_instructional_text_list(int index) const {
  return instructional_text_list_.Get(index);
}
inline const std::string& CommandSlideInsertDrawablesArchive::instructional_text_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
  return _internal_instructional_text_list(index);
}
inline std::string* CommandSlideInsertDrawablesArchive::mutable_instructional_text_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
  return instructional_text_list_.Mutable(index);
}
inline void CommandSlideInsertDrawablesArchive::set_instructional_text_list(int index, const std::string& value) {
  instructional_text_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
}
inline void CommandSlideInsertDrawablesArchive::set_instructional_text_list(int index, std::string&& value) {
  instructional_text_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
}
inline void CommandSlideInsertDrawablesArchive::set_instructional_text_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  instructional_text_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
}
inline void CommandSlideInsertDrawablesArchive::set_instructional_text_list(int index, const char* value, size_t size) {
  instructional_text_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
}
inline std::string* CommandSlideInsertDrawablesArchive::_internal_add_instructional_text_list() {
  return instructional_text_list_.Add();
}
inline void CommandSlideInsertDrawablesArchive::add_instructional_text_list(const std::string& value) {
  instructional_text_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
}
inline void CommandSlideInsertDrawablesArchive::add_instructional_text_list(std::string&& value) {
  instructional_text_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
}
inline void CommandSlideInsertDrawablesArchive::add_instructional_text_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  instructional_text_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
}
inline void CommandSlideInsertDrawablesArchive::add_instructional_text_list(const char* value, size_t size) {
  instructional_text_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandSlideInsertDrawablesArchive::instructional_text_list() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
  return instructional_text_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandSlideInsertDrawablesArchive::mutable_instructional_text_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertDrawablesArchive.instructional_text_list)
  return &instructional_text_list_;
}

// optional .TSP.Reference undo_archive = 8;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_undo_archive() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || undo_archive_ != nullptr);
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_undo_archive() const {
  return _internal_has_undo_archive();
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::_internal_undo_archive() const {
  const ::TSP::Reference* p = undo_archive_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::undo_archive() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.undo_archive)
  return _internal_undo_archive();
}
inline void CommandSlideInsertDrawablesArchive::unsafe_arena_set_allocated_undo_archive(
    ::TSP::Reference* undo_archive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_archive_);
  }
  undo_archive_ = undo_archive;
  if (undo_archive) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertDrawablesArchive.undo_archive)
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::release_undo_archive() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = undo_archive_;
  undo_archive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::unsafe_arena_release_undo_archive() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertDrawablesArchive.undo_archive)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = undo_archive_;
  undo_archive_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::_internal_mutable_undo_archive() {
  _has_bits_[0] |= 0x00000008u;
  if (undo_archive_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    undo_archive_ = p;
  }
  return undo_archive_;
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::mutable_undo_archive() {
  ::TSP::Reference* _msg = _internal_mutable_undo_archive();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.undo_archive)
  return _msg;
}
inline void CommandSlideInsertDrawablesArchive::set_allocated_undo_archive(::TSP::Reference* undo_archive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_archive_);
  }
  if (undo_archive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_archive));
    if (message_arena != submessage_arena) {
      undo_archive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_archive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  undo_archive_ = undo_archive;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertDrawablesArchive.undo_archive)
}

// optional bool is_pasting = 9;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_is_pasting() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_is_pasting() const {
  return _internal_has_is_pasting();
}
inline void CommandSlideInsertDrawablesArchive::clear_is_pasting() {
  is_pasting_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CommandSlideInsertDrawablesArchive::_internal_is_pasting() const {
  return is_pasting_;
}
inline bool CommandSlideInsertDrawablesArchive::is_pasting() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.is_pasting)
  return _internal_is_pasting();
}
inline void CommandSlideInsertDrawablesArchive::_internal_set_is_pasting(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_pasting_ = value;
}
inline void CommandSlideInsertDrawablesArchive::set_is_pasting(bool value) {
  _internal_set_is_pasting(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertDrawablesArchive.is_pasting)
}

// repeated .TSP.Reference insert_build_descriptions = 10;
inline int CommandSlideInsertDrawablesArchive::_internal_insert_build_descriptions_size() const {
  return insert_build_descriptions_.size();
}
inline int CommandSlideInsertDrawablesArchive::insert_build_descriptions_size() const {
  return _internal_insert_build_descriptions_size();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::mutable_insert_build_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.insert_build_descriptions)
  return insert_build_descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideInsertDrawablesArchive::mutable_insert_build_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertDrawablesArchive.insert_build_descriptions)
  return &insert_build_descriptions_;
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::_internal_insert_build_descriptions(int index) const {
  return insert_build_descriptions_.Get(index);
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::insert_build_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.insert_build_descriptions)
  return _internal_insert_build_descriptions(index);
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::_internal_add_insert_build_descriptions() {
  return insert_build_descriptions_.Add();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::add_insert_build_descriptions() {
  ::TSP::Reference* _add = _internal_add_insert_build_descriptions();
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.insert_build_descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideInsertDrawablesArchive::insert_build_descriptions() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertDrawablesArchive.insert_build_descriptions)
  return insert_build_descriptions_;
}

// repeated .TSP.Reference working_insert_build_descriptions = 19;
inline int CommandSlideInsertDrawablesArchive::_internal_working_insert_build_descriptions_size() const {
  return working_insert_build_descriptions_.size();
}
inline int CommandSlideInsertDrawablesArchive::working_insert_build_descriptions_size() const {
  return _internal_working_insert_build_descriptions_size();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::mutable_working_insert_build_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.working_insert_build_descriptions)
  return working_insert_build_descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideInsertDrawablesArchive::mutable_working_insert_build_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertDrawablesArchive.working_insert_build_descriptions)
  return &working_insert_build_descriptions_;
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::_internal_working_insert_build_descriptions(int index) const {
  return working_insert_build_descriptions_.Get(index);
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::working_insert_build_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.working_insert_build_descriptions)
  return _internal_working_insert_build_descriptions(index);
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::_internal_add_working_insert_build_descriptions() {
  return working_insert_build_descriptions_.Add();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::add_working_insert_build_descriptions() {
  ::TSP::Reference* _add = _internal_add_working_insert_build_descriptions();
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.working_insert_build_descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideInsertDrawablesArchive::working_insert_build_descriptions() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertDrawablesArchive.working_insert_build_descriptions)
  return working_insert_build_descriptions_;
}

// repeated .TSP.Reference remove_build_descriptions = 11;
inline int CommandSlideInsertDrawablesArchive::_internal_remove_build_descriptions_size() const {
  return remove_build_descriptions_.size();
}
inline int CommandSlideInsertDrawablesArchive::remove_build_descriptions_size() const {
  return _internal_remove_build_descriptions_size();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::mutable_remove_build_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.remove_build_descriptions)
  return remove_build_descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideInsertDrawablesArchive::mutable_remove_build_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertDrawablesArchive.remove_build_descriptions)
  return &remove_build_descriptions_;
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::_internal_remove_build_descriptions(int index) const {
  return remove_build_descriptions_.Get(index);
}
inline const ::TSP::Reference& CommandSlideInsertDrawablesArchive::remove_build_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.remove_build_descriptions)
  return _internal_remove_build_descriptions(index);
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::_internal_add_remove_build_descriptions() {
  return remove_build_descriptions_.Add();
}
inline ::TSP::Reference* CommandSlideInsertDrawablesArchive::add_remove_build_descriptions() {
  ::TSP::Reference* _add = _internal_add_remove_build_descriptions();
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.remove_build_descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideInsertDrawablesArchive::remove_build_descriptions() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertDrawablesArchive.remove_build_descriptions)
  return remove_build_descriptions_;
}

// optional bool remove_slide_specific_hyperlinks = 12;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_remove_slide_specific_hyperlinks() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_remove_slide_specific_hyperlinks() const {
  return _internal_has_remove_slide_specific_hyperlinks();
}
inline void CommandSlideInsertDrawablesArchive::clear_remove_slide_specific_hyperlinks() {
  remove_slide_specific_hyperlinks_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CommandSlideInsertDrawablesArchive::_internal_remove_slide_specific_hyperlinks() const {
  return remove_slide_specific_hyperlinks_;
}
inline bool CommandSlideInsertDrawablesArchive::remove_slide_specific_hyperlinks() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.remove_slide_specific_hyperlinks)
  return _internal_remove_slide_specific_hyperlinks();
}
inline void CommandSlideInsertDrawablesArchive::_internal_set_remove_slide_specific_hyperlinks(bool value) {
  _has_bits_[0] |= 0x00000080u;
  remove_slide_specific_hyperlinks_ = value;
}
inline void CommandSlideInsertDrawablesArchive::set_remove_slide_specific_hyperlinks(bool value) {
  _internal_set_remove_slide_specific_hyperlinks(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertDrawablesArchive.remove_slide_specific_hyperlinks)
}

// repeated .TSP.UUID custom_format_keys = 13;
inline int CommandSlideInsertDrawablesArchive::_internal_custom_format_keys_size() const {
  return custom_format_keys_.size();
}
inline int CommandSlideInsertDrawablesArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* CommandSlideInsertDrawablesArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.custom_format_keys)
  return custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandSlideInsertDrawablesArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertDrawablesArchive.custom_format_keys)
  return &custom_format_keys_;
}
inline const ::TSP::UUID& CommandSlideInsertDrawablesArchive::_internal_custom_format_keys(int index) const {
  return custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& CommandSlideInsertDrawablesArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* CommandSlideInsertDrawablesArchive::_internal_add_custom_format_keys() {
  return custom_format_keys_.Add();
}
inline ::TSP::UUID* CommandSlideInsertDrawablesArchive::add_custom_format_keys() {
  ::TSP::UUID* _add = _internal_add_custom_format_keys();
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertDrawablesArchive.custom_format_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandSlideInsertDrawablesArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertDrawablesArchive.custom_format_keys)
  return custom_format_keys_;
}

// optional uint32 saved_next_untitled_resolver_index = 16;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_saved_next_untitled_resolver_index() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_saved_next_untitled_resolver_index() const {
  return _internal_has_saved_next_untitled_resolver_index();
}
inline void CommandSlideInsertDrawablesArchive::clear_saved_next_untitled_resolver_index() {
  saved_next_untitled_resolver_index_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSlideInsertDrawablesArchive::_internal_saved_next_untitled_resolver_index() const {
  return saved_next_untitled_resolver_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSlideInsertDrawablesArchive::saved_next_untitled_resolver_index() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.saved_next_untitled_resolver_index)
  return _internal_saved_next_untitled_resolver_index();
}
inline void CommandSlideInsertDrawablesArchive::_internal_set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  saved_next_untitled_resolver_index_ = value;
}
inline void CommandSlideInsertDrawablesArchive::set_saved_next_untitled_resolver_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_saved_next_untitled_resolver_index(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertDrawablesArchive.saved_next_untitled_resolver_index)
}

// optional .TSD.GeometryArchive geometry_of_object_placeholder_for_comparison_to_restore_link = 17;
inline bool CommandSlideInsertDrawablesArchive::_internal_has_geometry_of_object_placeholder_for_comparison_to_restore_link() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || geometry_of_object_placeholder_for_comparison_to_restore_link_ != nullptr);
  return value;
}
inline bool CommandSlideInsertDrawablesArchive::has_geometry_of_object_placeholder_for_comparison_to_restore_link() const {
  return _internal_has_geometry_of_object_placeholder_for_comparison_to_restore_link();
}
inline const ::TSD::GeometryArchive& CommandSlideInsertDrawablesArchive::_internal_geometry_of_object_placeholder_for_comparison_to_restore_link() const {
  const ::TSD::GeometryArchive* p = geometry_of_object_placeholder_for_comparison_to_restore_link_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& CommandSlideInsertDrawablesArchive::geometry_of_object_placeholder_for_comparison_to_restore_link() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertDrawablesArchive.geometry_of_object_placeholder_for_comparison_to_restore_link)
  return _internal_geometry_of_object_placeholder_for_comparison_to_restore_link();
}
inline void CommandSlideInsertDrawablesArchive::unsafe_arena_set_allocated_geometry_of_object_placeholder_for_comparison_to_restore_link(
    ::TSD::GeometryArchive* geometry_of_object_placeholder_for_comparison_to_restore_link) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry_of_object_placeholder_for_comparison_to_restore_link_);
  }
  geometry_of_object_placeholder_for_comparison_to_restore_link_ = geometry_of_object_placeholder_for_comparison_to_restore_link;
  if (geometry_of_object_placeholder_for_comparison_to_restore_link) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertDrawablesArchive.geometry_of_object_placeholder_for_comparison_to_restore_link)
}
inline ::TSD::GeometryArchive* CommandSlideInsertDrawablesArchive::release_geometry_of_object_placeholder_for_comparison_to_restore_link() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::GeometryArchive* temp = geometry_of_object_placeholder_for_comparison_to_restore_link_;
  geometry_of_object_placeholder_for_comparison_to_restore_link_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* CommandSlideInsertDrawablesArchive::unsafe_arena_release_geometry_of_object_placeholder_for_comparison_to_restore_link() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertDrawablesArchive.geometry_of_object_placeholder_for_comparison_to_restore_link)
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::GeometryArchive* temp = geometry_of_object_placeholder_for_comparison_to_restore_link_;
  geometry_of_object_placeholder_for_comparison_to_restore_link_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* CommandSlideInsertDrawablesArchive::_internal_mutable_geometry_of_object_placeholder_for_comparison_to_restore_link() {
  _has_bits_[0] |= 0x00000010u;
  if (geometry_of_object_placeholder_for_comparison_to_restore_link_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    geometry_of_object_placeholder_for_comparison_to_restore_link_ = p;
  }
  return geometry_of_object_placeholder_for_comparison_to_restore_link_;
}
inline ::TSD::GeometryArchive* CommandSlideInsertDrawablesArchive::mutable_geometry_of_object_placeholder_for_comparison_to_restore_link() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_geometry_of_object_placeholder_for_comparison_to_restore_link();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertDrawablesArchive.geometry_of_object_placeholder_for_comparison_to_restore_link)
  return _msg;
}
inline void CommandSlideInsertDrawablesArchive::set_allocated_geometry_of_object_placeholder_for_comparison_to_restore_link(::TSD::GeometryArchive* geometry_of_object_placeholder_for_comparison_to_restore_link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry_of_object_placeholder_for_comparison_to_restore_link_);
  }
  if (geometry_of_object_placeholder_for_comparison_to_restore_link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry_of_object_placeholder_for_comparison_to_restore_link));
    if (message_arena != submessage_arena) {
      geometry_of_object_placeholder_for_comparison_to_restore_link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry_of_object_placeholder_for_comparison_to_restore_link, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  geometry_of_object_placeholder_for_comparison_to_restore_link_ = geometry_of_object_placeholder_for_comparison_to_restore_link;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertDrawablesArchive.geometry_of_object_placeholder_for_comparison_to_restore_link)
}

// -------------------------------------------------------------------

// CommandSlideSetPlaceholdersForTagsArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideSetPlaceholdersForTagsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideSetPlaceholdersForTagsArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideSetPlaceholdersForTagsArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideSetPlaceholdersForTagsArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.super)
  return _internal_super();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetPlaceholdersForTagsArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideSetPlaceholdersForTagsArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetPlaceholdersForTagsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetPlaceholdersForTagsArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetPlaceholdersForTagsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideSetPlaceholdersForTagsArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.super)
  return _msg;
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetPlaceholdersForTagsArchive.super)
}

// required .TSP.UUID slide_id = 2;
inline bool CommandSlideSetPlaceholdersForTagsArchive::_internal_has_slide_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_ != nullptr);
  return value;
}
inline bool CommandSlideSetPlaceholdersForTagsArchive::has_slide_id() const {
  return _internal_has_slide_id();
}
inline const ::TSP::UUID& CommandSlideSetPlaceholdersForTagsArchive::_internal_slide_id() const {
  const ::TSP::UUID* p = slide_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSlideSetPlaceholdersForTagsArchive::slide_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.slide_id)
  return _internal_slide_id();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::unsafe_arena_set_allocated_slide_id(
    ::TSP::UUID* slide_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  slide_id_ = slide_id;
  if (slide_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetPlaceholdersForTagsArchive.slide_id)
}
inline ::TSP::UUID* CommandSlideSetPlaceholdersForTagsArchive::release_slide_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSlideSetPlaceholdersForTagsArchive::unsafe_arena_release_slide_id() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetPlaceholdersForTagsArchive.slide_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSlideSetPlaceholdersForTagsArchive::_internal_mutable_slide_id() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    slide_id_ = p;
  }
  return slide_id_;
}
inline ::TSP::UUID* CommandSlideSetPlaceholdersForTagsArchive::mutable_slide_id() {
  ::TSP::UUID* _msg = _internal_mutable_slide_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.slide_id)
  return _msg;
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_allocated_slide_id(::TSP::UUID* slide_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  if (slide_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id));
    if (message_arena != submessage_arena) {
      slide_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_ = slide_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetPlaceholdersForTagsArchive.slide_id)
}

// repeated .TSP.Reference infos = 3;
inline int CommandSlideSetPlaceholdersForTagsArchive::_internal_infos_size() const {
  return infos_.size();
}
inline int CommandSlideSetPlaceholdersForTagsArchive::infos_size() const {
  return _internal_infos_size();
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideSetPlaceholdersForTagsArchive::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideSetPlaceholdersForTagsArchive.infos)
  return &infos_;
}
inline const ::TSP::Reference& CommandSlideSetPlaceholdersForTagsArchive::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::TSP::Reference& CommandSlideSetPlaceholdersForTagsArchive::infos(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.infos)
  return _internal_infos(index);
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::_internal_add_infos() {
  return infos_.Add();
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::add_infos() {
  ::TSP::Reference* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideSetPlaceholdersForTagsArchive::infos() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideSetPlaceholdersForTagsArchive.infos)
  return infos_;
}

// repeated string tags = 4;
inline int CommandSlideSetPlaceholdersForTagsArchive::_internal_tags_size() const {
  return tags_.size();
}
inline int CommandSlideSetPlaceholdersForTagsArchive::tags_size() const {
  return _internal_tags_size();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::clear_tags() {
  tags_.Clear();
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
  return _s;
}
inline const std::string& CommandSlideSetPlaceholdersForTagsArchive::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CommandSlideSetPlaceholdersForTagsArchive::tags(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
  return _internal_tags(index);
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
  return tags_.Mutable(index);
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::_internal_add_tags() {
  return tags_.Add();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandSlideSetPlaceholdersForTagsArchive::tags() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandSlideSetPlaceholdersForTagsArchive::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideSetPlaceholdersForTagsArchive.tags)
  return &tags_;
}

// repeated .TSP.Reference old_infos = 6;
inline int CommandSlideSetPlaceholdersForTagsArchive::_internal_old_infos_size() const {
  return old_infos_.size();
}
inline int CommandSlideSetPlaceholdersForTagsArchive::old_infos_size() const {
  return _internal_old_infos_size();
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::mutable_old_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.old_infos)
  return old_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideSetPlaceholdersForTagsArchive::mutable_old_infos() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideSetPlaceholdersForTagsArchive.old_infos)
  return &old_infos_;
}
inline const ::TSP::Reference& CommandSlideSetPlaceholdersForTagsArchive::_internal_old_infos(int index) const {
  return old_infos_.Get(index);
}
inline const ::TSP::Reference& CommandSlideSetPlaceholdersForTagsArchive::old_infos(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.old_infos)
  return _internal_old_infos(index);
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::_internal_add_old_infos() {
  return old_infos_.Add();
}
inline ::TSP::Reference* CommandSlideSetPlaceholdersForTagsArchive::add_old_infos() {
  ::TSP::Reference* _add = _internal_add_old_infos();
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.old_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideSetPlaceholdersForTagsArchive::old_infos() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideSetPlaceholdersForTagsArchive.old_infos)
  return old_infos_;
}

// repeated string old_tags = 5;
inline int CommandSlideSetPlaceholdersForTagsArchive::_internal_old_tags_size() const {
  return old_tags_.size();
}
inline int CommandSlideSetPlaceholdersForTagsArchive::old_tags_size() const {
  return _internal_old_tags_size();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::clear_old_tags() {
  old_tags_.Clear();
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::add_old_tags() {
  std::string* _s = _internal_add_old_tags();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
  return _s;
}
inline const std::string& CommandSlideSetPlaceholdersForTagsArchive::_internal_old_tags(int index) const {
  return old_tags_.Get(index);
}
inline const std::string& CommandSlideSetPlaceholdersForTagsArchive::old_tags(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
  return _internal_old_tags(index);
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::mutable_old_tags(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
  return old_tags_.Mutable(index);
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_old_tags(int index, const std::string& value) {
  old_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_old_tags(int index, std::string&& value) {
  old_tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_old_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  old_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::set_old_tags(int index, const char* value, size_t size) {
  old_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline std::string* CommandSlideSetPlaceholdersForTagsArchive::_internal_add_old_tags() {
  return old_tags_.Add();
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_old_tags(const std::string& value) {
  old_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_old_tags(std::string&& value) {
  old_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_old_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  old_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline void CommandSlideSetPlaceholdersForTagsArchive::add_old_tags(const char* value, size_t size) {
  old_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandSlideSetPlaceholdersForTagsArchive::old_tags() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
  return old_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandSlideSetPlaceholdersForTagsArchive::mutable_old_tags() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideSetPlaceholdersForTagsArchive.old_tags)
  return &old_tags_;
}

// -------------------------------------------------------------------

// CommandTemplateSlideSetPlaceholderForTagArchive

// required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
inline bool CommandTemplateSlideSetPlaceholderForTagArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandTemplateSlideSetPlaceholderForTagArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandTemplateSlideSetPlaceholderForTagArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::KN::CommandSlideSetPlaceholdersForTagsArchive& CommandTemplateSlideSetPlaceholderForTagArchive::_internal_super() const {
  const ::KN::CommandSlideSetPlaceholdersForTagsArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandSlideSetPlaceholdersForTagsArchive&>(
      ::KN::_CommandSlideSetPlaceholdersForTagsArchive_default_instance_);
}
inline const ::KN::CommandSlideSetPlaceholdersForTagsArchive& CommandTemplateSlideSetPlaceholderForTagArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSlideSetPlaceholderForTagArchive.super)
  return _internal_super();
}
inline void CommandTemplateSlideSetPlaceholderForTagArchive::unsafe_arena_set_allocated_super(
    ::KN::CommandSlideSetPlaceholdersForTagsArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTemplateSlideSetPlaceholderForTagArchive.super)
}
inline ::KN::CommandSlideSetPlaceholdersForTagsArchive* CommandTemplateSlideSetPlaceholderForTagArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandSlideSetPlaceholdersForTagsArchive* CommandTemplateSlideSetPlaceholderForTagArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandTemplateSlideSetPlaceholderForTagArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::KN::CommandSlideSetPlaceholdersForTagsArchive* CommandTemplateSlideSetPlaceholderForTagArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandSlideSetPlaceholdersForTagsArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::KN::CommandSlideSetPlaceholdersForTagsArchive* CommandTemplateSlideSetPlaceholderForTagArchive::mutable_super() {
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSlideSetPlaceholderForTagArchive.super)
  return _msg;
}
inline void CommandTemplateSlideSetPlaceholderForTagArchive::set_allocated_super(::KN::CommandSlideSetPlaceholdersForTagsArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::CommandSlideSetPlaceholdersForTagsArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTemplateSlideSetPlaceholderForTagArchive.super)
}

// required .TSP.UUID placeholder_id = 2;
inline bool CommandTemplateSlideSetPlaceholderForTagArchive::_internal_has_placeholder_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || placeholder_id_ != nullptr);
  return value;
}
inline bool CommandTemplateSlideSetPlaceholderForTagArchive::has_placeholder_id() const {
  return _internal_has_placeholder_id();
}
inline const ::TSP::UUID& CommandTemplateSlideSetPlaceholderForTagArchive::_internal_placeholder_id() const {
  const ::TSP::UUID* p = placeholder_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandTemplateSlideSetPlaceholderForTagArchive::placeholder_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSlideSetPlaceholderForTagArchive.placeholder_id)
  return _internal_placeholder_id();
}
inline void CommandTemplateSlideSetPlaceholderForTagArchive::unsafe_arena_set_allocated_placeholder_id(
    ::TSP::UUID* placeholder_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(placeholder_id_);
  }
  placeholder_id_ = placeholder_id;
  if (placeholder_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTemplateSlideSetPlaceholderForTagArchive.placeholder_id)
}
inline ::TSP::UUID* CommandTemplateSlideSetPlaceholderForTagArchive::release_placeholder_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = placeholder_id_;
  placeholder_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandTemplateSlideSetPlaceholderForTagArchive::unsafe_arena_release_placeholder_id() {
  // @@protoc_insertion_point(field_release:KN.CommandTemplateSlideSetPlaceholderForTagArchive.placeholder_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = placeholder_id_;
  placeholder_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandTemplateSlideSetPlaceholderForTagArchive::_internal_mutable_placeholder_id() {
  _has_bits_[0] |= 0x00000004u;
  if (placeholder_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    placeholder_id_ = p;
  }
  return placeholder_id_;
}
inline ::TSP::UUID* CommandTemplateSlideSetPlaceholderForTagArchive::mutable_placeholder_id() {
  ::TSP::UUID* _msg = _internal_mutable_placeholder_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSlideSetPlaceholderForTagArchive.placeholder_id)
  return _msg;
}
inline void CommandTemplateSlideSetPlaceholderForTagArchive::set_allocated_placeholder_id(::TSP::UUID* placeholder_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(placeholder_id_);
  }
  if (placeholder_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(placeholder_id));
    if (message_arena != submessage_arena) {
      placeholder_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placeholder_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  placeholder_id_ = placeholder_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTemplateSlideSetPlaceholderForTagArchive.placeholder_id)
}

// optional string tag = 3;
inline bool CommandTemplateSlideSetPlaceholderForTagArchive::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandTemplateSlideSetPlaceholderForTagArchive::has_tag() const {
  return _internal_has_tag();
}
inline void CommandTemplateSlideSetPlaceholderForTagArchive::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandTemplateSlideSetPlaceholderForTagArchive::tag() const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSlideSetPlaceholderForTagArchive.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandTemplateSlideSetPlaceholderForTagArchive::set_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandTemplateSlideSetPlaceholderForTagArchive.tag)
}
inline std::string* CommandTemplateSlideSetPlaceholderForTagArchive::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSlideSetPlaceholderForTagArchive.tag)
  return _s;
}
inline const std::string& CommandTemplateSlideSetPlaceholderForTagArchive::_internal_tag() const {
  return tag_.Get();
}
inline void CommandTemplateSlideSetPlaceholderForTagArchive::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandTemplateSlideSetPlaceholderForTagArchive::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandTemplateSlideSetPlaceholderForTagArchive::release_tag() {
  // @@protoc_insertion_point(field_release:KN.CommandTemplateSlideSetPlaceholderForTagArchive.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandTemplateSlideSetPlaceholderForTagArchive::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTemplateSlideSetPlaceholderForTagArchive.tag)
}

// -------------------------------------------------------------------

// CommandSlidePropagateSetPlaceholderForTagArchive

// required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
inline bool CommandSlidePropagateSetPlaceholderForTagArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlidePropagateSetPlaceholderForTagArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSlidePropagateSetPlaceholderForTagArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KN::CommandSlideSetPlaceholdersForTagsArchive& CommandSlidePropagateSetPlaceholderForTagArchive::_internal_super() const {
  const ::KN::CommandSlideSetPlaceholdersForTagsArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandSlideSetPlaceholdersForTagsArchive&>(
      ::KN::_CommandSlideSetPlaceholdersForTagsArchive_default_instance_);
}
inline const ::KN::CommandSlideSetPlaceholdersForTagsArchive& CommandSlidePropagateSetPlaceholderForTagArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePropagateSetPlaceholderForTagArchive.super)
  return _internal_super();
}
inline void CommandSlidePropagateSetPlaceholderForTagArchive::unsafe_arena_set_allocated_super(
    ::KN::CommandSlideSetPlaceholdersForTagsArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePropagateSetPlaceholderForTagArchive.super)
}
inline ::KN::CommandSlideSetPlaceholdersForTagsArchive* CommandSlidePropagateSetPlaceholderForTagArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandSlideSetPlaceholdersForTagsArchive* CommandSlidePropagateSetPlaceholderForTagArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePropagateSetPlaceholderForTagArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::KN::CommandSlideSetPlaceholdersForTagsArchive* CommandSlidePropagateSetPlaceholderForTagArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandSlideSetPlaceholdersForTagsArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::KN::CommandSlideSetPlaceholdersForTagsArchive* CommandSlidePropagateSetPlaceholderForTagArchive::mutable_super() {
  ::KN::CommandSlideSetPlaceholdersForTagsArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePropagateSetPlaceholderForTagArchive.super)
  return _msg;
}
inline void CommandSlidePropagateSetPlaceholderForTagArchive::set_allocated_super(::KN::CommandSlideSetPlaceholdersForTagsArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::CommandSlideSetPlaceholdersForTagsArchive>::GetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePropagateSetPlaceholderForTagArchive.super)
}

// required .TSP.UUID placeholder_id = 2;
inline bool CommandSlidePropagateSetPlaceholderForTagArchive::_internal_has_placeholder_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || placeholder_id_ != nullptr);
  return value;
}
inline bool CommandSlidePropagateSetPlaceholderForTagArchive::has_placeholder_id() const {
  return _internal_has_placeholder_id();
}
inline const ::TSP::UUID& CommandSlidePropagateSetPlaceholderForTagArchive::_internal_placeholder_id() const {
  const ::TSP::UUID* p = placeholder_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSlidePropagateSetPlaceholderForTagArchive::placeholder_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePropagateSetPlaceholderForTagArchive.placeholder_id)
  return _internal_placeholder_id();
}
inline void CommandSlidePropagateSetPlaceholderForTagArchive::unsafe_arena_set_allocated_placeholder_id(
    ::TSP::UUID* placeholder_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(placeholder_id_);
  }
  placeholder_id_ = placeholder_id;
  if (placeholder_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePropagateSetPlaceholderForTagArchive.placeholder_id)
}
inline ::TSP::UUID* CommandSlidePropagateSetPlaceholderForTagArchive::release_placeholder_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = placeholder_id_;
  placeholder_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSlidePropagateSetPlaceholderForTagArchive::unsafe_arena_release_placeholder_id() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePropagateSetPlaceholderForTagArchive.placeholder_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = placeholder_id_;
  placeholder_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSlidePropagateSetPlaceholderForTagArchive::_internal_mutable_placeholder_id() {
  _has_bits_[0] |= 0x00000002u;
  if (placeholder_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    placeholder_id_ = p;
  }
  return placeholder_id_;
}
inline ::TSP::UUID* CommandSlidePropagateSetPlaceholderForTagArchive::mutable_placeholder_id() {
  ::TSP::UUID* _msg = _internal_mutable_placeholder_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePropagateSetPlaceholderForTagArchive.placeholder_id)
  return _msg;
}
inline void CommandSlidePropagateSetPlaceholderForTagArchive::set_allocated_placeholder_id(::TSP::UUID* placeholder_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(placeholder_id_);
  }
  if (placeholder_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(placeholder_id));
    if (message_arena != submessage_arena) {
      placeholder_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placeholder_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  placeholder_id_ = placeholder_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePropagateSetPlaceholderForTagArchive.placeholder_id)
}

// required .TSP.UUID original_id = 3;
inline bool CommandSlidePropagateSetPlaceholderForTagArchive::_internal_has_original_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || original_id_ != nullptr);
  return value;
}
inline bool CommandSlidePropagateSetPlaceholderForTagArchive::has_original_id() const {
  return _internal_has_original_id();
}
inline const ::TSP::UUID& CommandSlidePropagateSetPlaceholderForTagArchive::_internal_original_id() const {
  const ::TSP::UUID* p = original_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSlidePropagateSetPlaceholderForTagArchive::original_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePropagateSetPlaceholderForTagArchive.original_id)
  return _internal_original_id();
}
inline void CommandSlidePropagateSetPlaceholderForTagArchive::unsafe_arena_set_allocated_original_id(
    ::TSP::UUID* original_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_id_);
  }
  original_id_ = original_id;
  if (original_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePropagateSetPlaceholderForTagArchive.original_id)
}
inline ::TSP::UUID* CommandSlidePropagateSetPlaceholderForTagArchive::release_original_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = original_id_;
  original_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSlidePropagateSetPlaceholderForTagArchive::unsafe_arena_release_original_id() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePropagateSetPlaceholderForTagArchive.original_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = original_id_;
  original_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSlidePropagateSetPlaceholderForTagArchive::_internal_mutable_original_id() {
  _has_bits_[0] |= 0x00000004u;
  if (original_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    original_id_ = p;
  }
  return original_id_;
}
inline ::TSP::UUID* CommandSlidePropagateSetPlaceholderForTagArchive::mutable_original_id() {
  ::TSP::UUID* _msg = _internal_mutable_original_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePropagateSetPlaceholderForTagArchive.original_id)
  return _msg;
}
inline void CommandSlidePropagateSetPlaceholderForTagArchive::set_allocated_original_id(::TSP::UUID* original_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_id_);
  }
  if (original_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_id));
    if (message_arena != submessage_arena) {
      original_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  original_id_ = original_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePropagateSetPlaceholderForTagArchive.original_id)
}

// -------------------------------------------------------------------

// CommandSlideRemoveDrawableArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideRemoveDrawableArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveDrawableArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideRemoveDrawableArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideRemoveDrawableArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.super)
  return _internal_super();
}
inline void CommandSlideRemoveDrawableArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveDrawableArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideRemoveDrawableArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveDrawableArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveDrawableArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveDrawableArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideRemoveDrawableArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.super)
  return _msg;
}
inline void CommandSlideRemoveDrawableArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveDrawableArchive.super)
}

// required .TSP.UUID slide_id = 2;
inline bool CommandSlideRemoveDrawableArchive::_internal_has_slide_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveDrawableArchive::has_slide_id() const {
  return _internal_has_slide_id();
}
inline const ::TSP::UUID& CommandSlideRemoveDrawableArchive::_internal_slide_id() const {
  const ::TSP::UUID* p = slide_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSlideRemoveDrawableArchive::slide_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.slide_id)
  return _internal_slide_id();
}
inline void CommandSlideRemoveDrawableArchive::unsafe_arena_set_allocated_slide_id(
    ::TSP::UUID* slide_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  slide_id_ = slide_id;
  if (slide_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveDrawableArchive.slide_id)
}
inline ::TSP::UUID* CommandSlideRemoveDrawableArchive::release_slide_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSlideRemoveDrawableArchive::unsafe_arena_release_slide_id() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveDrawableArchive.slide_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSlideRemoveDrawableArchive::_internal_mutable_slide_id() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    slide_id_ = p;
  }
  return slide_id_;
}
inline ::TSP::UUID* CommandSlideRemoveDrawableArchive::mutable_slide_id() {
  ::TSP::UUID* _msg = _internal_mutable_slide_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.slide_id)
  return _msg;
}
inline void CommandSlideRemoveDrawableArchive::set_allocated_slide_id(::TSP::UUID* slide_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  if (slide_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id));
    if (message_arena != submessage_arena) {
      slide_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_ = slide_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveDrawableArchive.slide_id)
}

// repeated .TSP.Reference sortedDrawables = 3;
inline int CommandSlideRemoveDrawableArchive::_internal_sorteddrawables_size() const {
  return sorteddrawables_.size();
}
inline int CommandSlideRemoveDrawableArchive::sorteddrawables_size() const {
  return _internal_sorteddrawables_size();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::mutable_sorteddrawables(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.sortedDrawables)
  return sorteddrawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideRemoveDrawableArchive::mutable_sorteddrawables() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveDrawableArchive.sortedDrawables)
  return &sorteddrawables_;
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::_internal_sorteddrawables(int index) const {
  return sorteddrawables_.Get(index);
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::sorteddrawables(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.sortedDrawables)
  return _internal_sorteddrawables(index);
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::_internal_add_sorteddrawables() {
  return sorteddrawables_.Add();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::add_sorteddrawables() {
  ::TSP::Reference* _add = _internal_add_sorteddrawables();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.sortedDrawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideRemoveDrawableArchive::sorteddrawables() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveDrawableArchive.sortedDrawables)
  return sorteddrawables_;
}

// required .KN.MixedIdOperationArgs args_list = 4;
inline bool CommandSlideRemoveDrawableArchive::_internal_has_args_list() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || args_list_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveDrawableArchive::has_args_list() const {
  return _internal_has_args_list();
}
inline const ::KN::MixedIdOperationArgs& CommandSlideRemoveDrawableArchive::_internal_args_list() const {
  const ::KN::MixedIdOperationArgs* p = args_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::MixedIdOperationArgs&>(
      ::KN::_MixedIdOperationArgs_default_instance_);
}
inline const ::KN::MixedIdOperationArgs& CommandSlideRemoveDrawableArchive::args_list() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.args_list)
  return _internal_args_list();
}
inline void CommandSlideRemoveDrawableArchive::unsafe_arena_set_allocated_args_list(
    ::KN::MixedIdOperationArgs* args_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(args_list_);
  }
  args_list_ = args_list;
  if (args_list) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveDrawableArchive.args_list)
}
inline ::KN::MixedIdOperationArgs* CommandSlideRemoveDrawableArchive::release_args_list() {
  _has_bits_[0] &= ~0x00000004u;
  ::KN::MixedIdOperationArgs* temp = args_list_;
  args_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::MixedIdOperationArgs* CommandSlideRemoveDrawableArchive::unsafe_arena_release_args_list() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveDrawableArchive.args_list)
  _has_bits_[0] &= ~0x00000004u;
  ::KN::MixedIdOperationArgs* temp = args_list_;
  args_list_ = nullptr;
  return temp;
}
inline ::KN::MixedIdOperationArgs* CommandSlideRemoveDrawableArchive::_internal_mutable_args_list() {
  _has_bits_[0] |= 0x00000004u;
  if (args_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::MixedIdOperationArgs>(GetArenaForAllocation());
    args_list_ = p;
  }
  return args_list_;
}
inline ::KN::MixedIdOperationArgs* CommandSlideRemoveDrawableArchive::mutable_args_list() {
  ::KN::MixedIdOperationArgs* _msg = _internal_mutable_args_list();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.args_list)
  return _msg;
}
inline void CommandSlideRemoveDrawableArchive::set_allocated_args_list(::KN::MixedIdOperationArgs* args_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(args_list_);
  }
  if (args_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(args_list));
    if (message_arena != submessage_arena) {
      args_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, args_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  args_list_ = args_list;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveDrawableArchive.args_list)
}

// repeated uint32 drawable_indexes_for_undo = 10;
inline int CommandSlideRemoveDrawableArchive::_internal_drawable_indexes_for_undo_size() const {
  return drawable_indexes_for_undo_.size();
}
inline int CommandSlideRemoveDrawableArchive::drawable_indexes_for_undo_size() const {
  return _internal_drawable_indexes_for_undo_size();
}
inline void CommandSlideRemoveDrawableArchive::clear_drawable_indexes_for_undo() {
  drawable_indexes_for_undo_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSlideRemoveDrawableArchive::_internal_drawable_indexes_for_undo(int index) const {
  return drawable_indexes_for_undo_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandSlideRemoveDrawableArchive::drawable_indexes_for_undo(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.drawable_indexes_for_undo)
  return _internal_drawable_indexes_for_undo(index);
}
inline void CommandSlideRemoveDrawableArchive::set_drawable_indexes_for_undo(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  drawable_indexes_for_undo_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideRemoveDrawableArchive.drawable_indexes_for_undo)
}
inline void CommandSlideRemoveDrawableArchive::_internal_add_drawable_indexes_for_undo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  drawable_indexes_for_undo_.Add(value);
}
inline void CommandSlideRemoveDrawableArchive::add_drawable_indexes_for_undo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_drawable_indexes_for_undo(value);
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.drawable_indexes_for_undo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandSlideRemoveDrawableArchive::_internal_drawable_indexes_for_undo() const {
  return drawable_indexes_for_undo_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandSlideRemoveDrawableArchive::drawable_indexes_for_undo() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveDrawableArchive.drawable_indexes_for_undo)
  return _internal_drawable_indexes_for_undo();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandSlideRemoveDrawableArchive::_internal_mutable_drawable_indexes_for_undo() {
  return &drawable_indexes_for_undo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandSlideRemoveDrawableArchive::mutable_drawable_indexes_for_undo() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveDrawableArchive.drawable_indexes_for_undo)
  return _internal_mutable_drawable_indexes_for_undo();
}

// repeated string placeholderTags = 5;
inline int CommandSlideRemoveDrawableArchive::_internal_placeholdertags_size() const {
  return placeholdertags_.size();
}
inline int CommandSlideRemoveDrawableArchive::placeholdertags_size() const {
  return _internal_placeholdertags_size();
}
inline void CommandSlideRemoveDrawableArchive::clear_placeholdertags() {
  placeholdertags_.Clear();
}
inline std::string* CommandSlideRemoveDrawableArchive::add_placeholdertags() {
  std::string* _s = _internal_add_placeholdertags();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
  return _s;
}
inline const std::string& CommandSlideRemoveDrawableArchive::_internal_placeholdertags(int index) const {
  return placeholdertags_.Get(index);
}
inline const std::string& CommandSlideRemoveDrawableArchive::placeholdertags(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
  return _internal_placeholdertags(index);
}
inline std::string* CommandSlideRemoveDrawableArchive::mutable_placeholdertags(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
  return placeholdertags_.Mutable(index);
}
inline void CommandSlideRemoveDrawableArchive::set_placeholdertags(int index, const std::string& value) {
  placeholdertags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::set_placeholdertags(int index, std::string&& value) {
  placeholdertags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::set_placeholdertags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  placeholdertags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::set_placeholdertags(int index, const char* value, size_t size) {
  placeholdertags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline std::string* CommandSlideRemoveDrawableArchive::_internal_add_placeholdertags() {
  return placeholdertags_.Add();
}
inline void CommandSlideRemoveDrawableArchive::add_placeholdertags(const std::string& value) {
  placeholdertags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::add_placeholdertags(std::string&& value) {
  placeholdertags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::add_placeholdertags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  placeholdertags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline void CommandSlideRemoveDrawableArchive::add_placeholdertags(const char* value, size_t size) {
  placeholdertags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandSlideRemoveDrawableArchive::placeholdertags() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
  return placeholdertags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandSlideRemoveDrawableArchive::mutable_placeholdertags() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveDrawableArchive.placeholderTags)
  return &placeholdertags_;
}

// repeated string instructional_text_list = 11;
inline int CommandSlideRemoveDrawableArchive::_internal_instructional_text_list_size() const {
  return instructional_text_list_.size();
}
inline int CommandSlideRemoveDrawableArchive::instructional_text_list_size() const {
  return _internal_instructional_text_list_size();
}
inline void CommandSlideRemoveDrawableArchive::clear_instructional_text_list() {
  instructional_text_list_.Clear();
}
inline std::string* CommandSlideRemoveDrawableArchive::add_instructional_text_list() {
  std::string* _s = _internal_add_instructional_text_list();
  // @@protoc_insertion_point(field_add_mutable:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
  return _s;
}
inline const std::string& CommandSlideRemoveDrawableArchive::_internal_instructional_text_list(int index) const {
  return instructional_text_list_.Get(index);
}
inline const std::string& CommandSlideRemoveDrawableArchive::instructional_text_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
  return _internal_instructional_text_list(index);
}
inline std::string* CommandSlideRemoveDrawableArchive::mutable_instructional_text_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
  return instructional_text_list_.Mutable(index);
}
inline void CommandSlideRemoveDrawableArchive::set_instructional_text_list(int index, const std::string& value) {
  instructional_text_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
}
inline void CommandSlideRemoveDrawableArchive::set_instructional_text_list(int index, std::string&& value) {
  instructional_text_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
}
inline void CommandSlideRemoveDrawableArchive::set_instructional_text_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  instructional_text_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
}
inline void CommandSlideRemoveDrawableArchive::set_instructional_text_list(int index, const char* value, size_t size) {
  instructional_text_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
}
inline std::string* CommandSlideRemoveDrawableArchive::_internal_add_instructional_text_list() {
  return instructional_text_list_.Add();
}
inline void CommandSlideRemoveDrawableArchive::add_instructional_text_list(const std::string& value) {
  instructional_text_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
}
inline void CommandSlideRemoveDrawableArchive::add_instructional_text_list(std::string&& value) {
  instructional_text_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
}
inline void CommandSlideRemoveDrawableArchive::add_instructional_text_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  instructional_text_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
}
inline void CommandSlideRemoveDrawableArchive::add_instructional_text_list(const char* value, size_t size) {
  instructional_text_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandSlideRemoveDrawableArchive::instructional_text_list() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
  return instructional_text_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandSlideRemoveDrawableArchive::mutable_instructional_text_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveDrawableArchive.instructional_text_list)
  return &instructional_text_list_;
}

// repeated .TSP.Reference insert_build_descriptions = 6;
inline int CommandSlideRemoveDrawableArchive::_internal_insert_build_descriptions_size() const {
  return insert_build_descriptions_.size();
}
inline int CommandSlideRemoveDrawableArchive::insert_build_descriptions_size() const {
  return _internal_insert_build_descriptions_size();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::mutable_insert_build_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.insert_build_descriptions)
  return insert_build_descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideRemoveDrawableArchive::mutable_insert_build_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveDrawableArchive.insert_build_descriptions)
  return &insert_build_descriptions_;
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::_internal_insert_build_descriptions(int index) const {
  return insert_build_descriptions_.Get(index);
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::insert_build_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.insert_build_descriptions)
  return _internal_insert_build_descriptions(index);
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::_internal_add_insert_build_descriptions() {
  return insert_build_descriptions_.Add();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::add_insert_build_descriptions() {
  ::TSP::Reference* _add = _internal_add_insert_build_descriptions();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.insert_build_descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideRemoveDrawableArchive::insert_build_descriptions() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveDrawableArchive.insert_build_descriptions)
  return insert_build_descriptions_;
}

// repeated .TSP.Reference remove_build_descriptions = 7;
inline int CommandSlideRemoveDrawableArchive::_internal_remove_build_descriptions_size() const {
  return remove_build_descriptions_.size();
}
inline int CommandSlideRemoveDrawableArchive::remove_build_descriptions_size() const {
  return _internal_remove_build_descriptions_size();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::mutable_remove_build_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.remove_build_descriptions)
  return remove_build_descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideRemoveDrawableArchive::mutable_remove_build_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveDrawableArchive.remove_build_descriptions)
  return &remove_build_descriptions_;
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::_internal_remove_build_descriptions(int index) const {
  return remove_build_descriptions_.Get(index);
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::remove_build_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.remove_build_descriptions)
  return _internal_remove_build_descriptions(index);
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::_internal_add_remove_build_descriptions() {
  return remove_build_descriptions_.Add();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::add_remove_build_descriptions() {
  ::TSP::Reference* _add = _internal_add_remove_build_descriptions();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.remove_build_descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideRemoveDrawableArchive::remove_build_descriptions() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveDrawableArchive.remove_build_descriptions)
  return remove_build_descriptions_;
}

// repeated .TSP.Reference drawables_using_object_placeholder_geometry = 8;
inline int CommandSlideRemoveDrawableArchive::_internal_drawables_using_object_placeholder_geometry_size() const {
  return drawables_using_object_placeholder_geometry_.size();
}
inline int CommandSlideRemoveDrawableArchive::drawables_using_object_placeholder_geometry_size() const {
  return _internal_drawables_using_object_placeholder_geometry_size();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::mutable_drawables_using_object_placeholder_geometry(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.drawables_using_object_placeholder_geometry)
  return drawables_using_object_placeholder_geometry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideRemoveDrawableArchive::mutable_drawables_using_object_placeholder_geometry() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveDrawableArchive.drawables_using_object_placeholder_geometry)
  return &drawables_using_object_placeholder_geometry_;
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::_internal_drawables_using_object_placeholder_geometry(int index) const {
  return drawables_using_object_placeholder_geometry_.Get(index);
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::drawables_using_object_placeholder_geometry(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.drawables_using_object_placeholder_geometry)
  return _internal_drawables_using_object_placeholder_geometry(index);
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::_internal_add_drawables_using_object_placeholder_geometry() {
  return drawables_using_object_placeholder_geometry_.Add();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::add_drawables_using_object_placeholder_geometry() {
  ::TSP::Reference* _add = _internal_add_drawables_using_object_placeholder_geometry();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.drawables_using_object_placeholder_geometry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideRemoveDrawableArchive::drawables_using_object_placeholder_geometry() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveDrawableArchive.drawables_using_object_placeholder_geometry)
  return drawables_using_object_placeholder_geometry_;
}

// repeated .TSP.Reference inverse_insert_hyperlink_commands = 9;
inline int CommandSlideRemoveDrawableArchive::_internal_inverse_insert_hyperlink_commands_size() const {
  return inverse_insert_hyperlink_commands_.size();
}
inline int CommandSlideRemoveDrawableArchive::inverse_insert_hyperlink_commands_size() const {
  return _internal_inverse_insert_hyperlink_commands_size();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::mutable_inverse_insert_hyperlink_commands(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveDrawableArchive.inverse_insert_hyperlink_commands)
  return inverse_insert_hyperlink_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideRemoveDrawableArchive::mutable_inverse_insert_hyperlink_commands() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveDrawableArchive.inverse_insert_hyperlink_commands)
  return &inverse_insert_hyperlink_commands_;
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::_internal_inverse_insert_hyperlink_commands(int index) const {
  return inverse_insert_hyperlink_commands_.Get(index);
}
inline const ::TSP::Reference& CommandSlideRemoveDrawableArchive::inverse_insert_hyperlink_commands(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveDrawableArchive.inverse_insert_hyperlink_commands)
  return _internal_inverse_insert_hyperlink_commands(index);
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::_internal_add_inverse_insert_hyperlink_commands() {
  return inverse_insert_hyperlink_commands_.Add();
}
inline ::TSP::Reference* CommandSlideRemoveDrawableArchive::add_inverse_insert_hyperlink_commands() {
  ::TSP::Reference* _add = _internal_add_inverse_insert_hyperlink_commands();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveDrawableArchive.inverse_insert_hyperlink_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideRemoveDrawableArchive::inverse_insert_hyperlink_commands() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveDrawableArchive.inverse_insert_hyperlink_commands)
  return inverse_insert_hyperlink_commands_;
}

// -------------------------------------------------------------------

// CommandSlideMoveDrawableZOrderArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideMoveDrawableZOrderArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideMoveDrawableZOrderArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideMoveDrawableZOrderArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideMoveDrawableZOrderArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveDrawableZOrderArchive.super)
  return _internal_super();
}
inline void CommandSlideMoveDrawableZOrderArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveDrawableZOrderArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideMoveDrawableZOrderArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveDrawableZOrderArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveDrawableZOrderArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveDrawableZOrderArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideMoveDrawableZOrderArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveDrawableZOrderArchive.super)
  return _msg;
}
inline void CommandSlideMoveDrawableZOrderArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveDrawableZOrderArchive.super)
}

// repeated .TSP.Reference old_ordered_infos = 4;
inline int CommandSlideMoveDrawableZOrderArchive::_internal_old_ordered_infos_size() const {
  return old_ordered_infos_.size();
}
inline int CommandSlideMoveDrawableZOrderArchive::old_ordered_infos_size() const {
  return _internal_old_ordered_infos_size();
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::mutable_old_ordered_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos)
  return old_ordered_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideMoveDrawableZOrderArchive::mutable_old_ordered_infos() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos)
  return &old_ordered_infos_;
}
inline const ::TSP::Reference& CommandSlideMoveDrawableZOrderArchive::_internal_old_ordered_infos(int index) const {
  return old_ordered_infos_.Get(index);
}
inline const ::TSP::Reference& CommandSlideMoveDrawableZOrderArchive::old_ordered_infos(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos)
  return _internal_old_ordered_infos(index);
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::_internal_add_old_ordered_infos() {
  return old_ordered_infos_.Add();
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::add_old_ordered_infos() {
  ::TSP::Reference* _add = _internal_add_old_ordered_infos();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideMoveDrawableZOrderArchive::old_ordered_infos() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos)
  return old_ordered_infos_;
}

// repeated .TSK.RearrangeIdOperationArgs args_list = 6;
inline int CommandSlideMoveDrawableZOrderArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int CommandSlideMoveDrawableZOrderArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::RearrangeIdOperationArgs* CommandSlideMoveDrawableZOrderArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveDrawableZOrderArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
CommandSlideMoveDrawableZOrderArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveDrawableZOrderArchive.args_list)
  return &args_list_;
}
inline const ::TSK::RearrangeIdOperationArgs& CommandSlideMoveDrawableZOrderArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::RearrangeIdOperationArgs& CommandSlideMoveDrawableZOrderArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveDrawableZOrderArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::RearrangeIdOperationArgs* CommandSlideMoveDrawableZOrderArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::RearrangeIdOperationArgs* CommandSlideMoveDrawableZOrderArchive::add_args_list() {
  ::TSK::RearrangeIdOperationArgs* _add = _internal_add_args_list();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveDrawableZOrderArchive.args_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
CommandSlideMoveDrawableZOrderArchive::args_list() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveDrawableZOrderArchive.args_list)
  return args_list_;
}

// required .TSP.UUID slide_id = 7;
inline bool CommandSlideMoveDrawableZOrderArchive::_internal_has_slide_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_ != nullptr);
  return value;
}
inline bool CommandSlideMoveDrawableZOrderArchive::has_slide_id() const {
  return _internal_has_slide_id();
}
inline const ::TSP::UUID& CommandSlideMoveDrawableZOrderArchive::_internal_slide_id() const {
  const ::TSP::UUID* p = slide_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSlideMoveDrawableZOrderArchive::slide_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveDrawableZOrderArchive.slide_id)
  return _internal_slide_id();
}
inline void CommandSlideMoveDrawableZOrderArchive::unsafe_arena_set_allocated_slide_id(
    ::TSP::UUID* slide_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  slide_id_ = slide_id;
  if (slide_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveDrawableZOrderArchive.slide_id)
}
inline ::TSP::UUID* CommandSlideMoveDrawableZOrderArchive::release_slide_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSlideMoveDrawableZOrderArchive::unsafe_arena_release_slide_id() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveDrawableZOrderArchive.slide_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSlideMoveDrawableZOrderArchive::_internal_mutable_slide_id() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    slide_id_ = p;
  }
  return slide_id_;
}
inline ::TSP::UUID* CommandSlideMoveDrawableZOrderArchive::mutable_slide_id() {
  ::TSP::UUID* _msg = _internal_mutable_slide_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveDrawableZOrderArchive.slide_id)
  return _msg;
}
inline void CommandSlideMoveDrawableZOrderArchive::set_allocated_slide_id(::TSP::UUID* slide_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  if (slide_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id));
    if (message_arena != submessage_arena) {
      slide_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_ = slide_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveDrawableZOrderArchive.slide_id)
}

// repeated .TSP.Reference old_ordered_infos_on_slide_for_undo = 8;
inline int CommandSlideMoveDrawableZOrderArchive::_internal_old_ordered_infos_on_slide_for_undo_size() const {
  return old_ordered_infos_on_slide_for_undo_.size();
}
inline int CommandSlideMoveDrawableZOrderArchive::old_ordered_infos_on_slide_for_undo_size() const {
  return _internal_old_ordered_infos_on_slide_for_undo_size();
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::mutable_old_ordered_infos_on_slide_for_undo(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos_on_slide_for_undo)
  return old_ordered_infos_on_slide_for_undo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideMoveDrawableZOrderArchive::mutable_old_ordered_infos_on_slide_for_undo() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos_on_slide_for_undo)
  return &old_ordered_infos_on_slide_for_undo_;
}
inline const ::TSP::Reference& CommandSlideMoveDrawableZOrderArchive::_internal_old_ordered_infos_on_slide_for_undo(int index) const {
  return old_ordered_infos_on_slide_for_undo_.Get(index);
}
inline const ::TSP::Reference& CommandSlideMoveDrawableZOrderArchive::old_ordered_infos_on_slide_for_undo(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos_on_slide_for_undo)
  return _internal_old_ordered_infos_on_slide_for_undo(index);
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::_internal_add_old_ordered_infos_on_slide_for_undo() {
  return old_ordered_infos_on_slide_for_undo_.Add();
}
inline ::TSP::Reference* CommandSlideMoveDrawableZOrderArchive::add_old_ordered_infos_on_slide_for_undo() {
  ::TSP::Reference* _add = _internal_add_old_ordered_infos_on_slide_for_undo();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos_on_slide_for_undo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideMoveDrawableZOrderArchive::old_ordered_infos_on_slide_for_undo() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos_on_slide_for_undo)
  return old_ordered_infos_on_slide_for_undo_;
}

// -------------------------------------------------------------------

// CommandSlideNodeSetPropertyArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideNodeSetPropertyArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideNodeSetPropertyArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideNodeSetPropertyArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.super)
  return _internal_super();
}
inline void CommandSlideNodeSetPropertyArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideNodeSetPropertyArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideNodeSetPropertyArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideNodeSetPropertyArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetPropertyArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideNodeSetPropertyArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideNodeSetPropertyArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetPropertyArchive.super)
  return _msg;
}
inline void CommandSlideNodeSetPropertyArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetPropertyArchive.super)
}

// required .TSP.UUIDPath slide_node_id_path = 2;
inline bool CommandSlideNodeSetPropertyArchive::_internal_has_slide_node_id_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || slide_node_id_path_ != nullptr);
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive::has_slide_node_id_path() const {
  return _internal_has_slide_node_id_path();
}
inline const ::TSP::UUIDPath& CommandSlideNodeSetPropertyArchive::_internal_slide_node_id_path() const {
  const ::TSP::UUIDPath* p = slide_node_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& CommandSlideNodeSetPropertyArchive::slide_node_id_path() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.slide_node_id_path)
  return _internal_slide_node_id_path();
}
inline void CommandSlideNodeSetPropertyArchive::unsafe_arena_set_allocated_slide_node_id_path(
    ::TSP::UUIDPath* slide_node_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_id_path_);
  }
  slide_node_id_path_ = slide_node_id_path;
  if (slide_node_id_path) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideNodeSetPropertyArchive.slide_node_id_path)
}
inline ::TSP::UUIDPath* CommandSlideNodeSetPropertyArchive::release_slide_node_id_path() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = slide_node_id_path_;
  slide_node_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* CommandSlideNodeSetPropertyArchive::unsafe_arena_release_slide_node_id_path() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetPropertyArchive.slide_node_id_path)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = slide_node_id_path_;
  slide_node_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* CommandSlideNodeSetPropertyArchive::_internal_mutable_slide_node_id_path() {
  _has_bits_[0] |= 0x00000004u;
  if (slide_node_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    slide_node_id_path_ = p;
  }
  return slide_node_id_path_;
}
inline ::TSP::UUIDPath* CommandSlideNodeSetPropertyArchive::mutable_slide_node_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_slide_node_id_path();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetPropertyArchive.slide_node_id_path)
  return _msg;
}
inline void CommandSlideNodeSetPropertyArchive::set_allocated_slide_node_id_path(::TSP::UUIDPath* slide_node_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_id_path_);
  }
  if (slide_node_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_id_path));
    if (message_arena != submessage_arena) {
      slide_node_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_node_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  slide_node_id_path_ = slide_node_id_path;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetPropertyArchive.slide_node_id_path)
}

// required string property = 3;
inline bool CommandSlideNodeSetPropertyArchive::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandSlideNodeSetPropertyArchive::clear_property() {
  property_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSlideNodeSetPropertyArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSlideNodeSetPropertyArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandSlideNodeSetPropertyArchive.property)
}
inline std::string* CommandSlideNodeSetPropertyArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetPropertyArchive.property)
  return _s;
}
inline const std::string& CommandSlideNodeSetPropertyArchive::_internal_property() const {
  return property_.Get();
}
inline void CommandSlideNodeSetPropertyArchive::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandSlideNodeSetPropertyArchive::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000001u;
  return property_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandSlideNodeSetPropertyArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetPropertyArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandSlideNodeSetPropertyArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetPropertyArchive.property)
}

// required bool old_value = 4;
inline bool CommandSlideNodeSetPropertyArchive::_internal_has_old_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive::has_old_value() const {
  return _internal_has_old_value();
}
inline void CommandSlideNodeSetPropertyArchive::clear_old_value() {
  old_value_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CommandSlideNodeSetPropertyArchive::_internal_old_value() const {
  return old_value_;
}
inline bool CommandSlideNodeSetPropertyArchive::old_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.old_value)
  return _internal_old_value();
}
inline void CommandSlideNodeSetPropertyArchive::_internal_set_old_value(bool value) {
  _has_bits_[0] |= 0x00000008u;
  old_value_ = value;
}
inline void CommandSlideNodeSetPropertyArchive::set_old_value(bool value) {
  _internal_set_old_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideNodeSetPropertyArchive.old_value)
}

// required bool value = 5;
inline bool CommandSlideNodeSetPropertyArchive::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSlideNodeSetPropertyArchive::has_value() const {
  return _internal_has_value();
}
inline void CommandSlideNodeSetPropertyArchive::clear_value() {
  value_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSlideNodeSetPropertyArchive::_internal_value() const {
  return value_;
}
inline bool CommandSlideNodeSetPropertyArchive::value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetPropertyArchive.value)
  return _internal_value();
}
inline void CommandSlideNodeSetPropertyArchive::_internal_set_value(bool value) {
  _has_bits_[0] |= 0x00000010u;
  value_ = value;
}
inline void CommandSlideNodeSetPropertyArchive::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideNodeSetPropertyArchive.value)
}

// -------------------------------------------------------------------

// CommandSlideNodeSetViewStatePropertyArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideNodeSetViewStatePropertyArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideNodeSetViewStatePropertyArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideNodeSetViewStatePropertyArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideNodeSetViewStatePropertyArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetViewStatePropertyArchive.super)
  return _internal_super();
}
inline void CommandSlideNodeSetViewStatePropertyArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideNodeSetViewStatePropertyArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideNodeSetViewStatePropertyArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideNodeSetViewStatePropertyArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetViewStatePropertyArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideNodeSetViewStatePropertyArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideNodeSetViewStatePropertyArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetViewStatePropertyArchive.super)
  return _msg;
}
inline void CommandSlideNodeSetViewStatePropertyArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetViewStatePropertyArchive.super)
}

// required .TSP.UUIDPath slide_node_id_path = 2;
inline bool CommandSlideNodeSetViewStatePropertyArchive::_internal_has_slide_node_id_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || slide_node_id_path_ != nullptr);
  return value;
}
inline bool CommandSlideNodeSetViewStatePropertyArchive::has_slide_node_id_path() const {
  return _internal_has_slide_node_id_path();
}
inline const ::TSP::UUIDPath& CommandSlideNodeSetViewStatePropertyArchive::_internal_slide_node_id_path() const {
  const ::TSP::UUIDPath* p = slide_node_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& CommandSlideNodeSetViewStatePropertyArchive::slide_node_id_path() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetViewStatePropertyArchive.slide_node_id_path)
  return _internal_slide_node_id_path();
}
inline void CommandSlideNodeSetViewStatePropertyArchive::unsafe_arena_set_allocated_slide_node_id_path(
    ::TSP::UUIDPath* slide_node_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_id_path_);
  }
  slide_node_id_path_ = slide_node_id_path;
  if (slide_node_id_path) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideNodeSetViewStatePropertyArchive.slide_node_id_path)
}
inline ::TSP::UUIDPath* CommandSlideNodeSetViewStatePropertyArchive::release_slide_node_id_path() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = slide_node_id_path_;
  slide_node_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* CommandSlideNodeSetViewStatePropertyArchive::unsafe_arena_release_slide_node_id_path() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetViewStatePropertyArchive.slide_node_id_path)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = slide_node_id_path_;
  slide_node_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* CommandSlideNodeSetViewStatePropertyArchive::_internal_mutable_slide_node_id_path() {
  _has_bits_[0] |= 0x00000004u;
  if (slide_node_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    slide_node_id_path_ = p;
  }
  return slide_node_id_path_;
}
inline ::TSP::UUIDPath* CommandSlideNodeSetViewStatePropertyArchive::mutable_slide_node_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_slide_node_id_path();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetViewStatePropertyArchive.slide_node_id_path)
  return _msg;
}
inline void CommandSlideNodeSetViewStatePropertyArchive::set_allocated_slide_node_id_path(::TSP::UUIDPath* slide_node_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_id_path_);
  }
  if (slide_node_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_id_path));
    if (message_arena != submessage_arena) {
      slide_node_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_node_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  slide_node_id_path_ = slide_node_id_path;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetViewStatePropertyArchive.slide_node_id_path)
}

// required string property = 3;
inline bool CommandSlideNodeSetViewStatePropertyArchive::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSlideNodeSetViewStatePropertyArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandSlideNodeSetViewStatePropertyArchive::clear_property() {
  property_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSlideNodeSetViewStatePropertyArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetViewStatePropertyArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSlideNodeSetViewStatePropertyArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandSlideNodeSetViewStatePropertyArchive.property)
}
inline std::string* CommandSlideNodeSetViewStatePropertyArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideNodeSetViewStatePropertyArchive.property)
  return _s;
}
inline const std::string& CommandSlideNodeSetViewStatePropertyArchive::_internal_property() const {
  return property_.Get();
}
inline void CommandSlideNodeSetViewStatePropertyArchive::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandSlideNodeSetViewStatePropertyArchive::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000001u;
  return property_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandSlideNodeSetViewStatePropertyArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideNodeSetViewStatePropertyArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandSlideNodeSetViewStatePropertyArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideNodeSetViewStatePropertyArchive.property)
}

// required bool old_value = 4;
inline bool CommandSlideNodeSetViewStatePropertyArchive::_internal_has_old_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSlideNodeSetViewStatePropertyArchive::has_old_value() const {
  return _internal_has_old_value();
}
inline void CommandSlideNodeSetViewStatePropertyArchive::clear_old_value() {
  old_value_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CommandSlideNodeSetViewStatePropertyArchive::_internal_old_value() const {
  return old_value_;
}
inline bool CommandSlideNodeSetViewStatePropertyArchive::old_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetViewStatePropertyArchive.old_value)
  return _internal_old_value();
}
inline void CommandSlideNodeSetViewStatePropertyArchive::_internal_set_old_value(bool value) {
  _has_bits_[0] |= 0x00000008u;
  old_value_ = value;
}
inline void CommandSlideNodeSetViewStatePropertyArchive::set_old_value(bool value) {
  _internal_set_old_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideNodeSetViewStatePropertyArchive.old_value)
}

// required bool value = 5;
inline bool CommandSlideNodeSetViewStatePropertyArchive::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSlideNodeSetViewStatePropertyArchive::has_value() const {
  return _internal_has_value();
}
inline void CommandSlideNodeSetViewStatePropertyArchive::clear_value() {
  value_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSlideNodeSetViewStatePropertyArchive::_internal_value() const {
  return value_;
}
inline bool CommandSlideNodeSetViewStatePropertyArchive::value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideNodeSetViewStatePropertyArchive.value)
  return _internal_value();
}
inline void CommandSlideNodeSetViewStatePropertyArchive::_internal_set_value(bool value) {
  _has_bits_[0] |= 0x00000010u;
  value_ = value;
}
inline void CommandSlideNodeSetViewStatePropertyArchive::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideNodeSetViewStatePropertyArchive.value)
}

// -------------------------------------------------------------------

// CommandSlideSetBackgroundFillArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideSetBackgroundFillArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideSetBackgroundFillArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideSetBackgroundFillArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideSetBackgroundFillArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetBackgroundFillArchive.super)
  return _internal_super();
}
inline void CommandSlideSetBackgroundFillArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetBackgroundFillArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideSetBackgroundFillArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetBackgroundFillArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetBackgroundFillArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetBackgroundFillArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideSetBackgroundFillArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetBackgroundFillArchive.super)
  return _msg;
}
inline void CommandSlideSetBackgroundFillArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetBackgroundFillArchive.super)
}

// required .TSP.UUIDPath slide_id_path = 2;
inline bool CommandSlideSetBackgroundFillArchive::_internal_has_slide_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_path_ != nullptr);
  return value;
}
inline bool CommandSlideSetBackgroundFillArchive::has_slide_id_path() const {
  return _internal_has_slide_id_path();
}
inline const ::TSP::UUIDPath& CommandSlideSetBackgroundFillArchive::_internal_slide_id_path() const {
  const ::TSP::UUIDPath* p = slide_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& CommandSlideSetBackgroundFillArchive::slide_id_path() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetBackgroundFillArchive.slide_id_path)
  return _internal_slide_id_path();
}
inline void CommandSlideSetBackgroundFillArchive::unsafe_arena_set_allocated_slide_id_path(
    ::TSP::UUIDPath* slide_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path_);
  }
  slide_id_path_ = slide_id_path;
  if (slide_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetBackgroundFillArchive.slide_id_path)
}
inline ::TSP::UUIDPath* CommandSlideSetBackgroundFillArchive::release_slide_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = slide_id_path_;
  slide_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* CommandSlideSetBackgroundFillArchive::unsafe_arena_release_slide_id_path() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetBackgroundFillArchive.slide_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = slide_id_path_;
  slide_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* CommandSlideSetBackgroundFillArchive::_internal_mutable_slide_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    slide_id_path_ = p;
  }
  return slide_id_path_;
}
inline ::TSP::UUIDPath* CommandSlideSetBackgroundFillArchive::mutable_slide_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_slide_id_path();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetBackgroundFillArchive.slide_id_path)
  return _msg;
}
inline void CommandSlideSetBackgroundFillArchive::set_allocated_slide_id_path(::TSP::UUIDPath* slide_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path_);
  }
  if (slide_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path));
    if (message_arena != submessage_arena) {
      slide_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_path_ = slide_id_path;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetBackgroundFillArchive.slide_id_path)
}

// optional .TSD.FillArchive old_fill = 3;
inline bool CommandSlideSetBackgroundFillArchive::_internal_has_old_fill() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || old_fill_ != nullptr);
  return value;
}
inline bool CommandSlideSetBackgroundFillArchive::has_old_fill() const {
  return _internal_has_old_fill();
}
inline const ::TSD::FillArchive& CommandSlideSetBackgroundFillArchive::_internal_old_fill() const {
  const ::TSD::FillArchive* p = old_fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& CommandSlideSetBackgroundFillArchive::old_fill() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetBackgroundFillArchive.old_fill)
  return _internal_old_fill();
}
inline void CommandSlideSetBackgroundFillArchive::unsafe_arena_set_allocated_old_fill(
    ::TSD::FillArchive* old_fill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_fill_);
  }
  old_fill_ = old_fill;
  if (old_fill) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetBackgroundFillArchive.old_fill)
}
inline ::TSD::FillArchive* CommandSlideSetBackgroundFillArchive::release_old_fill() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::FillArchive* temp = old_fill_;
  old_fill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* CommandSlideSetBackgroundFillArchive::unsafe_arena_release_old_fill() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetBackgroundFillArchive.old_fill)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::FillArchive* temp = old_fill_;
  old_fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* CommandSlideSetBackgroundFillArchive::_internal_mutable_old_fill() {
  _has_bits_[0] |= 0x00000004u;
  if (old_fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    old_fill_ = p;
  }
  return old_fill_;
}
inline ::TSD::FillArchive* CommandSlideSetBackgroundFillArchive::mutable_old_fill() {
  ::TSD::FillArchive* _msg = _internal_mutable_old_fill();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetBackgroundFillArchive.old_fill)
  return _msg;
}
inline void CommandSlideSetBackgroundFillArchive::set_allocated_old_fill(::TSD::FillArchive* old_fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_fill_);
  }
  if (old_fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_fill));
    if (message_arena != submessage_arena) {
      old_fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_fill_ = old_fill;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetBackgroundFillArchive.old_fill)
}

// required .TSD.FillArchive new_fill = 4;
inline bool CommandSlideSetBackgroundFillArchive::_internal_has_new_fill() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || new_fill_ != nullptr);
  return value;
}
inline bool CommandSlideSetBackgroundFillArchive::has_new_fill() const {
  return _internal_has_new_fill();
}
inline const ::TSD::FillArchive& CommandSlideSetBackgroundFillArchive::_internal_new_fill() const {
  const ::TSD::FillArchive* p = new_fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& CommandSlideSetBackgroundFillArchive::new_fill() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetBackgroundFillArchive.new_fill)
  return _internal_new_fill();
}
inline void CommandSlideSetBackgroundFillArchive::unsafe_arena_set_allocated_new_fill(
    ::TSD::FillArchive* new_fill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_fill_);
  }
  new_fill_ = new_fill;
  if (new_fill) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetBackgroundFillArchive.new_fill)
}
inline ::TSD::FillArchive* CommandSlideSetBackgroundFillArchive::release_new_fill() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::FillArchive* temp = new_fill_;
  new_fill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* CommandSlideSetBackgroundFillArchive::unsafe_arena_release_new_fill() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetBackgroundFillArchive.new_fill)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::FillArchive* temp = new_fill_;
  new_fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* CommandSlideSetBackgroundFillArchive::_internal_mutable_new_fill() {
  _has_bits_[0] |= 0x00000008u;
  if (new_fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    new_fill_ = p;
  }
  return new_fill_;
}
inline ::TSD::FillArchive* CommandSlideSetBackgroundFillArchive::mutable_new_fill() {
  ::TSD::FillArchive* _msg = _internal_mutable_new_fill();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetBackgroundFillArchive.new_fill)
  return _msg;
}
inline void CommandSlideSetBackgroundFillArchive::set_allocated_new_fill(::TSD::FillArchive* new_fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_fill_);
  }
  if (new_fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_fill));
    if (message_arena != submessage_arena) {
      new_fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  new_fill_ = new_fill;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetBackgroundFillArchive.new_fill)
}

// -------------------------------------------------------------------

// CommandSlideSetStyleArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideSetStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideSetStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideSetStyleArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideSetStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetStyleArchive.super)
  return _internal_super();
}
inline void CommandSlideSetStyleArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetStyleArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideSetStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideSetStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideSetStyleArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetStyleArchive.super)
  return _msg;
}
inline void CommandSlideSetStyleArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetStyleArchive.super)
}

// required .TSP.UUIDPath slide_id_path = 2;
inline bool CommandSlideSetStyleArchive::_internal_has_slide_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_path_ != nullptr);
  return value;
}
inline bool CommandSlideSetStyleArchive::has_slide_id_path() const {
  return _internal_has_slide_id_path();
}
inline const ::TSP::UUIDPath& CommandSlideSetStyleArchive::_internal_slide_id_path() const {
  const ::TSP::UUIDPath* p = slide_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& CommandSlideSetStyleArchive::slide_id_path() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetStyleArchive.slide_id_path)
  return _internal_slide_id_path();
}
inline void CommandSlideSetStyleArchive::unsafe_arena_set_allocated_slide_id_path(
    ::TSP::UUIDPath* slide_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path_);
  }
  slide_id_path_ = slide_id_path;
  if (slide_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetStyleArchive.slide_id_path)
}
inline ::TSP::UUIDPath* CommandSlideSetStyleArchive::release_slide_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = slide_id_path_;
  slide_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* CommandSlideSetStyleArchive::unsafe_arena_release_slide_id_path() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetStyleArchive.slide_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = slide_id_path_;
  slide_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* CommandSlideSetStyleArchive::_internal_mutable_slide_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    slide_id_path_ = p;
  }
  return slide_id_path_;
}
inline ::TSP::UUIDPath* CommandSlideSetStyleArchive::mutable_slide_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_slide_id_path();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetStyleArchive.slide_id_path)
  return _msg;
}
inline void CommandSlideSetStyleArchive::set_allocated_slide_id_path(::TSP::UUIDPath* slide_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path_);
  }
  if (slide_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path));
    if (message_arena != submessage_arena) {
      slide_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_path_ = slide_id_path;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetStyleArchive.slide_id_path)
}

// required .TSP.Reference slide_style = 3;
inline bool CommandSlideSetStyleArchive::_internal_has_slide_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || slide_style_ != nullptr);
  return value;
}
inline bool CommandSlideSetStyleArchive::has_slide_style() const {
  return _internal_has_slide_style();
}
inline const ::TSP::Reference& CommandSlideSetStyleArchive::_internal_slide_style() const {
  const ::TSP::Reference* p = slide_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideSetStyleArchive::slide_style() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetStyleArchive.slide_style)
  return _internal_slide_style();
}
inline void CommandSlideSetStyleArchive::unsafe_arena_set_allocated_slide_style(
    ::TSP::Reference* slide_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_style_);
  }
  slide_style_ = slide_style;
  if (slide_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetStyleArchive.slide_style)
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::release_slide_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = slide_style_;
  slide_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::unsafe_arena_release_slide_style() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetStyleArchive.slide_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = slide_style_;
  slide_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::_internal_mutable_slide_style() {
  _has_bits_[0] |= 0x00000004u;
  if (slide_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    slide_style_ = p;
  }
  return slide_style_;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::mutable_slide_style() {
  ::TSP::Reference* _msg = _internal_mutable_slide_style();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetStyleArchive.slide_style)
  return _msg;
}
inline void CommandSlideSetStyleArchive::set_allocated_slide_style(::TSP::Reference* slide_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_style_);
  }
  if (slide_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_style));
    if (message_arena != submessage_arena) {
      slide_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  slide_style_ = slide_style;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetStyleArchive.slide_style)
}

// optional .TSP.Reference old_slide_style = 4;
inline bool CommandSlideSetStyleArchive::_internal_has_old_slide_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_slide_style_ != nullptr);
  return value;
}
inline bool CommandSlideSetStyleArchive::has_old_slide_style() const {
  return _internal_has_old_slide_style();
}
inline const ::TSP::Reference& CommandSlideSetStyleArchive::_internal_old_slide_style() const {
  const ::TSP::Reference* p = old_slide_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideSetStyleArchive::old_slide_style() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideSetStyleArchive.old_slide_style)
  return _internal_old_slide_style();
}
inline void CommandSlideSetStyleArchive::unsafe_arena_set_allocated_old_slide_style(
    ::TSP::Reference* old_slide_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_slide_style_);
  }
  old_slide_style_ = old_slide_style;
  if (old_slide_style) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideSetStyleArchive.old_slide_style)
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::release_old_slide_style() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_slide_style_;
  old_slide_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::unsafe_arena_release_old_slide_style() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideSetStyleArchive.old_slide_style)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_slide_style_;
  old_slide_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::_internal_mutable_old_slide_style() {
  _has_bits_[0] |= 0x00000008u;
  if (old_slide_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_slide_style_ = p;
  }
  return old_slide_style_;
}
inline ::TSP::Reference* CommandSlideSetStyleArchive::mutable_old_slide_style() {
  ::TSP::Reference* _msg = _internal_mutable_old_slide_style();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideSetStyleArchive.old_slide_style)
  return _msg;
}
inline void CommandSlideSetStyleArchive::set_allocated_old_slide_style(::TSP::Reference* old_slide_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_slide_style_);
  }
  if (old_slide_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_slide_style));
    if (message_arena != submessage_arena) {
      old_slide_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_slide_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_slide_style_ = old_slide_style;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideSetStyleArchive.old_slide_style)
}

// -------------------------------------------------------------------

// CommandShowMarkOutOfSyncRecordingArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowMarkOutOfSyncRecordingArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowMarkOutOfSyncRecordingArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingArchive.super)
  return _internal_super();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.super)
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMarkOutOfSyncRecordingArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMarkOutOfSyncRecordingArchive.super)
  return _msg;
}
inline void CommandShowMarkOutOfSyncRecordingArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_has_show() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || show_ != nullptr);
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowMarkOutOfSyncRecordingArchive::_internal_show() const {
  const ::TSP::Reference* p = show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowMarkOutOfSyncRecordingArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingArchive.show)
  return _internal_show();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.show)
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::release_show() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMarkOutOfSyncRecordingArchive.show)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::_internal_mutable_show() {
  _has_bits_[0] |= 0x00000002u;
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    show_ = p;
  }
  return show_;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMarkOutOfSyncRecordingArchive.show)
  return _msg;
}
inline void CommandShowMarkOutOfSyncRecordingArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.show)
}

// optional .TSP.Reference old_recording = 3;
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_has_old_recording() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || old_recording_ != nullptr);
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::has_old_recording() const {
  return _internal_has_old_recording();
}
inline const ::TSP::Reference& CommandShowMarkOutOfSyncRecordingArchive::_internal_old_recording() const {
  const ::TSP::Reference* p = old_recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowMarkOutOfSyncRecordingArchive::old_recording() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingArchive.old_recording)
  return _internal_old_recording();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_set_allocated_old_recording(
    ::TSP::Reference* old_recording) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording_);
  }
  old_recording_ = old_recording;
  if (old_recording) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.old_recording)
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::release_old_recording() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_recording_;
  old_recording_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_release_old_recording() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMarkOutOfSyncRecordingArchive.old_recording)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_recording_;
  old_recording_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::_internal_mutable_old_recording() {
  _has_bits_[0] |= 0x00000004u;
  if (old_recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_recording_ = p;
  }
  return old_recording_;
}
inline ::TSP::Reference* CommandShowMarkOutOfSyncRecordingArchive::mutable_old_recording() {
  ::TSP::Reference* _msg = _internal_mutable_old_recording();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMarkOutOfSyncRecordingArchive.old_recording)
  return _msg;
}
inline void CommandShowMarkOutOfSyncRecordingArchive::set_allocated_old_recording(::TSP::Reference* old_recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording_);
  }
  if (old_recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording));
    if (message_arena != submessage_arena) {
      old_recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_recording, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_recording_ = old_recording;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.old_recording)
}

// optional bool old_is_recording_out_of_sync = 4 [default = false];
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_has_old_is_recording_out_of_sync() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::has_old_is_recording_out_of_sync() const {
  return _internal_has_old_is_recording_out_of_sync();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::clear_old_is_recording_out_of_sync() {
  old_is_recording_out_of_sync_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_old_is_recording_out_of_sync() const {
  return old_is_recording_out_of_sync_;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::old_is_recording_out_of_sync() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingArchive.old_is_recording_out_of_sync)
  return _internal_old_is_recording_out_of_sync();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::_internal_set_old_is_recording_out_of_sync(bool value) {
  _has_bits_[0] |= 0x00000020u;
  old_is_recording_out_of_sync_ = value;
}
inline void CommandShowMarkOutOfSyncRecordingArchive::set_old_is_recording_out_of_sync(bool value) {
  _internal_set_old_is_recording_out_of_sync(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowMarkOutOfSyncRecordingArchive.old_is_recording_out_of_sync)
}

// optional bool new_is_recording_out_of_sync = 5 [default = false];
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_has_new_is_recording_out_of_sync() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::has_new_is_recording_out_of_sync() const {
  return _internal_has_new_is_recording_out_of_sync();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::clear_new_is_recording_out_of_sync() {
  new_is_recording_out_of_sync_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_new_is_recording_out_of_sync() const {
  return new_is_recording_out_of_sync_;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::new_is_recording_out_of_sync() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingArchive.new_is_recording_out_of_sync)
  return _internal_new_is_recording_out_of_sync();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::_internal_set_new_is_recording_out_of_sync(bool value) {
  _has_bits_[0] |= 0x00000040u;
  new_is_recording_out_of_sync_ = value;
}
inline void CommandShowMarkOutOfSyncRecordingArchive::set_new_is_recording_out_of_sync(bool value) {
  _internal_set_new_is_recording_out_of_sync(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowMarkOutOfSyncRecordingArchive.new_is_recording_out_of_sync)
}

// optional .TSP.Date old_modification_date = 6;
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_has_old_modification_date() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_modification_date_ != nullptr);
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::has_old_modification_date() const {
  return _internal_has_old_modification_date();
}
inline const ::TSP::Date& CommandShowMarkOutOfSyncRecordingArchive::_internal_old_modification_date() const {
  const ::TSP::Date* p = old_modification_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Date&>(
      ::TSP::_Date_default_instance_);
}
inline const ::TSP::Date& CommandShowMarkOutOfSyncRecordingArchive::old_modification_date() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingArchive.old_modification_date)
  return _internal_old_modification_date();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_set_allocated_old_modification_date(
    ::TSP::Date* old_modification_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_modification_date_);
  }
  old_modification_date_ = old_modification_date;
  if (old_modification_date) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.old_modification_date)
}
inline ::TSP::Date* CommandShowMarkOutOfSyncRecordingArchive::release_old_modification_date() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Date* temp = old_modification_date_;
  old_modification_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Date* CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_release_old_modification_date() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMarkOutOfSyncRecordingArchive.old_modification_date)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Date* temp = old_modification_date_;
  old_modification_date_ = nullptr;
  return temp;
}
inline ::TSP::Date* CommandShowMarkOutOfSyncRecordingArchive::_internal_mutable_old_modification_date() {
  _has_bits_[0] |= 0x00000008u;
  if (old_modification_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Date>(GetArenaForAllocation());
    old_modification_date_ = p;
  }
  return old_modification_date_;
}
inline ::TSP::Date* CommandShowMarkOutOfSyncRecordingArchive::mutable_old_modification_date() {
  ::TSP::Date* _msg = _internal_mutable_old_modification_date();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMarkOutOfSyncRecordingArchive.old_modification_date)
  return _msg;
}
inline void CommandShowMarkOutOfSyncRecordingArchive::set_allocated_old_modification_date(::TSP::Date* old_modification_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_modification_date_);
  }
  if (old_modification_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_modification_date));
    if (message_arena != submessage_arena) {
      old_modification_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_modification_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_modification_date_ = old_modification_date;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.old_modification_date)
}

// optional .TSP.Date new_modification_date = 7;
inline bool CommandShowMarkOutOfSyncRecordingArchive::_internal_has_new_modification_date() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || new_modification_date_ != nullptr);
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingArchive::has_new_modification_date() const {
  return _internal_has_new_modification_date();
}
inline const ::TSP::Date& CommandShowMarkOutOfSyncRecordingArchive::_internal_new_modification_date() const {
  const ::TSP::Date* p = new_modification_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Date&>(
      ::TSP::_Date_default_instance_);
}
inline const ::TSP::Date& CommandShowMarkOutOfSyncRecordingArchive::new_modification_date() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingArchive.new_modification_date)
  return _internal_new_modification_date();
}
inline void CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_set_allocated_new_modification_date(
    ::TSP::Date* new_modification_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_modification_date_);
  }
  new_modification_date_ = new_modification_date;
  if (new_modification_date) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.new_modification_date)
}
inline ::TSP::Date* CommandShowMarkOutOfSyncRecordingArchive::release_new_modification_date() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Date* temp = new_modification_date_;
  new_modification_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Date* CommandShowMarkOutOfSyncRecordingArchive::unsafe_arena_release_new_modification_date() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMarkOutOfSyncRecordingArchive.new_modification_date)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Date* temp = new_modification_date_;
  new_modification_date_ = nullptr;
  return temp;
}
inline ::TSP::Date* CommandShowMarkOutOfSyncRecordingArchive::_internal_mutable_new_modification_date() {
  _has_bits_[0] |= 0x00000010u;
  if (new_modification_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Date>(GetArenaForAllocation());
    new_modification_date_ = p;
  }
  return new_modification_date_;
}
inline ::TSP::Date* CommandShowMarkOutOfSyncRecordingArchive::mutable_new_modification_date() {
  ::TSP::Date* _msg = _internal_mutable_new_modification_date();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMarkOutOfSyncRecordingArchive.new_modification_date)
  return _msg;
}
inline void CommandShowMarkOutOfSyncRecordingArchive::set_allocated_new_modification_date(::TSP::Date* new_modification_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_modification_date_);
  }
  if (new_modification_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_modification_date));
    if (message_arena != submessage_arena) {
      new_modification_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_modification_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  new_modification_date_ = new_modification_date;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMarkOutOfSyncRecordingArchive.new_modification_date)
}

// -------------------------------------------------------------------

// CommandShowMarkOutOfSyncRecordingIfNeededArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowMarkOutOfSyncRecordingIfNeededArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingIfNeededArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowMarkOutOfSyncRecordingIfNeededArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowMarkOutOfSyncRecordingIfNeededArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.super)
  return _internal_super();
}
inline void CommandShowMarkOutOfSyncRecordingIfNeededArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.super)
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingIfNeededArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingIfNeededArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingIfNeededArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowMarkOutOfSyncRecordingIfNeededArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.super)
  return _msg;
}
inline void CommandShowMarkOutOfSyncRecordingIfNeededArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.super)
}

// optional .TSP.UUID out_of_sync_token = 2;
inline bool CommandShowMarkOutOfSyncRecordingIfNeededArchive::_internal_has_out_of_sync_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || out_of_sync_token_ != nullptr);
  return value;
}
inline bool CommandShowMarkOutOfSyncRecordingIfNeededArchive::has_out_of_sync_token() const {
  return _internal_has_out_of_sync_token();
}
inline const ::TSP::UUID& CommandShowMarkOutOfSyncRecordingIfNeededArchive::_internal_out_of_sync_token() const {
  const ::TSP::UUID* p = out_of_sync_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandShowMarkOutOfSyncRecordingIfNeededArchive::out_of_sync_token() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.out_of_sync_token)
  return _internal_out_of_sync_token();
}
inline void CommandShowMarkOutOfSyncRecordingIfNeededArchive::unsafe_arena_set_allocated_out_of_sync_token(
    ::TSP::UUID* out_of_sync_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_of_sync_token_);
  }
  out_of_sync_token_ = out_of_sync_token;
  if (out_of_sync_token) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.out_of_sync_token)
}
inline ::TSP::UUID* CommandShowMarkOutOfSyncRecordingIfNeededArchive::release_out_of_sync_token() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = out_of_sync_token_;
  out_of_sync_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandShowMarkOutOfSyncRecordingIfNeededArchive::unsafe_arena_release_out_of_sync_token() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.out_of_sync_token)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = out_of_sync_token_;
  out_of_sync_token_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandShowMarkOutOfSyncRecordingIfNeededArchive::_internal_mutable_out_of_sync_token() {
  _has_bits_[0] |= 0x00000002u;
  if (out_of_sync_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    out_of_sync_token_ = p;
  }
  return out_of_sync_token_;
}
inline ::TSP::UUID* CommandShowMarkOutOfSyncRecordingIfNeededArchive::mutable_out_of_sync_token() {
  ::TSP::UUID* _msg = _internal_mutable_out_of_sync_token();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.out_of_sync_token)
  return _msg;
}
inline void CommandShowMarkOutOfSyncRecordingIfNeededArchive::set_allocated_out_of_sync_token(::TSP::UUID* out_of_sync_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_of_sync_token_);
  }
  if (out_of_sync_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_of_sync_token));
    if (message_arena != submessage_arena) {
      out_of_sync_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, out_of_sync_token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  out_of_sync_token_ = out_of_sync_token;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.out_of_sync_token)
}

// -------------------------------------------------------------------

// CommandShowRemoveRecordingArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowRemoveRecordingArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowRemoveRecordingArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowRemoveRecordingArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowRemoveRecordingArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveRecordingArchive.super)
  return _internal_super();
}
inline void CommandShowRemoveRecordingArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowRemoveRecordingArchive.super)
}
inline ::TSK::CommandArchive* CommandShowRemoveRecordingArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowRemoveRecordingArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowRemoveRecordingArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowRemoveRecordingArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowRemoveRecordingArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveRecordingArchive.super)
  return _msg;
}
inline void CommandShowRemoveRecordingArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowRemoveRecordingArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowRemoveRecordingArchive::_internal_has_show() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || show_ != nullptr);
  return value;
}
inline bool CommandShowRemoveRecordingArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowRemoveRecordingArchive::_internal_show() const {
  const ::TSP::Reference* p = show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowRemoveRecordingArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveRecordingArchive.show)
  return _internal_show();
}
inline void CommandShowRemoveRecordingArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowRemoveRecordingArchive.show)
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::release_show() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowRemoveRecordingArchive.show)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::_internal_mutable_show() {
  _has_bits_[0] |= 0x00000002u;
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    show_ = p;
  }
  return show_;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveRecordingArchive.show)
  return _msg;
}
inline void CommandShowRemoveRecordingArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowRemoveRecordingArchive.show)
}

// optional .TSP.Reference old_recording = 3;
inline bool CommandShowRemoveRecordingArchive::_internal_has_old_recording() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || old_recording_ != nullptr);
  return value;
}
inline bool CommandShowRemoveRecordingArchive::has_old_recording() const {
  return _internal_has_old_recording();
}
inline const ::TSP::Reference& CommandShowRemoveRecordingArchive::_internal_old_recording() const {
  const ::TSP::Reference* p = old_recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowRemoveRecordingArchive::old_recording() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveRecordingArchive.old_recording)
  return _internal_old_recording();
}
inline void CommandShowRemoveRecordingArchive::unsafe_arena_set_allocated_old_recording(
    ::TSP::Reference* old_recording) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording_);
  }
  old_recording_ = old_recording;
  if (old_recording) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowRemoveRecordingArchive.old_recording)
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::release_old_recording() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_recording_;
  old_recording_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::unsafe_arena_release_old_recording() {
  // @@protoc_insertion_point(field_release:KN.CommandShowRemoveRecordingArchive.old_recording)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_recording_;
  old_recording_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::_internal_mutable_old_recording() {
  _has_bits_[0] |= 0x00000004u;
  if (old_recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_recording_ = p;
  }
  return old_recording_;
}
inline ::TSP::Reference* CommandShowRemoveRecordingArchive::mutable_old_recording() {
  ::TSP::Reference* _msg = _internal_mutable_old_recording();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveRecordingArchive.old_recording)
  return _msg;
}
inline void CommandShowRemoveRecordingArchive::set_allocated_old_recording(::TSP::Reference* old_recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording_);
  }
  if (old_recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording));
    if (message_arena != submessage_arena) {
      old_recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_recording, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_recording_ = old_recording;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowRemoveRecordingArchive.old_recording)
}

// -------------------------------------------------------------------

// CommandShowReplaceRecordingArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowReplaceRecordingArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowReplaceRecordingArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowReplaceRecordingArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowReplaceRecordingArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowReplaceRecordingArchive.super)
  return _internal_super();
}
inline void CommandShowReplaceRecordingArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowReplaceRecordingArchive.super)
}
inline ::TSK::CommandArchive* CommandShowReplaceRecordingArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowReplaceRecordingArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowReplaceRecordingArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowReplaceRecordingArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowReplaceRecordingArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowReplaceRecordingArchive.super)
  return _msg;
}
inline void CommandShowReplaceRecordingArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowReplaceRecordingArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowReplaceRecordingArchive::_internal_has_show() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || show_ != nullptr);
  return value;
}
inline bool CommandShowReplaceRecordingArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::_internal_show() const {
  const ::TSP::Reference* p = show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowReplaceRecordingArchive.show)
  return _internal_show();
}
inline void CommandShowReplaceRecordingArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowReplaceRecordingArchive.show)
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::release_show() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowReplaceRecordingArchive.show)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::_internal_mutable_show() {
  _has_bits_[0] |= 0x00000002u;
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    show_ = p;
  }
  return show_;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowReplaceRecordingArchive.show)
  return _msg;
}
inline void CommandShowReplaceRecordingArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowReplaceRecordingArchive.show)
}

// required .TSP.Reference replacement_recording = 3;
inline bool CommandShowReplaceRecordingArchive::_internal_has_replacement_recording() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || replacement_recording_ != nullptr);
  return value;
}
inline bool CommandShowReplaceRecordingArchive::has_replacement_recording() const {
  return _internal_has_replacement_recording();
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::_internal_replacement_recording() const {
  const ::TSP::Reference* p = replacement_recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::replacement_recording() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowReplaceRecordingArchive.replacement_recording)
  return _internal_replacement_recording();
}
inline void CommandShowReplaceRecordingArchive::unsafe_arena_set_allocated_replacement_recording(
    ::TSP::Reference* replacement_recording) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_recording_);
  }
  replacement_recording_ = replacement_recording;
  if (replacement_recording) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowReplaceRecordingArchive.replacement_recording)
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::release_replacement_recording() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = replacement_recording_;
  replacement_recording_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::unsafe_arena_release_replacement_recording() {
  // @@protoc_insertion_point(field_release:KN.CommandShowReplaceRecordingArchive.replacement_recording)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = replacement_recording_;
  replacement_recording_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::_internal_mutable_replacement_recording() {
  _has_bits_[0] |= 0x00000004u;
  if (replacement_recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    replacement_recording_ = p;
  }
  return replacement_recording_;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::mutable_replacement_recording() {
  ::TSP::Reference* _msg = _internal_mutable_replacement_recording();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowReplaceRecordingArchive.replacement_recording)
  return _msg;
}
inline void CommandShowReplaceRecordingArchive::set_allocated_replacement_recording(::TSP::Reference* replacement_recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_recording_);
  }
  if (replacement_recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_recording));
    if (message_arena != submessage_arena) {
      replacement_recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacement_recording, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  replacement_recording_ = replacement_recording;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowReplaceRecordingArchive.replacement_recording)
}

// optional .TSP.Reference old_recording = 5;
inline bool CommandShowReplaceRecordingArchive::_internal_has_old_recording() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_recording_ != nullptr);
  return value;
}
inline bool CommandShowReplaceRecordingArchive::has_old_recording() const {
  return _internal_has_old_recording();
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::_internal_old_recording() const {
  const ::TSP::Reference* p = old_recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowReplaceRecordingArchive::old_recording() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowReplaceRecordingArchive.old_recording)
  return _internal_old_recording();
}
inline void CommandShowReplaceRecordingArchive::unsafe_arena_set_allocated_old_recording(
    ::TSP::Reference* old_recording) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording_);
  }
  old_recording_ = old_recording;
  if (old_recording) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowReplaceRecordingArchive.old_recording)
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::release_old_recording() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_recording_;
  old_recording_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::unsafe_arena_release_old_recording() {
  // @@protoc_insertion_point(field_release:KN.CommandShowReplaceRecordingArchive.old_recording)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_recording_;
  old_recording_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::_internal_mutable_old_recording() {
  _has_bits_[0] |= 0x00000008u;
  if (old_recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_recording_ = p;
  }
  return old_recording_;
}
inline ::TSP::Reference* CommandShowReplaceRecordingArchive::mutable_old_recording() {
  ::TSP::Reference* _msg = _internal_mutable_old_recording();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowReplaceRecordingArchive.old_recording)
  return _msg;
}
inline void CommandShowReplaceRecordingArchive::set_allocated_old_recording(::TSP::Reference* old_recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording_);
  }
  if (old_recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_recording));
    if (message_arena != submessage_arena) {
      old_recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_recording, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_recording_ = old_recording;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowReplaceRecordingArchive.old_recording)
}

// -------------------------------------------------------------------

// CommandShowSetValueArchive_PropertyValue

// optional bool bool_value = 1;
inline bool CommandShowSetValueArchive_PropertyValue::_internal_has_bool_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandShowSetValueArchive_PropertyValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void CommandShowSetValueArchive_PropertyValue::clear_bool_value() {
  bool_value_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandShowSetValueArchive_PropertyValue::_internal_bool_value() const {
  return bool_value_;
}
inline bool CommandShowSetValueArchive_PropertyValue::bool_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.PropertyValue.bool_value)
  return _internal_bool_value();
}
inline void CommandShowSetValueArchive_PropertyValue::_internal_set_bool_value(bool value) {
  _has_bits_[0] |= 0x00000004u;
  bool_value_ = value;
}
inline void CommandShowSetValueArchive_PropertyValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowSetValueArchive.PropertyValue.bool_value)
}

// optional double double_value = 2;
inline bool CommandShowSetValueArchive_PropertyValue::_internal_has_double_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandShowSetValueArchive_PropertyValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void CommandShowSetValueArchive_PropertyValue::clear_double_value() {
  double_value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CommandShowSetValueArchive_PropertyValue::_internal_double_value() const {
  return double_value_;
}
inline double CommandShowSetValueArchive_PropertyValue::double_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.PropertyValue.double_value)
  return _internal_double_value();
}
inline void CommandShowSetValueArchive_PropertyValue::_internal_set_double_value(double value) {
  _has_bits_[0] |= 0x00000002u;
  double_value_ = value;
}
inline void CommandShowSetValueArchive_PropertyValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowSetValueArchive.PropertyValue.double_value)
}

// optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
inline bool CommandShowSetValueArchive_PropertyValue::_internal_has_show_mode_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandShowSetValueArchive_PropertyValue::has_show_mode_value() const {
  return _internal_has_show_mode_value();
}
inline void CommandShowSetValueArchive_PropertyValue::clear_show_mode_value() {
  show_mode_value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::KN::ShowArchive_KNShowMode CommandShowSetValueArchive_PropertyValue::_internal_show_mode_value() const {
  return static_cast< ::KN::ShowArchive_KNShowMode >(show_mode_value_);
}
inline ::KN::ShowArchive_KNShowMode CommandShowSetValueArchive_PropertyValue::show_mode_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.PropertyValue.show_mode_value)
  return _internal_show_mode_value();
}
inline void CommandShowSetValueArchive_PropertyValue::_internal_set_show_mode_value(::KN::ShowArchive_KNShowMode value) {
  assert(::KN::ShowArchive_KNShowMode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  show_mode_value_ = value;
}
inline void CommandShowSetValueArchive_PropertyValue::set_show_mode_value(::KN::ShowArchive_KNShowMode value) {
  _internal_set_show_mode_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowSetValueArchive.PropertyValue.show_mode_value)
}

// optional .TSP.Size size_value = 4;
inline bool CommandShowSetValueArchive_PropertyValue::_internal_has_size_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || size_value_ != nullptr);
  return value;
}
inline bool CommandShowSetValueArchive_PropertyValue::has_size_value() const {
  return _internal_has_size_value();
}
inline const ::TSP::Size& CommandShowSetValueArchive_PropertyValue::_internal_size_value() const {
  const ::TSP::Size* p = size_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& CommandShowSetValueArchive_PropertyValue::size_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.PropertyValue.size_value)
  return _internal_size_value();
}
inline void CommandShowSetValueArchive_PropertyValue::unsafe_arena_set_allocated_size_value(
    ::TSP::Size* size_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_value_);
  }
  size_value_ = size_value;
  if (size_value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetValueArchive.PropertyValue.size_value)
}
inline ::TSP::Size* CommandShowSetValueArchive_PropertyValue::release_size_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Size* temp = size_value_;
  size_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* CommandShowSetValueArchive_PropertyValue::unsafe_arena_release_size_value() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.PropertyValue.size_value)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Size* temp = size_value_;
  size_value_ = nullptr;
  return temp;
}
inline ::TSP::Size* CommandShowSetValueArchive_PropertyValue::_internal_mutable_size_value() {
  _has_bits_[0] |= 0x00000001u;
  if (size_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    size_value_ = p;
  }
  return size_value_;
}
inline ::TSP::Size* CommandShowSetValueArchive_PropertyValue::mutable_size_value() {
  ::TSP::Size* _msg = _internal_mutable_size_value();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.PropertyValue.size_value)
  return _msg;
}
inline void CommandShowSetValueArchive_PropertyValue::set_allocated_size_value(::TSP::Size* size_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_value_);
  }
  if (size_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_value));
    if (message_arena != submessage_arena) {
      size_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  size_value_ = size_value;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.PropertyValue.size_value)
}

// -------------------------------------------------------------------

// CommandShowSetValueArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowSetValueArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowSetValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowSetValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowSetValueArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.super)
  return _internal_super();
}
inline void CommandShowSetValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetValueArchive.super)
}
inline ::TSK::CommandArchive* CommandShowSetValueArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetValueArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowSetValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.super)
  return _msg;
}
inline void CommandShowSetValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowSetValueArchive::_internal_has_show() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || show_ != nullptr);
  return value;
}
inline bool CommandShowSetValueArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowSetValueArchive::_internal_show() const {
  const ::TSP::Reference* p = show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowSetValueArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.show)
  return _internal_show();
}
inline void CommandShowSetValueArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetValueArchive.show)
}
inline ::TSP::Reference* CommandShowSetValueArchive::release_show() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowSetValueArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.show)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowSetValueArchive::_internal_mutable_show() {
  _has_bits_[0] |= 0x00000004u;
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    show_ = p;
  }
  return show_;
}
inline ::TSP::Reference* CommandShowSetValueArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.show)
  return _msg;
}
inline void CommandShowSetValueArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.show)
}

// required string property = 3;
inline bool CommandShowSetValueArchive::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandShowSetValueArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandShowSetValueArchive::clear_property() {
  property_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandShowSetValueArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandShowSetValueArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandShowSetValueArchive.property)
}
inline std::string* CommandShowSetValueArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.property)
  return _s;
}
inline const std::string& CommandShowSetValueArchive::_internal_property() const {
  return property_.Get();
}
inline void CommandShowSetValueArchive::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandShowSetValueArchive::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000001u;
  return property_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandShowSetValueArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandShowSetValueArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.property)
}

// required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
inline bool CommandShowSetValueArchive::_internal_has_old_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_value_ != nullptr);
  return value;
}
inline bool CommandShowSetValueArchive::has_old_value() const {
  return _internal_has_old_value();
}
inline void CommandShowSetValueArchive::clear_old_value() {
  if (old_value_ != nullptr) old_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::CommandShowSetValueArchive_PropertyValue& CommandShowSetValueArchive::_internal_old_value() const {
  const ::KN::CommandShowSetValueArchive_PropertyValue* p = old_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandShowSetValueArchive_PropertyValue&>(
      ::KN::_CommandShowSetValueArchive_PropertyValue_default_instance_);
}
inline const ::KN::CommandShowSetValueArchive_PropertyValue& CommandShowSetValueArchive::old_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.old_value)
  return _internal_old_value();
}
inline void CommandShowSetValueArchive::unsafe_arena_set_allocated_old_value(
    ::KN::CommandShowSetValueArchive_PropertyValue* old_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_value_);
  }
  old_value_ = old_value;
  if (old_value) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetValueArchive.old_value)
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::release_old_value() {
  _has_bits_[0] &= ~0x00000008u;
  ::KN::CommandShowSetValueArchive_PropertyValue* temp = old_value_;
  old_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::unsafe_arena_release_old_value() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.old_value)
  _has_bits_[0] &= ~0x00000008u;
  ::KN::CommandShowSetValueArchive_PropertyValue* temp = old_value_;
  old_value_ = nullptr;
  return temp;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::_internal_mutable_old_value() {
  _has_bits_[0] |= 0x00000008u;
  if (old_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandShowSetValueArchive_PropertyValue>(GetArenaForAllocation());
    old_value_ = p;
  }
  return old_value_;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::mutable_old_value() {
  ::KN::CommandShowSetValueArchive_PropertyValue* _msg = _internal_mutable_old_value();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.old_value)
  return _msg;
}
inline void CommandShowSetValueArchive::set_allocated_old_value(::KN::CommandShowSetValueArchive_PropertyValue* old_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete old_value_;
  }
  if (old_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::CommandShowSetValueArchive_PropertyValue>::GetOwningArena(old_value);
    if (message_arena != submessage_arena) {
      old_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_value_ = old_value;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.old_value)
}

// required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
inline bool CommandShowSetValueArchive::_internal_has_new_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || new_value_ != nullptr);
  return value;
}
inline bool CommandShowSetValueArchive::has_new_value() const {
  return _internal_has_new_value();
}
inline void CommandShowSetValueArchive::clear_new_value() {
  if (new_value_ != nullptr) new_value_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::KN::CommandShowSetValueArchive_PropertyValue& CommandShowSetValueArchive::_internal_new_value() const {
  const ::KN::CommandShowSetValueArchive_PropertyValue* p = new_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandShowSetValueArchive_PropertyValue&>(
      ::KN::_CommandShowSetValueArchive_PropertyValue_default_instance_);
}
inline const ::KN::CommandShowSetValueArchive_PropertyValue& CommandShowSetValueArchive::new_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetValueArchive.new_value)
  return _internal_new_value();
}
inline void CommandShowSetValueArchive::unsafe_arena_set_allocated_new_value(
    ::KN::CommandShowSetValueArchive_PropertyValue* new_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_value_);
  }
  new_value_ = new_value;
  if (new_value) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetValueArchive.new_value)
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::release_new_value() {
  _has_bits_[0] &= ~0x00000010u;
  ::KN::CommandShowSetValueArchive_PropertyValue* temp = new_value_;
  new_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::unsafe_arena_release_new_value() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetValueArchive.new_value)
  _has_bits_[0] &= ~0x00000010u;
  ::KN::CommandShowSetValueArchive_PropertyValue* temp = new_value_;
  new_value_ = nullptr;
  return temp;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::_internal_mutable_new_value() {
  _has_bits_[0] |= 0x00000010u;
  if (new_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandShowSetValueArchive_PropertyValue>(GetArenaForAllocation());
    new_value_ = p;
  }
  return new_value_;
}
inline ::KN::CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive::mutable_new_value() {
  ::KN::CommandShowSetValueArchive_PropertyValue* _msg = _internal_mutable_new_value();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetValueArchive.new_value)
  return _msg;
}
inline void CommandShowSetValueArchive::set_allocated_new_value(::KN::CommandShowSetValueArchive_PropertyValue* new_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete new_value_;
  }
  if (new_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::CommandShowSetValueArchive_PropertyValue>::GetOwningArena(new_value);
    if (message_arena != submessage_arena) {
      new_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  new_value_ = new_value;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetValueArchive.new_value)
}

// -------------------------------------------------------------------

// CommandShowInsertSlideArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowInsertSlideArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowInsertSlideArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowInsertSlideArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowInsertSlideArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.super)
  return _internal_super();
}
inline void CommandShowInsertSlideArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowInsertSlideArchive.super)
}
inline ::TSK::CommandArchive* CommandShowInsertSlideArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowInsertSlideArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowInsertSlideArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowInsertSlideArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowInsertSlideArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.super)
  return _msg;
}
inline void CommandShowInsertSlideArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowInsertSlideArchive.super)
}

// repeated .TSP.Reference slide_nodes_being_inserted = 2;
inline int CommandShowInsertSlideArchive::_internal_slide_nodes_being_inserted_size() const {
  return slide_nodes_being_inserted_.size();
}
inline int CommandShowInsertSlideArchive::slide_nodes_being_inserted_size() const {
  return _internal_slide_nodes_being_inserted_size();
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::mutable_slide_nodes_being_inserted(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.slide_nodes_being_inserted)
  return slide_nodes_being_inserted_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandShowInsertSlideArchive::mutable_slide_nodes_being_inserted() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.slide_nodes_being_inserted)
  return &slide_nodes_being_inserted_;
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::_internal_slide_nodes_being_inserted(int index) const {
  return slide_nodes_being_inserted_.Get(index);
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::slide_nodes_being_inserted(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.slide_nodes_being_inserted)
  return _internal_slide_nodes_being_inserted(index);
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::_internal_add_slide_nodes_being_inserted() {
  return slide_nodes_being_inserted_.Add();
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::add_slide_nodes_being_inserted() {
  ::TSP::Reference* _add = _internal_add_slide_nodes_being_inserted();
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.slide_nodes_being_inserted)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandShowInsertSlideArchive::slide_nodes_being_inserted() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.slide_nodes_being_inserted)
  return slide_nodes_being_inserted_;
}

// repeated .TSP.Reference working_slide_nodes_being_inserted = 14;
inline int CommandShowInsertSlideArchive::_internal_working_slide_nodes_being_inserted_size() const {
  return working_slide_nodes_being_inserted_.size();
}
inline int CommandShowInsertSlideArchive::working_slide_nodes_being_inserted_size() const {
  return _internal_working_slide_nodes_being_inserted_size();
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::mutable_working_slide_nodes_being_inserted(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.working_slide_nodes_being_inserted)
  return working_slide_nodes_being_inserted_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandShowInsertSlideArchive::mutable_working_slide_nodes_being_inserted() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.working_slide_nodes_being_inserted)
  return &working_slide_nodes_being_inserted_;
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::_internal_working_slide_nodes_being_inserted(int index) const {
  return working_slide_nodes_being_inserted_.Get(index);
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::working_slide_nodes_being_inserted(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.working_slide_nodes_being_inserted)
  return _internal_working_slide_nodes_being_inserted(index);
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::_internal_add_working_slide_nodes_being_inserted() {
  return working_slide_nodes_being_inserted_.Add();
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::add_working_slide_nodes_being_inserted() {
  ::TSP::Reference* _add = _internal_add_working_slide_nodes_being_inserted();
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.working_slide_nodes_being_inserted)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandShowInsertSlideArchive::working_slide_nodes_being_inserted() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.working_slide_nodes_being_inserted)
  return working_slide_nodes_being_inserted_;
}

// repeated .TSK.AddIdOperationArgs inserted_args_list = 3;
inline int CommandShowInsertSlideArchive::_internal_inserted_args_list_size() const {
  return inserted_args_list_.size();
}
inline int CommandShowInsertSlideArchive::inserted_args_list_size() const {
  return _internal_inserted_args_list_size();
}
inline ::TSK::AddIdOperationArgs* CommandShowInsertSlideArchive::mutable_inserted_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.inserted_args_list)
  return inserted_args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
CommandShowInsertSlideArchive::mutable_inserted_args_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.inserted_args_list)
  return &inserted_args_list_;
}
inline const ::TSK::AddIdOperationArgs& CommandShowInsertSlideArchive::_internal_inserted_args_list(int index) const {
  return inserted_args_list_.Get(index);
}
inline const ::TSK::AddIdOperationArgs& CommandShowInsertSlideArchive::inserted_args_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.inserted_args_list)
  return _internal_inserted_args_list(index);
}
inline ::TSK::AddIdOperationArgs* CommandShowInsertSlideArchive::_internal_add_inserted_args_list() {
  return inserted_args_list_.Add();
}
inline ::TSK::AddIdOperationArgs* CommandShowInsertSlideArchive::add_inserted_args_list() {
  ::TSK::AddIdOperationArgs* _add = _internal_add_inserted_args_list();
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.inserted_args_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
CommandShowInsertSlideArchive::inserted_args_list() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.inserted_args_list)
  return inserted_args_list_;
}

// repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
inline int CommandShowInsertSlideArchive::_internal_ids_of_slide_nodes_with_depth_changes_size() const {
  return ids_of_slide_nodes_with_depth_changes_.size();
}
inline int CommandShowInsertSlideArchive::ids_of_slide_nodes_with_depth_changes_size() const {
  return _internal_ids_of_slide_nodes_with_depth_changes_size();
}
inline ::TSP::UUID* CommandShowInsertSlideArchive::mutable_ids_of_slide_nodes_with_depth_changes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return ids_of_slide_nodes_with_depth_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandShowInsertSlideArchive::mutable_ids_of_slide_nodes_with_depth_changes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return &ids_of_slide_nodes_with_depth_changes_;
}
inline const ::TSP::UUID& CommandShowInsertSlideArchive::_internal_ids_of_slide_nodes_with_depth_changes(int index) const {
  return ids_of_slide_nodes_with_depth_changes_.Get(index);
}
inline const ::TSP::UUID& CommandShowInsertSlideArchive::ids_of_slide_nodes_with_depth_changes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return _internal_ids_of_slide_nodes_with_depth_changes(index);
}
inline ::TSP::UUID* CommandShowInsertSlideArchive::_internal_add_ids_of_slide_nodes_with_depth_changes() {
  return ids_of_slide_nodes_with_depth_changes_.Add();
}
inline ::TSP::UUID* CommandShowInsertSlideArchive::add_ids_of_slide_nodes_with_depth_changes() {
  ::TSP::UUID* _add = _internal_add_ids_of_slide_nodes_with_depth_changes();
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandShowInsertSlideArchive::ids_of_slide_nodes_with_depth_changes() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return ids_of_slide_nodes_with_depth_changes_;
}

// repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
inline int CommandShowInsertSlideArchive::_internal_depths_of_slide_nodes_with_depth_changes_size() const {
  return depths_of_slide_nodes_with_depth_changes_.size();
}
inline int CommandShowInsertSlideArchive::depths_of_slide_nodes_with_depth_changes_size() const {
  return _internal_depths_of_slide_nodes_with_depth_changes_size();
}
inline void CommandShowInsertSlideArchive::clear_depths_of_slide_nodes_with_depth_changes() {
  depths_of_slide_nodes_with_depth_changes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowInsertSlideArchive::_internal_depths_of_slide_nodes_with_depth_changes(int index) const {
  return depths_of_slide_nodes_with_depth_changes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowInsertSlideArchive::depths_of_slide_nodes_with_depth_changes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.depths_of_slide_nodes_with_depth_changes)
  return _internal_depths_of_slide_nodes_with_depth_changes(index);
}
inline void CommandShowInsertSlideArchive::set_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_with_depth_changes_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowInsertSlideArchive.depths_of_slide_nodes_with_depth_changes)
}
inline void CommandShowInsertSlideArchive::_internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_with_depth_changes_.Add(value);
}
inline void CommandShowInsertSlideArchive::add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_depths_of_slide_nodes_with_depth_changes(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.depths_of_slide_nodes_with_depth_changes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowInsertSlideArchive::_internal_depths_of_slide_nodes_with_depth_changes() const {
  return depths_of_slide_nodes_with_depth_changes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowInsertSlideArchive::depths_of_slide_nodes_with_depth_changes() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.depths_of_slide_nodes_with_depth_changes)
  return _internal_depths_of_slide_nodes_with_depth_changes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowInsertSlideArchive::_internal_mutable_depths_of_slide_nodes_with_depth_changes() {
  return &depths_of_slide_nodes_with_depth_changes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowInsertSlideArchive::mutable_depths_of_slide_nodes_with_depth_changes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.depths_of_slide_nodes_with_depth_changes)
  return _internal_mutable_depths_of_slide_nodes_with_depth_changes();
}

// repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
inline int CommandShowInsertSlideArchive::_internal_old_depths_of_slide_nodes_with_depth_changes_size() const {
  return old_depths_of_slide_nodes_with_depth_changes_.size();
}
inline int CommandShowInsertSlideArchive::old_depths_of_slide_nodes_with_depth_changes_size() const {
  return _internal_old_depths_of_slide_nodes_with_depth_changes_size();
}
inline void CommandShowInsertSlideArchive::clear_old_depths_of_slide_nodes_with_depth_changes() {
  old_depths_of_slide_nodes_with_depth_changes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowInsertSlideArchive::_internal_old_depths_of_slide_nodes_with_depth_changes(int index) const {
  return old_depths_of_slide_nodes_with_depth_changes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowInsertSlideArchive::old_depths_of_slide_nodes_with_depth_changes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
  return _internal_old_depths_of_slide_nodes_with_depth_changes(index);
}
inline void CommandShowInsertSlideArchive::set_old_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_with_depth_changes_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowInsertSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
}
inline void CommandShowInsertSlideArchive::_internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_with_depth_changes_.Add(value);
}
inline void CommandShowInsertSlideArchive::add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_old_depths_of_slide_nodes_with_depth_changes(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowInsertSlideArchive::_internal_old_depths_of_slide_nodes_with_depth_changes() const {
  return old_depths_of_slide_nodes_with_depth_changes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowInsertSlideArchive::old_depths_of_slide_nodes_with_depth_changes() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
  return _internal_old_depths_of_slide_nodes_with_depth_changes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowInsertSlideArchive::_internal_mutable_old_depths_of_slide_nodes_with_depth_changes() {
  return &old_depths_of_slide_nodes_with_depth_changes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowInsertSlideArchive::mutable_old_depths_of_slide_nodes_with_depth_changes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
  return _internal_mutable_old_depths_of_slide_nodes_with_depth_changes();
}

// repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
inline int CommandShowInsertSlideArchive::_internal_slide_nodes_for_depth_fix_up_size() const {
  return slide_nodes_for_depth_fix_up_.size();
}
inline int CommandShowInsertSlideArchive::slide_nodes_for_depth_fix_up_size() const {
  return _internal_slide_nodes_for_depth_fix_up_size();
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::mutable_slide_nodes_for_depth_fix_up(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.slide_nodes_for_depth_fix_up)
  return slide_nodes_for_depth_fix_up_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandShowInsertSlideArchive::mutable_slide_nodes_for_depth_fix_up() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.slide_nodes_for_depth_fix_up)
  return &slide_nodes_for_depth_fix_up_;
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::_internal_slide_nodes_for_depth_fix_up(int index) const {
  return slide_nodes_for_depth_fix_up_.Get(index);
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::slide_nodes_for_depth_fix_up(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.slide_nodes_for_depth_fix_up)
  return _internal_slide_nodes_for_depth_fix_up(index);
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::_internal_add_slide_nodes_for_depth_fix_up() {
  return slide_nodes_for_depth_fix_up_.Add();
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::add_slide_nodes_for_depth_fix_up() {
  ::TSP::Reference* _add = _internal_add_slide_nodes_for_depth_fix_up();
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.slide_nodes_for_depth_fix_up)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandShowInsertSlideArchive::slide_nodes_for_depth_fix_up() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.slide_nodes_for_depth_fix_up)
  return slide_nodes_for_depth_fix_up_;
}

// repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
inline int CommandShowInsertSlideArchive::_internal_depths_of_slide_nodes_for_depth_fix_up_size() const {
  return depths_of_slide_nodes_for_depth_fix_up_.size();
}
inline int CommandShowInsertSlideArchive::depths_of_slide_nodes_for_depth_fix_up_size() const {
  return _internal_depths_of_slide_nodes_for_depth_fix_up_size();
}
inline void CommandShowInsertSlideArchive::clear_depths_of_slide_nodes_for_depth_fix_up() {
  depths_of_slide_nodes_for_depth_fix_up_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowInsertSlideArchive::_internal_depths_of_slide_nodes_for_depth_fix_up(int index) const {
  return depths_of_slide_nodes_for_depth_fix_up_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowInsertSlideArchive::depths_of_slide_nodes_for_depth_fix_up(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
  return _internal_depths_of_slide_nodes_for_depth_fix_up(index);
}
inline void CommandShowInsertSlideArchive::set_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_for_depth_fix_up_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowInsertSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
}
inline void CommandShowInsertSlideArchive::_internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_for_depth_fix_up_.Add(value);
}
inline void CommandShowInsertSlideArchive::add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_depths_of_slide_nodes_for_depth_fix_up(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowInsertSlideArchive::_internal_depths_of_slide_nodes_for_depth_fix_up() const {
  return depths_of_slide_nodes_for_depth_fix_up_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowInsertSlideArchive::depths_of_slide_nodes_for_depth_fix_up() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
  return _internal_depths_of_slide_nodes_for_depth_fix_up();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowInsertSlideArchive::_internal_mutable_depths_of_slide_nodes_for_depth_fix_up() {
  return &depths_of_slide_nodes_for_depth_fix_up_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowInsertSlideArchive::mutable_depths_of_slide_nodes_for_depth_fix_up() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
  return _internal_mutable_depths_of_slide_nodes_for_depth_fix_up();
}

// repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
inline int CommandShowInsertSlideArchive::_internal_old_depths_of_slide_nodes_for_depth_fix_up_size() const {
  return old_depths_of_slide_nodes_for_depth_fix_up_.size();
}
inline int CommandShowInsertSlideArchive::old_depths_of_slide_nodes_for_depth_fix_up_size() const {
  return _internal_old_depths_of_slide_nodes_for_depth_fix_up_size();
}
inline void CommandShowInsertSlideArchive::clear_old_depths_of_slide_nodes_for_depth_fix_up() {
  old_depths_of_slide_nodes_for_depth_fix_up_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowInsertSlideArchive::_internal_old_depths_of_slide_nodes_for_depth_fix_up(int index) const {
  return old_depths_of_slide_nodes_for_depth_fix_up_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowInsertSlideArchive::old_depths_of_slide_nodes_for_depth_fix_up(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
  return _internal_old_depths_of_slide_nodes_for_depth_fix_up(index);
}
inline void CommandShowInsertSlideArchive::set_old_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_for_depth_fix_up_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowInsertSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
}
inline void CommandShowInsertSlideArchive::_internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_for_depth_fix_up_.Add(value);
}
inline void CommandShowInsertSlideArchive::add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowInsertSlideArchive::_internal_old_depths_of_slide_nodes_for_depth_fix_up() const {
  return old_depths_of_slide_nodes_for_depth_fix_up_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowInsertSlideArchive::old_depths_of_slide_nodes_for_depth_fix_up() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
  return _internal_old_depths_of_slide_nodes_for_depth_fix_up();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowInsertSlideArchive::_internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up() {
  return &old_depths_of_slide_nodes_for_depth_fix_up_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowInsertSlideArchive::mutable_old_depths_of_slide_nodes_for_depth_fix_up() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
  return _internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up();
}

// optional .KN.CommandShowInsertSlideArchive.Kind kind = 10 [default = kKindInsertSlide];
inline bool CommandShowInsertSlideArchive::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandShowInsertSlideArchive::has_kind() const {
  return _internal_has_kind();
}
inline void CommandShowInsertSlideArchive::clear_kind() {
  kind_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::KN::CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::_internal_kind() const {
  return static_cast< ::KN::CommandShowInsertSlideArchive_Kind >(kind_);
}
inline ::KN::CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kind() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.kind)
  return _internal_kind();
}
inline void CommandShowInsertSlideArchive::_internal_set_kind(::KN::CommandShowInsertSlideArchive_Kind value) {
  assert(::KN::CommandShowInsertSlideArchive_Kind_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  kind_ = value;
}
inline void CommandShowInsertSlideArchive::set_kind(::KN::CommandShowInsertSlideArchive_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowInsertSlideArchive.kind)
}

// repeated .TSP.Reference template_slide_nodes_being_inserted = 11;
inline int CommandShowInsertSlideArchive::_internal_template_slide_nodes_being_inserted_size() const {
  return template_slide_nodes_being_inserted_.size();
}
inline int CommandShowInsertSlideArchive::template_slide_nodes_being_inserted_size() const {
  return _internal_template_slide_nodes_being_inserted_size();
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::mutable_template_slide_nodes_being_inserted(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.template_slide_nodes_being_inserted)
  return template_slide_nodes_being_inserted_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandShowInsertSlideArchive::mutable_template_slide_nodes_being_inserted() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.template_slide_nodes_being_inserted)
  return &template_slide_nodes_being_inserted_;
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::_internal_template_slide_nodes_being_inserted(int index) const {
  return template_slide_nodes_being_inserted_.Get(index);
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::template_slide_nodes_being_inserted(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.template_slide_nodes_being_inserted)
  return _internal_template_slide_nodes_being_inserted(index);
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::_internal_add_template_slide_nodes_being_inserted() {
  return template_slide_nodes_being_inserted_.Add();
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::add_template_slide_nodes_being_inserted() {
  ::TSP::Reference* _add = _internal_add_template_slide_nodes_being_inserted();
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.template_slide_nodes_being_inserted)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandShowInsertSlideArchive::template_slide_nodes_being_inserted() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.template_slide_nodes_being_inserted)
  return template_slide_nodes_being_inserted_;
}

// repeated .TSP.UUID custom_format_keys = 12;
inline int CommandShowInsertSlideArchive::_internal_custom_format_keys_size() const {
  return custom_format_keys_.size();
}
inline int CommandShowInsertSlideArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* CommandShowInsertSlideArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.custom_format_keys)
  return custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandShowInsertSlideArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.custom_format_keys)
  return &custom_format_keys_;
}
inline const ::TSP::UUID& CommandShowInsertSlideArchive::_internal_custom_format_keys(int index) const {
  return custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& CommandShowInsertSlideArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* CommandShowInsertSlideArchive::_internal_add_custom_format_keys() {
  return custom_format_keys_.Add();
}
inline ::TSP::UUID* CommandShowInsertSlideArchive::add_custom_format_keys() {
  ::TSP::UUID* _add = _internal_add_custom_format_keys();
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.custom_format_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandShowInsertSlideArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.custom_format_keys)
  return custom_format_keys_;
}

// repeated bool collapsed_state_of_slide_nodes_being_inserted = 13;
inline int CommandShowInsertSlideArchive::_internal_collapsed_state_of_slide_nodes_being_inserted_size() const {
  return collapsed_state_of_slide_nodes_being_inserted_.size();
}
inline int CommandShowInsertSlideArchive::collapsed_state_of_slide_nodes_being_inserted_size() const {
  return _internal_collapsed_state_of_slide_nodes_being_inserted_size();
}
inline void CommandShowInsertSlideArchive::clear_collapsed_state_of_slide_nodes_being_inserted() {
  collapsed_state_of_slide_nodes_being_inserted_.Clear();
}
inline bool CommandShowInsertSlideArchive::_internal_collapsed_state_of_slide_nodes_being_inserted(int index) const {
  return collapsed_state_of_slide_nodes_being_inserted_.Get(index);
}
inline bool CommandShowInsertSlideArchive::collapsed_state_of_slide_nodes_being_inserted(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.collapsed_state_of_slide_nodes_being_inserted)
  return _internal_collapsed_state_of_slide_nodes_being_inserted(index);
}
inline void CommandShowInsertSlideArchive::set_collapsed_state_of_slide_nodes_being_inserted(int index, bool value) {
  collapsed_state_of_slide_nodes_being_inserted_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowInsertSlideArchive.collapsed_state_of_slide_nodes_being_inserted)
}
inline void CommandShowInsertSlideArchive::_internal_add_collapsed_state_of_slide_nodes_being_inserted(bool value) {
  collapsed_state_of_slide_nodes_being_inserted_.Add(value);
}
inline void CommandShowInsertSlideArchive::add_collapsed_state_of_slide_nodes_being_inserted(bool value) {
  _internal_add_collapsed_state_of_slide_nodes_being_inserted(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowInsertSlideArchive.collapsed_state_of_slide_nodes_being_inserted)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandShowInsertSlideArchive::_internal_collapsed_state_of_slide_nodes_being_inserted() const {
  return collapsed_state_of_slide_nodes_being_inserted_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandShowInsertSlideArchive::collapsed_state_of_slide_nodes_being_inserted() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowInsertSlideArchive.collapsed_state_of_slide_nodes_being_inserted)
  return _internal_collapsed_state_of_slide_nodes_being_inserted();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandShowInsertSlideArchive::_internal_mutable_collapsed_state_of_slide_nodes_being_inserted() {
  return &collapsed_state_of_slide_nodes_being_inserted_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandShowInsertSlideArchive::mutable_collapsed_state_of_slide_nodes_being_inserted() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowInsertSlideArchive.collapsed_state_of_slide_nodes_being_inserted)
  return _internal_mutable_collapsed_state_of_slide_nodes_being_inserted();
}

// optional .TSP.Reference undo_archive = 15;
inline bool CommandShowInsertSlideArchive::_internal_has_undo_archive() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || undo_archive_ != nullptr);
  return value;
}
inline bool CommandShowInsertSlideArchive::has_undo_archive() const {
  return _internal_has_undo_archive();
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::_internal_undo_archive() const {
  const ::TSP::Reference* p = undo_archive_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowInsertSlideArchive::undo_archive() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowInsertSlideArchive.undo_archive)
  return _internal_undo_archive();
}
inline void CommandShowInsertSlideArchive::unsafe_arena_set_allocated_undo_archive(
    ::TSP::Reference* undo_archive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_archive_);
  }
  undo_archive_ = undo_archive;
  if (undo_archive) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowInsertSlideArchive.undo_archive)
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::release_undo_archive() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = undo_archive_;
  undo_archive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::unsafe_arena_release_undo_archive() {
  // @@protoc_insertion_point(field_release:KN.CommandShowInsertSlideArchive.undo_archive)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = undo_archive_;
  undo_archive_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::_internal_mutable_undo_archive() {
  _has_bits_[0] |= 0x00000002u;
  if (undo_archive_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    undo_archive_ = p;
  }
  return undo_archive_;
}
inline ::TSP::Reference* CommandShowInsertSlideArchive::mutable_undo_archive() {
  ::TSP::Reference* _msg = _internal_mutable_undo_archive();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowInsertSlideArchive.undo_archive)
  return _msg;
}
inline void CommandShowInsertSlideArchive::set_allocated_undo_archive(::TSP::Reference* undo_archive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_archive_);
  }
  if (undo_archive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_archive));
    if (message_arena != submessage_arena) {
      undo_archive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_archive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  undo_archive_ = undo_archive;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowInsertSlideArchive.undo_archive)
}

// -------------------------------------------------------------------

// CommandShowMoveSlideArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowMoveSlideArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowMoveSlideArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowMoveSlideArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowMoveSlideArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.super)
  return _internal_super();
}
inline void CommandShowMoveSlideArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowMoveSlideArchive.super)
}
inline ::TSK::CommandArchive* CommandShowMoveSlideArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowMoveSlideArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowMoveSlideArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowMoveSlideArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowMoveSlideArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMoveSlideArchive.super)
  return _msg;
}
inline void CommandShowMoveSlideArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowMoveSlideArchive.super)
}

// repeated .TSP.Reference slide_nodes_being_moved_linearly = 2;
inline int CommandShowMoveSlideArchive::_internal_slide_nodes_being_moved_linearly_size() const {
  return slide_nodes_being_moved_linearly_.size();
}
inline int CommandShowMoveSlideArchive::slide_nodes_being_moved_linearly_size() const {
  return _internal_slide_nodes_being_moved_linearly_size();
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::mutable_slide_nodes_being_moved_linearly(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMoveSlideArchive.slide_nodes_being_moved_linearly)
  return slide_nodes_being_moved_linearly_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandShowMoveSlideArchive::mutable_slide_nodes_being_moved_linearly() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowMoveSlideArchive.slide_nodes_being_moved_linearly)
  return &slide_nodes_being_moved_linearly_;
}
inline const ::TSP::Reference& CommandShowMoveSlideArchive::_internal_slide_nodes_being_moved_linearly(int index) const {
  return slide_nodes_being_moved_linearly_.Get(index);
}
inline const ::TSP::Reference& CommandShowMoveSlideArchive::slide_nodes_being_moved_linearly(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.slide_nodes_being_moved_linearly)
  return _internal_slide_nodes_being_moved_linearly(index);
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::_internal_add_slide_nodes_being_moved_linearly() {
  return slide_nodes_being_moved_linearly_.Add();
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::add_slide_nodes_being_moved_linearly() {
  ::TSP::Reference* _add = _internal_add_slide_nodes_being_moved_linearly();
  // @@protoc_insertion_point(field_add:KN.CommandShowMoveSlideArchive.slide_nodes_being_moved_linearly)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandShowMoveSlideArchive::slide_nodes_being_moved_linearly() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowMoveSlideArchive.slide_nodes_being_moved_linearly)
  return slide_nodes_being_moved_linearly_;
}

// repeated .TSK.RearrangeIdOperationArgs rearranged_args_list = 3;
inline int CommandShowMoveSlideArchive::_internal_rearranged_args_list_size() const {
  return rearranged_args_list_.size();
}
inline int CommandShowMoveSlideArchive::rearranged_args_list_size() const {
  return _internal_rearranged_args_list_size();
}
inline ::TSK::RearrangeIdOperationArgs* CommandShowMoveSlideArchive::mutable_rearranged_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMoveSlideArchive.rearranged_args_list)
  return rearranged_args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
CommandShowMoveSlideArchive::mutable_rearranged_args_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowMoveSlideArchive.rearranged_args_list)
  return &rearranged_args_list_;
}
inline const ::TSK::RearrangeIdOperationArgs& CommandShowMoveSlideArchive::_internal_rearranged_args_list(int index) const {
  return rearranged_args_list_.Get(index);
}
inline const ::TSK::RearrangeIdOperationArgs& CommandShowMoveSlideArchive::rearranged_args_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.rearranged_args_list)
  return _internal_rearranged_args_list(index);
}
inline ::TSK::RearrangeIdOperationArgs* CommandShowMoveSlideArchive::_internal_add_rearranged_args_list() {
  return rearranged_args_list_.Add();
}
inline ::TSK::RearrangeIdOperationArgs* CommandShowMoveSlideArchive::add_rearranged_args_list() {
  ::TSK::RearrangeIdOperationArgs* _add = _internal_add_rearranged_args_list();
  // @@protoc_insertion_point(field_add:KN.CommandShowMoveSlideArchive.rearranged_args_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
CommandShowMoveSlideArchive::rearranged_args_list() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowMoveSlideArchive.rearranged_args_list)
  return rearranged_args_list_;
}

// repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
inline int CommandShowMoveSlideArchive::_internal_ids_of_slide_nodes_with_depth_changes_size() const {
  return ids_of_slide_nodes_with_depth_changes_.size();
}
inline int CommandShowMoveSlideArchive::ids_of_slide_nodes_with_depth_changes_size() const {
  return _internal_ids_of_slide_nodes_with_depth_changes_size();
}
inline ::TSP::UUID* CommandShowMoveSlideArchive::mutable_ids_of_slide_nodes_with_depth_changes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMoveSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return ids_of_slide_nodes_with_depth_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandShowMoveSlideArchive::mutable_ids_of_slide_nodes_with_depth_changes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowMoveSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return &ids_of_slide_nodes_with_depth_changes_;
}
inline const ::TSP::UUID& CommandShowMoveSlideArchive::_internal_ids_of_slide_nodes_with_depth_changes(int index) const {
  return ids_of_slide_nodes_with_depth_changes_.Get(index);
}
inline const ::TSP::UUID& CommandShowMoveSlideArchive::ids_of_slide_nodes_with_depth_changes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return _internal_ids_of_slide_nodes_with_depth_changes(index);
}
inline ::TSP::UUID* CommandShowMoveSlideArchive::_internal_add_ids_of_slide_nodes_with_depth_changes() {
  return ids_of_slide_nodes_with_depth_changes_.Add();
}
inline ::TSP::UUID* CommandShowMoveSlideArchive::add_ids_of_slide_nodes_with_depth_changes() {
  ::TSP::UUID* _add = _internal_add_ids_of_slide_nodes_with_depth_changes();
  // @@protoc_insertion_point(field_add:KN.CommandShowMoveSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandShowMoveSlideArchive::ids_of_slide_nodes_with_depth_changes() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowMoveSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return ids_of_slide_nodes_with_depth_changes_;
}

// repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
inline int CommandShowMoveSlideArchive::_internal_depths_of_slide_nodes_with_depth_changes_size() const {
  return depths_of_slide_nodes_with_depth_changes_.size();
}
inline int CommandShowMoveSlideArchive::depths_of_slide_nodes_with_depth_changes_size() const {
  return _internal_depths_of_slide_nodes_with_depth_changes_size();
}
inline void CommandShowMoveSlideArchive::clear_depths_of_slide_nodes_with_depth_changes() {
  depths_of_slide_nodes_with_depth_changes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowMoveSlideArchive::_internal_depths_of_slide_nodes_with_depth_changes(int index) const {
  return depths_of_slide_nodes_with_depth_changes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowMoveSlideArchive::depths_of_slide_nodes_with_depth_changes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.depths_of_slide_nodes_with_depth_changes)
  return _internal_depths_of_slide_nodes_with_depth_changes(index);
}
inline void CommandShowMoveSlideArchive::set_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_with_depth_changes_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowMoveSlideArchive.depths_of_slide_nodes_with_depth_changes)
}
inline void CommandShowMoveSlideArchive::_internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_with_depth_changes_.Add(value);
}
inline void CommandShowMoveSlideArchive::add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_depths_of_slide_nodes_with_depth_changes(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowMoveSlideArchive.depths_of_slide_nodes_with_depth_changes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowMoveSlideArchive::_internal_depths_of_slide_nodes_with_depth_changes() const {
  return depths_of_slide_nodes_with_depth_changes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowMoveSlideArchive::depths_of_slide_nodes_with_depth_changes() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowMoveSlideArchive.depths_of_slide_nodes_with_depth_changes)
  return _internal_depths_of_slide_nodes_with_depth_changes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowMoveSlideArchive::_internal_mutable_depths_of_slide_nodes_with_depth_changes() {
  return &depths_of_slide_nodes_with_depth_changes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowMoveSlideArchive::mutable_depths_of_slide_nodes_with_depth_changes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowMoveSlideArchive.depths_of_slide_nodes_with_depth_changes)
  return _internal_mutable_depths_of_slide_nodes_with_depth_changes();
}

// repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
inline int CommandShowMoveSlideArchive::_internal_old_depths_of_slide_nodes_with_depth_changes_size() const {
  return old_depths_of_slide_nodes_with_depth_changes_.size();
}
inline int CommandShowMoveSlideArchive::old_depths_of_slide_nodes_with_depth_changes_size() const {
  return _internal_old_depths_of_slide_nodes_with_depth_changes_size();
}
inline void CommandShowMoveSlideArchive::clear_old_depths_of_slide_nodes_with_depth_changes() {
  old_depths_of_slide_nodes_with_depth_changes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowMoveSlideArchive::_internal_old_depths_of_slide_nodes_with_depth_changes(int index) const {
  return old_depths_of_slide_nodes_with_depth_changes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowMoveSlideArchive::old_depths_of_slide_nodes_with_depth_changes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
  return _internal_old_depths_of_slide_nodes_with_depth_changes(index);
}
inline void CommandShowMoveSlideArchive::set_old_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_with_depth_changes_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowMoveSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
}
inline void CommandShowMoveSlideArchive::_internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_with_depth_changes_.Add(value);
}
inline void CommandShowMoveSlideArchive::add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_old_depths_of_slide_nodes_with_depth_changes(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowMoveSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowMoveSlideArchive::_internal_old_depths_of_slide_nodes_with_depth_changes() const {
  return old_depths_of_slide_nodes_with_depth_changes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowMoveSlideArchive::old_depths_of_slide_nodes_with_depth_changes() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowMoveSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
  return _internal_old_depths_of_slide_nodes_with_depth_changes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowMoveSlideArchive::_internal_mutable_old_depths_of_slide_nodes_with_depth_changes() {
  return &old_depths_of_slide_nodes_with_depth_changes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowMoveSlideArchive::mutable_old_depths_of_slide_nodes_with_depth_changes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowMoveSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
  return _internal_mutable_old_depths_of_slide_nodes_with_depth_changes();
}

// repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
inline int CommandShowMoveSlideArchive::_internal_slide_nodes_for_depth_fix_up_size() const {
  return slide_nodes_for_depth_fix_up_.size();
}
inline int CommandShowMoveSlideArchive::slide_nodes_for_depth_fix_up_size() const {
  return _internal_slide_nodes_for_depth_fix_up_size();
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::mutable_slide_nodes_for_depth_fix_up(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowMoveSlideArchive.slide_nodes_for_depth_fix_up)
  return slide_nodes_for_depth_fix_up_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandShowMoveSlideArchive::mutable_slide_nodes_for_depth_fix_up() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowMoveSlideArchive.slide_nodes_for_depth_fix_up)
  return &slide_nodes_for_depth_fix_up_;
}
inline const ::TSP::Reference& CommandShowMoveSlideArchive::_internal_slide_nodes_for_depth_fix_up(int index) const {
  return slide_nodes_for_depth_fix_up_.Get(index);
}
inline const ::TSP::Reference& CommandShowMoveSlideArchive::slide_nodes_for_depth_fix_up(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.slide_nodes_for_depth_fix_up)
  return _internal_slide_nodes_for_depth_fix_up(index);
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::_internal_add_slide_nodes_for_depth_fix_up() {
  return slide_nodes_for_depth_fix_up_.Add();
}
inline ::TSP::Reference* CommandShowMoveSlideArchive::add_slide_nodes_for_depth_fix_up() {
  ::TSP::Reference* _add = _internal_add_slide_nodes_for_depth_fix_up();
  // @@protoc_insertion_point(field_add:KN.CommandShowMoveSlideArchive.slide_nodes_for_depth_fix_up)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandShowMoveSlideArchive::slide_nodes_for_depth_fix_up() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowMoveSlideArchive.slide_nodes_for_depth_fix_up)
  return slide_nodes_for_depth_fix_up_;
}

// repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
inline int CommandShowMoveSlideArchive::_internal_depths_of_slide_nodes_for_depth_fix_up_size() const {
  return depths_of_slide_nodes_for_depth_fix_up_.size();
}
inline int CommandShowMoveSlideArchive::depths_of_slide_nodes_for_depth_fix_up_size() const {
  return _internal_depths_of_slide_nodes_for_depth_fix_up_size();
}
inline void CommandShowMoveSlideArchive::clear_depths_of_slide_nodes_for_depth_fix_up() {
  depths_of_slide_nodes_for_depth_fix_up_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowMoveSlideArchive::_internal_depths_of_slide_nodes_for_depth_fix_up(int index) const {
  return depths_of_slide_nodes_for_depth_fix_up_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowMoveSlideArchive::depths_of_slide_nodes_for_depth_fix_up(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
  return _internal_depths_of_slide_nodes_for_depth_fix_up(index);
}
inline void CommandShowMoveSlideArchive::set_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_for_depth_fix_up_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowMoveSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
}
inline void CommandShowMoveSlideArchive::_internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_for_depth_fix_up_.Add(value);
}
inline void CommandShowMoveSlideArchive::add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_depths_of_slide_nodes_for_depth_fix_up(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowMoveSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowMoveSlideArchive::_internal_depths_of_slide_nodes_for_depth_fix_up() const {
  return depths_of_slide_nodes_for_depth_fix_up_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowMoveSlideArchive::depths_of_slide_nodes_for_depth_fix_up() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowMoveSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
  return _internal_depths_of_slide_nodes_for_depth_fix_up();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowMoveSlideArchive::_internal_mutable_depths_of_slide_nodes_for_depth_fix_up() {
  return &depths_of_slide_nodes_for_depth_fix_up_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowMoveSlideArchive::mutable_depths_of_slide_nodes_for_depth_fix_up() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowMoveSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
  return _internal_mutable_depths_of_slide_nodes_for_depth_fix_up();
}

// repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
inline int CommandShowMoveSlideArchive::_internal_old_depths_of_slide_nodes_for_depth_fix_up_size() const {
  return old_depths_of_slide_nodes_for_depth_fix_up_.size();
}
inline int CommandShowMoveSlideArchive::old_depths_of_slide_nodes_for_depth_fix_up_size() const {
  return _internal_old_depths_of_slide_nodes_for_depth_fix_up_size();
}
inline void CommandShowMoveSlideArchive::clear_old_depths_of_slide_nodes_for_depth_fix_up() {
  old_depths_of_slide_nodes_for_depth_fix_up_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowMoveSlideArchive::_internal_old_depths_of_slide_nodes_for_depth_fix_up(int index) const {
  return old_depths_of_slide_nodes_for_depth_fix_up_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowMoveSlideArchive::old_depths_of_slide_nodes_for_depth_fix_up(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowMoveSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
  return _internal_old_depths_of_slide_nodes_for_depth_fix_up(index);
}
inline void CommandShowMoveSlideArchive::set_old_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_for_depth_fix_up_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowMoveSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
}
inline void CommandShowMoveSlideArchive::_internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_for_depth_fix_up_.Add(value);
}
inline void CommandShowMoveSlideArchive::add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowMoveSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowMoveSlideArchive::_internal_old_depths_of_slide_nodes_for_depth_fix_up() const {
  return old_depths_of_slide_nodes_for_depth_fix_up_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowMoveSlideArchive::old_depths_of_slide_nodes_for_depth_fix_up() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowMoveSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
  return _internal_old_depths_of_slide_nodes_for_depth_fix_up();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowMoveSlideArchive::_internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up() {
  return &old_depths_of_slide_nodes_for_depth_fix_up_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowMoveSlideArchive::mutable_old_depths_of_slide_nodes_for_depth_fix_up() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowMoveSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
  return _internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up();
}

// -------------------------------------------------------------------

// CommandShowRemoveSlideArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowRemoveSlideArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowRemoveSlideArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowRemoveSlideArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowRemoveSlideArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.super)
  return _internal_super();
}
inline void CommandShowRemoveSlideArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowRemoveSlideArchive.super)
}
inline ::TSK::CommandArchive* CommandShowRemoveSlideArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowRemoveSlideArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowRemoveSlideArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowRemoveSlideArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowRemoveSlideArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveSlideArchive.super)
  return _msg;
}
inline void CommandShowRemoveSlideArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowRemoveSlideArchive.super)
}

// repeated .TSP.Reference slide_nodes_being_removed = 2;
inline int CommandShowRemoveSlideArchive::_internal_slide_nodes_being_removed_size() const {
  return slide_nodes_being_removed_.size();
}
inline int CommandShowRemoveSlideArchive::slide_nodes_being_removed_size() const {
  return _internal_slide_nodes_being_removed_size();
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::mutable_slide_nodes_being_removed(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveSlideArchive.slide_nodes_being_removed)
  return slide_nodes_being_removed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandShowRemoveSlideArchive::mutable_slide_nodes_being_removed() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowRemoveSlideArchive.slide_nodes_being_removed)
  return &slide_nodes_being_removed_;
}
inline const ::TSP::Reference& CommandShowRemoveSlideArchive::_internal_slide_nodes_being_removed(int index) const {
  return slide_nodes_being_removed_.Get(index);
}
inline const ::TSP::Reference& CommandShowRemoveSlideArchive::slide_nodes_being_removed(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.slide_nodes_being_removed)
  return _internal_slide_nodes_being_removed(index);
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::_internal_add_slide_nodes_being_removed() {
  return slide_nodes_being_removed_.Add();
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::add_slide_nodes_being_removed() {
  ::TSP::Reference* _add = _internal_add_slide_nodes_being_removed();
  // @@protoc_insertion_point(field_add:KN.CommandShowRemoveSlideArchive.slide_nodes_being_removed)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandShowRemoveSlideArchive::slide_nodes_being_removed() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowRemoveSlideArchive.slide_nodes_being_removed)
  return slide_nodes_being_removed_;
}

// repeated .TSK.RemoveIdOperationArgs removed_args_list = 3;
inline int CommandShowRemoveSlideArchive::_internal_removed_args_list_size() const {
  return removed_args_list_.size();
}
inline int CommandShowRemoveSlideArchive::removed_args_list_size() const {
  return _internal_removed_args_list_size();
}
inline ::TSK::RemoveIdOperationArgs* CommandShowRemoveSlideArchive::mutable_removed_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveSlideArchive.removed_args_list)
  return removed_args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
CommandShowRemoveSlideArchive::mutable_removed_args_list() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowRemoveSlideArchive.removed_args_list)
  return &removed_args_list_;
}
inline const ::TSK::RemoveIdOperationArgs& CommandShowRemoveSlideArchive::_internal_removed_args_list(int index) const {
  return removed_args_list_.Get(index);
}
inline const ::TSK::RemoveIdOperationArgs& CommandShowRemoveSlideArchive::removed_args_list(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.removed_args_list)
  return _internal_removed_args_list(index);
}
inline ::TSK::RemoveIdOperationArgs* CommandShowRemoveSlideArchive::_internal_add_removed_args_list() {
  return removed_args_list_.Add();
}
inline ::TSK::RemoveIdOperationArgs* CommandShowRemoveSlideArchive::add_removed_args_list() {
  ::TSK::RemoveIdOperationArgs* _add = _internal_add_removed_args_list();
  // @@protoc_insertion_point(field_add:KN.CommandShowRemoveSlideArchive.removed_args_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
CommandShowRemoveSlideArchive::removed_args_list() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowRemoveSlideArchive.removed_args_list)
  return removed_args_list_;
}

// repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
inline int CommandShowRemoveSlideArchive::_internal_ids_of_slide_nodes_with_depth_changes_size() const {
  return ids_of_slide_nodes_with_depth_changes_.size();
}
inline int CommandShowRemoveSlideArchive::ids_of_slide_nodes_with_depth_changes_size() const {
  return _internal_ids_of_slide_nodes_with_depth_changes_size();
}
inline ::TSP::UUID* CommandShowRemoveSlideArchive::mutable_ids_of_slide_nodes_with_depth_changes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return ids_of_slide_nodes_with_depth_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandShowRemoveSlideArchive::mutable_ids_of_slide_nodes_with_depth_changes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowRemoveSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return &ids_of_slide_nodes_with_depth_changes_;
}
inline const ::TSP::UUID& CommandShowRemoveSlideArchive::_internal_ids_of_slide_nodes_with_depth_changes(int index) const {
  return ids_of_slide_nodes_with_depth_changes_.Get(index);
}
inline const ::TSP::UUID& CommandShowRemoveSlideArchive::ids_of_slide_nodes_with_depth_changes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return _internal_ids_of_slide_nodes_with_depth_changes(index);
}
inline ::TSP::UUID* CommandShowRemoveSlideArchive::_internal_add_ids_of_slide_nodes_with_depth_changes() {
  return ids_of_slide_nodes_with_depth_changes_.Add();
}
inline ::TSP::UUID* CommandShowRemoveSlideArchive::add_ids_of_slide_nodes_with_depth_changes() {
  ::TSP::UUID* _add = _internal_add_ids_of_slide_nodes_with_depth_changes();
  // @@protoc_insertion_point(field_add:KN.CommandShowRemoveSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandShowRemoveSlideArchive::ids_of_slide_nodes_with_depth_changes() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowRemoveSlideArchive.ids_of_slide_nodes_with_depth_changes)
  return ids_of_slide_nodes_with_depth_changes_;
}

// repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
inline int CommandShowRemoveSlideArchive::_internal_depths_of_slide_nodes_with_depth_changes_size() const {
  return depths_of_slide_nodes_with_depth_changes_.size();
}
inline int CommandShowRemoveSlideArchive::depths_of_slide_nodes_with_depth_changes_size() const {
  return _internal_depths_of_slide_nodes_with_depth_changes_size();
}
inline void CommandShowRemoveSlideArchive::clear_depths_of_slide_nodes_with_depth_changes() {
  depths_of_slide_nodes_with_depth_changes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowRemoveSlideArchive::_internal_depths_of_slide_nodes_with_depth_changes(int index) const {
  return depths_of_slide_nodes_with_depth_changes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowRemoveSlideArchive::depths_of_slide_nodes_with_depth_changes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.depths_of_slide_nodes_with_depth_changes)
  return _internal_depths_of_slide_nodes_with_depth_changes(index);
}
inline void CommandShowRemoveSlideArchive::set_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_with_depth_changes_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowRemoveSlideArchive.depths_of_slide_nodes_with_depth_changes)
}
inline void CommandShowRemoveSlideArchive::_internal_add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_with_depth_changes_.Add(value);
}
inline void CommandShowRemoveSlideArchive::add_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_depths_of_slide_nodes_with_depth_changes(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowRemoveSlideArchive.depths_of_slide_nodes_with_depth_changes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowRemoveSlideArchive::_internal_depths_of_slide_nodes_with_depth_changes() const {
  return depths_of_slide_nodes_with_depth_changes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowRemoveSlideArchive::depths_of_slide_nodes_with_depth_changes() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowRemoveSlideArchive.depths_of_slide_nodes_with_depth_changes)
  return _internal_depths_of_slide_nodes_with_depth_changes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowRemoveSlideArchive::_internal_mutable_depths_of_slide_nodes_with_depth_changes() {
  return &depths_of_slide_nodes_with_depth_changes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowRemoveSlideArchive::mutable_depths_of_slide_nodes_with_depth_changes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowRemoveSlideArchive.depths_of_slide_nodes_with_depth_changes)
  return _internal_mutable_depths_of_slide_nodes_with_depth_changes();
}

// repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
inline int CommandShowRemoveSlideArchive::_internal_old_depths_of_slide_nodes_with_depth_changes_size() const {
  return old_depths_of_slide_nodes_with_depth_changes_.size();
}
inline int CommandShowRemoveSlideArchive::old_depths_of_slide_nodes_with_depth_changes_size() const {
  return _internal_old_depths_of_slide_nodes_with_depth_changes_size();
}
inline void CommandShowRemoveSlideArchive::clear_old_depths_of_slide_nodes_with_depth_changes() {
  old_depths_of_slide_nodes_with_depth_changes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowRemoveSlideArchive::_internal_old_depths_of_slide_nodes_with_depth_changes(int index) const {
  return old_depths_of_slide_nodes_with_depth_changes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowRemoveSlideArchive::old_depths_of_slide_nodes_with_depth_changes(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
  return _internal_old_depths_of_slide_nodes_with_depth_changes(index);
}
inline void CommandShowRemoveSlideArchive::set_old_depths_of_slide_nodes_with_depth_changes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_with_depth_changes_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowRemoveSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
}
inline void CommandShowRemoveSlideArchive::_internal_add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_with_depth_changes_.Add(value);
}
inline void CommandShowRemoveSlideArchive::add_old_depths_of_slide_nodes_with_depth_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_old_depths_of_slide_nodes_with_depth_changes(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowRemoveSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowRemoveSlideArchive::_internal_old_depths_of_slide_nodes_with_depth_changes() const {
  return old_depths_of_slide_nodes_with_depth_changes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowRemoveSlideArchive::old_depths_of_slide_nodes_with_depth_changes() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowRemoveSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
  return _internal_old_depths_of_slide_nodes_with_depth_changes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowRemoveSlideArchive::_internal_mutable_old_depths_of_slide_nodes_with_depth_changes() {
  return &old_depths_of_slide_nodes_with_depth_changes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowRemoveSlideArchive::mutable_old_depths_of_slide_nodes_with_depth_changes() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowRemoveSlideArchive.old_depths_of_slide_nodes_with_depth_changes)
  return _internal_mutable_old_depths_of_slide_nodes_with_depth_changes();
}

// repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
inline int CommandShowRemoveSlideArchive::_internal_slide_nodes_for_depth_fix_up_size() const {
  return slide_nodes_for_depth_fix_up_.size();
}
inline int CommandShowRemoveSlideArchive::slide_nodes_for_depth_fix_up_size() const {
  return _internal_slide_nodes_for_depth_fix_up_size();
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::mutable_slide_nodes_for_depth_fix_up(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowRemoveSlideArchive.slide_nodes_for_depth_fix_up)
  return slide_nodes_for_depth_fix_up_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandShowRemoveSlideArchive::mutable_slide_nodes_for_depth_fix_up() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowRemoveSlideArchive.slide_nodes_for_depth_fix_up)
  return &slide_nodes_for_depth_fix_up_;
}
inline const ::TSP::Reference& CommandShowRemoveSlideArchive::_internal_slide_nodes_for_depth_fix_up(int index) const {
  return slide_nodes_for_depth_fix_up_.Get(index);
}
inline const ::TSP::Reference& CommandShowRemoveSlideArchive::slide_nodes_for_depth_fix_up(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.slide_nodes_for_depth_fix_up)
  return _internal_slide_nodes_for_depth_fix_up(index);
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::_internal_add_slide_nodes_for_depth_fix_up() {
  return slide_nodes_for_depth_fix_up_.Add();
}
inline ::TSP::Reference* CommandShowRemoveSlideArchive::add_slide_nodes_for_depth_fix_up() {
  ::TSP::Reference* _add = _internal_add_slide_nodes_for_depth_fix_up();
  // @@protoc_insertion_point(field_add:KN.CommandShowRemoveSlideArchive.slide_nodes_for_depth_fix_up)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandShowRemoveSlideArchive::slide_nodes_for_depth_fix_up() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowRemoveSlideArchive.slide_nodes_for_depth_fix_up)
  return slide_nodes_for_depth_fix_up_;
}

// repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
inline int CommandShowRemoveSlideArchive::_internal_depths_of_slide_nodes_for_depth_fix_up_size() const {
  return depths_of_slide_nodes_for_depth_fix_up_.size();
}
inline int CommandShowRemoveSlideArchive::depths_of_slide_nodes_for_depth_fix_up_size() const {
  return _internal_depths_of_slide_nodes_for_depth_fix_up_size();
}
inline void CommandShowRemoveSlideArchive::clear_depths_of_slide_nodes_for_depth_fix_up() {
  depths_of_slide_nodes_for_depth_fix_up_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowRemoveSlideArchive::_internal_depths_of_slide_nodes_for_depth_fix_up(int index) const {
  return depths_of_slide_nodes_for_depth_fix_up_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowRemoveSlideArchive::depths_of_slide_nodes_for_depth_fix_up(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
  return _internal_depths_of_slide_nodes_for_depth_fix_up(index);
}
inline void CommandShowRemoveSlideArchive::set_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_for_depth_fix_up_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowRemoveSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
}
inline void CommandShowRemoveSlideArchive::_internal_add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  depths_of_slide_nodes_for_depth_fix_up_.Add(value);
}
inline void CommandShowRemoveSlideArchive::add_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_depths_of_slide_nodes_for_depth_fix_up(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowRemoveSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowRemoveSlideArchive::_internal_depths_of_slide_nodes_for_depth_fix_up() const {
  return depths_of_slide_nodes_for_depth_fix_up_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowRemoveSlideArchive::depths_of_slide_nodes_for_depth_fix_up() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowRemoveSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
  return _internal_depths_of_slide_nodes_for_depth_fix_up();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowRemoveSlideArchive::_internal_mutable_depths_of_slide_nodes_for_depth_fix_up() {
  return &depths_of_slide_nodes_for_depth_fix_up_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowRemoveSlideArchive::mutable_depths_of_slide_nodes_for_depth_fix_up() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowRemoveSlideArchive.depths_of_slide_nodes_for_depth_fix_up)
  return _internal_mutable_depths_of_slide_nodes_for_depth_fix_up();
}

// repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
inline int CommandShowRemoveSlideArchive::_internal_old_depths_of_slide_nodes_for_depth_fix_up_size() const {
  return old_depths_of_slide_nodes_for_depth_fix_up_.size();
}
inline int CommandShowRemoveSlideArchive::old_depths_of_slide_nodes_for_depth_fix_up_size() const {
  return _internal_old_depths_of_slide_nodes_for_depth_fix_up_size();
}
inline void CommandShowRemoveSlideArchive::clear_old_depths_of_slide_nodes_for_depth_fix_up() {
  old_depths_of_slide_nodes_for_depth_fix_up_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowRemoveSlideArchive::_internal_old_depths_of_slide_nodes_for_depth_fix_up(int index) const {
  return old_depths_of_slide_nodes_for_depth_fix_up_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandShowRemoveSlideArchive::old_depths_of_slide_nodes_for_depth_fix_up(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
  return _internal_old_depths_of_slide_nodes_for_depth_fix_up(index);
}
inline void CommandShowRemoveSlideArchive::set_old_depths_of_slide_nodes_for_depth_fix_up(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_for_depth_fix_up_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowRemoveSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
}
inline void CommandShowRemoveSlideArchive::_internal_add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_depths_of_slide_nodes_for_depth_fix_up_.Add(value);
}
inline void CommandShowRemoveSlideArchive::add_old_depths_of_slide_nodes_for_depth_fix_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_old_depths_of_slide_nodes_for_depth_fix_up(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowRemoveSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowRemoveSlideArchive::_internal_old_depths_of_slide_nodes_for_depth_fix_up() const {
  return old_depths_of_slide_nodes_for_depth_fix_up_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandShowRemoveSlideArchive::old_depths_of_slide_nodes_for_depth_fix_up() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowRemoveSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
  return _internal_old_depths_of_slide_nodes_for_depth_fix_up();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowRemoveSlideArchive::_internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up() {
  return &old_depths_of_slide_nodes_for_depth_fix_up_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandShowRemoveSlideArchive::mutable_old_depths_of_slide_nodes_for_depth_fix_up() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowRemoveSlideArchive.old_depths_of_slide_nodes_for_depth_fix_up)
  return _internal_mutable_old_depths_of_slide_nodes_for_depth_fix_up();
}

// repeated bool collapsed_state_of_slide_nodes_being_removed = 11;
inline int CommandShowRemoveSlideArchive::_internal_collapsed_state_of_slide_nodes_being_removed_size() const {
  return collapsed_state_of_slide_nodes_being_removed_.size();
}
inline int CommandShowRemoveSlideArchive::collapsed_state_of_slide_nodes_being_removed_size() const {
  return _internal_collapsed_state_of_slide_nodes_being_removed_size();
}
inline void CommandShowRemoveSlideArchive::clear_collapsed_state_of_slide_nodes_being_removed() {
  collapsed_state_of_slide_nodes_being_removed_.Clear();
}
inline bool CommandShowRemoveSlideArchive::_internal_collapsed_state_of_slide_nodes_being_removed(int index) const {
  return collapsed_state_of_slide_nodes_being_removed_.Get(index);
}
inline bool CommandShowRemoveSlideArchive::collapsed_state_of_slide_nodes_being_removed(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowRemoveSlideArchive.collapsed_state_of_slide_nodes_being_removed)
  return _internal_collapsed_state_of_slide_nodes_being_removed(index);
}
inline void CommandShowRemoveSlideArchive::set_collapsed_state_of_slide_nodes_being_removed(int index, bool value) {
  collapsed_state_of_slide_nodes_being_removed_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandShowRemoveSlideArchive.collapsed_state_of_slide_nodes_being_removed)
}
inline void CommandShowRemoveSlideArchive::_internal_add_collapsed_state_of_slide_nodes_being_removed(bool value) {
  collapsed_state_of_slide_nodes_being_removed_.Add(value);
}
inline void CommandShowRemoveSlideArchive::add_collapsed_state_of_slide_nodes_being_removed(bool value) {
  _internal_add_collapsed_state_of_slide_nodes_being_removed(value);
  // @@protoc_insertion_point(field_add:KN.CommandShowRemoveSlideArchive.collapsed_state_of_slide_nodes_being_removed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandShowRemoveSlideArchive::_internal_collapsed_state_of_slide_nodes_being_removed() const {
  return collapsed_state_of_slide_nodes_being_removed_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CommandShowRemoveSlideArchive::collapsed_state_of_slide_nodes_being_removed() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowRemoveSlideArchive.collapsed_state_of_slide_nodes_being_removed)
  return _internal_collapsed_state_of_slide_nodes_being_removed();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandShowRemoveSlideArchive::_internal_mutable_collapsed_state_of_slide_nodes_being_removed() {
  return &collapsed_state_of_slide_nodes_being_removed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CommandShowRemoveSlideArchive::mutable_collapsed_state_of_slide_nodes_being_removed() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowRemoveSlideArchive.collapsed_state_of_slide_nodes_being_removed)
  return _internal_mutable_collapsed_state_of_slide_nodes_being_removed();
}

// -------------------------------------------------------------------

// CommandShowChangeThemeArchive_IdentifierToStyleMap

// repeated .TSS.StylesheetArchive.IdentifiedStyleEntry styles = 1;
inline int CommandShowChangeThemeArchive_IdentifierToStyleMap::_internal_styles_size() const {
  return styles_.size();
}
inline int CommandShowChangeThemeArchive_IdentifierToStyleMap::styles_size() const {
  return _internal_styles_size();
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* CommandShowChangeThemeArchive_IdentifierToStyleMap::mutable_styles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap.styles)
  return styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
CommandShowChangeThemeArchive_IdentifierToStyleMap::mutable_styles() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap.styles)
  return &styles_;
}
inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& CommandShowChangeThemeArchive_IdentifierToStyleMap::_internal_styles(int index) const {
  return styles_.Get(index);
}
inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& CommandShowChangeThemeArchive_IdentifierToStyleMap::styles(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap.styles)
  return _internal_styles(index);
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* CommandShowChangeThemeArchive_IdentifierToStyleMap::_internal_add_styles() {
  return styles_.Add();
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* CommandShowChangeThemeArchive_IdentifierToStyleMap::add_styles() {
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* _add = _internal_add_styles();
  // @@protoc_insertion_point(field_add:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap.styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
CommandShowChangeThemeArchive_IdentifierToStyleMap::styles() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowChangeThemeArchive.IdentifierToStyleMap.styles)
  return styles_;
}

// -------------------------------------------------------------------

// CommandShowChangeThemeArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowChangeThemeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowChangeThemeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowChangeThemeArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowChangeThemeArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.super)
  return _internal_super();
}
inline void CommandShowChangeThemeArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeThemeArchive.super)
}
inline ::TSK::CommandArchive* CommandShowChangeThemeArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowChangeThemeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowChangeThemeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowChangeThemeArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.super)
  return _msg;
}
inline void CommandShowChangeThemeArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.super)
}

// required .TSP.Reference show = 2;
inline bool CommandShowChangeThemeArchive::_internal_has_show() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || show_ != nullptr);
  return value;
}
inline bool CommandShowChangeThemeArchive::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::_internal_show() const {
  const ::TSP::Reference* p = show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.show)
  return _internal_show();
}
inline void CommandShowChangeThemeArchive::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeThemeArchive.show)
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::release_show() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.show)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::_internal_mutable_show() {
  _has_bits_[0] |= 0x00000008u;
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    show_ = p;
  }
  return show_;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.show)
  return _msg;
}
inline void CommandShowChangeThemeArchive::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.show)
}

// required .TSP.Reference theme = 3;
inline bool CommandShowChangeThemeArchive::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool CommandShowChangeThemeArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::_internal_theme() const {
  const ::TSP::Reference* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::theme() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.theme)
  return _internal_theme();
}
inline void CommandShowChangeThemeArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeThemeArchive.theme)
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::release_theme() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.theme)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000010u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    theme_ = p;
  }
  return theme_;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.theme)
  return _msg;
}
inline void CommandShowChangeThemeArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.theme)
}

// optional .TSP.Reference old_theme = 4;
inline bool CommandShowChangeThemeArchive::_internal_has_old_theme() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || old_theme_ != nullptr);
  return value;
}
inline bool CommandShowChangeThemeArchive::has_old_theme() const {
  return _internal_has_old_theme();
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::_internal_old_theme() const {
  const ::TSP::Reference* p = old_theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowChangeThemeArchive::old_theme() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.old_theme)
  return _internal_old_theme();
}
inline void CommandShowChangeThemeArchive::unsafe_arena_set_allocated_old_theme(
    ::TSP::Reference* old_theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_theme_);
  }
  old_theme_ = old_theme;
  if (old_theme) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeThemeArchive.old_theme)
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::release_old_theme() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = old_theme_;
  old_theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::unsafe_arena_release_old_theme() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.old_theme)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = old_theme_;
  old_theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::_internal_mutable_old_theme() {
  _has_bits_[0] |= 0x00000020u;
  if (old_theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_theme_ = p;
  }
  return old_theme_;
}
inline ::TSP::Reference* CommandShowChangeThemeArchive::mutable_old_theme() {
  ::TSP::Reference* _msg = _internal_mutable_old_theme();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.old_theme)
  return _msg;
}
inline void CommandShowChangeThemeArchive::set_allocated_old_theme(::TSP::Reference* old_theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_theme_);
  }
  if (old_theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_theme));
    if (message_arena != submessage_arena) {
      old_theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  old_theme_ = old_theme;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.old_theme)
}

// optional string template_identifier = 5;
inline bool CommandShowChangeThemeArchive::_internal_has_template_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandShowChangeThemeArchive::has_template_identifier() const {
  return _internal_has_template_identifier();
}
inline void CommandShowChangeThemeArchive::clear_template_identifier() {
  template_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandShowChangeThemeArchive::template_identifier() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.template_identifier)
  return _internal_template_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandShowChangeThemeArchive::set_template_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 template_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandShowChangeThemeArchive.template_identifier)
}
inline std::string* CommandShowChangeThemeArchive::mutable_template_identifier() {
  std::string* _s = _internal_mutable_template_identifier();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.template_identifier)
  return _s;
}
inline const std::string& CommandShowChangeThemeArchive::_internal_template_identifier() const {
  return template_identifier_.Get();
}
inline void CommandShowChangeThemeArchive::_internal_set_template_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  template_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandShowChangeThemeArchive::_internal_mutable_template_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return template_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandShowChangeThemeArchive::release_template_identifier() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.template_identifier)
  if (!_internal_has_template_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return template_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandShowChangeThemeArchive::set_allocated_template_identifier(std::string* template_identifier) {
  if (template_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  template_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.template_identifier)
}

// optional string old_template_identifier = 6;
inline bool CommandShowChangeThemeArchive::_internal_has_old_template_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandShowChangeThemeArchive::has_old_template_identifier() const {
  return _internal_has_old_template_identifier();
}
inline void CommandShowChangeThemeArchive::clear_old_template_identifier() {
  old_template_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandShowChangeThemeArchive::old_template_identifier() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.old_template_identifier)
  return _internal_old_template_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandShowChangeThemeArchive::set_old_template_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 old_template_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandShowChangeThemeArchive.old_template_identifier)
}
inline std::string* CommandShowChangeThemeArchive::mutable_old_template_identifier() {
  std::string* _s = _internal_mutable_old_template_identifier();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.old_template_identifier)
  return _s;
}
inline const std::string& CommandShowChangeThemeArchive::_internal_old_template_identifier() const {
  return old_template_identifier_.Get();
}
inline void CommandShowChangeThemeArchive::_internal_set_old_template_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  old_template_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandShowChangeThemeArchive::_internal_mutable_old_template_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return old_template_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandShowChangeThemeArchive::release_old_template_identifier() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.old_template_identifier)
  if (!_internal_has_old_template_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return old_template_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandShowChangeThemeArchive::set_allocated_old_template_identifier(std::string* old_template_identifier) {
  if (old_template_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_template_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_template_identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.old_template_identifier)
}

// optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap identifier_to_style_map = 7;
inline bool CommandShowChangeThemeArchive::_internal_has_identifier_to_style_map() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || identifier_to_style_map_ != nullptr);
  return value;
}
inline bool CommandShowChangeThemeArchive::has_identifier_to_style_map() const {
  return _internal_has_identifier_to_style_map();
}
inline void CommandShowChangeThemeArchive::clear_identifier_to_style_map() {
  if (identifier_to_style_map_ != nullptr) identifier_to_style_map_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& CommandShowChangeThemeArchive::_internal_identifier_to_style_map() const {
  const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* p = identifier_to_style_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap&>(
      ::KN::_CommandShowChangeThemeArchive_IdentifierToStyleMap_default_instance_);
}
inline const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& CommandShowChangeThemeArchive::identifier_to_style_map() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.identifier_to_style_map)
  return _internal_identifier_to_style_map();
}
inline void CommandShowChangeThemeArchive::unsafe_arena_set_allocated_identifier_to_style_map(
    ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* identifier_to_style_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_to_style_map_);
  }
  identifier_to_style_map_ = identifier_to_style_map;
  if (identifier_to_style_map) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeThemeArchive.identifier_to_style_map)
}
inline ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* CommandShowChangeThemeArchive::release_identifier_to_style_map() {
  _has_bits_[0] &= ~0x00000040u;
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* temp = identifier_to_style_map_;
  identifier_to_style_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* CommandShowChangeThemeArchive::unsafe_arena_release_identifier_to_style_map() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.identifier_to_style_map)
  _has_bits_[0] &= ~0x00000040u;
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* temp = identifier_to_style_map_;
  identifier_to_style_map_ = nullptr;
  return temp;
}
inline ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* CommandShowChangeThemeArchive::_internal_mutable_identifier_to_style_map() {
  _has_bits_[0] |= 0x00000040u;
  if (identifier_to_style_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap>(GetArenaForAllocation());
    identifier_to_style_map_ = p;
  }
  return identifier_to_style_map_;
}
inline ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* CommandShowChangeThemeArchive::mutable_identifier_to_style_map() {
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* _msg = _internal_mutable_identifier_to_style_map();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.identifier_to_style_map)
  return _msg;
}
inline void CommandShowChangeThemeArchive::set_allocated_identifier_to_style_map(::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* identifier_to_style_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete identifier_to_style_map_;
  }
  if (identifier_to_style_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap>::GetOwningArena(identifier_to_style_map);
    if (message_arena != submessage_arena) {
      identifier_to_style_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier_to_style_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  identifier_to_style_map_ = identifier_to_style_map;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.identifier_to_style_map)
}

// optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap old_identifier_to_style_map = 8;
inline bool CommandShowChangeThemeArchive::_internal_has_old_identifier_to_style_map() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || old_identifier_to_style_map_ != nullptr);
  return value;
}
inline bool CommandShowChangeThemeArchive::has_old_identifier_to_style_map() const {
  return _internal_has_old_identifier_to_style_map();
}
inline void CommandShowChangeThemeArchive::clear_old_identifier_to_style_map() {
  if (old_identifier_to_style_map_ != nullptr) old_identifier_to_style_map_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& CommandShowChangeThemeArchive::_internal_old_identifier_to_style_map() const {
  const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* p = old_identifier_to_style_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap&>(
      ::KN::_CommandShowChangeThemeArchive_IdentifierToStyleMap_default_instance_);
}
inline const ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap& CommandShowChangeThemeArchive::old_identifier_to_style_map() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeThemeArchive.old_identifier_to_style_map)
  return _internal_old_identifier_to_style_map();
}
inline void CommandShowChangeThemeArchive::unsafe_arena_set_allocated_old_identifier_to_style_map(
    ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* old_identifier_to_style_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_identifier_to_style_map_);
  }
  old_identifier_to_style_map_ = old_identifier_to_style_map;
  if (old_identifier_to_style_map) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeThemeArchive.old_identifier_to_style_map)
}
inline ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* CommandShowChangeThemeArchive::release_old_identifier_to_style_map() {
  _has_bits_[0] &= ~0x00000080u;
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* temp = old_identifier_to_style_map_;
  old_identifier_to_style_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* CommandShowChangeThemeArchive::unsafe_arena_release_old_identifier_to_style_map() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeThemeArchive.old_identifier_to_style_map)
  _has_bits_[0] &= ~0x00000080u;
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* temp = old_identifier_to_style_map_;
  old_identifier_to_style_map_ = nullptr;
  return temp;
}
inline ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* CommandShowChangeThemeArchive::_internal_mutable_old_identifier_to_style_map() {
  _has_bits_[0] |= 0x00000080u;
  if (old_identifier_to_style_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap>(GetArenaForAllocation());
    old_identifier_to_style_map_ = p;
  }
  return old_identifier_to_style_map_;
}
inline ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* CommandShowChangeThemeArchive::mutable_old_identifier_to_style_map() {
  ::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* _msg = _internal_mutable_old_identifier_to_style_map();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeThemeArchive.old_identifier_to_style_map)
  return _msg;
}
inline void CommandShowChangeThemeArchive::set_allocated_old_identifier_to_style_map(::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap* old_identifier_to_style_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete old_identifier_to_style_map_;
  }
  if (old_identifier_to_style_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::CommandShowChangeThemeArchive_IdentifierToStyleMap>::GetOwningArena(old_identifier_to_style_map);
    if (message_arena != submessage_arena) {
      old_identifier_to_style_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_identifier_to_style_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  old_identifier_to_style_map_ = old_identifier_to_style_map;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeThemeArchive.old_identifier_to_style_map)
}

// -------------------------------------------------------------------

// CommandShowChangeSlideSizeArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowChangeSlideSizeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowChangeSlideSizeArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowChangeSlideSizeArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowChangeSlideSizeArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeSlideSizeArchive.super)
  return _internal_super();
}
inline void CommandShowChangeSlideSizeArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeSlideSizeArchive.super)
}
inline ::TSK::CommandArchive* CommandShowChangeSlideSizeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowChangeSlideSizeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeSlideSizeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowChangeSlideSizeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowChangeSlideSizeArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeSlideSizeArchive.super)
  return _msg;
}
inline void CommandShowChangeSlideSizeArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeSlideSizeArchive.super)
}

// required .TSP.Size size = 2;
inline bool CommandShowChangeSlideSizeArchive::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool CommandShowChangeSlideSizeArchive::has_size() const {
  return _internal_has_size();
}
inline const ::TSP::Size& CommandShowChangeSlideSizeArchive::_internal_size() const {
  const ::TSP::Size* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& CommandShowChangeSlideSizeArchive::size() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowChangeSlideSizeArchive.size)
  return _internal_size();
}
inline void CommandShowChangeSlideSizeArchive::unsafe_arena_set_allocated_size(
    ::TSP::Size* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowChangeSlideSizeArchive.size)
}
inline ::TSP::Size* CommandShowChangeSlideSizeArchive::release_size() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = size_;
  size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* CommandShowChangeSlideSizeArchive::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:KN.CommandShowChangeSlideSizeArchive.size)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::TSP::Size* CommandShowChangeSlideSizeArchive::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000002u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    size_ = p;
  }
  return size_;
}
inline ::TSP::Size* CommandShowChangeSlideSizeArchive::mutable_size() {
  ::TSP::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowChangeSlideSizeArchive.size)
  return _msg;
}
inline void CommandShowChangeSlideSizeArchive::set_allocated_size(::TSP::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowChangeSlideSizeArchive.size)
}

// -------------------------------------------------------------------

// CommandSetThemeCustomEffectTimingCurveArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSetThemeCustomEffectTimingCurveArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSetThemeCustomEffectTimingCurveArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetThemeCustomEffectTimingCurveArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetThemeCustomEffectTimingCurveArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSetThemeCustomEffectTimingCurveArchive.super)
  return _internal_super();
}
inline void CommandSetThemeCustomEffectTimingCurveArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSetThemeCustomEffectTimingCurveArchive.super)
}
inline ::TSK::CommandArchive* CommandSetThemeCustomEffectTimingCurveArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetThemeCustomEffectTimingCurveArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSetThemeCustomEffectTimingCurveArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetThemeCustomEffectTimingCurveArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSetThemeCustomEffectTimingCurveArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSetThemeCustomEffectTimingCurveArchive.super)
  return _msg;
}
inline void CommandSetThemeCustomEffectTimingCurveArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSetThemeCustomEffectTimingCurveArchive.super)
}

// optional string name = 2;
inline bool CommandSetThemeCustomEffectTimingCurveArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetThemeCustomEffectTimingCurveArchive::has_name() const {
  return _internal_has_name();
}
inline void CommandSetThemeCustomEffectTimingCurveArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetThemeCustomEffectTimingCurveArchive::name() const {
  // @@protoc_insertion_point(field_get:KN.CommandSetThemeCustomEffectTimingCurveArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetThemeCustomEffectTimingCurveArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandSetThemeCustomEffectTimingCurveArchive.name)
}
inline std::string* CommandSetThemeCustomEffectTimingCurveArchive::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:KN.CommandSetThemeCustomEffectTimingCurveArchive.name)
  return _s;
}
inline const std::string& CommandSetThemeCustomEffectTimingCurveArchive::_internal_name() const {
  return name_.Get();
}
inline void CommandSetThemeCustomEffectTimingCurveArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandSetThemeCustomEffectTimingCurveArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandSetThemeCustomEffectTimingCurveArchive::release_name() {
  // @@protoc_insertion_point(field_release:KN.CommandSetThemeCustomEffectTimingCurveArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandSetThemeCustomEffectTimingCurveArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSetThemeCustomEffectTimingCurveArchive.name)
}

// optional .TSD.PathSourceArchive path_source = 3;
inline bool CommandSetThemeCustomEffectTimingCurveArchive::_internal_has_path_source() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || path_source_ != nullptr);
  return value;
}
inline bool CommandSetThemeCustomEffectTimingCurveArchive::has_path_source() const {
  return _internal_has_path_source();
}
inline const ::TSD::PathSourceArchive& CommandSetThemeCustomEffectTimingCurveArchive::_internal_path_source() const {
  const ::TSD::PathSourceArchive* p = path_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& CommandSetThemeCustomEffectTimingCurveArchive::path_source() const {
  // @@protoc_insertion_point(field_get:KN.CommandSetThemeCustomEffectTimingCurveArchive.path_source)
  return _internal_path_source();
}
inline void CommandSetThemeCustomEffectTimingCurveArchive::unsafe_arena_set_allocated_path_source(
    ::TSD::PathSourceArchive* path_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_source_);
  }
  path_source_ = path_source;
  if (path_source) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSetThemeCustomEffectTimingCurveArchive.path_source)
}
inline ::TSD::PathSourceArchive* CommandSetThemeCustomEffectTimingCurveArchive::release_path_source() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::PathSourceArchive* temp = path_source_;
  path_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::PathSourceArchive* CommandSetThemeCustomEffectTimingCurveArchive::unsafe_arena_release_path_source() {
  // @@protoc_insertion_point(field_release:KN.CommandSetThemeCustomEffectTimingCurveArchive.path_source)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::PathSourceArchive* temp = path_source_;
  path_source_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* CommandSetThemeCustomEffectTimingCurveArchive::_internal_mutable_path_source() {
  _has_bits_[0] |= 0x00000004u;
  if (path_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArenaForAllocation());
    path_source_ = p;
  }
  return path_source_;
}
inline ::TSD::PathSourceArchive* CommandSetThemeCustomEffectTimingCurveArchive::mutable_path_source() {
  ::TSD::PathSourceArchive* _msg = _internal_mutable_path_source();
  // @@protoc_insertion_point(field_mutable:KN.CommandSetThemeCustomEffectTimingCurveArchive.path_source)
  return _msg;
}
inline void CommandSetThemeCustomEffectTimingCurveArchive::set_allocated_path_source(::TSD::PathSourceArchive* path_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_source_);
  }
  if (path_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_source));
    if (message_arena != submessage_arena) {
      path_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  path_source_ = path_source;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSetThemeCustomEffectTimingCurveArchive.path_source)
}

// optional .TSD.PathSourceArchive old_path_source = 4;
inline bool CommandSetThemeCustomEffectTimingCurveArchive::_internal_has_old_path_source() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_path_source_ != nullptr);
  return value;
}
inline bool CommandSetThemeCustomEffectTimingCurveArchive::has_old_path_source() const {
  return _internal_has_old_path_source();
}
inline const ::TSD::PathSourceArchive& CommandSetThemeCustomEffectTimingCurveArchive::_internal_old_path_source() const {
  const ::TSD::PathSourceArchive* p = old_path_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& CommandSetThemeCustomEffectTimingCurveArchive::old_path_source() const {
  // @@protoc_insertion_point(field_get:KN.CommandSetThemeCustomEffectTimingCurveArchive.old_path_source)
  return _internal_old_path_source();
}
inline void CommandSetThemeCustomEffectTimingCurveArchive::unsafe_arena_set_allocated_old_path_source(
    ::TSD::PathSourceArchive* old_path_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_path_source_);
  }
  old_path_source_ = old_path_source;
  if (old_path_source) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSetThemeCustomEffectTimingCurveArchive.old_path_source)
}
inline ::TSD::PathSourceArchive* CommandSetThemeCustomEffectTimingCurveArchive::release_old_path_source() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::PathSourceArchive* temp = old_path_source_;
  old_path_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::PathSourceArchive* CommandSetThemeCustomEffectTimingCurveArchive::unsafe_arena_release_old_path_source() {
  // @@protoc_insertion_point(field_release:KN.CommandSetThemeCustomEffectTimingCurveArchive.old_path_source)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::PathSourceArchive* temp = old_path_source_;
  old_path_source_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* CommandSetThemeCustomEffectTimingCurveArchive::_internal_mutable_old_path_source() {
  _has_bits_[0] |= 0x00000008u;
  if (old_path_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArenaForAllocation());
    old_path_source_ = p;
  }
  return old_path_source_;
}
inline ::TSD::PathSourceArchive* CommandSetThemeCustomEffectTimingCurveArchive::mutable_old_path_source() {
  ::TSD::PathSourceArchive* _msg = _internal_mutable_old_path_source();
  // @@protoc_insertion_point(field_mutable:KN.CommandSetThemeCustomEffectTimingCurveArchive.old_path_source)
  return _msg;
}
inline void CommandSetThemeCustomEffectTimingCurveArchive::set_allocated_old_path_source(::TSD::PathSourceArchive* old_path_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_path_source_);
  }
  if (old_path_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_path_source));
    if (message_arena != submessage_arena) {
      old_path_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_path_source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_path_source_ = old_path_source;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSetThemeCustomEffectTimingCurveArchive.old_path_source)
}

// -------------------------------------------------------------------

// CommandMoveTemplatesArchive

// required .TSD.ContainerReorderChildrenCommandArchive super = 1;
inline bool CommandMoveTemplatesArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandMoveTemplatesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::ContainerReorderChildrenCommandArchive& CommandMoveTemplatesArchive::_internal_super() const {
  const ::TSD::ContainerReorderChildrenCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ContainerReorderChildrenCommandArchive&>(
      ::TSD::_ContainerReorderChildrenCommandArchive_default_instance_);
}
inline const ::TSD::ContainerReorderChildrenCommandArchive& CommandMoveTemplatesArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandMoveTemplatesArchive.super)
  return _internal_super();
}
inline void CommandMoveTemplatesArchive::unsafe_arena_set_allocated_super(
    ::TSD::ContainerReorderChildrenCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandMoveTemplatesArchive.super)
}
inline ::TSD::ContainerReorderChildrenCommandArchive* CommandMoveTemplatesArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerReorderChildrenCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ContainerReorderChildrenCommandArchive* CommandMoveTemplatesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandMoveTemplatesArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerReorderChildrenCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::ContainerReorderChildrenCommandArchive* CommandMoveTemplatesArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ContainerReorderChildrenCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSD::ContainerReorderChildrenCommandArchive* CommandMoveTemplatesArchive::mutable_super() {
  ::TSD::ContainerReorderChildrenCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandMoveTemplatesArchive.super)
  return _msg;
}
inline void CommandMoveTemplatesArchive::set_allocated_super(::TSD::ContainerReorderChildrenCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandMoveTemplatesArchive.super)
}

// repeated .TSP.Reference template_slides = 3;
inline int CommandMoveTemplatesArchive::_internal_template_slides_size() const {
  return template_slides_.size();
}
inline int CommandMoveTemplatesArchive::template_slides_size() const {
  return _internal_template_slides_size();
}
inline ::TSP::Reference* CommandMoveTemplatesArchive::mutable_template_slides(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandMoveTemplatesArchive.template_slides)
  return template_slides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMoveTemplatesArchive::mutable_template_slides() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMoveTemplatesArchive.template_slides)
  return &template_slides_;
}
inline const ::TSP::Reference& CommandMoveTemplatesArchive::_internal_template_slides(int index) const {
  return template_slides_.Get(index);
}
inline const ::TSP::Reference& CommandMoveTemplatesArchive::template_slides(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMoveTemplatesArchive.template_slides)
  return _internal_template_slides(index);
}
inline ::TSP::Reference* CommandMoveTemplatesArchive::_internal_add_template_slides() {
  return template_slides_.Add();
}
inline ::TSP::Reference* CommandMoveTemplatesArchive::add_template_slides() {
  ::TSP::Reference* _add = _internal_add_template_slides();
  // @@protoc_insertion_point(field_add:KN.CommandMoveTemplatesArchive.template_slides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMoveTemplatesArchive::template_slides() const {
  // @@protoc_insertion_point(field_list:KN.CommandMoveTemplatesArchive.template_slides)
  return template_slides_;
}

// repeated .TSP.Reference previous_indexes_keys = 4;
inline int CommandMoveTemplatesArchive::_internal_previous_indexes_keys_size() const {
  return previous_indexes_keys_.size();
}
inline int CommandMoveTemplatesArchive::previous_indexes_keys_size() const {
  return _internal_previous_indexes_keys_size();
}
inline ::TSP::Reference* CommandMoveTemplatesArchive::mutable_previous_indexes_keys(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandMoveTemplatesArchive.previous_indexes_keys)
  return previous_indexes_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMoveTemplatesArchive::mutable_previous_indexes_keys() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMoveTemplatesArchive.previous_indexes_keys)
  return &previous_indexes_keys_;
}
inline const ::TSP::Reference& CommandMoveTemplatesArchive::_internal_previous_indexes_keys(int index) const {
  return previous_indexes_keys_.Get(index);
}
inline const ::TSP::Reference& CommandMoveTemplatesArchive::previous_indexes_keys(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMoveTemplatesArchive.previous_indexes_keys)
  return _internal_previous_indexes_keys(index);
}
inline ::TSP::Reference* CommandMoveTemplatesArchive::_internal_add_previous_indexes_keys() {
  return previous_indexes_keys_.Add();
}
inline ::TSP::Reference* CommandMoveTemplatesArchive::add_previous_indexes_keys() {
  ::TSP::Reference* _add = _internal_add_previous_indexes_keys();
  // @@protoc_insertion_point(field_add:KN.CommandMoveTemplatesArchive.previous_indexes_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMoveTemplatesArchive::previous_indexes_keys() const {
  // @@protoc_insertion_point(field_list:KN.CommandMoveTemplatesArchive.previous_indexes_keys)
  return previous_indexes_keys_;
}

// repeated uint32 previous_indexes_values = 5;
inline int CommandMoveTemplatesArchive::_internal_previous_indexes_values_size() const {
  return previous_indexes_values_.size();
}
inline int CommandMoveTemplatesArchive::previous_indexes_values_size() const {
  return _internal_previous_indexes_values_size();
}
inline void CommandMoveTemplatesArchive::clear_previous_indexes_values() {
  previous_indexes_values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandMoveTemplatesArchive::_internal_previous_indexes_values(int index) const {
  return previous_indexes_values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandMoveTemplatesArchive::previous_indexes_values(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMoveTemplatesArchive.previous_indexes_values)
  return _internal_previous_indexes_values(index);
}
inline void CommandMoveTemplatesArchive::set_previous_indexes_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  previous_indexes_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandMoveTemplatesArchive.previous_indexes_values)
}
inline void CommandMoveTemplatesArchive::_internal_add_previous_indexes_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  previous_indexes_values_.Add(value);
}
inline void CommandMoveTemplatesArchive::add_previous_indexes_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_previous_indexes_values(value);
  // @@protoc_insertion_point(field_add:KN.CommandMoveTemplatesArchive.previous_indexes_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandMoveTemplatesArchive::_internal_previous_indexes_values() const {
  return previous_indexes_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandMoveTemplatesArchive::previous_indexes_values() const {
  // @@protoc_insertion_point(field_list:KN.CommandMoveTemplatesArchive.previous_indexes_values)
  return _internal_previous_indexes_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandMoveTemplatesArchive::_internal_mutable_previous_indexes_values() {
  return &previous_indexes_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandMoveTemplatesArchive::mutable_previous_indexes_values() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMoveTemplatesArchive.previous_indexes_values)
  return _internal_mutable_previous_indexes_values();
}

// repeated .TSP.Reference final_template_arrangement = 6;
inline int CommandMoveTemplatesArchive::_internal_final_template_arrangement_size() const {
  return final_template_arrangement_.size();
}
inline int CommandMoveTemplatesArchive::final_template_arrangement_size() const {
  return _internal_final_template_arrangement_size();
}
inline ::TSP::Reference* CommandMoveTemplatesArchive::mutable_final_template_arrangement(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandMoveTemplatesArchive.final_template_arrangement)
  return final_template_arrangement_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandMoveTemplatesArchive::mutable_final_template_arrangement() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandMoveTemplatesArchive.final_template_arrangement)
  return &final_template_arrangement_;
}
inline const ::TSP::Reference& CommandMoveTemplatesArchive::_internal_final_template_arrangement(int index) const {
  return final_template_arrangement_.Get(index);
}
inline const ::TSP::Reference& CommandMoveTemplatesArchive::final_template_arrangement(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandMoveTemplatesArchive.final_template_arrangement)
  return _internal_final_template_arrangement(index);
}
inline ::TSP::Reference* CommandMoveTemplatesArchive::_internal_add_final_template_arrangement() {
  return final_template_arrangement_.Add();
}
inline ::TSP::Reference* CommandMoveTemplatesArchive::add_final_template_arrangement() {
  ::TSP::Reference* _add = _internal_add_final_template_arrangement();
  // @@protoc_insertion_point(field_add:KN.CommandMoveTemplatesArchive.final_template_arrangement)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandMoveTemplatesArchive::final_template_arrangement() const {
  // @@protoc_insertion_point(field_list:KN.CommandMoveTemplatesArchive.final_template_arrangement)
  return final_template_arrangement_;
}

// -------------------------------------------------------------------

// CommandInsertTemplateArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandInsertTemplateArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandInsertTemplateArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandInsertTemplateArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandInsertTemplateArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandInsertTemplateArchive.super)
  return _internal_super();
}
inline void CommandInsertTemplateArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandInsertTemplateArchive.super)
}
inline ::TSK::CommandArchive* CommandInsertTemplateArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandInsertTemplateArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandInsertTemplateArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandInsertTemplateArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandInsertTemplateArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandInsertTemplateArchive.super)
  return _msg;
}
inline void CommandInsertTemplateArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandInsertTemplateArchive.super)
}

// repeated .TSP.Reference undo_template_change_commands = 7;
inline int CommandInsertTemplateArchive::_internal_undo_template_change_commands_size() const {
  return undo_template_change_commands_.size();
}
inline int CommandInsertTemplateArchive::undo_template_change_commands_size() const {
  return _internal_undo_template_change_commands_size();
}
inline ::TSP::Reference* CommandInsertTemplateArchive::mutable_undo_template_change_commands(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandInsertTemplateArchive.undo_template_change_commands)
  return undo_template_change_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandInsertTemplateArchive::mutable_undo_template_change_commands() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandInsertTemplateArchive.undo_template_change_commands)
  return &undo_template_change_commands_;
}
inline const ::TSP::Reference& CommandInsertTemplateArchive::_internal_undo_template_change_commands(int index) const {
  return undo_template_change_commands_.Get(index);
}
inline const ::TSP::Reference& CommandInsertTemplateArchive::undo_template_change_commands(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandInsertTemplateArchive.undo_template_change_commands)
  return _internal_undo_template_change_commands(index);
}
inline ::TSP::Reference* CommandInsertTemplateArchive::_internal_add_undo_template_change_commands() {
  return undo_template_change_commands_.Add();
}
inline ::TSP::Reference* CommandInsertTemplateArchive::add_undo_template_change_commands() {
  ::TSP::Reference* _add = _internal_add_undo_template_change_commands();
  // @@protoc_insertion_point(field_add:KN.CommandInsertTemplateArchive.undo_template_change_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandInsertTemplateArchive::undo_template_change_commands() const {
  // @@protoc_insertion_point(field_list:KN.CommandInsertTemplateArchive.undo_template_change_commands)
  return undo_template_change_commands_;
}

// required bool set_inserted_slide_as_default_template_slide = 8;
inline bool CommandInsertTemplateArchive::_internal_has_set_inserted_slide_as_default_template_slide() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandInsertTemplateArchive::has_set_inserted_slide_as_default_template_slide() const {
  return _internal_has_set_inserted_slide_as_default_template_slide();
}
inline void CommandInsertTemplateArchive::clear_set_inserted_slide_as_default_template_slide() {
  set_inserted_slide_as_default_template_slide_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandInsertTemplateArchive::_internal_set_inserted_slide_as_default_template_slide() const {
  return set_inserted_slide_as_default_template_slide_;
}
inline bool CommandInsertTemplateArchive::set_inserted_slide_as_default_template_slide() const {
  // @@protoc_insertion_point(field_get:KN.CommandInsertTemplateArchive.set_inserted_slide_as_default_template_slide)
  return _internal_set_inserted_slide_as_default_template_slide();
}
inline void CommandInsertTemplateArchive::_internal_set_set_inserted_slide_as_default_template_slide(bool value) {
  _has_bits_[0] |= 0x00000004u;
  set_inserted_slide_as_default_template_slide_ = value;
}
inline void CommandInsertTemplateArchive::set_set_inserted_slide_as_default_template_slide(bool value) {
  _internal_set_set_inserted_slide_as_default_template_slide(value);
  // @@protoc_insertion_point(field_set:KN.CommandInsertTemplateArchive.set_inserted_slide_as_default_template_slide)
}

// optional .TSP.Reference undo_replacement_template_slide_node = 9;
inline bool CommandInsertTemplateArchive::_internal_has_undo_replacement_template_slide_node() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || undo_replacement_template_slide_node_ != nullptr);
  return value;
}
inline bool CommandInsertTemplateArchive::has_undo_replacement_template_slide_node() const {
  return _internal_has_undo_replacement_template_slide_node();
}
inline const ::TSP::Reference& CommandInsertTemplateArchive::_internal_undo_replacement_template_slide_node() const {
  const ::TSP::Reference* p = undo_replacement_template_slide_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertTemplateArchive::undo_replacement_template_slide_node() const {
  // @@protoc_insertion_point(field_get:KN.CommandInsertTemplateArchive.undo_replacement_template_slide_node)
  return _internal_undo_replacement_template_slide_node();
}
inline void CommandInsertTemplateArchive::unsafe_arena_set_allocated_undo_replacement_template_slide_node(
    ::TSP::Reference* undo_replacement_template_slide_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_replacement_template_slide_node_);
  }
  undo_replacement_template_slide_node_ = undo_replacement_template_slide_node;
  if (undo_replacement_template_slide_node) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandInsertTemplateArchive.undo_replacement_template_slide_node)
}
inline ::TSP::Reference* CommandInsertTemplateArchive::release_undo_replacement_template_slide_node() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = undo_replacement_template_slide_node_;
  undo_replacement_template_slide_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertTemplateArchive::unsafe_arena_release_undo_replacement_template_slide_node() {
  // @@protoc_insertion_point(field_release:KN.CommandInsertTemplateArchive.undo_replacement_template_slide_node)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = undo_replacement_template_slide_node_;
  undo_replacement_template_slide_node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertTemplateArchive::_internal_mutable_undo_replacement_template_slide_node() {
  _has_bits_[0] |= 0x00000002u;
  if (undo_replacement_template_slide_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    undo_replacement_template_slide_node_ = p;
  }
  return undo_replacement_template_slide_node_;
}
inline ::TSP::Reference* CommandInsertTemplateArchive::mutable_undo_replacement_template_slide_node() {
  ::TSP::Reference* _msg = _internal_mutable_undo_replacement_template_slide_node();
  // @@protoc_insertion_point(field_mutable:KN.CommandInsertTemplateArchive.undo_replacement_template_slide_node)
  return _msg;
}
inline void CommandInsertTemplateArchive::set_allocated_undo_replacement_template_slide_node(::TSP::Reference* undo_replacement_template_slide_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_replacement_template_slide_node_);
  }
  if (undo_replacement_template_slide_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_replacement_template_slide_node));
    if (message_arena != submessage_arena) {
      undo_replacement_template_slide_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_replacement_template_slide_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  undo_replacement_template_slide_node_ = undo_replacement_template_slide_node;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandInsertTemplateArchive.undo_replacement_template_slide_node)
}

// -------------------------------------------------------------------

// CommandPrimitiveInsertTemplateArchive

// required .TSD.ContainerInsertChildrenCommandArchive super = 1;
inline bool CommandPrimitiveInsertTemplateArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandPrimitiveInsertTemplateArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::ContainerInsertChildrenCommandArchive& CommandPrimitiveInsertTemplateArchive::_internal_super() const {
  const ::TSD::ContainerInsertChildrenCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ContainerInsertChildrenCommandArchive&>(
      ::TSD::_ContainerInsertChildrenCommandArchive_default_instance_);
}
inline const ::TSD::ContainerInsertChildrenCommandArchive& CommandPrimitiveInsertTemplateArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandPrimitiveInsertTemplateArchive.super)
  return _internal_super();
}
inline void CommandPrimitiveInsertTemplateArchive::unsafe_arena_set_allocated_super(
    ::TSD::ContainerInsertChildrenCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandPrimitiveInsertTemplateArchive.super)
}
inline ::TSD::ContainerInsertChildrenCommandArchive* CommandPrimitiveInsertTemplateArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerInsertChildrenCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ContainerInsertChildrenCommandArchive* CommandPrimitiveInsertTemplateArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandPrimitiveInsertTemplateArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerInsertChildrenCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::ContainerInsertChildrenCommandArchive* CommandPrimitiveInsertTemplateArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ContainerInsertChildrenCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSD::ContainerInsertChildrenCommandArchive* CommandPrimitiveInsertTemplateArchive::mutable_super() {
  ::TSD::ContainerInsertChildrenCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandPrimitiveInsertTemplateArchive.super)
  return _msg;
}
inline void CommandPrimitiveInsertTemplateArchive::set_allocated_super(::TSD::ContainerInsertChildrenCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandPrimitiveInsertTemplateArchive.super)
}

// required bool was_inserted_with_drop = 2;
inline bool CommandPrimitiveInsertTemplateArchive::_internal_has_was_inserted_with_drop() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandPrimitiveInsertTemplateArchive::has_was_inserted_with_drop() const {
  return _internal_has_was_inserted_with_drop();
}
inline void CommandPrimitiveInsertTemplateArchive::clear_was_inserted_with_drop() {
  was_inserted_with_drop_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CommandPrimitiveInsertTemplateArchive::_internal_was_inserted_with_drop() const {
  return was_inserted_with_drop_;
}
inline bool CommandPrimitiveInsertTemplateArchive::was_inserted_with_drop() const {
  // @@protoc_insertion_point(field_get:KN.CommandPrimitiveInsertTemplateArchive.was_inserted_with_drop)
  return _internal_was_inserted_with_drop();
}
inline void CommandPrimitiveInsertTemplateArchive::_internal_set_was_inserted_with_drop(bool value) {
  _has_bits_[0] |= 0x00000002u;
  was_inserted_with_drop_ = value;
}
inline void CommandPrimitiveInsertTemplateArchive::set_was_inserted_with_drop(bool value) {
  _internal_set_was_inserted_with_drop(value);
  // @@protoc_insertion_point(field_set:KN.CommandPrimitiveInsertTemplateArchive.was_inserted_with_drop)
}

// repeated .TSP.UUID custom_format_keys = 3;
inline int CommandPrimitiveInsertTemplateArchive::_internal_custom_format_keys_size() const {
  return custom_format_keys_.size();
}
inline int CommandPrimitiveInsertTemplateArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* CommandPrimitiveInsertTemplateArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandPrimitiveInsertTemplateArchive.custom_format_keys)
  return custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandPrimitiveInsertTemplateArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandPrimitiveInsertTemplateArchive.custom_format_keys)
  return &custom_format_keys_;
}
inline const ::TSP::UUID& CommandPrimitiveInsertTemplateArchive::_internal_custom_format_keys(int index) const {
  return custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& CommandPrimitiveInsertTemplateArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandPrimitiveInsertTemplateArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* CommandPrimitiveInsertTemplateArchive::_internal_add_custom_format_keys() {
  return custom_format_keys_.Add();
}
inline ::TSP::UUID* CommandPrimitiveInsertTemplateArchive::add_custom_format_keys() {
  ::TSP::UUID* _add = _internal_add_custom_format_keys();
  // @@protoc_insertion_point(field_add:KN.CommandPrimitiveInsertTemplateArchive.custom_format_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandPrimitiveInsertTemplateArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:KN.CommandPrimitiveInsertTemplateArchive.custom_format_keys)
  return custom_format_keys_;
}

// repeated .TSP.Reference previous_classic_theme_records = 4;
inline int CommandPrimitiveInsertTemplateArchive::_internal_previous_classic_theme_records_size() const {
  return previous_classic_theme_records_.size();
}
inline int CommandPrimitiveInsertTemplateArchive::previous_classic_theme_records_size() const {
  return _internal_previous_classic_theme_records_size();
}
inline ::TSP::Reference* CommandPrimitiveInsertTemplateArchive::mutable_previous_classic_theme_records(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandPrimitiveInsertTemplateArchive.previous_classic_theme_records)
  return previous_classic_theme_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandPrimitiveInsertTemplateArchive::mutable_previous_classic_theme_records() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandPrimitiveInsertTemplateArchive.previous_classic_theme_records)
  return &previous_classic_theme_records_;
}
inline const ::TSP::Reference& CommandPrimitiveInsertTemplateArchive::_internal_previous_classic_theme_records(int index) const {
  return previous_classic_theme_records_.Get(index);
}
inline const ::TSP::Reference& CommandPrimitiveInsertTemplateArchive::previous_classic_theme_records(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandPrimitiveInsertTemplateArchive.previous_classic_theme_records)
  return _internal_previous_classic_theme_records(index);
}
inline ::TSP::Reference* CommandPrimitiveInsertTemplateArchive::_internal_add_previous_classic_theme_records() {
  return previous_classic_theme_records_.Add();
}
inline ::TSP::Reference* CommandPrimitiveInsertTemplateArchive::add_previous_classic_theme_records() {
  ::TSP::Reference* _add = _internal_add_previous_classic_theme_records();
  // @@protoc_insertion_point(field_add:KN.CommandPrimitiveInsertTemplateArchive.previous_classic_theme_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandPrimitiveInsertTemplateArchive::previous_classic_theme_records() const {
  // @@protoc_insertion_point(field_list:KN.CommandPrimitiveInsertTemplateArchive.previous_classic_theme_records)
  return previous_classic_theme_records_;
}

// -------------------------------------------------------------------

// CommandRemoveTemplateArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandRemoveTemplateArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandRemoveTemplateArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandRemoveTemplateArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandRemoveTemplateArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandRemoveTemplateArchive.super)
  return _internal_super();
}
inline void CommandRemoveTemplateArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandRemoveTemplateArchive.super)
}
inline ::TSK::CommandArchive* CommandRemoveTemplateArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandRemoveTemplateArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandRemoveTemplateArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandRemoveTemplateArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandRemoveTemplateArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandRemoveTemplateArchive.super)
  return _msg;
}
inline void CommandRemoveTemplateArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandRemoveTemplateArchive.super)
}

// optional .TSP.Reference replacement_template_slide_node = 5;
inline bool CommandRemoveTemplateArchive::_internal_has_replacement_template_slide_node() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || replacement_template_slide_node_ != nullptr);
  return value;
}
inline bool CommandRemoveTemplateArchive::has_replacement_template_slide_node() const {
  return _internal_has_replacement_template_slide_node();
}
inline const ::TSP::Reference& CommandRemoveTemplateArchive::_internal_replacement_template_slide_node() const {
  const ::TSP::Reference* p = replacement_template_slide_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveTemplateArchive::replacement_template_slide_node() const {
  // @@protoc_insertion_point(field_get:KN.CommandRemoveTemplateArchive.replacement_template_slide_node)
  return _internal_replacement_template_slide_node();
}
inline void CommandRemoveTemplateArchive::unsafe_arena_set_allocated_replacement_template_slide_node(
    ::TSP::Reference* replacement_template_slide_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_template_slide_node_);
  }
  replacement_template_slide_node_ = replacement_template_slide_node;
  if (replacement_template_slide_node) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandRemoveTemplateArchive.replacement_template_slide_node)
}
inline ::TSP::Reference* CommandRemoveTemplateArchive::release_replacement_template_slide_node() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = replacement_template_slide_node_;
  replacement_template_slide_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveTemplateArchive::unsafe_arena_release_replacement_template_slide_node() {
  // @@protoc_insertion_point(field_release:KN.CommandRemoveTemplateArchive.replacement_template_slide_node)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = replacement_template_slide_node_;
  replacement_template_slide_node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveTemplateArchive::_internal_mutable_replacement_template_slide_node() {
  _has_bits_[0] |= 0x00000002u;
  if (replacement_template_slide_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    replacement_template_slide_node_ = p;
  }
  return replacement_template_slide_node_;
}
inline ::TSP::Reference* CommandRemoveTemplateArchive::mutable_replacement_template_slide_node() {
  ::TSP::Reference* _msg = _internal_mutable_replacement_template_slide_node();
  // @@protoc_insertion_point(field_mutable:KN.CommandRemoveTemplateArchive.replacement_template_slide_node)
  return _msg;
}
inline void CommandRemoveTemplateArchive::set_allocated_replacement_template_slide_node(::TSP::Reference* replacement_template_slide_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_template_slide_node_);
  }
  if (replacement_template_slide_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_template_slide_node));
    if (message_arena != submessage_arena) {
      replacement_template_slide_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacement_template_slide_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  replacement_template_slide_node_ = replacement_template_slide_node;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandRemoveTemplateArchive.replacement_template_slide_node)
}

// repeated .TSP.Reference template_change_commands = 6;
inline int CommandRemoveTemplateArchive::_internal_template_change_commands_size() const {
  return template_change_commands_.size();
}
inline int CommandRemoveTemplateArchive::template_change_commands_size() const {
  return _internal_template_change_commands_size();
}
inline ::TSP::Reference* CommandRemoveTemplateArchive::mutable_template_change_commands(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandRemoveTemplateArchive.template_change_commands)
  return template_change_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandRemoveTemplateArchive::mutable_template_change_commands() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandRemoveTemplateArchive.template_change_commands)
  return &template_change_commands_;
}
inline const ::TSP::Reference& CommandRemoveTemplateArchive::_internal_template_change_commands(int index) const {
  return template_change_commands_.Get(index);
}
inline const ::TSP::Reference& CommandRemoveTemplateArchive::template_change_commands(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandRemoveTemplateArchive.template_change_commands)
  return _internal_template_change_commands(index);
}
inline ::TSP::Reference* CommandRemoveTemplateArchive::_internal_add_template_change_commands() {
  return template_change_commands_.Add();
}
inline ::TSP::Reference* CommandRemoveTemplateArchive::add_template_change_commands() {
  ::TSP::Reference* _add = _internal_add_template_change_commands();
  // @@protoc_insertion_point(field_add:KN.CommandRemoveTemplateArchive.template_change_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandRemoveTemplateArchive::template_change_commands() const {
  // @@protoc_insertion_point(field_list:KN.CommandRemoveTemplateArchive.template_change_commands)
  return template_change_commands_;
}

// optional bool default_template_slide_node_was_replaced = 7;
inline bool CommandRemoveTemplateArchive::_internal_has_default_template_slide_node_was_replaced() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandRemoveTemplateArchive::has_default_template_slide_node_was_replaced() const {
  return _internal_has_default_template_slide_node_was_replaced();
}
inline void CommandRemoveTemplateArchive::clear_default_template_slide_node_was_replaced() {
  default_template_slide_node_was_replaced_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandRemoveTemplateArchive::_internal_default_template_slide_node_was_replaced() const {
  return default_template_slide_node_was_replaced_;
}
inline bool CommandRemoveTemplateArchive::default_template_slide_node_was_replaced() const {
  // @@protoc_insertion_point(field_get:KN.CommandRemoveTemplateArchive.default_template_slide_node_was_replaced)
  return _internal_default_template_slide_node_was_replaced();
}
inline void CommandRemoveTemplateArchive::_internal_set_default_template_slide_node_was_replaced(bool value) {
  _has_bits_[0] |= 0x00000004u;
  default_template_slide_node_was_replaced_ = value;
}
inline void CommandRemoveTemplateArchive::set_default_template_slide_node_was_replaced(bool value) {
  _internal_set_default_template_slide_node_was_replaced(value);
  // @@protoc_insertion_point(field_set:KN.CommandRemoveTemplateArchive.default_template_slide_node_was_replaced)
}

// -------------------------------------------------------------------

// CommandPrimitiveRemoveTemplateArchive

// required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
inline bool CommandPrimitiveRemoveTemplateArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandPrimitiveRemoveTemplateArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::ContainerRemoveChildrenCommandArchive& CommandPrimitiveRemoveTemplateArchive::_internal_super() const {
  const ::TSD::ContainerRemoveChildrenCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ContainerRemoveChildrenCommandArchive&>(
      ::TSD::_ContainerRemoveChildrenCommandArchive_default_instance_);
}
inline const ::TSD::ContainerRemoveChildrenCommandArchive& CommandPrimitiveRemoveTemplateArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandPrimitiveRemoveTemplateArchive.super)
  return _internal_super();
}
inline void CommandPrimitiveRemoveTemplateArchive::unsafe_arena_set_allocated_super(
    ::TSD::ContainerRemoveChildrenCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandPrimitiveRemoveTemplateArchive.super)
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* CommandPrimitiveRemoveTemplateArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerRemoveChildrenCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* CommandPrimitiveRemoveTemplateArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandPrimitiveRemoveTemplateArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerRemoveChildrenCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* CommandPrimitiveRemoveTemplateArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ContainerRemoveChildrenCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* CommandPrimitiveRemoveTemplateArchive::mutable_super() {
  ::TSD::ContainerRemoveChildrenCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandPrimitiveRemoveTemplateArchive.super)
  return _msg;
}
inline void CommandPrimitiveRemoveTemplateArchive::set_allocated_super(::TSD::ContainerRemoveChildrenCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandPrimitiveRemoveTemplateArchive.super)
}

// repeated .TSP.Reference previous_classic_theme_records = 3;
inline int CommandPrimitiveRemoveTemplateArchive::_internal_previous_classic_theme_records_size() const {
  return previous_classic_theme_records_.size();
}
inline int CommandPrimitiveRemoveTemplateArchive::previous_classic_theme_records_size() const {
  return _internal_previous_classic_theme_records_size();
}
inline ::TSP::Reference* CommandPrimitiveRemoveTemplateArchive::mutable_previous_classic_theme_records(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandPrimitiveRemoveTemplateArchive.previous_classic_theme_records)
  return previous_classic_theme_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandPrimitiveRemoveTemplateArchive::mutable_previous_classic_theme_records() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandPrimitiveRemoveTemplateArchive.previous_classic_theme_records)
  return &previous_classic_theme_records_;
}
inline const ::TSP::Reference& CommandPrimitiveRemoveTemplateArchive::_internal_previous_classic_theme_records(int index) const {
  return previous_classic_theme_records_.Get(index);
}
inline const ::TSP::Reference& CommandPrimitiveRemoveTemplateArchive::previous_classic_theme_records(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandPrimitiveRemoveTemplateArchive.previous_classic_theme_records)
  return _internal_previous_classic_theme_records(index);
}
inline ::TSP::Reference* CommandPrimitiveRemoveTemplateArchive::_internal_add_previous_classic_theme_records() {
  return previous_classic_theme_records_.Add();
}
inline ::TSP::Reference* CommandPrimitiveRemoveTemplateArchive::add_previous_classic_theme_records() {
  ::TSP::Reference* _add = _internal_add_previous_classic_theme_records();
  // @@protoc_insertion_point(field_add:KN.CommandPrimitiveRemoveTemplateArchive.previous_classic_theme_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandPrimitiveRemoveTemplateArchive::previous_classic_theme_records() const {
  // @@protoc_insertion_point(field_list:KN.CommandPrimitiveRemoveTemplateArchive.previous_classic_theme_records)
  return previous_classic_theme_records_;
}

// -------------------------------------------------------------------

// CommandSlideInsertBuildArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideInsertBuildArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideInsertBuildArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideInsertBuildArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.super)
  return _internal_super();
}
inline void CommandSlideInsertBuildArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildArchive.super)
  return _msg;
}
inline void CommandSlideInsertBuildArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildArchive.super)
}

// required .TSP.Reference insert_build_description = 2;
inline bool CommandSlideInsertBuildArchive::_internal_has_insert_build_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || insert_build_description_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildArchive::has_insert_build_description() const {
  return _internal_has_insert_build_description();
}
inline const ::TSP::Reference& CommandSlideInsertBuildArchive::_internal_insert_build_description() const {
  const ::TSP::Reference* p = insert_build_description_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideInsertBuildArchive::insert_build_description() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.insert_build_description)
  return _internal_insert_build_description();
}
inline void CommandSlideInsertBuildArchive::unsafe_arena_set_allocated_insert_build_description(
    ::TSP::Reference* insert_build_description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_build_description_);
  }
  insert_build_description_ = insert_build_description;
  if (insert_build_description) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildArchive.insert_build_description)
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::release_insert_build_description() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = insert_build_description_;
  insert_build_description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::unsafe_arena_release_insert_build_description() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildArchive.insert_build_description)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = insert_build_description_;
  insert_build_description_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::_internal_mutable_insert_build_description() {
  _has_bits_[0] |= 0x00000002u;
  if (insert_build_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    insert_build_description_ = p;
  }
  return insert_build_description_;
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::mutable_insert_build_description() {
  ::TSP::Reference* _msg = _internal_mutable_insert_build_description();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildArchive.insert_build_description)
  return _msg;
}
inline void CommandSlideInsertBuildArchive::set_allocated_insert_build_description(::TSP::Reference* insert_build_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_build_description_);
  }
  if (insert_build_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_build_description));
    if (message_arena != submessage_arena) {
      insert_build_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_build_description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  insert_build_description_ = insert_build_description;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildArchive.insert_build_description)
}

// optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 3;
inline bool CommandSlideInsertBuildArchive::_internal_has_identifier_for_chunk_to_insert_after() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || identifier_for_chunk_to_insert_after_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildArchive::has_identifier_for_chunk_to_insert_after() const {
  return _internal_has_identifier_for_chunk_to_insert_after();
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideInsertBuildArchive::_internal_identifier_for_chunk_to_insert_after() const {
  const ::KN::BuildChunkIdentifierArchive* p = identifier_for_chunk_to_insert_after_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildChunkIdentifierArchive&>(
      ::KN::_BuildChunkIdentifierArchive_default_instance_);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideInsertBuildArchive::identifier_for_chunk_to_insert_after() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.identifier_for_chunk_to_insert_after)
  return _internal_identifier_for_chunk_to_insert_after();
}
inline void CommandSlideInsertBuildArchive::unsafe_arena_set_allocated_identifier_for_chunk_to_insert_after(
    ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_insert_after_);
  }
  identifier_for_chunk_to_insert_after_ = identifier_for_chunk_to_insert_after;
  if (identifier_for_chunk_to_insert_after) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildArchive.identifier_for_chunk_to_insert_after)
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideInsertBuildArchive::release_identifier_for_chunk_to_insert_after() {
  _has_bits_[0] &= ~0x00000004u;
  ::KN::BuildChunkIdentifierArchive* temp = identifier_for_chunk_to_insert_after_;
  identifier_for_chunk_to_insert_after_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideInsertBuildArchive::unsafe_arena_release_identifier_for_chunk_to_insert_after() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildArchive.identifier_for_chunk_to_insert_after)
  _has_bits_[0] &= ~0x00000004u;
  ::KN::BuildChunkIdentifierArchive* temp = identifier_for_chunk_to_insert_after_;
  identifier_for_chunk_to_insert_after_ = nullptr;
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideInsertBuildArchive::_internal_mutable_identifier_for_chunk_to_insert_after() {
  _has_bits_[0] |= 0x00000004u;
  if (identifier_for_chunk_to_insert_after_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildChunkIdentifierArchive>(GetArenaForAllocation());
    identifier_for_chunk_to_insert_after_ = p;
  }
  return identifier_for_chunk_to_insert_after_;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideInsertBuildArchive::mutable_identifier_for_chunk_to_insert_after() {
  ::KN::BuildChunkIdentifierArchive* _msg = _internal_mutable_identifier_for_chunk_to_insert_after();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildArchive.identifier_for_chunk_to_insert_after)
  return _msg;
}
inline void CommandSlideInsertBuildArchive::set_allocated_identifier_for_chunk_to_insert_after(::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_insert_after_);
  }
  if (identifier_for_chunk_to_insert_after) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_insert_after));
    if (message_arena != submessage_arena) {
      identifier_for_chunk_to_insert_after = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier_for_chunk_to_insert_after, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  identifier_for_chunk_to_insert_after_ = identifier_for_chunk_to_insert_after;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildArchive.identifier_for_chunk_to_insert_after)
}

// optional bool should_create_chunks = 4;
inline bool CommandSlideInsertBuildArchive::_internal_has_should_create_chunks() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSlideInsertBuildArchive::has_should_create_chunks() const {
  return _internal_has_should_create_chunks();
}
inline void CommandSlideInsertBuildArchive::clear_should_create_chunks() {
  should_create_chunks_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CommandSlideInsertBuildArchive::_internal_should_create_chunks() const {
  return should_create_chunks_;
}
inline bool CommandSlideInsertBuildArchive::should_create_chunks() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.should_create_chunks)
  return _internal_should_create_chunks();
}
inline void CommandSlideInsertBuildArchive::_internal_set_should_create_chunks(bool value) {
  _has_bits_[0] |= 0x00000008u;
  should_create_chunks_ = value;
}
inline void CommandSlideInsertBuildArchive::set_should_create_chunks(bool value) {
  _internal_set_should_create_chunks(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertBuildArchive.should_create_chunks)
}

// repeated .TSP.Reference old_tuples_to_update = 5;
inline int CommandSlideInsertBuildArchive::_internal_old_tuples_to_update_size() const {
  return old_tuples_to_update_.size();
}
inline int CommandSlideInsertBuildArchive::old_tuples_to_update_size() const {
  return _internal_old_tuples_to_update_size();
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::mutable_old_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildArchive.old_tuples_to_update)
  return old_tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideInsertBuildArchive::mutable_old_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertBuildArchive.old_tuples_to_update)
  return &old_tuples_to_update_;
}
inline const ::TSP::Reference& CommandSlideInsertBuildArchive::_internal_old_tuples_to_update(int index) const {
  return old_tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandSlideInsertBuildArchive::old_tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.old_tuples_to_update)
  return _internal_old_tuples_to_update(index);
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::_internal_add_old_tuples_to_update() {
  return old_tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandSlideInsertBuildArchive::add_old_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_old_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertBuildArchive.old_tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideInsertBuildArchive::old_tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertBuildArchive.old_tuples_to_update)
  return old_tuples_to_update_;
}

// optional bool was_initialized_over_the_wire = 6;
inline bool CommandSlideInsertBuildArchive::_internal_has_was_initialized_over_the_wire() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSlideInsertBuildArchive::has_was_initialized_over_the_wire() const {
  return _internal_has_was_initialized_over_the_wire();
}
inline void CommandSlideInsertBuildArchive::clear_was_initialized_over_the_wire() {
  was_initialized_over_the_wire_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSlideInsertBuildArchive::_internal_was_initialized_over_the_wire() const {
  return was_initialized_over_the_wire_;
}
inline bool CommandSlideInsertBuildArchive::was_initialized_over_the_wire() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.was_initialized_over_the_wire)
  return _internal_was_initialized_over_the_wire();
}
inline void CommandSlideInsertBuildArchive::_internal_set_was_initialized_over_the_wire(bool value) {
  _has_bits_[0] |= 0x00000010u;
  was_initialized_over_the_wire_ = value;
}
inline void CommandSlideInsertBuildArchive::set_was_initialized_over_the_wire(bool value) {
  _internal_set_was_initialized_over_the_wire(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertBuildArchive.was_initialized_over_the_wire)
}

// optional bool has_been_committed = 7;
inline bool CommandSlideInsertBuildArchive::_internal_has_has_been_committed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSlideInsertBuildArchive::has_has_been_committed() const {
  return _internal_has_has_been_committed();
}
inline void CommandSlideInsertBuildArchive::clear_has_been_committed() {
  has_been_committed_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandSlideInsertBuildArchive::_internal_has_been_committed() const {
  return has_been_committed_;
}
inline bool CommandSlideInsertBuildArchive::has_been_committed() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildArchive.has_been_committed)
  return _internal_has_been_committed();
}
inline void CommandSlideInsertBuildArchive::_internal_set_has_been_committed(bool value) {
  _has_bits_[0] |= 0x00000020u;
  has_been_committed_ = value;
}
inline void CommandSlideInsertBuildArchive::set_has_been_committed(bool value) {
  _internal_set_has_been_committed(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertBuildArchive.has_been_committed)
}

// -------------------------------------------------------------------

// InsertBuildDescriptionArchive

// required .TSP.UUID slide_id = 1;
inline bool InsertBuildDescriptionArchive::_internal_has_slide_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_ != nullptr);
  return value;
}
inline bool InsertBuildDescriptionArchive::has_slide_id() const {
  return _internal_has_slide_id();
}
inline const ::TSP::UUID& InsertBuildDescriptionArchive::_internal_slide_id() const {
  const ::TSP::UUID* p = slide_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& InsertBuildDescriptionArchive::slide_id() const {
  // @@protoc_insertion_point(field_get:KN.InsertBuildDescriptionArchive.slide_id)
  return _internal_slide_id();
}
inline void InsertBuildDescriptionArchive::unsafe_arena_set_allocated_slide_id(
    ::TSP::UUID* slide_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  slide_id_ = slide_id;
  if (slide_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.InsertBuildDescriptionArchive.slide_id)
}
inline ::TSP::UUID* InsertBuildDescriptionArchive::release_slide_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* InsertBuildDescriptionArchive::unsafe_arena_release_slide_id() {
  // @@protoc_insertion_point(field_release:KN.InsertBuildDescriptionArchive.slide_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* InsertBuildDescriptionArchive::_internal_mutable_slide_id() {
  _has_bits_[0] |= 0x00000001u;
  if (slide_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    slide_id_ = p;
  }
  return slide_id_;
}
inline ::TSP::UUID* InsertBuildDescriptionArchive::mutable_slide_id() {
  ::TSP::UUID* _msg = _internal_mutable_slide_id();
  // @@protoc_insertion_point(field_mutable:KN.InsertBuildDescriptionArchive.slide_id)
  return _msg;
}
inline void InsertBuildDescriptionArchive::set_allocated_slide_id(::TSP::UUID* slide_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  if (slide_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id));
    if (message_arena != submessage_arena) {
      slide_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slide_id_ = slide_id;
  // @@protoc_insertion_point(field_set_allocated:KN.InsertBuildDescriptionArchive.slide_id)
}

// required .TSP.Reference build_to_insert = 2;
inline bool InsertBuildDescriptionArchive::_internal_has_build_to_insert() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || build_to_insert_ != nullptr);
  return value;
}
inline bool InsertBuildDescriptionArchive::has_build_to_insert() const {
  return _internal_has_build_to_insert();
}
inline const ::TSP::Reference& InsertBuildDescriptionArchive::_internal_build_to_insert() const {
  const ::TSP::Reference* p = build_to_insert_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& InsertBuildDescriptionArchive::build_to_insert() const {
  // @@protoc_insertion_point(field_get:KN.InsertBuildDescriptionArchive.build_to_insert)
  return _internal_build_to_insert();
}
inline void InsertBuildDescriptionArchive::unsafe_arena_set_allocated_build_to_insert(
    ::TSP::Reference* build_to_insert) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_to_insert_);
  }
  build_to_insert_ = build_to_insert;
  if (build_to_insert) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.InsertBuildDescriptionArchive.build_to_insert)
}
inline ::TSP::Reference* InsertBuildDescriptionArchive::release_build_to_insert() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = build_to_insert_;
  build_to_insert_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* InsertBuildDescriptionArchive::unsafe_arena_release_build_to_insert() {
  // @@protoc_insertion_point(field_release:KN.InsertBuildDescriptionArchive.build_to_insert)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = build_to_insert_;
  build_to_insert_ = nullptr;
  return temp;
}
inline ::TSP::Reference* InsertBuildDescriptionArchive::_internal_mutable_build_to_insert() {
  _has_bits_[0] |= 0x00000002u;
  if (build_to_insert_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    build_to_insert_ = p;
  }
  return build_to_insert_;
}
inline ::TSP::Reference* InsertBuildDescriptionArchive::mutable_build_to_insert() {
  ::TSP::Reference* _msg = _internal_mutable_build_to_insert();
  // @@protoc_insertion_point(field_mutable:KN.InsertBuildDescriptionArchive.build_to_insert)
  return _msg;
}
inline void InsertBuildDescriptionArchive::set_allocated_build_to_insert(::TSP::Reference* build_to_insert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_to_insert_);
  }
  if (build_to_insert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_to_insert));
    if (message_arena != submessage_arena) {
      build_to_insert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_to_insert, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  build_to_insert_ = build_to_insert;
  // @@protoc_insertion_point(field_set_allocated:KN.InsertBuildDescriptionArchive.build_to_insert)
}

// repeated .TSP.Reference chunks_to_insert = 3;
inline int InsertBuildDescriptionArchive::_internal_chunks_to_insert_size() const {
  return chunks_to_insert_.size();
}
inline int InsertBuildDescriptionArchive::chunks_to_insert_size() const {
  return _internal_chunks_to_insert_size();
}
inline ::TSP::Reference* InsertBuildDescriptionArchive::mutable_chunks_to_insert(int index) {
  // @@protoc_insertion_point(field_mutable:KN.InsertBuildDescriptionArchive.chunks_to_insert)
  return chunks_to_insert_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
InsertBuildDescriptionArchive::mutable_chunks_to_insert() {
  // @@protoc_insertion_point(field_mutable_list:KN.InsertBuildDescriptionArchive.chunks_to_insert)
  return &chunks_to_insert_;
}
inline const ::TSP::Reference& InsertBuildDescriptionArchive::_internal_chunks_to_insert(int index) const {
  return chunks_to_insert_.Get(index);
}
inline const ::TSP::Reference& InsertBuildDescriptionArchive::chunks_to_insert(int index) const {
  // @@protoc_insertion_point(field_get:KN.InsertBuildDescriptionArchive.chunks_to_insert)
  return _internal_chunks_to_insert(index);
}
inline ::TSP::Reference* InsertBuildDescriptionArchive::_internal_add_chunks_to_insert() {
  return chunks_to_insert_.Add();
}
inline ::TSP::Reference* InsertBuildDescriptionArchive::add_chunks_to_insert() {
  ::TSP::Reference* _add = _internal_add_chunks_to_insert();
  // @@protoc_insertion_point(field_add:KN.InsertBuildDescriptionArchive.chunks_to_insert)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
InsertBuildDescriptionArchive::chunks_to_insert() const {
  // @@protoc_insertion_point(field_list:KN.InsertBuildDescriptionArchive.chunks_to_insert)
  return chunks_to_insert_;
}

// required bool should_assign_chunk_identifiers = 4;
inline bool InsertBuildDescriptionArchive::_internal_has_should_assign_chunk_identifiers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InsertBuildDescriptionArchive::has_should_assign_chunk_identifiers() const {
  return _internal_has_should_assign_chunk_identifiers();
}
inline void InsertBuildDescriptionArchive::clear_should_assign_chunk_identifiers() {
  should_assign_chunk_identifiers_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool InsertBuildDescriptionArchive::_internal_should_assign_chunk_identifiers() const {
  return should_assign_chunk_identifiers_;
}
inline bool InsertBuildDescriptionArchive::should_assign_chunk_identifiers() const {
  // @@protoc_insertion_point(field_get:KN.InsertBuildDescriptionArchive.should_assign_chunk_identifiers)
  return _internal_should_assign_chunk_identifiers();
}
inline void InsertBuildDescriptionArchive::_internal_set_should_assign_chunk_identifiers(bool value) {
  _has_bits_[0] |= 0x00000004u;
  should_assign_chunk_identifiers_ = value;
}
inline void InsertBuildDescriptionArchive::set_should_assign_chunk_identifiers(bool value) {
  _internal_set_should_assign_chunk_identifiers(value);
  // @@protoc_insertion_point(field_set:KN.InsertBuildDescriptionArchive.should_assign_chunk_identifiers)
}

// repeated .KN.BuildChunkIdentifierArchive identifers_for_chunks_to_insert_after = 5;
inline int InsertBuildDescriptionArchive::_internal_identifers_for_chunks_to_insert_after_size() const {
  return identifers_for_chunks_to_insert_after_.size();
}
inline int InsertBuildDescriptionArchive::identifers_for_chunks_to_insert_after_size() const {
  return _internal_identifers_for_chunks_to_insert_after_size();
}
inline ::KN::BuildChunkIdentifierArchive* InsertBuildDescriptionArchive::mutable_identifers_for_chunks_to_insert_after(int index) {
  // @@protoc_insertion_point(field_mutable:KN.InsertBuildDescriptionArchive.identifers_for_chunks_to_insert_after)
  return identifers_for_chunks_to_insert_after_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
InsertBuildDescriptionArchive::mutable_identifers_for_chunks_to_insert_after() {
  // @@protoc_insertion_point(field_mutable_list:KN.InsertBuildDescriptionArchive.identifers_for_chunks_to_insert_after)
  return &identifers_for_chunks_to_insert_after_;
}
inline const ::KN::BuildChunkIdentifierArchive& InsertBuildDescriptionArchive::_internal_identifers_for_chunks_to_insert_after(int index) const {
  return identifers_for_chunks_to_insert_after_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& InsertBuildDescriptionArchive::identifers_for_chunks_to_insert_after(int index) const {
  // @@protoc_insertion_point(field_get:KN.InsertBuildDescriptionArchive.identifers_for_chunks_to_insert_after)
  return _internal_identifers_for_chunks_to_insert_after(index);
}
inline ::KN::BuildChunkIdentifierArchive* InsertBuildDescriptionArchive::_internal_add_identifers_for_chunks_to_insert_after() {
  return identifers_for_chunks_to_insert_after_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* InsertBuildDescriptionArchive::add_identifers_for_chunks_to_insert_after() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifers_for_chunks_to_insert_after();
  // @@protoc_insertion_point(field_add:KN.InsertBuildDescriptionArchive.identifers_for_chunks_to_insert_after)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
InsertBuildDescriptionArchive::identifers_for_chunks_to_insert_after() const {
  // @@protoc_insertion_point(field_list:KN.InsertBuildDescriptionArchive.identifers_for_chunks_to_insert_after)
  return identifers_for_chunks_to_insert_after_;
}

// repeated .TSP.Reference tuples_to_update = 6;
inline int InsertBuildDescriptionArchive::_internal_tuples_to_update_size() const {
  return tuples_to_update_.size();
}
inline int InsertBuildDescriptionArchive::tuples_to_update_size() const {
  return _internal_tuples_to_update_size();
}
inline ::TSP::Reference* InsertBuildDescriptionArchive::mutable_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.InsertBuildDescriptionArchive.tuples_to_update)
  return tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
InsertBuildDescriptionArchive::mutable_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.InsertBuildDescriptionArchive.tuples_to_update)
  return &tuples_to_update_;
}
inline const ::TSP::Reference& InsertBuildDescriptionArchive::_internal_tuples_to_update(int index) const {
  return tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& InsertBuildDescriptionArchive::tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.InsertBuildDescriptionArchive.tuples_to_update)
  return _internal_tuples_to_update(index);
}
inline ::TSP::Reference* InsertBuildDescriptionArchive::_internal_add_tuples_to_update() {
  return tuples_to_update_.Add();
}
inline ::TSP::Reference* InsertBuildDescriptionArchive::add_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.InsertBuildDescriptionArchive.tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
InsertBuildDescriptionArchive::tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.InsertBuildDescriptionArchive.tuples_to_update)
  return tuples_to_update_;
}

// repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
inline int InsertBuildDescriptionArchive::_internal_fallback_chunk_identifiers_size() const {
  return fallback_chunk_identifiers_.size();
}
inline int InsertBuildDescriptionArchive::fallback_chunk_identifiers_size() const {
  return _internal_fallback_chunk_identifiers_size();
}
inline ::KN::BuildChunkIdentifierArchive* InsertBuildDescriptionArchive::mutable_fallback_chunk_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:KN.InsertBuildDescriptionArchive.fallback_chunk_identifiers)
  return fallback_chunk_identifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
InsertBuildDescriptionArchive::mutable_fallback_chunk_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:KN.InsertBuildDescriptionArchive.fallback_chunk_identifiers)
  return &fallback_chunk_identifiers_;
}
inline const ::KN::BuildChunkIdentifierArchive& InsertBuildDescriptionArchive::_internal_fallback_chunk_identifiers(int index) const {
  return fallback_chunk_identifiers_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& InsertBuildDescriptionArchive::fallback_chunk_identifiers(int index) const {
  // @@protoc_insertion_point(field_get:KN.InsertBuildDescriptionArchive.fallback_chunk_identifiers)
  return _internal_fallback_chunk_identifiers(index);
}
inline ::KN::BuildChunkIdentifierArchive* InsertBuildDescriptionArchive::_internal_add_fallback_chunk_identifiers() {
  return fallback_chunk_identifiers_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* InsertBuildDescriptionArchive::add_fallback_chunk_identifiers() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_fallback_chunk_identifiers();
  // @@protoc_insertion_point(field_add:KN.InsertBuildDescriptionArchive.fallback_chunk_identifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
InsertBuildDescriptionArchive::fallback_chunk_identifiers() const {
  // @@protoc_insertion_point(field_list:KN.InsertBuildDescriptionArchive.fallback_chunk_identifiers)
  return fallback_chunk_identifiers_;
}

// required bool is_for_paste = 8;
inline bool InsertBuildDescriptionArchive::_internal_has_is_for_paste() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InsertBuildDescriptionArchive::has_is_for_paste() const {
  return _internal_has_is_for_paste();
}
inline void InsertBuildDescriptionArchive::clear_is_for_paste() {
  is_for_paste_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool InsertBuildDescriptionArchive::_internal_is_for_paste() const {
  return is_for_paste_;
}
inline bool InsertBuildDescriptionArchive::is_for_paste() const {
  // @@protoc_insertion_point(field_get:KN.InsertBuildDescriptionArchive.is_for_paste)
  return _internal_is_for_paste();
}
inline void InsertBuildDescriptionArchive::_internal_set_is_for_paste(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_for_paste_ = value;
}
inline void InsertBuildDescriptionArchive::set_is_for_paste(bool value) {
  _internal_set_is_for_paste(value);
  // @@protoc_insertion_point(field_set:KN.InsertBuildDescriptionArchive.is_for_paste)
}

// -------------------------------------------------------------------

// UndoObjectArchive

// required .TSD.UndoObjectArchive super = 1;
inline bool UndoObjectArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool UndoObjectArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::UndoObjectArchive& UndoObjectArchive::_internal_super() const {
  const ::TSD::UndoObjectArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::UndoObjectArchive&>(
      ::TSD::_UndoObjectArchive_default_instance_);
}
inline const ::TSD::UndoObjectArchive& UndoObjectArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.UndoObjectArchive.super)
  return _internal_super();
}
inline void UndoObjectArchive::unsafe_arena_set_allocated_super(
    ::TSD::UndoObjectArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.UndoObjectArchive.super)
}
inline ::TSD::UndoObjectArchive* UndoObjectArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::UndoObjectArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::UndoObjectArchive* UndoObjectArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.UndoObjectArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::UndoObjectArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::UndoObjectArchive* UndoObjectArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::UndoObjectArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSD::UndoObjectArchive* UndoObjectArchive::mutable_super() {
  ::TSD::UndoObjectArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.UndoObjectArchive.super)
  return _msg;
}
inline void UndoObjectArchive::set_allocated_super(::TSD::UndoObjectArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.UndoObjectArchive.super)
}

// -------------------------------------------------------------------

// CommandSlideRemoveBuildArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideRemoveBuildArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideRemoveBuildArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideRemoveBuildArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildArchive.super)
  return _internal_super();
}
inline void CommandSlideRemoveBuildArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildArchive.super)
  return _msg;
}
inline void CommandSlideRemoveBuildArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildArchive.super)
}

// required .TSP.Reference remove_build_description = 2;
inline bool CommandSlideRemoveBuildArchive::_internal_has_remove_build_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || remove_build_description_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildArchive::has_remove_build_description() const {
  return _internal_has_remove_build_description();
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::_internal_remove_build_description() const {
  const ::TSP::Reference* p = remove_build_description_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::remove_build_description() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildArchive.remove_build_description)
  return _internal_remove_build_description();
}
inline void CommandSlideRemoveBuildArchive::unsafe_arena_set_allocated_remove_build_description(
    ::TSP::Reference* remove_build_description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_build_description_);
  }
  remove_build_description_ = remove_build_description;
  if (remove_build_description) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildArchive.remove_build_description)
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::release_remove_build_description() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = remove_build_description_;
  remove_build_description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::unsafe_arena_release_remove_build_description() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildArchive.remove_build_description)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = remove_build_description_;
  remove_build_description_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::_internal_mutable_remove_build_description() {
  _has_bits_[0] |= 0x00000002u;
  if (remove_build_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    remove_build_description_ = p;
  }
  return remove_build_description_;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::mutable_remove_build_description() {
  ::TSP::Reference* _msg = _internal_mutable_remove_build_description();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildArchive.remove_build_description)
  return _msg;
}
inline void CommandSlideRemoveBuildArchive::set_allocated_remove_build_description(::TSP::Reference* remove_build_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_build_description_);
  }
  if (remove_build_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_build_description));
    if (message_arena != submessage_arena) {
      remove_build_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_build_description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  remove_build_description_ = remove_build_description;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildArchive.remove_build_description)
}

// optional .TSP.Reference build = 3;
inline bool CommandSlideRemoveBuildArchive::_internal_has_build() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || build_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildArchive::has_build() const {
  return _internal_has_build();
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::_internal_build() const {
  const ::TSP::Reference* p = build_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::build() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildArchive.build)
  return _internal_build();
}
inline void CommandSlideRemoveBuildArchive::unsafe_arena_set_allocated_build(
    ::TSP::Reference* build) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_);
  }
  build_ = build;
  if (build) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildArchive.build)
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::release_build() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = build_;
  build_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::unsafe_arena_release_build() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildArchive.build)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = build_;
  build_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::_internal_mutable_build() {
  _has_bits_[0] |= 0x00000004u;
  if (build_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    build_ = p;
  }
  return build_;
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::mutable_build() {
  ::TSP::Reference* _msg = _internal_mutable_build();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildArchive.build)
  return _msg;
}
inline void CommandSlideRemoveBuildArchive::set_allocated_build(::TSP::Reference* build) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_);
  }
  if (build) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build));
    if (message_arena != submessage_arena) {
      build = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  build_ = build;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildArchive.build)
}

// repeated .TSP.Reference chunks_to_insert = 4;
inline int CommandSlideRemoveBuildArchive::_internal_chunks_to_insert_size() const {
  return chunks_to_insert_.size();
}
inline int CommandSlideRemoveBuildArchive::chunks_to_insert_size() const {
  return _internal_chunks_to_insert_size();
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::mutable_chunks_to_insert(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildArchive.chunks_to_insert)
  return chunks_to_insert_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideRemoveBuildArchive::mutable_chunks_to_insert() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveBuildArchive.chunks_to_insert)
  return &chunks_to_insert_;
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::_internal_chunks_to_insert(int index) const {
  return chunks_to_insert_.Get(index);
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::chunks_to_insert(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildArchive.chunks_to_insert)
  return _internal_chunks_to_insert(index);
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::_internal_add_chunks_to_insert() {
  return chunks_to_insert_.Add();
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::add_chunks_to_insert() {
  ::TSP::Reference* _add = _internal_add_chunks_to_insert();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveBuildArchive.chunks_to_insert)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideRemoveBuildArchive::chunks_to_insert() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveBuildArchive.chunks_to_insert)
  return chunks_to_insert_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 5;
inline int CommandSlideRemoveBuildArchive::_internal_identifiers_for_chunks_to_insert_after_size() const {
  return identifiers_for_chunks_to_insert_after_.size();
}
inline int CommandSlideRemoveBuildArchive::identifiers_for_chunks_to_insert_after_size() const {
  return _internal_identifiers_for_chunks_to_insert_after_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildArchive::mutable_identifiers_for_chunks_to_insert_after(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildArchive.identifiers_for_chunks_to_insert_after)
  return identifiers_for_chunks_to_insert_after_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandSlideRemoveBuildArchive::mutable_identifiers_for_chunks_to_insert_after() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveBuildArchive.identifiers_for_chunks_to_insert_after)
  return &identifiers_for_chunks_to_insert_after_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideRemoveBuildArchive::_internal_identifiers_for_chunks_to_insert_after(int index) const {
  return identifiers_for_chunks_to_insert_after_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideRemoveBuildArchive::identifiers_for_chunks_to_insert_after(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildArchive.identifiers_for_chunks_to_insert_after)
  return _internal_identifiers_for_chunks_to_insert_after(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildArchive::_internal_add_identifiers_for_chunks_to_insert_after() {
  return identifiers_for_chunks_to_insert_after_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildArchive::add_identifiers_for_chunks_to_insert_after() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_chunks_to_insert_after();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveBuildArchive.identifiers_for_chunks_to_insert_after)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandSlideRemoveBuildArchive::identifiers_for_chunks_to_insert_after() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveBuildArchive.identifiers_for_chunks_to_insert_after)
  return identifiers_for_chunks_to_insert_after_;
}

// repeated .TSP.Reference old_tuples_to_update = 6;
inline int CommandSlideRemoveBuildArchive::_internal_old_tuples_to_update_size() const {
  return old_tuples_to_update_.size();
}
inline int CommandSlideRemoveBuildArchive::old_tuples_to_update_size() const {
  return _internal_old_tuples_to_update_size();
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::mutable_old_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildArchive.old_tuples_to_update)
  return old_tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideRemoveBuildArchive::mutable_old_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveBuildArchive.old_tuples_to_update)
  return &old_tuples_to_update_;
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::_internal_old_tuples_to_update(int index) const {
  return old_tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandSlideRemoveBuildArchive::old_tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildArchive.old_tuples_to_update)
  return _internal_old_tuples_to_update(index);
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::_internal_add_old_tuples_to_update() {
  return old_tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandSlideRemoveBuildArchive::add_old_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_old_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveBuildArchive.old_tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideRemoveBuildArchive::old_tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveBuildArchive.old_tuples_to_update)
  return old_tuples_to_update_;
}

// repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
inline int CommandSlideRemoveBuildArchive::_internal_fallback_chunk_identifiers_size() const {
  return fallback_chunk_identifiers_.size();
}
inline int CommandSlideRemoveBuildArchive::fallback_chunk_identifiers_size() const {
  return _internal_fallback_chunk_identifiers_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildArchive::mutable_fallback_chunk_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildArchive.fallback_chunk_identifiers)
  return fallback_chunk_identifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandSlideRemoveBuildArchive::mutable_fallback_chunk_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveBuildArchive.fallback_chunk_identifiers)
  return &fallback_chunk_identifiers_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideRemoveBuildArchive::_internal_fallback_chunk_identifiers(int index) const {
  return fallback_chunk_identifiers_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideRemoveBuildArchive::fallback_chunk_identifiers(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildArchive.fallback_chunk_identifiers)
  return _internal_fallback_chunk_identifiers(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildArchive::_internal_add_fallback_chunk_identifiers() {
  return fallback_chunk_identifiers_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildArchive::add_fallback_chunk_identifiers() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_fallback_chunk_identifiers();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveBuildArchive.fallback_chunk_identifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandSlideRemoveBuildArchive::fallback_chunk_identifiers() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveBuildArchive.fallback_chunk_identifiers)
  return fallback_chunk_identifiers_;
}

// -------------------------------------------------------------------

// RemoveBuildDescriptionArchive

// optional .TSP.UUID slide_id = 1;
inline bool RemoveBuildDescriptionArchive::_internal_has_slide_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_ != nullptr);
  return value;
}
inline bool RemoveBuildDescriptionArchive::has_slide_id() const {
  return _internal_has_slide_id();
}
inline const ::TSP::UUID& RemoveBuildDescriptionArchive::_internal_slide_id() const {
  const ::TSP::UUID* p = slide_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& RemoveBuildDescriptionArchive::slide_id() const {
  // @@protoc_insertion_point(field_get:KN.RemoveBuildDescriptionArchive.slide_id)
  return _internal_slide_id();
}
inline void RemoveBuildDescriptionArchive::unsafe_arena_set_allocated_slide_id(
    ::TSP::UUID* slide_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  slide_id_ = slide_id;
  if (slide_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RemoveBuildDescriptionArchive.slide_id)
}
inline ::TSP::UUID* RemoveBuildDescriptionArchive::release_slide_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* RemoveBuildDescriptionArchive::unsafe_arena_release_slide_id() {
  // @@protoc_insertion_point(field_release:KN.RemoveBuildDescriptionArchive.slide_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* RemoveBuildDescriptionArchive::_internal_mutable_slide_id() {
  _has_bits_[0] |= 0x00000001u;
  if (slide_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    slide_id_ = p;
  }
  return slide_id_;
}
inline ::TSP::UUID* RemoveBuildDescriptionArchive::mutable_slide_id() {
  ::TSP::UUID* _msg = _internal_mutable_slide_id();
  // @@protoc_insertion_point(field_mutable:KN.RemoveBuildDescriptionArchive.slide_id)
  return _msg;
}
inline void RemoveBuildDescriptionArchive::set_allocated_slide_id(::TSP::UUID* slide_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  if (slide_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id));
    if (message_arena != submessage_arena) {
      slide_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slide_id_ = slide_id;
  // @@protoc_insertion_point(field_set_allocated:KN.RemoveBuildDescriptionArchive.slide_id)
}

// optional .TSP.UUID build_id = 2;
inline bool RemoveBuildDescriptionArchive::_internal_has_build_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || build_id_ != nullptr);
  return value;
}
inline bool RemoveBuildDescriptionArchive::has_build_id() const {
  return _internal_has_build_id();
}
inline const ::TSP::UUID& RemoveBuildDescriptionArchive::_internal_build_id() const {
  const ::TSP::UUID* p = build_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& RemoveBuildDescriptionArchive::build_id() const {
  // @@protoc_insertion_point(field_get:KN.RemoveBuildDescriptionArchive.build_id)
  return _internal_build_id();
}
inline void RemoveBuildDescriptionArchive::unsafe_arena_set_allocated_build_id(
    ::TSP::UUID* build_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id_);
  }
  build_id_ = build_id;
  if (build_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.RemoveBuildDescriptionArchive.build_id)
}
inline ::TSP::UUID* RemoveBuildDescriptionArchive::release_build_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = build_id_;
  build_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* RemoveBuildDescriptionArchive::unsafe_arena_release_build_id() {
  // @@protoc_insertion_point(field_release:KN.RemoveBuildDescriptionArchive.build_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = build_id_;
  build_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* RemoveBuildDescriptionArchive::_internal_mutable_build_id() {
  _has_bits_[0] |= 0x00000002u;
  if (build_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    build_id_ = p;
  }
  return build_id_;
}
inline ::TSP::UUID* RemoveBuildDescriptionArchive::mutable_build_id() {
  ::TSP::UUID* _msg = _internal_mutable_build_id();
  // @@protoc_insertion_point(field_mutable:KN.RemoveBuildDescriptionArchive.build_id)
  return _msg;
}
inline void RemoveBuildDescriptionArchive::set_allocated_build_id(::TSP::UUID* build_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id_);
  }
  if (build_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id));
    if (message_arena != submessage_arena) {
      build_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  build_id_ = build_id;
  // @@protoc_insertion_point(field_set_allocated:KN.RemoveBuildDescriptionArchive.build_id)
}

// optional bool should_remove_chunks = 3;
inline bool RemoveBuildDescriptionArchive::_internal_has_should_remove_chunks() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RemoveBuildDescriptionArchive::has_should_remove_chunks() const {
  return _internal_has_should_remove_chunks();
}
inline void RemoveBuildDescriptionArchive::clear_should_remove_chunks() {
  should_remove_chunks_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RemoveBuildDescriptionArchive::_internal_should_remove_chunks() const {
  return should_remove_chunks_;
}
inline bool RemoveBuildDescriptionArchive::should_remove_chunks() const {
  // @@protoc_insertion_point(field_get:KN.RemoveBuildDescriptionArchive.should_remove_chunks)
  return _internal_should_remove_chunks();
}
inline void RemoveBuildDescriptionArchive::_internal_set_should_remove_chunks(bool value) {
  _has_bits_[0] |= 0x00000004u;
  should_remove_chunks_ = value;
}
inline void RemoveBuildDescriptionArchive::set_should_remove_chunks(bool value) {
  _internal_set_should_remove_chunks(value);
  // @@protoc_insertion_point(field_set:KN.RemoveBuildDescriptionArchive.should_remove_chunks)
}

// optional bool should_remove_chunk_identifiers = 4;
inline bool RemoveBuildDescriptionArchive::_internal_has_should_remove_chunk_identifiers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RemoveBuildDescriptionArchive::has_should_remove_chunk_identifiers() const {
  return _internal_has_should_remove_chunk_identifiers();
}
inline void RemoveBuildDescriptionArchive::clear_should_remove_chunk_identifiers() {
  should_remove_chunk_identifiers_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool RemoveBuildDescriptionArchive::_internal_should_remove_chunk_identifiers() const {
  return should_remove_chunk_identifiers_;
}
inline bool RemoveBuildDescriptionArchive::should_remove_chunk_identifiers() const {
  // @@protoc_insertion_point(field_get:KN.RemoveBuildDescriptionArchive.should_remove_chunk_identifiers)
  return _internal_should_remove_chunk_identifiers();
}
inline void RemoveBuildDescriptionArchive::_internal_set_should_remove_chunk_identifiers(bool value) {
  _has_bits_[0] |= 0x00000008u;
  should_remove_chunk_identifiers_ = value;
}
inline void RemoveBuildDescriptionArchive::set_should_remove_chunk_identifiers(bool value) {
  _internal_set_should_remove_chunk_identifiers(value);
  // @@protoc_insertion_point(field_set:KN.RemoveBuildDescriptionArchive.should_remove_chunk_identifiers)
}

// repeated .TSP.Reference tuples_to_update = 5;
inline int RemoveBuildDescriptionArchive::_internal_tuples_to_update_size() const {
  return tuples_to_update_.size();
}
inline int RemoveBuildDescriptionArchive::tuples_to_update_size() const {
  return _internal_tuples_to_update_size();
}
inline ::TSP::Reference* RemoveBuildDescriptionArchive::mutable_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.RemoveBuildDescriptionArchive.tuples_to_update)
  return tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
RemoveBuildDescriptionArchive::mutable_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.RemoveBuildDescriptionArchive.tuples_to_update)
  return &tuples_to_update_;
}
inline const ::TSP::Reference& RemoveBuildDescriptionArchive::_internal_tuples_to_update(int index) const {
  return tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& RemoveBuildDescriptionArchive::tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.RemoveBuildDescriptionArchive.tuples_to_update)
  return _internal_tuples_to_update(index);
}
inline ::TSP::Reference* RemoveBuildDescriptionArchive::_internal_add_tuples_to_update() {
  return tuples_to_update_.Add();
}
inline ::TSP::Reference* RemoveBuildDescriptionArchive::add_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.RemoveBuildDescriptionArchive.tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
RemoveBuildDescriptionArchive::tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.RemoveBuildDescriptionArchive.tuples_to_update)
  return tuples_to_update_;
}

// -------------------------------------------------------------------

// CommandSlideInsertBuildChunkArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideInsertBuildChunkArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildChunkArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideInsertBuildChunkArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideInsertBuildChunkArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.super)
  return _internal_super();
}
inline void CommandSlideInsertBuildChunkArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildChunkArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildChunkArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildChunkArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildChunkArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildChunkArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideInsertBuildChunkArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildChunkArchive.super)
  return _msg;
}
inline void CommandSlideInsertBuildChunkArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildChunkArchive.super)
}

// required .TSP.UUID slide_id = 2;
inline bool CommandSlideInsertBuildChunkArchive::_internal_has_slide_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildChunkArchive::has_slide_id() const {
  return _internal_has_slide_id();
}
inline const ::TSP::UUID& CommandSlideInsertBuildChunkArchive::_internal_slide_id() const {
  const ::TSP::UUID* p = slide_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSlideInsertBuildChunkArchive::slide_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.slide_id)
  return _internal_slide_id();
}
inline void CommandSlideInsertBuildChunkArchive::unsafe_arena_set_allocated_slide_id(
    ::TSP::UUID* slide_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  slide_id_ = slide_id;
  if (slide_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildChunkArchive.slide_id)
}
inline ::TSP::UUID* CommandSlideInsertBuildChunkArchive::release_slide_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSlideInsertBuildChunkArchive::unsafe_arena_release_slide_id() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildChunkArchive.slide_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSlideInsertBuildChunkArchive::_internal_mutable_slide_id() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    slide_id_ = p;
  }
  return slide_id_;
}
inline ::TSP::UUID* CommandSlideInsertBuildChunkArchive::mutable_slide_id() {
  ::TSP::UUID* _msg = _internal_mutable_slide_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildChunkArchive.slide_id)
  return _msg;
}
inline void CommandSlideInsertBuildChunkArchive::set_allocated_slide_id(::TSP::UUID* slide_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  if (slide_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id));
    if (message_arena != submessage_arena) {
      slide_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_ = slide_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildChunkArchive.slide_id)
}

// required .TSP.Reference chunk_to_insert = 3;
inline bool CommandSlideInsertBuildChunkArchive::_internal_has_chunk_to_insert() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || chunk_to_insert_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildChunkArchive::has_chunk_to_insert() const {
  return _internal_has_chunk_to_insert();
}
inline const ::TSP::Reference& CommandSlideInsertBuildChunkArchive::_internal_chunk_to_insert() const {
  const ::TSP::Reference* p = chunk_to_insert_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideInsertBuildChunkArchive::chunk_to_insert() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.chunk_to_insert)
  return _internal_chunk_to_insert();
}
inline void CommandSlideInsertBuildChunkArchive::unsafe_arena_set_allocated_chunk_to_insert(
    ::TSP::Reference* chunk_to_insert) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_to_insert_);
  }
  chunk_to_insert_ = chunk_to_insert;
  if (chunk_to_insert) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildChunkArchive.chunk_to_insert)
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::release_chunk_to_insert() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = chunk_to_insert_;
  chunk_to_insert_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::unsafe_arena_release_chunk_to_insert() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildChunkArchive.chunk_to_insert)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = chunk_to_insert_;
  chunk_to_insert_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::_internal_mutable_chunk_to_insert() {
  _has_bits_[0] |= 0x00000004u;
  if (chunk_to_insert_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    chunk_to_insert_ = p;
  }
  return chunk_to_insert_;
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::mutable_chunk_to_insert() {
  ::TSP::Reference* _msg = _internal_mutable_chunk_to_insert();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildChunkArchive.chunk_to_insert)
  return _msg;
}
inline void CommandSlideInsertBuildChunkArchive::set_allocated_chunk_to_insert(::TSP::Reference* chunk_to_insert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_to_insert_);
  }
  if (chunk_to_insert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_to_insert));
    if (message_arena != submessage_arena) {
      chunk_to_insert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk_to_insert, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  chunk_to_insert_ = chunk_to_insert;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildChunkArchive.chunk_to_insert)
}

// optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 4;
inline bool CommandSlideInsertBuildChunkArchive::_internal_has_identifier_for_chunk_to_insert_after() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || identifier_for_chunk_to_insert_after_ != nullptr);
  return value;
}
inline bool CommandSlideInsertBuildChunkArchive::has_identifier_for_chunk_to_insert_after() const {
  return _internal_has_identifier_for_chunk_to_insert_after();
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideInsertBuildChunkArchive::_internal_identifier_for_chunk_to_insert_after() const {
  const ::KN::BuildChunkIdentifierArchive* p = identifier_for_chunk_to_insert_after_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildChunkIdentifierArchive&>(
      ::KN::_BuildChunkIdentifierArchive_default_instance_);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideInsertBuildChunkArchive::identifier_for_chunk_to_insert_after() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.identifier_for_chunk_to_insert_after)
  return _internal_identifier_for_chunk_to_insert_after();
}
inline void CommandSlideInsertBuildChunkArchive::unsafe_arena_set_allocated_identifier_for_chunk_to_insert_after(
    ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_insert_after_);
  }
  identifier_for_chunk_to_insert_after_ = identifier_for_chunk_to_insert_after;
  if (identifier_for_chunk_to_insert_after) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideInsertBuildChunkArchive.identifier_for_chunk_to_insert_after)
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideInsertBuildChunkArchive::release_identifier_for_chunk_to_insert_after() {
  _has_bits_[0] &= ~0x00000008u;
  ::KN::BuildChunkIdentifierArchive* temp = identifier_for_chunk_to_insert_after_;
  identifier_for_chunk_to_insert_after_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideInsertBuildChunkArchive::unsafe_arena_release_identifier_for_chunk_to_insert_after() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideInsertBuildChunkArchive.identifier_for_chunk_to_insert_after)
  _has_bits_[0] &= ~0x00000008u;
  ::KN::BuildChunkIdentifierArchive* temp = identifier_for_chunk_to_insert_after_;
  identifier_for_chunk_to_insert_after_ = nullptr;
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideInsertBuildChunkArchive::_internal_mutable_identifier_for_chunk_to_insert_after() {
  _has_bits_[0] |= 0x00000008u;
  if (identifier_for_chunk_to_insert_after_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildChunkIdentifierArchive>(GetArenaForAllocation());
    identifier_for_chunk_to_insert_after_ = p;
  }
  return identifier_for_chunk_to_insert_after_;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideInsertBuildChunkArchive::mutable_identifier_for_chunk_to_insert_after() {
  ::KN::BuildChunkIdentifierArchive* _msg = _internal_mutable_identifier_for_chunk_to_insert_after();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildChunkArchive.identifier_for_chunk_to_insert_after)
  return _msg;
}
inline void CommandSlideInsertBuildChunkArchive::set_allocated_identifier_for_chunk_to_insert_after(::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_insert_after_);
  }
  if (identifier_for_chunk_to_insert_after) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_insert_after));
    if (message_arena != submessage_arena) {
      identifier_for_chunk_to_insert_after = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier_for_chunk_to_insert_after, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  identifier_for_chunk_to_insert_after_ = identifier_for_chunk_to_insert_after;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideInsertBuildChunkArchive.identifier_for_chunk_to_insert_after)
}

// repeated .TSP.Reference tuples_to_update = 5;
inline int CommandSlideInsertBuildChunkArchive::_internal_tuples_to_update_size() const {
  return tuples_to_update_.size();
}
inline int CommandSlideInsertBuildChunkArchive::tuples_to_update_size() const {
  return _internal_tuples_to_update_size();
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::mutable_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildChunkArchive.tuples_to_update)
  return tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideInsertBuildChunkArchive::mutable_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertBuildChunkArchive.tuples_to_update)
  return &tuples_to_update_;
}
inline const ::TSP::Reference& CommandSlideInsertBuildChunkArchive::_internal_tuples_to_update(int index) const {
  return tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandSlideInsertBuildChunkArchive::tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.tuples_to_update)
  return _internal_tuples_to_update(index);
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::_internal_add_tuples_to_update() {
  return tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::add_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertBuildChunkArchive.tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideInsertBuildChunkArchive::tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertBuildChunkArchive.tuples_to_update)
  return tuples_to_update_;
}

// repeated .TSP.Reference old_tuples_to_update = 6;
inline int CommandSlideInsertBuildChunkArchive::_internal_old_tuples_to_update_size() const {
  return old_tuples_to_update_.size();
}
inline int CommandSlideInsertBuildChunkArchive::old_tuples_to_update_size() const {
  return _internal_old_tuples_to_update_size();
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::mutable_old_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideInsertBuildChunkArchive.old_tuples_to_update)
  return old_tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideInsertBuildChunkArchive::mutable_old_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideInsertBuildChunkArchive.old_tuples_to_update)
  return &old_tuples_to_update_;
}
inline const ::TSP::Reference& CommandSlideInsertBuildChunkArchive::_internal_old_tuples_to_update(int index) const {
  return old_tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandSlideInsertBuildChunkArchive::old_tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.old_tuples_to_update)
  return _internal_old_tuples_to_update(index);
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::_internal_add_old_tuples_to_update() {
  return old_tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandSlideInsertBuildChunkArchive::add_old_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_old_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandSlideInsertBuildChunkArchive.old_tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideInsertBuildChunkArchive::old_tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideInsertBuildChunkArchive.old_tuples_to_update)
  return old_tuples_to_update_;
}

// optional bool needs_selection_update = 7;
inline bool CommandSlideInsertBuildChunkArchive::_internal_has_needs_selection_update() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSlideInsertBuildChunkArchive::has_needs_selection_update() const {
  return _internal_has_needs_selection_update();
}
inline void CommandSlideInsertBuildChunkArchive::clear_needs_selection_update() {
  needs_selection_update_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSlideInsertBuildChunkArchive::_internal_needs_selection_update() const {
  return needs_selection_update_;
}
inline bool CommandSlideInsertBuildChunkArchive::needs_selection_update() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.needs_selection_update)
  return _internal_needs_selection_update();
}
inline void CommandSlideInsertBuildChunkArchive::_internal_set_needs_selection_update(bool value) {
  _has_bits_[0] |= 0x00000010u;
  needs_selection_update_ = value;
}
inline void CommandSlideInsertBuildChunkArchive::set_needs_selection_update(bool value) {
  _internal_set_needs_selection_update(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertBuildChunkArchive.needs_selection_update)
}

// optional bool should_assign_chunk_identifier = 8;
inline bool CommandSlideInsertBuildChunkArchive::_internal_has_should_assign_chunk_identifier() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSlideInsertBuildChunkArchive::has_should_assign_chunk_identifier() const {
  return _internal_has_should_assign_chunk_identifier();
}
inline void CommandSlideInsertBuildChunkArchive::clear_should_assign_chunk_identifier() {
  should_assign_chunk_identifier_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandSlideInsertBuildChunkArchive::_internal_should_assign_chunk_identifier() const {
  return should_assign_chunk_identifier_;
}
inline bool CommandSlideInsertBuildChunkArchive::should_assign_chunk_identifier() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideInsertBuildChunkArchive.should_assign_chunk_identifier)
  return _internal_should_assign_chunk_identifier();
}
inline void CommandSlideInsertBuildChunkArchive::_internal_set_should_assign_chunk_identifier(bool value) {
  _has_bits_[0] |= 0x00000020u;
  should_assign_chunk_identifier_ = value;
}
inline void CommandSlideInsertBuildChunkArchive::set_should_assign_chunk_identifier(bool value) {
  _internal_set_should_assign_chunk_identifier(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideInsertBuildChunkArchive.should_assign_chunk_identifier)
}

// -------------------------------------------------------------------

// CommandSlideRemoveBuildChunkArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideRemoveBuildChunkArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildChunkArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideRemoveBuildChunkArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideRemoveBuildChunkArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.super)
  return _internal_super();
}
inline void CommandSlideRemoveBuildChunkArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildChunkArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildChunkArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildChunkArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildChunkArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideRemoveBuildChunkArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildChunkArchive.super)
  return _msg;
}
inline void CommandSlideRemoveBuildChunkArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.super)
}

// required .TSP.UUID slide_id = 2;
inline bool CommandSlideRemoveBuildChunkArchive::_internal_has_slide_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildChunkArchive::has_slide_id() const {
  return _internal_has_slide_id();
}
inline const ::TSP::UUID& CommandSlideRemoveBuildChunkArchive::_internal_slide_id() const {
  const ::TSP::UUID* p = slide_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSlideRemoveBuildChunkArchive::slide_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.slide_id)
  return _internal_slide_id();
}
inline void CommandSlideRemoveBuildChunkArchive::unsafe_arena_set_allocated_slide_id(
    ::TSP::UUID* slide_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  slide_id_ = slide_id;
  if (slide_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.slide_id)
}
inline ::TSP::UUID* CommandSlideRemoveBuildChunkArchive::release_slide_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSlideRemoveBuildChunkArchive::unsafe_arena_release_slide_id() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildChunkArchive.slide_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSlideRemoveBuildChunkArchive::_internal_mutable_slide_id() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    slide_id_ = p;
  }
  return slide_id_;
}
inline ::TSP::UUID* CommandSlideRemoveBuildChunkArchive::mutable_slide_id() {
  ::TSP::UUID* _msg = _internal_mutable_slide_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildChunkArchive.slide_id)
  return _msg;
}
inline void CommandSlideRemoveBuildChunkArchive::set_allocated_slide_id(::TSP::UUID* slide_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  if (slide_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id));
    if (message_arena != submessage_arena) {
      slide_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_ = slide_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.slide_id)
}

// optional .TSP.Reference removed_chunk = 3;
inline bool CommandSlideRemoveBuildChunkArchive::_internal_has_removed_chunk() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || removed_chunk_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildChunkArchive::has_removed_chunk() const {
  return _internal_has_removed_chunk();
}
inline const ::TSP::Reference& CommandSlideRemoveBuildChunkArchive::_internal_removed_chunk() const {
  const ::TSP::Reference* p = removed_chunk_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlideRemoveBuildChunkArchive::removed_chunk() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.removed_chunk)
  return _internal_removed_chunk();
}
inline void CommandSlideRemoveBuildChunkArchive::unsafe_arena_set_allocated_removed_chunk(
    ::TSP::Reference* removed_chunk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_chunk_);
  }
  removed_chunk_ = removed_chunk;
  if (removed_chunk) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.removed_chunk)
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::release_removed_chunk() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = removed_chunk_;
  removed_chunk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::unsafe_arena_release_removed_chunk() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildChunkArchive.removed_chunk)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = removed_chunk_;
  removed_chunk_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::_internal_mutable_removed_chunk() {
  _has_bits_[0] |= 0x00000004u;
  if (removed_chunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    removed_chunk_ = p;
  }
  return removed_chunk_;
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::mutable_removed_chunk() {
  ::TSP::Reference* _msg = _internal_mutable_removed_chunk();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildChunkArchive.removed_chunk)
  return _msg;
}
inline void CommandSlideRemoveBuildChunkArchive::set_allocated_removed_chunk(::TSP::Reference* removed_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_chunk_);
  }
  if (removed_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_chunk));
    if (message_arena != submessage_arena) {
      removed_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removed_chunk, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  removed_chunk_ = removed_chunk;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.removed_chunk)
}

// optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_remove = 4;
inline bool CommandSlideRemoveBuildChunkArchive::_internal_has_identifier_for_chunk_to_remove() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || identifier_for_chunk_to_remove_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildChunkArchive::has_identifier_for_chunk_to_remove() const {
  return _internal_has_identifier_for_chunk_to_remove();
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideRemoveBuildChunkArchive::_internal_identifier_for_chunk_to_remove() const {
  const ::KN::BuildChunkIdentifierArchive* p = identifier_for_chunk_to_remove_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildChunkIdentifierArchive&>(
      ::KN::_BuildChunkIdentifierArchive_default_instance_);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideRemoveBuildChunkArchive::identifier_for_chunk_to_remove() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_remove)
  return _internal_identifier_for_chunk_to_remove();
}
inline void CommandSlideRemoveBuildChunkArchive::unsafe_arena_set_allocated_identifier_for_chunk_to_remove(
    ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_remove) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_remove_);
  }
  identifier_for_chunk_to_remove_ = identifier_for_chunk_to_remove;
  if (identifier_for_chunk_to_remove) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_remove)
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildChunkArchive::release_identifier_for_chunk_to_remove() {
  _has_bits_[0] &= ~0x00000008u;
  ::KN::BuildChunkIdentifierArchive* temp = identifier_for_chunk_to_remove_;
  identifier_for_chunk_to_remove_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildChunkArchive::unsafe_arena_release_identifier_for_chunk_to_remove() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_remove)
  _has_bits_[0] &= ~0x00000008u;
  ::KN::BuildChunkIdentifierArchive* temp = identifier_for_chunk_to_remove_;
  identifier_for_chunk_to_remove_ = nullptr;
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildChunkArchive::_internal_mutable_identifier_for_chunk_to_remove() {
  _has_bits_[0] |= 0x00000008u;
  if (identifier_for_chunk_to_remove_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildChunkIdentifierArchive>(GetArenaForAllocation());
    identifier_for_chunk_to_remove_ = p;
  }
  return identifier_for_chunk_to_remove_;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildChunkArchive::mutable_identifier_for_chunk_to_remove() {
  ::KN::BuildChunkIdentifierArchive* _msg = _internal_mutable_identifier_for_chunk_to_remove();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_remove)
  return _msg;
}
inline void CommandSlideRemoveBuildChunkArchive::set_allocated_identifier_for_chunk_to_remove(::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_remove_);
  }
  if (identifier_for_chunk_to_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_remove));
    if (message_arena != submessage_arena) {
      identifier_for_chunk_to_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier_for_chunk_to_remove, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  identifier_for_chunk_to_remove_ = identifier_for_chunk_to_remove;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_remove)
}

// optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 5;
inline bool CommandSlideRemoveBuildChunkArchive::_internal_has_identifier_for_chunk_to_insert_after() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || identifier_for_chunk_to_insert_after_ != nullptr);
  return value;
}
inline bool CommandSlideRemoveBuildChunkArchive::has_identifier_for_chunk_to_insert_after() const {
  return _internal_has_identifier_for_chunk_to_insert_after();
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideRemoveBuildChunkArchive::_internal_identifier_for_chunk_to_insert_after() const {
  const ::KN::BuildChunkIdentifierArchive* p = identifier_for_chunk_to_insert_after_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::BuildChunkIdentifierArchive&>(
      ::KN::_BuildChunkIdentifierArchive_default_instance_);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideRemoveBuildChunkArchive::identifier_for_chunk_to_insert_after() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_insert_after)
  return _internal_identifier_for_chunk_to_insert_after();
}
inline void CommandSlideRemoveBuildChunkArchive::unsafe_arena_set_allocated_identifier_for_chunk_to_insert_after(
    ::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_insert_after_);
  }
  identifier_for_chunk_to_insert_after_ = identifier_for_chunk_to_insert_after;
  if (identifier_for_chunk_to_insert_after) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_insert_after)
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildChunkArchive::release_identifier_for_chunk_to_insert_after() {
  _has_bits_[0] &= ~0x00000010u;
  ::KN::BuildChunkIdentifierArchive* temp = identifier_for_chunk_to_insert_after_;
  identifier_for_chunk_to_insert_after_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildChunkArchive::unsafe_arena_release_identifier_for_chunk_to_insert_after() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_insert_after)
  _has_bits_[0] &= ~0x00000010u;
  ::KN::BuildChunkIdentifierArchive* temp = identifier_for_chunk_to_insert_after_;
  identifier_for_chunk_to_insert_after_ = nullptr;
  return temp;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildChunkArchive::_internal_mutable_identifier_for_chunk_to_insert_after() {
  _has_bits_[0] |= 0x00000010u;
  if (identifier_for_chunk_to_insert_after_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::BuildChunkIdentifierArchive>(GetArenaForAllocation());
    identifier_for_chunk_to_insert_after_ = p;
  }
  return identifier_for_chunk_to_insert_after_;
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideRemoveBuildChunkArchive::mutable_identifier_for_chunk_to_insert_after() {
  ::KN::BuildChunkIdentifierArchive* _msg = _internal_mutable_identifier_for_chunk_to_insert_after();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_insert_after)
  return _msg;
}
inline void CommandSlideRemoveBuildChunkArchive::set_allocated_identifier_for_chunk_to_insert_after(::KN::BuildChunkIdentifierArchive* identifier_for_chunk_to_insert_after) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_insert_after_);
  }
  if (identifier_for_chunk_to_insert_after) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_for_chunk_to_insert_after));
    if (message_arena != submessage_arena) {
      identifier_for_chunk_to_insert_after = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier_for_chunk_to_insert_after, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  identifier_for_chunk_to_insert_after_ = identifier_for_chunk_to_insert_after;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_insert_after)
}

// repeated .TSP.Reference tuples_to_update = 6;
inline int CommandSlideRemoveBuildChunkArchive::_internal_tuples_to_update_size() const {
  return tuples_to_update_.size();
}
inline int CommandSlideRemoveBuildChunkArchive::tuples_to_update_size() const {
  return _internal_tuples_to_update_size();
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::mutable_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildChunkArchive.tuples_to_update)
  return tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideRemoveBuildChunkArchive::mutable_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveBuildChunkArchive.tuples_to_update)
  return &tuples_to_update_;
}
inline const ::TSP::Reference& CommandSlideRemoveBuildChunkArchive::_internal_tuples_to_update(int index) const {
  return tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandSlideRemoveBuildChunkArchive::tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.tuples_to_update)
  return _internal_tuples_to_update(index);
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::_internal_add_tuples_to_update() {
  return tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::add_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveBuildChunkArchive.tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideRemoveBuildChunkArchive::tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveBuildChunkArchive.tuples_to_update)
  return tuples_to_update_;
}

// repeated .TSP.Reference old_tuples_to_update = 7;
inline int CommandSlideRemoveBuildChunkArchive::_internal_old_tuples_to_update_size() const {
  return old_tuples_to_update_.size();
}
inline int CommandSlideRemoveBuildChunkArchive::old_tuples_to_update_size() const {
  return _internal_old_tuples_to_update_size();
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::mutable_old_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideRemoveBuildChunkArchive.old_tuples_to_update)
  return old_tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideRemoveBuildChunkArchive::mutable_old_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideRemoveBuildChunkArchive.old_tuples_to_update)
  return &old_tuples_to_update_;
}
inline const ::TSP::Reference& CommandSlideRemoveBuildChunkArchive::_internal_old_tuples_to_update(int index) const {
  return old_tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandSlideRemoveBuildChunkArchive::old_tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.old_tuples_to_update)
  return _internal_old_tuples_to_update(index);
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::_internal_add_old_tuples_to_update() {
  return old_tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandSlideRemoveBuildChunkArchive::add_old_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_old_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandSlideRemoveBuildChunkArchive.old_tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideRemoveBuildChunkArchive::old_tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideRemoveBuildChunkArchive.old_tuples_to_update)
  return old_tuples_to_update_;
}

// optional bool needs_selection_update = 8;
inline bool CommandSlideRemoveBuildChunkArchive::_internal_has_needs_selection_update() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSlideRemoveBuildChunkArchive::has_needs_selection_update() const {
  return _internal_has_needs_selection_update();
}
inline void CommandSlideRemoveBuildChunkArchive::clear_needs_selection_update() {
  needs_selection_update_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandSlideRemoveBuildChunkArchive::_internal_needs_selection_update() const {
  return needs_selection_update_;
}
inline bool CommandSlideRemoveBuildChunkArchive::needs_selection_update() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideRemoveBuildChunkArchive.needs_selection_update)
  return _internal_needs_selection_update();
}
inline void CommandSlideRemoveBuildChunkArchive::_internal_set_needs_selection_update(bool value) {
  _has_bits_[0] |= 0x00000020u;
  needs_selection_update_ = value;
}
inline void CommandSlideRemoveBuildChunkArchive::set_needs_selection_update(bool value) {
  _internal_set_needs_selection_update(value);
  // @@protoc_insertion_point(field_set:KN.CommandSlideRemoveBuildChunkArchive.needs_selection_update)
}

// -------------------------------------------------------------------

// CommandSlideMoveBuildChunksArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideMoveBuildChunksArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideMoveBuildChunksArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideMoveBuildChunksArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideMoveBuildChunksArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunksArchive.super)
  return _internal_super();
}
inline void CommandSlideMoveBuildChunksArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideMoveBuildChunksArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunksArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunksArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideMoveBuildChunksArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunksArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideMoveBuildChunksArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildChunksArchive.super)
  return _msg;
}
inline void CommandSlideMoveBuildChunksArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideMoveBuildChunksArchive.super)
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move = 2;
inline int CommandSlideMoveBuildChunksArchive::_internal_identifiers_for_chunks_to_move_size() const {
  return identifiers_for_chunks_to_move_.size();
}
inline int CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move_size() const {
  return _internal_identifiers_for_chunks_to_move_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::mutable_identifiers_for_chunks_to_move(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move)
  return identifiers_for_chunks_to_move_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandSlideMoveBuildChunksArchive::mutable_identifiers_for_chunks_to_move() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move)
  return &identifiers_for_chunks_to_move_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideMoveBuildChunksArchive::_internal_identifiers_for_chunks_to_move(int index) const {
  return identifiers_for_chunks_to_move_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move)
  return _internal_identifiers_for_chunks_to_move(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::_internal_add_identifiers_for_chunks_to_move() {
  return identifiers_for_chunks_to_move_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::add_identifiers_for_chunks_to_move() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_chunks_to_move();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move)
  return identifiers_for_chunks_to_move_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after = 3;
inline int CommandSlideMoveBuildChunksArchive::_internal_identifiers_for_chunks_to_move_after_size() const {
  return identifiers_for_chunks_to_move_after_.size();
}
inline int CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move_after_size() const {
  return _internal_identifiers_for_chunks_to_move_after_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::mutable_identifiers_for_chunks_to_move_after(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after)
  return identifiers_for_chunks_to_move_after_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandSlideMoveBuildChunksArchive::mutable_identifiers_for_chunks_to_move_after() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after)
  return &identifiers_for_chunks_to_move_after_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideMoveBuildChunksArchive::_internal_identifiers_for_chunks_to_move_after(int index) const {
  return identifiers_for_chunks_to_move_after_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move_after(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after)
  return _internal_identifiers_for_chunks_to_move_after(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::_internal_add_identifiers_for_chunks_to_move_after() {
  return identifiers_for_chunks_to_move_after_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::add_identifiers_for_chunks_to_move_after() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_chunks_to_move_after();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move_after() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after)
  return identifiers_for_chunks_to_move_after_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after_for_undo = 4;
inline int CommandSlideMoveBuildChunksArchive::_internal_identifiers_for_chunks_to_move_after_for_undo_size() const {
  return identifiers_for_chunks_to_move_after_for_undo_.size();
}
inline int CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move_after_for_undo_size() const {
  return _internal_identifiers_for_chunks_to_move_after_for_undo_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::mutable_identifiers_for_chunks_to_move_after_for_undo(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after_for_undo)
  return identifiers_for_chunks_to_move_after_for_undo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandSlideMoveBuildChunksArchive::mutable_identifiers_for_chunks_to_move_after_for_undo() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after_for_undo)
  return &identifiers_for_chunks_to_move_after_for_undo_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideMoveBuildChunksArchive::_internal_identifiers_for_chunks_to_move_after_for_undo(int index) const {
  return identifiers_for_chunks_to_move_after_for_undo_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move_after_for_undo(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after_for_undo)
  return _internal_identifiers_for_chunks_to_move_after_for_undo(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::_internal_add_identifiers_for_chunks_to_move_after_for_undo() {
  return identifiers_for_chunks_to_move_after_for_undo_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::add_identifiers_for_chunks_to_move_after_for_undo() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_chunks_to_move_after_for_undo();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after_for_undo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move_after_for_undo() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after_for_undo)
  return identifiers_for_chunks_to_move_after_for_undo_;
}

// repeated .TSP.Reference tuples_to_update = 5;
inline int CommandSlideMoveBuildChunksArchive::_internal_tuples_to_update_size() const {
  return tuples_to_update_.size();
}
inline int CommandSlideMoveBuildChunksArchive::tuples_to_update_size() const {
  return _internal_tuples_to_update_size();
}
inline ::TSP::Reference* CommandSlideMoveBuildChunksArchive::mutable_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildChunksArchive.tuples_to_update)
  return tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideMoveBuildChunksArchive::mutable_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveBuildChunksArchive.tuples_to_update)
  return &tuples_to_update_;
}
inline const ::TSP::Reference& CommandSlideMoveBuildChunksArchive::_internal_tuples_to_update(int index) const {
  return tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandSlideMoveBuildChunksArchive::tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunksArchive.tuples_to_update)
  return _internal_tuples_to_update(index);
}
inline ::TSP::Reference* CommandSlideMoveBuildChunksArchive::_internal_add_tuples_to_update() {
  return tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandSlideMoveBuildChunksArchive::add_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveBuildChunksArchive.tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideMoveBuildChunksArchive::tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveBuildChunksArchive.tuples_to_update)
  return tuples_to_update_;
}

// repeated .TSP.Reference old_tuples_to_update = 6;
inline int CommandSlideMoveBuildChunksArchive::_internal_old_tuples_to_update_size() const {
  return old_tuples_to_update_.size();
}
inline int CommandSlideMoveBuildChunksArchive::old_tuples_to_update_size() const {
  return _internal_old_tuples_to_update_size();
}
inline ::TSP::Reference* CommandSlideMoveBuildChunksArchive::mutable_old_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildChunksArchive.old_tuples_to_update)
  return old_tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideMoveBuildChunksArchive::mutable_old_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveBuildChunksArchive.old_tuples_to_update)
  return &old_tuples_to_update_;
}
inline const ::TSP::Reference& CommandSlideMoveBuildChunksArchive::_internal_old_tuples_to_update(int index) const {
  return old_tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandSlideMoveBuildChunksArchive::old_tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunksArchive.old_tuples_to_update)
  return _internal_old_tuples_to_update(index);
}
inline ::TSP::Reference* CommandSlideMoveBuildChunksArchive::_internal_add_old_tuples_to_update() {
  return old_tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandSlideMoveBuildChunksArchive::add_old_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_old_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveBuildChunksArchive.old_tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideMoveBuildChunksArchive::old_tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveBuildChunksArchive.old_tuples_to_update)
  return old_tuples_to_update_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_including_clustered_inactive_chunks = 7;
inline int CommandSlideMoveBuildChunksArchive::_internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks_size() const {
  return identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.size();
}
inline int CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move_including_clustered_inactive_chunks_size() const {
  return _internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::mutable_identifiers_for_chunks_to_move_including_clustered_inactive_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_including_clustered_inactive_chunks)
  return identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandSlideMoveBuildChunksArchive::mutable_identifiers_for_chunks_to_move_including_clustered_inactive_chunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_including_clustered_inactive_chunks)
  return &identifiers_for_chunks_to_move_including_clustered_inactive_chunks_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideMoveBuildChunksArchive::_internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks(int index) const {
  return identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move_including_clustered_inactive_chunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_including_clustered_inactive_chunks)
  return _internal_identifiers_for_chunks_to_move_including_clustered_inactive_chunks(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::_internal_add_identifiers_for_chunks_to_move_including_clustered_inactive_chunks() {
  return identifiers_for_chunks_to_move_including_clustered_inactive_chunks_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandSlideMoveBuildChunksArchive::add_identifiers_for_chunks_to_move_including_clustered_inactive_chunks() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_chunks_to_move_including_clustered_inactive_chunks();
  // @@protoc_insertion_point(field_add:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_including_clustered_inactive_chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandSlideMoveBuildChunksArchive::identifiers_for_chunks_to_move_including_clustered_inactive_chunks() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_including_clustered_inactive_chunks)
  return identifiers_for_chunks_to_move_including_clustered_inactive_chunks_;
}

// -------------------------------------------------------------------

// CommandBuildSetValueArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandBuildSetValueArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandBuildSetValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandBuildSetValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandBuildSetValueArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.super)
  return _internal_super();
}
inline void CommandBuildSetValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildSetValueArchive.super)
}
inline ::TSK::CommandArchive* CommandBuildSetValueArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildSetValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildSetValueArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildSetValueArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandBuildSetValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.super)
  return _msg;
}
inline void CommandBuildSetValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildSetValueArchive.super)
}

// optional .TSP.Reference tuple = 2;
inline bool CommandBuildSetValueArchive::_internal_has_tuple() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tuple_ != nullptr);
  return value;
}
inline bool CommandBuildSetValueArchive::has_tuple() const {
  return _internal_has_tuple();
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::_internal_tuple() const {
  const ::TSP::Reference* p = tuple_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::tuple() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.tuple)
  return _internal_tuple();
}
inline void CommandBuildSetValueArchive::unsafe_arena_set_allocated_tuple(
    ::TSP::Reference* tuple) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuple_);
  }
  tuple_ = tuple;
  if (tuple) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildSetValueArchive.tuple)
}
inline ::TSP::Reference* CommandBuildSetValueArchive::release_tuple() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = tuple_;
  tuple_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandBuildSetValueArchive::unsafe_arena_release_tuple() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildSetValueArchive.tuple)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = tuple_;
  tuple_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandBuildSetValueArchive::_internal_mutable_tuple() {
  _has_bits_[0] |= 0x00000002u;
  if (tuple_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    tuple_ = p;
  }
  return tuple_;
}
inline ::TSP::Reference* CommandBuildSetValueArchive::mutable_tuple() {
  ::TSP::Reference* _msg = _internal_mutable_tuple();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.tuple)
  return _msg;
}
inline void CommandBuildSetValueArchive::set_allocated_tuple(::TSP::Reference* tuple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuple_);
  }
  if (tuple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuple));
    if (message_arena != submessage_arena) {
      tuple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tuple_ = tuple;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildSetValueArchive.tuple)
}

// repeated .TSP.Reference chunks_to_add = 3;
inline int CommandBuildSetValueArchive::_internal_chunks_to_add_size() const {
  return chunks_to_add_.size();
}
inline int CommandBuildSetValueArchive::chunks_to_add_size() const {
  return _internal_chunks_to_add_size();
}
inline ::TSP::Reference* CommandBuildSetValueArchive::mutable_chunks_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.chunks_to_add)
  return chunks_to_add_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildSetValueArchive::mutable_chunks_to_add() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.chunks_to_add)
  return &chunks_to_add_;
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::_internal_chunks_to_add(int index) const {
  return chunks_to_add_.Get(index);
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::chunks_to_add(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.chunks_to_add)
  return _internal_chunks_to_add(index);
}
inline ::TSP::Reference* CommandBuildSetValueArchive::_internal_add_chunks_to_add() {
  return chunks_to_add_.Add();
}
inline ::TSP::Reference* CommandBuildSetValueArchive::add_chunks_to_add() {
  ::TSP::Reference* _add = _internal_add_chunks_to_add();
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.chunks_to_add)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildSetValueArchive::chunks_to_add() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.chunks_to_add)
  return chunks_to_add_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 4;
inline int CommandBuildSetValueArchive::_internal_identifiers_for_chunks_to_insert_after_size() const {
  return identifiers_for_chunks_to_insert_after_.size();
}
inline int CommandBuildSetValueArchive::identifiers_for_chunks_to_insert_after_size() const {
  return _internal_identifiers_for_chunks_to_insert_after_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::mutable_identifiers_for_chunks_to_insert_after(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_insert_after)
  return identifiers_for_chunks_to_insert_after_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildSetValueArchive::mutable_identifiers_for_chunks_to_insert_after() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_insert_after)
  return &identifiers_for_chunks_to_insert_after_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::_internal_identifiers_for_chunks_to_insert_after(int index) const {
  return identifiers_for_chunks_to_insert_after_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::identifiers_for_chunks_to_insert_after(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_insert_after)
  return _internal_identifiers_for_chunks_to_insert_after(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::_internal_add_identifiers_for_chunks_to_insert_after() {
  return identifiers_for_chunks_to_insert_after_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::add_identifiers_for_chunks_to_insert_after() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_chunks_to_insert_after();
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_insert_after)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildSetValueArchive::identifiers_for_chunks_to_insert_after() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_insert_after)
  return identifiers_for_chunks_to_insert_after_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 5;
inline int CommandBuildSetValueArchive::_internal_identifiers_for_chunks_to_remove_size() const {
  return identifiers_for_chunks_to_remove_.size();
}
inline int CommandBuildSetValueArchive::identifiers_for_chunks_to_remove_size() const {
  return _internal_identifiers_for_chunks_to_remove_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::mutable_identifiers_for_chunks_to_remove(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_remove)
  return identifiers_for_chunks_to_remove_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildSetValueArchive::mutable_identifiers_for_chunks_to_remove() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_remove)
  return &identifiers_for_chunks_to_remove_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::_internal_identifiers_for_chunks_to_remove(int index) const {
  return identifiers_for_chunks_to_remove_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::identifiers_for_chunks_to_remove(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_remove)
  return _internal_identifiers_for_chunks_to_remove(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::_internal_add_identifiers_for_chunks_to_remove() {
  return identifiers_for_chunks_to_remove_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::add_identifiers_for_chunks_to_remove() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_chunks_to_remove();
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_remove)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildSetValueArchive::identifiers_for_chunks_to_remove() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_remove)
  return identifiers_for_chunks_to_remove_;
}

// repeated .TSP.Reference tuples_to_update = 6;
inline int CommandBuildSetValueArchive::_internal_tuples_to_update_size() const {
  return tuples_to_update_.size();
}
inline int CommandBuildSetValueArchive::tuples_to_update_size() const {
  return _internal_tuples_to_update_size();
}
inline ::TSP::Reference* CommandBuildSetValueArchive::mutable_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.tuples_to_update)
  return tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildSetValueArchive::mutable_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.tuples_to_update)
  return &tuples_to_update_;
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::_internal_tuples_to_update(int index) const {
  return tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.tuples_to_update)
  return _internal_tuples_to_update(index);
}
inline ::TSP::Reference* CommandBuildSetValueArchive::_internal_add_tuples_to_update() {
  return tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandBuildSetValueArchive::add_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildSetValueArchive::tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.tuples_to_update)
  return tuples_to_update_;
}

// optional .TSP.Reference old_tuple_for_main_property = 7;
inline bool CommandBuildSetValueArchive::_internal_has_old_tuple_for_main_property() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || old_tuple_for_main_property_ != nullptr);
  return value;
}
inline bool CommandBuildSetValueArchive::has_old_tuple_for_main_property() const {
  return _internal_has_old_tuple_for_main_property();
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::_internal_old_tuple_for_main_property() const {
  const ::TSP::Reference* p = old_tuple_for_main_property_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::old_tuple_for_main_property() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.old_tuple_for_main_property)
  return _internal_old_tuple_for_main_property();
}
inline void CommandBuildSetValueArchive::unsafe_arena_set_allocated_old_tuple_for_main_property(
    ::TSP::Reference* old_tuple_for_main_property) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_tuple_for_main_property_);
  }
  old_tuple_for_main_property_ = old_tuple_for_main_property;
  if (old_tuple_for_main_property) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildSetValueArchive.old_tuple_for_main_property)
}
inline ::TSP::Reference* CommandBuildSetValueArchive::release_old_tuple_for_main_property() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_tuple_for_main_property_;
  old_tuple_for_main_property_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandBuildSetValueArchive::unsafe_arena_release_old_tuple_for_main_property() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildSetValueArchive.old_tuple_for_main_property)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = old_tuple_for_main_property_;
  old_tuple_for_main_property_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandBuildSetValueArchive::_internal_mutable_old_tuple_for_main_property() {
  _has_bits_[0] |= 0x00000004u;
  if (old_tuple_for_main_property_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_tuple_for_main_property_ = p;
  }
  return old_tuple_for_main_property_;
}
inline ::TSP::Reference* CommandBuildSetValueArchive::mutable_old_tuple_for_main_property() {
  ::TSP::Reference* _msg = _internal_mutable_old_tuple_for_main_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.old_tuple_for_main_property)
  return _msg;
}
inline void CommandBuildSetValueArchive::set_allocated_old_tuple_for_main_property(::TSP::Reference* old_tuple_for_main_property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_tuple_for_main_property_);
  }
  if (old_tuple_for_main_property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_tuple_for_main_property));
    if (message_arena != submessage_arena) {
      old_tuple_for_main_property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_tuple_for_main_property, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_tuple_for_main_property_ = old_tuple_for_main_property;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildSetValueArchive.old_tuple_for_main_property)
}

// repeated .TSP.Reference old_tuples_to_update_for_sub_commands = 8;
inline int CommandBuildSetValueArchive::_internal_old_tuples_to_update_for_sub_commands_size() const {
  return old_tuples_to_update_for_sub_commands_.size();
}
inline int CommandBuildSetValueArchive::old_tuples_to_update_for_sub_commands_size() const {
  return _internal_old_tuples_to_update_for_sub_commands_size();
}
inline ::TSP::Reference* CommandBuildSetValueArchive::mutable_old_tuples_to_update_for_sub_commands(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.old_tuples_to_update_for_sub_commands)
  return old_tuples_to_update_for_sub_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildSetValueArchive::mutable_old_tuples_to_update_for_sub_commands() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.old_tuples_to_update_for_sub_commands)
  return &old_tuples_to_update_for_sub_commands_;
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::_internal_old_tuples_to_update_for_sub_commands(int index) const {
  return old_tuples_to_update_for_sub_commands_.Get(index);
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::old_tuples_to_update_for_sub_commands(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.old_tuples_to_update_for_sub_commands)
  return _internal_old_tuples_to_update_for_sub_commands(index);
}
inline ::TSP::Reference* CommandBuildSetValueArchive::_internal_add_old_tuples_to_update_for_sub_commands() {
  return old_tuples_to_update_for_sub_commands_.Add();
}
inline ::TSP::Reference* CommandBuildSetValueArchive::add_old_tuples_to_update_for_sub_commands() {
  ::TSP::Reference* _add = _internal_add_old_tuples_to_update_for_sub_commands();
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.old_tuples_to_update_for_sub_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildSetValueArchive::old_tuples_to_update_for_sub_commands() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.old_tuples_to_update_for_sub_commands)
  return old_tuples_to_update_for_sub_commands_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 9;
inline int CommandBuildSetValueArchive::_internal_identifiers_for_added_chunks_size() const {
  return identifiers_for_added_chunks_.size();
}
inline int CommandBuildSetValueArchive::identifiers_for_added_chunks_size() const {
  return _internal_identifiers_for_added_chunks_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::mutable_identifiers_for_added_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.identifiers_for_added_chunks)
  return identifiers_for_added_chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildSetValueArchive::mutable_identifiers_for_added_chunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.identifiers_for_added_chunks)
  return &identifiers_for_added_chunks_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::_internal_identifiers_for_added_chunks(int index) const {
  return identifiers_for_added_chunks_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::identifiers_for_added_chunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.identifiers_for_added_chunks)
  return _internal_identifiers_for_added_chunks(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::_internal_add_identifiers_for_added_chunks() {
  return identifiers_for_added_chunks_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::add_identifiers_for_added_chunks() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_added_chunks();
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.identifiers_for_added_chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildSetValueArchive::identifiers_for_added_chunks() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.identifiers_for_added_chunks)
  return identifiers_for_added_chunks_;
}

// repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 10;
inline int CommandBuildSetValueArchive::_internal_generated_identifiers_size() const {
  return generated_identifiers_.size();
}
inline int CommandBuildSetValueArchive::generated_identifiers_size() const {
  return _internal_generated_identifiers_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::mutable_generated_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.generated_identifiers)
  return generated_identifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildSetValueArchive::mutable_generated_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.generated_identifiers)
  return &generated_identifiers_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::_internal_generated_identifiers(int index) const {
  return generated_identifiers_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::generated_identifiers(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.generated_identifiers)
  return _internal_generated_identifiers(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::_internal_add_generated_identifiers() {
  return generated_identifiers_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::add_generated_identifiers() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_generated_identifiers();
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.generated_identifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildSetValueArchive::generated_identifiers() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.generated_identifiers)
  return generated_identifiers_;
}

// repeated .TSP.Reference removed_chunks = 11;
inline int CommandBuildSetValueArchive::_internal_removed_chunks_size() const {
  return removed_chunks_.size();
}
inline int CommandBuildSetValueArchive::removed_chunks_size() const {
  return _internal_removed_chunks_size();
}
inline ::TSP::Reference* CommandBuildSetValueArchive::mutable_removed_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.removed_chunks)
  return removed_chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildSetValueArchive::mutable_removed_chunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.removed_chunks)
  return &removed_chunks_;
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::_internal_removed_chunks(int index) const {
  return removed_chunks_.Get(index);
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::removed_chunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.removed_chunks)
  return _internal_removed_chunks(index);
}
inline ::TSP::Reference* CommandBuildSetValueArchive::_internal_add_removed_chunks() {
  return removed_chunks_.Add();
}
inline ::TSP::Reference* CommandBuildSetValueArchive::add_removed_chunks() {
  ::TSP::Reference* _add = _internal_add_removed_chunks();
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.removed_chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildSetValueArchive::removed_chunks() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.removed_chunks)
  return removed_chunks_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 12;
inline int CommandBuildSetValueArchive::_internal_identifiers_for_chunks_prior_to_removed_chunks_size() const {
  return identifiers_for_chunks_prior_to_removed_chunks_.size();
}
inline int CommandBuildSetValueArchive::identifiers_for_chunks_prior_to_removed_chunks_size() const {
  return _internal_identifiers_for_chunks_prior_to_removed_chunks_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::mutable_identifiers_for_chunks_prior_to_removed_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.identifiers_for_chunks_prior_to_removed_chunks)
  return identifiers_for_chunks_prior_to_removed_chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildSetValueArchive::mutable_identifiers_for_chunks_prior_to_removed_chunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.identifiers_for_chunks_prior_to_removed_chunks)
  return &identifiers_for_chunks_prior_to_removed_chunks_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::_internal_identifiers_for_chunks_prior_to_removed_chunks(int index) const {
  return identifiers_for_chunks_prior_to_removed_chunks_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::identifiers_for_chunks_prior_to_removed_chunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.identifiers_for_chunks_prior_to_removed_chunks)
  return _internal_identifiers_for_chunks_prior_to_removed_chunks(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::_internal_add_identifiers_for_chunks_prior_to_removed_chunks() {
  return identifiers_for_chunks_prior_to_removed_chunks_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::add_identifiers_for_chunks_prior_to_removed_chunks() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_chunks_prior_to_removed_chunks();
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.identifiers_for_chunks_prior_to_removed_chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildSetValueArchive::identifiers_for_chunks_prior_to_removed_chunks() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.identifiers_for_chunks_prior_to_removed_chunks)
  return identifiers_for_chunks_prior_to_removed_chunks_;
}

// optional uint32 old_chunk_ID_seed = 13;
inline bool CommandBuildSetValueArchive::_internal_has_old_chunk_id_seed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandBuildSetValueArchive::has_old_chunk_id_seed() const {
  return _internal_has_old_chunk_id_seed();
}
inline void CommandBuildSetValueArchive::clear_old_chunk_id_seed() {
  old_chunk_id_seed_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandBuildSetValueArchive::_internal_old_chunk_id_seed() const {
  return old_chunk_id_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandBuildSetValueArchive::old_chunk_id_seed() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.old_chunk_ID_seed)
  return _internal_old_chunk_id_seed();
}
inline void CommandBuildSetValueArchive::_internal_set_old_chunk_id_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  old_chunk_id_seed_ = value;
}
inline void CommandBuildSetValueArchive::set_old_chunk_id_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_chunk_id_seed(value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildSetValueArchive.old_chunk_ID_seed)
}

// repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 14;
inline int CommandBuildSetValueArchive::_internal_old_chunk_identifiers_size() const {
  return old_chunk_identifiers_.size();
}
inline int CommandBuildSetValueArchive::old_chunk_identifiers_size() const {
  return _internal_old_chunk_identifiers_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::mutable_old_chunk_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.old_chunk_identifiers)
  return old_chunk_identifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildSetValueArchive::mutable_old_chunk_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.old_chunk_identifiers)
  return &old_chunk_identifiers_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::_internal_old_chunk_identifiers(int index) const {
  return old_chunk_identifiers_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildSetValueArchive::old_chunk_identifiers(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.old_chunk_identifiers)
  return _internal_old_chunk_identifiers(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::_internal_add_old_chunk_identifiers() {
  return old_chunk_identifiers_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildSetValueArchive::add_old_chunk_identifiers() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_old_chunk_identifiers();
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.old_chunk_identifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildSetValueArchive::old_chunk_identifiers() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.old_chunk_identifiers)
  return old_chunk_identifiers_;
}

// repeated .TSP.Reference chunks_removed_during_undo = 15;
inline int CommandBuildSetValueArchive::_internal_chunks_removed_during_undo_size() const {
  return chunks_removed_during_undo_.size();
}
inline int CommandBuildSetValueArchive::chunks_removed_during_undo_size() const {
  return _internal_chunks_removed_during_undo_size();
}
inline ::TSP::Reference* CommandBuildSetValueArchive::mutable_chunks_removed_during_undo(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildSetValueArchive.chunks_removed_during_undo)
  return chunks_removed_during_undo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildSetValueArchive::mutable_chunks_removed_during_undo() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildSetValueArchive.chunks_removed_during_undo)
  return &chunks_removed_during_undo_;
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::_internal_chunks_removed_during_undo(int index) const {
  return chunks_removed_during_undo_.Get(index);
}
inline const ::TSP::Reference& CommandBuildSetValueArchive::chunks_removed_during_undo(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildSetValueArchive.chunks_removed_during_undo)
  return _internal_chunks_removed_during_undo(index);
}
inline ::TSP::Reference* CommandBuildSetValueArchive::_internal_add_chunks_removed_during_undo() {
  return chunks_removed_during_undo_.Add();
}
inline ::TSP::Reference* CommandBuildSetValueArchive::add_chunks_removed_during_undo() {
  ::TSP::Reference* _add = _internal_add_chunks_removed_during_undo();
  // @@protoc_insertion_point(field_add:KN.CommandBuildSetValueArchive.chunks_removed_during_undo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildSetValueArchive::chunks_removed_during_undo() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildSetValueArchive.chunks_removed_during_undo)
  return chunks_removed_during_undo_;
}

// -------------------------------------------------------------------

// CommandBuildUpdateChunkReferentsArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandBuildUpdateChunkReferentsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandBuildUpdateChunkReferentsArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandBuildUpdateChunkReferentsArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandBuildUpdateChunkReferentsArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkReferentsArchive.super)
  return _internal_super();
}
inline void CommandBuildUpdateChunkReferentsArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildUpdateChunkReferentsArchive.super)
}
inline ::TSK::CommandArchive* CommandBuildUpdateChunkReferentsArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildUpdateChunkReferentsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildUpdateChunkReferentsArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildUpdateChunkReferentsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandBuildUpdateChunkReferentsArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkReferentsArchive.super)
  return _msg;
}
inline void CommandBuildUpdateChunkReferentsArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildUpdateChunkReferentsArchive.super)
}

// required .TSP.UUID build_id = 2;
inline bool CommandBuildUpdateChunkReferentsArchive::_internal_has_build_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || build_id_ != nullptr);
  return value;
}
inline bool CommandBuildUpdateChunkReferentsArchive::has_build_id() const {
  return _internal_has_build_id();
}
inline const ::TSP::UUID& CommandBuildUpdateChunkReferentsArchive::_internal_build_id() const {
  const ::TSP::UUID* p = build_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandBuildUpdateChunkReferentsArchive::build_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkReferentsArchive.build_id)
  return _internal_build_id();
}
inline void CommandBuildUpdateChunkReferentsArchive::unsafe_arena_set_allocated_build_id(
    ::TSP::UUID* build_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id_);
  }
  build_id_ = build_id;
  if (build_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildUpdateChunkReferentsArchive.build_id)
}
inline ::TSP::UUID* CommandBuildUpdateChunkReferentsArchive::release_build_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = build_id_;
  build_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandBuildUpdateChunkReferentsArchive::unsafe_arena_release_build_id() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildUpdateChunkReferentsArchive.build_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = build_id_;
  build_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandBuildUpdateChunkReferentsArchive::_internal_mutable_build_id() {
  _has_bits_[0] |= 0x00000002u;
  if (build_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    build_id_ = p;
  }
  return build_id_;
}
inline ::TSP::UUID* CommandBuildUpdateChunkReferentsArchive::mutable_build_id() {
  ::TSP::UUID* _msg = _internal_mutable_build_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkReferentsArchive.build_id)
  return _msg;
}
inline void CommandBuildUpdateChunkReferentsArchive::set_allocated_build_id(::TSP::UUID* build_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id_);
  }
  if (build_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(build_id));
    if (message_arena != submessage_arena) {
      build_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, build_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  build_id_ = build_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildUpdateChunkReferentsArchive.build_id)
}

// repeated .TSP.Reference tuples_to_update = 3;
inline int CommandBuildUpdateChunkReferentsArchive::_internal_tuples_to_update_size() const {
  return tuples_to_update_.size();
}
inline int CommandBuildUpdateChunkReferentsArchive::tuples_to_update_size() const {
  return _internal_tuples_to_update_size();
}
inline ::TSP::Reference* CommandBuildUpdateChunkReferentsArchive::mutable_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkReferentsArchive.tuples_to_update)
  return tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildUpdateChunkReferentsArchive::mutable_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkReferentsArchive.tuples_to_update)
  return &tuples_to_update_;
}
inline const ::TSP::Reference& CommandBuildUpdateChunkReferentsArchive::_internal_tuples_to_update(int index) const {
  return tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandBuildUpdateChunkReferentsArchive::tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkReferentsArchive.tuples_to_update)
  return _internal_tuples_to_update(index);
}
inline ::TSP::Reference* CommandBuildUpdateChunkReferentsArchive::_internal_add_tuples_to_update() {
  return tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandBuildUpdateChunkReferentsArchive::add_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkReferentsArchive.tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildUpdateChunkReferentsArchive::tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkReferentsArchive.tuples_to_update)
  return tuples_to_update_;
}

// repeated .TSP.Reference old_tuples_to_update = 4;
inline int CommandBuildUpdateChunkReferentsArchive::_internal_old_tuples_to_update_size() const {
  return old_tuples_to_update_.size();
}
inline int CommandBuildUpdateChunkReferentsArchive::old_tuples_to_update_size() const {
  return _internal_old_tuples_to_update_size();
}
inline ::TSP::Reference* CommandBuildUpdateChunkReferentsArchive::mutable_old_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkReferentsArchive.old_tuples_to_update)
  return old_tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildUpdateChunkReferentsArchive::mutable_old_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkReferentsArchive.old_tuples_to_update)
  return &old_tuples_to_update_;
}
inline const ::TSP::Reference& CommandBuildUpdateChunkReferentsArchive::_internal_old_tuples_to_update(int index) const {
  return old_tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandBuildUpdateChunkReferentsArchive::old_tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkReferentsArchive.old_tuples_to_update)
  return _internal_old_tuples_to_update(index);
}
inline ::TSP::Reference* CommandBuildUpdateChunkReferentsArchive::_internal_add_old_tuples_to_update() {
  return old_tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandBuildUpdateChunkReferentsArchive::add_old_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_old_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkReferentsArchive.old_tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildUpdateChunkReferentsArchive::old_tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkReferentsArchive.old_tuples_to_update)
  return old_tuples_to_update_;
}

// -------------------------------------------------------------------

// CommandBuildUpdateChunkCountArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandBuildUpdateChunkCountArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandBuildUpdateChunkCountArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandBuildUpdateChunkCountArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandBuildUpdateChunkCountArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.super)
  return _internal_super();
}
inline void CommandBuildUpdateChunkCountArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildUpdateChunkCountArchive.super)
}
inline ::TSK::CommandArchive* CommandBuildUpdateChunkCountArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildUpdateChunkCountArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildUpdateChunkCountArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildUpdateChunkCountArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandBuildUpdateChunkCountArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.super)
  return _msg;
}
inline void CommandBuildUpdateChunkCountArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildUpdateChunkCountArchive.super)
}

// required .TSP.UUID slide_id = 2;
inline bool CommandBuildUpdateChunkCountArchive::_internal_has_slide_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_ != nullptr);
  return value;
}
inline bool CommandBuildUpdateChunkCountArchive::has_slide_id() const {
  return _internal_has_slide_id();
}
inline const ::TSP::UUID& CommandBuildUpdateChunkCountArchive::_internal_slide_id() const {
  const ::TSP::UUID* p = slide_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandBuildUpdateChunkCountArchive::slide_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.slide_id)
  return _internal_slide_id();
}
inline void CommandBuildUpdateChunkCountArchive::unsafe_arena_set_allocated_slide_id(
    ::TSP::UUID* slide_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  slide_id_ = slide_id;
  if (slide_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildUpdateChunkCountArchive.slide_id)
}
inline ::TSP::UUID* CommandBuildUpdateChunkCountArchive::release_slide_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandBuildUpdateChunkCountArchive::unsafe_arena_release_slide_id() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildUpdateChunkCountArchive.slide_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandBuildUpdateChunkCountArchive::_internal_mutable_slide_id() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    slide_id_ = p;
  }
  return slide_id_;
}
inline ::TSP::UUID* CommandBuildUpdateChunkCountArchive::mutable_slide_id() {
  ::TSP::UUID* _msg = _internal_mutable_slide_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.slide_id)
  return _msg;
}
inline void CommandBuildUpdateChunkCountArchive::set_allocated_slide_id(::TSP::UUID* slide_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  if (slide_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id));
    if (message_arena != submessage_arena) {
      slide_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_ = slide_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildUpdateChunkCountArchive.slide_id)
}

// repeated .TSP.UUID drawable_ids = 3;
inline int CommandBuildUpdateChunkCountArchive::_internal_drawable_ids_size() const {
  return drawable_ids_.size();
}
inline int CommandBuildUpdateChunkCountArchive::drawable_ids_size() const {
  return _internal_drawable_ids_size();
}
inline ::TSP::UUID* CommandBuildUpdateChunkCountArchive::mutable_drawable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.drawable_ids)
  return drawable_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandBuildUpdateChunkCountArchive::mutable_drawable_ids() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.drawable_ids)
  return &drawable_ids_;
}
inline const ::TSP::UUID& CommandBuildUpdateChunkCountArchive::_internal_drawable_ids(int index) const {
  return drawable_ids_.Get(index);
}
inline const ::TSP::UUID& CommandBuildUpdateChunkCountArchive::drawable_ids(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.drawable_ids)
  return _internal_drawable_ids(index);
}
inline ::TSP::UUID* CommandBuildUpdateChunkCountArchive::_internal_add_drawable_ids() {
  return drawable_ids_.Add();
}
inline ::TSP::UUID* CommandBuildUpdateChunkCountArchive::add_drawable_ids() {
  ::TSP::UUID* _add = _internal_add_drawable_ids();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.drawable_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandBuildUpdateChunkCountArchive::drawable_ids() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.drawable_ids)
  return drawable_ids_;
}

// repeated .TSP.Reference expected_delivery_style_tuples = 4;
inline int CommandBuildUpdateChunkCountArchive::_internal_expected_delivery_style_tuples_size() const {
  return expected_delivery_style_tuples_.size();
}
inline int CommandBuildUpdateChunkCountArchive::expected_delivery_style_tuples_size() const {
  return _internal_expected_delivery_style_tuples_size();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::mutable_expected_delivery_style_tuples(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.expected_delivery_style_tuples)
  return expected_delivery_style_tuples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildUpdateChunkCountArchive::mutable_expected_delivery_style_tuples() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.expected_delivery_style_tuples)
  return &expected_delivery_style_tuples_;
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::_internal_expected_delivery_style_tuples(int index) const {
  return expected_delivery_style_tuples_.Get(index);
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::expected_delivery_style_tuples(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.expected_delivery_style_tuples)
  return _internal_expected_delivery_style_tuples(index);
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::_internal_add_expected_delivery_style_tuples() {
  return expected_delivery_style_tuples_.Add();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::add_expected_delivery_style_tuples() {
  ::TSP::Reference* _add = _internal_add_expected_delivery_style_tuples();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.expected_delivery_style_tuples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildUpdateChunkCountArchive::expected_delivery_style_tuples() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.expected_delivery_style_tuples)
  return expected_delivery_style_tuples_;
}

// repeated .TSP.Reference chunks_to_add = 5;
inline int CommandBuildUpdateChunkCountArchive::_internal_chunks_to_add_size() const {
  return chunks_to_add_.size();
}
inline int CommandBuildUpdateChunkCountArchive::chunks_to_add_size() const {
  return _internal_chunks_to_add_size();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::mutable_chunks_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.chunks_to_add)
  return chunks_to_add_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildUpdateChunkCountArchive::mutable_chunks_to_add() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.chunks_to_add)
  return &chunks_to_add_;
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::_internal_chunks_to_add(int index) const {
  return chunks_to_add_.Get(index);
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::chunks_to_add(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.chunks_to_add)
  return _internal_chunks_to_add(index);
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::_internal_add_chunks_to_add() {
  return chunks_to_add_.Add();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::add_chunks_to_add() {
  ::TSP::Reference* _add = _internal_add_chunks_to_add();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.chunks_to_add)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildUpdateChunkCountArchive::chunks_to_add() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.chunks_to_add)
  return chunks_to_add_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 6;
inline int CommandBuildUpdateChunkCountArchive::_internal_identifiers_for_chunks_to_insert_after_size() const {
  return identifiers_for_chunks_to_insert_after_.size();
}
inline int CommandBuildUpdateChunkCountArchive::identifiers_for_chunks_to_insert_after_size() const {
  return _internal_identifiers_for_chunks_to_insert_after_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::mutable_identifiers_for_chunks_to_insert_after(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_insert_after)
  return identifiers_for_chunks_to_insert_after_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildUpdateChunkCountArchive::mutable_identifiers_for_chunks_to_insert_after() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_insert_after)
  return &identifiers_for_chunks_to_insert_after_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::_internal_identifiers_for_chunks_to_insert_after(int index) const {
  return identifiers_for_chunks_to_insert_after_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::identifiers_for_chunks_to_insert_after(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_insert_after)
  return _internal_identifiers_for_chunks_to_insert_after(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::_internal_add_identifiers_for_chunks_to_insert_after() {
  return identifiers_for_chunks_to_insert_after_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::add_identifiers_for_chunks_to_insert_after() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_chunks_to_insert_after();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_insert_after)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildUpdateChunkCountArchive::identifiers_for_chunks_to_insert_after() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_insert_after)
  return identifiers_for_chunks_to_insert_after_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 7;
inline int CommandBuildUpdateChunkCountArchive::_internal_identifiers_for_chunks_to_remove_size() const {
  return identifiers_for_chunks_to_remove_.size();
}
inline int CommandBuildUpdateChunkCountArchive::identifiers_for_chunks_to_remove_size() const {
  return _internal_identifiers_for_chunks_to_remove_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::mutable_identifiers_for_chunks_to_remove(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_remove)
  return identifiers_for_chunks_to_remove_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildUpdateChunkCountArchive::mutable_identifiers_for_chunks_to_remove() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_remove)
  return &identifiers_for_chunks_to_remove_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::_internal_identifiers_for_chunks_to_remove(int index) const {
  return identifiers_for_chunks_to_remove_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::identifiers_for_chunks_to_remove(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_remove)
  return _internal_identifiers_for_chunks_to_remove(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::_internal_add_identifiers_for_chunks_to_remove() {
  return identifiers_for_chunks_to_remove_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::add_identifiers_for_chunks_to_remove() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_chunks_to_remove();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_remove)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildUpdateChunkCountArchive::identifiers_for_chunks_to_remove() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_remove)
  return identifiers_for_chunks_to_remove_;
}

// repeated .TSP.Reference tuples_to_update = 8;
inline int CommandBuildUpdateChunkCountArchive::_internal_tuples_to_update_size() const {
  return tuples_to_update_.size();
}
inline int CommandBuildUpdateChunkCountArchive::tuples_to_update_size() const {
  return _internal_tuples_to_update_size();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::mutable_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.tuples_to_update)
  return tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildUpdateChunkCountArchive::mutable_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.tuples_to_update)
  return &tuples_to_update_;
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::_internal_tuples_to_update(int index) const {
  return tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.tuples_to_update)
  return _internal_tuples_to_update(index);
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::_internal_add_tuples_to_update() {
  return tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::add_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildUpdateChunkCountArchive::tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.tuples_to_update)
  return tuples_to_update_;
}

// optional bool needs_async_process_changes_selection_update = 9;
inline bool CommandBuildUpdateChunkCountArchive::_internal_has_needs_async_process_changes_selection_update() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandBuildUpdateChunkCountArchive::has_needs_async_process_changes_selection_update() const {
  return _internal_has_needs_async_process_changes_selection_update();
}
inline void CommandBuildUpdateChunkCountArchive::clear_needs_async_process_changes_selection_update() {
  needs_async_process_changes_selection_update_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandBuildUpdateChunkCountArchive::_internal_needs_async_process_changes_selection_update() const {
  return needs_async_process_changes_selection_update_;
}
inline bool CommandBuildUpdateChunkCountArchive::needs_async_process_changes_selection_update() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.needs_async_process_changes_selection_update)
  return _internal_needs_async_process_changes_selection_update();
}
inline void CommandBuildUpdateChunkCountArchive::_internal_set_needs_async_process_changes_selection_update(bool value) {
  _has_bits_[0] |= 0x00000004u;
  needs_async_process_changes_selection_update_ = value;
}
inline void CommandBuildUpdateChunkCountArchive::set_needs_async_process_changes_selection_update(bool value) {
  _internal_set_needs_async_process_changes_selection_update(value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildUpdateChunkCountArchive.needs_async_process_changes_selection_update)
}

// repeated .TSP.Reference old_tuples_to_update = 10;
inline int CommandBuildUpdateChunkCountArchive::_internal_old_tuples_to_update_size() const {
  return old_tuples_to_update_.size();
}
inline int CommandBuildUpdateChunkCountArchive::old_tuples_to_update_size() const {
  return _internal_old_tuples_to_update_size();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::mutable_old_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.old_tuples_to_update)
  return old_tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildUpdateChunkCountArchive::mutable_old_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.old_tuples_to_update)
  return &old_tuples_to_update_;
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::_internal_old_tuples_to_update(int index) const {
  return old_tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::old_tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.old_tuples_to_update)
  return _internal_old_tuples_to_update(index);
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::_internal_add_old_tuples_to_update() {
  return old_tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::add_old_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_old_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.old_tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildUpdateChunkCountArchive::old_tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.old_tuples_to_update)
  return old_tuples_to_update_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 11;
inline int CommandBuildUpdateChunkCountArchive::_internal_identifiers_for_added_chunks_size() const {
  return identifiers_for_added_chunks_.size();
}
inline int CommandBuildUpdateChunkCountArchive::identifiers_for_added_chunks_size() const {
  return _internal_identifiers_for_added_chunks_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::mutable_identifiers_for_added_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_added_chunks)
  return identifiers_for_added_chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildUpdateChunkCountArchive::mutable_identifiers_for_added_chunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_added_chunks)
  return &identifiers_for_added_chunks_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::_internal_identifiers_for_added_chunks(int index) const {
  return identifiers_for_added_chunks_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::identifiers_for_added_chunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_added_chunks)
  return _internal_identifiers_for_added_chunks(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::_internal_add_identifiers_for_added_chunks() {
  return identifiers_for_added_chunks_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::add_identifiers_for_added_chunks() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_added_chunks();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_added_chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildUpdateChunkCountArchive::identifiers_for_added_chunks() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_added_chunks)
  return identifiers_for_added_chunks_;
}

// repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 12;
inline int CommandBuildUpdateChunkCountArchive::_internal_generated_identifiers_size() const {
  return generated_identifiers_.size();
}
inline int CommandBuildUpdateChunkCountArchive::generated_identifiers_size() const {
  return _internal_generated_identifiers_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::mutable_generated_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.generated_identifiers)
  return generated_identifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildUpdateChunkCountArchive::mutable_generated_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.generated_identifiers)
  return &generated_identifiers_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::_internal_generated_identifiers(int index) const {
  return generated_identifiers_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::generated_identifiers(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.generated_identifiers)
  return _internal_generated_identifiers(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::_internal_add_generated_identifiers() {
  return generated_identifiers_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::add_generated_identifiers() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_generated_identifiers();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.generated_identifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildUpdateChunkCountArchive::generated_identifiers() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.generated_identifiers)
  return generated_identifiers_;
}

// repeated .TSP.Reference removed_chunks = 13;
inline int CommandBuildUpdateChunkCountArchive::_internal_removed_chunks_size() const {
  return removed_chunks_.size();
}
inline int CommandBuildUpdateChunkCountArchive::removed_chunks_size() const {
  return _internal_removed_chunks_size();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::mutable_removed_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.removed_chunks)
  return removed_chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildUpdateChunkCountArchive::mutable_removed_chunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.removed_chunks)
  return &removed_chunks_;
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::_internal_removed_chunks(int index) const {
  return removed_chunks_.Get(index);
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::removed_chunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.removed_chunks)
  return _internal_removed_chunks(index);
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::_internal_add_removed_chunks() {
  return removed_chunks_.Add();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::add_removed_chunks() {
  ::TSP::Reference* _add = _internal_add_removed_chunks();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.removed_chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildUpdateChunkCountArchive::removed_chunks() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.removed_chunks)
  return removed_chunks_;
}

// repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 14;
inline int CommandBuildUpdateChunkCountArchive::_internal_identifiers_for_chunks_prior_to_removed_chunks_size() const {
  return identifiers_for_chunks_prior_to_removed_chunks_.size();
}
inline int CommandBuildUpdateChunkCountArchive::identifiers_for_chunks_prior_to_removed_chunks_size() const {
  return _internal_identifiers_for_chunks_prior_to_removed_chunks_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::mutable_identifiers_for_chunks_prior_to_removed_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_prior_to_removed_chunks)
  return identifiers_for_chunks_prior_to_removed_chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildUpdateChunkCountArchive::mutable_identifiers_for_chunks_prior_to_removed_chunks() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_prior_to_removed_chunks)
  return &identifiers_for_chunks_prior_to_removed_chunks_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::_internal_identifiers_for_chunks_prior_to_removed_chunks(int index) const {
  return identifiers_for_chunks_prior_to_removed_chunks_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::identifiers_for_chunks_prior_to_removed_chunks(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_prior_to_removed_chunks)
  return _internal_identifiers_for_chunks_prior_to_removed_chunks(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::_internal_add_identifiers_for_chunks_prior_to_removed_chunks() {
  return identifiers_for_chunks_prior_to_removed_chunks_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::add_identifiers_for_chunks_prior_to_removed_chunks() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_identifiers_for_chunks_prior_to_removed_chunks();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_prior_to_removed_chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildUpdateChunkCountArchive::identifiers_for_chunks_prior_to_removed_chunks() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_prior_to_removed_chunks)
  return identifiers_for_chunks_prior_to_removed_chunks_;
}

// repeated .TSP.Reference old_delivery_style_tuples = 15;
inline int CommandBuildUpdateChunkCountArchive::_internal_old_delivery_style_tuples_size() const {
  return old_delivery_style_tuples_.size();
}
inline int CommandBuildUpdateChunkCountArchive::old_delivery_style_tuples_size() const {
  return _internal_old_delivery_style_tuples_size();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::mutable_old_delivery_style_tuples(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.old_delivery_style_tuples)
  return old_delivery_style_tuples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildUpdateChunkCountArchive::mutable_old_delivery_style_tuples() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.old_delivery_style_tuples)
  return &old_delivery_style_tuples_;
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::_internal_old_delivery_style_tuples(int index) const {
  return old_delivery_style_tuples_.Get(index);
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::old_delivery_style_tuples(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.old_delivery_style_tuples)
  return _internal_old_delivery_style_tuples(index);
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::_internal_add_old_delivery_style_tuples() {
  return old_delivery_style_tuples_.Add();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::add_old_delivery_style_tuples() {
  ::TSP::Reference* _add = _internal_add_old_delivery_style_tuples();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.old_delivery_style_tuples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildUpdateChunkCountArchive::old_delivery_style_tuples() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.old_delivery_style_tuples)
  return old_delivery_style_tuples_;
}

// repeated uint32 old_chunk_ID_seeds = 16;
inline int CommandBuildUpdateChunkCountArchive::_internal_old_chunk_id_seeds_size() const {
  return old_chunk_id_seeds_.size();
}
inline int CommandBuildUpdateChunkCountArchive::old_chunk_id_seeds_size() const {
  return _internal_old_chunk_id_seeds_size();
}
inline void CommandBuildUpdateChunkCountArchive::clear_old_chunk_id_seeds() {
  old_chunk_id_seeds_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandBuildUpdateChunkCountArchive::_internal_old_chunk_id_seeds(int index) const {
  return old_chunk_id_seeds_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandBuildUpdateChunkCountArchive::old_chunk_id_seeds(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.old_chunk_ID_seeds)
  return _internal_old_chunk_id_seeds(index);
}
inline void CommandBuildUpdateChunkCountArchive::set_old_chunk_id_seeds(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_chunk_id_seeds_.Set(index, value);
  // @@protoc_insertion_point(field_set:KN.CommandBuildUpdateChunkCountArchive.old_chunk_ID_seeds)
}
inline void CommandBuildUpdateChunkCountArchive::_internal_add_old_chunk_id_seeds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  old_chunk_id_seeds_.Add(value);
}
inline void CommandBuildUpdateChunkCountArchive::add_old_chunk_id_seeds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_old_chunk_id_seeds(value);
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.old_chunk_ID_seeds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandBuildUpdateChunkCountArchive::_internal_old_chunk_id_seeds() const {
  return old_chunk_id_seeds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommandBuildUpdateChunkCountArchive::old_chunk_id_seeds() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.old_chunk_ID_seeds)
  return _internal_old_chunk_id_seeds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandBuildUpdateChunkCountArchive::_internal_mutable_old_chunk_id_seeds() {
  return &old_chunk_id_seeds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommandBuildUpdateChunkCountArchive::mutable_old_chunk_id_seeds() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.old_chunk_ID_seeds)
  return _internal_mutable_old_chunk_id_seeds();
}

// repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 17;
inline int CommandBuildUpdateChunkCountArchive::_internal_old_chunk_identifiers_size() const {
  return old_chunk_identifiers_.size();
}
inline int CommandBuildUpdateChunkCountArchive::old_chunk_identifiers_size() const {
  return _internal_old_chunk_identifiers_size();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::mutable_old_chunk_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.old_chunk_identifiers)
  return old_chunk_identifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CommandBuildUpdateChunkCountArchive::mutable_old_chunk_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.old_chunk_identifiers)
  return &old_chunk_identifiers_;
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::_internal_old_chunk_identifiers(int index) const {
  return old_chunk_identifiers_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CommandBuildUpdateChunkCountArchive::old_chunk_identifiers(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.old_chunk_identifiers)
  return _internal_old_chunk_identifiers(index);
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::_internal_add_old_chunk_identifiers() {
  return old_chunk_identifiers_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CommandBuildUpdateChunkCountArchive::add_old_chunk_identifiers() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_old_chunk_identifiers();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.old_chunk_identifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CommandBuildUpdateChunkCountArchive::old_chunk_identifiers() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.old_chunk_identifiers)
  return old_chunk_identifiers_;
}

// repeated .TSP.Reference working_builds = 18;
inline int CommandBuildUpdateChunkCountArchive::_internal_working_builds_size() const {
  return working_builds_.size();
}
inline int CommandBuildUpdateChunkCountArchive::working_builds_size() const {
  return _internal_working_builds_size();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::mutable_working_builds(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.working_builds)
  return working_builds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildUpdateChunkCountArchive::mutable_working_builds() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.working_builds)
  return &working_builds_;
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::_internal_working_builds(int index) const {
  return working_builds_.Get(index);
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::working_builds(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.working_builds)
  return _internal_working_builds(index);
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::_internal_add_working_builds() {
  return working_builds_.Add();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::add_working_builds() {
  ::TSP::Reference* _add = _internal_add_working_builds();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.working_builds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildUpdateChunkCountArchive::working_builds() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.working_builds)
  return working_builds_;
}

// repeated .TSP.Reference chunks_removed_during_undo = 19;
inline int CommandBuildUpdateChunkCountArchive::_internal_chunks_removed_during_undo_size() const {
  return chunks_removed_during_undo_.size();
}
inline int CommandBuildUpdateChunkCountArchive::chunks_removed_during_undo_size() const {
  return _internal_chunks_removed_during_undo_size();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::mutable_chunks_removed_during_undo(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.chunks_removed_during_undo)
  return chunks_removed_during_undo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildUpdateChunkCountArchive::mutable_chunks_removed_during_undo() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.chunks_removed_during_undo)
  return &chunks_removed_during_undo_;
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::_internal_chunks_removed_during_undo(int index) const {
  return chunks_removed_during_undo_.Get(index);
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::chunks_removed_during_undo(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.chunks_removed_during_undo)
  return _internal_chunks_removed_during_undo(index);
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::_internal_add_chunks_removed_during_undo() {
  return chunks_removed_during_undo_.Add();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::add_chunks_removed_during_undo() {
  ::TSP::Reference* _add = _internal_add_chunks_removed_during_undo();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.chunks_removed_during_undo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildUpdateChunkCountArchive::chunks_removed_during_undo() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.chunks_removed_during_undo)
  return chunks_removed_during_undo_;
}

// repeated .TSP.Reference chunks_added_during_undo = 20;
inline int CommandBuildUpdateChunkCountArchive::_internal_chunks_added_during_undo_size() const {
  return chunks_added_during_undo_.size();
}
inline int CommandBuildUpdateChunkCountArchive::chunks_added_during_undo_size() const {
  return _internal_chunks_added_during_undo_size();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::mutable_chunks_added_during_undo(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildUpdateChunkCountArchive.chunks_added_during_undo)
  return chunks_added_during_undo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildUpdateChunkCountArchive::mutable_chunks_added_during_undo() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildUpdateChunkCountArchive.chunks_added_during_undo)
  return &chunks_added_during_undo_;
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::_internal_chunks_added_during_undo(int index) const {
  return chunks_added_during_undo_.Get(index);
}
inline const ::TSP::Reference& CommandBuildUpdateChunkCountArchive::chunks_added_during_undo(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildUpdateChunkCountArchive.chunks_added_during_undo)
  return _internal_chunks_added_during_undo(index);
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::_internal_add_chunks_added_during_undo() {
  return chunks_added_during_undo_.Add();
}
inline ::TSP::Reference* CommandBuildUpdateChunkCountArchive::add_chunks_added_during_undo() {
  ::TSP::Reference* _add = _internal_add_chunks_added_during_undo();
  // @@protoc_insertion_point(field_add:KN.CommandBuildUpdateChunkCountArchive.chunks_added_during_undo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildUpdateChunkCountArchive::chunks_added_during_undo() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildUpdateChunkCountArchive.chunks_added_during_undo)
  return chunks_added_during_undo_;
}

// -------------------------------------------------------------------

// CommandBuildChunkSetValueArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandBuildChunkSetValueArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandBuildChunkSetValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandBuildChunkSetValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandBuildChunkSetValueArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildChunkSetValueArchive.super)
  return _internal_super();
}
inline void CommandBuildChunkSetValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandBuildChunkSetValueArchive.super)
}
inline ::TSK::CommandArchive* CommandBuildChunkSetValueArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildChunkSetValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandBuildChunkSetValueArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandBuildChunkSetValueArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandBuildChunkSetValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildChunkSetValueArchive.super)
  return _msg;
}
inline void CommandBuildChunkSetValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandBuildChunkSetValueArchive.super)
}

// repeated .TSP.Reference tuples_to_update = 2;
inline int CommandBuildChunkSetValueArchive::_internal_tuples_to_update_size() const {
  return tuples_to_update_.size();
}
inline int CommandBuildChunkSetValueArchive::tuples_to_update_size() const {
  return _internal_tuples_to_update_size();
}
inline ::TSP::Reference* CommandBuildChunkSetValueArchive::mutable_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildChunkSetValueArchive.tuples_to_update)
  return tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildChunkSetValueArchive::mutable_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildChunkSetValueArchive.tuples_to_update)
  return &tuples_to_update_;
}
inline const ::TSP::Reference& CommandBuildChunkSetValueArchive::_internal_tuples_to_update(int index) const {
  return tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandBuildChunkSetValueArchive::tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildChunkSetValueArchive.tuples_to_update)
  return _internal_tuples_to_update(index);
}
inline ::TSP::Reference* CommandBuildChunkSetValueArchive::_internal_add_tuples_to_update() {
  return tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandBuildChunkSetValueArchive::add_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandBuildChunkSetValueArchive.tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildChunkSetValueArchive::tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildChunkSetValueArchive.tuples_to_update)
  return tuples_to_update_;
}

// repeated .TSP.Reference old_tuples_to_update = 3;
inline int CommandBuildChunkSetValueArchive::_internal_old_tuples_to_update_size() const {
  return old_tuples_to_update_.size();
}
inline int CommandBuildChunkSetValueArchive::old_tuples_to_update_size() const {
  return _internal_old_tuples_to_update_size();
}
inline ::TSP::Reference* CommandBuildChunkSetValueArchive::mutable_old_tuples_to_update(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandBuildChunkSetValueArchive.old_tuples_to_update)
  return old_tuples_to_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandBuildChunkSetValueArchive::mutable_old_tuples_to_update() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandBuildChunkSetValueArchive.old_tuples_to_update)
  return &old_tuples_to_update_;
}
inline const ::TSP::Reference& CommandBuildChunkSetValueArchive::_internal_old_tuples_to_update(int index) const {
  return old_tuples_to_update_.Get(index);
}
inline const ::TSP::Reference& CommandBuildChunkSetValueArchive::old_tuples_to_update(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandBuildChunkSetValueArchive.old_tuples_to_update)
  return _internal_old_tuples_to_update(index);
}
inline ::TSP::Reference* CommandBuildChunkSetValueArchive::_internal_add_old_tuples_to_update() {
  return old_tuples_to_update_.Add();
}
inline ::TSP::Reference* CommandBuildChunkSetValueArchive::add_old_tuples_to_update() {
  ::TSP::Reference* _add = _internal_add_old_tuples_to_update();
  // @@protoc_insertion_point(field_add:KN.CommandBuildChunkSetValueArchive.old_tuples_to_update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandBuildChunkSetValueArchive::old_tuples_to_update() const {
  // @@protoc_insertion_point(field_list:KN.CommandBuildChunkSetValueArchive.old_tuples_to_update)
  return old_tuples_to_update_;
}

// -------------------------------------------------------------------

// CommandTransitionSetValueArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandTransitionSetValueArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandTransitionSetValueArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandTransitionSetValueArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandTransitionSetValueArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.super)
  return _internal_super();
}
inline void CommandTransitionSetValueArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTransitionSetValueArchive.super)
}
inline ::TSK::CommandArchive* CommandTransitionSetValueArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandTransitionSetValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandTransitionSetValueArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandTransitionSetValueArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandTransitionSetValueArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.super)
  return _msg;
}
inline void CommandTransitionSetValueArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTransitionSetValueArchive.super)
}

// required .TSP.UUIDPath slide_node_id_path = 2;
inline bool CommandTransitionSetValueArchive::_internal_has_slide_node_id_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || slide_node_id_path_ != nullptr);
  return value;
}
inline bool CommandTransitionSetValueArchive::has_slide_node_id_path() const {
  return _internal_has_slide_node_id_path();
}
inline const ::TSP::UUIDPath& CommandTransitionSetValueArchive::_internal_slide_node_id_path() const {
  const ::TSP::UUIDPath* p = slide_node_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& CommandTransitionSetValueArchive::slide_node_id_path() const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.slide_node_id_path)
  return _internal_slide_node_id_path();
}
inline void CommandTransitionSetValueArchive::unsafe_arena_set_allocated_slide_node_id_path(
    ::TSP::UUIDPath* slide_node_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_id_path_);
  }
  slide_node_id_path_ = slide_node_id_path;
  if (slide_node_id_path) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTransitionSetValueArchive.slide_node_id_path)
}
inline ::TSP::UUIDPath* CommandTransitionSetValueArchive::release_slide_node_id_path() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = slide_node_id_path_;
  slide_node_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* CommandTransitionSetValueArchive::unsafe_arena_release_slide_node_id_path() {
  // @@protoc_insertion_point(field_release:KN.CommandTransitionSetValueArchive.slide_node_id_path)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = slide_node_id_path_;
  slide_node_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* CommandTransitionSetValueArchive::_internal_mutable_slide_node_id_path() {
  _has_bits_[0] |= 0x00000004u;
  if (slide_node_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    slide_node_id_path_ = p;
  }
  return slide_node_id_path_;
}
inline ::TSP::UUIDPath* CommandTransitionSetValueArchive::mutable_slide_node_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_slide_node_id_path();
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.slide_node_id_path)
  return _msg;
}
inline void CommandTransitionSetValueArchive::set_allocated_slide_node_id_path(::TSP::UUIDPath* slide_node_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_id_path_);
  }
  if (slide_node_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_id_path));
    if (message_arena != submessage_arena) {
      slide_node_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_node_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  slide_node_id_path_ = slide_node_id_path;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTransitionSetValueArchive.slide_node_id_path)
}

// optional .KN.TransitionAttributesArchive old_attributes = 3;
inline bool CommandTransitionSetValueArchive::_internal_has_old_attributes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_attributes_ != nullptr);
  return value;
}
inline bool CommandTransitionSetValueArchive::has_old_attributes() const {
  return _internal_has_old_attributes();
}
inline const ::KN::TransitionAttributesArchive& CommandTransitionSetValueArchive::_internal_old_attributes() const {
  const ::KN::TransitionAttributesArchive* p = old_attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::TransitionAttributesArchive&>(
      ::KN::_TransitionAttributesArchive_default_instance_);
}
inline const ::KN::TransitionAttributesArchive& CommandTransitionSetValueArchive::old_attributes() const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.old_attributes)
  return _internal_old_attributes();
}
inline void CommandTransitionSetValueArchive::unsafe_arena_set_allocated_old_attributes(
    ::KN::TransitionAttributesArchive* old_attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_attributes_);
  }
  old_attributes_ = old_attributes;
  if (old_attributes) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTransitionSetValueArchive.old_attributes)
}
inline ::KN::TransitionAttributesArchive* CommandTransitionSetValueArchive::release_old_attributes() {
  _has_bits_[0] &= ~0x00000008u;
  ::KN::TransitionAttributesArchive* temp = old_attributes_;
  old_attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::TransitionAttributesArchive* CommandTransitionSetValueArchive::unsafe_arena_release_old_attributes() {
  // @@protoc_insertion_point(field_release:KN.CommandTransitionSetValueArchive.old_attributes)
  _has_bits_[0] &= ~0x00000008u;
  ::KN::TransitionAttributesArchive* temp = old_attributes_;
  old_attributes_ = nullptr;
  return temp;
}
inline ::KN::TransitionAttributesArchive* CommandTransitionSetValueArchive::_internal_mutable_old_attributes() {
  _has_bits_[0] |= 0x00000008u;
  if (old_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::TransitionAttributesArchive>(GetArenaForAllocation());
    old_attributes_ = p;
  }
  return old_attributes_;
}
inline ::KN::TransitionAttributesArchive* CommandTransitionSetValueArchive::mutable_old_attributes() {
  ::KN::TransitionAttributesArchive* _msg = _internal_mutable_old_attributes();
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.old_attributes)
  return _msg;
}
inline void CommandTransitionSetValueArchive::set_allocated_old_attributes(::KN::TransitionAttributesArchive* old_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_attributes_);
  }
  if (old_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_attributes));
    if (message_arena != submessage_arena) {
      old_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_attributes_ = old_attributes;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTransitionSetValueArchive.old_attributes)
}

// optional .KN.TransitionAttributesArchive attributes = 4;
inline bool CommandTransitionSetValueArchive::_internal_has_attributes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || attributes_ != nullptr);
  return value;
}
inline bool CommandTransitionSetValueArchive::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::KN::TransitionAttributesArchive& CommandTransitionSetValueArchive::_internal_attributes() const {
  const ::KN::TransitionAttributesArchive* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::TransitionAttributesArchive&>(
      ::KN::_TransitionAttributesArchive_default_instance_);
}
inline const ::KN::TransitionAttributesArchive& CommandTransitionSetValueArchive::attributes() const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.attributes)
  return _internal_attributes();
}
inline void CommandTransitionSetValueArchive::unsafe_arena_set_allocated_attributes(
    ::KN::TransitionAttributesArchive* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTransitionSetValueArchive.attributes)
}
inline ::KN::TransitionAttributesArchive* CommandTransitionSetValueArchive::release_attributes() {
  _has_bits_[0] &= ~0x00000010u;
  ::KN::TransitionAttributesArchive* temp = attributes_;
  attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::TransitionAttributesArchive* CommandTransitionSetValueArchive::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:KN.CommandTransitionSetValueArchive.attributes)
  _has_bits_[0] &= ~0x00000010u;
  ::KN::TransitionAttributesArchive* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::KN::TransitionAttributesArchive* CommandTransitionSetValueArchive::_internal_mutable_attributes() {
  _has_bits_[0] |= 0x00000010u;
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::TransitionAttributesArchive>(GetArenaForAllocation());
    attributes_ = p;
  }
  return attributes_;
}
inline ::KN::TransitionAttributesArchive* CommandTransitionSetValueArchive::mutable_attributes() {
  ::KN::TransitionAttributesArchive* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.attributes)
  return _msg;
}
inline void CommandTransitionSetValueArchive::set_allocated_attributes(::KN::TransitionAttributesArchive* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTransitionSetValueArchive.attributes)
}

// optional string property = 5;
inline bool CommandTransitionSetValueArchive::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandTransitionSetValueArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandTransitionSetValueArchive::clear_property() {
  property_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandTransitionSetValueArchive::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandTransitionSetValueArchive.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandTransitionSetValueArchive::set_property(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandTransitionSetValueArchive.property)
}
inline std::string* CommandTransitionSetValueArchive::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandTransitionSetValueArchive.property)
  return _s;
}
inline const std::string& CommandTransitionSetValueArchive::_internal_property() const {
  return property_.Get();
}
inline void CommandTransitionSetValueArchive::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandTransitionSetValueArchive::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000001u;
  return property_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandTransitionSetValueArchive::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandTransitionSetValueArchive.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandTransitionSetValueArchive::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTransitionSetValueArchive.property)
}

// -------------------------------------------------------------------

// CommandShowSetSlideNumberVisibilityArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandShowSetSlideNumberVisibilityArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowSetSlideNumberVisibilityArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowSetSlideNumberVisibilityArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSlideNumberVisibilityArchive.super)
  return _internal_super();
}
inline void CommandShowSetSlideNumberVisibilityArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSlideNumberVisibilityArchive.super)
}
inline ::TSK::CommandArchive* CommandShowSetSlideNumberVisibilityArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetSlideNumberVisibilityArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSlideNumberVisibilityArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetSlideNumberVisibilityArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowSetSlideNumberVisibilityArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSlideNumberVisibilityArchive.super)
  return _msg;
}
inline void CommandShowSetSlideNumberVisibilityArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSlideNumberVisibilityArchive.super)
}

// required bool slide_numbers_visible = 3;
inline bool CommandShowSetSlideNumberVisibilityArchive::_internal_has_slide_numbers_visible() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::has_slide_numbers_visible() const {
  return _internal_has_slide_numbers_visible();
}
inline void CommandShowSetSlideNumberVisibilityArchive::clear_slide_numbers_visible() {
  slide_numbers_visible_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::_internal_slide_numbers_visible() const {
  return slide_numbers_visible_;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::slide_numbers_visible() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSlideNumberVisibilityArchive.slide_numbers_visible)
  return _internal_slide_numbers_visible();
}
inline void CommandShowSetSlideNumberVisibilityArchive::_internal_set_slide_numbers_visible(bool value) {
  _has_bits_[0] |= 0x00000002u;
  slide_numbers_visible_ = value;
}
inline void CommandShowSetSlideNumberVisibilityArchive::set_slide_numbers_visible(bool value) {
  _internal_set_slide_numbers_visible(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowSetSlideNumberVisibilityArchive.slide_numbers_visible)
}

// repeated .TSP.UUID ids_of_slide_nodes_to_skip = 4;
inline int CommandShowSetSlideNumberVisibilityArchive::_internal_ids_of_slide_nodes_to_skip_size() const {
  return ids_of_slide_nodes_to_skip_.size();
}
inline int CommandShowSetSlideNumberVisibilityArchive::ids_of_slide_nodes_to_skip_size() const {
  return _internal_ids_of_slide_nodes_to_skip_size();
}
inline ::TSP::UUID* CommandShowSetSlideNumberVisibilityArchive::mutable_ids_of_slide_nodes_to_skip(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_to_skip)
  return ids_of_slide_nodes_to_skip_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandShowSetSlideNumberVisibilityArchive::mutable_ids_of_slide_nodes_to_skip() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_to_skip)
  return &ids_of_slide_nodes_to_skip_;
}
inline const ::TSP::UUID& CommandShowSetSlideNumberVisibilityArchive::_internal_ids_of_slide_nodes_to_skip(int index) const {
  return ids_of_slide_nodes_to_skip_.Get(index);
}
inline const ::TSP::UUID& CommandShowSetSlideNumberVisibilityArchive::ids_of_slide_nodes_to_skip(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_to_skip)
  return _internal_ids_of_slide_nodes_to_skip(index);
}
inline ::TSP::UUID* CommandShowSetSlideNumberVisibilityArchive::_internal_add_ids_of_slide_nodes_to_skip() {
  return ids_of_slide_nodes_to_skip_.Add();
}
inline ::TSP::UUID* CommandShowSetSlideNumberVisibilityArchive::add_ids_of_slide_nodes_to_skip() {
  ::TSP::UUID* _add = _internal_add_ids_of_slide_nodes_to_skip();
  // @@protoc_insertion_point(field_add:KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_to_skip)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandShowSetSlideNumberVisibilityArchive::ids_of_slide_nodes_to_skip() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_to_skip)
  return ids_of_slide_nodes_to_skip_;
}

// repeated .TSP.UUID ids_of_slide_nodes_already_correct = 5;
inline int CommandShowSetSlideNumberVisibilityArchive::_internal_ids_of_slide_nodes_already_correct_size() const {
  return ids_of_slide_nodes_already_correct_.size();
}
inline int CommandShowSetSlideNumberVisibilityArchive::ids_of_slide_nodes_already_correct_size() const {
  return _internal_ids_of_slide_nodes_already_correct_size();
}
inline ::TSP::UUID* CommandShowSetSlideNumberVisibilityArchive::mutable_ids_of_slide_nodes_already_correct(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_already_correct)
  return ids_of_slide_nodes_already_correct_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CommandShowSetSlideNumberVisibilityArchive::mutable_ids_of_slide_nodes_already_correct() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_already_correct)
  return &ids_of_slide_nodes_already_correct_;
}
inline const ::TSP::UUID& CommandShowSetSlideNumberVisibilityArchive::_internal_ids_of_slide_nodes_already_correct(int index) const {
  return ids_of_slide_nodes_already_correct_.Get(index);
}
inline const ::TSP::UUID& CommandShowSetSlideNumberVisibilityArchive::ids_of_slide_nodes_already_correct(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_already_correct)
  return _internal_ids_of_slide_nodes_already_correct(index);
}
inline ::TSP::UUID* CommandShowSetSlideNumberVisibilityArchive::_internal_add_ids_of_slide_nodes_already_correct() {
  return ids_of_slide_nodes_already_correct_.Add();
}
inline ::TSP::UUID* CommandShowSetSlideNumberVisibilityArchive::add_ids_of_slide_nodes_already_correct() {
  ::TSP::UUID* _add = _internal_add_ids_of_slide_nodes_already_correct();
  // @@protoc_insertion_point(field_add:KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_already_correct)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CommandShowSetSlideNumberVisibilityArchive::ids_of_slide_nodes_already_correct() const {
  // @@protoc_insertion_point(field_list:KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_already_correct)
  return ids_of_slide_nodes_already_correct_;
}

// required bool is_undo = 6;
inline bool CommandShowSetSlideNumberVisibilityArchive::_internal_has_is_undo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::has_is_undo() const {
  return _internal_has_is_undo();
}
inline void CommandShowSetSlideNumberVisibilityArchive::clear_is_undo() {
  is_undo_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::_internal_is_undo() const {
  return is_undo_;
}
inline bool CommandShowSetSlideNumberVisibilityArchive::is_undo() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSlideNumberVisibilityArchive.is_undo)
  return _internal_is_undo();
}
inline void CommandShowSetSlideNumberVisibilityArchive::_internal_set_is_undo(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_undo_ = value;
}
inline void CommandShowSetSlideNumberVisibilityArchive::set_is_undo(bool value) {
  _internal_set_is_undo(value);
  // @@protoc_insertion_point(field_set:KN.CommandShowSetSlideNumberVisibilityArchive.is_undo)
}

// -------------------------------------------------------------------

// CommandTemplateSetThumbnailTextArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandTemplateSetThumbnailTextArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandTemplateSetThumbnailTextArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandTemplateSetThumbnailTextArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandTemplateSetThumbnailTextArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSetThumbnailTextArchive.super)
  return _internal_super();
}
inline void CommandTemplateSetThumbnailTextArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTemplateSetThumbnailTextArchive.super)
}
inline ::TSK::CommandArchive* CommandTemplateSetThumbnailTextArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandTemplateSetThumbnailTextArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandTemplateSetThumbnailTextArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandTemplateSetThumbnailTextArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandTemplateSetThumbnailTextArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSetThumbnailTextArchive.super)
  return _msg;
}
inline void CommandTemplateSetThumbnailTextArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTemplateSetThumbnailTextArchive.super)
}

// required .TSP.UUID template_id = 2;
inline bool CommandTemplateSetThumbnailTextArchive::_internal_has_template_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || template_id_ != nullptr);
  return value;
}
inline bool CommandTemplateSetThumbnailTextArchive::has_template_id() const {
  return _internal_has_template_id();
}
inline const ::TSP::UUID& CommandTemplateSetThumbnailTextArchive::_internal_template_id() const {
  const ::TSP::UUID* p = template_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandTemplateSetThumbnailTextArchive::template_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSetThumbnailTextArchive.template_id)
  return _internal_template_id();
}
inline void CommandTemplateSetThumbnailTextArchive::unsafe_arena_set_allocated_template_id(
    ::TSP::UUID* template_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_id_);
  }
  template_id_ = template_id;
  if (template_id) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTemplateSetThumbnailTextArchive.template_id)
}
inline ::TSP::UUID* CommandTemplateSetThumbnailTextArchive::release_template_id() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = template_id_;
  template_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandTemplateSetThumbnailTextArchive::unsafe_arena_release_template_id() {
  // @@protoc_insertion_point(field_release:KN.CommandTemplateSetThumbnailTextArchive.template_id)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = template_id_;
  template_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandTemplateSetThumbnailTextArchive::_internal_mutable_template_id() {
  _has_bits_[0] |= 0x00000008u;
  if (template_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    template_id_ = p;
  }
  return template_id_;
}
inline ::TSP::UUID* CommandTemplateSetThumbnailTextArchive::mutable_template_id() {
  ::TSP::UUID* _msg = _internal_mutable_template_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSetThumbnailTextArchive.template_id)
  return _msg;
}
inline void CommandTemplateSetThumbnailTextArchive::set_allocated_template_id(::TSP::UUID* template_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_id_);
  }
  if (template_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_id));
    if (message_arena != submessage_arena) {
      template_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  template_id_ = template_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTemplateSetThumbnailTextArchive.template_id)
}

// required bool is_body = 3;
inline bool CommandTemplateSetThumbnailTextArchive::_internal_has_is_body() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandTemplateSetThumbnailTextArchive::has_is_body() const {
  return _internal_has_is_body();
}
inline void CommandTemplateSetThumbnailTextArchive::clear_is_body() {
  is_body_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandTemplateSetThumbnailTextArchive::_internal_is_body() const {
  return is_body_;
}
inline bool CommandTemplateSetThumbnailTextArchive::is_body() const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSetThumbnailTextArchive.is_body)
  return _internal_is_body();
}
inline void CommandTemplateSetThumbnailTextArchive::_internal_set_is_body(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_body_ = value;
}
inline void CommandTemplateSetThumbnailTextArchive::set_is_body(bool value) {
  _internal_set_is_body(value);
  // @@protoc_insertion_point(field_set:KN.CommandTemplateSetThumbnailTextArchive.is_body)
}

// optional string new_text = 4;
inline bool CommandTemplateSetThumbnailTextArchive::_internal_has_new_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandTemplateSetThumbnailTextArchive::has_new_text() const {
  return _internal_has_new_text();
}
inline void CommandTemplateSetThumbnailTextArchive::clear_new_text() {
  new_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandTemplateSetThumbnailTextArchive::new_text() const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSetThumbnailTextArchive.new_text)
  return _internal_new_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandTemplateSetThumbnailTextArchive::set_new_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 new_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandTemplateSetThumbnailTextArchive.new_text)
}
inline std::string* CommandTemplateSetThumbnailTextArchive::mutable_new_text() {
  std::string* _s = _internal_mutable_new_text();
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSetThumbnailTextArchive.new_text)
  return _s;
}
inline const std::string& CommandTemplateSetThumbnailTextArchive::_internal_new_text() const {
  return new_text_.Get();
}
inline void CommandTemplateSetThumbnailTextArchive::_internal_set_new_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  new_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandTemplateSetThumbnailTextArchive::_internal_mutable_new_text() {
  _has_bits_[0] |= 0x00000001u;
  return new_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandTemplateSetThumbnailTextArchive::release_new_text() {
  // @@protoc_insertion_point(field_release:KN.CommandTemplateSetThumbnailTextArchive.new_text)
  if (!_internal_has_new_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return new_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandTemplateSetThumbnailTextArchive::set_allocated_new_text(std::string* new_text) {
  if (new_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  new_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTemplateSetThumbnailTextArchive.new_text)
}

// optional string old_text = 5;
inline bool CommandTemplateSetThumbnailTextArchive::_internal_has_old_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandTemplateSetThumbnailTextArchive::has_old_text() const {
  return _internal_has_old_text();
}
inline void CommandTemplateSetThumbnailTextArchive::clear_old_text() {
  old_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandTemplateSetThumbnailTextArchive::old_text() const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSetThumbnailTextArchive.old_text)
  return _internal_old_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandTemplateSetThumbnailTextArchive::set_old_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 old_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandTemplateSetThumbnailTextArchive.old_text)
}
inline std::string* CommandTemplateSetThumbnailTextArchive::mutable_old_text() {
  std::string* _s = _internal_mutable_old_text();
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSetThumbnailTextArchive.old_text)
  return _s;
}
inline const std::string& CommandTemplateSetThumbnailTextArchive::_internal_old_text() const {
  return old_text_.Get();
}
inline void CommandTemplateSetThumbnailTextArchive::_internal_set_old_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  old_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandTemplateSetThumbnailTextArchive::_internal_mutable_old_text() {
  _has_bits_[0] |= 0x00000002u;
  return old_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandTemplateSetThumbnailTextArchive::release_old_text() {
  // @@protoc_insertion_point(field_release:KN.CommandTemplateSetThumbnailTextArchive.old_text)
  if (!_internal_has_old_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return old_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandTemplateSetThumbnailTextArchive::set_allocated_old_text(std::string* old_text) {
  if (old_text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTemplateSetThumbnailTextArchive.old_text)
}

// -------------------------------------------------------------------

// CommandTemplateSetBodyStylesArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandTemplateSetBodyStylesArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandTemplateSetBodyStylesArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandTemplateSetBodyStylesArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandTemplateSetBodyStylesArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSetBodyStylesArchive.super)
  return _internal_super();
}
inline void CommandTemplateSetBodyStylesArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTemplateSetBodyStylesArchive.super)
}
inline ::TSK::CommandArchive* CommandTemplateSetBodyStylesArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandTemplateSetBodyStylesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandTemplateSetBodyStylesArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandTemplateSetBodyStylesArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandTemplateSetBodyStylesArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSetBodyStylesArchive.super)
  return _msg;
}
inline void CommandTemplateSetBodyStylesArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTemplateSetBodyStylesArchive.super)
}

// required .TSP.UUID template_id = 2;
inline bool CommandTemplateSetBodyStylesArchive::_internal_has_template_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || template_id_ != nullptr);
  return value;
}
inline bool CommandTemplateSetBodyStylesArchive::has_template_id() const {
  return _internal_has_template_id();
}
inline const ::TSP::UUID& CommandTemplateSetBodyStylesArchive::_internal_template_id() const {
  const ::TSP::UUID* p = template_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandTemplateSetBodyStylesArchive::template_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSetBodyStylesArchive.template_id)
  return _internal_template_id();
}
inline void CommandTemplateSetBodyStylesArchive::unsafe_arena_set_allocated_template_id(
    ::TSP::UUID* template_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_id_);
  }
  template_id_ = template_id;
  if (template_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandTemplateSetBodyStylesArchive.template_id)
}
inline ::TSP::UUID* CommandTemplateSetBodyStylesArchive::release_template_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = template_id_;
  template_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandTemplateSetBodyStylesArchive::unsafe_arena_release_template_id() {
  // @@protoc_insertion_point(field_release:KN.CommandTemplateSetBodyStylesArchive.template_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = template_id_;
  template_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandTemplateSetBodyStylesArchive::_internal_mutable_template_id() {
  _has_bits_[0] |= 0x00000002u;
  if (template_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    template_id_ = p;
  }
  return template_id_;
}
inline ::TSP::UUID* CommandTemplateSetBodyStylesArchive::mutable_template_id() {
  ::TSP::UUID* _msg = _internal_mutable_template_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSetBodyStylesArchive.template_id)
  return _msg;
}
inline void CommandTemplateSetBodyStylesArchive::set_allocated_template_id(::TSP::UUID* template_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_id_);
  }
  if (template_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_id));
    if (message_arena != submessage_arena) {
      template_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  template_id_ = template_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandTemplateSetBodyStylesArchive.template_id)
}

// repeated .TSP.Reference new_paragraph_styles = 3;
inline int CommandTemplateSetBodyStylesArchive::_internal_new_paragraph_styles_size() const {
  return new_paragraph_styles_.size();
}
inline int CommandTemplateSetBodyStylesArchive::new_paragraph_styles_size() const {
  return _internal_new_paragraph_styles_size();
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::mutable_new_paragraph_styles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSetBodyStylesArchive.new_paragraph_styles)
  return new_paragraph_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandTemplateSetBodyStylesArchive::mutable_new_paragraph_styles() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTemplateSetBodyStylesArchive.new_paragraph_styles)
  return &new_paragraph_styles_;
}
inline const ::TSP::Reference& CommandTemplateSetBodyStylesArchive::_internal_new_paragraph_styles(int index) const {
  return new_paragraph_styles_.Get(index);
}
inline const ::TSP::Reference& CommandTemplateSetBodyStylesArchive::new_paragraph_styles(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSetBodyStylesArchive.new_paragraph_styles)
  return _internal_new_paragraph_styles(index);
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::_internal_add_new_paragraph_styles() {
  return new_paragraph_styles_.Add();
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::add_new_paragraph_styles() {
  ::TSP::Reference* _add = _internal_add_new_paragraph_styles();
  // @@protoc_insertion_point(field_add:KN.CommandTemplateSetBodyStylesArchive.new_paragraph_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandTemplateSetBodyStylesArchive::new_paragraph_styles() const {
  // @@protoc_insertion_point(field_list:KN.CommandTemplateSetBodyStylesArchive.new_paragraph_styles)
  return new_paragraph_styles_;
}

// repeated .TSP.Reference new_list_styles = 4;
inline int CommandTemplateSetBodyStylesArchive::_internal_new_list_styles_size() const {
  return new_list_styles_.size();
}
inline int CommandTemplateSetBodyStylesArchive::new_list_styles_size() const {
  return _internal_new_list_styles_size();
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::mutable_new_list_styles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSetBodyStylesArchive.new_list_styles)
  return new_list_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandTemplateSetBodyStylesArchive::mutable_new_list_styles() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTemplateSetBodyStylesArchive.new_list_styles)
  return &new_list_styles_;
}
inline const ::TSP::Reference& CommandTemplateSetBodyStylesArchive::_internal_new_list_styles(int index) const {
  return new_list_styles_.Get(index);
}
inline const ::TSP::Reference& CommandTemplateSetBodyStylesArchive::new_list_styles(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSetBodyStylesArchive.new_list_styles)
  return _internal_new_list_styles(index);
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::_internal_add_new_list_styles() {
  return new_list_styles_.Add();
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::add_new_list_styles() {
  ::TSP::Reference* _add = _internal_add_new_list_styles();
  // @@protoc_insertion_point(field_add:KN.CommandTemplateSetBodyStylesArchive.new_list_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandTemplateSetBodyStylesArchive::new_list_styles() const {
  // @@protoc_insertion_point(field_list:KN.CommandTemplateSetBodyStylesArchive.new_list_styles)
  return new_list_styles_;
}

// repeated .TSP.Reference old_paragraph_styles = 5;
inline int CommandTemplateSetBodyStylesArchive::_internal_old_paragraph_styles_size() const {
  return old_paragraph_styles_.size();
}
inline int CommandTemplateSetBodyStylesArchive::old_paragraph_styles_size() const {
  return _internal_old_paragraph_styles_size();
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::mutable_old_paragraph_styles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSetBodyStylesArchive.old_paragraph_styles)
  return old_paragraph_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandTemplateSetBodyStylesArchive::mutable_old_paragraph_styles() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTemplateSetBodyStylesArchive.old_paragraph_styles)
  return &old_paragraph_styles_;
}
inline const ::TSP::Reference& CommandTemplateSetBodyStylesArchive::_internal_old_paragraph_styles(int index) const {
  return old_paragraph_styles_.Get(index);
}
inline const ::TSP::Reference& CommandTemplateSetBodyStylesArchive::old_paragraph_styles(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSetBodyStylesArchive.old_paragraph_styles)
  return _internal_old_paragraph_styles(index);
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::_internal_add_old_paragraph_styles() {
  return old_paragraph_styles_.Add();
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::add_old_paragraph_styles() {
  ::TSP::Reference* _add = _internal_add_old_paragraph_styles();
  // @@protoc_insertion_point(field_add:KN.CommandTemplateSetBodyStylesArchive.old_paragraph_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandTemplateSetBodyStylesArchive::old_paragraph_styles() const {
  // @@protoc_insertion_point(field_list:KN.CommandTemplateSetBodyStylesArchive.old_paragraph_styles)
  return old_paragraph_styles_;
}

// repeated .TSP.Reference old_list_styles = 6;
inline int CommandTemplateSetBodyStylesArchive::_internal_old_list_styles_size() const {
  return old_list_styles_.size();
}
inline int CommandTemplateSetBodyStylesArchive::old_list_styles_size() const {
  return _internal_old_list_styles_size();
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::mutable_old_list_styles(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandTemplateSetBodyStylesArchive.old_list_styles)
  return old_list_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandTemplateSetBodyStylesArchive::mutable_old_list_styles() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandTemplateSetBodyStylesArchive.old_list_styles)
  return &old_list_styles_;
}
inline const ::TSP::Reference& CommandTemplateSetBodyStylesArchive::_internal_old_list_styles(int index) const {
  return old_list_styles_.Get(index);
}
inline const ::TSP::Reference& CommandTemplateSetBodyStylesArchive::old_list_styles(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandTemplateSetBodyStylesArchive.old_list_styles)
  return _internal_old_list_styles(index);
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::_internal_add_old_list_styles() {
  return old_list_styles_.Add();
}
inline ::TSP::Reference* CommandTemplateSetBodyStylesArchive::add_old_list_styles() {
  ::TSP::Reference* _add = _internal_add_old_list_styles();
  // @@protoc_insertion_point(field_add:KN.CommandTemplateSetBodyStylesArchive.old_list_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandTemplateSetBodyStylesArchive::old_list_styles() const {
  // @@protoc_insertion_point(field_list:KN.CommandTemplateSetBodyStylesArchive.old_list_styles)
  return old_list_styles_;
}

// -------------------------------------------------------------------

// CommandChangeTemplateSlideArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandChangeTemplateSlideArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandChangeTemplateSlideArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandChangeTemplateSlideArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandChangeTemplateSlideArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandChangeTemplateSlideArchive.super)
  return _internal_super();
}
inline void CommandChangeTemplateSlideArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandChangeTemplateSlideArchive.super)
}
inline ::TSK::CommandArchive* CommandChangeTemplateSlideArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandChangeTemplateSlideArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandChangeTemplateSlideArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandChangeTemplateSlideArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandChangeTemplateSlideArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandChangeTemplateSlideArchive.super)
  return _msg;
}
inline void CommandChangeTemplateSlideArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandChangeTemplateSlideArchive.super)
}

// required .TSP.UUIDPath slide_id_path = 2;
inline bool CommandChangeTemplateSlideArchive::_internal_has_slide_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_path_ != nullptr);
  return value;
}
inline bool CommandChangeTemplateSlideArchive::has_slide_id_path() const {
  return _internal_has_slide_id_path();
}
inline const ::TSP::UUIDPath& CommandChangeTemplateSlideArchive::_internal_slide_id_path() const {
  const ::TSP::UUIDPath* p = slide_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& CommandChangeTemplateSlideArchive::slide_id_path() const {
  // @@protoc_insertion_point(field_get:KN.CommandChangeTemplateSlideArchive.slide_id_path)
  return _internal_slide_id_path();
}
inline void CommandChangeTemplateSlideArchive::unsafe_arena_set_allocated_slide_id_path(
    ::TSP::UUIDPath* slide_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path_);
  }
  slide_id_path_ = slide_id_path;
  if (slide_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandChangeTemplateSlideArchive.slide_id_path)
}
inline ::TSP::UUIDPath* CommandChangeTemplateSlideArchive::release_slide_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = slide_id_path_;
  slide_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* CommandChangeTemplateSlideArchive::unsafe_arena_release_slide_id_path() {
  // @@protoc_insertion_point(field_release:KN.CommandChangeTemplateSlideArchive.slide_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = slide_id_path_;
  slide_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* CommandChangeTemplateSlideArchive::_internal_mutable_slide_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    slide_id_path_ = p;
  }
  return slide_id_path_;
}
inline ::TSP::UUIDPath* CommandChangeTemplateSlideArchive::mutable_slide_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_slide_id_path();
  // @@protoc_insertion_point(field_mutable:KN.CommandChangeTemplateSlideArchive.slide_id_path)
  return _msg;
}
inline void CommandChangeTemplateSlideArchive::set_allocated_slide_id_path(::TSP::UUIDPath* slide_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path_);
  }
  if (slide_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path));
    if (message_arena != submessage_arena) {
      slide_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_path_ = slide_id_path;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandChangeTemplateSlideArchive.slide_id_path)
}

// required .TSP.Reference template_slide_node = 3;
inline bool CommandChangeTemplateSlideArchive::_internal_has_template_slide_node() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || template_slide_node_ != nullptr);
  return value;
}
inline bool CommandChangeTemplateSlideArchive::has_template_slide_node() const {
  return _internal_has_template_slide_node();
}
inline const ::TSP::Reference& CommandChangeTemplateSlideArchive::_internal_template_slide_node() const {
  const ::TSP::Reference* p = template_slide_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChangeTemplateSlideArchive::template_slide_node() const {
  // @@protoc_insertion_point(field_get:KN.CommandChangeTemplateSlideArchive.template_slide_node)
  return _internal_template_slide_node();
}
inline void CommandChangeTemplateSlideArchive::unsafe_arena_set_allocated_template_slide_node(
    ::TSP::Reference* template_slide_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_slide_node_);
  }
  template_slide_node_ = template_slide_node;
  if (template_slide_node) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandChangeTemplateSlideArchive.template_slide_node)
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::release_template_slide_node() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = template_slide_node_;
  template_slide_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::unsafe_arena_release_template_slide_node() {
  // @@protoc_insertion_point(field_release:KN.CommandChangeTemplateSlideArchive.template_slide_node)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = template_slide_node_;
  template_slide_node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::_internal_mutable_template_slide_node() {
  _has_bits_[0] |= 0x00000004u;
  if (template_slide_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    template_slide_node_ = p;
  }
  return template_slide_node_;
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::mutable_template_slide_node() {
  ::TSP::Reference* _msg = _internal_mutable_template_slide_node();
  // @@protoc_insertion_point(field_mutable:KN.CommandChangeTemplateSlideArchive.template_slide_node)
  return _msg;
}
inline void CommandChangeTemplateSlideArchive::set_allocated_template_slide_node(::TSP::Reference* template_slide_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_slide_node_);
  }
  if (template_slide_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_slide_node));
    if (message_arena != submessage_arena) {
      template_slide_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_slide_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  template_slide_node_ = template_slide_node;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandChangeTemplateSlideArchive.template_slide_node)
}

// optional .TSP.Reference old_template_slide_node = 4;
inline bool CommandChangeTemplateSlideArchive::_internal_has_old_template_slide_node() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_template_slide_node_ != nullptr);
  return value;
}
inline bool CommandChangeTemplateSlideArchive::has_old_template_slide_node() const {
  return _internal_has_old_template_slide_node();
}
inline const ::TSP::Reference& CommandChangeTemplateSlideArchive::_internal_old_template_slide_node() const {
  const ::TSP::Reference* p = old_template_slide_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChangeTemplateSlideArchive::old_template_slide_node() const {
  // @@protoc_insertion_point(field_get:KN.CommandChangeTemplateSlideArchive.old_template_slide_node)
  return _internal_old_template_slide_node();
}
inline void CommandChangeTemplateSlideArchive::unsafe_arena_set_allocated_old_template_slide_node(
    ::TSP::Reference* old_template_slide_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_template_slide_node_);
  }
  old_template_slide_node_ = old_template_slide_node;
  if (old_template_slide_node) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandChangeTemplateSlideArchive.old_template_slide_node)
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::release_old_template_slide_node() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_template_slide_node_;
  old_template_slide_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::unsafe_arena_release_old_template_slide_node() {
  // @@protoc_insertion_point(field_release:KN.CommandChangeTemplateSlideArchive.old_template_slide_node)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_template_slide_node_;
  old_template_slide_node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::_internal_mutable_old_template_slide_node() {
  _has_bits_[0] |= 0x00000008u;
  if (old_template_slide_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_template_slide_node_ = p;
  }
  return old_template_slide_node_;
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::mutable_old_template_slide_node() {
  ::TSP::Reference* _msg = _internal_mutable_old_template_slide_node();
  // @@protoc_insertion_point(field_mutable:KN.CommandChangeTemplateSlideArchive.old_template_slide_node)
  return _msg;
}
inline void CommandChangeTemplateSlideArchive::set_allocated_old_template_slide_node(::TSP::Reference* old_template_slide_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_template_slide_node_);
  }
  if (old_template_slide_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_template_slide_node));
    if (message_arena != submessage_arena) {
      old_template_slide_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_template_slide_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_template_slide_node_ = old_template_slide_node;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandChangeTemplateSlideArchive.old_template_slide_node)
}

// required bool is_undo_redo = 5;
inline bool CommandChangeTemplateSlideArchive::_internal_has_is_undo_redo() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandChangeTemplateSlideArchive::has_is_undo_redo() const {
  return _internal_has_is_undo_redo();
}
inline void CommandChangeTemplateSlideArchive::clear_is_undo_redo() {
  is_undo_redo_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandChangeTemplateSlideArchive::_internal_is_undo_redo() const {
  return is_undo_redo_;
}
inline bool CommandChangeTemplateSlideArchive::is_undo_redo() const {
  // @@protoc_insertion_point(field_get:KN.CommandChangeTemplateSlideArchive.is_undo_redo)
  return _internal_is_undo_redo();
}
inline void CommandChangeTemplateSlideArchive::_internal_set_is_undo_redo(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_undo_redo_ = value;
}
inline void CommandChangeTemplateSlideArchive::set_is_undo_redo(bool value) {
  _internal_set_is_undo_redo(value);
  // @@protoc_insertion_point(field_set:KN.CommandChangeTemplateSlideArchive.is_undo_redo)
}

// optional .TSP.Reference target_prototype = 6;
inline bool CommandChangeTemplateSlideArchive::_internal_has_target_prototype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || target_prototype_ != nullptr);
  return value;
}
inline bool CommandChangeTemplateSlideArchive::has_target_prototype() const {
  return _internal_has_target_prototype();
}
inline const ::TSP::Reference& CommandChangeTemplateSlideArchive::_internal_target_prototype() const {
  const ::TSP::Reference* p = target_prototype_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChangeTemplateSlideArchive::target_prototype() const {
  // @@protoc_insertion_point(field_get:KN.CommandChangeTemplateSlideArchive.target_prototype)
  return _internal_target_prototype();
}
inline void CommandChangeTemplateSlideArchive::unsafe_arena_set_allocated_target_prototype(
    ::TSP::Reference* target_prototype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_prototype_);
  }
  target_prototype_ = target_prototype;
  if (target_prototype) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandChangeTemplateSlideArchive.target_prototype)
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::release_target_prototype() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = target_prototype_;
  target_prototype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::unsafe_arena_release_target_prototype() {
  // @@protoc_insertion_point(field_release:KN.CommandChangeTemplateSlideArchive.target_prototype)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = target_prototype_;
  target_prototype_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::_internal_mutable_target_prototype() {
  _has_bits_[0] |= 0x00000010u;
  if (target_prototype_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    target_prototype_ = p;
  }
  return target_prototype_;
}
inline ::TSP::Reference* CommandChangeTemplateSlideArchive::mutable_target_prototype() {
  ::TSP::Reference* _msg = _internal_mutable_target_prototype();
  // @@protoc_insertion_point(field_mutable:KN.CommandChangeTemplateSlideArchive.target_prototype)
  return _msg;
}
inline void CommandChangeTemplateSlideArchive::set_allocated_target_prototype(::TSP::Reference* target_prototype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_prototype_);
  }
  if (target_prototype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_prototype));
    if (message_arena != submessage_arena) {
      target_prototype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_prototype, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  target_prototype_ = target_prototype;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandChangeTemplateSlideArchive.target_prototype)
}

// -------------------------------------------------------------------

// CommandSlidePrimitiveSetTemplateArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlidePrimitiveSetTemplateArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlidePrimitiveSetTemplateArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlidePrimitiveSetTemplateArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlidePrimitiveSetTemplateArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePrimitiveSetTemplateArchive.super)
  return _internal_super();
}
inline void CommandSlidePrimitiveSetTemplateArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePrimitiveSetTemplateArchive.super)
}
inline ::TSK::CommandArchive* CommandSlidePrimitiveSetTemplateArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlidePrimitiveSetTemplateArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePrimitiveSetTemplateArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlidePrimitiveSetTemplateArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlidePrimitiveSetTemplateArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePrimitiveSetTemplateArchive.super)
  return _msg;
}
inline void CommandSlidePrimitiveSetTemplateArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePrimitiveSetTemplateArchive.super)
}

// required .TSP.UUIDPath slide_id_path = 2;
inline bool CommandSlidePrimitiveSetTemplateArchive::_internal_has_slide_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_path_ != nullptr);
  return value;
}
inline bool CommandSlidePrimitiveSetTemplateArchive::has_slide_id_path() const {
  return _internal_has_slide_id_path();
}
inline const ::TSP::UUIDPath& CommandSlidePrimitiveSetTemplateArchive::_internal_slide_id_path() const {
  const ::TSP::UUIDPath* p = slide_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& CommandSlidePrimitiveSetTemplateArchive::slide_id_path() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePrimitiveSetTemplateArchive.slide_id_path)
  return _internal_slide_id_path();
}
inline void CommandSlidePrimitiveSetTemplateArchive::unsafe_arena_set_allocated_slide_id_path(
    ::TSP::UUIDPath* slide_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path_);
  }
  slide_id_path_ = slide_id_path;
  if (slide_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePrimitiveSetTemplateArchive.slide_id_path)
}
inline ::TSP::UUIDPath* CommandSlidePrimitiveSetTemplateArchive::release_slide_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = slide_id_path_;
  slide_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* CommandSlidePrimitiveSetTemplateArchive::unsafe_arena_release_slide_id_path() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePrimitiveSetTemplateArchive.slide_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = slide_id_path_;
  slide_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* CommandSlidePrimitiveSetTemplateArchive::_internal_mutable_slide_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    slide_id_path_ = p;
  }
  return slide_id_path_;
}
inline ::TSP::UUIDPath* CommandSlidePrimitiveSetTemplateArchive::mutable_slide_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_slide_id_path();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePrimitiveSetTemplateArchive.slide_id_path)
  return _msg;
}
inline void CommandSlidePrimitiveSetTemplateArchive::set_allocated_slide_id_path(::TSP::UUIDPath* slide_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path_);
  }
  if (slide_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path));
    if (message_arena != submessage_arena) {
      slide_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_path_ = slide_id_path;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePrimitiveSetTemplateArchive.slide_id_path)
}

// required .TSP.UUID template_id = 3;
inline bool CommandSlidePrimitiveSetTemplateArchive::_internal_has_template_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || template_id_ != nullptr);
  return value;
}
inline bool CommandSlidePrimitiveSetTemplateArchive::has_template_id() const {
  return _internal_has_template_id();
}
inline const ::TSP::UUID& CommandSlidePrimitiveSetTemplateArchive::_internal_template_id() const {
  const ::TSP::UUID* p = template_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSlidePrimitiveSetTemplateArchive::template_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePrimitiveSetTemplateArchive.template_id)
  return _internal_template_id();
}
inline void CommandSlidePrimitiveSetTemplateArchive::unsafe_arena_set_allocated_template_id(
    ::TSP::UUID* template_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_id_);
  }
  template_id_ = template_id;
  if (template_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePrimitiveSetTemplateArchive.template_id)
}
inline ::TSP::UUID* CommandSlidePrimitiveSetTemplateArchive::release_template_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = template_id_;
  template_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSlidePrimitiveSetTemplateArchive::unsafe_arena_release_template_id() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePrimitiveSetTemplateArchive.template_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = template_id_;
  template_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSlidePrimitiveSetTemplateArchive::_internal_mutable_template_id() {
  _has_bits_[0] |= 0x00000004u;
  if (template_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    template_id_ = p;
  }
  return template_id_;
}
inline ::TSP::UUID* CommandSlidePrimitiveSetTemplateArchive::mutable_template_id() {
  ::TSP::UUID* _msg = _internal_mutable_template_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePrimitiveSetTemplateArchive.template_id)
  return _msg;
}
inline void CommandSlidePrimitiveSetTemplateArchive::set_allocated_template_id(::TSP::UUID* template_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_id_);
  }
  if (template_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_id));
    if (message_arena != submessage_arena) {
      template_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  template_id_ = template_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePrimitiveSetTemplateArchive.template_id)
}

// optional .TSP.Reference old_template_slide_node = 4;
inline bool CommandSlidePrimitiveSetTemplateArchive::_internal_has_old_template_slide_node() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_template_slide_node_ != nullptr);
  return value;
}
inline bool CommandSlidePrimitiveSetTemplateArchive::has_old_template_slide_node() const {
  return _internal_has_old_template_slide_node();
}
inline const ::TSP::Reference& CommandSlidePrimitiveSetTemplateArchive::_internal_old_template_slide_node() const {
  const ::TSP::Reference* p = old_template_slide_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSlidePrimitiveSetTemplateArchive::old_template_slide_node() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlidePrimitiveSetTemplateArchive.old_template_slide_node)
  return _internal_old_template_slide_node();
}
inline void CommandSlidePrimitiveSetTemplateArchive::unsafe_arena_set_allocated_old_template_slide_node(
    ::TSP::Reference* old_template_slide_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_template_slide_node_);
  }
  old_template_slide_node_ = old_template_slide_node;
  if (old_template_slide_node) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlidePrimitiveSetTemplateArchive.old_template_slide_node)
}
inline ::TSP::Reference* CommandSlidePrimitiveSetTemplateArchive::release_old_template_slide_node() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_template_slide_node_;
  old_template_slide_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetTemplateArchive::unsafe_arena_release_old_template_slide_node() {
  // @@protoc_insertion_point(field_release:KN.CommandSlidePrimitiveSetTemplateArchive.old_template_slide_node)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_template_slide_node_;
  old_template_slide_node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetTemplateArchive::_internal_mutable_old_template_slide_node() {
  _has_bits_[0] |= 0x00000008u;
  if (old_template_slide_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_template_slide_node_ = p;
  }
  return old_template_slide_node_;
}
inline ::TSP::Reference* CommandSlidePrimitiveSetTemplateArchive::mutable_old_template_slide_node() {
  ::TSP::Reference* _msg = _internal_mutable_old_template_slide_node();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlidePrimitiveSetTemplateArchive.old_template_slide_node)
  return _msg;
}
inline void CommandSlidePrimitiveSetTemplateArchive::set_allocated_old_template_slide_node(::TSP::Reference* old_template_slide_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_template_slide_node_);
  }
  if (old_template_slide_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_template_slide_node));
    if (message_arena != submessage_arena) {
      old_template_slide_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_template_slide_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_template_slide_node_ = old_template_slide_node;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlidePrimitiveSetTemplateArchive.old_template_slide_node)
}

// -------------------------------------------------------------------

// CommandSlideResetTemplateBackgroundObjectsArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideResetTemplateBackgroundObjectsArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideResetTemplateBackgroundObjectsArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideResetTemplateBackgroundObjectsArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideResetTemplateBackgroundObjectsArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideResetTemplateBackgroundObjectsArchive.super)
  return _internal_super();
}
inline void CommandSlideResetTemplateBackgroundObjectsArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideResetTemplateBackgroundObjectsArchive.super)
}
inline ::TSK::CommandArchive* CommandSlideResetTemplateBackgroundObjectsArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideResetTemplateBackgroundObjectsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideResetTemplateBackgroundObjectsArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideResetTemplateBackgroundObjectsArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideResetTemplateBackgroundObjectsArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideResetTemplateBackgroundObjectsArchive.super)
  return _msg;
}
inline void CommandSlideResetTemplateBackgroundObjectsArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideResetTemplateBackgroundObjectsArchive.super)
}

// optional .TSP.UUIDPath slide_id_path = 2;
inline bool CommandSlideResetTemplateBackgroundObjectsArchive::_internal_has_slide_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_path_ != nullptr);
  return value;
}
inline bool CommandSlideResetTemplateBackgroundObjectsArchive::has_slide_id_path() const {
  return _internal_has_slide_id_path();
}
inline const ::TSP::UUIDPath& CommandSlideResetTemplateBackgroundObjectsArchive::_internal_slide_id_path() const {
  const ::TSP::UUIDPath* p = slide_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& CommandSlideResetTemplateBackgroundObjectsArchive::slide_id_path() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideResetTemplateBackgroundObjectsArchive.slide_id_path)
  return _internal_slide_id_path();
}
inline void CommandSlideResetTemplateBackgroundObjectsArchive::unsafe_arena_set_allocated_slide_id_path(
    ::TSP::UUIDPath* slide_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path_);
  }
  slide_id_path_ = slide_id_path;
  if (slide_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideResetTemplateBackgroundObjectsArchive.slide_id_path)
}
inline ::TSP::UUIDPath* CommandSlideResetTemplateBackgroundObjectsArchive::release_slide_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = slide_id_path_;
  slide_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* CommandSlideResetTemplateBackgroundObjectsArchive::unsafe_arena_release_slide_id_path() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideResetTemplateBackgroundObjectsArchive.slide_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = slide_id_path_;
  slide_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* CommandSlideResetTemplateBackgroundObjectsArchive::_internal_mutable_slide_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    slide_id_path_ = p;
  }
  return slide_id_path_;
}
inline ::TSP::UUIDPath* CommandSlideResetTemplateBackgroundObjectsArchive::mutable_slide_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_slide_id_path();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideResetTemplateBackgroundObjectsArchive.slide_id_path)
  return _msg;
}
inline void CommandSlideResetTemplateBackgroundObjectsArchive::set_allocated_slide_id_path(::TSP::UUIDPath* slide_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path_);
  }
  if (slide_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_path));
    if (message_arena != submessage_arena) {
      slide_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_path_ = slide_id_path;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideResetTemplateBackgroundObjectsArchive.slide_id_path)
}

// -------------------------------------------------------------------

// CommandShowSetSoundtrack

// required .TSK.CommandArchive super = 1;
inline bool CommandShowSetSoundtrack::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandShowSetSoundtrack::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandShowSetSoundtrack::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandShowSetSoundtrack::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSoundtrack.super)
  return _internal_super();
}
inline void CommandShowSetSoundtrack::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSoundtrack.super)
}
inline ::TSK::CommandArchive* CommandShowSetSoundtrack::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetSoundtrack::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSoundtrack.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandShowSetSoundtrack::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandShowSetSoundtrack::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSoundtrack.super)
  return _msg;
}
inline void CommandShowSetSoundtrack::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSoundtrack.super)
}

// optional .TSP.Reference show = 2;
inline bool CommandShowSetSoundtrack::_internal_has_show() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || show_ != nullptr);
  return value;
}
inline bool CommandShowSetSoundtrack::has_show() const {
  return _internal_has_show();
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::_internal_show() const {
  const ::TSP::Reference* p = show_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::show() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSoundtrack.show)
  return _internal_show();
}
inline void CommandShowSetSoundtrack::unsafe_arena_set_allocated_show(
    ::TSP::Reference* show) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSoundtrack.show)
}
inline ::TSP::Reference* CommandShowSetSoundtrack::release_show() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSoundtrack.show)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::_internal_mutable_show() {
  _has_bits_[0] |= 0x00000002u;
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    show_ = p;
  }
  return show_;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::mutable_show() {
  ::TSP::Reference* _msg = _internal_mutable_show();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSoundtrack.show)
  return _msg;
}
inline void CommandShowSetSoundtrack::set_allocated_show(::TSP::Reference* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show));
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSoundtrack.show)
}

// optional .TSP.Reference soundtrack = 3;
inline bool CommandShowSetSoundtrack::_internal_has_soundtrack() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || soundtrack_ != nullptr);
  return value;
}
inline bool CommandShowSetSoundtrack::has_soundtrack() const {
  return _internal_has_soundtrack();
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::_internal_soundtrack() const {
  const ::TSP::Reference* p = soundtrack_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::soundtrack() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSoundtrack.soundtrack)
  return _internal_soundtrack();
}
inline void CommandShowSetSoundtrack::unsafe_arena_set_allocated_soundtrack(
    ::TSP::Reference* soundtrack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack_);
  }
  soundtrack_ = soundtrack;
  if (soundtrack) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSoundtrack.soundtrack)
}
inline ::TSP::Reference* CommandShowSetSoundtrack::release_soundtrack() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = soundtrack_;
  soundtrack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::unsafe_arena_release_soundtrack() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSoundtrack.soundtrack)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = soundtrack_;
  soundtrack_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::_internal_mutable_soundtrack() {
  _has_bits_[0] |= 0x00000004u;
  if (soundtrack_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    soundtrack_ = p;
  }
  return soundtrack_;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::mutable_soundtrack() {
  ::TSP::Reference* _msg = _internal_mutable_soundtrack();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSoundtrack.soundtrack)
  return _msg;
}
inline void CommandShowSetSoundtrack::set_allocated_soundtrack(::TSP::Reference* soundtrack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack_);
  }
  if (soundtrack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack));
    if (message_arena != submessage_arena) {
      soundtrack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soundtrack, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  soundtrack_ = soundtrack;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSoundtrack.soundtrack)
}

// optional .TSP.Reference old_soundtrack = 4;
inline bool CommandShowSetSoundtrack::_internal_has_old_soundtrack() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_soundtrack_ != nullptr);
  return value;
}
inline bool CommandShowSetSoundtrack::has_old_soundtrack() const {
  return _internal_has_old_soundtrack();
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::_internal_old_soundtrack() const {
  const ::TSP::Reference* p = old_soundtrack_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandShowSetSoundtrack::old_soundtrack() const {
  // @@protoc_insertion_point(field_get:KN.CommandShowSetSoundtrack.old_soundtrack)
  return _internal_old_soundtrack();
}
inline void CommandShowSetSoundtrack::unsafe_arena_set_allocated_old_soundtrack(
    ::TSP::Reference* old_soundtrack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_soundtrack_);
  }
  old_soundtrack_ = old_soundtrack;
  if (old_soundtrack) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandShowSetSoundtrack.old_soundtrack)
}
inline ::TSP::Reference* CommandShowSetSoundtrack::release_old_soundtrack() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_soundtrack_;
  old_soundtrack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::unsafe_arena_release_old_soundtrack() {
  // @@protoc_insertion_point(field_release:KN.CommandShowSetSoundtrack.old_soundtrack)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = old_soundtrack_;
  old_soundtrack_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::_internal_mutable_old_soundtrack() {
  _has_bits_[0] |= 0x00000008u;
  if (old_soundtrack_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    old_soundtrack_ = p;
  }
  return old_soundtrack_;
}
inline ::TSP::Reference* CommandShowSetSoundtrack::mutable_old_soundtrack() {
  ::TSP::Reference* _msg = _internal_mutable_old_soundtrack();
  // @@protoc_insertion_point(field_mutable:KN.CommandShowSetSoundtrack.old_soundtrack)
  return _msg;
}
inline void CommandShowSetSoundtrack::set_allocated_old_soundtrack(::TSP::Reference* old_soundtrack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_soundtrack_);
  }
  if (old_soundtrack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_soundtrack));
    if (message_arena != submessage_arena) {
      old_soundtrack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_soundtrack, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_soundtrack_ = old_soundtrack;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandShowSetSoundtrack.old_soundtrack)
}

// -------------------------------------------------------------------

// CommandSoundtrackSetValue_PropertyValue

// optional double double_value = 1;
inline bool CommandSoundtrackSetValue_PropertyValue::_internal_has_double_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSoundtrackSetValue_PropertyValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void CommandSoundtrackSetValue_PropertyValue::clear_double_value() {
  double_value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CommandSoundtrackSetValue_PropertyValue::_internal_double_value() const {
  return double_value_;
}
inline double CommandSoundtrackSetValue_PropertyValue::double_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.PropertyValue.double_value)
  return _internal_double_value();
}
inline void CommandSoundtrackSetValue_PropertyValue::_internal_set_double_value(double value) {
  _has_bits_[0] |= 0x00000001u;
  double_value_ = value;
}
inline void CommandSoundtrackSetValue_PropertyValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandSoundtrackSetValue.PropertyValue.double_value)
}

// optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
inline bool CommandSoundtrackSetValue_PropertyValue::_internal_has_mode_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSoundtrackSetValue_PropertyValue::has_mode_value() const {
  return _internal_has_mode_value();
}
inline void CommandSoundtrackSetValue_PropertyValue::clear_mode_value() {
  mode_value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::KN::Soundtrack_SoundtrackMode CommandSoundtrackSetValue_PropertyValue::_internal_mode_value() const {
  return static_cast< ::KN::Soundtrack_SoundtrackMode >(mode_value_);
}
inline ::KN::Soundtrack_SoundtrackMode CommandSoundtrackSetValue_PropertyValue::mode_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.PropertyValue.mode_value)
  return _internal_mode_value();
}
inline void CommandSoundtrackSetValue_PropertyValue::_internal_set_mode_value(::KN::Soundtrack_SoundtrackMode value) {
  assert(::KN::Soundtrack_SoundtrackMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  mode_value_ = value;
}
inline void CommandSoundtrackSetValue_PropertyValue::set_mode_value(::KN::Soundtrack_SoundtrackMode value) {
  _internal_set_mode_value(value);
  // @@protoc_insertion_point(field_set:KN.CommandSoundtrackSetValue.PropertyValue.mode_value)
}

// repeated .TSP.DataReference media_reference_values = 3;
inline int CommandSoundtrackSetValue_PropertyValue::_internal_media_reference_values_size() const {
  return media_reference_values_.size();
}
inline int CommandSoundtrackSetValue_PropertyValue::media_reference_values_size() const {
  return _internal_media_reference_values_size();
}
inline ::TSP::DataReference* CommandSoundtrackSetValue_PropertyValue::mutable_media_reference_values(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.PropertyValue.media_reference_values)
  return media_reference_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
CommandSoundtrackSetValue_PropertyValue::mutable_media_reference_values() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSoundtrackSetValue.PropertyValue.media_reference_values)
  return &media_reference_values_;
}
inline const ::TSP::DataReference& CommandSoundtrackSetValue_PropertyValue::_internal_media_reference_values(int index) const {
  return media_reference_values_.Get(index);
}
inline const ::TSP::DataReference& CommandSoundtrackSetValue_PropertyValue::media_reference_values(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.PropertyValue.media_reference_values)
  return _internal_media_reference_values(index);
}
inline ::TSP::DataReference* CommandSoundtrackSetValue_PropertyValue::_internal_add_media_reference_values() {
  return media_reference_values_.Add();
}
inline ::TSP::DataReference* CommandSoundtrackSetValue_PropertyValue::add_media_reference_values() {
  ::TSP::DataReference* _add = _internal_add_media_reference_values();
  // @@protoc_insertion_point(field_add:KN.CommandSoundtrackSetValue.PropertyValue.media_reference_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
CommandSoundtrackSetValue_PropertyValue::media_reference_values() const {
  // @@protoc_insertion_point(field_list:KN.CommandSoundtrackSetValue.PropertyValue.media_reference_values)
  return media_reference_values_;
}

// -------------------------------------------------------------------

// CommandSoundtrackSetValue

// required .TSK.CommandArchive super = 1;
inline bool CommandSoundtrackSetValue::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSoundtrackSetValue::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSoundtrackSetValue::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSoundtrackSetValue::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.super)
  return _internal_super();
}
inline void CommandSoundtrackSetValue::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSoundtrackSetValue.super)
}
inline ::TSK::CommandArchive* CommandSoundtrackSetValue::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSoundtrackSetValue::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSoundtrackSetValue.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSoundtrackSetValue::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSoundtrackSetValue::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.super)
  return _msg;
}
inline void CommandSoundtrackSetValue::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSoundtrackSetValue.super)
}

// optional .TSP.UUID soundtrack_id = 2;
inline bool CommandSoundtrackSetValue::_internal_has_soundtrack_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || soundtrack_id_ != nullptr);
  return value;
}
inline bool CommandSoundtrackSetValue::has_soundtrack_id() const {
  return _internal_has_soundtrack_id();
}
inline const ::TSP::UUID& CommandSoundtrackSetValue::_internal_soundtrack_id() const {
  const ::TSP::UUID* p = soundtrack_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSoundtrackSetValue::soundtrack_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.soundtrack_id)
  return _internal_soundtrack_id();
}
inline void CommandSoundtrackSetValue::unsafe_arena_set_allocated_soundtrack_id(
    ::TSP::UUID* soundtrack_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack_id_);
  }
  soundtrack_id_ = soundtrack_id;
  if (soundtrack_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSoundtrackSetValue.soundtrack_id)
}
inline ::TSP::UUID* CommandSoundtrackSetValue::release_soundtrack_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = soundtrack_id_;
  soundtrack_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSoundtrackSetValue::unsafe_arena_release_soundtrack_id() {
  // @@protoc_insertion_point(field_release:KN.CommandSoundtrackSetValue.soundtrack_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = soundtrack_id_;
  soundtrack_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSoundtrackSetValue::_internal_mutable_soundtrack_id() {
  _has_bits_[0] |= 0x00000004u;
  if (soundtrack_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    soundtrack_id_ = p;
  }
  return soundtrack_id_;
}
inline ::TSP::UUID* CommandSoundtrackSetValue::mutable_soundtrack_id() {
  ::TSP::UUID* _msg = _internal_mutable_soundtrack_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.soundtrack_id)
  return _msg;
}
inline void CommandSoundtrackSetValue::set_allocated_soundtrack_id(::TSP::UUID* soundtrack_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack_id_);
  }
  if (soundtrack_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soundtrack_id));
    if (message_arena != submessage_arena) {
      soundtrack_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soundtrack_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  soundtrack_id_ = soundtrack_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSoundtrackSetValue.soundtrack_id)
}

// optional string property = 3;
inline bool CommandSoundtrackSetValue::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSoundtrackSetValue::has_property() const {
  return _internal_has_property();
}
inline void CommandSoundtrackSetValue::clear_property() {
  property_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSoundtrackSetValue::property() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSoundtrackSetValue::set_property(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KN.CommandSoundtrackSetValue.property)
}
inline std::string* CommandSoundtrackSetValue::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.property)
  return _s;
}
inline const std::string& CommandSoundtrackSetValue::_internal_property() const {
  return property_.Get();
}
inline void CommandSoundtrackSetValue::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandSoundtrackSetValue::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000001u;
  return property_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandSoundtrackSetValue::release_property() {
  // @@protoc_insertion_point(field_release:KN.CommandSoundtrackSetValue.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandSoundtrackSetValue::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSoundtrackSetValue.property)
}

// optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
inline bool CommandSoundtrackSetValue::_internal_has_old_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_value_ != nullptr);
  return value;
}
inline bool CommandSoundtrackSetValue::has_old_value() const {
  return _internal_has_old_value();
}
inline void CommandSoundtrackSetValue::clear_old_value() {
  if (old_value_ != nullptr) old_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::KN::CommandSoundtrackSetValue_PropertyValue& CommandSoundtrackSetValue::_internal_old_value() const {
  const ::KN::CommandSoundtrackSetValue_PropertyValue* p = old_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandSoundtrackSetValue_PropertyValue&>(
      ::KN::_CommandSoundtrackSetValue_PropertyValue_default_instance_);
}
inline const ::KN::CommandSoundtrackSetValue_PropertyValue& CommandSoundtrackSetValue::old_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.old_value)
  return _internal_old_value();
}
inline void CommandSoundtrackSetValue::unsafe_arena_set_allocated_old_value(
    ::KN::CommandSoundtrackSetValue_PropertyValue* old_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_value_);
  }
  old_value_ = old_value;
  if (old_value) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSoundtrackSetValue.old_value)
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::release_old_value() {
  _has_bits_[0] &= ~0x00000008u;
  ::KN::CommandSoundtrackSetValue_PropertyValue* temp = old_value_;
  old_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::unsafe_arena_release_old_value() {
  // @@protoc_insertion_point(field_release:KN.CommandSoundtrackSetValue.old_value)
  _has_bits_[0] &= ~0x00000008u;
  ::KN::CommandSoundtrackSetValue_PropertyValue* temp = old_value_;
  old_value_ = nullptr;
  return temp;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::_internal_mutable_old_value() {
  _has_bits_[0] |= 0x00000008u;
  if (old_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandSoundtrackSetValue_PropertyValue>(GetArenaForAllocation());
    old_value_ = p;
  }
  return old_value_;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::mutable_old_value() {
  ::KN::CommandSoundtrackSetValue_PropertyValue* _msg = _internal_mutable_old_value();
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.old_value)
  return _msg;
}
inline void CommandSoundtrackSetValue::set_allocated_old_value(::KN::CommandSoundtrackSetValue_PropertyValue* old_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete old_value_;
  }
  if (old_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::CommandSoundtrackSetValue_PropertyValue>::GetOwningArena(old_value);
    if (message_arena != submessage_arena) {
      old_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_value_ = old_value;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSoundtrackSetValue.old_value)
}

// optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
inline bool CommandSoundtrackSetValue::_internal_has_new_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || new_value_ != nullptr);
  return value;
}
inline bool CommandSoundtrackSetValue::has_new_value() const {
  return _internal_has_new_value();
}
inline void CommandSoundtrackSetValue::clear_new_value() {
  if (new_value_ != nullptr) new_value_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::KN::CommandSoundtrackSetValue_PropertyValue& CommandSoundtrackSetValue::_internal_new_value() const {
  const ::KN::CommandSoundtrackSetValue_PropertyValue* p = new_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::CommandSoundtrackSetValue_PropertyValue&>(
      ::KN::_CommandSoundtrackSetValue_PropertyValue_default_instance_);
}
inline const ::KN::CommandSoundtrackSetValue_PropertyValue& CommandSoundtrackSetValue::new_value() const {
  // @@protoc_insertion_point(field_get:KN.CommandSoundtrackSetValue.new_value)
  return _internal_new_value();
}
inline void CommandSoundtrackSetValue::unsafe_arena_set_allocated_new_value(
    ::KN::CommandSoundtrackSetValue_PropertyValue* new_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_value_);
  }
  new_value_ = new_value;
  if (new_value) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSoundtrackSetValue.new_value)
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::release_new_value() {
  _has_bits_[0] &= ~0x00000010u;
  ::KN::CommandSoundtrackSetValue_PropertyValue* temp = new_value_;
  new_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::unsafe_arena_release_new_value() {
  // @@protoc_insertion_point(field_release:KN.CommandSoundtrackSetValue.new_value)
  _has_bits_[0] &= ~0x00000010u;
  ::KN::CommandSoundtrackSetValue_PropertyValue* temp = new_value_;
  new_value_ = nullptr;
  return temp;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::_internal_mutable_new_value() {
  _has_bits_[0] |= 0x00000010u;
  if (new_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::CommandSoundtrackSetValue_PropertyValue>(GetArenaForAllocation());
    new_value_ = p;
  }
  return new_value_;
}
inline ::KN::CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue::mutable_new_value() {
  ::KN::CommandSoundtrackSetValue_PropertyValue* _msg = _internal_mutable_new_value();
  // @@protoc_insertion_point(field_mutable:KN.CommandSoundtrackSetValue.new_value)
  return _msg;
}
inline void CommandSoundtrackSetValue::set_allocated_new_value(::KN::CommandSoundtrackSetValue_PropertyValue* new_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete new_value_;
  }
  if (new_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::CommandSoundtrackSetValue_PropertyValue>::GetOwningArena(new_value);
    if (message_arena != submessage_arena) {
      new_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  new_value_ = new_value;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSoundtrackSetValue.new_value)
}

// -------------------------------------------------------------------

// CommandSlideUpdateTemplateDrawables

// required .TSK.CommandArchive super = 1;
inline bool CommandSlideUpdateTemplateDrawables::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandSlideUpdateTemplateDrawables::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSlideUpdateTemplateDrawables::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSlideUpdateTemplateDrawables::super() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideUpdateTemplateDrawables.super)
  return _internal_super();
}
inline void CommandSlideUpdateTemplateDrawables::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideUpdateTemplateDrawables.super)
}
inline ::TSK::CommandArchive* CommandSlideUpdateTemplateDrawables::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideUpdateTemplateDrawables::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideUpdateTemplateDrawables.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSlideUpdateTemplateDrawables::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandSlideUpdateTemplateDrawables::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideUpdateTemplateDrawables.super)
  return _msg;
}
inline void CommandSlideUpdateTemplateDrawables::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideUpdateTemplateDrawables.super)
}

// required .TSP.UUID slide_id = 2;
inline bool CommandSlideUpdateTemplateDrawables::_internal_has_slide_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slide_id_ != nullptr);
  return value;
}
inline bool CommandSlideUpdateTemplateDrawables::has_slide_id() const {
  return _internal_has_slide_id();
}
inline const ::TSP::UUID& CommandSlideUpdateTemplateDrawables::_internal_slide_id() const {
  const ::TSP::UUID* p = slide_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CommandSlideUpdateTemplateDrawables::slide_id() const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideUpdateTemplateDrawables.slide_id)
  return _internal_slide_id();
}
inline void CommandSlideUpdateTemplateDrawables::unsafe_arena_set_allocated_slide_id(
    ::TSP::UUID* slide_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  slide_id_ = slide_id;
  if (slide_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CommandSlideUpdateTemplateDrawables.slide_id)
}
inline ::TSP::UUID* CommandSlideUpdateTemplateDrawables::release_slide_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CommandSlideUpdateTemplateDrawables::unsafe_arena_release_slide_id() {
  // @@protoc_insertion_point(field_release:KN.CommandSlideUpdateTemplateDrawables.slide_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = slide_id_;
  slide_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CommandSlideUpdateTemplateDrawables::_internal_mutable_slide_id() {
  _has_bits_[0] |= 0x00000002u;
  if (slide_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    slide_id_ = p;
  }
  return slide_id_;
}
inline ::TSP::UUID* CommandSlideUpdateTemplateDrawables::mutable_slide_id() {
  ::TSP::UUID* _msg = _internal_mutable_slide_id();
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideUpdateTemplateDrawables.slide_id)
  return _msg;
}
inline void CommandSlideUpdateTemplateDrawables::set_allocated_slide_id(::TSP::UUID* slide_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id_);
  }
  if (slide_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_id));
    if (message_arena != submessage_arena) {
      slide_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slide_id_ = slide_id;
  // @@protoc_insertion_point(field_set_allocated:KN.CommandSlideUpdateTemplateDrawables.slide_id)
}

// repeated .TSK.IdPlacementOperationArgs id_placement_operation_args = 3;
inline int CommandSlideUpdateTemplateDrawables::_internal_id_placement_operation_args_size() const {
  return id_placement_operation_args_.size();
}
inline int CommandSlideUpdateTemplateDrawables::id_placement_operation_args_size() const {
  return _internal_id_placement_operation_args_size();
}
inline ::TSK::IdPlacementOperationArgs* CommandSlideUpdateTemplateDrawables::mutable_id_placement_operation_args(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideUpdateTemplateDrawables.id_placement_operation_args)
  return id_placement_operation_args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >*
CommandSlideUpdateTemplateDrawables::mutable_id_placement_operation_args() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideUpdateTemplateDrawables.id_placement_operation_args)
  return &id_placement_operation_args_;
}
inline const ::TSK::IdPlacementOperationArgs& CommandSlideUpdateTemplateDrawables::_internal_id_placement_operation_args(int index) const {
  return id_placement_operation_args_.Get(index);
}
inline const ::TSK::IdPlacementOperationArgs& CommandSlideUpdateTemplateDrawables::id_placement_operation_args(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideUpdateTemplateDrawables.id_placement_operation_args)
  return _internal_id_placement_operation_args(index);
}
inline ::TSK::IdPlacementOperationArgs* CommandSlideUpdateTemplateDrawables::_internal_add_id_placement_operation_args() {
  return id_placement_operation_args_.Add();
}
inline ::TSK::IdPlacementOperationArgs* CommandSlideUpdateTemplateDrawables::add_id_placement_operation_args() {
  ::TSK::IdPlacementOperationArgs* _add = _internal_add_id_placement_operation_args();
  // @@protoc_insertion_point(field_add:KN.CommandSlideUpdateTemplateDrawables.id_placement_operation_args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::IdPlacementOperationArgs >&
CommandSlideUpdateTemplateDrawables::id_placement_operation_args() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideUpdateTemplateDrawables.id_placement_operation_args)
  return id_placement_operation_args_;
}

// repeated .TSP.Reference old_child_infos_for_undo = 4;
inline int CommandSlideUpdateTemplateDrawables::_internal_old_child_infos_for_undo_size() const {
  return old_child_infos_for_undo_.size();
}
inline int CommandSlideUpdateTemplateDrawables::old_child_infos_for_undo_size() const {
  return _internal_old_child_infos_for_undo_size();
}
inline ::TSP::Reference* CommandSlideUpdateTemplateDrawables::mutable_old_child_infos_for_undo(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CommandSlideUpdateTemplateDrawables.old_child_infos_for_undo)
  return old_child_infos_for_undo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSlideUpdateTemplateDrawables::mutable_old_child_infos_for_undo() {
  // @@protoc_insertion_point(field_mutable_list:KN.CommandSlideUpdateTemplateDrawables.old_child_infos_for_undo)
  return &old_child_infos_for_undo_;
}
inline const ::TSP::Reference& CommandSlideUpdateTemplateDrawables::_internal_old_child_infos_for_undo(int index) const {
  return old_child_infos_for_undo_.Get(index);
}
inline const ::TSP::Reference& CommandSlideUpdateTemplateDrawables::old_child_infos_for_undo(int index) const {
  // @@protoc_insertion_point(field_get:KN.CommandSlideUpdateTemplateDrawables.old_child_infos_for_undo)
  return _internal_old_child_infos_for_undo(index);
}
inline ::TSP::Reference* CommandSlideUpdateTemplateDrawables::_internal_add_old_child_infos_for_undo() {
  return old_child_infos_for_undo_.Add();
}
inline ::TSP::Reference* CommandSlideUpdateTemplateDrawables::add_old_child_infos_for_undo() {
  ::TSP::Reference* _add = _internal_add_old_child_infos_for_undo();
  // @@protoc_insertion_point(field_add:KN.CommandSlideUpdateTemplateDrawables.old_child_infos_for_undo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSlideUpdateTemplateDrawables::old_child_infos_for_undo() const {
  // @@protoc_insertion_point(field_list:KN.CommandSlideUpdateTemplateDrawables.old_child_infos_for_undo)
  return old_child_infos_for_undo_;
}

// -------------------------------------------------------------------

// ChartInfoGeometryCommandArchive

// required .TSD.InfoGeometryCommandArchive super = 1;
inline bool ChartInfoGeometryCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChartInfoGeometryCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::InfoGeometryCommandArchive& ChartInfoGeometryCommandArchive::_internal_super() const {
  const ::TSD::InfoGeometryCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoGeometryCommandArchive&>(
      ::TSD::_InfoGeometryCommandArchive_default_instance_);
}
inline const ::TSD::InfoGeometryCommandArchive& ChartInfoGeometryCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:KN.ChartInfoGeometryCommandArchive.super)
  return _internal_super();
}
inline void ChartInfoGeometryCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoGeometryCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ChartInfoGeometryCommandArchive.super)
}
inline ::TSD::InfoGeometryCommandArchive* ChartInfoGeometryCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoGeometryCommandArchive* temp = super_;
  super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::InfoGeometryCommandArchive* ChartInfoGeometryCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:KN.ChartInfoGeometryCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoGeometryCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoGeometryCommandArchive* ChartInfoGeometryCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoGeometryCommandArchive>(GetArenaForAllocation());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoGeometryCommandArchive* ChartInfoGeometryCommandArchive::mutable_super() {
  ::TSD::InfoGeometryCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:KN.ChartInfoGeometryCommandArchive.super)
  return _msg;
}
inline void ChartInfoGeometryCommandArchive::set_allocated_super(::TSD::InfoGeometryCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:KN.ChartInfoGeometryCommandArchive.super)
}

// required .TSP.Point previous_legend_offset = 2;
inline bool ChartInfoGeometryCommandArchive::_internal_has_previous_legend_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || previous_legend_offset_ != nullptr);
  return value;
}
inline bool ChartInfoGeometryCommandArchive::has_previous_legend_offset() const {
  return _internal_has_previous_legend_offset();
}
inline const ::TSP::Point& ChartInfoGeometryCommandArchive::_internal_previous_legend_offset() const {
  const ::TSP::Point* p = previous_legend_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& ChartInfoGeometryCommandArchive::previous_legend_offset() const {
  // @@protoc_insertion_point(field_get:KN.ChartInfoGeometryCommandArchive.previous_legend_offset)
  return _internal_previous_legend_offset();
}
inline void ChartInfoGeometryCommandArchive::unsafe_arena_set_allocated_previous_legend_offset(
    ::TSP::Point* previous_legend_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_legend_offset_);
  }
  previous_legend_offset_ = previous_legend_offset;
  if (previous_legend_offset) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ChartInfoGeometryCommandArchive.previous_legend_offset)
}
inline ::TSP::Point* ChartInfoGeometryCommandArchive::release_previous_legend_offset() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = previous_legend_offset_;
  previous_legend_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* ChartInfoGeometryCommandArchive::unsafe_arena_release_previous_legend_offset() {
  // @@protoc_insertion_point(field_release:KN.ChartInfoGeometryCommandArchive.previous_legend_offset)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = previous_legend_offset_;
  previous_legend_offset_ = nullptr;
  return temp;
}
inline ::TSP::Point* ChartInfoGeometryCommandArchive::_internal_mutable_previous_legend_offset() {
  _has_bits_[0] |= 0x00000002u;
  if (previous_legend_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    previous_legend_offset_ = p;
  }
  return previous_legend_offset_;
}
inline ::TSP::Point* ChartInfoGeometryCommandArchive::mutable_previous_legend_offset() {
  ::TSP::Point* _msg = _internal_mutable_previous_legend_offset();
  // @@protoc_insertion_point(field_mutable:KN.ChartInfoGeometryCommandArchive.previous_legend_offset)
  return _msg;
}
inline void ChartInfoGeometryCommandArchive::set_allocated_previous_legend_offset(::TSP::Point* previous_legend_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_legend_offset_);
  }
  if (previous_legend_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_legend_offset));
    if (message_arena != submessage_arena) {
      previous_legend_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_legend_offset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  previous_legend_offset_ = previous_legend_offset;
  // @@protoc_insertion_point(field_set_allocated:KN.ChartInfoGeometryCommandArchive.previous_legend_offset)
}

// required .TSP.Size previous_legend_size = 3;
inline bool ChartInfoGeometryCommandArchive::_internal_has_previous_legend_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || previous_legend_size_ != nullptr);
  return value;
}
inline bool ChartInfoGeometryCommandArchive::has_previous_legend_size() const {
  return _internal_has_previous_legend_size();
}
inline const ::TSP::Size& ChartInfoGeometryCommandArchive::_internal_previous_legend_size() const {
  const ::TSP::Size* p = previous_legend_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ChartInfoGeometryCommandArchive::previous_legend_size() const {
  // @@protoc_insertion_point(field_get:KN.ChartInfoGeometryCommandArchive.previous_legend_size)
  return _internal_previous_legend_size();
}
inline void ChartInfoGeometryCommandArchive::unsafe_arena_set_allocated_previous_legend_size(
    ::TSP::Size* previous_legend_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_legend_size_);
  }
  previous_legend_size_ = previous_legend_size;
  if (previous_legend_size) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ChartInfoGeometryCommandArchive.previous_legend_size)
}
inline ::TSP::Size* ChartInfoGeometryCommandArchive::release_previous_legend_size() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = previous_legend_size_;
  previous_legend_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* ChartInfoGeometryCommandArchive::unsafe_arena_release_previous_legend_size() {
  // @@protoc_insertion_point(field_release:KN.ChartInfoGeometryCommandArchive.previous_legend_size)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = previous_legend_size_;
  previous_legend_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ChartInfoGeometryCommandArchive::_internal_mutable_previous_legend_size() {
  _has_bits_[0] |= 0x00000004u;
  if (previous_legend_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    previous_legend_size_ = p;
  }
  return previous_legend_size_;
}
inline ::TSP::Size* ChartInfoGeometryCommandArchive::mutable_previous_legend_size() {
  ::TSP::Size* _msg = _internal_mutable_previous_legend_size();
  // @@protoc_insertion_point(field_mutable:KN.ChartInfoGeometryCommandArchive.previous_legend_size)
  return _msg;
}
inline void ChartInfoGeometryCommandArchive::set_allocated_previous_legend_size(::TSP::Size* previous_legend_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_legend_size_);
  }
  if (previous_legend_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_legend_size));
    if (message_arena != submessage_arena) {
      previous_legend_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_legend_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  previous_legend_size_ = previous_legend_size;
  // @@protoc_insertion_point(field_set_allocated:KN.ChartInfoGeometryCommandArchive.previous_legend_size)
}

// required .TSP.Point adjusted_legend_offset = 4;
inline bool ChartInfoGeometryCommandArchive::_internal_has_adjusted_legend_offset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || adjusted_legend_offset_ != nullptr);
  return value;
}
inline bool ChartInfoGeometryCommandArchive::has_adjusted_legend_offset() const {
  return _internal_has_adjusted_legend_offset();
}
inline const ::TSP::Point& ChartInfoGeometryCommandArchive::_internal_adjusted_legend_offset() const {
  const ::TSP::Point* p = adjusted_legend_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& ChartInfoGeometryCommandArchive::adjusted_legend_offset() const {
  // @@protoc_insertion_point(field_get:KN.ChartInfoGeometryCommandArchive.adjusted_legend_offset)
  return _internal_adjusted_legend_offset();
}
inline void ChartInfoGeometryCommandArchive::unsafe_arena_set_allocated_adjusted_legend_offset(
    ::TSP::Point* adjusted_legend_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjusted_legend_offset_);
  }
  adjusted_legend_offset_ = adjusted_legend_offset;
  if (adjusted_legend_offset) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ChartInfoGeometryCommandArchive.adjusted_legend_offset)
}
inline ::TSP::Point* ChartInfoGeometryCommandArchive::release_adjusted_legend_offset() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Point* temp = adjusted_legend_offset_;
  adjusted_legend_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* ChartInfoGeometryCommandArchive::unsafe_arena_release_adjusted_legend_offset() {
  // @@protoc_insertion_point(field_release:KN.ChartInfoGeometryCommandArchive.adjusted_legend_offset)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Point* temp = adjusted_legend_offset_;
  adjusted_legend_offset_ = nullptr;
  return temp;
}
inline ::TSP::Point* ChartInfoGeometryCommandArchive::_internal_mutable_adjusted_legend_offset() {
  _has_bits_[0] |= 0x00000008u;
  if (adjusted_legend_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    adjusted_legend_offset_ = p;
  }
  return adjusted_legend_offset_;
}
inline ::TSP::Point* ChartInfoGeometryCommandArchive::mutable_adjusted_legend_offset() {
  ::TSP::Point* _msg = _internal_mutable_adjusted_legend_offset();
  // @@protoc_insertion_point(field_mutable:KN.ChartInfoGeometryCommandArchive.adjusted_legend_offset)
  return _msg;
}
inline void ChartInfoGeometryCommandArchive::set_allocated_adjusted_legend_offset(::TSP::Point* adjusted_legend_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjusted_legend_offset_);
  }
  if (adjusted_legend_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjusted_legend_offset));
    if (message_arena != submessage_arena) {
      adjusted_legend_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjusted_legend_offset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  adjusted_legend_offset_ = adjusted_legend_offset;
  // @@protoc_insertion_point(field_set_allocated:KN.ChartInfoGeometryCommandArchive.adjusted_legend_offset)
}

// required .TSP.Size adjusted_legend_size = 5;
inline bool ChartInfoGeometryCommandArchive::_internal_has_adjusted_legend_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || adjusted_legend_size_ != nullptr);
  return value;
}
inline bool ChartInfoGeometryCommandArchive::has_adjusted_legend_size() const {
  return _internal_has_adjusted_legend_size();
}
inline const ::TSP::Size& ChartInfoGeometryCommandArchive::_internal_adjusted_legend_size() const {
  const ::TSP::Size* p = adjusted_legend_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ChartInfoGeometryCommandArchive::adjusted_legend_size() const {
  // @@protoc_insertion_point(field_get:KN.ChartInfoGeometryCommandArchive.adjusted_legend_size)
  return _internal_adjusted_legend_size();
}
inline void ChartInfoGeometryCommandArchive::unsafe_arena_set_allocated_adjusted_legend_size(
    ::TSP::Size* adjusted_legend_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjusted_legend_size_);
  }
  adjusted_legend_size_ = adjusted_legend_size;
  if (adjusted_legend_size) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.ChartInfoGeometryCommandArchive.adjusted_legend_size)
}
inline ::TSP::Size* ChartInfoGeometryCommandArchive::release_adjusted_legend_size() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Size* temp = adjusted_legend_size_;
  adjusted_legend_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* ChartInfoGeometryCommandArchive::unsafe_arena_release_adjusted_legend_size() {
  // @@protoc_insertion_point(field_release:KN.ChartInfoGeometryCommandArchive.adjusted_legend_size)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Size* temp = adjusted_legend_size_;
  adjusted_legend_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ChartInfoGeometryCommandArchive::_internal_mutable_adjusted_legend_size() {
  _has_bits_[0] |= 0x00000010u;
  if (adjusted_legend_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    adjusted_legend_size_ = p;
  }
  return adjusted_legend_size_;
}
inline ::TSP::Size* ChartInfoGeometryCommandArchive::mutable_adjusted_legend_size() {
  ::TSP::Size* _msg = _internal_mutable_adjusted_legend_size();
  // @@protoc_insertion_point(field_mutable:KN.ChartInfoGeometryCommandArchive.adjusted_legend_size)
  return _msg;
}
inline void ChartInfoGeometryCommandArchive::set_allocated_adjusted_legend_size(::TSP::Size* adjusted_legend_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjusted_legend_size_);
  }
  if (adjusted_legend_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjusted_legend_size));
    if (message_arena != submessage_arena) {
      adjusted_legend_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjusted_legend_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  adjusted_legend_size_ = adjusted_legend_size;
  // @@protoc_insertion_point(field_set_allocated:KN.ChartInfoGeometryCommandArchive.adjusted_legend_size)
}

// -------------------------------------------------------------------

// CanvasSelectionTransformerArchive

// required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
inline bool CanvasSelectionTransformerArchive::_internal_has_transformer_helper() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || transformer_helper_ != nullptr);
  return value;
}
inline bool CanvasSelectionTransformerArchive::has_transformer_helper() const {
  return _internal_has_transformer_helper();
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::_internal_transformer_helper() const {
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive* p = transformer_helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCollectionSelectionTransformerHelperArchive&>(
      ::TSD::_InfoCollectionSelectionTransformerHelperArchive_default_instance_);
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::transformer_helper() const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionTransformerArchive.transformer_helper)
  return _internal_transformer_helper();
}
inline void CanvasSelectionTransformerArchive::unsafe_arena_set_allocated_transformer_helper(
    ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper_);
  }
  transformer_helper_ = transformer_helper;
  if (transformer_helper) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.CanvasSelectionTransformerArchive.transformer_helper)
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::release_transformer_helper() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::unsafe_arena_release_transformer_helper() {
  // @@protoc_insertion_point(field_release:KN.CanvasSelectionTransformerArchive.transformer_helper)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::_internal_mutable_transformer_helper() {
  _has_bits_[0] |= 0x00000001u;
  if (transformer_helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCollectionSelectionTransformerHelperArchive>(GetArenaForAllocation());
    transformer_helper_ = p;
  }
  return transformer_helper_;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::mutable_transformer_helper() {
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* _msg = _internal_mutable_transformer_helper();
  // @@protoc_insertion_point(field_mutable:KN.CanvasSelectionTransformerArchive.transformer_helper)
  return _msg;
}
inline void CanvasSelectionTransformerArchive::set_allocated_transformer_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper_);
  }
  if (transformer_helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper));
    if (message_arena != submessage_arena) {
      transformer_helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformer_helper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transformer_helper_ = transformer_helper;
  // @@protoc_insertion_point(field_set_allocated:KN.CanvasSelectionTransformerArchive.transformer_helper)
}

// repeated .KN.BuildChunkIdentifierArchive build_chunk_ids = 2;
inline int CanvasSelectionTransformerArchive::_internal_build_chunk_ids_size() const {
  return build_chunk_ids_.size();
}
inline int CanvasSelectionTransformerArchive::build_chunk_ids_size() const {
  return _internal_build_chunk_ids_size();
}
inline ::KN::BuildChunkIdentifierArchive* CanvasSelectionTransformerArchive::mutable_build_chunk_ids(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CanvasSelectionTransformerArchive.build_chunk_ids)
  return build_chunk_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >*
CanvasSelectionTransformerArchive::mutable_build_chunk_ids() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionTransformerArchive.build_chunk_ids)
  return &build_chunk_ids_;
}
inline const ::KN::BuildChunkIdentifierArchive& CanvasSelectionTransformerArchive::_internal_build_chunk_ids(int index) const {
  return build_chunk_ids_.Get(index);
}
inline const ::KN::BuildChunkIdentifierArchive& CanvasSelectionTransformerArchive::build_chunk_ids(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionTransformerArchive.build_chunk_ids)
  return _internal_build_chunk_ids(index);
}
inline ::KN::BuildChunkIdentifierArchive* CanvasSelectionTransformerArchive::_internal_add_build_chunk_ids() {
  return build_chunk_ids_.Add();
}
inline ::KN::BuildChunkIdentifierArchive* CanvasSelectionTransformerArchive::add_build_chunk_ids() {
  ::KN::BuildChunkIdentifierArchive* _add = _internal_add_build_chunk_ids();
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionTransformerArchive.build_chunk_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KN::BuildChunkIdentifierArchive >&
CanvasSelectionTransformerArchive::build_chunk_ids() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionTransformerArchive.build_chunk_ids)
  return build_chunk_ids_;
}

// repeated .TSP.UUID action_build_ids = 3;
inline int CanvasSelectionTransformerArchive::_internal_action_build_ids_size() const {
  return action_build_ids_.size();
}
inline int CanvasSelectionTransformerArchive::action_build_ids_size() const {
  return _internal_action_build_ids_size();
}
inline ::TSP::UUID* CanvasSelectionTransformerArchive::mutable_action_build_ids(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CanvasSelectionTransformerArchive.action_build_ids)
  return action_build_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CanvasSelectionTransformerArchive::mutable_action_build_ids() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionTransformerArchive.action_build_ids)
  return &action_build_ids_;
}
inline const ::TSP::UUID& CanvasSelectionTransformerArchive::_internal_action_build_ids(int index) const {
  return action_build_ids_.Get(index);
}
inline const ::TSP::UUID& CanvasSelectionTransformerArchive::action_build_ids(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionTransformerArchive.action_build_ids)
  return _internal_action_build_ids(index);
}
inline ::TSP::UUID* CanvasSelectionTransformerArchive::_internal_add_action_build_ids() {
  return action_build_ids_.Add();
}
inline ::TSP::UUID* CanvasSelectionTransformerArchive::add_action_build_ids() {
  ::TSP::UUID* _add = _internal_add_action_build_ids();
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionTransformerArchive.action_build_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CanvasSelectionTransformerArchive::action_build_ids() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionTransformerArchive.action_build_ids)
  return action_build_ids_;
}

// repeated .TSP.UUID originally_selected_drawable_uuids = 4;
inline int CanvasSelectionTransformerArchive::_internal_originally_selected_drawable_uuids_size() const {
  return originally_selected_drawable_uuids_.size();
}
inline int CanvasSelectionTransformerArchive::originally_selected_drawable_uuids_size() const {
  return _internal_originally_selected_drawable_uuids_size();
}
inline ::TSP::UUID* CanvasSelectionTransformerArchive::mutable_originally_selected_drawable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:KN.CanvasSelectionTransformerArchive.originally_selected_drawable_uuids)
  return originally_selected_drawable_uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CanvasSelectionTransformerArchive::mutable_originally_selected_drawable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:KN.CanvasSelectionTransformerArchive.originally_selected_drawable_uuids)
  return &originally_selected_drawable_uuids_;
}
inline const ::TSP::UUID& CanvasSelectionTransformerArchive::_internal_originally_selected_drawable_uuids(int index) const {
  return originally_selected_drawable_uuids_.Get(index);
}
inline const ::TSP::UUID& CanvasSelectionTransformerArchive::originally_selected_drawable_uuids(int index) const {
  // @@protoc_insertion_point(field_get:KN.CanvasSelectionTransformerArchive.originally_selected_drawable_uuids)
  return _internal_originally_selected_drawable_uuids(index);
}
inline ::TSP::UUID* CanvasSelectionTransformerArchive::_internal_add_originally_selected_drawable_uuids() {
  return originally_selected_drawable_uuids_.Add();
}
inline ::TSP::UUID* CanvasSelectionTransformerArchive::add_originally_selected_drawable_uuids() {
  ::TSP::UUID* _add = _internal_add_originally_selected_drawable_uuids();
  // @@protoc_insertion_point(field_add:KN.CanvasSelectionTransformerArchive.originally_selected_drawable_uuids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CanvasSelectionTransformerArchive::originally_selected_drawable_uuids() const {
  // @@protoc_insertion_point(field_list:KN.CanvasSelectionTransformerArchive.originally_selected_drawable_uuids)
  return originally_selected_drawable_uuids_;
}

// -------------------------------------------------------------------

// ActionGhostSelectionTransformerArchive

// -------------------------------------------------------------------

// DocumentSelectionTransformerArchive

// required .TSP.Reference document_selection = 1;
inline bool DocumentSelectionTransformerArchive::_internal_has_document_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || document_selection_ != nullptr);
  return value;
}
inline bool DocumentSelectionTransformerArchive::has_document_selection() const {
  return _internal_has_document_selection();
}
inline const ::TSP::Reference& DocumentSelectionTransformerArchive::_internal_document_selection() const {
  const ::TSP::Reference* p = document_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSelectionTransformerArchive::document_selection() const {
  // @@protoc_insertion_point(field_get:KN.DocumentSelectionTransformerArchive.document_selection)
  return _internal_document_selection();
}
inline void DocumentSelectionTransformerArchive::unsafe_arena_set_allocated_document_selection(
    ::TSP::Reference* document_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_selection_);
  }
  document_selection_ = document_selection;
  if (document_selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.DocumentSelectionTransformerArchive.document_selection)
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::release_document_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = document_selection_;
  document_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::unsafe_arena_release_document_selection() {
  // @@protoc_insertion_point(field_release:KN.DocumentSelectionTransformerArchive.document_selection)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = document_selection_;
  document_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::_internal_mutable_document_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (document_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    document_selection_ = p;
  }
  return document_selection_;
}
inline ::TSP::Reference* DocumentSelectionTransformerArchive::mutable_document_selection() {
  ::TSP::Reference* _msg = _internal_mutable_document_selection();
  // @@protoc_insertion_point(field_mutable:KN.DocumentSelectionTransformerArchive.document_selection)
  return _msg;
}
inline void DocumentSelectionTransformerArchive::set_allocated_document_selection(::TSP::Reference* document_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_selection_);
  }
  if (document_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_selection));
    if (message_arena != submessage_arena) {
      document_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  document_selection_ = document_selection;
  // @@protoc_insertion_point(field_set_allocated:KN.DocumentSelectionTransformerArchive.document_selection)
}

// -------------------------------------------------------------------

// NoteCanvasSelectionTransformerArchive

// required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
inline bool NoteCanvasSelectionTransformerArchive::_internal_has_transformer_helper() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || transformer_helper_ != nullptr);
  return value;
}
inline bool NoteCanvasSelectionTransformerArchive::has_transformer_helper() const {
  return _internal_has_transformer_helper();
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& NoteCanvasSelectionTransformerArchive::_internal_transformer_helper() const {
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive* p = transformer_helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCollectionSelectionTransformerHelperArchive&>(
      ::TSD::_InfoCollectionSelectionTransformerHelperArchive_default_instance_);
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& NoteCanvasSelectionTransformerArchive::transformer_helper() const {
  // @@protoc_insertion_point(field_get:KN.NoteCanvasSelectionTransformerArchive.transformer_helper)
  return _internal_transformer_helper();
}
inline void NoteCanvasSelectionTransformerArchive::unsafe_arena_set_allocated_transformer_helper(
    ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper_);
  }
  transformer_helper_ = transformer_helper;
  if (transformer_helper) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.NoteCanvasSelectionTransformerArchive.transformer_helper)
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* NoteCanvasSelectionTransformerArchive::release_transformer_helper() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* NoteCanvasSelectionTransformerArchive::unsafe_arena_release_transformer_helper() {
  // @@protoc_insertion_point(field_release:KN.NoteCanvasSelectionTransformerArchive.transformer_helper)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* NoteCanvasSelectionTransformerArchive::_internal_mutable_transformer_helper() {
  _has_bits_[0] |= 0x00000001u;
  if (transformer_helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCollectionSelectionTransformerHelperArchive>(GetArenaForAllocation());
    transformer_helper_ = p;
  }
  return transformer_helper_;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* NoteCanvasSelectionTransformerArchive::mutable_transformer_helper() {
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* _msg = _internal_mutable_transformer_helper();
  // @@protoc_insertion_point(field_mutable:KN.NoteCanvasSelectionTransformerArchive.transformer_helper)
  return _msg;
}
inline void NoteCanvasSelectionTransformerArchive::set_allocated_transformer_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper_);
  }
  if (transformer_helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper));
    if (message_arena != submessage_arena) {
      transformer_helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformer_helper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transformer_helper_ = transformer_helper;
  // @@protoc_insertion_point(field_set_allocated:KN.NoteCanvasSelectionTransformerArchive.transformer_helper)
}

// -------------------------------------------------------------------

// OutlineCanvasSelectionTransformerArchive

// required .TSP.Reference canvas_selection_transformer = 1;
inline bool OutlineCanvasSelectionTransformerArchive::_internal_has_canvas_selection_transformer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || canvas_selection_transformer_ != nullptr);
  return value;
}
inline bool OutlineCanvasSelectionTransformerArchive::has_canvas_selection_transformer() const {
  return _internal_has_canvas_selection_transformer();
}
inline const ::TSP::Reference& OutlineCanvasSelectionTransformerArchive::_internal_canvas_selection_transformer() const {
  const ::TSP::Reference* p = canvas_selection_transformer_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& OutlineCanvasSelectionTransformerArchive::canvas_selection_transformer() const {
  // @@protoc_insertion_point(field_get:KN.OutlineCanvasSelectionTransformerArchive.canvas_selection_transformer)
  return _internal_canvas_selection_transformer();
}
inline void OutlineCanvasSelectionTransformerArchive::unsafe_arena_set_allocated_canvas_selection_transformer(
    ::TSP::Reference* canvas_selection_transformer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(canvas_selection_transformer_);
  }
  canvas_selection_transformer_ = canvas_selection_transformer;
  if (canvas_selection_transformer) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.OutlineCanvasSelectionTransformerArchive.canvas_selection_transformer)
}
inline ::TSP::Reference* OutlineCanvasSelectionTransformerArchive::release_canvas_selection_transformer() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = canvas_selection_transformer_;
  canvas_selection_transformer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* OutlineCanvasSelectionTransformerArchive::unsafe_arena_release_canvas_selection_transformer() {
  // @@protoc_insertion_point(field_release:KN.OutlineCanvasSelectionTransformerArchive.canvas_selection_transformer)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = canvas_selection_transformer_;
  canvas_selection_transformer_ = nullptr;
  return temp;
}
inline ::TSP::Reference* OutlineCanvasSelectionTransformerArchive::_internal_mutable_canvas_selection_transformer() {
  _has_bits_[0] |= 0x00000001u;
  if (canvas_selection_transformer_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    canvas_selection_transformer_ = p;
  }
  return canvas_selection_transformer_;
}
inline ::TSP::Reference* OutlineCanvasSelectionTransformerArchive::mutable_canvas_selection_transformer() {
  ::TSP::Reference* _msg = _internal_mutable_canvas_selection_transformer();
  // @@protoc_insertion_point(field_mutable:KN.OutlineCanvasSelectionTransformerArchive.canvas_selection_transformer)
  return _msg;
}
inline void OutlineCanvasSelectionTransformerArchive::set_allocated_canvas_selection_transformer(::TSP::Reference* canvas_selection_transformer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(canvas_selection_transformer_);
  }
  if (canvas_selection_transformer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(canvas_selection_transformer));
    if (message_arena != submessage_arena) {
      canvas_selection_transformer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, canvas_selection_transformer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  canvas_selection_transformer_ = canvas_selection_transformer;
  // @@protoc_insertion_point(field_set_allocated:KN.OutlineCanvasSelectionTransformerArchive.canvas_selection_transformer)
}

// optional .TSP.UUIDPath storage_uuid_path = 2;
inline bool OutlineCanvasSelectionTransformerArchive::_internal_has_storage_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_uuid_path_ != nullptr);
  return value;
}
inline bool OutlineCanvasSelectionTransformerArchive::has_storage_uuid_path() const {
  return _internal_has_storage_uuid_path();
}
inline const ::TSP::UUIDPath& OutlineCanvasSelectionTransformerArchive::_internal_storage_uuid_path() const {
  const ::TSP::UUIDPath* p = storage_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& OutlineCanvasSelectionTransformerArchive::storage_uuid_path() const {
  // @@protoc_insertion_point(field_get:KN.OutlineCanvasSelectionTransformerArchive.storage_uuid_path)
  return _internal_storage_uuid_path();
}
inline void OutlineCanvasSelectionTransformerArchive::unsafe_arena_set_allocated_storage_uuid_path(
    ::TSP::UUIDPath* storage_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  storage_uuid_path_ = storage_uuid_path;
  if (storage_uuid_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.OutlineCanvasSelectionTransformerArchive.storage_uuid_path)
}
inline ::TSP::UUIDPath* OutlineCanvasSelectionTransformerArchive::release_storage_uuid_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* OutlineCanvasSelectionTransformerArchive::unsafe_arena_release_storage_uuid_path() {
  // @@protoc_insertion_point(field_release:KN.OutlineCanvasSelectionTransformerArchive.storage_uuid_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_uuid_path_;
  storage_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* OutlineCanvasSelectionTransformerArchive::_internal_mutable_storage_uuid_path() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    storage_uuid_path_ = p;
  }
  return storage_uuid_path_;
}
inline ::TSP::UUIDPath* OutlineCanvasSelectionTransformerArchive::mutable_storage_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_storage_uuid_path();
  // @@protoc_insertion_point(field_mutable:KN.OutlineCanvasSelectionTransformerArchive.storage_uuid_path)
  return _msg;
}
inline void OutlineCanvasSelectionTransformerArchive::set_allocated_storage_uuid_path(::TSP::UUIDPath* storage_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path_);
  }
  if (storage_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_uuid_path));
    if (message_arena != submessage_arena) {
      storage_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_uuid_path_ = storage_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:KN.OutlineCanvasSelectionTransformerArchive.storage_uuid_path)
}

// -------------------------------------------------------------------

// SlideCollectionSelectionTransformerHelperArchive

// repeated .TSP.UUIDPath slide_nodes = 1;
inline int SlideCollectionSelectionTransformerHelperArchive::_internal_slide_nodes_size() const {
  return slide_nodes_.size();
}
inline int SlideCollectionSelectionTransformerHelperArchive::slide_nodes_size() const {
  return _internal_slide_nodes_size();
}
inline ::TSP::UUIDPath* SlideCollectionSelectionTransformerHelperArchive::mutable_slide_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionTransformerHelperArchive.slide_nodes)
  return slide_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
SlideCollectionSelectionTransformerHelperArchive::mutable_slide_nodes() {
  // @@protoc_insertion_point(field_mutable_list:KN.SlideCollectionSelectionTransformerHelperArchive.slide_nodes)
  return &slide_nodes_;
}
inline const ::TSP::UUIDPath& SlideCollectionSelectionTransformerHelperArchive::_internal_slide_nodes(int index) const {
  return slide_nodes_.Get(index);
}
inline const ::TSP::UUIDPath& SlideCollectionSelectionTransformerHelperArchive::slide_nodes(int index) const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionTransformerHelperArchive.slide_nodes)
  return _internal_slide_nodes(index);
}
inline ::TSP::UUIDPath* SlideCollectionSelectionTransformerHelperArchive::_internal_add_slide_nodes() {
  return slide_nodes_.Add();
}
inline ::TSP::UUIDPath* SlideCollectionSelectionTransformerHelperArchive::add_slide_nodes() {
  ::TSP::UUIDPath* _add = _internal_add_slide_nodes();
  // @@protoc_insertion_point(field_add:KN.SlideCollectionSelectionTransformerHelperArchive.slide_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
SlideCollectionSelectionTransformerHelperArchive::slide_nodes() const {
  // @@protoc_insertion_point(field_list:KN.SlideCollectionSelectionTransformerHelperArchive.slide_nodes)
  return slide_nodes_;
}

// optional .TSP.UUIDPath slide_node_to_edit = 2;
inline bool SlideCollectionSelectionTransformerHelperArchive::_internal_has_slide_node_to_edit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || slide_node_to_edit_ != nullptr);
  return value;
}
inline bool SlideCollectionSelectionTransformerHelperArchive::has_slide_node_to_edit() const {
  return _internal_has_slide_node_to_edit();
}
inline const ::TSP::UUIDPath& SlideCollectionSelectionTransformerHelperArchive::_internal_slide_node_to_edit() const {
  const ::TSP::UUIDPath* p = slide_node_to_edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& SlideCollectionSelectionTransformerHelperArchive::slide_node_to_edit() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionTransformerHelperArchive.slide_node_to_edit)
  return _internal_slide_node_to_edit();
}
inline void SlideCollectionSelectionTransformerHelperArchive::unsafe_arena_set_allocated_slide_node_to_edit(
    ::TSP::UUIDPath* slide_node_to_edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_to_edit_);
  }
  slide_node_to_edit_ = slide_node_to_edit;
  if (slide_node_to_edit) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionSelectionTransformerHelperArchive.slide_node_to_edit)
}
inline ::TSP::UUIDPath* SlideCollectionSelectionTransformerHelperArchive::release_slide_node_to_edit() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = slide_node_to_edit_;
  slide_node_to_edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* SlideCollectionSelectionTransformerHelperArchive::unsafe_arena_release_slide_node_to_edit() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionSelectionTransformerHelperArchive.slide_node_to_edit)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = slide_node_to_edit_;
  slide_node_to_edit_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* SlideCollectionSelectionTransformerHelperArchive::_internal_mutable_slide_node_to_edit() {
  _has_bits_[0] |= 0x00000001u;
  if (slide_node_to_edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    slide_node_to_edit_ = p;
  }
  return slide_node_to_edit_;
}
inline ::TSP::UUIDPath* SlideCollectionSelectionTransformerHelperArchive::mutable_slide_node_to_edit() {
  ::TSP::UUIDPath* _msg = _internal_mutable_slide_node_to_edit();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionTransformerHelperArchive.slide_node_to_edit)
  return _msg;
}
inline void SlideCollectionSelectionTransformerHelperArchive::set_allocated_slide_node_to_edit(::TSP::UUIDPath* slide_node_to_edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_to_edit_);
  }
  if (slide_node_to_edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slide_node_to_edit));
    if (message_arena != submessage_arena) {
      slide_node_to_edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slide_node_to_edit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slide_node_to_edit_ = slide_node_to_edit;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionSelectionTransformerHelperArchive.slide_node_to_edit)
}

// optional bool slide_collection_is_theme = 3 [default = false];
inline bool SlideCollectionSelectionTransformerHelperArchive::_internal_has_slide_collection_is_theme() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SlideCollectionSelectionTransformerHelperArchive::has_slide_collection_is_theme() const {
  return _internal_has_slide_collection_is_theme();
}
inline void SlideCollectionSelectionTransformerHelperArchive::clear_slide_collection_is_theme() {
  slide_collection_is_theme_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SlideCollectionSelectionTransformerHelperArchive::_internal_slide_collection_is_theme() const {
  return slide_collection_is_theme_;
}
inline bool SlideCollectionSelectionTransformerHelperArchive::slide_collection_is_theme() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionTransformerHelperArchive.slide_collection_is_theme)
  return _internal_slide_collection_is_theme();
}
inline void SlideCollectionSelectionTransformerHelperArchive::_internal_set_slide_collection_is_theme(bool value) {
  _has_bits_[0] |= 0x00000002u;
  slide_collection_is_theme_ = value;
}
inline void SlideCollectionSelectionTransformerHelperArchive::set_slide_collection_is_theme(bool value) {
  _internal_set_slide_collection_is_theme(value);
  // @@protoc_insertion_point(field_set:KN.SlideCollectionSelectionTransformerHelperArchive.slide_collection_is_theme)
}

// optional uint32 previous_primary_selected_index = 4;
inline bool SlideCollectionSelectionTransformerHelperArchive::_internal_has_previous_primary_selected_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SlideCollectionSelectionTransformerHelperArchive::has_previous_primary_selected_index() const {
  return _internal_has_previous_primary_selected_index();
}
inline void SlideCollectionSelectionTransformerHelperArchive::clear_previous_primary_selected_index() {
  previous_primary_selected_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideCollectionSelectionTransformerHelperArchive::_internal_previous_primary_selected_index() const {
  return previous_primary_selected_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlideCollectionSelectionTransformerHelperArchive::previous_primary_selected_index() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionTransformerHelperArchive.previous_primary_selected_index)
  return _internal_previous_primary_selected_index();
}
inline void SlideCollectionSelectionTransformerHelperArchive::_internal_set_previous_primary_selected_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  previous_primary_selected_index_ = value;
}
inline void SlideCollectionSelectionTransformerHelperArchive::set_previous_primary_selected_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_previous_primary_selected_index(value);
  // @@protoc_insertion_point(field_set:KN.SlideCollectionSelectionTransformerHelperArchive.previous_primary_selected_index)
}

// -------------------------------------------------------------------

// SlideCollectionSelectionTransformerArchive

// required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
inline bool SlideCollectionSelectionTransformerArchive::_internal_has_transformer_helper() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || transformer_helper_ != nullptr);
  return value;
}
inline bool SlideCollectionSelectionTransformerArchive::has_transformer_helper() const {
  return _internal_has_transformer_helper();
}
inline void SlideCollectionSelectionTransformerArchive::clear_transformer_helper() {
  if (transformer_helper_ != nullptr) transformer_helper_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KN::SlideCollectionSelectionTransformerHelperArchive& SlideCollectionSelectionTransformerArchive::_internal_transformer_helper() const {
  const ::KN::SlideCollectionSelectionTransformerHelperArchive* p = transformer_helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::SlideCollectionSelectionTransformerHelperArchive&>(
      ::KN::_SlideCollectionSelectionTransformerHelperArchive_default_instance_);
}
inline const ::KN::SlideCollectionSelectionTransformerHelperArchive& SlideCollectionSelectionTransformerArchive::transformer_helper() const {
  // @@protoc_insertion_point(field_get:KN.SlideCollectionSelectionTransformerArchive.transformer_helper)
  return _internal_transformer_helper();
}
inline void SlideCollectionSelectionTransformerArchive::unsafe_arena_set_allocated_transformer_helper(
    ::KN::SlideCollectionSelectionTransformerHelperArchive* transformer_helper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper_);
  }
  transformer_helper_ = transformer_helper;
  if (transformer_helper) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.SlideCollectionSelectionTransformerArchive.transformer_helper)
}
inline ::KN::SlideCollectionSelectionTransformerHelperArchive* SlideCollectionSelectionTransformerArchive::release_transformer_helper() {
  _has_bits_[0] &= ~0x00000001u;
  ::KN::SlideCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::SlideCollectionSelectionTransformerHelperArchive* SlideCollectionSelectionTransformerArchive::unsafe_arena_release_transformer_helper() {
  // @@protoc_insertion_point(field_release:KN.SlideCollectionSelectionTransformerArchive.transformer_helper)
  _has_bits_[0] &= ~0x00000001u;
  ::KN::SlideCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
  return temp;
}
inline ::KN::SlideCollectionSelectionTransformerHelperArchive* SlideCollectionSelectionTransformerArchive::_internal_mutable_transformer_helper() {
  _has_bits_[0] |= 0x00000001u;
  if (transformer_helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::SlideCollectionSelectionTransformerHelperArchive>(GetArenaForAllocation());
    transformer_helper_ = p;
  }
  return transformer_helper_;
}
inline ::KN::SlideCollectionSelectionTransformerHelperArchive* SlideCollectionSelectionTransformerArchive::mutable_transformer_helper() {
  ::KN::SlideCollectionSelectionTransformerHelperArchive* _msg = _internal_mutable_transformer_helper();
  // @@protoc_insertion_point(field_mutable:KN.SlideCollectionSelectionTransformerArchive.transformer_helper)
  return _msg;
}
inline void SlideCollectionSelectionTransformerArchive::set_allocated_transformer_helper(::KN::SlideCollectionSelectionTransformerHelperArchive* transformer_helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transformer_helper_;
  }
  if (transformer_helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::SlideCollectionSelectionTransformerHelperArchive>::GetOwningArena(transformer_helper);
    if (message_arena != submessage_arena) {
      transformer_helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformer_helper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transformer_helper_ = transformer_helper;
  // @@protoc_insertion_point(field_set_allocated:KN.SlideCollectionSelectionTransformerArchive.transformer_helper)
}

// -------------------------------------------------------------------

// OutlineSelectionTransformerArchive

// required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
inline bool OutlineSelectionTransformerArchive::_internal_has_transformer_helper() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || transformer_helper_ != nullptr);
  return value;
}
inline bool OutlineSelectionTransformerArchive::has_transformer_helper() const {
  return _internal_has_transformer_helper();
}
inline void OutlineSelectionTransformerArchive::clear_transformer_helper() {
  if (transformer_helper_ != nullptr) transformer_helper_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KN::SlideCollectionSelectionTransformerHelperArchive& OutlineSelectionTransformerArchive::_internal_transformer_helper() const {
  const ::KN::SlideCollectionSelectionTransformerHelperArchive* p = transformer_helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::KN::SlideCollectionSelectionTransformerHelperArchive&>(
      ::KN::_SlideCollectionSelectionTransformerHelperArchive_default_instance_);
}
inline const ::KN::SlideCollectionSelectionTransformerHelperArchive& OutlineSelectionTransformerArchive::transformer_helper() const {
  // @@protoc_insertion_point(field_get:KN.OutlineSelectionTransformerArchive.transformer_helper)
  return _internal_transformer_helper();
}
inline void OutlineSelectionTransformerArchive::unsafe_arena_set_allocated_transformer_helper(
    ::KN::SlideCollectionSelectionTransformerHelperArchive* transformer_helper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper_);
  }
  transformer_helper_ = transformer_helper;
  if (transformer_helper) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KN.OutlineSelectionTransformerArchive.transformer_helper)
}
inline ::KN::SlideCollectionSelectionTransformerHelperArchive* OutlineSelectionTransformerArchive::release_transformer_helper() {
  _has_bits_[0] &= ~0x00000001u;
  ::KN::SlideCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KN::SlideCollectionSelectionTransformerHelperArchive* OutlineSelectionTransformerArchive::unsafe_arena_release_transformer_helper() {
  // @@protoc_insertion_point(field_release:KN.OutlineSelectionTransformerArchive.transformer_helper)
  _has_bits_[0] &= ~0x00000001u;
  ::KN::SlideCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
  return temp;
}
inline ::KN::SlideCollectionSelectionTransformerHelperArchive* OutlineSelectionTransformerArchive::_internal_mutable_transformer_helper() {
  _has_bits_[0] |= 0x00000001u;
  if (transformer_helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::KN::SlideCollectionSelectionTransformerHelperArchive>(GetArenaForAllocation());
    transformer_helper_ = p;
  }
  return transformer_helper_;
}
inline ::KN::SlideCollectionSelectionTransformerHelperArchive* OutlineSelectionTransformerArchive::mutable_transformer_helper() {
  ::KN::SlideCollectionSelectionTransformerHelperArchive* _msg = _internal_mutable_transformer_helper();
  // @@protoc_insertion_point(field_mutable:KN.OutlineSelectionTransformerArchive.transformer_helper)
  return _msg;
}
inline void OutlineSelectionTransformerArchive::set_allocated_transformer_helper(::KN::SlideCollectionSelectionTransformerHelperArchive* transformer_helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transformer_helper_;
  }
  if (transformer_helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KN::SlideCollectionSelectionTransformerHelperArchive>::GetOwningArena(transformer_helper);
    if (message_arena != submessage_arena) {
      transformer_helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformer_helper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transformer_helper_ = transformer_helper;
  // @@protoc_insertion_point(field_set_allocated:KN.OutlineSelectionTransformerArchive.transformer_helper)
}

// optional bool can_have_range_in_selected_paragraph = 2 [default = false];
inline bool OutlineSelectionTransformerArchive::_internal_has_can_have_range_in_selected_paragraph() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OutlineSelectionTransformerArchive::has_can_have_range_in_selected_paragraph() const {
  return _internal_has_can_have_range_in_selected_paragraph();
}
inline void OutlineSelectionTransformerArchive::clear_can_have_range_in_selected_paragraph() {
  can_have_range_in_selected_paragraph_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool OutlineSelectionTransformerArchive::_internal_can_have_range_in_selected_paragraph() const {
  return can_have_range_in_selected_paragraph_;
}
inline bool OutlineSelectionTransformerArchive::can_have_range_in_selected_paragraph() const {
  // @@protoc_insertion_point(field_get:KN.OutlineSelectionTransformerArchive.can_have_range_in_selected_paragraph)
  return _internal_can_have_range_in_selected_paragraph();
}
inline void OutlineSelectionTransformerArchive::_internal_set_can_have_range_in_selected_paragraph(bool value) {
  _has_bits_[0] |= 0x00000002u;
  can_have_range_in_selected_paragraph_ = value;
}
inline void OutlineSelectionTransformerArchive::set_can_have_range_in_selected_paragraph(bool value) {
  _internal_set_can_have_range_in_selected_paragraph(value);
  // @@protoc_insertion_point(field_set:KN.OutlineSelectionTransformerArchive.can_have_range_in_selected_paragraph)
}

// repeated .TSK.RangeAddress selection_range_addresses = 3;
inline int OutlineSelectionTransformerArchive::_internal_selection_range_addresses_size() const {
  return selection_range_addresses_.size();
}
inline int OutlineSelectionTransformerArchive::selection_range_addresses_size() const {
  return _internal_selection_range_addresses_size();
}
inline ::TSK::RangeAddress* OutlineSelectionTransformerArchive::mutable_selection_range_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:KN.OutlineSelectionTransformerArchive.selection_range_addresses)
  return selection_range_addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RangeAddress >*
OutlineSelectionTransformerArchive::mutable_selection_range_addresses() {
  // @@protoc_insertion_point(field_mutable_list:KN.OutlineSelectionTransformerArchive.selection_range_addresses)
  return &selection_range_addresses_;
}
inline const ::TSK::RangeAddress& OutlineSelectionTransformerArchive::_internal_selection_range_addresses(int index) const {
  return selection_range_addresses_.Get(index);
}
inline const ::TSK::RangeAddress& OutlineSelectionTransformerArchive::selection_range_addresses(int index) const {
  // @@protoc_insertion_point(field_get:KN.OutlineSelectionTransformerArchive.selection_range_addresses)
  return _internal_selection_range_addresses(index);
}
inline ::TSK::RangeAddress* OutlineSelectionTransformerArchive::_internal_add_selection_range_addresses() {
  return selection_range_addresses_.Add();
}
inline ::TSK::RangeAddress* OutlineSelectionTransformerArchive::add_selection_range_addresses() {
  ::TSK::RangeAddress* _add = _internal_add_selection_range_addresses();
  // @@protoc_insertion_point(field_add:KN.OutlineSelectionTransformerArchive.selection_range_addresses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RangeAddress >&
OutlineSelectionTransformerArchive::selection_range_addresses() const {
  // @@protoc_insertion_point(field_list:KN.OutlineSelectionTransformerArchive.selection_range_addresses)
  return selection_range_addresses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KN

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KN::CommandShowInsertSlideArchive_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::CommandShowInsertSlideArchive_Kind>() {
  return ::KN::CommandShowInsertSlideArchive_Kind_descriptor();
}
template <> struct is_proto_enum< ::KN::AnimationReferent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KN::AnimationReferent>() {
  return ::KN::AnimationReferent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KNCommandArchives_2eproto
