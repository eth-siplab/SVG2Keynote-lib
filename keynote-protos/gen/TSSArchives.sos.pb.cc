// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSSArchives.sos.proto

#include "TSSArchives.sos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSSSOS {
constexpr SpecSetBoolArchive::SpecSetBoolArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false)
  , unset_(false){}
struct SpecSetBoolArchiveDefaultTypeInternal {
  constexpr SpecSetBoolArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecSetBoolArchiveDefaultTypeInternal() {}
  union {
    SpecSetBoolArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecSetBoolArchiveDefaultTypeInternal _SpecSetBoolArchive_default_instance_;
constexpr SpecSetColorArchive::SpecSetColorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr)
  , unset_(false){}
struct SpecSetColorArchiveDefaultTypeInternal {
  constexpr SpecSetColorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecSetColorArchiveDefaultTypeInternal() {}
  union {
    SpecSetColorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecSetColorArchiveDefaultTypeInternal _SpecSetColorArchive_default_instance_;
constexpr SpecSetDoubleArchive::SpecSetDoubleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
  , unset_(false){}
struct SpecSetDoubleArchiveDefaultTypeInternal {
  constexpr SpecSetDoubleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecSetDoubleArchiveDefaultTypeInternal() {}
  union {
    SpecSetDoubleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecSetDoubleArchiveDefaultTypeInternal _SpecSetDoubleArchive_default_instance_;
constexpr SpecSetIntegerArchive::SpecSetIntegerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
  , unset_(false){}
struct SpecSetIntegerArchiveDefaultTypeInternal {
  constexpr SpecSetIntegerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecSetIntegerArchiveDefaultTypeInternal() {}
  union {
    SpecSetIntegerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecSetIntegerArchiveDefaultTypeInternal _SpecSetIntegerArchive_default_instance_;
constexpr SpecSetStringArchive::SpecSetStringArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unset_(false){}
struct SpecSetStringArchiveDefaultTypeInternal {
  constexpr SpecSetStringArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecSetStringArchiveDefaultTypeInternal() {}
  union {
    SpecSetStringArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecSetStringArchiveDefaultTypeInternal _SpecSetStringArchive_default_instance_;
constexpr SpecBoolArchive::SpecBoolArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_set_bool_(nullptr){}
struct SpecBoolArchiveDefaultTypeInternal {
  constexpr SpecBoolArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecBoolArchiveDefaultTypeInternal() {}
  union {
    SpecBoolArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecBoolArchiveDefaultTypeInternal _SpecBoolArchive_default_instance_;
constexpr SpecColorArchive::SpecColorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_set_color_(nullptr){}
struct SpecColorArchiveDefaultTypeInternal {
  constexpr SpecColorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecColorArchiveDefaultTypeInternal() {}
  union {
    SpecColorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecColorArchiveDefaultTypeInternal _SpecColorArchive_default_instance_;
constexpr SpecDoubleArchive::SpecDoubleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_set_double_(nullptr){}
struct SpecDoubleArchiveDefaultTypeInternal {
  constexpr SpecDoubleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecDoubleArchiveDefaultTypeInternal() {}
  union {
    SpecDoubleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecDoubleArchiveDefaultTypeInternal _SpecDoubleArchive_default_instance_;
constexpr SpecIntegerArchive::SpecIntegerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_set_integer_(nullptr){}
struct SpecIntegerArchiveDefaultTypeInternal {
  constexpr SpecIntegerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecIntegerArchiveDefaultTypeInternal() {}
  union {
    SpecIntegerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecIntegerArchiveDefaultTypeInternal _SpecIntegerArchive_default_instance_;
constexpr SpecStringArchive::SpecStringArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_set_string_(nullptr){}
struct SpecStringArchiveDefaultTypeInternal {
  constexpr SpecStringArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecStringArchiveDefaultTypeInternal() {}
  union {
    SpecStringArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecStringArchiveDefaultTypeInternal _SpecStringArchive_default_instance_;
}  // namespace TSSSOS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSSArchives_2esos_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TSSArchives_2esos_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSSArchives_2esos_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSSArchives_2esos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetBoolArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetBoolArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetBoolArchive, value_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetBoolArchive, unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetColorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetColorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetColorArchive, color_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetColorArchive, unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetDoubleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetDoubleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetDoubleArchive, value_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetDoubleArchive, unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetIntegerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetIntegerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetIntegerArchive, value_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetIntegerArchive, unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetStringArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetStringArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetStringArchive, value_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecSetStringArchive, unset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecBoolArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecBoolArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecBoolArchive, spec_set_bool_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecColorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecColorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecColorArchive, spec_set_color_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecDoubleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecDoubleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecDoubleArchive, spec_set_double_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecIntegerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecIntegerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecIntegerArchive, spec_set_integer_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecStringArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecStringArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSSSOS::SpecStringArchive, spec_set_string_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TSSSOS::SpecSetBoolArchive)},
  { 9, 16, sizeof(::TSSSOS::SpecSetColorArchive)},
  { 18, 25, sizeof(::TSSSOS::SpecSetDoubleArchive)},
  { 27, 34, sizeof(::TSSSOS::SpecSetIntegerArchive)},
  { 36, 43, sizeof(::TSSSOS::SpecSetStringArchive)},
  { 45, 51, sizeof(::TSSSOS::SpecBoolArchive)},
  { 52, 58, sizeof(::TSSSOS::SpecColorArchive)},
  { 59, 65, sizeof(::TSSSOS::SpecDoubleArchive)},
  { 66, 72, sizeof(::TSSSOS::SpecIntegerArchive)},
  { 73, 79, sizeof(::TSSSOS::SpecStringArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSSSOS::_SpecSetBoolArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSSSOS::_SpecSetColorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSSSOS::_SpecSetDoubleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSSSOS::_SpecSetIntegerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSSSOS::_SpecSetStringArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSSSOS::_SpecBoolArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSSSOS::_SpecColorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSSSOS::_SpecDoubleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSSSOS::_SpecIntegerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSSSOS::_SpecStringArchive_default_instance_),
};

const char descriptor_table_protodef_TSSArchives_2esos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025TSSArchives.sos.proto\022\006TSSSOS\032\021TSPMess"
  "ages.proto\"2\n\022SpecSetBoolArchive\022\r\n\005valu"
  "e\030\001 \002(\010\022\r\n\005unset\030\002 \002(\010\"\?\n\023SpecSetColorAr"
  "chive\022\031\n\005color\030\001 \001(\0132\n.TSP.Color\022\r\n\005unse"
  "t\030\002 \002(\010\"4\n\024SpecSetDoubleArchive\022\r\n\005value"
  "\030\001 \002(\001\022\r\n\005unset\030\002 \002(\010\"5\n\025SpecSetIntegerA"
  "rchive\022\r\n\005value\030\001 \002(\005\022\r\n\005unset\030\002 \002(\010\"4\n\024"
  "SpecSetStringArchive\022\r\n\005value\030\001 \001(\t\022\r\n\005u"
  "nset\030\002 \002(\010\"D\n\017SpecBoolArchive\0221\n\rspec_se"
  "t_bool\030\001 \001(\0132\032.TSSSOS.SpecSetBoolArchive"
  "\"G\n\020SpecColorArchive\0223\n\016spec_set_color\030\001"
  " \001(\0132\033.TSSSOS.SpecSetColorArchive\"J\n\021Spe"
  "cDoubleArchive\0225\n\017spec_set_double\030\001 \001(\0132"
  "\034.TSSSOS.SpecSetDoubleArchive\"M\n\022SpecInt"
  "egerArchive\0227\n\020spec_set_integer\030\001 \001(\0132\035."
  "TSSSOS.SpecSetIntegerArchive\"J\n\021SpecStri"
  "ngArchive\0225\n\017spec_set_string\030\001 \001(\0132\034.TSS"
  "SOS.SpecSetStringArchive"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSSArchives_2esos_2eproto_deps[1] = {
  &::descriptor_table_TSPMessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSSArchives_2esos_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSSArchives_2esos_2eproto = {
  false, false, 704, descriptor_table_protodef_TSSArchives_2esos_2eproto, "TSSArchives.sos.proto", 
  &descriptor_table_TSSArchives_2esos_2eproto_once, descriptor_table_TSSArchives_2esos_2eproto_deps, 1, 10,
  schemas, file_default_instances, TableStruct_TSSArchives_2esos_2eproto::offsets,
  file_level_metadata_TSSArchives_2esos_2eproto, file_level_enum_descriptors_TSSArchives_2esos_2eproto, file_level_service_descriptors_TSSArchives_2esos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSSArchives_2esos_2eproto_getter() {
  return &descriptor_table_TSSArchives_2esos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSSArchives_2esos_2eproto(&descriptor_table_TSSArchives_2esos_2eproto);
namespace TSSSOS {

// ===================================================================

class SpecSetBoolArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetBoolArchive>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpecSetBoolArchive::SpecSetBoolArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSSSOS.SpecSetBoolArchive)
}
SpecSetBoolArchive::SpecSetBoolArchive(const SpecSetBoolArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unset_));
  // @@protoc_insertion_point(copy_constructor:TSSSOS.SpecSetBoolArchive)
}

inline void SpecSetBoolArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unset_));
}

SpecSetBoolArchive::~SpecSetBoolArchive() {
  // @@protoc_insertion_point(destructor:TSSSOS.SpecSetBoolArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecSetBoolArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpecSetBoolArchive::ArenaDtor(void* object) {
  SpecSetBoolArchive* _this = reinterpret_cast< SpecSetBoolArchive* >(object);
  (void)_this;
}
void SpecSetBoolArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecSetBoolArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecSetBoolArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSSSOS.SpecSetBoolArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unset_) -
      reinterpret_cast<char*>(&value_)) + sizeof(unset_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetBoolArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecSetBoolArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSSSOS.SpecSetBoolArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSSSOS.SpecSetBoolArchive)
  return target;
}

size_t SpecSetBoolArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSSSOS.SpecSetBoolArchive)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required bool value = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_unset()) {
    // required bool unset = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SpecSetBoolArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSSSOS.SpecSetBoolArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool value = 1;
    total_size += 1 + 1;

    // required bool unset = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecSetBoolArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecSetBoolArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecSetBoolArchive::GetClassData() const { return &_class_data_; }

void SpecSetBoolArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpecSetBoolArchive *>(to)->MergeFrom(
      static_cast<const SpecSetBoolArchive &>(from));
}


void SpecSetBoolArchive::MergeFrom(const SpecSetBoolArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSSSOS.SpecSetBoolArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      unset_ = from.unset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecSetBoolArchive::CopyFrom(const SpecSetBoolArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSSSOS.SpecSetBoolArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetBoolArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecSetBoolArchive::InternalSwap(SpecSetBoolArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetBoolArchive, unset_)
      + sizeof(SpecSetBoolArchive::unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetBoolArchive, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetBoolArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSSArchives_2esos_2eproto_getter, &descriptor_table_TSSArchives_2esos_2eproto_once,
      file_level_metadata_TSSArchives_2esos_2eproto[0]);
}

// ===================================================================

class SpecSetColorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetColorArchive>()._has_bits_);
  static const ::TSP::Color& color(const SpecSetColorArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Color&
SpecSetColorArchive::_Internal::color(const SpecSetColorArchive* msg) {
  return *msg->color_;
}
void SpecSetColorArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecSetColorArchive::SpecSetColorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSSSOS.SpecSetColorArchive)
}
SpecSetColorArchive::SpecSetColorArchive(const SpecSetColorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  unset_ = from.unset_;
  // @@protoc_insertion_point(copy_constructor:TSSSOS.SpecSetColorArchive)
}

inline void SpecSetColorArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&color_)) + sizeof(unset_));
}

SpecSetColorArchive::~SpecSetColorArchive() {
  // @@protoc_insertion_point(destructor:TSSSOS.SpecSetColorArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecSetColorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete color_;
}

void SpecSetColorArchive::ArenaDtor(void* object) {
  SpecSetColorArchive* _this = reinterpret_cast< SpecSetColorArchive* >(object);
  (void)_this;
}
void SpecSetColorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecSetColorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecSetColorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSSSOS.SpecSetColorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != nullptr);
    color_->Clear();
  }
  unset_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetColorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecSetColorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSSSOS.SpecSetColorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSSSOS.SpecSetColorArchive)
  return target;
}

size_t SpecSetColorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSSSOS.SpecSetColorArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Color color = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecSetColorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecSetColorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecSetColorArchive::GetClassData() const { return &_class_data_; }

void SpecSetColorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpecSetColorArchive *>(to)->MergeFrom(
      static_cast<const SpecSetColorArchive &>(from));
}


void SpecSetColorArchive::MergeFrom(const SpecSetColorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSSSOS.SpecSetColorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      unset_ = from.unset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecSetColorArchive::CopyFrom(const SpecSetColorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSSSOS.SpecSetColorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetColorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  return true;
}

void SpecSetColorArchive::InternalSwap(SpecSetColorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetColorArchive, unset_)
      + sizeof(SpecSetColorArchive::unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetColorArchive, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetColorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSSArchives_2esos_2eproto_getter, &descriptor_table_TSSArchives_2esos_2eproto_once,
      file_level_metadata_TSSArchives_2esos_2eproto[1]);
}

// ===================================================================

class SpecSetDoubleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetDoubleArchive>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpecSetDoubleArchive::SpecSetDoubleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSSSOS.SpecSetDoubleArchive)
}
SpecSetDoubleArchive::SpecSetDoubleArchive(const SpecSetDoubleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unset_));
  // @@protoc_insertion_point(copy_constructor:TSSSOS.SpecSetDoubleArchive)
}

inline void SpecSetDoubleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unset_));
}

SpecSetDoubleArchive::~SpecSetDoubleArchive() {
  // @@protoc_insertion_point(destructor:TSSSOS.SpecSetDoubleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecSetDoubleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpecSetDoubleArchive::ArenaDtor(void* object) {
  SpecSetDoubleArchive* _this = reinterpret_cast< SpecSetDoubleArchive* >(object);
  (void)_this;
}
void SpecSetDoubleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecSetDoubleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecSetDoubleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSSSOS.SpecSetDoubleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unset_) -
        reinterpret_cast<char*>(&value_)) + sizeof(unset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetDoubleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecSetDoubleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSSSOS.SpecSetDoubleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSSSOS.SpecSetDoubleArchive)
  return target;
}

size_t SpecSetDoubleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSSSOS.SpecSetDoubleArchive)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required double value = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_unset()) {
    // required bool unset = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SpecSetDoubleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSSSOS.SpecSetDoubleArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double value = 1;
    total_size += 1 + 8;

    // required bool unset = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecSetDoubleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecSetDoubleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecSetDoubleArchive::GetClassData() const { return &_class_data_; }

void SpecSetDoubleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpecSetDoubleArchive *>(to)->MergeFrom(
      static_cast<const SpecSetDoubleArchive &>(from));
}


void SpecSetDoubleArchive::MergeFrom(const SpecSetDoubleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSSSOS.SpecSetDoubleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      unset_ = from.unset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecSetDoubleArchive::CopyFrom(const SpecSetDoubleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSSSOS.SpecSetDoubleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetDoubleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecSetDoubleArchive::InternalSwap(SpecSetDoubleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetDoubleArchive, unset_)
      + sizeof(SpecSetDoubleArchive::unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetDoubleArchive, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetDoubleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSSArchives_2esos_2eproto_getter, &descriptor_table_TSSArchives_2esos_2eproto_once,
      file_level_metadata_TSSArchives_2esos_2eproto[2]);
}

// ===================================================================

class SpecSetIntegerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetIntegerArchive>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpecSetIntegerArchive::SpecSetIntegerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSSSOS.SpecSetIntegerArchive)
}
SpecSetIntegerArchive::SpecSetIntegerArchive(const SpecSetIntegerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unset_));
  // @@protoc_insertion_point(copy_constructor:TSSSOS.SpecSetIntegerArchive)
}

inline void SpecSetIntegerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unset_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unset_));
}

SpecSetIntegerArchive::~SpecSetIntegerArchive() {
  // @@protoc_insertion_point(destructor:TSSSOS.SpecSetIntegerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecSetIntegerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpecSetIntegerArchive::ArenaDtor(void* object) {
  SpecSetIntegerArchive* _this = reinterpret_cast< SpecSetIntegerArchive* >(object);
  (void)_this;
}
void SpecSetIntegerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecSetIntegerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecSetIntegerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSSSOS.SpecSetIntegerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unset_) -
        reinterpret_cast<char*>(&value_)) + sizeof(unset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetIntegerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecSetIntegerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSSSOS.SpecSetIntegerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSSSOS.SpecSetIntegerArchive)
  return target;
}

size_t SpecSetIntegerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSSSOS.SpecSetIntegerArchive)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required int32 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (_internal_has_unset()) {
    // required bool unset = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SpecSetIntegerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSSSOS.SpecSetIntegerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());

    // required bool unset = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecSetIntegerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecSetIntegerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecSetIntegerArchive::GetClassData() const { return &_class_data_; }

void SpecSetIntegerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpecSetIntegerArchive *>(to)->MergeFrom(
      static_cast<const SpecSetIntegerArchive &>(from));
}


void SpecSetIntegerArchive::MergeFrom(const SpecSetIntegerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSSSOS.SpecSetIntegerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      unset_ = from.unset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecSetIntegerArchive::CopyFrom(const SpecSetIntegerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSSSOS.SpecSetIntegerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetIntegerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecSetIntegerArchive::InternalSwap(SpecSetIntegerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecSetIntegerArchive, unset_)
      + sizeof(SpecSetIntegerArchive::unset_)
      - PROTOBUF_FIELD_OFFSET(SpecSetIntegerArchive, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetIntegerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSSArchives_2esos_2eproto_getter, &descriptor_table_TSSArchives_2esos_2eproto_once,
      file_level_metadata_TSSArchives_2esos_2eproto[3]);
}

// ===================================================================

class SpecSetStringArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecSetStringArchive>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

SpecSetStringArchive::SpecSetStringArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSSSOS.SpecSetStringArchive)
}
SpecSetStringArchive::SpecSetStringArchive(const SpecSetStringArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  unset_ = from.unset_;
  // @@protoc_insertion_point(copy_constructor:TSSSOS.SpecSetStringArchive)
}

inline void SpecSetStringArchive::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unset_ = false;
}

SpecSetStringArchive::~SpecSetStringArchive() {
  // @@protoc_insertion_point(destructor:TSSSOS.SpecSetStringArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecSetStringArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpecSetStringArchive::ArenaDtor(void* object) {
  SpecSetStringArchive* _this = reinterpret_cast< SpecSetStringArchive* >(object);
  (void)_this;
}
void SpecSetStringArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecSetStringArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecSetStringArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSSSOS.SpecSetStringArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  unset_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecSetStringArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSSSOS.SpecSetStringArchive.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool unset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unset(&has_bits);
          unset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecSetStringArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSSSOS.SpecSetStringArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSSSOS.SpecSetStringArchive.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // required bool unset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSSSOS.SpecSetStringArchive)
  return target;
}

size_t SpecSetStringArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSSSOS.SpecSetStringArchive)
  size_t total_size = 0;

  // required bool unset = 2;
  if (_internal_has_unset()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecSetStringArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecSetStringArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecSetStringArchive::GetClassData() const { return &_class_data_; }

void SpecSetStringArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpecSetStringArchive *>(to)->MergeFrom(
      static_cast<const SpecSetStringArchive &>(from));
}


void SpecSetStringArchive::MergeFrom(const SpecSetStringArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSSSOS.SpecSetStringArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      unset_ = from.unset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecSetStringArchive::CopyFrom(const SpecSetStringArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSSSOS.SpecSetStringArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSetStringArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecSetStringArchive::InternalSwap(SpecSetStringArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(unset_, other->unset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecSetStringArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSSArchives_2esos_2eproto_getter, &descriptor_table_TSSArchives_2esos_2eproto_once,
      file_level_metadata_TSSArchives_2esos_2eproto[4]);
}

// ===================================================================

class SpecBoolArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecBoolArchive>()._has_bits_);
  static const ::TSSSOS::SpecSetBoolArchive& spec_set_bool(const SpecBoolArchive* msg);
  static void set_has_spec_set_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSSSOS::SpecSetBoolArchive&
SpecBoolArchive::_Internal::spec_set_bool(const SpecBoolArchive* msg) {
  return *msg->spec_set_bool_;
}
SpecBoolArchive::SpecBoolArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSSSOS.SpecBoolArchive)
}
SpecBoolArchive::SpecBoolArchive(const SpecBoolArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_set_bool()) {
    spec_set_bool_ = new ::TSSSOS::SpecSetBoolArchive(*from.spec_set_bool_);
  } else {
    spec_set_bool_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSSSOS.SpecBoolArchive)
}

inline void SpecBoolArchive::SharedCtor() {
spec_set_bool_ = nullptr;
}

SpecBoolArchive::~SpecBoolArchive() {
  // @@protoc_insertion_point(destructor:TSSSOS.SpecBoolArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecBoolArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_set_bool_;
}

void SpecBoolArchive::ArenaDtor(void* object) {
  SpecBoolArchive* _this = reinterpret_cast< SpecBoolArchive* >(object);
  (void)_this;
}
void SpecBoolArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecBoolArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecBoolArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSSSOS.SpecBoolArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(spec_set_bool_ != nullptr);
    spec_set_bool_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecBoolArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSSSOS.SpecSetBoolArchive spec_set_bool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_bool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecBoolArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSSSOS.SpecBoolArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSSSOS.SpecSetBoolArchive spec_set_bool = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec_set_bool(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSSSOS.SpecBoolArchive)
  return target;
}

size_t SpecBoolArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSSSOS.SpecBoolArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSSSOS.SpecSetBoolArchive spec_set_bool = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_set_bool_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecBoolArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecBoolArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecBoolArchive::GetClassData() const { return &_class_data_; }

void SpecBoolArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpecBoolArchive *>(to)->MergeFrom(
      static_cast<const SpecBoolArchive &>(from));
}


void SpecBoolArchive::MergeFrom(const SpecBoolArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSSSOS.SpecBoolArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec_set_bool()) {
    _internal_mutable_spec_set_bool()->::TSSSOS::SpecSetBoolArchive::MergeFrom(from._internal_spec_set_bool());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecBoolArchive::CopyFrom(const SpecBoolArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSSSOS.SpecBoolArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecBoolArchive::IsInitialized() const {
  if (_internal_has_spec_set_bool()) {
    if (!spec_set_bool_->IsInitialized()) return false;
  }
  return true;
}

void SpecBoolArchive::InternalSwap(SpecBoolArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spec_set_bool_, other->spec_set_bool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecBoolArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSSArchives_2esos_2eproto_getter, &descriptor_table_TSSArchives_2esos_2eproto_once,
      file_level_metadata_TSSArchives_2esos_2eproto[5]);
}

// ===================================================================

class SpecColorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecColorArchive>()._has_bits_);
  static const ::TSSSOS::SpecSetColorArchive& spec_set_color(const SpecColorArchive* msg);
  static void set_has_spec_set_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSSSOS::SpecSetColorArchive&
SpecColorArchive::_Internal::spec_set_color(const SpecColorArchive* msg) {
  return *msg->spec_set_color_;
}
SpecColorArchive::SpecColorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSSSOS.SpecColorArchive)
}
SpecColorArchive::SpecColorArchive(const SpecColorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_set_color()) {
    spec_set_color_ = new ::TSSSOS::SpecSetColorArchive(*from.spec_set_color_);
  } else {
    spec_set_color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSSSOS.SpecColorArchive)
}

inline void SpecColorArchive::SharedCtor() {
spec_set_color_ = nullptr;
}

SpecColorArchive::~SpecColorArchive() {
  // @@protoc_insertion_point(destructor:TSSSOS.SpecColorArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecColorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_set_color_;
}

void SpecColorArchive::ArenaDtor(void* object) {
  SpecColorArchive* _this = reinterpret_cast< SpecColorArchive* >(object);
  (void)_this;
}
void SpecColorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecColorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecColorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSSSOS.SpecColorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(spec_set_color_ != nullptr);
    spec_set_color_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecColorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSSSOS.SpecSetColorArchive spec_set_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecColorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSSSOS.SpecColorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSSSOS.SpecSetColorArchive spec_set_color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec_set_color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSSSOS.SpecColorArchive)
  return target;
}

size_t SpecColorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSSSOS.SpecColorArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSSSOS.SpecSetColorArchive spec_set_color = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_set_color_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecColorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecColorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecColorArchive::GetClassData() const { return &_class_data_; }

void SpecColorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpecColorArchive *>(to)->MergeFrom(
      static_cast<const SpecColorArchive &>(from));
}


void SpecColorArchive::MergeFrom(const SpecColorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSSSOS.SpecColorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec_set_color()) {
    _internal_mutable_spec_set_color()->::TSSSOS::SpecSetColorArchive::MergeFrom(from._internal_spec_set_color());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecColorArchive::CopyFrom(const SpecColorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSSSOS.SpecColorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecColorArchive::IsInitialized() const {
  if (_internal_has_spec_set_color()) {
    if (!spec_set_color_->IsInitialized()) return false;
  }
  return true;
}

void SpecColorArchive::InternalSwap(SpecColorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spec_set_color_, other->spec_set_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecColorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSSArchives_2esos_2eproto_getter, &descriptor_table_TSSArchives_2esos_2eproto_once,
      file_level_metadata_TSSArchives_2esos_2eproto[6]);
}

// ===================================================================

class SpecDoubleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecDoubleArchive>()._has_bits_);
  static const ::TSSSOS::SpecSetDoubleArchive& spec_set_double(const SpecDoubleArchive* msg);
  static void set_has_spec_set_double(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSSSOS::SpecSetDoubleArchive&
SpecDoubleArchive::_Internal::spec_set_double(const SpecDoubleArchive* msg) {
  return *msg->spec_set_double_;
}
SpecDoubleArchive::SpecDoubleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSSSOS.SpecDoubleArchive)
}
SpecDoubleArchive::SpecDoubleArchive(const SpecDoubleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_set_double()) {
    spec_set_double_ = new ::TSSSOS::SpecSetDoubleArchive(*from.spec_set_double_);
  } else {
    spec_set_double_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSSSOS.SpecDoubleArchive)
}

inline void SpecDoubleArchive::SharedCtor() {
spec_set_double_ = nullptr;
}

SpecDoubleArchive::~SpecDoubleArchive() {
  // @@protoc_insertion_point(destructor:TSSSOS.SpecDoubleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecDoubleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_set_double_;
}

void SpecDoubleArchive::ArenaDtor(void* object) {
  SpecDoubleArchive* _this = reinterpret_cast< SpecDoubleArchive* >(object);
  (void)_this;
}
void SpecDoubleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecDoubleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecDoubleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSSSOS.SpecDoubleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(spec_set_double_ != nullptr);
    spec_set_double_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecDoubleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSSSOS.SpecSetDoubleArchive spec_set_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_double(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecDoubleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSSSOS.SpecDoubleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSSSOS.SpecSetDoubleArchive spec_set_double = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec_set_double(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSSSOS.SpecDoubleArchive)
  return target;
}

size_t SpecDoubleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSSSOS.SpecDoubleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSSSOS.SpecSetDoubleArchive spec_set_double = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_set_double_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecDoubleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecDoubleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecDoubleArchive::GetClassData() const { return &_class_data_; }

void SpecDoubleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpecDoubleArchive *>(to)->MergeFrom(
      static_cast<const SpecDoubleArchive &>(from));
}


void SpecDoubleArchive::MergeFrom(const SpecDoubleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSSSOS.SpecDoubleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec_set_double()) {
    _internal_mutable_spec_set_double()->::TSSSOS::SpecSetDoubleArchive::MergeFrom(from._internal_spec_set_double());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecDoubleArchive::CopyFrom(const SpecDoubleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSSSOS.SpecDoubleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecDoubleArchive::IsInitialized() const {
  if (_internal_has_spec_set_double()) {
    if (!spec_set_double_->IsInitialized()) return false;
  }
  return true;
}

void SpecDoubleArchive::InternalSwap(SpecDoubleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spec_set_double_, other->spec_set_double_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecDoubleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSSArchives_2esos_2eproto_getter, &descriptor_table_TSSArchives_2esos_2eproto_once,
      file_level_metadata_TSSArchives_2esos_2eproto[7]);
}

// ===================================================================

class SpecIntegerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecIntegerArchive>()._has_bits_);
  static const ::TSSSOS::SpecSetIntegerArchive& spec_set_integer(const SpecIntegerArchive* msg);
  static void set_has_spec_set_integer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSSSOS::SpecSetIntegerArchive&
SpecIntegerArchive::_Internal::spec_set_integer(const SpecIntegerArchive* msg) {
  return *msg->spec_set_integer_;
}
SpecIntegerArchive::SpecIntegerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSSSOS.SpecIntegerArchive)
}
SpecIntegerArchive::SpecIntegerArchive(const SpecIntegerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_set_integer()) {
    spec_set_integer_ = new ::TSSSOS::SpecSetIntegerArchive(*from.spec_set_integer_);
  } else {
    spec_set_integer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSSSOS.SpecIntegerArchive)
}

inline void SpecIntegerArchive::SharedCtor() {
spec_set_integer_ = nullptr;
}

SpecIntegerArchive::~SpecIntegerArchive() {
  // @@protoc_insertion_point(destructor:TSSSOS.SpecIntegerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecIntegerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_set_integer_;
}

void SpecIntegerArchive::ArenaDtor(void* object) {
  SpecIntegerArchive* _this = reinterpret_cast< SpecIntegerArchive* >(object);
  (void)_this;
}
void SpecIntegerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecIntegerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecIntegerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSSSOS.SpecIntegerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(spec_set_integer_ != nullptr);
    spec_set_integer_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecIntegerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSSSOS.SpecSetIntegerArchive spec_set_integer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_integer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecIntegerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSSSOS.SpecIntegerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSSSOS.SpecSetIntegerArchive spec_set_integer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec_set_integer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSSSOS.SpecIntegerArchive)
  return target;
}

size_t SpecIntegerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSSSOS.SpecIntegerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSSSOS.SpecSetIntegerArchive spec_set_integer = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_set_integer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecIntegerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecIntegerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecIntegerArchive::GetClassData() const { return &_class_data_; }

void SpecIntegerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpecIntegerArchive *>(to)->MergeFrom(
      static_cast<const SpecIntegerArchive &>(from));
}


void SpecIntegerArchive::MergeFrom(const SpecIntegerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSSSOS.SpecIntegerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec_set_integer()) {
    _internal_mutable_spec_set_integer()->::TSSSOS::SpecSetIntegerArchive::MergeFrom(from._internal_spec_set_integer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecIntegerArchive::CopyFrom(const SpecIntegerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSSSOS.SpecIntegerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecIntegerArchive::IsInitialized() const {
  if (_internal_has_spec_set_integer()) {
    if (!spec_set_integer_->IsInitialized()) return false;
  }
  return true;
}

void SpecIntegerArchive::InternalSwap(SpecIntegerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spec_set_integer_, other->spec_set_integer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecIntegerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSSArchives_2esos_2eproto_getter, &descriptor_table_TSSArchives_2esos_2eproto_once,
      file_level_metadata_TSSArchives_2esos_2eproto[8]);
}

// ===================================================================

class SpecStringArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecStringArchive>()._has_bits_);
  static const ::TSSSOS::SpecSetStringArchive& spec_set_string(const SpecStringArchive* msg);
  static void set_has_spec_set_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSSSOS::SpecSetStringArchive&
SpecStringArchive::_Internal::spec_set_string(const SpecStringArchive* msg) {
  return *msg->spec_set_string_;
}
SpecStringArchive::SpecStringArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSSSOS.SpecStringArchive)
}
SpecStringArchive::SpecStringArchive(const SpecStringArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec_set_string()) {
    spec_set_string_ = new ::TSSSOS::SpecSetStringArchive(*from.spec_set_string_);
  } else {
    spec_set_string_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSSSOS.SpecStringArchive)
}

inline void SpecStringArchive::SharedCtor() {
spec_set_string_ = nullptr;
}

SpecStringArchive::~SpecStringArchive() {
  // @@protoc_insertion_point(destructor:TSSSOS.SpecStringArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecStringArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_set_string_;
}

void SpecStringArchive::ArenaDtor(void* object) {
  SpecStringArchive* _this = reinterpret_cast< SpecStringArchive* >(object);
  (void)_this;
}
void SpecStringArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecStringArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecStringArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSSSOS.SpecStringArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(spec_set_string_ != nullptr);
    spec_set_string_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecStringArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSSSOS.SpecSetStringArchive spec_set_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_set_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecStringArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSSSOS.SpecStringArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSSSOS.SpecSetStringArchive spec_set_string = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec_set_string(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSSSOS.SpecStringArchive)
  return target;
}

size_t SpecStringArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSSSOS.SpecStringArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSSSOS.SpecSetStringArchive spec_set_string = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_set_string_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecStringArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecStringArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecStringArchive::GetClassData() const { return &_class_data_; }

void SpecStringArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpecStringArchive *>(to)->MergeFrom(
      static_cast<const SpecStringArchive &>(from));
}


void SpecStringArchive::MergeFrom(const SpecStringArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSSSOS.SpecStringArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec_set_string()) {
    _internal_mutable_spec_set_string()->::TSSSOS::SpecSetStringArchive::MergeFrom(from._internal_spec_set_string());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecStringArchive::CopyFrom(const SpecStringArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSSSOS.SpecStringArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecStringArchive::IsInitialized() const {
  if (_internal_has_spec_set_string()) {
    if (!spec_set_string_->IsInitialized()) return false;
  }
  return true;
}

void SpecStringArchive::InternalSwap(SpecStringArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spec_set_string_, other->spec_set_string_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecStringArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSSArchives_2esos_2eproto_getter, &descriptor_table_TSSArchives_2esos_2eproto_once,
      file_level_metadata_TSSArchives_2esos_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSSSOS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSSSOS::SpecSetBoolArchive* Arena::CreateMaybeMessage< ::TSSSOS::SpecSetBoolArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSSSOS::SpecSetBoolArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSSSOS::SpecSetColorArchive* Arena::CreateMaybeMessage< ::TSSSOS::SpecSetColorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSSSOS::SpecSetColorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSSSOS::SpecSetDoubleArchive* Arena::CreateMaybeMessage< ::TSSSOS::SpecSetDoubleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSSSOS::SpecSetDoubleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSSSOS::SpecSetIntegerArchive* Arena::CreateMaybeMessage< ::TSSSOS::SpecSetIntegerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSSSOS::SpecSetIntegerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSSSOS::SpecSetStringArchive* Arena::CreateMaybeMessage< ::TSSSOS::SpecSetStringArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSSSOS::SpecSetStringArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSSSOS::SpecBoolArchive* Arena::CreateMaybeMessage< ::TSSSOS::SpecBoolArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSSSOS::SpecBoolArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSSSOS::SpecColorArchive* Arena::CreateMaybeMessage< ::TSSSOS::SpecColorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSSSOS::SpecColorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSSSOS::SpecDoubleArchive* Arena::CreateMaybeMessage< ::TSSSOS::SpecDoubleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSSSOS::SpecDoubleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSSSOS::SpecIntegerArchive* Arena::CreateMaybeMessage< ::TSSSOS::SpecIntegerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSSSOS::SpecIntegerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSSSOS::SpecStringArchive* Arena::CreateMaybeMessage< ::TSSSOS::SpecStringArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSSSOS::SpecStringArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
