// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHPreUFFArchives.proto

#include "TSCHPreUFFArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSCH {
namespace PreUFF {
constexpr ChartInfoArchive::ChartInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_axis_styles_()
  , category_axis_styles_()
  , value_axis_nonstyles_()
  , category_axis_nonstyles_()
  , series_theme_styles_()
  , paragraph_styles_()
  , super_(nullptr)
  , chart_model_(nullptr)
  , style_(nullptr)
  , legend_model_(nullptr)
  , inner_chart_frame_(nullptr)
  , series_private_styles_(nullptr)
  , series_non_styles_(nullptr)
  , non_style_(nullptr)
  , mediator_(nullptr)
  , cde_preview_origin_(nullptr)
  , chart_style_preset_(nullptr)
  , chart_type_(0)

  , last_row_sected_in_the_cde_(0)
  , last_column_sected_in_the_cde_(0)
  , chart_style_preset_index_(0)
  , needs_calc_engine_deferred_import_action_(false){}
struct ChartInfoArchiveDefaultTypeInternal {
  constexpr ChartInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartInfoArchiveDefaultTypeInternal() {}
  union {
    ChartInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartInfoArchiveDefaultTypeInternal _ChartInfoArchive_default_instance_;
constexpr LegendModelArchive::LegendModelArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr)
  , frame_(nullptr)
  , style_(nullptr)
  , non_style_(nullptr){}
struct LegendModelArchiveDefaultTypeInternal {
  constexpr LegendModelArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LegendModelArchiveDefaultTypeInternal() {}
  union {
    LegendModelArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LegendModelArchiveDefaultTypeInternal _LegendModelArchive_default_instance_;
constexpr ChartModelArchive::ChartModelArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : series_types_()
  , info_(nullptr)
  , grid_(nullptr)
  , inline_grid_(nullptr)
  , scatter_format_(0u)
  , multidataset_index_(0u){}
struct ChartModelArchiveDefaultTypeInternal {
  constexpr ChartModelArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartModelArchiveDefaultTypeInternal() {}
  union {
    ChartModelArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartModelArchiveDefaultTypeInternal _ChartModelArchive_default_instance_;
constexpr ChartGridArchive_ValueRow::ChartGridArchive_ValueRow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct ChartGridArchive_ValueRowDefaultTypeInternal {
  constexpr ChartGridArchive_ValueRowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartGridArchive_ValueRowDefaultTypeInternal() {}
  union {
    ChartGridArchive_ValueRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartGridArchive_ValueRowDefaultTypeInternal _ChartGridArchive_ValueRow_default_instance_;
constexpr ChartGridArchive::ChartGridArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_name_()
  , column_name_()
  , value_row_()
  , direction_(0)
  , dirty_(false){}
struct ChartGridArchiveDefaultTypeInternal {
  constexpr ChartGridArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartGridArchiveDefaultTypeInternal() {}
  union {
    ChartGridArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartGridArchiveDefaultTypeInternal _ChartGridArchive_default_instance_;
constexpr ChartsNumberFormatArchive::ChartsNumberFormatArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interstitial_strings_()
  , format_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currency_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , suffix_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , format_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , interstitial_string_insertion_indexes_(nullptr)
  , value_type_(0)

  , decimal_places_(0u)
  , negative_style_(0)

  , fraction_accuracy_(0)

  , base_(0u)
  , base_places_(0u)
  , show_thousands_separator_(false)
  , base_use_minus_sign_(false)
  , use_accounting_style_(false)
  , is_custom_(false)
  , index_from_right_of_last_digit_placeholder_(0u)
  , scale_factor_(0)
  , is_text_format_(false)
  , minimum_integer_width_(0u)
  , decimal_width_(0u)
  , number_of_non_space_integer_placeholder_digits_(0u)
  , number_of_non_space_decimal_placeholder_digits_(0u){}
struct ChartsNumberFormatArchiveDefaultTypeInternal {
  constexpr ChartsNumberFormatArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartsNumberFormatArchiveDefaultTypeInternal() {}
  union {
    ChartsNumberFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartsNumberFormatArchiveDefaultTypeInternal _ChartsNumberFormatArchive_default_instance_;
constexpr ChartStyleArchive::ChartStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartinfodefaultdeprecatedmainfontfamily_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , tschchartinfodefaultbackgroundfill_(nullptr)
  , tschchartinfodefaultbackgroundstroke_(nullptr)
  , tschchartinfodefaultgridbackgroundfill_(nullptr)
  , tschchartinfodefaultborderstroke_(nullptr)
  , tschchartinfodefaulttitlecolor_(nullptr)
  , tschchartinfodefaultbordershadow_(nullptr)
  , tschchartinfodefaultdeprecatedtrendlineequationshadow_(nullptr)
  , tschchartinfodefaultdeprecatedtrendlinersquaredshadow_(nullptr)
  , tschchartinfobardeprecated3dshadow_(nullptr)
  , tschchartinfocolumndeprecated3dshadow_(nullptr)
  , tschchartinfolinedeprecated3dshadow_(nullptr)
  , tschchartinfoareadeprecated3dshadow_(nullptr)
  , tschchartinfopiedeprecated3dshadow_(nullptr)
  , tschchartinfodefault3dlightingpackage_(nullptr)
  , tschchartinfocolumn3dlightingpackage_(nullptr)
  , tschchartinfobar3dlightingpackage_(nullptr)
  , tschchartinfoline3dlightingpackage_(nullptr)
  , tschchartinfoarea3dlightingpackage_(nullptr)
  , tschchartinfopie3dlightingpackage_(nullptr)
  , tschchartinfodefaultintersetgap_(0)
  , tschchartinfodefaultinterbargap_(0)
  , tschchartinfodefaultgridbackgroundopacity_(0)
  , tschchartinfodefaultborderopacity_(0)
  , tschchartinfodefaulttitleparagraphstyleindex_(0)
  , tschchartinfodefaultdeprecatedmainfontnamedsize_(0)
  , tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_(0)
  , tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_(0)
  , tschchartinfodefaultdeprecatedtrendlineequationopacity_(0)
  , tschchartinfodefaultdeprecatedtrendlinersquaredopacity_(0)
  , tschchartinfodefaultshowborder_(false)
  , tschchartinfodefaultcombinelayers_(false)
  , tschchartinfodefaultdeprecated3dbeveledges_(false)
  , tschchartinfopiedeprecated3dbeveledges_(false)
  , tschchartinfobardeprecated3dbeveledges_(false)
  , tschchartinfocolumndeprecated3dbeveledges_(false)
  , tschchartinfodefaultdeprecated3dbarshape_(0)
  , tschchartinfodefault3dchartopacity_(0){}
struct ChartStyleArchiveDefaultTypeInternal {
  constexpr ChartStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartStyleArchiveDefaultTypeInternal() {}
  union {
    ChartStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartStyleArchiveDefaultTypeInternal _ChartStyleArchive_default_instance_;
constexpr ChartNonStyleArchive::ChartNonStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartinfodefaulttitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , tschchartinfodefault3drotation_(nullptr)
  , tschchartinfodefault3dscale_(nullptr)
  , tschchartinfocolumn3dscale_(nullptr)
  , tschchartinfobar3dscale_(nullptr)
  , tschchartinfoline3dscale_(nullptr)
  , tschchartinfoarea3dscale_(nullptr)
  , tschchartinfopie3dscale_(nullptr)
  , tschchartinfodefault3dviewport_(nullptr)
  , tschchartinfodefaultdeprecated3dlightingpackage_(nullptr)
  , tschchartinfocolumndeprecated3dlightingpackage_(nullptr)
  , tschchartinfobardeprecated3dlightingpackage_(nullptr)
  , tschchartinfolinedeprecated3dlightingpackage_(nullptr)
  , tschchartinfoareadeprecated3dlightingpackage_(nullptr)
  , tschchartinfopiedeprecated3dlightingpackage_(nullptr)
  , tschchartinfodefaultpiestartangle_(0)
  , tschchartinfodefaultdeprecatedagainmainfontnamedsize_(0)
  , tschchartinfodefault3dbarshape_(0)
  , tschchartinfodefaultshowlegend_(false)
  , tschchartinfodefaultshowtitle_(false)
  , tschchartinfodefaultskiphiddendata_(false)
  , tschchartinfodefault3dbeveledges_(false)
  , tschchartinfodefault3dintersetdepthgap_(0){}
struct ChartNonStyleArchiveDefaultTypeInternal {
  constexpr ChartNonStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartNonStyleArchiveDefaultTypeInternal _ChartNonStyleArchive_default_instance_;
constexpr LegendStyleArchive::LegendStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , tschlegendmodeldefaultfill_(nullptr)
  , tschlegendmodeldefaultstroke_(nullptr)
  , tschlegendmodeldefaultshadow_(nullptr)
  , tschlegendmodeldefaultopacity_(0)
  , tschlegendmodeldefaultlabelparagraphstyleindex_(0){}
struct LegendStyleArchiveDefaultTypeInternal {
  constexpr LegendStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LegendStyleArchiveDefaultTypeInternal() {}
  union {
    LegendStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LegendStyleArchiveDefaultTypeInternal _LegendStyleArchive_default_instance_;
constexpr LegendNonStyleArchive::LegendNonStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct LegendNonStyleArchiveDefaultTypeInternal {
  constexpr LegendNonStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LegendNonStyleArchiveDefaultTypeInternal() {}
  union {
    LegendNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LegendNonStyleArchiveDefaultTypeInternal _LegendNonStyleArchive_default_instance_;
constexpr ChartAxisStyleArchive::ChartAxisStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , tschchartaxisvaluemajorgridlinestroke_(nullptr)
  , tschchartaxisvalueminorgridlinestroke_(nullptr)
  , tschchartaxisvaluemajorgridlineshadow_(nullptr)
  , tschchartaxisvalueminorgridlineshadow_(nullptr)
  , tschchartaxiscategorymajorgridlinestroke_(nullptr)
  , tschchartaxiscategoryminorgridlinestroke_(nullptr)
  , tschchartaxiscategorymajorgridlineshadow_(nullptr)
  , tschchartaxiscategoryminorgridlineshadow_(nullptr)
  , tschchartaxisvalue3dgridlinestroke_(nullptr)
  , tschchartaxiscategory3dgridlinestroke_(nullptr)
  , tschchartaxisvalueshowmajorgridlines_(false)
  , tschchartaxisvalueshowminorgridlines_(false)
  , tschchartaxisvalueshowmajortickmarks_(false)
  , tschchartaxisvalueshowminortickmarks_(false)
  , tschchartaxisvaluetickmarklocation_(0)
  , tschchartaxisvaluelabelsorientation_(0)
  , tschchartaxisvaluemajorgridlineopacity_(0)
  , tschchartaxisvalueminorgridlineopacity_(0)
  , tschchartaxisvalueshowminimumlabel_(false)
  , tschchartaxisvalueshowaxis_(false)
  , tschchartaxiscategoryshowmajorgridlines_(false)
  , tschchartaxiscategoryshowminorgridlines_(false)
  , tschchartaxiscategorytickmarklocation_(0)
  , tschchartaxiscategorylabelsorientation_(0)
  , tschchartaxiscategoryhorizontalspacing_(0)
  , tschchartaxiscategoryverticalspacing_(0)
  , tschchartaxiscategoryshowmajortickmarks_(false)
  , tschchartaxiscategoryshowminortickmarks_(false)
  , tschchartaxiscategoryshowlastlabel_(false)
  , tschchartaxiscategoryshowaxis_(false)
  , tschchartaxiscategorymajorgridlineopacity_(0)
  , tschchartaxiscategoryminorgridlineopacity_(0)
  , tschchartaxisdefaultlabelsorientation_(0)
  , tschchartaxisdefaulttitleparagraphstyleindex_(0)
  , tschchartaxisdefaultlabelparagraphstyleindex_(0)
  , tschchartaxisvaluetitleparagraphstyleindex_(0)
  , tschchartaxisvaluelabelparagraphstyleindex_(0)
  , tschchartaxiscategorytitleparagraphstyleindex_(0)
  , tschchartaxiscategorylabelparagraphstyleindex_(0)
  , tschchartaxisvalue3dgridlineopacity_(0)
  , tschchartaxiscategory3dgridlineopacity_(0){}
struct ChartAxisStyleArchiveDefaultTypeInternal {
  constexpr ChartAxisStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartAxisStyleArchiveDefaultTypeInternal() {}
  union {
    ChartAxisStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartAxisStyleArchiveDefaultTypeInternal _ChartAxisStyleArchive_default_instance_;
constexpr ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartaxisvaluetitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tschchartaxiscategorytitle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , tschchartaxisdefaultusermin_(nullptr)
  , tschchartaxisdefaultusermax_(nullptr)
  , tschchartaxisdefaultnumberformat_(nullptr)
  , tschchartaxisvaluenumberofminorgridlines_(0)
  , tschchartaxisvaluescale_(0)
  , tschchartaxisvaluenumberofdecades_(0)
  , tschchartaxisvaluenumberofmajorgridlines_(0)
  , tschchartaxisdefaultshowlabels_(false)
  , tschchartaxisvalueshowlabels_(false)
  , tschchartaxisvalueshowtitle_(false)
  , tschchartaxiscategoryshowlabels_(false)
  , tschchartaxiscategoryshowserieslabels_(false)
  , tschchartaxiscategoryshowtitle_(false)
  , tschchartaxiscategoryplottoedges_(false)
  , tschchartaxisdefaultnumberformattype_(0)
  , tschchartaxisdefault3dlabelposition_(0){}
struct ChartAxisNonStyleArchiveDefaultTypeInternal {
  constexpr ChartAxisNonStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartAxisNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartAxisNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartAxisNonStyleArchiveDefaultTypeInternal _ChartAxisNonStyleArchive_default_instance_;
constexpr ChartSeriesStyleArchive::ChartSeriesStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , tschchartseriesbarfill_(nullptr)
  , tschchartseriesbarstroke_(nullptr)
  , tschchartserieslinestroke_(nullptr)
  , tschchartserieslinesymbolfill_(nullptr)
  , tschchartserieslinesymbolstroke_(nullptr)
  , tschchartseriesareafill_(nullptr)
  , tschchartseriesareastroke_(nullptr)
  , tschchartseriesareasymbolfill_(nullptr)
  , tschchartseriesareasymbolstroke_(nullptr)
  , tschchartseriespiefill_(nullptr)
  , tschchartseriespiestroke_(nullptr)
  , tschchartseriesscatterstroke_(nullptr)
  , tschchartseriesscattersymbolfill_(nullptr)
  , tschchartseriesscattersymbolstroke_(nullptr)
  , tschchartseriesdefaultfill_(nullptr)
  , tschchartseriescolumnfill_(nullptr)
  , tschchartseriespieshadow_(nullptr)
  , tschchartseriesbarshadow_(nullptr)
  , tschchartseriesareashadow_(nullptr)
  , tschchartseriesscattershadow_(nullptr)
  , tschchartseriesmixedlineshadow_(nullptr)
  , tschchartseriesmixedareashadow_(nullptr)
  , tschchartseriesmixedcolumnshadow_(nullptr)
  , tschchartserieslineshadow_(nullptr)
  , tschchartseriesdefaultshadow_(nullptr)
  , tschchartseriesmixedcolumnfill_(nullptr)
  , tschchartseriesmixedareafill_(nullptr)
  , tschchartseriesmixedcolumnstroke_(nullptr)
  , tschchartseriesmixedlinestroke_(nullptr)
  , tschchartseriesmixedareastroke_(nullptr)
  , tschchartseriesmixedlinesymbolfill_(nullptr)
  , tschchartseriesmixedareasymbolfill_(nullptr)
  , tschchartseriesmixedlinesymbolstroke_(nullptr)
  , tschchartseriesmixedareasymbolstroke_(nullptr)
  , tschchartseriesdefaulttrendlinestroke_(nullptr)
  , tschchartseriesdefaulttrendlineshadow_(nullptr)
  , tschchartseriesdefaulterrorbarshadow_(nullptr)
  , tschchartseriesdefaulterrorbarstroke_(nullptr)
  , tschchartseriesdefaulterrorbarstrokescatterx_(nullptr)
  , tschchartseriesdefaulterrorbarlineend_(nullptr)
  , tschchartseriesdefaulterrorbarlineendscatterx_(nullptr)
  , tschchartseriesbubblesymbolfill_(nullptr)
  , tschchartseriesbubblestroke_(nullptr)
  , tschchartseriesbubblesymbolstroke_(nullptr)
  , tschchartseriesbubbleshadow_(nullptr)
  , tschchartseriesdefaultdeprecated3dfill_(nullptr)
  , tschchartseriesbardeprecated3dfill_(nullptr)
  , tschchartseriescolumndeprecated3dfill_(nullptr)
  , tschchartserieslinedeprecated3dfill_(nullptr)
  , tschchartseriesareadeprecated3dfill_(nullptr)
  , tschchartseriespiedeprecated3dfill_(nullptr)
  , tschchartseries3dbarshadow_(nullptr)
  , tschchartseries3dcolumnshadow_(nullptr)
  , tschchartseries3dlineshadow_(nullptr)
  , tschchartseries3dareashadow_(nullptr)
  , tschchartseries3dpieshadow_(nullptr)
  , tschchartseries3dbarfill_(nullptr)
  , tschchartseries3dcolumnfill_(nullptr)
  , tschchartseries3dlinefill_(nullptr)
  , tschchartseries3dareafill_(nullptr)
  , tschchartseries3dpiefill_(nullptr)
  , tschchartseriesbarvaluelabelposition_(0)
  , tschchartserieslinesymbolsize_(0)
  , tschchartserieslinevaluelabelposition_(0)
  , tschchartseriesareavaluelabelposition_(0)
  , tschchartseriesareasymbolsize_(0)
  , tschchartseriesscattersymbolsize_(0)
  , tschchartseriesscattervaluelabelposition_(0)
  , tschchartseriesdefaultvaluelabelposition_(0)
  , tschchartseriesbubblevaluelabelposition_(0)
  , tschchartseriesdefaultlabelparagraphstyleindex_(0)
  , tschchartseriesbarlabelparagraphstyleindex_(0)
  , tschchartserieslinelabelparagraphstyleindex_(0)
  , tschchartseriesarealabelparagraphstyleindex_(0)
  , tschchartseriespielabelparagraphstyleindex_(0)
  , tschchartseriesmixedlabelparagraphstyleindex_(0)
  , tschchartseriesdefaultopacity_(0)
  , tschchartseriesscattersymbolfilluseseriesstroke_(false)
  , tschchartseriesmixedlinesymbolfilluseseriesstroke_(false)
  , tschchartseriesmixedareasymbolfilluseseriesstroke_(false)
  , tschchartserieslinesymbolfilluseseriesfill_(false)
  , tschchartseriesareasymbolfilluseseriesfill_(false)
  , tschchartseriesmixedlinesymbolfilluseseriesfill_(false)
  , tschchartseriesmixedareasymbolfilluseseriesfill_(false)
  , tschchartseriespiedeprecatedserieslabelson_(false)
  , tschchartseriesbubblesymbolfilluseseriesstroke_(false)
  , tschchartserieslinesymbolfilluseseriesstroke_(false)
  , tschchartseriesareasymbolfilluseseriesstroke_(false)
  , tschchartseriesmixedlinesymbolsize_(0)
  , tschchartseriesmixedareasymbolsize_(0)
  , tschchartseriesmixedcolumnvaluelabelposition_(0)
  , tschchartseriesmixedlinevaluelabelposition_(0)
  , tschchartseriesmixedareavaluelabelposition_(0)
  , tschchartseriesdefaultoutsidelabelparagraphstyleindex_(0)
  , tschchartseriesbaroutsidelabelparagraphstyleindex_(0)
  , tschchartseriesareaoutsidelabelparagraphstyleindex_(0)
  , tschchartseriespieoutsidelabelparagraphstyleindex_(0)
  , tschchartseriesmixedoutsidelabelparagraphstyleindex_(0)
  , tschchartseriesstackedbarvaluelabelposition_(0)
  , tschchartseriesstackedareavaluelabelposition_(0)
  , tschchartseriesdefaulttrendlineequationparagraphstyleindex_(0)
  , tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_(0)
  , tschchartseriesdefaulttrendlineequationopacity_(0)
  , tschchartseriesdefaulttrendlinersquaredopacity_(0){}
struct ChartSeriesStyleArchiveDefaultTypeInternal {
  constexpr ChartSeriesStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSeriesStyleArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSeriesStyleArchiveDefaultTypeInternal _ChartSeriesStyleArchive_default_instance_;
constexpr ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tschchartseriesdefaulttrendlinelabelstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , tschchartseriesdefaultnumberformat_(nullptr)
  , tschchartseriespienumberformat_(nullptr)
  , tschchartseriesstackedpercentnumberformat_(nullptr)
  , tschchartseriesdefaulterrorbarcustompositivedata_(nullptr)
  , tschchartseriesdefaulterrorbarcustompositivedatascatterx_(nullptr)
  , tschchartseriesdefaulterrorbarcustomnegativedata_(nullptr)
  , tschchartseriesdefaulterrorbarcustomnegativedatascatterx_(nullptr)
  , tschchartseriesdefaultnumberformattype_(0)
  , tschchartserieslinesymboltype_(0)
  , tschchartseriesbarshowvaluelabels_(false)
  , tschchartserieslineshowsymbol_(false)
  , tschchartserieslineshowvaluelabels_(false)
  , tschchartseriesareashowvaluelabels_(false)
  , tschchartserieslinelinetype_(0)
  , tschchartseriesareasymboltype_(0)
  , tschchartseriesareashowsymbol_(false)
  , tschchartseriespieshowvaluelabels_(false)
  , tschchartseriesscattershowvaluelabels_(false)
  , tschchartseriesdefaultshowvaluelabels_(false)
  , tschchartseriespiewedgeexplosion_(0)
  , tschchartseriespienumberformattype_(0)
  , tschchartseriespielabelexplosion_(0)
  , tschchartseriesmixedlinesymboltype_(0)
  , tschchartseriesmixedareasymboltype_(0)
  , tschchartseriesmixedlineshowsymbol_(false)
  , tschchartseriesmixedareashowsymbol_(false)
  , tschchartseriesmixedshowvaluelabels_(false)
  , tschchartseriespieshowserieslabels_(false)
  , tschchartseriesmixedlinelinetype_(0)
  , tschchartseriesdefaultyaxisordinal_(0)
  , tschchartseriesscattersymboltype_(0)
  , tschchartseriesscatterlinetype_(0)
  , tschchartseriesscattershowsymbol_(false)
  , tschchartseriesscattershowline_(false)
  , tschchartseriesdefaulttrendlineshowlabel_(false)
  , tschchartseriesdefaulttrendlineshowequation_(false)
  , tschchartseriesdefaultseriestype_(0)
  , tschchartseriesdefaulttrendlinetype_(0)
  , tschchartseriesdefaulttrendlineorder_(0)
  , tschchartseriesdefaulttrendlineperiod_(0)
  , tschchartseriesdefaulterrorbarsetting_(0)
  , tschchartseriesdefaulterrorbarsettingscatterx_(0)
  , tschchartseriesdefaulterrorbartype_(0)
  , tschchartseriesdefaulterrorbartypescatterx_(0)
  , tschchartseriesdefaulterrorbarfixedvalue_(0)
  , tschchartseriesdefaulterrorbarfixedvaluescatterx_(0)
  , tschchartseriesdefaulterrorbarpercentvalue_(0)
  , tschchartseriesdefaulterrorbarpercentvaluescatterx_(0)
  , tschchartseriesdefaulterrorbarstddevvalue_(0)
  , tschchartseriesdefaulterrorbarstddevvaluescatterx_(0)
  , tschchartseriesdefaulttrendlineshowr2value_(false)
  , tschchartseriesdefaultshowtrendline_(false)
  , tschchartseriesdefaultshowerrorbar_(false)
  , tschchartseriesdefaultshowerrorbarscatterx_(false)
  , tschchartseriesdefaulttrendlineequationoffsetx_(0)
  , tschchartseriesdefaulttrendlineequationoffsety_(0)
  , tschchartseriesdefaulttrendlinersquaredoffsetx_(0)
  , tschchartseriesdefaulttrendlinersquaredoffsety_(0)
  , tschchartseriesbubblesizedimension_(0)
  , tschchartseriesbubblelinetype_(0)
  , tschchartseriesbubbleshowvaluelabels_(false)
  , tschchartseriesbubbleshownegativedata_(false)
  , tschchartseriesbubbleadjustmentscale_(0){}
struct ChartSeriesNonStyleArchiveDefaultTypeInternal {
  constexpr ChartSeriesNonStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChartSeriesNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChartSeriesNonStyleArchiveDefaultTypeInternal _ChartSeriesNonStyleArchive_default_instance_;
}  // namespace PreUFF
}  // namespace TSCH
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSCHPreUFFArchives_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TSCHPreUFFArchives_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSCHPreUFFArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSCHPreUFFArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, chart_model_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, chart_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, legend_model_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, inner_chart_frame_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, value_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, category_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, value_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, category_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, series_theme_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, series_private_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, series_non_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, mediator_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, cde_preview_origin_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, chart_style_preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, last_row_sected_in_the_cde_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, last_column_sected_in_the_cde_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, chart_style_preset_index_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, needs_calc_engine_deferred_import_action_),
  0,
  1,
  2,
  11,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, frame_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, non_style_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, grid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, series_types_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, scatter_format_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, inline_grid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, multidataset_index_),
  0,
  1,
  ~0u,
  3,
  2,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive_ValueRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive_ValueRow, value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, direction_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, row_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, column_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, value_row_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, dirty_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, value_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, format_string_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, decimal_places_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, currency_code_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, negative_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, show_thousands_separator_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, fraction_accuracy_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, suffix_string_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, base_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, base_places_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, base_use_minus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, use_accounting_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, is_custom_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, scale_factor_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, interstitial_strings_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, interstitial_string_insertion_indexes_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, index_from_right_of_last_digit_placeholder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, is_text_format_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, minimum_integer_width_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, decimal_width_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, number_of_non_space_integer_placeholder_digits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, number_of_non_space_decimal_placeholder_digits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, format_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, prefix_string_),
  6,
  0,
  7,
  1,
  8,
  12,
  9,
  2,
  10,
  11,
  13,
  14,
  15,
  17,
  ~0u,
  5,
  16,
  18,
  19,
  20,
  21,
  22,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultbackgroundstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultgridbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultintersetgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultinterbargap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultshowborder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultborderstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaulttitlecolor_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultgridbackgroundopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultcombinelayers_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultbordershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultborderopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaulttitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultdeprecatedmainfontfamily_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultdeprecatedmainfontnamedsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlineequationshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlinersquaredshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlineequationopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultdeprecatedtrendlinersquaredopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfobardeprecated3dshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfocolumndeprecated3dshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfolinedeprecated3dshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfoareadeprecated3dshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfopiedeprecated3dshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefault3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfocolumn3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfobar3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfoline3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfoarea3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfopie3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultdeprecated3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfopiedeprecated3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfobardeprecated3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfocolumndeprecated3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefaultdeprecated3dbarshape_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, tschchartinfodefault3dchartopacity_),
  1,
  2,
  3,
  4,
  21,
  22,
  31,
  5,
  6,
  23,
  32,
  7,
  24,
  25,
  0,
  26,
  27,
  28,
  8,
  9,
  29,
  30,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  33,
  34,
  35,
  36,
  37,
  38,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefaulttitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefaultshowlegend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefaultpiestartangle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefaultshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefaultdeprecatedagainmainfontnamedsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefault3drotation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefault3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfocolumn3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfobar3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfoline3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfoarea3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfopie3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefault3dviewport_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefaultdeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfocolumndeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfobardeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfolinedeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfoareadeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfopiedeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefaultskiphiddendata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefault3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefault3dbarshape_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, tschchartinfodefault3dintersetdepthgap_),
  1,
  0,
  19,
  16,
  20,
  17,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  21,
  22,
  18,
  23,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, tschlegendmodeldefaultfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, tschlegendmodeldefaultstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, tschlegendmodeldefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, tschlegendmodeldefaultopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, tschlegendmodeldefaultlabelparagraphstyleindex_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendNonStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendNonStyleArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvalueshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvalueshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvaluemajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvalueminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvaluetickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvalueshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvalueshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvaluelabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvalueshowminimumlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvaluemajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvalueminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvaluemajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvalueminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvalueshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategoryshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategoryshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategorymajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategoryminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategorytickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategoryshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategoryshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategorylabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategoryhorizontalspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategoryverticalspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategoryshowlastlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategorymajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategoryminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategorymajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategoryminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategoryshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisdefaultlabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisdefaulttitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisdefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvaluetitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvaluelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategorytitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategorylabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvalue3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategory3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxisvalue3dgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, tschchartaxiscategory3dgridlineopacity_),
  0,
  11,
  12,
  1,
  2,
  15,
  13,
  14,
  16,
  19,
  3,
  4,
  17,
  18,
  20,
  21,
  22,
  5,
  6,
  23,
  27,
  28,
  24,
  25,
  26,
  29,
  7,
  8,
  31,
  32,
  30,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  9,
  10,
  40,
  41,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisdefaultusermin_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisdefaultusermax_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisdefaultnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisdefaultshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisvaluenumberofminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisvaluescale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisvaluenumberofdecades_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisvalueshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisvalueshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisvaluenumberofmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisvaluetitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxiscategoryshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxiscategoryshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxiscategoryshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxiscategorytitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisdefaultnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxisdefault3dlabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, tschchartaxiscategoryplottoedges_),
  2,
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  11,
  12,
  9,
  0,
  13,
  14,
  15,
  1,
  17,
  18,
  16,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineequationparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineequationopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinersquaredopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbarfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbarvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartserieslinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartserieslinesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartserieslinesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartserieslinesymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartserieslinevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesareastroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesareasymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesareasymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesareasymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriespiefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriespiestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesscatterstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesscattersymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesscattersymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesscattersymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesscattervaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaultfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaultvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriespiedeprecatedserieslabelson_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriescolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriespieshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesscattershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedcolumnshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartserieslineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbubblesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbubblestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbubblesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbubblevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbubbleshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbubblesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseries3dbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseries3dcolumnshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseries3dlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseries3dareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseries3dpieshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbarlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartserieslinelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesarealabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriespielabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaultopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartserieslinesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesareasymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesscattersymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartserieslinesymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesareasymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedcolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedcolumnstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedareastroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedareasymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedareasymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedcolumnvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedlinevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaultoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbaroutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesareaoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriespieoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesmixedoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesstackedbarvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesstackedareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarstrokescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarlineendscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesdefaultdeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesbardeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriescolumndeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartserieslinedeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriesareadeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseriespiedeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseries3dbarfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseries3dcolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseries3dlinefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseries3dareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, tschchartseries3dpiefill_),
  0,
  101,
  102,
  103,
  104,
  1,
  2,
  62,
  3,
  4,
  5,
  63,
  64,
  6,
  7,
  65,
  8,
  9,
  66,
  10,
  11,
  12,
  13,
  14,
  67,
  68,
  15,
  69,
  85,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  42,
  43,
  44,
  70,
  45,
  86,
  52,
  53,
  54,
  55,
  56,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  87,
  88,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  26,
  27,
  28,
  29,
  30,
  89,
  90,
  31,
  32,
  33,
  34,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  46,
  47,
  48,
  49,
  50,
  51,
  57,
  58,
  59,
  60,
  61,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaultnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaultnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesbarshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartserieslinesymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartserieslineshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartserieslineshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesareashowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartserieslinelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesareasymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesareashowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriespieshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesscattershowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriespiewedgeexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaultshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriespienumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriespienumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriespielabelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesmixedlineshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesmixedareashowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesmixedlinesymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesmixedareasymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesmixedshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesmixedlinelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaultyaxisordinal_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriespieshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesscattershowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesscattersymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesscatterlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesscattershowline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesstackedpercentnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaultseriestype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineorder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineperiod_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinelabelstring_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowequation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowr2value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarsetting_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarsettingscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbartype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbartypescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarfixedvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarfixedvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarpercentvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarpercentvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarstddevvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarstddevvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustompositivedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustompositivedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustomnegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustomnegativedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineequationoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineequationoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinersquaredoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinersquaredoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaultshowtrendline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaultshowerrorbar_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesdefaultshowerrorbarscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesbubblesizedimension_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesbubbleshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesbubblelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesbubbleshownegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, tschchartseriesbubbleadjustmentscale_),
  1,
  2,
  9,
  11,
  10,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  21,
  20,
  3,
  22,
  23,
  26,
  27,
  24,
  25,
  28,
  30,
  31,
  29,
  34,
  32,
  33,
  35,
  4,
  38,
  39,
  40,
  41,
  36,
  0,
  37,
  52,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  5,
  6,
  7,
  8,
  56,
  57,
  58,
  59,
  53,
  54,
  55,
  60,
  62,
  61,
  63,
  64,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, sizeof(::TSCH::PreUFF::ChartInfoArchive)},
  { 49, 58, sizeof(::TSCH::PreUFF::LegendModelArchive)},
  { 62, 73, sizeof(::TSCH::PreUFF::ChartModelArchive)},
  { 79, -1, sizeof(::TSCH::PreUFF::ChartGridArchive_ValueRow)},
  { 85, 95, sizeof(::TSCH::PreUFF::ChartGridArchive)},
  { 100, 129, sizeof(::TSCH::PreUFF::ChartsNumberFormatArchive)},
  { 153, 197, sizeof(::TSCH::PreUFF::ChartStyleArchive)},
  { 236, 265, sizeof(::TSCH::PreUFF::ChartNonStyleArchive)},
  { 289, 300, sizeof(::TSCH::PreUFF::LegendStyleArchive)},
  { 306, 312, sizeof(::TSCH::PreUFF::LegendNonStyleArchive)},
  { 313, 360, sizeof(::TSCH::PreUFF::ChartAxisStyleArchive)},
  { 402, 426, sizeof(::TSCH::PreUFF::ChartAxisNonStyleArchive)},
  { 445, 555, sizeof(::TSCH::PreUFF::ChartSeriesStyleArchive)},
  { 660, 730, sizeof(::TSCH::PreUFF::ChartSeriesNonStyleArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_ChartInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_LegendModelArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_ChartModelArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_ChartGridArchive_ValueRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_ChartGridArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_ChartsNumberFormatArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_ChartStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_ChartNonStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_LegendStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_LegendNonStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_ChartAxisStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_ChartAxisNonStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_ChartSeriesStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCH::PreUFF::_ChartSeriesNonStyleArchive_default_instance_),
};

const char descriptor_table_protodef_TSCHPreUFFArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030TSCHPreUFFArchives.proto\022\013TSCH.PreUFF\032"
  "\021TSPMessages.proto\032\021TSKArchives.proto\032\021T"
  "SDArchives.proto\032\021TSSArchives.proto\032\031TSC"
  "HArchives.Common.proto\032\024TSCH3DArchives.p"
  "roto\"\314\007\n\020ChartInfoArchive\022#\n\005super\030\001 \002(\013"
  "2\024.TSD.DrawableArchive\0223\n\013chart_model\030\002 "
  "\002(\0132\036.TSCH.PreUFF.ChartModelArchive\022\035\n\005s"
  "tyle\030\003 \001(\0132\016.TSP.Reference\022#\n\nchart_type"
  "\030\004 \002(\0162\017.TSCH.ChartType\0225\n\014legend_model\030"
  "\005 \001(\0132\037.TSCH.PreUFF.LegendModelArchive\022,"
  "\n\021inner_chart_frame\030\006 \002(\0132\021.TSCH.RectArc"
  "hive\022)\n\021value_axis_styles\030\007 \003(\0132\016.TSP.Re"
  "ference\022,\n\024category_axis_styles\030\010 \003(\0132\016."
  "TSP.Reference\022,\n\024value_axis_nonstyles\030\t "
  "\003(\0132\016.TSP.Reference\022/\n\027category_axis_non"
  "styles\030\n \003(\0132\016.TSP.Reference\022+\n\023series_t"
  "heme_styles\030\013 \003(\0132\016.TSP.Reference\0228\n\025ser"
  "ies_private_styles\030\014 \001(\0132\031.TSP.SparseRef"
  "erenceArray\0224\n\021series_non_styles\030\r \001(\0132\031"
  ".TSP.SparseReferenceArray\022!\n\tnon_style\030\016"
  " \001(\0132\016.TSP.Reference\022 \n\010mediator\030\017 \001(\0132\016"
  ".TSP.Reference\022&\n\022cde_preview_origin\030\020 \001"
  "(\0132\n.TSP.Point\022*\n\022chart_style_preset\030\021 \001"
  "(\0132\016.TSP.Reference\022(\n\020paragraph_styles\030\022"
  " \003(\0132\016.TSP.Reference\022\"\n\032last_row_sected_"
  "in_the_cde\030\023 \001(\005\022%\n\035last_column_sected_i"
  "n_the_cde\030\024 \001(\005\022 \n\030chart_style_preset_in"
  "dex\030\025 \001(\005\0220\n(needs_calc_engine_deferred_"
  "import_action\030\026 \001(\010\"\226\001\n\022LegendModelArchi"
  "ve\022\034\n\004info\030\001 \001(\0132\016.TSP.Reference\022 \n\005fram"
  "e\030\002 \002(\0132\021.TSCH.RectArchive\022\035\n\005style\030\003 \002("
  "\0132\016.TSP.Reference\022!\n\tnon_style\030\004 \002(\0132\016.T"
  "SP.Reference\"\315\001\n\021ChartModelArchive\022\034\n\004in"
  "fo\030\001 \001(\0132\016.TSP.Reference\022\034\n\004grid\030\002 \002(\0132\016"
  ".TSP.Reference\022\024\n\014series_types\030\003 \003(\r\022\026\n\016"
  "scatter_format\030\004 \001(\r\0222\n\013inline_grid\030\005 \001("
  "\0132\035.TSCH.PreUFF.ChartGridArchive\022\032\n\022mult"
  "idataset_index\030\006 \001(\r\"\261\001\n\020ChartGridArchiv"
  "e\022\021\n\tdirection\030\001 \002(\005\022\020\n\010row_name\030\002 \003(\t\022\023"
  "\n\013column_name\030\003 \003(\t\0229\n\tvalue_row\030\004 \003(\0132&"
  ".TSCH.PreUFF.ChartGridArchive.ValueRow\022\r"
  "\n\005dirty\030\006 \002(\010\032\031\n\010ValueRow\022\r\n\005value\030\001 \003(\001"
  "\"\254\006\n\031ChartsNumberFormatArchive\022)\n\nvalue_"
  "type\030\001 \002(\0162\025.TSCH.NumberValueType\022\025\n\rfor"
  "mat_string\030\002 \001(\t\022\026\n\016decimal_places\030\003 \002(\r"
  "\022\025\n\rcurrency_code\030\004 \001(\t\0221\n\016negative_styl"
  "e\030\005 \002(\0162\031.TSCH.NegativeNumberStyle\022 \n\030sh"
  "ow_thousands_separator\030\006 \002(\010\0221\n\021fraction"
  "_accuracy\030\007 \002(\0162\026.TSCH.FractionAccuracy\022"
  "\025\n\rsuffix_string\030\010 \001(\t\022\014\n\004base\030\t \002(\r\022\023\n\013"
  "base_places\030\n \002(\r\022\033\n\023base_use_minus_sign"
  "\030\013 \002(\010\022\034\n\024use_accounting_style\030\014 \002(\010\022\021\n\t"
  "is_custom\030\r \002(\010\022\024\n\014scale_factor\030\016 \002(\001\022\034\n"
  "\024interstitial_strings\030\017 \003(\t\022<\n%interstit"
  "ial_string_insertion_indexes\030\020 \002(\0132\r.TSP"
  ".IndexSet\0222\n*index_from_right_of_last_di"
  "git_placeholder\030\021 \002(\r\022\026\n\016is_text_format\030"
  "\022 \002(\010\022\035\n\025minimum_integer_width\030\023 \002(\r\022\025\n\r"
  "decimal_width\030\024 \002(\r\0226\n.number_of_non_spa"
  "ce_integer_placeholder_digits\030\025 \002(\r\0226\n.n"
  "umber_of_non_space_decimal_placeholder_d"
  "igits\030\026 \002(\r\022\023\n\013format_name\030\027 \001(\t\022\025\n\rpref"
  "ix_string\030\030 \001(\t\"\361\022\n\021ChartStyleArchive\022 \n"
  "\005super\030\001 \002(\0132\021.TSS.StyleArchive\022<\n\"tschc"
  "hartinfodefaultbackgroundfill\030\n \001(\0132\020.TS"
  "D.FillArchive\022@\n$tschchartinfodefaultbac"
  "kgroundstroke\030\013 \001(\0132\022.TSD.StrokeArchive\022"
  "@\n&tschchartinfodefaultgridbackgroundfil"
  "l\030\014 \001(\0132\020.TSD.FillArchive\022\'\n\037tschchartin"
  "fodefaultintersetgap\030\r \001(\002\022\'\n\037tschcharti"
  "nfodefaultinterbargap\030\016 \001(\002\022&\n\036tschchart"
  "infodefaultshowborder\030\017 \001(\010\022<\n tschchart"
  "infodefaultborderstroke\030\020 \001(\0132\022.TSD.Stro"
  "keArchive\0222\n\036tschchartinfodefaulttitleco"
  "lor\030\022 \001(\0132\n.TSP.Color\0221\n)tschchartinfode"
  "faultgridbackgroundopacity\030\023 \001(\002\022)\n!tsch"
  "chartinfodefaultcombinelayers\030\024 \001(\010\022<\n t"
  "schchartinfodefaultbordershadow\030\025 \001(\0132\022."
  "TSD.ShadowArchive\022)\n!tschchartinfodefaul"
  "tborderopacity\030\026 \001(\002\0224\n,tschchartinfodef"
  "aulttitleparagraphstyleindex\030\027 \001(\005\0224\n,ts"
  "chchartinfodefaultdeprecatedmainfontfami"
  "ly\030\030 \001(\t\0227\n/tschchartinfodefaultdeprecat"
  "edmainfontnamedsize\030\031 \001(\005\022J\nBtschchartin"
  "fodefaultdeprecatedtrendlineequationpara"
  "graphstyleindex\030\036 \001(\005\022J\nBtschchartinfode"
  "faultdeprecatedtrendlinersquaredparagrap"
  "hstyleindex\030\037 \001(\005\022Q\n5tschchartinfodefaul"
  "tdeprecatedtrendlineequationshadow\030  \001(\013"
  "2\022.TSD.ShadowArchive\022Q\n5tschchartinfodef"
  "aultdeprecatedtrendlinersquaredshadow\030! "
  "\001(\0132\022.TSD.ShadowArchive\022>\n6tschchartinfo"
  "defaultdeprecatedtrendlineequationopacit"
  "y\030\" \001(\002\022>\n6tschchartinfodefaultdeprecate"
  "dtrendlinersquaredopacity\030# \001(\002\022\?\n\"tschc"
  "hartinfobardeprecated3dshadow\030\264\002 \001(\0132\022.T"
  "SD.ShadowArchive\022B\n%tschchartinfocolumnd"
  "eprecated3dshadow\030\265\002 \001(\0132\022.TSD.ShadowArc"
  "hive\022@\n#tschchartinfolinedeprecated3dsha"
  "dow\030\266\002 \001(\0132\022.TSD.ShadowArchive\022@\n#tschch"
  "artinfoareadeprecated3dshadow\030\267\002 \001(\0132\022.T"
  "SD.ShadowArchive\022\?\n\"tschchartinfopiedepr"
  "ecated3dshadow\030\270\002 \001(\0132\022.TSD.ShadowArchiv"
  "e\022S\n%tschchartinfodefault3dlightingpacka"
  "ge\030\271\002 \001(\0132#.TSCH.Chart3DLightingPackageA"
  "rchive\022R\n$tschchartinfocolumn3dlightingp"
  "ackage\030\272\002 \001(\0132#.TSCH.Chart3DLightingPack"
  "ageArchive\022O\n!tschchartinfobar3dlighting"
  "package\030\273\002 \001(\0132#.TSCH.Chart3DLightingPac"
  "kageArchive\022P\n\"tschchartinfoline3dlighti"
  "ngpackage\030\274\002 \001(\0132#.TSCH.Chart3DLightingP"
  "ackageArchive\022P\n\"tschchartinfoarea3dligh"
  "tingpackage\030\275\002 \001(\0132#.TSCH.Chart3DLightin"
  "gPackageArchive\022O\n!tschchartinfopie3dlig"
  "htingpackage\030\276\002 \001(\0132#.TSCH.Chart3DLighti"
  "ngPackageArchive\0223\n*tschchartinfodefault"
  "deprecated3dbeveledges\030\306\002 \001(\010\022/\n&tschcha"
  "rtinfopiedeprecated3dbeveledges\030\307\002 \001(\010\022/"
  "\n&tschchartinfobardeprecated3dbeveledges"
  "\030\310\002 \001(\010\0222\n)tschchartinfocolumndeprecated"
  "3dbeveledges\030\311\002 \001(\010\0221\n(tschchartinfodefa"
  "ultdeprecated3dbarshape\030\312\002 \001(\005\022+\n\"tschch"
  "artinfodefault3dchartopacity\030\317\002 \001(\002\"\367\013\n\024"
  "ChartNonStyleArchive\022 \n\005super\030\001 \002(\0132\021.TS"
  "S.StyleArchive\022!\n\031tschchartinfodefaultti"
  "tle\030\n \001(\t\022&\n\036tschchartinfodefaultshowleg"
  "end\030\013 \001(\010\022)\n!tschchartinfodefaultpiestar"
  "tangle\030\014 \001(\002\022%\n\035tschchartinfodefaultshow"
  "title\030\r \001(\010\022<\n4tschchartinfodefaultdepre"
  "catedagainmainfontnamedsize\030\031 \001(\005\022C\n\036tsc"
  "hchartinfodefault3drotation\030\254\002 \001(\0132\032.TSC"
  "H.Chart3DVectorArchive\022@\n\033tschchartinfod"
  "efault3dscale\030\255\002 \001(\0132\032.TSCH.Chart3DVecto"
  "rArchive\022\?\n\032tschchartinfocolumn3dscale\030\256"
  "\002 \001(\0132\032.TSCH.Chart3DVectorArchive\022<\n\027tsc"
  "hchartinfobar3dscale\030\257\002 \001(\0132\032.TSCH.Chart"
  "3DVectorArchive\022=\n\030tschchartinfoline3dsc"
  "ale\030\260\002 \001(\0132\032.TSCH.Chart3DVectorArchive\022="
  "\n\030tschchartinfoarea3dscale\030\261\002 \001(\0132\032.TSCH"
  ".Chart3DVectorArchive\022<\n\027tschchartinfopi"
  "e3dscale\030\262\002 \001(\0132\032.TSCH.Chart3DVectorArch"
  "ive\022C\n\036tschchartinfodefault3dviewport\030\271\002"
  " \001(\0132\032.TSCH.Chart3DVectorArchive\022]\n/tsch"
  "chartinfodefaultdeprecated3dlightingpack"
  "age\030\300\002 \001(\0132#.TSCH.Chart3DLightingPackage"
  "Archive\022\\\n.tschchartinfocolumndeprecated"
  "3dlightingpackage\030\301\002 \001(\0132#.TSCH.Chart3DL"
  "ightingPackageArchive\022Y\n+tschchartinfoba"
  "rdeprecated3dlightingpackage\030\302\002 \001(\0132#.TS"
  "CH.Chart3DLightingPackageArchive\022Z\n,tsch"
  "chartinfolinedeprecated3dlightingpackage"
  "\030\303\002 \001(\0132#.TSCH.Chart3DLightingPackageArc"
  "hive\022Z\n,tschchartinfoareadeprecated3dlig"
  "htingpackage\030\304\002 \001(\0132#.TSCH.Chart3DLighti"
  "ngPackageArchive\022Y\n+tschchartinfopiedepr"
  "ecated3dlightingpackage\030\305\002 \001(\0132#.TSCH.Ch"
  "art3DLightingPackageArchive\022+\n\"tschchart"
  "infodefaultskiphiddendata\030\306\002 \001(\010\022)\n tsch"
  "chartinfodefault3dbeveledges\030\307\002 \001(\010\022\'\n\036t"
  "schchartinfodefault3dbarshape\030\320\002 \001(\005\022/\n&"
  "tschchartinfodefault3dintersetdepthgap\030\313"
  "\002 \001(\002\"\277\002\n\022LegendStyleArchive\022 \n\005super\030\001 "
  "\002(\0132\021.TSS.StyleArchive\0224\n\032tschlegendmode"
  "ldefaultfill\030\n \001(\0132\020.TSD.FillArchive\0228\n\034"
  "tschlegendmodeldefaultstroke\030\013 \001(\0132\022.TSD"
  ".StrokeArchive\0228\n\034tschlegendmodeldefault"
  "shadow\030\016 \001(\0132\022.TSD.ShadowArchive\022%\n\035tsch"
  "legendmodeldefaultopacity\030\017 \001(\002\0226\n.tschl"
  "egendmodeldefaultlabelparagraphstyleinde"
  "x\030\020 \001(\005\"9\n\025LegendNonStyleArchive\022 \n\005supe"
  "r\030\001 \002(\0132\021.TSS.StyleArchive\"\255\021\n\025ChartAxis"
  "StyleArchive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleA"
  "rchive\022,\n$tschchartaxisvalueshowmajorgri"
  "dlines\030\n \001(\010\022,\n$tschchartaxisvalueshowmi"
  "norgridlines\030\013 \001(\010\022A\n%tschchartaxisvalue"
  "majorgridlinestroke\030\014 \001(\0132\022.TSD.StrokeAr"
  "chive\022A\n%tschchartaxisvalueminorgridline"
  "stroke\030\r \001(\0132\022.TSD.StrokeArchive\022*\n\"tsch"
  "chartaxisvaluetickmarklocation\030\016 \001(\005\022,\n$"
  "tschchartaxisvalueshowmajortickmarks\030\017 \001"
  "(\010\022,\n$tschchartaxisvalueshowminortickmar"
  "ks\030\020 \001(\010\022+\n#tschchartaxisvaluelabelsorie"
  "ntation\030\021 \001(\002\022*\n\"tschchartaxisvalueshowm"
  "inimumlabel\030\022 \001(\010\022A\n%tschchartaxisvaluem"
  "ajorgridlineshadow\030\025 \001(\0132\022.TSD.ShadowArc"
  "hive\022A\n%tschchartaxisvalueminorgridlines"
  "hadow\030\026 \001(\0132\022.TSD.ShadowArchive\022.\n&tschc"
  "hartaxisvaluemajorgridlineopacity\030\027 \001(\002\022"
  ".\n&tschchartaxisvalueminorgridlineopacit"
  "y\030\030 \001(\002\022\"\n\032tschchartaxisvalueshowaxis\030\031 "
  "\001(\010\022/\n\'tschchartaxiscategoryshowmajorgri"
  "dlines\0302 \001(\010\022/\n\'tschchartaxiscategorysho"
  "wminorgridlines\0303 \001(\010\022D\n(tschchartaxisca"
  "tegorymajorgridlinestroke\0304 \001(\0132\022.TSD.St"
  "rokeArchive\022D\n(tschchartaxiscategorymino"
  "rgridlinestroke\0305 \001(\0132\022.TSD.StrokeArchiv"
  "e\022-\n%tschchartaxiscategorytickmarklocati"
  "on\0306 \001(\005\022/\n\'tschchartaxiscategoryshowmaj"
  "ortickmarks\0307 \001(\010\022/\n\'tschchartaxiscatego"
  "ryshowminortickmarks\0308 \001(\010\022.\n&tschcharta"
  "xiscategorylabelsorientation\0309 \001(\002\022.\n&ts"
  "chchartaxiscategoryhorizontalspacing\030: \001"
  "(\005\022,\n$tschchartaxiscategoryverticalspaci"
  "ng\030; \001(\005\022*\n\"tschchartaxiscategoryshowlas"
  "tlabel\030< \001(\010\022D\n(tschchartaxiscategorymaj"
  "orgridlineshadow\030\? \001(\0132\022.TSD.ShadowArchi"
  "ve\022D\n(tschchartaxiscategoryminorgridline"
  "shadow\030@ \001(\0132\022.TSD.ShadowArchive\0221\n)tsch"
  "chartaxiscategorymajorgridlineopacity\030A "
  "\001(\002\0221\n)tschchartaxiscategoryminorgridlin"
  "eopacity\030B \001(\002\022%\n\035tschchartaxiscategorys"
  "howaxis\030C \001(\010\022-\n%tschchartaxisdefaultlab"
  "elsorientation\030f \001(\002\0224\n,tschchartaxisdef"
  "aulttitleparagraphstyleindex\030n \001(\005\0224\n,ts"
  "chchartaxisdefaultlabelparagraphstyleind"
  "ex\030o \001(\005\0222\n*tschchartaxisvaluetitleparag"
  "raphstyleindex\030p \001(\005\0222\n*tschchartaxisval"
  "uelabelparagraphstyleindex\030q \001(\005\0225\n-tsch"
  "chartaxiscategorytitleparagraphstyleinde"
  "x\030r \001(\005\0225\n-tschchartaxiscategorylabelpar"
  "agraphstyleindex\030s \001(\005\022\?\n\"tschchartaxisv"
  "alue3dgridlinestroke\030\313\002 \001(\0132\022.TSD.Stroke"
  "Archive\022B\n%tschchartaxiscategory3dgridli"
  "nestroke\030\314\002 \001(\0132\022.TSD.StrokeArchive\022,\n#t"
  "schchartaxisvalue3dgridlineopacity\030\315\002 \001("
  "\002\022/\n&tschchartaxiscategory3dgridlineopac"
  "ity\030\316\002 \001(\002\"\214\007\n\030ChartAxisNonStyleArchive\022"
  " \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022F\n\033tsc"
  "hchartaxisdefaultusermin\030\013 \001(\0132!.TSCH.Ch"
  "artsNSNumberDoubleArchive\022F\n\033tschchartax"
  "isdefaultusermax\030\014 \001(\0132!.TSCH.ChartsNSNu"
  "mberDoubleArchive\022P\n tschchartaxisdefaul"
  "tnumberformat\030\r \001(\0132&.TSCH.PreUFF.Charts"
  "NumberFormatArchive\022&\n\036tschchartaxisdefa"
  "ultshowlabels\030\016 \001(\010\0220\n(tschchartaxisvalu"
  "enumberofminorgridlines\0302 \001(\005\022\037\n\027tschcha"
  "rtaxisvaluescale\0303 \001(\005\022)\n!tschchartaxisv"
  "aluenumberofdecades\0304 \001(\005\022$\n\034tschchartax"
  "isvalueshowlabels\0305 \001(\010\022#\n\033tschchartaxis"
  "valueshowtitle\0306 \001(\010\0220\n(tschchartaxisval"
  "uenumberofmajorgridlines\0307 \001(\005\022\037\n\027tschch"
  "artaxisvaluetitle\0308 \001(\t\022\'\n\037tschchartaxis"
  "categoryshowlabels\030d \001(\010\022-\n%tschchartaxi"
  "scategoryshowserieslabels\030e \001(\010\022&\n\036tschc"
  "hartaxiscategoryshowtitle\030f \001(\010\022\"\n\032tschc"
  "hartaxiscategorytitle\030g \001(\t\022,\n$tschchart"
  "axisdefaultnumberformattype\030x \001(\005\022,\n#tsc"
  "hchartaxisdefault3dlabelposition\030\320\002 \001(\005\022"
  "(\n tschchartaxiscategoryplottoedges\030t \001("
  "\010\"\342/\n\027ChartSeriesStyleArchive\022 \n\005super\030\001"
  " \002(\0132\021.TSS.StyleArchive\022C\n:tschchartseri"
  "esdefaulttrendlineequationparagraphstyle"
  "index\030\311\001 \001(\005\022C\n:tschchartseriesdefaulttr"
  "endlinersquaredparagraphstyleindex\030\312\001 \001("
  "\005\0227\n.tschchartseriesdefaulttrendlineequa"
  "tionopacity\030\315\001 \001(\002\0227\n.tschchartseriesdef"
  "aulttrendlinersquaredopacity\030\316\001 \001(\002\0220\n\026t"
  "schchartseriesbarfill\030\n \001(\0132\020.TSD.FillAr"
  "chive\0224\n\030tschchartseriesbarstroke\030\013 \001(\0132"
  "\022.TSD.StrokeArchive\022,\n$tschchartseriesba"
  "rvaluelabelposition\030\r \001(\005\0225\n\031tschchartse"
  "rieslinestroke\030\020 \001(\0132\022.TSD.StrokeArchive"
  "\0227\n\035tschchartserieslinesymbolfill\030\021 \001(\0132"
  "\020.TSD.FillArchive\022;\n\037tschchartseriesline"
  "symbolstroke\030\022 \001(\0132\022.TSD.StrokeArchive\022%"
  "\n\035tschchartserieslinesymbolsize\030\024 \001(\002\022-\n"
  "%tschchartserieslinevaluelabelposition\030\026"
  " \001(\005\0221\n\027tschchartseriesareafill\030\031 \001(\0132\020."
  "TSD.FillArchive\0225\n\031tschchartseriesareast"
  "roke\030\032 \001(\0132\022.TSD.StrokeArchive\022-\n%tschch"
  "artseriesareavaluelabelposition\030\034 \001(\005\0227\n"
  "\035tschchartseriesareasymbolfill\030\035 \001(\0132\020.T"
  "SD.FillArchive\022;\n\037tschchartseriesareasym"
  "bolstroke\030\036 \001(\0132\022.TSD.StrokeArchive\022%\n\035t"
  "schchartseriesareasymbolsize\030  \001(\002\0220\n\026ts"
  "chchartseriespiefill\030# \001(\0132\020.TSD.FillArc"
  "hive\0224\n\030tschchartseriespiestroke\030$ \001(\0132\022"
  ".TSD.StrokeArchive\0228\n\034tschchartseriessca"
  "tterstroke\030( \001(\0132\022.TSD.StrokeArchive\022:\n "
  "tschchartseriesscattersymbolfill\030) \001(\0132\020"
  ".TSD.FillArchive\022>\n\"tschchartseriesscatt"
  "ersymbolstroke\030* \001(\0132\022.TSD.StrokeArchive"
  "\022(\n tschchartseriesscattersymbolsize\030, \001"
  "(\002\0220\n(tschchartseriesscattervaluelabelpo"
  "sition\030. \001(\005\0224\n\032tschchartseriesdefaultfi"
  "ll\0302 \001(\0132\020.TSD.FillArchive\0220\n(tschcharts"
  "eriesdefaultvaluelabelposition\0304 \001(\005\0222\n*"
  "tschchartseriespiedeprecatedserieslabels"
  "on\030< \001(\010\0223\n\031tschchartseriescolumnfill\030> "
  "\001(\0132\020.TSD.FillArchive\0224\n\030tschchartseries"
  "pieshadow\030d \001(\0132\022.TSD.ShadowArchive\0224\n\030t"
  "schchartseriesbarshadow\030e \001(\0132\022.TSD.Shad"
  "owArchive\0225\n\031tschchartseriesareashadow\030f"
  " \001(\0132\022.TSD.ShadowArchive\0228\n\034tschchartser"
  "iesscattershadow\030g \001(\0132\022.TSD.ShadowArchi"
  "ve\022:\n\036tschchartseriesmixedlineshadow\030h \001"
  "(\0132\022.TSD.ShadowArchive\022:\n\036tschchartserie"
  "smixedareashadow\030i \001(\0132\022.TSD.ShadowArchi"
  "ve\022<\n tschchartseriesmixedcolumnshadow\030j"
  " \001(\0132\022.TSD.ShadowArchive\0225\n\031tschchartser"
  "ieslineshadow\030k \001(\0132\022.TSD.ShadowArchive\022"
  "8\n\034tschchartseriesdefaultshadow\030l \001(\0132\022."
  "TSD.ShadowArchive\022:\n\037tschchartseriesbubb"
  "lesymbolfill\030\317\001 \001(\0132\020.TSD.FillArchive\0228\n"
  "\033tschchartseriesbubblestroke\030\323\001 \001(\0132\022.TS"
  "D.StrokeArchive\022>\n!tschchartseriesbubble"
  "symbolstroke\030\324\001 \001(\0132\022.TSD.StrokeArchive\022"
  "0\n\'tschchartseriesbubblevaluelabelpositi"
  "on\030\325\001 \001(\005\0228\n\033tschchartseriesbubbleshadow"
  "\030\326\001 \001(\0132\022.TSD.ShadowArchive\0227\n.tschchart"
  "seriesbubblesymbolfilluseseriesstroke\030\327\001"
  " \001(\010\0227\n\032tschchartseries3dbarshadow\030\262\002 \001("
  "\0132\022.TSD.ShadowArchive\022:\n\035tschchartseries"
  "3dcolumnshadow\030\263\002 \001(\0132\022.TSD.ShadowArchiv"
  "e\0228\n\033tschchartseries3dlineshadow\030\264\002 \001(\0132"
  "\022.TSD.ShadowArchive\0228\n\033tschchartseries3d"
  "areashadow\030\265\002 \001(\0132\022.TSD.ShadowArchive\0227\n"
  "\032tschchartseries3dpieshadow\030\266\002 \001(\0132\022.TSD"
  ".ShadowArchive\0226\n.tschchartseriesdefault"
  "labelparagraphstyleindex\030n \001(\005\0222\n*tschch"
  "artseriesbarlabelparagraphstyleindex\030o \001"
  "(\005\0223\n+tschchartserieslinelabelparagraphs"
  "tyleindex\030p \001(\005\0223\n+tschchartseriesareala"
  "belparagraphstyleindex\030q \001(\005\0222\n*tschchar"
  "tseriespielabelparagraphstyleindex\030r \001(\005"
  "\0224\n,tschchartseriesmixedlabelparagraphst"
  "yleindex\030s \001(\005\022%\n\035tschchartseriesdefault"
  "opacity\030t \001(\002\0224\n,tschchartserieslinesymb"
  "olfilluseseriesstroke\030u \001(\010\0224\n,tschchart"
  "seriesareasymbolfilluseseriesstroke\030v \001("
  "\010\0227\n/tschchartseriesscattersymbolfilluse"
  "seriesstroke\030w \001(\010\0229\n1tschchartseriesmix"
  "edlinesymbolfilluseseriesstroke\030x \001(\010\0229\n"
  "1tschchartseriesmixedareasymbolfillusese"
  "riesstroke\030y \001(\010\0222\n*tschchartserieslines"
  "ymbolfilluseseriesfill\030z \001(\010\0222\n*tschchar"
  "tseriesareasymbolfilluseseriesfill\030{ \001(\010"
  "\0227\n/tschchartseriesmixedlinesymbolfillus"
  "eseriesfill\030| \001(\010\0227\n/tschchartseriesmixe"
  "dareasymbolfilluseseriesfill\030} \001(\010\0229\n\036ts"
  "chchartseriesmixedcolumnfill\030\202\001 \001(\0132\020.TS"
  "D.FillArchive\0227\n\034tschchartseriesmixedare"
  "afill\030\203\001 \001(\0132\020.TSD.FillArchive\022=\n tschch"
  "artseriesmixedcolumnstroke\030\204\001 \001(\0132\022.TSD."
  "StrokeArchive\022;\n\036tschchartseriesmixedlin"
  "estroke\030\205\001 \001(\0132\022.TSD.StrokeArchive\022;\n\036ts"
  "chchartseriesmixedareastroke\030\206\001 \001(\0132\022.TS"
  "D.StrokeArchive\022+\n\"tschchartseriesmixedl"
  "inesymbolsize\030\207\001 \001(\002\022+\n\"tschchartseriesm"
  "ixedareasymbolsize\030\210\001 \001(\002\022=\n\"tschchartse"
  "riesmixedlinesymbolfill\030\211\001 \001(\0132\020.TSD.Fil"
  "lArchive\022=\n\"tschchartseriesmixedareasymb"
  "olfill\030\212\001 \001(\0132\020.TSD.FillArchive\022A\n$tschc"
  "hartseriesmixedlinesymbolstroke\030\213\001 \001(\0132\022"
  ".TSD.StrokeArchive\022A\n$tschchartseriesmix"
  "edareasymbolstroke\030\214\001 \001(\0132\022.TSD.StrokeAr"
  "chive\0225\n,tschchartseriesmixedcolumnvalue"
  "labelposition\030\215\001 \001(\005\0223\n*tschchartseriesm"
  "ixedlinevaluelabelposition\030\216\001 \001(\005\0223\n*tsc"
  "hchartseriesmixedareavaluelabelposition\030"
  "\217\001 \001(\005\022>\n5tschchartseriesdefaultoutsidel"
  "abelparagraphstyleindex\030\226\001 \001(\005\022:\n1tschch"
  "artseriesbaroutsidelabelparagraphstylein"
  "dex\030\227\001 \001(\005\022;\n2tschchartseriesareaoutside"
  "labelparagraphstyleindex\030\231\001 \001(\005\022:\n1tschc"
  "hartseriespieoutsidelabelparagraphstylei"
  "ndex\030\232\001 \001(\005\022<\n3tschchartseriesmixedoutsi"
  "delabelparagraphstyleindex\030\233\001 \001(\005\0224\n+tsc"
  "hchartseriesstackedbarvaluelabelposition"
  "\030\234\001 \001(\005\0225\n,tschchartseriesstackedareaval"
  "uelabelposition\030\235\001 \001(\005\022B\n%tschchartserie"
  "sdefaulttrendlinestroke\030\247\001 \001(\0132\022.TSD.Str"
  "okeArchive\022B\n%tschchartseriesdefaulttren"
  "dlineshadow\030\250\001 \001(\0132\022.TSD.ShadowArchive\022A"
  "\n$tschchartseriesdefaulterrorbarshadow\030\264"
  "\001 \001(\0132\022.TSD.ShadowArchive\022A\n$tschchartse"
  "riesdefaulterrorbarstroke\030\265\001 \001(\0132\022.TSD.S"
  "trokeArchive\022I\n,tschchartseriesdefaulter"
  "rorbarstrokescatterx\030\266\001 \001(\0132\022.TSD.Stroke"
  "Archive\022C\n%tschchartseriesdefaulterrorba"
  "rlineend\030\267\001 \001(\0132\023.TSD.LineEndArchive\022K\n-"
  "tschchartseriesdefaulterrorbarlineendsca"
  "tterx\030\270\001 \001(\0132\023.TSD.LineEndArchive\022S\n&tsc"
  "hchartseriesdefaultdeprecated3dfill\030\254\002 \001"
  "(\0132\".TSCH.DEPRECATEDChart3DFillArchive\022O"
  "\n\"tschchartseriesbardeprecated3dfill\030\255\002 "
  "\001(\0132\".TSCH.DEPRECATEDChart3DFillArchive\022"
  "R\n%tschchartseriescolumndeprecated3dfill"
  "\030\256\002 \001(\0132\".TSCH.DEPRECATEDChart3DFillArch"
  "ive\022P\n#tschchartserieslinedeprecated3dfi"
  "ll\030\257\002 \001(\0132\".TSCH.DEPRECATEDChart3DFillAr"
  "chive\022P\n#tschchartseriesareadeprecated3d"
  "fill\030\260\002 \001(\0132\".TSCH.DEPRECATEDChart3DFill"
  "Archive\022O\n\"tschchartseriespiedeprecated3"
  "dfill\030\261\002 \001(\0132\".TSCH.DEPRECATEDChart3DFil"
  "lArchive\0223\n\030tschchartseries3dbarfill\030\300\002 "
  "\001(\0132\020.TSD.FillArchive\0226\n\033tschchartseries"
  "3dcolumnfill\030\301\002 \001(\0132\020.TSD.FillArchive\0224\n"
  "\031tschchartseries3dlinefill\030\302\002 \001(\0132\020.TSD."
  "FillArchive\0224\n\031tschchartseries3dareafill"
  "\030\303\002 \001(\0132\020.TSD.FillArchive\0223\n\030tschchartse"
  "ries3dpiefill\030\304\002 \001(\0132\020.TSD.FillArchive\"\344"
  "\032\n\032ChartSeriesNonStyleArchive\022 \n\005super\030\001"
  " \002(\0132\021.TSS.StyleArchive\022R\n\"tschchartseri"
  "esdefaultnumberformat\030\n \001(\0132&.TSCH.PreUF"
  "F.ChartsNumberFormatArchive\022.\n&tschchart"
  "seriesdefaultnumberformattype\030\013 \001(\005\022)\n!t"
  "schchartseriesbarshowvaluelabels\030\014 \001(\010\022%"
  "\n\035tschchartserieslinesymboltype\030\023 \001(\005\022%\n"
  "\035tschchartserieslineshowsymbol\030\024 \001(\010\022*\n\""
  "tschchartserieslineshowvaluelabels\030\025 \001(\010"
  "\022*\n\"tschchartseriesareashowvaluelabels\030\033"
  " \001(\010\022#\n\033tschchartserieslinelinetype\030\036 \001("
  "\005\022%\n\035tschchartseriesareasymboltype\030\037 \001(\005"
  "\022%\n\035tschchartseriesareashowsymbol\030  \001(\010\022"
  ")\n!tschchartseriespieshowvaluelabels\030% \001"
  "(\010\022-\n%tschchartseriesscattershowvaluelab"
  "els\030- \001(\010\022(\n tschchartseriespiewedgeexpl"
  "osion\0302 \001(\002\022-\n%tschchartseriesdefaultsho"
  "wvaluelabels\0303 \001(\010\022N\n\036tschchartseriespie"
  "numberformat\0304 \001(\0132&.TSCH.PreUFF.ChartsN"
  "umberFormatArchive\022*\n\"tschchartseriespie"
  "numberformattype\0305 \001(\005\022(\n tschchartserie"
  "spielabelexplosion\0306 \001(\002\022*\n\"tschchartser"
  "iesmixedlineshowsymbol\030: \001(\010\022*\n\"tschchar"
  "tseriesmixedareashowsymbol\030; \001(\010\022*\n\"tsch"
  "chartseriesmixedlinesymboltype\030< \001(\005\022*\n\""
  "tschchartseriesmixedareasymboltype\030= \001(\005"
  "\022+\n#tschchartseriesmixedshowvaluelabels\030"
  "> \001(\010\022(\n tschchartseriesmixedlinelinetyp"
  "e\030\? \001(\005\022*\n\"tschchartseriesdefaultyaxisor"
  "dinal\030A \001(\005\022*\n\"tschchartseriespieshowser"
  "ieslabels\030B \001(\010\022(\n tschchartseriesscatte"
  "rshowsymbol\030E \001(\010\022(\n tschchartseriesscat"
  "tersymboltype\030F \001(\005\022&\n\036tschchartseriessc"
  "atterlinetype\030G \001(\005\022&\n\036tschchartseriessc"
  "attershowline\030H \001(\010\022Y\n)tschchartseriesst"
  "ackedpercentnumberformat\030Z \001(\0132&.TSCH.Pr"
  "eUFF.ChartsNumberFormatArchive\022(\n tschch"
  "artseriesdefaultseriestype\030~ \001(\005\022,\n#tsch"
  "chartseriesdefaulttrendlinetype\030\240\001 \001(\005\022-"
  "\n$tschchartseriesdefaulttrendlineorder\030\241"
  "\001 \001(\005\022.\n%tschchartseriesdefaulttrendline"
  "period\030\242\001 \001(\005\0221\n(tschchartseriesdefaultt"
  "rendlineshowlabel\030\243\001 \001(\010\0223\n*tschchartser"
  "iesdefaulttrendlinelabelstring\030\244\001 \001(\t\0224\n"
  "+tschchartseriesdefaulttrendlineshowequa"
  "tion\030\245\001 \001(\010\0223\n*tschchartseriesdefaulttre"
  "ndlineshowr2value\030\246\001 \001(\010\022.\n%tschchartser"
  "iesdefaulterrorbarsetting\030\252\001 \001(\005\0226\n-tsch"
  "chartseriesdefaulterrorbarsettingscatter"
  "x\030\253\001 \001(\005\022+\n\"tschchartseriesdefaulterrorb"
  "artype\030\254\001 \001(\005\0223\n*tschchartseriesdefaulte"
  "rrorbartypescatterx\030\255\001 \001(\005\0221\n(tschcharts"
  "eriesdefaulterrorbarfixedvalue\030\256\001 \001(\002\0229\n"
  "0tschchartseriesdefaulterrorbarfixedvalu"
  "escatterx\030\257\001 \001(\002\0223\n*tschchartseriesdefau"
  "lterrorbarpercentvalue\030\260\001 \001(\002\022;\n2tschcha"
  "rtseriesdefaulterrorbarpercentvaluescatt"
  "erx\030\261\001 \001(\002\0222\n)tschchartseriesdefaulterro"
  "rbarstddevvalue\030\262\001 \001(\002\022:\n1tschchartserie"
  "sdefaulterrorbarstddevvaluescatterx\030\263\001 \001"
  "(\002\022e\n0tschchartseriesdefaulterrorbarcust"
  "ompositivedata\030\276\001 \001(\0132*.TSCH.ChartsNSArr"
  "ayOfNSNumberDoubleArchive\022m\n8tschchartse"
  "riesdefaulterrorbarcustompositivedatasca"
  "tterx\030\277\001 \001(\0132*.TSCH.ChartsNSArrayOfNSNum"
  "berDoubleArchive\022e\n0tschchartseriesdefau"
  "lterrorbarcustomnegativedata\030\300\001 \001(\0132*.TS"
  "CH.ChartsNSArrayOfNSNumberDoubleArchive\022"
  "m\n8tschchartseriesdefaulterrorbarcustomn"
  "egativedatascatterx\030\301\001 \001(\0132*.TSCH.Charts"
  "NSArrayOfNSNumberDoubleArchive\0227\n.tschch"
  "artseriesdefaulttrendlineequationoffsetx"
  "\030\302\001 \001(\002\0227\n.tschchartseriesdefaulttrendli"
  "neequationoffsety\030\303\001 \001(\002\0227\n.tschchartser"
  "iesdefaulttrendlinersquaredoffsetx\030\304\001 \001("
  "\002\0227\n.tschchartseriesdefaulttrendlinersqu"
  "aredoffsety\030\305\001 \001(\002\022,\n#tschchartseriesdef"
  "aultshowtrendline\030\306\001 \001(\010\022+\n\"tschchartser"
  "iesdefaultshowerrorbar\030\307\001 \001(\010\0223\n*tschcha"
  "rtseriesdefaultshowerrorbarscatterx\030\310\001 \001"
  "(\010\022+\n\"tschchartseriesbubblesizedimension"
  "\030\320\001 \001(\005\022-\n$tschchartseriesbubbleshowvalu"
  "elabels\030\321\001 \001(\010\022&\n\035tschchartseriesbubblel"
  "inetype\030\322\001 \001(\005\022.\n%tschchartseriesbubbles"
  "hownegativedata\030\330\001 \001(\010\022-\n$tschchartserie"
  "sbubbleadjustmentscale\030\331\001 \001(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSCHPreUFFArchives_2eproto_deps[6] = {
  &::descriptor_table_TSCH3DArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eCommon_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSCHPreUFFArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCHPreUFFArchives_2eproto = {
  false, false, 19509, descriptor_table_protodef_TSCHPreUFFArchives_2eproto, "TSCHPreUFFArchives.proto", 
  &descriptor_table_TSCHPreUFFArchives_2eproto_once, descriptor_table_TSCHPreUFFArchives_2eproto_deps, 6, 14,
  schemas, file_default_instances, TableStruct_TSCHPreUFFArchives_2eproto::offsets,
  file_level_metadata_TSCHPreUFFArchives_2eproto, file_level_enum_descriptors_TSCHPreUFFArchives_2eproto, file_level_service_descriptors_TSCHPreUFFArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSCHPreUFFArchives_2eproto_getter() {
  return &descriptor_table_TSCHPreUFFArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSCHPreUFFArchives_2eproto(&descriptor_table_TSCHPreUFFArchives_2eproto);
namespace TSCH {
namespace PreUFF {

// ===================================================================

class ChartInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartInfoArchive>()._has_bits_);
  static const ::TSD::DrawableArchive& super(const ChartInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::PreUFF::ChartModelArchive& chart_model(const ChartInfoArchive* msg);
  static void set_has_chart_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& style(const ChartInfoArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chart_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCH::PreUFF::LegendModelArchive& legend_model(const ChartInfoArchive* msg);
  static void set_has_legend_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::RectArchive& inner_chart_frame(const ChartInfoArchive* msg);
  static void set_has_inner_chart_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::SparseReferenceArray& series_private_styles(const ChartInfoArchive* msg);
  static void set_has_series_private_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::SparseReferenceArray& series_non_styles(const ChartInfoArchive* msg);
  static void set_has_series_non_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& non_style(const ChartInfoArchive* msg);
  static void set_has_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& mediator(const ChartInfoArchive* msg);
  static void set_has_mediator(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Point& cde_preview_origin(const ChartInfoArchive* msg);
  static void set_has_cde_preview_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& chart_style_preset(const ChartInfoArchive* msg);
  static void set_has_chart_style_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_last_row_sected_in_the_cde(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_last_column_sected_in_the_cde(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_chart_style_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_needs_calc_engine_deferred_import_action(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000813) ^ 0x00000813) != 0;
  }
};

const ::TSD::DrawableArchive&
ChartInfoArchive::_Internal::super(const ChartInfoArchive* msg) {
  return *msg->super_;
}
const ::TSCH::PreUFF::ChartModelArchive&
ChartInfoArchive::_Internal::chart_model(const ChartInfoArchive* msg) {
  return *msg->chart_model_;
}
const ::TSP::Reference&
ChartInfoArchive::_Internal::style(const ChartInfoArchive* msg) {
  return *msg->style_;
}
const ::TSCH::PreUFF::LegendModelArchive&
ChartInfoArchive::_Internal::legend_model(const ChartInfoArchive* msg) {
  return *msg->legend_model_;
}
const ::TSCH::RectArchive&
ChartInfoArchive::_Internal::inner_chart_frame(const ChartInfoArchive* msg) {
  return *msg->inner_chart_frame_;
}
const ::TSP::SparseReferenceArray&
ChartInfoArchive::_Internal::series_private_styles(const ChartInfoArchive* msg) {
  return *msg->series_private_styles_;
}
const ::TSP::SparseReferenceArray&
ChartInfoArchive::_Internal::series_non_styles(const ChartInfoArchive* msg) {
  return *msg->series_non_styles_;
}
const ::TSP::Reference&
ChartInfoArchive::_Internal::non_style(const ChartInfoArchive* msg) {
  return *msg->non_style_;
}
const ::TSP::Reference&
ChartInfoArchive::_Internal::mediator(const ChartInfoArchive* msg) {
  return *msg->mediator_;
}
const ::TSP::Point&
ChartInfoArchive::_Internal::cde_preview_origin(const ChartInfoArchive* msg) {
  return *msg->cde_preview_origin_;
}
const ::TSP::Reference&
ChartInfoArchive::_Internal::chart_style_preset(const ChartInfoArchive* msg) {
  return *msg->chart_style_preset_;
}
void ChartInfoArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartInfoArchive::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartInfoArchive::clear_inner_chart_frame() {
  if (inner_chart_frame_ != nullptr) inner_chart_frame_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartInfoArchive::clear_value_axis_styles() {
  value_axis_styles_.Clear();
}
void ChartInfoArchive::clear_category_axis_styles() {
  category_axis_styles_.Clear();
}
void ChartInfoArchive::clear_value_axis_nonstyles() {
  value_axis_nonstyles_.Clear();
}
void ChartInfoArchive::clear_category_axis_nonstyles() {
  category_axis_nonstyles_.Clear();
}
void ChartInfoArchive::clear_series_theme_styles() {
  series_theme_styles_.Clear();
}
void ChartInfoArchive::clear_series_private_styles() {
  if (series_private_styles_ != nullptr) series_private_styles_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartInfoArchive::clear_series_non_styles() {
  if (series_non_styles_ != nullptr) series_non_styles_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartInfoArchive::clear_non_style() {
  if (non_style_ != nullptr) non_style_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartInfoArchive::clear_mediator() {
  if (mediator_ != nullptr) mediator_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartInfoArchive::clear_cde_preview_origin() {
  if (cde_preview_origin_ != nullptr) cde_preview_origin_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartInfoArchive::clear_chart_style_preset() {
  if (chart_style_preset_ != nullptr) chart_style_preset_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ChartInfoArchive::clear_paragraph_styles() {
  paragraph_styles_.Clear();
}
ChartInfoArchive::ChartInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_axis_styles_(arena),
  category_axis_styles_(arena),
  value_axis_nonstyles_(arena),
  category_axis_nonstyles_(arena),
  series_theme_styles_(arena),
  paragraph_styles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartInfoArchive)
}
ChartInfoArchive::ChartInfoArchive(const ChartInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_axis_styles_(from.value_axis_styles_),
      category_axis_styles_(from.category_axis_styles_),
      value_axis_nonstyles_(from.value_axis_nonstyles_),
      category_axis_nonstyles_(from.category_axis_nonstyles_),
      series_theme_styles_(from.series_theme_styles_),
      paragraph_styles_(from.paragraph_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_chart_model()) {
    chart_model_ = new ::TSCH::PreUFF::ChartModelArchive(*from.chart_model_);
  } else {
    chart_model_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  if (from._internal_has_legend_model()) {
    legend_model_ = new ::TSCH::PreUFF::LegendModelArchive(*from.legend_model_);
  } else {
    legend_model_ = nullptr;
  }
  if (from._internal_has_inner_chart_frame()) {
    inner_chart_frame_ = new ::TSCH::RectArchive(*from.inner_chart_frame_);
  } else {
    inner_chart_frame_ = nullptr;
  }
  if (from._internal_has_series_private_styles()) {
    series_private_styles_ = new ::TSP::SparseReferenceArray(*from.series_private_styles_);
  } else {
    series_private_styles_ = nullptr;
  }
  if (from._internal_has_series_non_styles()) {
    series_non_styles_ = new ::TSP::SparseReferenceArray(*from.series_non_styles_);
  } else {
    series_non_styles_ = nullptr;
  }
  if (from._internal_has_non_style()) {
    non_style_ = new ::TSP::Reference(*from.non_style_);
  } else {
    non_style_ = nullptr;
  }
  if (from._internal_has_mediator()) {
    mediator_ = new ::TSP::Reference(*from.mediator_);
  } else {
    mediator_ = nullptr;
  }
  if (from._internal_has_cde_preview_origin()) {
    cde_preview_origin_ = new ::TSP::Point(*from.cde_preview_origin_);
  } else {
    cde_preview_origin_ = nullptr;
  }
  if (from._internal_has_chart_style_preset()) {
    chart_style_preset_ = new ::TSP::Reference(*from.chart_style_preset_);
  } else {
    chart_style_preset_ = nullptr;
  }
  ::memcpy(&chart_type_, &from.chart_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&needs_calc_engine_deferred_import_action_) -
    reinterpret_cast<char*>(&chart_type_)) + sizeof(needs_calc_engine_deferred_import_action_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartInfoArchive)
}

void ChartInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&needs_calc_engine_deferred_import_action_) -
    reinterpret_cast<char*>(&super_)) + sizeof(needs_calc_engine_deferred_import_action_));
}

ChartInfoArchive::~ChartInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartInfoArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete chart_model_;
  if (this != internal_default_instance()) delete style_;
  if (this != internal_default_instance()) delete legend_model_;
  if (this != internal_default_instance()) delete inner_chart_frame_;
  if (this != internal_default_instance()) delete series_private_styles_;
  if (this != internal_default_instance()) delete series_non_styles_;
  if (this != internal_default_instance()) delete non_style_;
  if (this != internal_default_instance()) delete mediator_;
  if (this != internal_default_instance()) delete cde_preview_origin_;
  if (this != internal_default_instance()) delete chart_style_preset_;
}

void ChartInfoArchive::ArenaDtor(void* object) {
  ChartInfoArchive* _this = reinterpret_cast< ChartInfoArchive* >(object);
  (void)_this;
}
void ChartInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_axis_styles_.Clear();
  category_axis_styles_.Clear();
  value_axis_nonstyles_.Clear();
  category_axis_nonstyles_.Clear();
  series_theme_styles_.Clear();
  paragraph_styles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chart_model_ != nullptr);
      chart_model_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(legend_model_ != nullptr);
      legend_model_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(inner_chart_frame_ != nullptr);
      inner_chart_frame_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(series_private_styles_ != nullptr);
      series_private_styles_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(series_non_styles_ != nullptr);
      series_non_styles_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(non_style_ != nullptr);
      non_style_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(mediator_ != nullptr);
      mediator_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(cde_preview_origin_ != nullptr);
      cde_preview_origin_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(chart_style_preset_ != nullptr);
      chart_style_preset_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&chart_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needs_calc_engine_deferred_import_action_) -
        reinterpret_cast<char*>(&chart_type_)) + sizeof(needs_calc_engine_deferred_import_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCH.ChartType chart_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ChartType_IsValid(val))) {
            _internal_set_chart_type(static_cast<::TSCH::ChartType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCH.RectArchive inner_chart_frame = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner_chart_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_styles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_styles = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_nonstyles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_nonstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_nonstyles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_axis_nonstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference series_theme_styles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series_theme_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_private_styles = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_private_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_non_styles = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_non_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference non_style = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference mediator = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mediator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point cde_preview_origin = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_cde_preview_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_style_preset = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_styles = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 last_row_sected_in_the_cde = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_last_row_sected_in_the_cde(&has_bits);
          last_row_sected_in_the_cde_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_column_sected_in_the_cde = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_last_column_sected_in_the_cde(&has_bits);
          last_column_sected_in_the_cde_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 chart_style_preset_index = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_chart_style_preset_index(&has_bits);
          chart_style_preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool needs_calc_engine_deferred_import_action = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_needs_calc_engine_deferred_import_action(&has_bits);
          needs_calc_engine_deferred_import_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chart_model(this), target, stream);
  }

  // optional .TSP.Reference style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::style(this), target, stream);
  }

  // required .TSCH.ChartType chart_type = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_chart_type(), target);
  }

  // optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::legend_model(this), target, stream);
  }

  // required .TSCH.RectArchive inner_chart_frame = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::inner_chart_frame(this), target, stream);
  }

  // repeated .TSP.Reference value_axis_styles = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_axis_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_value_axis_styles(i), target, stream);
  }

  // repeated .TSP.Reference category_axis_styles = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_axis_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_category_axis_styles(i), target, stream);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_axis_nonstyles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_value_axis_nonstyles(i), target, stream);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_axis_nonstyles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_category_axis_nonstyles(i), target, stream);
  }

  // repeated .TSP.Reference series_theme_styles = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_series_theme_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_series_theme_styles(i), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_private_styles = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::series_private_styles(this), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_non_styles = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::series_non_styles(this), target, stream);
  }

  // optional .TSP.Reference non_style = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::non_style(this), target, stream);
  }

  // optional .TSP.Reference mediator = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::mediator(this), target, stream);
  }

  // optional .TSP.Point cde_preview_origin = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::cde_preview_origin(this), target, stream);
  }

  // optional .TSP.Reference chart_style_preset = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::chart_style_preset(this), target, stream);
  }

  // repeated .TSP.Reference paragraph_styles = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paragraph_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_paragraph_styles(i), target, stream);
  }

  // optional int32 last_row_sected_in_the_cde = 19;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_last_row_sected_in_the_cde(), target);
  }

  // optional int32 last_column_sected_in_the_cde = 20;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_last_column_sected_in_the_cde(), target);
  }

  // optional int32 chart_style_preset_index = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_chart_style_preset_index(), target);
  }

  // optional bool needs_calc_engine_deferred_import_action = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_needs_calc_engine_deferred_import_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartInfoArchive)
  return target;
}

size_t ChartInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.PreUFF.ChartInfoArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_chart_model()) {
    // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chart_model_);
  }

  if (_internal_has_inner_chart_frame()) {
    // required .TSCH.RectArchive inner_chart_frame = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inner_chart_frame_);
  }

  if (_internal_has_chart_type()) {
    // required .TSCH.ChartType chart_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chart_type());
  }

  return total_size;
}
size_t ChartInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartInfoArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000813) ^ 0x00000813) == 0) {  // All required fields are present.
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chart_model_);

    // required .TSCH.RectArchive inner_chart_frame = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inner_chart_frame_);

    // required .TSCH.ChartType chart_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chart_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference value_axis_styles = 7;
  total_size += 1UL * this->_internal_value_axis_styles_size();
  for (const auto& msg : this->value_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_styles = 8;
  total_size += 1UL * this->_internal_category_axis_styles_size();
  for (const auto& msg : this->category_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 9;
  total_size += 1UL * this->_internal_value_axis_nonstyles_size();
  for (const auto& msg : this->value_axis_nonstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 10;
  total_size += 1UL * this->_internal_category_axis_nonstyles_size();
  for (const auto& msg : this->category_axis_nonstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference series_theme_styles = 11;
  total_size += 1UL * this->_internal_series_theme_styles_size();
  for (const auto& msg : this->series_theme_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference paragraph_styles = 18;
  total_size += 2UL * this->_internal_paragraph_styles_size();
  for (const auto& msg : this->paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSP.Reference style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_);
    }

    // optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legend_model_);
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.SparseReferenceArray series_private_styles = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *series_private_styles_);
    }

    // optional .TSP.SparseReferenceArray series_non_styles = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *series_non_styles_);
    }

    // optional .TSP.Reference non_style = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *non_style_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TSP.Reference mediator = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mediator_);
    }

    // optional .TSP.Point cde_preview_origin = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cde_preview_origin_);
    }

    // optional .TSP.Reference chart_style_preset = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chart_style_preset_);
    }

  }
  if (cached_has_bits & 0x0000f000u) {
    // optional int32 last_row_sected_in_the_cde = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_row_sected_in_the_cde());
    }

    // optional int32 last_column_sected_in_the_cde = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_column_sected_in_the_cde());
    }

    // optional int32 chart_style_preset_index = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chart_style_preset_index());
    }

    // optional bool needs_calc_engine_deferred_import_action = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartInfoArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.ChartInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartInfoArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartInfoArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.ChartInfoArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.ChartInfoArchive)
    MergeFrom(*source);
  }
}

void ChartInfoArchive::MergeFrom(const ChartInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_axis_styles_.MergeFrom(from.value_axis_styles_);
  category_axis_styles_.MergeFrom(from.category_axis_styles_);
  value_axis_nonstyles_.MergeFrom(from.value_axis_nonstyles_);
  category_axis_nonstyles_.MergeFrom(from.category_axis_nonstyles_);
  series_theme_styles_.MergeFrom(from.series_theme_styles_);
  paragraph_styles_.MergeFrom(from.paragraph_styles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chart_model()->::TSCH::PreUFF::ChartModelArchive::MergeFrom(from._internal_chart_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_legend_model()->::TSCH::PreUFF::LegendModelArchive::MergeFrom(from._internal_legend_model());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_inner_chart_frame()->::TSCH::RectArchive::MergeFrom(from._internal_inner_chart_frame());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_series_private_styles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_series_private_styles());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_series_non_styles()->::TSP::SparseReferenceArray::MergeFrom(from._internal_series_non_styles());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_non_style()->::TSP::Reference::MergeFrom(from._internal_non_style());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_mediator()->::TSP::Reference::MergeFrom(from._internal_mediator());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_cde_preview_origin()->::TSP::Point::MergeFrom(from._internal_cde_preview_origin());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_chart_style_preset()->::TSP::Reference::MergeFrom(from._internal_chart_style_preset());
    }
    if (cached_has_bits & 0x00000800u) {
      chart_type_ = from.chart_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      last_row_sected_in_the_cde_ = from.last_row_sected_in_the_cde_;
    }
    if (cached_has_bits & 0x00002000u) {
      last_column_sected_in_the_cde_ = from.last_column_sected_in_the_cde_;
    }
    if (cached_has_bits & 0x00004000u) {
      chart_style_preset_index_ = from.chart_style_preset_index_;
    }
    if (cached_has_bits & 0x00008000u) {
      needs_calc_engine_deferred_import_action_ = from.needs_calc_engine_deferred_import_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartInfoArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.ChartInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartInfoArchive::CopyFrom(const ChartInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(value_axis_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(category_axis_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(value_axis_nonstyles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(category_axis_nonstyles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(series_theme_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(paragraph_styles_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_chart_model()) {
    if (!chart_model_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_model()) {
    if (!legend_model_->IsInitialized()) return false;
  }
  if (_internal_has_inner_chart_frame()) {
    if (!inner_chart_frame_->IsInitialized()) return false;
  }
  if (_internal_has_series_private_styles()) {
    if (!series_private_styles_->IsInitialized()) return false;
  }
  if (_internal_has_series_non_styles()) {
    if (!series_non_styles_->IsInitialized()) return false;
  }
  if (_internal_has_non_style()) {
    if (!non_style_->IsInitialized()) return false;
  }
  if (_internal_has_mediator()) {
    if (!mediator_->IsInitialized()) return false;
  }
  if (_internal_has_cde_preview_origin()) {
    if (!cde_preview_origin_->IsInitialized()) return false;
  }
  if (_internal_has_chart_style_preset()) {
    if (!chart_style_preset_->IsInitialized()) return false;
  }
  return true;
}

void ChartInfoArchive::InternalSwap(ChartInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_axis_styles_.InternalSwap(&other->value_axis_styles_);
  category_axis_styles_.InternalSwap(&other->category_axis_styles_);
  value_axis_nonstyles_.InternalSwap(&other->value_axis_nonstyles_);
  category_axis_nonstyles_.InternalSwap(&other->category_axis_nonstyles_);
  series_theme_styles_.InternalSwap(&other->series_theme_styles_);
  paragraph_styles_.InternalSwap(&other->paragraph_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartInfoArchive, needs_calc_engine_deferred_import_action_)
      + sizeof(ChartInfoArchive::needs_calc_engine_deferred_import_action_)
      - PROTOBUF_FIELD_OFFSET(ChartInfoArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[0]);
}

// ===================================================================

class LegendModelArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LegendModelArchive>()._has_bits_);
  static const ::TSP::Reference& info(const LegendModelArchive* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::RectArchive& frame(const LegendModelArchive* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& style(const LegendModelArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& non_style(const LegendModelArchive* msg);
  static void set_has_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::TSP::Reference&
LegendModelArchive::_Internal::info(const LegendModelArchive* msg) {
  return *msg->info_;
}
const ::TSCH::RectArchive&
LegendModelArchive::_Internal::frame(const LegendModelArchive* msg) {
  return *msg->frame_;
}
const ::TSP::Reference&
LegendModelArchive::_Internal::style(const LegendModelArchive* msg) {
  return *msg->style_;
}
const ::TSP::Reference&
LegendModelArchive::_Internal::non_style(const LegendModelArchive* msg) {
  return *msg->non_style_;
}
void LegendModelArchive::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LegendModelArchive::clear_frame() {
  if (frame_ != nullptr) frame_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LegendModelArchive::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LegendModelArchive::clear_non_style() {
  if (non_style_ != nullptr) non_style_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
LegendModelArchive::LegendModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.LegendModelArchive)
}
LegendModelArchive::LegendModelArchive(const LegendModelArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::TSP::Reference(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_frame()) {
    frame_ = new ::TSCH::RectArchive(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  if (from._internal_has_non_style()) {
    non_style_ = new ::TSP::Reference(*from.non_style_);
  } else {
    non_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.LegendModelArchive)
}

void LegendModelArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&non_style_) -
    reinterpret_cast<char*>(&info_)) + sizeof(non_style_));
}

LegendModelArchive::~LegendModelArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.LegendModelArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LegendModelArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete style_;
  if (this != internal_default_instance()) delete non_style_;
}

void LegendModelArchive::ArenaDtor(void* object) {
  LegendModelArchive* _this = reinterpret_cast< LegendModelArchive* >(object);
  (void)_this;
}
void LegendModelArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LegendModelArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LegendModelArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.LegendModelArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(frame_ != nullptr);
      frame_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(non_style_ != nullptr);
      non_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendModelArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCH.RectArchive frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference non_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LegendModelArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.LegendModelArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // required .TSCH.RectArchive frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frame(this), target, stream);
  }

  // required .TSP.Reference style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::style(this), target, stream);
  }

  // required .TSP.Reference non_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::non_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.LegendModelArchive)
  return target;
}

size_t LegendModelArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.PreUFF.LegendModelArchive)
  size_t total_size = 0;

  if (_internal_has_frame()) {
    // required .TSCH.RectArchive frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);
  }

  if (_internal_has_style()) {
    // required .TSP.Reference style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  if (_internal_has_non_style()) {
    // required .TSP.Reference non_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *non_style_);
  }

  return total_size;
}
size_t LegendModelArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.LegendModelArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .TSCH.RectArchive frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);

    // required .TSP.Reference style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);

    // required .TSP.Reference non_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *non_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LegendModelArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.LegendModelArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const LegendModelArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LegendModelArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.LegendModelArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.LegendModelArchive)
    MergeFrom(*source);
  }
}

void LegendModelArchive::MergeFrom(const LegendModelArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.LegendModelArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_info()->::TSP::Reference::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_frame()->::TSCH::RectArchive::MergeFrom(from._internal_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_non_style()->::TSP::Reference::MergeFrom(from._internal_non_style());
    }
  }
}

void LegendModelArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.LegendModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegendModelArchive::CopyFrom(const LegendModelArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.LegendModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendModelArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  if (_internal_has_frame()) {
    if (!frame_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  if (_internal_has_non_style()) {
    if (!non_style_->IsInitialized()) return false;
  }
  return true;
}

void LegendModelArchive::InternalSwap(LegendModelArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegendModelArchive, non_style_)
      + sizeof(LegendModelArchive::non_style_)
      - PROTOBUF_FIELD_OFFSET(LegendModelArchive, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendModelArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[1]);
}

// ===================================================================

class ChartModelArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartModelArchive>()._has_bits_);
  static const ::TSP::Reference& info(const ChartModelArchive* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& grid(const ChartModelArchive* msg);
  static void set_has_grid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scatter_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::PreUFF::ChartGridArchive& inline_grid(const ChartModelArchive* msg);
  static void set_has_inline_grid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_multidataset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
ChartModelArchive::_Internal::info(const ChartModelArchive* msg) {
  return *msg->info_;
}
const ::TSP::Reference&
ChartModelArchive::_Internal::grid(const ChartModelArchive* msg) {
  return *msg->grid_;
}
const ::TSCH::PreUFF::ChartGridArchive&
ChartModelArchive::_Internal::inline_grid(const ChartModelArchive* msg) {
  return *msg->inline_grid_;
}
void ChartModelArchive::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartModelArchive::clear_grid() {
  if (grid_ != nullptr) grid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ChartModelArchive::ChartModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  series_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartModelArchive)
}
ChartModelArchive::ChartModelArchive(const ChartModelArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      series_types_(from.series_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::TSP::Reference(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_grid()) {
    grid_ = new ::TSP::Reference(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  if (from._internal_has_inline_grid()) {
    inline_grid_ = new ::TSCH::PreUFF::ChartGridArchive(*from.inline_grid_);
  } else {
    inline_grid_ = nullptr;
  }
  ::memcpy(&scatter_format_, &from.scatter_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&multidataset_index_) -
    reinterpret_cast<char*>(&scatter_format_)) + sizeof(multidataset_index_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartModelArchive)
}

void ChartModelArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&multidataset_index_) -
    reinterpret_cast<char*>(&info_)) + sizeof(multidataset_index_));
}

ChartModelArchive::~ChartModelArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartModelArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartModelArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete grid_;
  if (this != internal_default_instance()) delete inline_grid_;
}

void ChartModelArchive::ArenaDtor(void* object) {
  ChartModelArchive* _this = reinterpret_cast< ChartModelArchive* >(object);
  (void)_this;
}
void ChartModelArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartModelArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartModelArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartModelArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  series_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(grid_ != nullptr);
      grid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inline_grid_ != nullptr);
      inline_grid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&scatter_format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&multidataset_index_) -
        reinterpret_cast<char*>(&scatter_format_)) + sizeof(multidataset_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartModelArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference grid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 series_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_series_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_series_types(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scatter_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_scatter_format(&has_bits);
          scatter_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inline_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 multidataset_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_multidataset_index(&has_bits);
          multidataset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartModelArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartModelArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // required .TSP.Reference grid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::grid(this), target, stream);
  }

  // repeated uint32 series_types = 3;
  for (int i = 0, n = this->_internal_series_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_series_types(i), target);
  }

  // optional uint32 scatter_format = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_scatter_format(), target);
  }

  // optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::inline_grid(this), target, stream);
  }

  // optional uint32 multidataset_index = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_multidataset_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartModelArchive)
  return target;
}

size_t ChartModelArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartModelArchive)
  size_t total_size = 0;

  // required .TSP.Reference grid = 2;
  if (_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 series_types = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->series_types_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_series_types_size());
    total_size += data_size;
  }

  // optional .TSP.Reference info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inline_grid_);
    }

    // optional uint32 scatter_format = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scatter_format());
    }

    // optional uint32 multidataset_index = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_multidataset_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartModelArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.ChartModelArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartModelArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartModelArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.ChartModelArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.ChartModelArchive)
    MergeFrom(*source);
  }
}

void ChartModelArchive::MergeFrom(const ChartModelArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartModelArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  series_types_.MergeFrom(from.series_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_info()->::TSP::Reference::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_grid()->::TSP::Reference::MergeFrom(from._internal_grid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inline_grid()->::TSCH::PreUFF::ChartGridArchive::MergeFrom(from._internal_inline_grid());
    }
    if (cached_has_bits & 0x00000008u) {
      scatter_format_ = from.scatter_format_;
    }
    if (cached_has_bits & 0x00000010u) {
      multidataset_index_ = from.multidataset_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartModelArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.ChartModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartModelArchive::CopyFrom(const ChartModelArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartModelArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  if (_internal_has_grid()) {
    if (!grid_->IsInitialized()) return false;
  }
  if (_internal_has_inline_grid()) {
    if (!inline_grid_->IsInitialized()) return false;
  }
  return true;
}

void ChartModelArchive::InternalSwap(ChartModelArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  series_types_.InternalSwap(&other->series_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartModelArchive, multidataset_index_)
      + sizeof(ChartModelArchive::multidataset_index_)
      - PROTOBUF_FIELD_OFFSET(ChartModelArchive, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartModelArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[2]);
}

// ===================================================================

class ChartGridArchive_ValueRow::_Internal {
 public:
};

ChartGridArchive_ValueRow::ChartGridArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartGridArchive.ValueRow)
}
ChartGridArchive_ValueRow::ChartGridArchive_ValueRow(const ChartGridArchive_ValueRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartGridArchive.ValueRow)
}

void ChartGridArchive_ValueRow::SharedCtor() {
}

ChartGridArchive_ValueRow::~ChartGridArchive_ValueRow() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartGridArchive.ValueRow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartGridArchive_ValueRow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartGridArchive_ValueRow::ArenaDtor(void* object) {
  ChartGridArchive_ValueRow* _this = reinterpret_cast< ChartGridArchive_ValueRow* >(object);
  (void)_this;
}
void ChartGridArchive_ValueRow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartGridArchive_ValueRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartGridArchive_ValueRow::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive_ValueRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartGridArchive_ValueRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartGridArchive.ValueRow)
  return target;
}

size_t ChartGridArchive_ValueRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_value_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartGridArchive_ValueRow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartGridArchive_ValueRow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartGridArchive_ValueRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.ChartGridArchive.ValueRow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.ChartGridArchive.ValueRow)
    MergeFrom(*source);
  }
}

void ChartGridArchive_ValueRow::MergeFrom(const ChartGridArchive_ValueRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void ChartGridArchive_ValueRow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive_ValueRow::CopyFrom(const ChartGridArchive_ValueRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_ValueRow::IsInitialized() const {
  return true;
}

void ChartGridArchive_ValueRow::InternalSwap(ChartGridArchive_ValueRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive_ValueRow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[3]);
}

// ===================================================================

class ChartGridArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGridArchive>()._has_bits_);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dirty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ChartGridArchive::ChartGridArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  row_name_(arena),
  column_name_(arena),
  value_row_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartGridArchive)
}
ChartGridArchive::ChartGridArchive(const ChartGridArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      row_name_(from.row_name_),
      column_name_(from.column_name_),
      value_row_(from.value_row_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&dirty_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(dirty_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartGridArchive)
}

void ChartGridArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&direction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dirty_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(dirty_));
}

ChartGridArchive::~ChartGridArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartGridArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartGridArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartGridArchive::ArenaDtor(void* object) {
  ChartGridArchive* _this = reinterpret_cast< ChartGridArchive* >(object);
  (void)_this;
}
void ChartGridArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartGridArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartGridArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartGridArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_name_.Clear();
  column_name_.Clear();
  value_row_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dirty_) -
        reinterpret_cast<char*>(&direction_)) + sizeof(dirty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string row_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_row_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartGridArchive.row_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string column_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartGridArchive.column_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool dirty = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dirty(&has_bits);
          dirty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartGridArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartGridArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 direction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_direction(), target);
  }

  // repeated string row_name = 2;
  for (int i = 0, n = this->_internal_row_name_size(); i < n; i++) {
    const auto& s = this->_internal_row_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartGridArchive.row_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated string column_name = 3;
  for (int i = 0, n = this->_internal_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartGridArchive.column_name");
    target = stream->WriteString(3, s, target);
  }

  // repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_row_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_value_row(i), target, stream);
  }

  // required bool dirty = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_dirty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartGridArchive)
  return target;
}

size_t ChartGridArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.PreUFF.ChartGridArchive)
  size_t total_size = 0;

  if (_internal_has_direction()) {
    // required int32 direction = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  if (_internal_has_dirty()) {
    // required bool dirty = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ChartGridArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartGridArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 direction = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());

    // required bool dirty = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string row_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(row_name_.size());
  for (int i = 0, n = row_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      row_name_.Get(i));
  }

  // repeated string column_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_name_.size());
  for (int i = 0, n = column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_name_.Get(i));
  }

  // repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
  total_size += 1UL * this->_internal_value_row_size();
  for (const auto& msg : this->value_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartGridArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.ChartGridArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartGridArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartGridArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.ChartGridArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.ChartGridArchive)
    MergeFrom(*source);
  }
}

void ChartGridArchive::MergeFrom(const ChartGridArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartGridArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_name_.MergeFrom(from.row_name_);
  column_name_.MergeFrom(from.column_name_);
  value_row_.MergeFrom(from.value_row_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000002u) {
      dirty_ = from.dirty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartGridArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.ChartGridArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive::CopyFrom(const ChartGridArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartGridArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChartGridArchive::InternalSwap(ChartGridArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  row_name_.InternalSwap(&other->row_name_);
  column_name_.InternalSwap(&other->column_name_);
  value_row_.InternalSwap(&other->value_row_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartGridArchive, dirty_)
      + sizeof(ChartGridArchive::dirty_)
      - PROTOBUF_FIELD_OFFSET(ChartGridArchive, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[4]);
}

// ===================================================================

class ChartsNumberFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartsNumberFormatArchive>()._has_bits_);
  static void set_has_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_format_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_decimal_places(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_negative_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_show_thousands_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fraction_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_suffix_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_base_places(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_base_use_minus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_use_accounting_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_custom(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::IndexSet& interstitial_string_insertion_indexes(const ChartsNumberFormatArchive* msg);
  static void set_has_interstitial_string_insertion_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_index_from_right_of_last_digit_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_text_format(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_minimum_integer_width(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_decimal_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_number_of_non_space_integer_placeholder_digits(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_number_of_non_space_decimal_placeholder_digits(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_format_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prefix_string(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x007fffe0) ^ 0x007fffe0) != 0;
  }
};

const ::TSP::IndexSet&
ChartsNumberFormatArchive::_Internal::interstitial_string_insertion_indexes(const ChartsNumberFormatArchive* msg) {
  return *msg->interstitial_string_insertion_indexes_;
}
void ChartsNumberFormatArchive::clear_interstitial_string_insertion_indexes() {
  if (interstitial_string_insertion_indexes_ != nullptr) interstitial_string_insertion_indexes_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
ChartsNumberFormatArchive::ChartsNumberFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  interstitial_strings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartsNumberFormatArchive)
}
ChartsNumberFormatArchive::ChartsNumberFormatArchive(const ChartsNumberFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      interstitial_strings_(from.interstitial_strings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  format_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_format_string()) {
    format_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_format_string(), 
      GetArena());
  }
  currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currency_code()) {
    currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency_code(), 
      GetArena());
  }
  suffix_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_suffix_string()) {
    suffix_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_suffix_string(), 
      GetArena());
  }
  format_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_format_name()) {
    format_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_format_name(), 
      GetArena());
  }
  prefix_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prefix_string()) {
    prefix_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix_string(), 
      GetArena());
  }
  if (from._internal_has_interstitial_string_insertion_indexes()) {
    interstitial_string_insertion_indexes_ = new ::TSP::IndexSet(*from.interstitial_string_insertion_indexes_);
  } else {
    interstitial_string_insertion_indexes_ = nullptr;
  }
  ::memcpy(&value_type_, &from.value_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_non_space_decimal_placeholder_digits_) -
    reinterpret_cast<char*>(&value_type_)) + sizeof(number_of_non_space_decimal_placeholder_digits_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartsNumberFormatArchive)
}

void ChartsNumberFormatArchive::SharedCtor() {
format_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
suffix_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
format_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
prefix_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interstitial_string_insertion_indexes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_of_non_space_decimal_placeholder_digits_) -
    reinterpret_cast<char*>(&interstitial_string_insertion_indexes_)) + sizeof(number_of_non_space_decimal_placeholder_digits_));
}

ChartsNumberFormatArchive::~ChartsNumberFormatArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartsNumberFormatArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartsNumberFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  format_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interstitial_string_insertion_indexes_;
}

void ChartsNumberFormatArchive::ArenaDtor(void* object) {
  ChartsNumberFormatArchive* _this = reinterpret_cast< ChartsNumberFormatArchive* >(object);
  (void)_this;
}
void ChartsNumberFormatArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartsNumberFormatArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartsNumberFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interstitial_strings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      format_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      suffix_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      format_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      prefix_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(interstitial_string_insertion_indexes_ != nullptr);
      interstitial_string_insertion_indexes_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&value_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&decimal_places_) -
        reinterpret_cast<char*>(&value_type_)) + sizeof(decimal_places_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&negative_style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_custom_) -
        reinterpret_cast<char*>(&negative_style_)) + sizeof(is_custom_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&index_from_right_of_last_digit_placeholder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_non_space_decimal_placeholder_digits_) -
        reinterpret_cast<char*>(&index_from_right_of_last_digit_placeholder_)) + sizeof(number_of_non_space_decimal_placeholder_digits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartsNumberFormatArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.NumberValueType value_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::NumberValueType_IsValid(val))) {
            _internal_set_value_type(static_cast<::TSCH::NumberValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string format_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_format_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.format_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 decimal_places = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_decimal_places(&has_bits);
          decimal_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string currency_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.currency_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCH.NegativeNumberStyle negative_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::NegativeNumberStyle_IsValid(val))) {
            _internal_set_negative_style(static_cast<::TSCH::NegativeNumberStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bool show_thousands_separator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_show_thousands_separator(&has_bits);
          show_thousands_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCH.FractionAccuracy fraction_accuracy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::FractionAccuracy_IsValid(val))) {
            _internal_set_fraction_accuracy(static_cast<::TSCH::FractionAccuracy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string suffix_string = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_suffix_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.suffix_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 base = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_base(&has_bits);
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 base_places = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_base_places(&has_bits);
          base_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool base_use_minus_sign = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_base_use_minus_sign(&has_bits);
          base_use_minus_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool use_accounting_style = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_use_accounting_style(&has_bits);
          use_accounting_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_custom = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_custom(&has_bits);
          is_custom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double scale_factor = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_scale_factor(&has_bits);
          scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string interstitial_strings = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_interstitial_strings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_interstitial_string_insertion_indexes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 index_from_right_of_last_digit_placeholder = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_index_from_right_of_last_digit_placeholder(&has_bits);
          index_from_right_of_last_digit_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_text_format = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_text_format(&has_bits);
          is_text_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 minimum_integer_width = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_minimum_integer_width(&has_bits);
          minimum_integer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 decimal_width = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_decimal_width(&has_bits);
          decimal_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 number_of_non_space_integer_placeholder_digits = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_number_of_non_space_integer_placeholder_digits(&has_bits);
          number_of_non_space_integer_placeholder_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_number_of_non_space_decimal_placeholder_digits(&has_bits);
          number_of_non_space_decimal_placeholder_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string format_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_format_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.format_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string prefix_string = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_prefix_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.prefix_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartsNumberFormatArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCH.NumberValueType value_type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value_type(), target);
  }

  // optional string format_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format_string().data(), static_cast<int>(this->_internal_format_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.format_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_format_string(), target);
  }

  // required uint32 decimal_places = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_decimal_places(), target);
  }

  // optional string currency_code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_currency_code(), target);
  }

  // required .TSCH.NegativeNumberStyle negative_style = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_negative_style(), target);
  }

  // required bool show_thousands_separator = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_show_thousands_separator(), target);
  }

  // required .TSCH.FractionAccuracy fraction_accuracy = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_fraction_accuracy(), target);
  }

  // optional string suffix_string = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suffix_string().data(), static_cast<int>(this->_internal_suffix_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.suffix_string");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_suffix_string(), target);
  }

  // required uint32 base = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_base(), target);
  }

  // required uint32 base_places = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_base_places(), target);
  }

  // required bool base_use_minus_sign = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_base_use_minus_sign(), target);
  }

  // required bool use_accounting_style = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_use_accounting_style(), target);
  }

  // required bool is_custom = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_custom(), target);
  }

  // required double scale_factor = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_scale_factor(), target);
  }

  // repeated string interstitial_strings = 15;
  for (int i = 0, n = this->_internal_interstitial_strings_size(); i < n; i++) {
    const auto& s = this->_internal_interstitial_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings");
    target = stream->WriteString(15, s, target);
  }

  // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::interstitial_string_insertion_indexes(this), target, stream);
  }

  // required uint32 index_from_right_of_last_digit_placeholder = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_index_from_right_of_last_digit_placeholder(), target);
  }

  // required bool is_text_format = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_text_format(), target);
  }

  // required uint32 minimum_integer_width = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_minimum_integer_width(), target);
  }

  // required uint32 decimal_width = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_decimal_width(), target);
  }

  // required uint32 number_of_non_space_integer_placeholder_digits = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_number_of_non_space_integer_placeholder_digits(), target);
  }

  // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_number_of_non_space_decimal_placeholder_digits(), target);
  }

  // optional string format_name = 23;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format_name().data(), static_cast<int>(this->_internal_format_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.format_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_format_name(), target);
  }

  // optional string prefix_string = 24;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prefix_string().data(), static_cast<int>(this->_internal_prefix_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.prefix_string");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_prefix_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartsNumberFormatArchive)
  return target;
}

size_t ChartsNumberFormatArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  size_t total_size = 0;

  if (_internal_has_interstitial_string_insertion_indexes()) {
    // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interstitial_string_insertion_indexes_);
  }

  if (_internal_has_value_type()) {
    // required .TSCH.NumberValueType value_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value_type());
  }

  if (_internal_has_decimal_places()) {
    // required uint32 decimal_places = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decimal_places());
  }

  if (_internal_has_negative_style()) {
    // required .TSCH.NegativeNumberStyle negative_style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_negative_style());
  }

  if (_internal_has_fraction_accuracy()) {
    // required .TSCH.FractionAccuracy fraction_accuracy = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fraction_accuracy());
  }

  if (_internal_has_base()) {
    // required uint32 base = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base());
  }

  if (_internal_has_base_places()) {
    // required uint32 base_places = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_places());
  }

  if (_internal_has_show_thousands_separator()) {
    // required bool show_thousands_separator = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_base_use_minus_sign()) {
    // required bool base_use_minus_sign = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_use_accounting_style()) {
    // required bool use_accounting_style = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_is_custom()) {
    // required bool is_custom = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_index_from_right_of_last_digit_placeholder()) {
    // required uint32 index_from_right_of_last_digit_placeholder = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index_from_right_of_last_digit_placeholder());
  }

  if (_internal_has_scale_factor()) {
    // required double scale_factor = 14;
    total_size += 1 + 8;
  }

  if (_internal_has_is_text_format()) {
    // required bool is_text_format = 18;
    total_size += 2 + 1;
  }

  if (_internal_has_minimum_integer_width()) {
    // required uint32 minimum_integer_width = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minimum_integer_width());
  }

  if (_internal_has_decimal_width()) {
    // required uint32 decimal_width = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decimal_width());
  }

  if (_internal_has_number_of_non_space_integer_placeholder_digits()) {
    // required uint32 number_of_non_space_integer_placeholder_digits = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_non_space_integer_placeholder_digits());
  }

  if (_internal_has_number_of_non_space_decimal_placeholder_digits()) {
    // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_non_space_decimal_placeholder_digits());
  }

  return total_size;
}
size_t ChartsNumberFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x007fffe0) ^ 0x007fffe0) == 0) {  // All required fields are present.
    // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interstitial_string_insertion_indexes_);

    // required .TSCH.NumberValueType value_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value_type());

    // required uint32 decimal_places = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decimal_places());

    // required .TSCH.NegativeNumberStyle negative_style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_negative_style());

    // required .TSCH.FractionAccuracy fraction_accuracy = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fraction_accuracy());

    // required uint32 base = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base());

    // required uint32 base_places = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_places());

    // required bool show_thousands_separator = 6;
    total_size += 1 + 1;

    // required bool base_use_minus_sign = 11;
    total_size += 1 + 1;

    // required bool use_accounting_style = 12;
    total_size += 1 + 1;

    // required bool is_custom = 13;
    total_size += 1 + 1;

    // required uint32 index_from_right_of_last_digit_placeholder = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index_from_right_of_last_digit_placeholder());

    // required double scale_factor = 14;
    total_size += 1 + 8;

    // required bool is_text_format = 18;
    total_size += 2 + 1;

    // required uint32 minimum_integer_width = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minimum_integer_width());

    // required uint32 decimal_width = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decimal_width());

    // required uint32 number_of_non_space_integer_placeholder_digits = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_non_space_integer_placeholder_digits());

    // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_non_space_decimal_placeholder_digits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string interstitial_strings = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(interstitial_strings_.size());
  for (int i = 0, n = interstitial_strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      interstitial_strings_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string format_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_format_string());
    }

    // optional string currency_code = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

    // optional string suffix_string = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suffix_string());
    }

    // optional string format_name = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_format_name());
    }

    // optional string prefix_string = 24;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix_string());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartsNumberFormatArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartsNumberFormatArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartsNumberFormatArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.ChartsNumberFormatArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.ChartsNumberFormatArchive)
    MergeFrom(*source);
  }
}

void ChartsNumberFormatArchive::MergeFrom(const ChartsNumberFormatArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interstitial_strings_.MergeFrom(from.interstitial_strings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_format_string(from._internal_format_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_suffix_string(from._internal_suffix_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_format_name(from._internal_format_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_prefix_string(from._internal_prefix_string());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_interstitial_string_insertion_indexes()->::TSP::IndexSet::MergeFrom(from._internal_interstitial_string_insertion_indexes());
    }
    if (cached_has_bits & 0x00000040u) {
      value_type_ = from.value_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      decimal_places_ = from.decimal_places_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      negative_style_ = from.negative_style_;
    }
    if (cached_has_bits & 0x00000200u) {
      fraction_accuracy_ = from.fraction_accuracy_;
    }
    if (cached_has_bits & 0x00000400u) {
      base_ = from.base_;
    }
    if (cached_has_bits & 0x00000800u) {
      base_places_ = from.base_places_;
    }
    if (cached_has_bits & 0x00001000u) {
      show_thousands_separator_ = from.show_thousands_separator_;
    }
    if (cached_has_bits & 0x00002000u) {
      base_use_minus_sign_ = from.base_use_minus_sign_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_accounting_style_ = from.use_accounting_style_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_custom_ = from.is_custom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      index_from_right_of_last_digit_placeholder_ = from.index_from_right_of_last_digit_placeholder_;
    }
    if (cached_has_bits & 0x00020000u) {
      scale_factor_ = from.scale_factor_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_text_format_ = from.is_text_format_;
    }
    if (cached_has_bits & 0x00080000u) {
      minimum_integer_width_ = from.minimum_integer_width_;
    }
    if (cached_has_bits & 0x00100000u) {
      decimal_width_ = from.decimal_width_;
    }
    if (cached_has_bits & 0x00200000u) {
      number_of_non_space_integer_placeholder_digits_ = from.number_of_non_space_integer_placeholder_digits_;
    }
    if (cached_has_bits & 0x00400000u) {
      number_of_non_space_decimal_placeholder_digits_ = from.number_of_non_space_decimal_placeholder_digits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartsNumberFormatArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartsNumberFormatArchive::CopyFrom(const ChartsNumberFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartsNumberFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_interstitial_string_insertion_indexes()) {
    if (!interstitial_string_insertion_indexes_->IsInitialized()) return false;
  }
  return true;
}

void ChartsNumberFormatArchive::InternalSwap(ChartsNumberFormatArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  interstitial_strings_.InternalSwap(&other->interstitial_strings_);
  format_string_.Swap(&other->format_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currency_code_.Swap(&other->currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suffix_string_.Swap(&other->suffix_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  format_name_.Swap(&other->format_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prefix_string_.Swap(&other->prefix_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartsNumberFormatArchive, number_of_non_space_decimal_placeholder_digits_)
      + sizeof(ChartsNumberFormatArchive::number_of_non_space_decimal_placeholder_digits_)
      - PROTOBUF_FIELD_OFFSET(ChartsNumberFormatArchive, interstitial_string_insertion_indexes_)>(
          reinterpret_cast<char*>(&interstitial_string_insertion_indexes_),
          reinterpret_cast<char*>(&other->interstitial_string_insertion_indexes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartsNumberFormatArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[5]);
}

// ===================================================================

class ChartStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::FillArchive& tschchartinfodefaultbackgroundfill(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::StrokeArchive& tschchartinfodefaultbackgroundstroke(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbackgroundstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::FillArchive& tschchartinfodefaultgridbackgroundfill(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultgridbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschchartinfodefaultintersetgap(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartinfodefaultinterbargap(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartinfodefaultshowborder(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSD::StrokeArchive& tschchartinfodefaultborderstroke(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultborderstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Color& tschchartinfodefaulttitlecolor(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaulttitlecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartinfodefaultgridbackgroundopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartinfodefaultcombinelayers(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSD::ShadowArchive& tschchartinfodefaultbordershadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbordershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartinfodefaultborderopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartinfodefaulttitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartinfodefaultdeprecatedmainfontfamily(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartinfodefaultdeprecatedmainfontnamedsize(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSD::ShadowArchive& tschchartinfodefaultdeprecatedtrendlineequationshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultdeprecatedtrendlineequationshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::ShadowArchive& tschchartinfodefaultdeprecatedtrendlinersquaredshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartinfodefaultdeprecatedtrendlineequationopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSD::ShadowArchive& tschchartinfobardeprecated3dshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfobardeprecated3dshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSD::ShadowArchive& tschchartinfocolumndeprecated3dshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfocolumndeprecated3dshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::ShadowArchive& tschchartinfolinedeprecated3dshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfolinedeprecated3dshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::ShadowArchive& tschchartinfoareadeprecated3dshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoareadeprecated3dshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::ShadowArchive& tschchartinfopiedeprecated3dshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfopiedeprecated3dshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefault3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefault3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumn3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfocolumn3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobar3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfobar3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoline3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoline3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoarea3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoarea3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopie3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfopie3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartinfodefaultdeprecated3dbeveledges(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartinfopiedeprecated3dbeveledges(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartinfobardeprecated3dbeveledges(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartinfocolumndeprecated3dbeveledges(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartinfodefaultdeprecated3dbarshape(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartinfodefault3dchartopacity(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSS::StyleArchive&
ChartStyleArchive::_Internal::super(const ChartStyleArchive* msg) {
  return *msg->super_;
}
const ::TSD::FillArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbackgroundfill(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultbackgroundfill_;
}
const ::TSD::StrokeArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbackgroundstroke(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultbackgroundstroke_;
}
const ::TSD::FillArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultgridbackgroundfill(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultgridbackgroundfill_;
}
const ::TSD::StrokeArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultborderstroke(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultborderstroke_;
}
const ::TSP::Color&
ChartStyleArchive::_Internal::tschchartinfodefaulttitlecolor(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaulttitlecolor_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbordershadow(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultbordershadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultdeprecatedtrendlineequationshadow(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultdeprecatedtrendlineequationshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultdeprecatedtrendlinersquaredshadow(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefaultdeprecatedtrendlinersquaredshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfobardeprecated3dshadow(const ChartStyleArchive* msg) {
  return *msg->tschchartinfobardeprecated3dshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfocolumndeprecated3dshadow(const ChartStyleArchive* msg) {
  return *msg->tschchartinfocolumndeprecated3dshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfolinedeprecated3dshadow(const ChartStyleArchive* msg) {
  return *msg->tschchartinfolinedeprecated3dshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfoareadeprecated3dshadow(const ChartStyleArchive* msg) {
  return *msg->tschchartinfoareadeprecated3dshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfopiedeprecated3dshadow(const ChartStyleArchive* msg) {
  return *msg->tschchartinfopiedeprecated3dshadow_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfodefault3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfodefault3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfocolumn3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfocolumn3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfobar3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfobar3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfoline3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfoline3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfoarea3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfoarea3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfopie3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->tschchartinfopie3dlightingpackage_;
}
void ChartStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbackgroundfill() {
  if (tschchartinfodefaultbackgroundfill_ != nullptr) tschchartinfodefaultbackgroundfill_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbackgroundstroke() {
  if (tschchartinfodefaultbackgroundstroke_ != nullptr) tschchartinfodefaultbackgroundstroke_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartStyleArchive::clear_tschchartinfodefaultgridbackgroundfill() {
  if (tschchartinfodefaultgridbackgroundfill_ != nullptr) tschchartinfodefaultgridbackgroundfill_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartStyleArchive::clear_tschchartinfodefaultborderstroke() {
  if (tschchartinfodefaultborderstroke_ != nullptr) tschchartinfodefaultborderstroke_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartStyleArchive::clear_tschchartinfodefaulttitlecolor() {
  if (tschchartinfodefaulttitlecolor_ != nullptr) tschchartinfodefaulttitlecolor_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbordershadow() {
  if (tschchartinfodefaultbordershadow_ != nullptr) tschchartinfodefaultbordershadow_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartStyleArchive::clear_tschchartinfodefaultdeprecatedtrendlineequationshadow() {
  if (tschchartinfodefaultdeprecatedtrendlineequationshadow_ != nullptr) tschchartinfodefaultdeprecatedtrendlineequationshadow_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartStyleArchive::clear_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() {
  if (tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ != nullptr) tschchartinfodefaultdeprecatedtrendlinersquaredshadow_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartStyleArchive::clear_tschchartinfobardeprecated3dshadow() {
  if (tschchartinfobardeprecated3dshadow_ != nullptr) tschchartinfobardeprecated3dshadow_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ChartStyleArchive::clear_tschchartinfocolumndeprecated3dshadow() {
  if (tschchartinfocolumndeprecated3dshadow_ != nullptr) tschchartinfocolumndeprecated3dshadow_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ChartStyleArchive::clear_tschchartinfolinedeprecated3dshadow() {
  if (tschchartinfolinedeprecated3dshadow_ != nullptr) tschchartinfolinedeprecated3dshadow_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void ChartStyleArchive::clear_tschchartinfoareadeprecated3dshadow() {
  if (tschchartinfoareadeprecated3dshadow_ != nullptr) tschchartinfoareadeprecated3dshadow_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void ChartStyleArchive::clear_tschchartinfopiedeprecated3dshadow() {
  if (tschchartinfopiedeprecated3dshadow_ != nullptr) tschchartinfopiedeprecated3dshadow_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void ChartStyleArchive::clear_tschchartinfodefault3dlightingpackage() {
  if (tschchartinfodefault3dlightingpackage_ != nullptr) tschchartinfodefault3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void ChartStyleArchive::clear_tschchartinfocolumn3dlightingpackage() {
  if (tschchartinfocolumn3dlightingpackage_ != nullptr) tschchartinfocolumn3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void ChartStyleArchive::clear_tschchartinfobar3dlightingpackage() {
  if (tschchartinfobar3dlightingpackage_ != nullptr) tschchartinfobar3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void ChartStyleArchive::clear_tschchartinfoline3dlightingpackage() {
  if (tschchartinfoline3dlightingpackage_ != nullptr) tschchartinfoline3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void ChartStyleArchive::clear_tschchartinfoarea3dlightingpackage() {
  if (tschchartinfoarea3dlightingpackage_ != nullptr) tschchartinfoarea3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void ChartStyleArchive::clear_tschchartinfopie3dlightingpackage() {
  if (tschchartinfopie3dlightingpackage_ != nullptr) tschchartinfopie3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
ChartStyleArchive::ChartStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartStyleArchive)
}
ChartStyleArchive::ChartStyleArchive(const ChartStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschchartinfodefaultdeprecatedmainfontfamily_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartinfodefaultdeprecatedmainfontfamily()) {
    tschchartinfodefaultdeprecatedmainfontfamily_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartinfodefaultdeprecatedmainfontfamily(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultbackgroundfill()) {
    tschchartinfodefaultbackgroundfill_ = new ::TSD::FillArchive(*from.tschchartinfodefaultbackgroundfill_);
  } else {
    tschchartinfodefaultbackgroundfill_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultbackgroundstroke()) {
    tschchartinfodefaultbackgroundstroke_ = new ::TSD::StrokeArchive(*from.tschchartinfodefaultbackgroundstroke_);
  } else {
    tschchartinfodefaultbackgroundstroke_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultgridbackgroundfill()) {
    tschchartinfodefaultgridbackgroundfill_ = new ::TSD::FillArchive(*from.tschchartinfodefaultgridbackgroundfill_);
  } else {
    tschchartinfodefaultgridbackgroundfill_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultborderstroke()) {
    tschchartinfodefaultborderstroke_ = new ::TSD::StrokeArchive(*from.tschchartinfodefaultborderstroke_);
  } else {
    tschchartinfodefaultborderstroke_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaulttitlecolor()) {
    tschchartinfodefaulttitlecolor_ = new ::TSP::Color(*from.tschchartinfodefaulttitlecolor_);
  } else {
    tschchartinfodefaulttitlecolor_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultbordershadow()) {
    tschchartinfodefaultbordershadow_ = new ::TSD::ShadowArchive(*from.tschchartinfodefaultbordershadow_);
  } else {
    tschchartinfodefaultbordershadow_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultdeprecatedtrendlineequationshadow()) {
    tschchartinfodefaultdeprecatedtrendlineequationshadow_ = new ::TSD::ShadowArchive(*from.tschchartinfodefaultdeprecatedtrendlineequationshadow_);
  } else {
    tschchartinfodefaultdeprecatedtrendlineequationshadow_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()) {
    tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ = new ::TSD::ShadowArchive(*from.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_);
  } else {
    tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ = nullptr;
  }
  if (from._internal_has_tschchartinfobardeprecated3dshadow()) {
    tschchartinfobardeprecated3dshadow_ = new ::TSD::ShadowArchive(*from.tschchartinfobardeprecated3dshadow_);
  } else {
    tschchartinfobardeprecated3dshadow_ = nullptr;
  }
  if (from._internal_has_tschchartinfocolumndeprecated3dshadow()) {
    tschchartinfocolumndeprecated3dshadow_ = new ::TSD::ShadowArchive(*from.tschchartinfocolumndeprecated3dshadow_);
  } else {
    tschchartinfocolumndeprecated3dshadow_ = nullptr;
  }
  if (from._internal_has_tschchartinfolinedeprecated3dshadow()) {
    tschchartinfolinedeprecated3dshadow_ = new ::TSD::ShadowArchive(*from.tschchartinfolinedeprecated3dshadow_);
  } else {
    tschchartinfolinedeprecated3dshadow_ = nullptr;
  }
  if (from._internal_has_tschchartinfoareadeprecated3dshadow()) {
    tschchartinfoareadeprecated3dshadow_ = new ::TSD::ShadowArchive(*from.tschchartinfoareadeprecated3dshadow_);
  } else {
    tschchartinfoareadeprecated3dshadow_ = nullptr;
  }
  if (from._internal_has_tschchartinfopiedeprecated3dshadow()) {
    tschchartinfopiedeprecated3dshadow_ = new ::TSD::ShadowArchive(*from.tschchartinfopiedeprecated3dshadow_);
  } else {
    tschchartinfopiedeprecated3dshadow_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefault3dlightingpackage()) {
    tschchartinfodefault3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfodefault3dlightingpackage_);
  } else {
    tschchartinfodefault3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfocolumn3dlightingpackage()) {
    tschchartinfocolumn3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfocolumn3dlightingpackage_);
  } else {
    tschchartinfocolumn3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfobar3dlightingpackage()) {
    tschchartinfobar3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfobar3dlightingpackage_);
  } else {
    tschchartinfobar3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfoline3dlightingpackage()) {
    tschchartinfoline3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfoline3dlightingpackage_);
  } else {
    tschchartinfoline3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfoarea3dlightingpackage()) {
    tschchartinfoarea3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfoarea3dlightingpackage_);
  } else {
    tschchartinfoarea3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfopie3dlightingpackage()) {
    tschchartinfopie3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfopie3dlightingpackage_);
  } else {
    tschchartinfopie3dlightingpackage_ = nullptr;
  }
  ::memcpy(&tschchartinfodefaultintersetgap_, &from.tschchartinfodefaultintersetgap_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartinfodefault3dchartopacity_) -
    reinterpret_cast<char*>(&tschchartinfodefaultintersetgap_)) + sizeof(tschchartinfodefault3dchartopacity_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartStyleArchive)
}

void ChartStyleArchive::SharedCtor() {
tschchartinfodefaultdeprecatedmainfontfamily_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartinfodefault3dchartopacity_) -
    reinterpret_cast<char*>(&super_)) + sizeof(tschchartinfodefault3dchartopacity_));
}

ChartStyleArchive::~ChartStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tschchartinfodefaultdeprecatedmainfontfamily_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete tschchartinfodefaultbackgroundfill_;
  if (this != internal_default_instance()) delete tschchartinfodefaultbackgroundstroke_;
  if (this != internal_default_instance()) delete tschchartinfodefaultgridbackgroundfill_;
  if (this != internal_default_instance()) delete tschchartinfodefaultborderstroke_;
  if (this != internal_default_instance()) delete tschchartinfodefaulttitlecolor_;
  if (this != internal_default_instance()) delete tschchartinfodefaultbordershadow_;
  if (this != internal_default_instance()) delete tschchartinfodefaultdeprecatedtrendlineequationshadow_;
  if (this != internal_default_instance()) delete tschchartinfodefaultdeprecatedtrendlinersquaredshadow_;
  if (this != internal_default_instance()) delete tschchartinfobardeprecated3dshadow_;
  if (this != internal_default_instance()) delete tschchartinfocolumndeprecated3dshadow_;
  if (this != internal_default_instance()) delete tschchartinfolinedeprecated3dshadow_;
  if (this != internal_default_instance()) delete tschchartinfoareadeprecated3dshadow_;
  if (this != internal_default_instance()) delete tschchartinfopiedeprecated3dshadow_;
  if (this != internal_default_instance()) delete tschchartinfodefault3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfocolumn3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfobar3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfoline3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfoarea3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfopie3dlightingpackage_;
}

void ChartStyleArchive::ArenaDtor(void* object) {
  ChartStyleArchive* _this = reinterpret_cast< ChartStyleArchive* >(object);
  (void)_this;
}
void ChartStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartinfodefaultdeprecatedmainfontfamily_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartinfodefaultbackgroundfill_ != nullptr);
      tschchartinfodefaultbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartinfodefaultbackgroundstroke_ != nullptr);
      tschchartinfodefaultbackgroundstroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartinfodefaultgridbackgroundfill_ != nullptr);
      tschchartinfodefaultgridbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartinfodefaultborderstroke_ != nullptr);
      tschchartinfodefaultborderstroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartinfodefaulttitlecolor_ != nullptr);
      tschchartinfodefaulttitlecolor_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartinfodefaultbordershadow_ != nullptr);
      tschchartinfodefaultbordershadow_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartinfodefaultdeprecatedtrendlineequationshadow_ != nullptr);
      tschchartinfodefaultdeprecatedtrendlineequationshadow_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ != nullptr);
      tschchartinfodefaultdeprecatedtrendlinersquaredshadow_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartinfobardeprecated3dshadow_ != nullptr);
      tschchartinfobardeprecated3dshadow_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tschchartinfocolumndeprecated3dshadow_ != nullptr);
      tschchartinfocolumndeprecated3dshadow_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(tschchartinfolinedeprecated3dshadow_ != nullptr);
      tschchartinfolinedeprecated3dshadow_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(tschchartinfoareadeprecated3dshadow_ != nullptr);
      tschchartinfoareadeprecated3dshadow_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(tschchartinfopiedeprecated3dshadow_ != nullptr);
      tschchartinfopiedeprecated3dshadow_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(tschchartinfodefault3dlightingpackage_ != nullptr);
      tschchartinfodefault3dlightingpackage_->Clear();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(tschchartinfocolumn3dlightingpackage_ != nullptr);
      tschchartinfocolumn3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(tschchartinfobar3dlightingpackage_ != nullptr);
      tschchartinfobar3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(tschchartinfoline3dlightingpackage_ != nullptr);
      tschchartinfoline3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(tschchartinfoarea3dlightingpackage_ != nullptr);
      tschchartinfoarea3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(tschchartinfopie3dlightingpackage_ != nullptr);
      tschchartinfopie3dlightingpackage_->Clear();
    }
  }
  if (cached_has_bits & 0x00e00000u) {
    ::memset(&tschchartinfodefaultintersetgap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfodefaultgridbackgroundopacity_) -
        reinterpret_cast<char*>(&tschchartinfodefaultintersetgap_)) + sizeof(tschchartinfodefaultgridbackgroundopacity_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartinfodefaultborderopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfodefaultshowborder_) -
        reinterpret_cast<char*>(&tschchartinfodefaultborderopacity_)) + sizeof(tschchartinfodefaultshowborder_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&tschchartinfodefaultcombinelayers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfodefault3dchartopacity_) -
        reinterpret_cast<char*>(&tschchartinfodefaultcombinelayers_)) + sizeof(tschchartinfodefault3dchartopacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbackgroundfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbackgroundstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultgridbackgroundfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultintersetgap = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_tschchartinfodefaultintersetgap(&_has_bits_);
          tschchartinfodefaultintersetgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultinterbargap = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_tschchartinfodefaultinterbargap(&_has_bits_);
          tschchartinfodefaultinterbargap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowborder = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartinfodefaultshowborder(&_has_bits_);
          tschchartinfodefaultshowborder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultborderstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaulttitlecolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultgridbackgroundopacity = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_tschchartinfodefaultgridbackgroundopacity(&_has_bits_);
          tschchartinfodefaultgridbackgroundopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultcombinelayers = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartinfodefaultcombinelayers(&_has_bits_);
          tschchartinfodefaultcombinelayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbordershadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultborderopacity = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_tschchartinfodefaultborderopacity(&_has_bits_);
          tschchartinfodefaultborderopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartinfodefaulttitleparagraphstyleindex(&_has_bits_);
          tschchartinfodefaulttitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschchartinfodefaultdeprecatedmainfontfamily = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_tschchartinfodefaultdeprecatedmainfontfamily();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedmainfontfamily");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdeprecatedmainfontnamedsize = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedmainfontnamedsize(&_has_bits_);
          tschchartinfodefaultdeprecatedmainfontnamedsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(&_has_bits_);
          tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(&_has_bits_);
          tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultdeprecatedtrendlineequationshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultdeprecatedtrendlinersquaredshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedtrendlineequationopacity(&_has_bits_);
          tschchartinfodefaultdeprecatedtrendlineequationopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(&_has_bits_);
          tschchartinfodefaultdeprecatedtrendlinersquaredopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobardeprecated3dshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
      case 309:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumndeprecated3dshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfolinedeprecated3dshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
      case 311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoareadeprecated3dshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
      case 312:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopiedeprecated3dshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
      case 313:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
      case 314:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumn3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
      case 315:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobar3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
      case 316:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoline3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
      case 317:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoarea3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
      case 318:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopie3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
      case 326:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartinfodefaultdeprecated3dbeveledges(&_has_bits_);
          tschchartinfodefaultdeprecated3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfopiedeprecated3dbeveledges = 327;
      case 327:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartinfopiedeprecated3dbeveledges(&_has_bits_);
          tschchartinfopiedeprecated3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfobardeprecated3dbeveledges = 328;
      case 328:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tschchartinfobardeprecated3dbeveledges(&_has_bits_);
          tschchartinfobardeprecated3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
      case 329:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tschchartinfocolumndeprecated3dbeveledges(&_has_bits_);
          tschchartinfocolumndeprecated3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
      case 330:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tschchartinfodefaultdeprecated3dbarshape(&_has_bits_);
          tschchartinfodefaultdeprecated3dbarshape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefault3dchartopacity = 335;
      case 335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_tschchartinfodefault3dchartopacity(&_has_bits_);
          tschchartinfodefault3dchartopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tschchartinfodefaultbackgroundfill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tschchartinfodefaultbackgroundstroke(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tschchartinfodefaultgridbackgroundfill(this), target, stream);
  }

  // optional float tschchartinfodefaultintersetgap = 13;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_tschchartinfodefaultintersetgap(), target);
  }

  // optional float tschchartinfodefaultinterbargap = 14;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_tschchartinfodefaultinterbargap(), target);
  }

  // optional bool tschchartinfodefaultshowborder = 15;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_tschchartinfodefaultshowborder(), target);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::tschchartinfodefaultborderstroke(this), target, stream);
  }

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::tschchartinfodefaulttitlecolor(this), target, stream);
  }

  // optional float tschchartinfodefaultgridbackgroundopacity = 19;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_tschchartinfodefaultgridbackgroundopacity(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartinfodefaultcombinelayers = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_tschchartinfodefaultcombinelayers(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::tschchartinfodefaultbordershadow(this), target, stream);
  }

  // optional float tschchartinfodefaultborderopacity = 22;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_tschchartinfodefaultborderopacity(), target);
  }

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_tschchartinfodefaulttitleparagraphstyleindex(), target);
  }

  // optional string tschchartinfodefaultdeprecatedmainfontfamily = 24;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartinfodefaultdeprecatedmainfontfamily().data(), static_cast<int>(this->_internal_tschchartinfodefaultdeprecatedmainfontfamily().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedmainfontfamily");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_tschchartinfodefaultdeprecatedmainfontfamily(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedmainfontnamedsize = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartinfodefaultdeprecatedmainfontnamedsize(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::tschchartinfodefaultdeprecatedtrendlineequationshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::tschchartinfodefaultdeprecatedtrendlinersquaredshadow(this), target, stream);
  }

  // optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_tschchartinfodefaultdeprecatedtrendlineequationopacity(), target);
  }

  // optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        308, _Internal::tschchartinfobardeprecated3dshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        309, _Internal::tschchartinfocolumndeprecated3dshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        310, _Internal::tschchartinfolinedeprecated3dshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        311, _Internal::tschchartinfoareadeprecated3dshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        312, _Internal::tschchartinfopiedeprecated3dshadow(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        313, _Internal::tschchartinfodefault3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        314, _Internal::tschchartinfocolumn3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        315, _Internal::tschchartinfobar3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        316, _Internal::tschchartinfoline3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        317, _Internal::tschchartinfoarea3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        318, _Internal::tschchartinfopie3dlightingpackage(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(326, this->_internal_tschchartinfodefaultdeprecated3dbeveledges(), target);
  }

  // optional bool tschchartinfopiedeprecated3dbeveledges = 327;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(327, this->_internal_tschchartinfopiedeprecated3dbeveledges(), target);
  }

  // optional bool tschchartinfobardeprecated3dbeveledges = 328;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(328, this->_internal_tschchartinfobardeprecated3dbeveledges(), target);
  }

  // optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(329, this->_internal_tschchartinfocolumndeprecated3dbeveledges(), target);
  }

  // optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(330, this->_internal_tschchartinfodefaultdeprecated3dbarshape(), target);
  }

  // optional float tschchartinfodefault3dchartopacity = 335;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(335, this->_internal_tschchartinfodefault3dchartopacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartStyleArchive)
  return target;
}

size_t ChartStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tschchartinfodefaultdeprecatedmainfontfamily = 24;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tschchartinfodefaultdeprecatedmainfontfamily());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultbackgroundfill_);
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultbackgroundstroke_);
    }

    // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultgridbackgroundfill_);
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultborderstroke_);
    }

    // optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaulttitlecolor_);
    }

    // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultbordershadow_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultdeprecatedtrendlineequationshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultdeprecatedtrendlinersquaredshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfobardeprecated3dshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfocolumndeprecated3dshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfolinedeprecated3dshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfoareadeprecated3dshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfopiedeprecated3dshadow_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefault3dlightingpackage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfocolumn3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfobar3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfoline3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfoarea3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfopie3dlightingpackage_);
    }

    // optional float tschchartinfodefaultintersetgap = 13;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultinterbargap = 14;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultgridbackgroundopacity = 19;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float tschchartinfodefaultborderopacity = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartinfodefaultdeprecatedmainfontnamedsize = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdeprecatedmainfontnamedsize());
    }

    // optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex());
    }

    // optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex());
    }

    // optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinfodefaultshowborder = 15;
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool tschchartinfodefaultcombinelayers = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfopiedeprecated3dbeveledges = 327;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfobardeprecated3dbeveledges = 328;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdeprecated3dbarshape());
    }

    // optional float tschchartinfodefault3dchartopacity = 335;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.ChartStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.ChartStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.ChartStyleArchive)
    MergeFrom(*source);
  }
}

void ChartStyleArchive::MergeFrom(const ChartStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschchartinfodefaultdeprecatedmainfontfamily(from._internal_tschchartinfodefaultdeprecatedmainfontfamily());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartinfodefaultbackgroundfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartinfodefaultbackgroundfill());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartinfodefaultbackgroundstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartinfodefaultbackgroundstroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartinfodefaultgridbackgroundfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartinfodefaultgridbackgroundfill());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartinfodefaultborderstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartinfodefaultborderstroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartinfodefaulttitlecolor()->::TSP::Color::MergeFrom(from._internal_tschchartinfodefaulttitlecolor());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartinfodefaultbordershadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartinfodefaultbordershadow());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartinfodefaultdeprecatedtrendlineequationshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartinfodefaultdeprecatedtrendlineequationshadow());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartinfodefaultdeprecatedtrendlinersquaredshadow());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartinfobardeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartinfobardeprecated3dshadow());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tschchartinfocolumndeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartinfocolumndeprecated3dshadow());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_tschchartinfolinedeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartinfolinedeprecated3dshadow());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_tschchartinfoareadeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartinfoareadeprecated3dshadow());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_tschchartinfopiedeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartinfopiedeprecated3dshadow());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_tschchartinfodefault3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfodefault3dlightingpackage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_tschchartinfocolumn3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfocolumn3dlightingpackage());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_tschchartinfobar3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfobar3dlightingpackage());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_tschchartinfoline3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfoline3dlightingpackage());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_tschchartinfoarea3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfoarea3dlightingpackage());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_tschchartinfopie3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfopie3dlightingpackage());
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartinfodefaultintersetgap_ = from.tschchartinfodefaultintersetgap_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartinfodefaultinterbargap_ = from.tschchartinfodefaultinterbargap_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartinfodefaultgridbackgroundopacity_ = from.tschchartinfodefaultgridbackgroundopacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartinfodefaultborderopacity_ = from.tschchartinfodefaultborderopacity_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartinfodefaulttitleparagraphstyleindex_ = from.tschchartinfodefaulttitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartinfodefaultdeprecatedmainfontnamedsize_ = from.tschchartinfodefaultdeprecatedmainfontnamedsize_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_ = from.tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_ = from.tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartinfodefaultdeprecatedtrendlineequationopacity_ = from.tschchartinfodefaultdeprecatedtrendlineequationopacity_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartinfodefaultdeprecatedtrendlinersquaredopacity_ = from.tschchartinfodefaultdeprecatedtrendlinersquaredopacity_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartinfodefaultshowborder_ = from.tschchartinfodefaultshowborder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartinfodefaultcombinelayers_ = from.tschchartinfodefaultcombinelayers_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartinfodefaultdeprecated3dbeveledges_ = from.tschchartinfodefaultdeprecated3dbeveledges_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartinfopiedeprecated3dbeveledges_ = from.tschchartinfopiedeprecated3dbeveledges_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartinfobardeprecated3dbeveledges_ = from.tschchartinfobardeprecated3dbeveledges_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartinfocolumndeprecated3dbeveledges_ = from.tschchartinfocolumndeprecated3dbeveledges_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartinfodefaultdeprecated3dbarshape_ = from.tschchartinfodefaultdeprecated3dbarshape_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartinfodefault3dchartopacity_ = from.tschchartinfodefault3dchartopacity_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ChartStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.ChartStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartStyleArchive::CopyFrom(const ChartStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbackgroundfill()) {
    if (!tschchartinfodefaultbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbackgroundstroke()) {
    if (!tschchartinfodefaultbackgroundstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultgridbackgroundfill()) {
    if (!tschchartinfodefaultgridbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultborderstroke()) {
    if (!tschchartinfodefaultborderstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaulttitlecolor()) {
    if (!tschchartinfodefaulttitlecolor_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbordershadow()) {
    if (!tschchartinfodefaultbordershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultdeprecatedtrendlineequationshadow()) {
    if (!tschchartinfodefaultdeprecatedtrendlineequationshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()) {
    if (!tschchartinfodefaultdeprecatedtrendlinersquaredshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobardeprecated3dshadow()) {
    if (!tschchartinfobardeprecated3dshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumndeprecated3dshadow()) {
    if (!tschchartinfocolumndeprecated3dshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfolinedeprecated3dshadow()) {
    if (!tschchartinfolinedeprecated3dshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoareadeprecated3dshadow()) {
    if (!tschchartinfoareadeprecated3dshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopiedeprecated3dshadow()) {
    if (!tschchartinfopiedeprecated3dshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dlightingpackage()) {
    if (!tschchartinfodefault3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumn3dlightingpackage()) {
    if (!tschchartinfocolumn3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobar3dlightingpackage()) {
    if (!tschchartinfobar3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoline3dlightingpackage()) {
    if (!tschchartinfoline3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoarea3dlightingpackage()) {
    if (!tschchartinfoarea3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopie3dlightingpackage()) {
    if (!tschchartinfopie3dlightingpackage_->IsInitialized()) return false;
  }
  return true;
}

void ChartStyleArchive::InternalSwap(ChartStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  tschchartinfodefaultdeprecatedmainfontfamily_.Swap(&other->tschchartinfodefaultdeprecatedmainfontfamily_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefault3dchartopacity_)
      + sizeof(ChartStyleArchive::tschchartinfodefault3dchartopacity_)
      - PROTOBUF_FIELD_OFFSET(ChartStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[6]);
}

// ===================================================================

class ChartNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartNonStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartNonStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tschchartinfodefaulttitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartinfodefaultshowlegend(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartinfodefaultpiestartangle(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartinfodefaultshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartinfodefaultdeprecatedagainmainfontnamedsize(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3drotation(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3drotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfocolumn3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfocolumn3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfobar3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfobar3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfoline3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoline3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfoarea3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoarea3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfopie3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfopie3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dviewport(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3dviewport(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefaultdeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefaultdeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumndeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfocolumndeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobardeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfobardeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfolinedeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfolinedeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoareadeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoareadeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopiedeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfopiedeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartinfodefaultskiphiddendata(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartinfodefault3dbeveledges(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartinfodefault3dbarshape(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartinfodefault3dintersetdepthgap(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSS::StyleArchive&
ChartNonStyleArchive::_Internal::super(const ChartNonStyleArchive* msg) {
  return *msg->super_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3drotation(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfodefault3drotation_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfodefault3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfocolumn3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfocolumn3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfobar3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfobar3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfoline3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfoline3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfoarea3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfoarea3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfopie3dscale(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfopie3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3dviewport(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfodefault3dviewport_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefaultdeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfodefaultdeprecated3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfocolumndeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfocolumndeprecated3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfobardeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfobardeprecated3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfolinedeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfolinedeprecated3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfoareadeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfoareadeprecated3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfopiedeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->tschchartinfopiedeprecated3dlightingpackage_;
}
void ChartNonStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3drotation() {
  if (tschchartinfodefault3drotation_ != nullptr) tschchartinfodefault3drotation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3dscale() {
  if (tschchartinfodefault3dscale_ != nullptr) tschchartinfodefault3dscale_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartNonStyleArchive::clear_tschchartinfocolumn3dscale() {
  if (tschchartinfocolumn3dscale_ != nullptr) tschchartinfocolumn3dscale_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartNonStyleArchive::clear_tschchartinfobar3dscale() {
  if (tschchartinfobar3dscale_ != nullptr) tschchartinfobar3dscale_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartNonStyleArchive::clear_tschchartinfoline3dscale() {
  if (tschchartinfoline3dscale_ != nullptr) tschchartinfoline3dscale_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartNonStyleArchive::clear_tschchartinfoarea3dscale() {
  if (tschchartinfoarea3dscale_ != nullptr) tschchartinfoarea3dscale_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartNonStyleArchive::clear_tschchartinfopie3dscale() {
  if (tschchartinfopie3dscale_ != nullptr) tschchartinfopie3dscale_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3dviewport() {
  if (tschchartinfodefault3dviewport_ != nullptr) tschchartinfodefault3dviewport_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartNonStyleArchive::clear_tschchartinfodefaultdeprecated3dlightingpackage() {
  if (tschchartinfodefaultdeprecated3dlightingpackage_ != nullptr) tschchartinfodefaultdeprecated3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ChartNonStyleArchive::clear_tschchartinfocolumndeprecated3dlightingpackage() {
  if (tschchartinfocolumndeprecated3dlightingpackage_ != nullptr) tschchartinfocolumndeprecated3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ChartNonStyleArchive::clear_tschchartinfobardeprecated3dlightingpackage() {
  if (tschchartinfobardeprecated3dlightingpackage_ != nullptr) tschchartinfobardeprecated3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void ChartNonStyleArchive::clear_tschchartinfolinedeprecated3dlightingpackage() {
  if (tschchartinfolinedeprecated3dlightingpackage_ != nullptr) tschchartinfolinedeprecated3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void ChartNonStyleArchive::clear_tschchartinfoareadeprecated3dlightingpackage() {
  if (tschchartinfoareadeprecated3dlightingpackage_ != nullptr) tschchartinfoareadeprecated3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void ChartNonStyleArchive::clear_tschchartinfopiedeprecated3dlightingpackage() {
  if (tschchartinfopiedeprecated3dlightingpackage_ != nullptr) tschchartinfopiedeprecated3dlightingpackage_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
ChartNonStyleArchive::ChartNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartNonStyleArchive)
}
ChartNonStyleArchive::ChartNonStyleArchive(const ChartNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschchartinfodefaulttitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartinfodefaulttitle()) {
    tschchartinfodefaulttitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartinfodefaulttitle(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefault3drotation()) {
    tschchartinfodefault3drotation_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfodefault3drotation_);
  } else {
    tschchartinfodefault3drotation_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefault3dscale()) {
    tschchartinfodefault3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfodefault3dscale_);
  } else {
    tschchartinfodefault3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfocolumn3dscale()) {
    tschchartinfocolumn3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfocolumn3dscale_);
  } else {
    tschchartinfocolumn3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfobar3dscale()) {
    tschchartinfobar3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfobar3dscale_);
  } else {
    tschchartinfobar3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfoline3dscale()) {
    tschchartinfoline3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfoline3dscale_);
  } else {
    tschchartinfoline3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfoarea3dscale()) {
    tschchartinfoarea3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfoarea3dscale_);
  } else {
    tschchartinfoarea3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfopie3dscale()) {
    tschchartinfopie3dscale_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfopie3dscale_);
  } else {
    tschchartinfopie3dscale_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefault3dviewport()) {
    tschchartinfodefault3dviewport_ = new ::TSCH::Chart3DVectorArchive(*from.tschchartinfodefault3dviewport_);
  } else {
    tschchartinfodefault3dviewport_ = nullptr;
  }
  if (from._internal_has_tschchartinfodefaultdeprecated3dlightingpackage()) {
    tschchartinfodefaultdeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfodefaultdeprecated3dlightingpackage_);
  } else {
    tschchartinfodefaultdeprecated3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfocolumndeprecated3dlightingpackage()) {
    tschchartinfocolumndeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfocolumndeprecated3dlightingpackage_);
  } else {
    tschchartinfocolumndeprecated3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfobardeprecated3dlightingpackage()) {
    tschchartinfobardeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfobardeprecated3dlightingpackage_);
  } else {
    tschchartinfobardeprecated3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfolinedeprecated3dlightingpackage()) {
    tschchartinfolinedeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfolinedeprecated3dlightingpackage_);
  } else {
    tschchartinfolinedeprecated3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfoareadeprecated3dlightingpackage()) {
    tschchartinfoareadeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfoareadeprecated3dlightingpackage_);
  } else {
    tschchartinfoareadeprecated3dlightingpackage_ = nullptr;
  }
  if (from._internal_has_tschchartinfopiedeprecated3dlightingpackage()) {
    tschchartinfopiedeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from.tschchartinfopiedeprecated3dlightingpackage_);
  } else {
    tschchartinfopiedeprecated3dlightingpackage_ = nullptr;
  }
  ::memcpy(&tschchartinfodefaultpiestartangle_, &from.tschchartinfodefaultpiestartangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartinfodefault3dintersetdepthgap_) -
    reinterpret_cast<char*>(&tschchartinfodefaultpiestartangle_)) + sizeof(tschchartinfodefault3dintersetdepthgap_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartNonStyleArchive)
}

void ChartNonStyleArchive::SharedCtor() {
tschchartinfodefaulttitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartinfodefault3dintersetdepthgap_) -
    reinterpret_cast<char*>(&super_)) + sizeof(tschchartinfodefault3dintersetdepthgap_));
}

ChartNonStyleArchive::~ChartNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartNonStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tschchartinfodefaulttitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete tschchartinfodefault3drotation_;
  if (this != internal_default_instance()) delete tschchartinfodefault3dscale_;
  if (this != internal_default_instance()) delete tschchartinfocolumn3dscale_;
  if (this != internal_default_instance()) delete tschchartinfobar3dscale_;
  if (this != internal_default_instance()) delete tschchartinfoline3dscale_;
  if (this != internal_default_instance()) delete tschchartinfoarea3dscale_;
  if (this != internal_default_instance()) delete tschchartinfopie3dscale_;
  if (this != internal_default_instance()) delete tschchartinfodefault3dviewport_;
  if (this != internal_default_instance()) delete tschchartinfodefaultdeprecated3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfocolumndeprecated3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfobardeprecated3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfolinedeprecated3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfoareadeprecated3dlightingpackage_;
  if (this != internal_default_instance()) delete tschchartinfopiedeprecated3dlightingpackage_;
}

void ChartNonStyleArchive::ArenaDtor(void* object) {
  ChartNonStyleArchive* _this = reinterpret_cast< ChartNonStyleArchive* >(object);
  (void)_this;
}
void ChartNonStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartNonStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartinfodefaulttitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartinfodefault3drotation_ != nullptr);
      tschchartinfodefault3drotation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartinfodefault3dscale_ != nullptr);
      tschchartinfodefault3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartinfocolumn3dscale_ != nullptr);
      tschchartinfocolumn3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartinfobar3dscale_ != nullptr);
      tschchartinfobar3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartinfoline3dscale_ != nullptr);
      tschchartinfoline3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartinfoarea3dscale_ != nullptr);
      tschchartinfoarea3dscale_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartinfopie3dscale_ != nullptr);
      tschchartinfopie3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartinfodefault3dviewport_ != nullptr);
      tschchartinfodefault3dviewport_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartinfodefaultdeprecated3dlightingpackage_ != nullptr);
      tschchartinfodefaultdeprecated3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tschchartinfocolumndeprecated3dlightingpackage_ != nullptr);
      tschchartinfocolumndeprecated3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(tschchartinfobardeprecated3dlightingpackage_ != nullptr);
      tschchartinfobardeprecated3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(tschchartinfolinedeprecated3dlightingpackage_ != nullptr);
      tschchartinfolinedeprecated3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(tschchartinfoareadeprecated3dlightingpackage_ != nullptr);
      tschchartinfoareadeprecated3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(tschchartinfopiedeprecated3dlightingpackage_ != nullptr);
      tschchartinfopiedeprecated3dlightingpackage_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartinfodefaultpiestartangle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartinfodefault3dintersetdepthgap_) -
        reinterpret_cast<char*>(&tschchartinfodefaultpiestartangle_)) + sizeof(tschchartinfodefault3dintersetdepthgap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartNonStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschchartinfodefaulttitle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_tschchartinfodefaulttitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaulttitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowlegend = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tschchartinfodefaultshowlegend(&has_bits);
          tschchartinfodefaultshowlegend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultpiestartangle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_tschchartinfodefaultpiestartangle(&has_bits);
          tschchartinfodefaultpiestartangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowtitle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartinfodefaultshowtitle(&has_bits);
          tschchartinfodefaultshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdeprecatedagainmainfontnamedsize = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedagainmainfontnamedsize(&has_bits);
          tschchartinfodefaultdeprecatedagainmainfontnamedsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3drotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumn3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobar3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoline3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoarea3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopie3dscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
      case 313:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dviewport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultdeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
      case 321:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumndeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
      case 322:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobardeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
      case 323:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfolinedeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
      case 324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoareadeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
      case 325:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopiedeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultskiphiddendata = 326;
      case 326:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartinfodefaultskiphiddendata(&has_bits);
          tschchartinfodefaultskiphiddendata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartinfodefault3dbeveledges = 327;
      case 327:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartinfodefault3dbeveledges(&has_bits);
          tschchartinfodefault3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartinfodefault3dintersetdepthgap = 331;
      case 331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_tschchartinfodefault3dintersetdepthgap(&has_bits);
          tschchartinfodefault3dintersetdepthgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefault3dbarshape = 336;
      case 336:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartinfodefault3dbarshape(&has_bits);
          tschchartinfodefault3dbarshape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartNonStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string tschchartinfodefaulttitle = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartinfodefaulttitle().data(), static_cast<int>(this->_internal_tschchartinfodefaulttitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaulttitle");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_tschchartinfodefaulttitle(), target);
  }

  // optional bool tschchartinfodefaultshowlegend = 11;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_tschchartinfodefaultshowlegend(), target);
  }

  // optional float tschchartinfodefaultpiestartangle = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_tschchartinfodefaultpiestartangle(), target);
  }

  // optional bool tschchartinfodefaultshowtitle = 13;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_tschchartinfodefaultshowtitle(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedagainmainfontnamedsize = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartinfodefaultdeprecatedagainmainfontnamedsize(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        300, _Internal::tschchartinfodefault3drotation(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        301, _Internal::tschchartinfodefault3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        302, _Internal::tschchartinfocolumn3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        303, _Internal::tschchartinfobar3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        304, _Internal::tschchartinfoline3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        305, _Internal::tschchartinfoarea3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        306, _Internal::tschchartinfopie3dscale(this), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        313, _Internal::tschchartinfodefault3dviewport(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        320, _Internal::tschchartinfodefaultdeprecated3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        321, _Internal::tschchartinfocolumndeprecated3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        322, _Internal::tschchartinfobardeprecated3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        323, _Internal::tschchartinfolinedeprecated3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        324, _Internal::tschchartinfoareadeprecated3dlightingpackage(this), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        325, _Internal::tschchartinfopiedeprecated3dlightingpackage(this), target, stream);
  }

  // optional bool tschchartinfodefaultskiphiddendata = 326;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(326, this->_internal_tschchartinfodefaultskiphiddendata(), target);
  }

  // optional bool tschchartinfodefault3dbeveledges = 327;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(327, this->_internal_tschchartinfodefault3dbeveledges(), target);
  }

  // optional float tschchartinfodefault3dintersetdepthgap = 331;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(331, this->_internal_tschchartinfodefault3dintersetdepthgap(), target);
  }

  // optional int32 tschchartinfodefault3dbarshape = 336;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(336, this->_internal_tschchartinfodefault3dbarshape(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartNonStyleArchive)
  return target;
}

size_t ChartNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartNonStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tschchartinfodefaulttitle = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tschchartinfodefaulttitle());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefault3drotation_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefault3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfocolumn3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfobar3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfoline3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfoarea3dscale_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfopie3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefault3dviewport_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfodefaultdeprecated3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfocolumndeprecated3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfobardeprecated3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfolinedeprecated3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfoareadeprecated3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartinfopiedeprecated3dlightingpackage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartinfodefaultpiestartangle = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartinfodefaultdeprecatedagainmainfontnamedsize = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdeprecatedagainmainfontnamedsize());
    }

    // optional int32 tschchartinfodefault3dbarshape = 336;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefault3dbarshape());
    }

    // optional bool tschchartinfodefaultshowlegend = 11;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfodefaultshowtitle = 13;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfodefaultskiphiddendata = 326;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefault3dbeveledges = 327;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartinfodefault3dintersetdepthgap = 331;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartNonStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.ChartNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartNonStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartNonStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.ChartNonStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.ChartNonStyleArchive)
    MergeFrom(*source);
  }
}

void ChartNonStyleArchive::MergeFrom(const ChartNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschchartinfodefaulttitle(from._internal_tschchartinfodefaulttitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartinfodefault3drotation()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfodefault3drotation());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartinfodefault3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfodefault3dscale());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartinfocolumn3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfocolumn3dscale());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartinfobar3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfobar3dscale());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartinfoline3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfoline3dscale());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartinfoarea3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfoarea3dscale());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartinfopie3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfopie3dscale());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartinfodefault3dviewport()->::TSCH::Chart3DVectorArchive::MergeFrom(from._internal_tschchartinfodefault3dviewport());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartinfodefaultdeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfodefaultdeprecated3dlightingpackage());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tschchartinfocolumndeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfocolumndeprecated3dlightingpackage());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_tschchartinfobardeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfobardeprecated3dlightingpackage());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_tschchartinfolinedeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfolinedeprecated3dlightingpackage());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_tschchartinfoareadeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfoareadeprecated3dlightingpackage());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_tschchartinfopiedeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from._internal_tschchartinfopiedeprecated3dlightingpackage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartinfodefaultpiestartangle_ = from.tschchartinfodefaultpiestartangle_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartinfodefaultdeprecatedagainmainfontnamedsize_ = from.tschchartinfodefaultdeprecatedagainmainfontnamedsize_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartinfodefault3dbarshape_ = from.tschchartinfodefault3dbarshape_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartinfodefaultshowlegend_ = from.tschchartinfodefaultshowlegend_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartinfodefaultshowtitle_ = from.tschchartinfodefaultshowtitle_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartinfodefaultskiphiddendata_ = from.tschchartinfodefaultskiphiddendata_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartinfodefault3dbeveledges_ = from.tschchartinfodefault3dbeveledges_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartinfodefault3dintersetdepthgap_ = from.tschchartinfodefault3dintersetdepthgap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartNonStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.ChartNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartNonStyleArchive::CopyFrom(const ChartNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartNonStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3drotation()) {
    if (!tschchartinfodefault3drotation_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dscale()) {
    if (!tschchartinfodefault3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumn3dscale()) {
    if (!tschchartinfocolumn3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobar3dscale()) {
    if (!tschchartinfobar3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoline3dscale()) {
    if (!tschchartinfoline3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoarea3dscale()) {
    if (!tschchartinfoarea3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopie3dscale()) {
    if (!tschchartinfopie3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dviewport()) {
    if (!tschchartinfodefault3dviewport_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultdeprecated3dlightingpackage()) {
    if (!tschchartinfodefaultdeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumndeprecated3dlightingpackage()) {
    if (!tschchartinfocolumndeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobardeprecated3dlightingpackage()) {
    if (!tschchartinfobardeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfolinedeprecated3dlightingpackage()) {
    if (!tschchartinfolinedeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoareadeprecated3dlightingpackage()) {
    if (!tschchartinfoareadeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopiedeprecated3dlightingpackage()) {
    if (!tschchartinfopiedeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  return true;
}

void ChartNonStyleArchive::InternalSwap(ChartNonStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tschchartinfodefaulttitle_.Swap(&other->tschchartinfodefaulttitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3dintersetdepthgap_)
      + sizeof(ChartNonStyleArchive::tschchartinfodefault3dintersetdepthgap_)
      - PROTOBUF_FIELD_OFFSET(ChartNonStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartNonStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[7]);
}

// ===================================================================

class LegendStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LegendStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const LegendStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::FillArchive& tschlegendmodeldefaultfill(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultfill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschlegendmodeldefaultstroke(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ShadowArchive& tschlegendmodeldefaultshadow(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschlegendmodeldefaultopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschlegendmodeldefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
LegendStyleArchive::_Internal::super(const LegendStyleArchive* msg) {
  return *msg->super_;
}
const ::TSD::FillArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultfill(const LegendStyleArchive* msg) {
  return *msg->tschlegendmodeldefaultfill_;
}
const ::TSD::StrokeArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultstroke(const LegendStyleArchive* msg) {
  return *msg->tschlegendmodeldefaultstroke_;
}
const ::TSD::ShadowArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultshadow(const LegendStyleArchive* msg) {
  return *msg->tschlegendmodeldefaultshadow_;
}
void LegendStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultfill() {
  if (tschlegendmodeldefaultfill_ != nullptr) tschlegendmodeldefaultfill_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultstroke() {
  if (tschlegendmodeldefaultstroke_ != nullptr) tschlegendmodeldefaultstroke_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultshadow() {
  if (tschlegendmodeldefaultshadow_ != nullptr) tschlegendmodeldefaultshadow_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
LegendStyleArchive::LegendStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.LegendStyleArchive)
}
LegendStyleArchive::LegendStyleArchive(const LegendStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_tschlegendmodeldefaultfill()) {
    tschlegendmodeldefaultfill_ = new ::TSD::FillArchive(*from.tschlegendmodeldefaultfill_);
  } else {
    tschlegendmodeldefaultfill_ = nullptr;
  }
  if (from._internal_has_tschlegendmodeldefaultstroke()) {
    tschlegendmodeldefaultstroke_ = new ::TSD::StrokeArchive(*from.tschlegendmodeldefaultstroke_);
  } else {
    tschlegendmodeldefaultstroke_ = nullptr;
  }
  if (from._internal_has_tschlegendmodeldefaultshadow()) {
    tschlegendmodeldefaultshadow_ = new ::TSD::ShadowArchive(*from.tschlegendmodeldefaultshadow_);
  } else {
    tschlegendmodeldefaultshadow_ = nullptr;
  }
  ::memcpy(&tschlegendmodeldefaultopacity_, &from.tschlegendmodeldefaultopacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschlegendmodeldefaultlabelparagraphstyleindex_) -
    reinterpret_cast<char*>(&tschlegendmodeldefaultopacity_)) + sizeof(tschlegendmodeldefaultlabelparagraphstyleindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.LegendStyleArchive)
}

void LegendStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschlegendmodeldefaultlabelparagraphstyleindex_) -
    reinterpret_cast<char*>(&super_)) + sizeof(tschlegendmodeldefaultlabelparagraphstyleindex_));
}

LegendStyleArchive::~LegendStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.LegendStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LegendStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete tschlegendmodeldefaultfill_;
  if (this != internal_default_instance()) delete tschlegendmodeldefaultstroke_;
  if (this != internal_default_instance()) delete tschlegendmodeldefaultshadow_;
}

void LegendStyleArchive::ArenaDtor(void* object) {
  LegendStyleArchive* _this = reinterpret_cast< LegendStyleArchive* >(object);
  (void)_this;
}
void LegendStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LegendStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LegendStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.LegendStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschlegendmodeldefaultfill_ != nullptr);
      tschlegendmodeldefaultfill_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschlegendmodeldefaultstroke_ != nullptr);
      tschlegendmodeldefaultstroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschlegendmodeldefaultshadow_ != nullptr);
      tschlegendmodeldefaultshadow_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&tschlegendmodeldefaultopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschlegendmodeldefaultlabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&tschlegendmodeldefaultopacity_)) + sizeof(tschlegendmodeldefaultlabelparagraphstyleindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschlegendmodeldefaultopacity = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_tschlegendmodeldefaultopacity(&has_bits);
          tschlegendmodeldefaultopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschlegendmodeldefaultlabelparagraphstyleindex(&has_bits);
          tschlegendmodeldefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LegendStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.LegendStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tschlegendmodeldefaultfill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tschlegendmodeldefaultstroke(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::tschlegendmodeldefaultshadow(this), target, stream);
  }

  // optional float tschlegendmodeldefaultopacity = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_tschlegendmodeldefaultopacity(), target);
  }

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_tschlegendmodeldefaultlabelparagraphstyleindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.LegendStyleArchive)
  return target;
}

size_t LegendStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.LegendStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschlegendmodeldefaultfill_);
    }

    // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschlegendmodeldefaultstroke_);
    }

    // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschlegendmodeldefaultshadow_);
    }

    // optional float tschlegendmodeldefaultopacity = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschlegendmodeldefaultlabelparagraphstyleindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LegendStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.LegendStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const LegendStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LegendStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.LegendStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.LegendStyleArchive)
    MergeFrom(*source);
  }
}

void LegendStyleArchive::MergeFrom(const LegendStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.LegendStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschlegendmodeldefaultfill()->::TSD::FillArchive::MergeFrom(from._internal_tschlegendmodeldefaultfill());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschlegendmodeldefaultstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschlegendmodeldefaultstroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschlegendmodeldefaultshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschlegendmodeldefaultshadow());
    }
    if (cached_has_bits & 0x00000010u) {
      tschlegendmodeldefaultopacity_ = from.tschlegendmodeldefaultopacity_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschlegendmodeldefaultlabelparagraphstyleindex_ = from.tschlegendmodeldefaultlabelparagraphstyleindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LegendStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.LegendStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegendStyleArchive::CopyFrom(const LegendStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.LegendStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultfill()) {
    if (!tschlegendmodeldefaultfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultstroke()) {
    if (!tschlegendmodeldefaultstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultshadow()) {
    if (!tschlegendmodeldefaultshadow_->IsInitialized()) return false;
  }
  return true;
}

void LegendStyleArchive::InternalSwap(LegendStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultlabelparagraphstyleindex_)
      + sizeof(LegendStyleArchive::tschlegendmodeldefaultlabelparagraphstyleindex_)
      - PROTOBUF_FIELD_OFFSET(LegendStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[8]);
}

// ===================================================================

class LegendNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LegendNonStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const LegendNonStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
LegendNonStyleArchive::_Internal::super(const LegendNonStyleArchive* msg) {
  return *msg->super_;
}
void LegendNonStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LegendNonStyleArchive::LegendNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.LegendNonStyleArchive)
}
LegendNonStyleArchive::LegendNonStyleArchive(const LegendNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.LegendNonStyleArchive)
}

void LegendNonStyleArchive::SharedCtor() {
super_ = nullptr;
}

LegendNonStyleArchive::~LegendNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.LegendNonStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LegendNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void LegendNonStyleArchive::ArenaDtor(void* object) {
  LegendNonStyleArchive* _this = reinterpret_cast< LegendNonStyleArchive* >(object);
  (void)_this;
}
void LegendNonStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LegendNonStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LegendNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.LegendNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendNonStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LegendNonStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.LegendNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.LegendNonStyleArchive)
  return target;
}

size_t LegendNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.LegendNonStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LegendNonStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.LegendNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const LegendNonStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LegendNonStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.LegendNonStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.LegendNonStyleArchive)
    MergeFrom(*source);
  }
}

void LegendNonStyleArchive::MergeFrom(const LegendNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.LegendNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
  }
}

void LegendNonStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.LegendNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegendNonStyleArchive::CopyFrom(const LegendNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.LegendNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendNonStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void LegendNonStyleArchive::InternalSwap(LegendNonStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendNonStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[9]);
}

// ===================================================================

class ChartAxisStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartAxisStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartaxisvalueshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartaxisvalueshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvaluemajorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvaluemajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvalueminorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalueminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartaxisvaluetickmarklocation(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxisvalueshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartaxisvalueshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartaxisvaluelabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartaxisvalueshowminimumlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisvaluemajorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvaluemajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisvalueminorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalueminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschchartaxisvaluemajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxisvalueminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartaxisvalueshowaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartaxiscategoryshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartaxiscategoryshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategorymajorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategorymajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategoryminorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategoryminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartaxiscategorytickmarklocation(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartaxiscategoryshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartaxiscategoryshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartaxiscategorylabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartaxiscategoryhorizontalspacing(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartaxiscategoryverticalspacing(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartaxiscategoryshowlastlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSD::ShadowArchive& tschchartaxiscategorymajorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategorymajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::ShadowArchive& tschchartaxiscategoryminorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategoryminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartaxiscategorymajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartaxiscategoryminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartaxiscategoryshowaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartaxisdefaultlabelsorientation(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartaxisdefaulttitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartaxisdefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartaxisvaluetitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartaxisvaluelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartaxiscategorytitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_tschchartaxiscategorylabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvalue3dgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalue3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategory3dgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategory3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxisvalue3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_tschchartaxiscategory3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
ChartAxisStyleArchive::_Internal::super(const ChartAxisStyleArchive* msg) {
  return *msg->super_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvaluemajorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxisvaluemajorgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalueminorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxisvalueminorgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvaluemajorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxisvaluemajorgridlineshadow_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalueminorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxisvalueminorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategorymajorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxiscategorymajorgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategoryminorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxiscategoryminorgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategorymajorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxiscategorymajorgridlineshadow_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategoryminorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxiscategoryminorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalue3dgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxisvalue3dgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategory3dgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->tschchartaxiscategory3dgridlinestroke_;
}
void ChartAxisStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlinestroke() {
  if (tschchartaxisvaluemajorgridlinestroke_ != nullptr) tschchartaxisvaluemajorgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlinestroke() {
  if (tschchartaxisvalueminorgridlinestroke_ != nullptr) tschchartaxisvalueminorgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlineshadow() {
  if (tschchartaxisvaluemajorgridlineshadow_ != nullptr) tschchartaxisvaluemajorgridlineshadow_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlineshadow() {
  if (tschchartaxisvalueminorgridlineshadow_ != nullptr) tschchartaxisvalueminorgridlineshadow_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlinestroke() {
  if (tschchartaxiscategorymajorgridlinestroke_ != nullptr) tschchartaxiscategorymajorgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlinestroke() {
  if (tschchartaxiscategoryminorgridlinestroke_ != nullptr) tschchartaxiscategoryminorgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlineshadow() {
  if (tschchartaxiscategorymajorgridlineshadow_ != nullptr) tschchartaxiscategorymajorgridlineshadow_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlineshadow() {
  if (tschchartaxiscategoryminorgridlineshadow_ != nullptr) tschchartaxiscategoryminorgridlineshadow_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalue3dgridlinestroke() {
  if (tschchartaxisvalue3dgridlinestroke_ != nullptr) tschchartaxisvalue3dgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategory3dgridlinestroke() {
  if (tschchartaxiscategory3dgridlinestroke_ != nullptr) tschchartaxiscategory3dgridlinestroke_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
ChartAxisStyleArchive::ChartAxisStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartAxisStyleArchive)
}
ChartAxisStyleArchive::ChartAxisStyleArchive(const ChartAxisStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_tschchartaxisvaluemajorgridlinestroke()) {
    tschchartaxisvaluemajorgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxisvaluemajorgridlinestroke_);
  } else {
    tschchartaxisvaluemajorgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxisvalueminorgridlinestroke()) {
    tschchartaxisvalueminorgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxisvalueminorgridlinestroke_);
  } else {
    tschchartaxisvalueminorgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxisvaluemajorgridlineshadow()) {
    tschchartaxisvaluemajorgridlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartaxisvaluemajorgridlineshadow_);
  } else {
    tschchartaxisvaluemajorgridlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartaxisvalueminorgridlineshadow()) {
    tschchartaxisvalueminorgridlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartaxisvalueminorgridlineshadow_);
  } else {
    tschchartaxisvalueminorgridlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartaxiscategorymajorgridlinestroke()) {
    tschchartaxiscategorymajorgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxiscategorymajorgridlinestroke_);
  } else {
    tschchartaxiscategorymajorgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxiscategoryminorgridlinestroke()) {
    tschchartaxiscategoryminorgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxiscategoryminorgridlinestroke_);
  } else {
    tschchartaxiscategoryminorgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxiscategorymajorgridlineshadow()) {
    tschchartaxiscategorymajorgridlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartaxiscategorymajorgridlineshadow_);
  } else {
    tschchartaxiscategorymajorgridlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartaxiscategoryminorgridlineshadow()) {
    tschchartaxiscategoryminorgridlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartaxiscategoryminorgridlineshadow_);
  } else {
    tschchartaxiscategoryminorgridlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartaxisvalue3dgridlinestroke()) {
    tschchartaxisvalue3dgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxisvalue3dgridlinestroke_);
  } else {
    tschchartaxisvalue3dgridlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartaxiscategory3dgridlinestroke()) {
    tschchartaxiscategory3dgridlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartaxiscategory3dgridlinestroke_);
  } else {
    tschchartaxiscategory3dgridlinestroke_ = nullptr;
  }
  ::memcpy(&tschchartaxisvalueshowmajorgridlines_, &from.tschchartaxisvalueshowmajorgridlines_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartaxiscategory3dgridlineopacity_) -
    reinterpret_cast<char*>(&tschchartaxisvalueshowmajorgridlines_)) + sizeof(tschchartaxiscategory3dgridlineopacity_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartAxisStyleArchive)
}

void ChartAxisStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartaxiscategory3dgridlineopacity_) -
    reinterpret_cast<char*>(&super_)) + sizeof(tschchartaxiscategory3dgridlineopacity_));
}

ChartAxisStyleArchive::~ChartAxisStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartAxisStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartAxisStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete tschchartaxisvaluemajorgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxisvalueminorgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxisvaluemajorgridlineshadow_;
  if (this != internal_default_instance()) delete tschchartaxisvalueminorgridlineshadow_;
  if (this != internal_default_instance()) delete tschchartaxiscategorymajorgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxiscategoryminorgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxiscategorymajorgridlineshadow_;
  if (this != internal_default_instance()) delete tschchartaxiscategoryminorgridlineshadow_;
  if (this != internal_default_instance()) delete tschchartaxisvalue3dgridlinestroke_;
  if (this != internal_default_instance()) delete tschchartaxiscategory3dgridlinestroke_;
}

void ChartAxisStyleArchive::ArenaDtor(void* object) {
  ChartAxisStyleArchive* _this = reinterpret_cast< ChartAxisStyleArchive* >(object);
  (void)_this;
}
void ChartAxisStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartAxisStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartAxisStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartAxisStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartaxisvaluemajorgridlinestroke_ != nullptr);
      tschchartaxisvaluemajorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartaxisvalueminorgridlinestroke_ != nullptr);
      tschchartaxisvalueminorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartaxisvaluemajorgridlineshadow_ != nullptr);
      tschchartaxisvaluemajorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartaxisvalueminorgridlineshadow_ != nullptr);
      tschchartaxisvalueminorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartaxiscategorymajorgridlinestroke_ != nullptr);
      tschchartaxiscategorymajorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartaxiscategoryminorgridlinestroke_ != nullptr);
      tschchartaxiscategoryminorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartaxiscategorymajorgridlineshadow_ != nullptr);
      tschchartaxiscategorymajorgridlineshadow_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartaxiscategoryminorgridlineshadow_ != nullptr);
      tschchartaxiscategoryminorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartaxisvalue3dgridlinestroke_ != nullptr);
      tschchartaxisvalue3dgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartaxiscategory3dgridlinestroke_ != nullptr);
      tschchartaxiscategory3dgridlinestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&tschchartaxisvalueshowmajorgridlines_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxisvaluetickmarklocation_) -
        reinterpret_cast<char*>(&tschchartaxisvalueshowmajorgridlines_)) + sizeof(tschchartaxisvaluetickmarklocation_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartaxisvaluelabelsorientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxiscategorytickmarklocation_) -
        reinterpret_cast<char*>(&tschchartaxisvaluelabelsorientation_)) + sizeof(tschchartaxiscategorytickmarklocation_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartaxiscategorylabelsorientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxiscategorymajorgridlineopacity_) -
        reinterpret_cast<char*>(&tschchartaxiscategorylabelsorientation_)) + sizeof(tschchartaxiscategorymajorgridlineopacity_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tschchartaxiscategoryminorgridlineopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxiscategorylabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&tschchartaxiscategoryminorgridlineopacity_)) + sizeof(tschchartaxiscategorylabelparagraphstyleindex_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&tschchartaxisvalue3dgridlineopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxiscategory3dgridlineopacity_) -
        reinterpret_cast<char*>(&tschchartaxisvalue3dgridlineopacity_)) + sizeof(tschchartaxiscategory3dgridlineopacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowmajorgridlines = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tschchartaxisvalueshowmajorgridlines(&_has_bits_);
          tschchartaxisvalueshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminorgridlines = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tschchartaxisvalueshowminorgridlines(&_has_bits_);
          tschchartaxisvalueshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvaluemajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalueminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluetickmarklocation = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartaxisvaluetickmarklocation(&_has_bits_);
          tschchartaxisvaluetickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowmajortickmarks = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartaxisvalueshowmajortickmarks(&_has_bits_);
          tschchartaxisvalueshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminortickmarks = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartaxisvalueshowminortickmarks(&_has_bits_);
          tschchartaxisvalueshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxisvaluelabelsorientation = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_tschchartaxisvaluelabelsorientation(&_has_bits_);
          tschchartaxisvaluelabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminimumlabel = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartaxisvalueshowminimumlabel(&_has_bits_);
          tschchartaxisvalueshowminimumlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvaluemajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalueminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxisvaluemajorgridlineopacity = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_tschchartaxisvaluemajorgridlineopacity(&_has_bits_);
          tschchartaxisvaluemajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxisvalueminorgridlineopacity = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_tschchartaxisvalueminorgridlineopacity(&_has_bits_);
          tschchartaxisvalueminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowaxis = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartaxisvalueshowaxis(&_has_bits_);
          tschchartaxisvalueshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowmajorgridlines = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartaxiscategoryshowmajorgridlines(&_has_bits_);
          tschchartaxiscategoryshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowminorgridlines = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartaxiscategoryshowminorgridlines(&_has_bits_);
          tschchartaxiscategoryshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategorymajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategoryminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorytickmarklocation = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tschchartaxiscategorytickmarklocation(&_has_bits_);
          tschchartaxiscategorytickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowmajortickmarks = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartaxiscategoryshowmajortickmarks(&_has_bits_);
          tschchartaxiscategoryshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowminortickmarks = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartaxiscategoryshowminortickmarks(&_has_bits_);
          tschchartaxiscategoryshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxiscategorylabelsorientation = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_tschchartaxiscategorylabelsorientation(&_has_bits_);
          tschchartaxiscategorylabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategoryhorizontalspacing = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tschchartaxiscategoryhorizontalspacing(&_has_bits_);
          tschchartaxiscategoryhorizontalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategoryverticalspacing = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartaxiscategoryverticalspacing(&_has_bits_);
          tschchartaxiscategoryverticalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowlastlabel = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartaxiscategoryshowlastlabel(&_has_bits_);
          tschchartaxiscategoryshowlastlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategorymajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategoryminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxiscategorymajorgridlineopacity = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_tschchartaxiscategorymajorgridlineopacity(&_has_bits_);
          tschchartaxiscategorymajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxiscategoryminorgridlineopacity = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_tschchartaxiscategoryminorgridlineopacity(&_has_bits_);
          tschchartaxiscategoryminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowaxis = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschchartaxiscategoryshowaxis(&_has_bits_);
          tschchartaxiscategoryshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxisdefaultlabelsorientation = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_tschchartaxisdefaultlabelsorientation(&_has_bits_);
          tschchartaxisdefaultlabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartaxisdefaulttitleparagraphstyleindex(&_has_bits_);
          tschchartaxisdefaulttitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartaxisdefaultlabelparagraphstyleindex(&_has_bits_);
          tschchartaxisdefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartaxisvaluetitleparagraphstyleindex(&_has_bits_);
          tschchartaxisvaluetitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tschchartaxisvaluelabelparagraphstyleindex(&_has_bits_);
          tschchartaxisvaluelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartaxiscategorytitleparagraphstyleindex(&_has_bits_);
          tschchartaxiscategorytitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartaxiscategorylabelparagraphstyleindex(&_has_bits_);
          tschchartaxiscategorylabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
      case 331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalue3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
      case 332:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategory3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxisvalue3dgridlineopacity = 333;
      case 333:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_tschchartaxisvalue3dgridlineopacity(&_has_bits_);
          tschchartaxisvalue3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartaxiscategory3dgridlineopacity = 334;
      case 334:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_tschchartaxiscategory3dgridlineopacity(&_has_bits_);
          tschchartaxiscategory3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartAxisStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartAxisStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool tschchartaxisvalueshowmajorgridlines = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_tschchartaxisvalueshowmajorgridlines(), target);
  }

  // optional bool tschchartaxisvalueshowminorgridlines = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_tschchartaxisvalueshowminorgridlines(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tschchartaxisvaluemajorgridlinestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::tschchartaxisvalueminorgridlinestroke(this), target, stream);
  }

  // optional int32 tschchartaxisvaluetickmarklocation = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_tschchartaxisvaluetickmarklocation(), target);
  }

  // optional bool tschchartaxisvalueshowmajortickmarks = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_tschchartaxisvalueshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowminortickmarks = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_tschchartaxisvalueshowminortickmarks(), target);
  }

  // optional float tschchartaxisvaluelabelsorientation = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_tschchartaxisvaluelabelsorientation(), target);
  }

  // optional bool tschchartaxisvalueshowminimumlabel = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_tschchartaxisvalueshowminimumlabel(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::tschchartaxisvaluemajorgridlineshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::tschchartaxisvalueminorgridlineshadow(this), target, stream);
  }

  // optional float tschchartaxisvaluemajorgridlineopacity = 23;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_tschchartaxisvaluemajorgridlineopacity(), target);
  }

  // optional float tschchartaxisvalueminorgridlineopacity = 24;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_tschchartaxisvalueminorgridlineopacity(), target);
  }

  // optional bool tschchartaxisvalueshowaxis = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_tschchartaxisvalueshowaxis(), target);
  }

  // optional bool tschchartaxiscategoryshowmajorgridlines = 50;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_tschchartaxiscategoryshowmajorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryshowminorgridlines = 51;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_tschchartaxiscategoryshowminorgridlines(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::tschchartaxiscategorymajorgridlinestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::tschchartaxiscategoryminorgridlinestroke(this), target, stream);
  }

  // optional int32 tschchartaxiscategorytickmarklocation = 54;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->_internal_tschchartaxiscategorytickmarklocation(), target);
  }

  // optional bool tschchartaxiscategoryshowmajortickmarks = 55;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(55, this->_internal_tschchartaxiscategoryshowmajortickmarks(), target);
  }

  // optional bool tschchartaxiscategoryshowminortickmarks = 56;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_tschchartaxiscategoryshowminortickmarks(), target);
  }

  // optional float tschchartaxiscategorylabelsorientation = 57;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(57, this->_internal_tschchartaxiscategorylabelsorientation(), target);
  }

  // optional int32 tschchartaxiscategoryhorizontalspacing = 58;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(58, this->_internal_tschchartaxiscategoryhorizontalspacing(), target);
  }

  // optional int32 tschchartaxiscategoryverticalspacing = 59;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(59, this->_internal_tschchartaxiscategoryverticalspacing(), target);
  }

  // optional bool tschchartaxiscategoryshowlastlabel = 60;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_tschchartaxiscategoryshowlastlabel(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        63, _Internal::tschchartaxiscategorymajorgridlineshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        64, _Internal::tschchartaxiscategoryminorgridlineshadow(this), target, stream);
  }

  // optional float tschchartaxiscategorymajorgridlineopacity = 65;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(65, this->_internal_tschchartaxiscategorymajorgridlineopacity(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float tschchartaxiscategoryminorgridlineopacity = 66;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(66, this->_internal_tschchartaxiscategoryminorgridlineopacity(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool tschchartaxiscategoryshowaxis = 67;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(67, this->_internal_tschchartaxiscategoryshowaxis(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float tschchartaxisdefaultlabelsorientation = 102;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(102, this->_internal_tschchartaxisdefaultlabelsorientation(), target);
  }

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_tschchartaxisdefaulttitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(111, this->_internal_tschchartaxisdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(112, this->_internal_tschchartaxisvaluetitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(113, this->_internal_tschchartaxisvaluelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(114, this->_internal_tschchartaxiscategorytitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(115, this->_internal_tschchartaxiscategorylabelparagraphstyleindex(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        331, _Internal::tschchartaxisvalue3dgridlinestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        332, _Internal::tschchartaxiscategory3dgridlinestroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional float tschchartaxisvalue3dgridlineopacity = 333;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(333, this->_internal_tschchartaxisvalue3dgridlineopacity(), target);
  }

  // optional float tschchartaxiscategory3dgridlineopacity = 334;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(334, this->_internal_tschchartaxiscategory3dgridlineopacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartAxisStyleArchive)
  return target;
}

size_t ChartAxisStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartAxisStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisvaluemajorgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisvalueminorgridlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisvaluemajorgridlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisvalueminorgridlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxiscategorymajorgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxiscategoryminorgridlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxiscategorymajorgridlineshadow_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxiscategoryminorgridlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisvalue3dgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxiscategory3dgridlinestroke_);
    }

    // optional bool tschchartaxisvalueshowmajorgridlines = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowminorgridlines = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowmajortickmarks = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowminortickmarks = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxisvaluetickmarklocation = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluetickmarklocation());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartaxisvaluelabelsorientation = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxisvaluemajorgridlineopacity = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxisvalueminorgridlineopacity = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartaxisvalueshowminimumlabel = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowaxis = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowmajorgridlines = 50;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminorgridlines = 51;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxiscategorytickmarklocation = 54;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorytickmarklocation());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float tschchartaxiscategorylabelsorientation = 57;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartaxiscategoryhorizontalspacing = 58;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategoryhorizontalspacing());
    }

    // optional int32 tschchartaxiscategoryverticalspacing = 59;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategoryverticalspacing());
    }

    // optional bool tschchartaxiscategoryshowmajortickmarks = 55;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminortickmarks = 56;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowlastlabel = 60;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowaxis = 67;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartaxiscategorymajorgridlineopacity = 65;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float tschchartaxiscategoryminorgridlineopacity = 66;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxisdefaultlabelsorientation = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluetitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluelabelparagraphstyleindex());
    }

    // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorytitleparagraphstyleindex());
    }

    // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorylabelparagraphstyleindex());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float tschchartaxisvalue3dgridlineopacity = 333;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxiscategory3dgridlineopacity = 334;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartAxisStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.ChartAxisStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartAxisStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartAxisStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.ChartAxisStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.ChartAxisStyleArchive)
    MergeFrom(*source);
  }
}

void ChartAxisStyleArchive::MergeFrom(const ChartAxisStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartAxisStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartaxisvaluemajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxisvaluemajorgridlinestroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartaxisvalueminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxisvalueminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartaxisvaluemajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartaxisvaluemajorgridlineshadow());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartaxisvalueminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartaxisvalueminorgridlineshadow());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartaxiscategorymajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxiscategorymajorgridlinestroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartaxiscategoryminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxiscategoryminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartaxiscategorymajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartaxiscategorymajorgridlineshadow());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartaxiscategoryminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartaxiscategoryminorgridlineshadow());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartaxisvalue3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxisvalue3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartaxiscategory3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartaxiscategory3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartaxisvalueshowmajorgridlines_ = from.tschchartaxisvalueshowmajorgridlines_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartaxisvalueshowminorgridlines_ = from.tschchartaxisvalueshowminorgridlines_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartaxisvalueshowmajortickmarks_ = from.tschchartaxisvalueshowmajortickmarks_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartaxisvalueshowminortickmarks_ = from.tschchartaxisvalueshowminortickmarks_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartaxisvaluetickmarklocation_ = from.tschchartaxisvaluetickmarklocation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartaxisvaluelabelsorientation_ = from.tschchartaxisvaluelabelsorientation_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartaxisvaluemajorgridlineopacity_ = from.tschchartaxisvaluemajorgridlineopacity_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartaxisvalueminorgridlineopacity_ = from.tschchartaxisvalueminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartaxisvalueshowminimumlabel_ = from.tschchartaxisvalueshowminimumlabel_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartaxisvalueshowaxis_ = from.tschchartaxisvalueshowaxis_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartaxiscategoryshowmajorgridlines_ = from.tschchartaxiscategoryshowmajorgridlines_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartaxiscategoryshowminorgridlines_ = from.tschchartaxiscategoryshowminorgridlines_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartaxiscategorytickmarklocation_ = from.tschchartaxiscategorytickmarklocation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartaxiscategorylabelsorientation_ = from.tschchartaxiscategorylabelsorientation_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartaxiscategoryhorizontalspacing_ = from.tschchartaxiscategoryhorizontalspacing_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartaxiscategoryverticalspacing_ = from.tschchartaxiscategoryverticalspacing_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartaxiscategoryshowmajortickmarks_ = from.tschchartaxiscategoryshowmajortickmarks_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartaxiscategoryshowminortickmarks_ = from.tschchartaxiscategoryshowminortickmarks_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartaxiscategoryshowlastlabel_ = from.tschchartaxiscategoryshowlastlabel_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartaxiscategoryshowaxis_ = from.tschchartaxiscategoryshowaxis_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartaxiscategorymajorgridlineopacity_ = from.tschchartaxiscategorymajorgridlineopacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartaxiscategoryminorgridlineopacity_ = from.tschchartaxiscategoryminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartaxisdefaultlabelsorientation_ = from.tschchartaxisdefaultlabelsorientation_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartaxisdefaulttitleparagraphstyleindex_ = from.tschchartaxisdefaulttitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartaxisdefaultlabelparagraphstyleindex_ = from.tschchartaxisdefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartaxisvaluetitleparagraphstyleindex_ = from.tschchartaxisvaluetitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartaxisvaluelabelparagraphstyleindex_ = from.tschchartaxisvaluelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartaxiscategorytitleparagraphstyleindex_ = from.tschchartaxiscategorytitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartaxiscategorylabelparagraphstyleindex_ = from.tschchartaxiscategorylabelparagraphstyleindex_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      tschchartaxisvalue3dgridlineopacity_ = from.tschchartaxisvalue3dgridlineopacity_;
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartaxiscategory3dgridlineopacity_ = from.tschchartaxiscategory3dgridlineopacity_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ChartAxisStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.ChartAxisStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisStyleArchive::CopyFrom(const ChartAxisStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartAxisStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvaluemajorgridlinestroke()) {
    if (!tschchartaxisvaluemajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalueminorgridlinestroke()) {
    if (!tschchartaxisvalueminorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvaluemajorgridlineshadow()) {
    if (!tschchartaxisvaluemajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalueminorgridlineshadow()) {
    if (!tschchartaxisvalueminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategorymajorgridlinestroke()) {
    if (!tschchartaxiscategorymajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategoryminorgridlinestroke()) {
    if (!tschchartaxiscategoryminorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategorymajorgridlineshadow()) {
    if (!tschchartaxiscategorymajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategoryminorgridlineshadow()) {
    if (!tschchartaxiscategoryminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalue3dgridlinestroke()) {
    if (!tschchartaxisvalue3dgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategory3dgridlinestroke()) {
    if (!tschchartaxiscategory3dgridlinestroke_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisStyleArchive::InternalSwap(ChartAxisStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategory3dgridlineopacity_)
      + sizeof(ChartAxisStyleArchive::tschchartaxiscategory3dgridlineopacity_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[10]);
}

// ===================================================================

class ChartAxisNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisNonStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartAxisNonStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermin(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultusermin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermax(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultusermax(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartaxisdefaultnumberformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschchartaxisdefaultshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxisvaluenumberofminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartaxisvaluescale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartaxisvaluenumberofdecades(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartaxisvalueshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartaxisvalueshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartaxisvaluenumberofmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartaxisvaluetitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartaxiscategoryshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartaxiscategoryshowserieslabels(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartaxiscategoryshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxiscategorytitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tschchartaxisdefaultnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxisdefault3dlabelposition(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartaxiscategoryplottoedges(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSS::StyleArchive&
ChartAxisNonStyleArchive::_Internal::super(const ChartAxisNonStyleArchive* msg) {
  return *msg->super_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultusermin(const ChartAxisNonStyleArchive* msg) {
  return *msg->tschchartaxisdefaultusermin_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultusermax(const ChartAxisNonStyleArchive* msg) {
  return *msg->tschchartaxisdefaultusermax_;
}
const ::TSCH::PreUFF::ChartsNumberFormatArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultnumberformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->tschchartaxisdefaultnumberformat_;
}
void ChartAxisNonStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermin() {
  if (tschchartaxisdefaultusermin_ != nullptr) tschchartaxisdefaultusermin_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermax() {
  if (tschchartaxisdefaultusermax_ != nullptr) tschchartaxisdefaultusermax_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartAxisNonStyleArchive)
}
ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschchartaxisvaluetitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartaxisvaluetitle()) {
    tschchartaxisvaluetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartaxisvaluetitle(), 
      GetArena());
  }
  tschchartaxiscategorytitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartaxiscategorytitle()) {
    tschchartaxiscategorytitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartaxiscategorytitle(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_tschchartaxisdefaultusermin()) {
    tschchartaxisdefaultusermin_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from.tschchartaxisdefaultusermin_);
  } else {
    tschchartaxisdefaultusermin_ = nullptr;
  }
  if (from._internal_has_tschchartaxisdefaultusermax()) {
    tschchartaxisdefaultusermax_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from.tschchartaxisdefaultusermax_);
  } else {
    tschchartaxisdefaultusermax_ = nullptr;
  }
  if (from._internal_has_tschchartaxisdefaultnumberformat()) {
    tschchartaxisdefaultnumberformat_ = new ::TSCH::PreUFF::ChartsNumberFormatArchive(*from.tschchartaxisdefaultnumberformat_);
  } else {
    tschchartaxisdefaultnumberformat_ = nullptr;
  }
  ::memcpy(&tschchartaxisvaluenumberofminorgridlines_, &from.tschchartaxisvaluenumberofminorgridlines_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartaxisdefault3dlabelposition_) -
    reinterpret_cast<char*>(&tschchartaxisvaluenumberofminorgridlines_)) + sizeof(tschchartaxisdefault3dlabelposition_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartAxisNonStyleArchive)
}

void ChartAxisNonStyleArchive::SharedCtor() {
tschchartaxisvaluetitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tschchartaxiscategorytitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartaxisdefault3dlabelposition_) -
    reinterpret_cast<char*>(&super_)) + sizeof(tschchartaxisdefault3dlabelposition_));
}

ChartAxisNonStyleArchive::~ChartAxisNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartAxisNonStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartAxisNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tschchartaxisvaluetitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tschchartaxiscategorytitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete tschchartaxisdefaultusermin_;
  if (this != internal_default_instance()) delete tschchartaxisdefaultusermax_;
  if (this != internal_default_instance()) delete tschchartaxisdefaultnumberformat_;
}

void ChartAxisNonStyleArchive::ArenaDtor(void* object) {
  ChartAxisNonStyleArchive* _this = reinterpret_cast< ChartAxisNonStyleArchive* >(object);
  (void)_this;
}
void ChartAxisNonStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartAxisNonStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartAxisNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartaxisvaluetitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartaxiscategorytitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartaxisdefaultusermin_ != nullptr);
      tschchartaxisdefaultusermin_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartaxisdefaultusermax_ != nullptr);
      tschchartaxisdefaultusermax_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartaxisdefaultnumberformat_ != nullptr);
      tschchartaxisdefaultnumberformat_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&tschchartaxisvaluenumberofminorgridlines_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxisvaluescale_) -
        reinterpret_cast<char*>(&tschchartaxisvaluenumberofminorgridlines_)) + sizeof(tschchartaxisvaluescale_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tschchartaxisvaluenumberofdecades_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxiscategoryshowtitle_) -
        reinterpret_cast<char*>(&tschchartaxisvaluenumberofdecades_)) + sizeof(tschchartaxiscategoryshowtitle_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&tschchartaxiscategoryplottoedges_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartaxisdefault3dlabelposition_) -
        reinterpret_cast<char*>(&tschchartaxiscategoryplottoedges_)) + sizeof(tschchartaxisdefault3dlabelposition_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisNonStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultusermin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultusermax(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultnumberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisdefaultshowlabels = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartaxisdefaultshowlabels(&has_bits);
          tschchartaxisdefaultshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartaxisvaluenumberofminorgridlines(&has_bits);
          tschchartaxisvaluenumberofminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluescale = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartaxisvaluescale(&has_bits);
          tschchartaxisvaluescale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofdecades = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartaxisvaluenumberofdecades(&has_bits);
          tschchartaxisvaluenumberofdecades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowlabels = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartaxisvalueshowlabels(&has_bits);
          tschchartaxisvalueshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowtitle = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tschchartaxisvalueshowtitle(&has_bits);
          tschchartaxisvalueshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartaxisvaluenumberofmajorgridlines(&has_bits);
          tschchartaxisvaluenumberofmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschchartaxisvaluetitle = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_tschchartaxisvaluetitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluetitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowlabels = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tschchartaxiscategoryshowlabels(&has_bits);
          tschchartaxiscategoryshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowserieslabels = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartaxiscategoryshowserieslabels(&has_bits);
          tschchartaxiscategoryshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowtitle = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartaxiscategoryshowtitle(&has_bits);
          tschchartaxiscategoryshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschchartaxiscategorytitle = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_tschchartaxiscategorytitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategorytitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryplottoedges = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartaxiscategoryplottoedges(&has_bits);
          tschchartaxiscategoryplottoedges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaultnumberformattype = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartaxisdefaultnumberformattype(&has_bits);
          tschchartaxisdefaultnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefault3dlabelposition = 336;
      case 336:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartaxisdefault3dlabelposition(&has_bits);
          tschchartaxisdefault3dlabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartAxisNonStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tschchartaxisdefaultusermin(this), target, stream);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tschchartaxisdefaultusermax(this), target, stream);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::tschchartaxisdefaultnumberformat(this), target, stream);
  }

  // optional bool tschchartaxisdefaultshowlabels = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_tschchartaxisdefaultshowlabels(), target);
  }

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_tschchartaxisvaluenumberofminorgridlines(), target);
  }

  // optional int32 tschchartaxisvaluescale = 51;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(51, this->_internal_tschchartaxisvaluescale(), target);
  }

  // optional int32 tschchartaxisvaluenumberofdecades = 52;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(52, this->_internal_tschchartaxisvaluenumberofdecades(), target);
  }

  // optional bool tschchartaxisvalueshowlabels = 53;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(53, this->_internal_tschchartaxisvalueshowlabels(), target);
  }

  // optional bool tschchartaxisvalueshowtitle = 54;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(54, this->_internal_tschchartaxisvalueshowtitle(), target);
  }

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(55, this->_internal_tschchartaxisvaluenumberofmajorgridlines(), target);
  }

  // optional string tschchartaxisvaluetitle = 56;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxisvaluetitle().data(), static_cast<int>(this->_internal_tschchartaxisvaluetitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluetitle");
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_tschchartaxisvaluetitle(), target);
  }

  // optional bool tschchartaxiscategoryshowlabels = 100;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(100, this->_internal_tschchartaxiscategoryshowlabels(), target);
  }

  // optional bool tschchartaxiscategoryshowserieslabels = 101;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(101, this->_internal_tschchartaxiscategoryshowserieslabels(), target);
  }

  // optional bool tschchartaxiscategoryshowtitle = 102;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(102, this->_internal_tschchartaxiscategoryshowtitle(), target);
  }

  // optional string tschchartaxiscategorytitle = 103;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxiscategorytitle().data(), static_cast<int>(this->_internal_tschchartaxiscategorytitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategorytitle");
    target = stream->WriteStringMaybeAliased(
        103, this->_internal_tschchartaxiscategorytitle(), target);
  }

  // optional bool tschchartaxiscategoryplottoedges = 116;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(116, this->_internal_tschchartaxiscategoryplottoedges(), target);
  }

  // optional int32 tschchartaxisdefaultnumberformattype = 120;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(120, this->_internal_tschchartaxisdefaultnumberformattype(), target);
  }

  // optional int32 tschchartaxisdefault3dlabelposition = 336;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(336, this->_internal_tschchartaxisdefault3dlabelposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartAxisNonStyleArchive)
  return target;
}

size_t ChartAxisNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tschchartaxisvaluetitle = 56;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxisvaluetitle());
    }

    // optional string tschchartaxiscategorytitle = 103;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxiscategorytitle());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdefaultusermin_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdefaultusermax_);
    }

    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartaxisdefaultnumberformat_);
    }

    // optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluenumberofminorgridlines());
    }

    // optional int32 tschchartaxisvaluescale = 51;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluescale());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tschchartaxisvaluenumberofdecades = 52;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluenumberofdecades());
    }

    // optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluenumberofmajorgridlines());
    }

    // optional bool tschchartaxisdefaultshowlabels = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowlabels = 53;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowtitle = 54;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowlabels = 100;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowserieslabels = 101;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowtitle = 102;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool tschchartaxiscategoryplottoedges = 116;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxisdefaultnumberformattype = 120;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaultnumberformattype());
    }

    // optional int32 tschchartaxisdefault3dlabelposition = 336;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefault3dlabelposition());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartAxisNonStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartAxisNonStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartAxisNonStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.ChartAxisNonStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.ChartAxisNonStyleArchive)
    MergeFrom(*source);
  }
}

void ChartAxisNonStyleArchive::MergeFrom(const ChartAxisNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschchartaxisvaluetitle(from._internal_tschchartaxisvaluetitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tschchartaxiscategorytitle(from._internal_tschchartaxiscategorytitle());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartaxisdefaultusermin()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from._internal_tschchartaxisdefaultusermin());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartaxisdefaultusermax()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from._internal_tschchartaxisdefaultusermax());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartaxisdefaultnumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(from._internal_tschchartaxisdefaultnumberformat());
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartaxisvaluenumberofminorgridlines_ = from.tschchartaxisvaluenumberofminorgridlines_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartaxisvaluescale_ = from.tschchartaxisvaluescale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tschchartaxisvaluenumberofdecades_ = from.tschchartaxisvaluenumberofdecades_;
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartaxisvaluenumberofmajorgridlines_ = from.tschchartaxisvaluenumberofmajorgridlines_;
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartaxisdefaultshowlabels_ = from.tschchartaxisdefaultshowlabels_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartaxisvalueshowlabels_ = from.tschchartaxisvalueshowlabels_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartaxisvalueshowtitle_ = from.tschchartaxisvalueshowtitle_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartaxiscategoryshowlabels_ = from.tschchartaxiscategoryshowlabels_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartaxiscategoryshowserieslabels_ = from.tschchartaxiscategoryshowserieslabels_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartaxiscategoryshowtitle_ = from.tschchartaxiscategoryshowtitle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartaxiscategoryplottoedges_ = from.tschchartaxiscategoryplottoedges_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartaxisdefaultnumberformattype_ = from.tschchartaxisdefaultnumberformattype_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartaxisdefault3dlabelposition_ = from.tschchartaxisdefault3dlabelposition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartAxisNonStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisNonStyleArchive::CopyFrom(const ChartAxisNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisNonStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdefaultnumberformat()) {
    if (!tschchartaxisdefaultnumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisNonStyleArchive::InternalSwap(ChartAxisNonStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tschchartaxisvaluetitle_.Swap(&other->tschchartaxisvaluetitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tschchartaxiscategorytitle_.Swap(&other->tschchartaxiscategorytitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefault3dlabelposition_)
      + sizeof(ChartAxisNonStyleArchive::tschchartaxisdefault3dlabelposition_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisNonStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisNonStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[11]);
}

// ===================================================================

class ChartSeriesStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartSeriesStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationopacity(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredopacity(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static const ::TSD::FillArchive& tschchartseriesbarfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarfill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbarstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartseriesbarvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::TSD::StrokeArchive& tschchartserieslinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::FillArchive& tschchartserieslinesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinesymbolfill(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::StrokeArchive& tschchartserieslinesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinesymbolstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschchartserieslinesymbolsize(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartserieslinevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static const ::TSD::FillArchive& tschchartseriesareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesareastroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareastroke(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartseriesareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::TSD::FillArchive& tschchartseriesareasymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareasymbolfill(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesareasymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareasymbolstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartseriesareasymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::TSD::FillArchive& tschchartseriespiefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiefill(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSD::StrokeArchive& tschchartseriespiestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesscatterstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscatterstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::FillArchive& tschchartseriesscattersymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattersymbolfill(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesscattersymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattersymbolstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartseriesscattersymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_tschchartseriesscattervaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static const ::TSD::FillArchive& tschchartseriesdefaultfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultfill(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartseriesdefaultvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_tschchartseriespiedeprecatedserieslabelson(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static const ::TSD::FillArchive& tschchartseriescolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriescolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSD::ShadowArchive& tschchartseriespieshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespieshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesscattershadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedcolumnshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSD::ShadowArchive& tschchartserieslineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaultshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSD::FillArchive& tschchartseriesbubblesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblesymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbubblestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbubblesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_tschchartseriesbubblevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesbubbleshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubbleshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_tschchartseriesbubblesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dbarshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dcolumnshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dcolumnshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dlineshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dareashadow(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dpieshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dpieshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_tschchartseriesdefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_tschchartseriesbarlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_tschchartserieslinelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_tschchartseriesarealabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_tschchartseriespielabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_tschchartseriesmixedlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_tschchartseriesdefaultopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_tschchartserieslinesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_tschchartseriesareasymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_tschchartseriesscattersymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_tschchartseriesmixedareasymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_tschchartserieslinesymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_tschchartseriesareasymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_tschchartseriesmixedlinesymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_tschchartseriesmixedareasymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedcolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedcolumnstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedlinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedareastroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareastroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartseriesmixedlinesymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_tschchartseriesmixedareasymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedlinesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinesymbolfill(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedareasymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareasymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedlinesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedareasymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareasymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartseriesmixedcolumnvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_tschchartseriesmixedlinevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_tschchartseriesmixedareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_tschchartseriesbaroutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_tschchartseriesareaoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_tschchartseriespieoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_tschchartseriesstackedbarvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static void set_has_tschchartseriesstackedareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulttrendlinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulttrendlinestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaulttrendlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulttrendlineshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaulterrorbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstrokescatterx(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarstrokescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineend(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarlineend(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineendscatterx(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarlineendscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriesdefaultdeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultdeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriesbardeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbardeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriescolumndeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriescolumndeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartserieslinedeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinedeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriesareadeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareadeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriespiedeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiedeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::TSD::FillArchive& tschchartseries3dbarfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dbarfill(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::TSD::FillArchive& tschchartseries3dcolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dcolumnfill(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::TSD::FillArchive& tschchartseries3dlinefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dlinefill(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::TSD::FillArchive& tschchartseries3dareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dareafill(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::TSD::FillArchive& tschchartseries3dpiefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dpiefill(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
ChartSeriesStyleArchive::_Internal::super(const ChartSeriesStyleArchive* msg) {
  return *msg->super_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbarfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartserieslinestroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartserieslinesymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartserieslinesymbolstroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesareafill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareastroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesareastroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareasymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesareasymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareasymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesareasymbolstroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiefill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriespiefill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriespiestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscatterstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesscatterstroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattersymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesscattersymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattersymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesscattersymbolstroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaultfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriescolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriescolumnfill_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespieshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriespieshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbarshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattershadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesscattershadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedcolumnshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartserieslineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaultshadow_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbubblesymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbubblestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbubblesymbolstroke_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubbleshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbubbleshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dbarshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dcolumnshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dcolumnshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dpieshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dpieshadow_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedcolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedareafill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedcolumnstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedlinestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareastroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedareastroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedlinesymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareasymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedareasymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedlinesymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareasymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesmixedareasymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulttrendlinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulttrendlinestroke_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulttrendlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulttrendlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarstrokescatterx(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarstrokescatterx_;
}
const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarlineend(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarlineend_;
}
const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarlineendscatterx(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarlineendscatterx_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultdeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesdefaultdeprecated3dfill_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbardeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesbardeprecated3dfill_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriescolumndeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriescolumndeprecated3dfill_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinedeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartserieslinedeprecated3dfill_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareadeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriesareadeprecated3dfill_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiedeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseriespiedeprecated3dfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dbarfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dbarfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dcolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dcolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dlinefill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dlinefill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dareafill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dpiefill(const ChartSeriesStyleArchive* msg) {
  return *msg->tschchartseries3dpiefill_;
}
void ChartSeriesStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarfill() {
  if (tschchartseriesbarfill_ != nullptr) tschchartseriesbarfill_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarstroke() {
  if (tschchartseriesbarstroke_ != nullptr) tschchartseriesbarstroke_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinestroke() {
  if (tschchartserieslinestroke_ != nullptr) tschchartserieslinestroke_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfill() {
  if (tschchartserieslinesymbolfill_ != nullptr) tschchartserieslinesymbolfill_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolstroke() {
  if (tschchartserieslinesymbolstroke_ != nullptr) tschchartserieslinesymbolstroke_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareafill() {
  if (tschchartseriesareafill_ != nullptr) tschchartseriesareafill_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareastroke() {
  if (tschchartseriesareastroke_ != nullptr) tschchartseriesareastroke_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfill() {
  if (tschchartseriesareasymbolfill_ != nullptr) tschchartseriesareasymbolfill_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolstroke() {
  if (tschchartseriesareasymbolstroke_ != nullptr) tschchartseriesareasymbolstroke_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiefill() {
  if (tschchartseriespiefill_ != nullptr) tschchartseriespiefill_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiestroke() {
  if (tschchartseriespiestroke_ != nullptr) tschchartseriespiestroke_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscatterstroke() {
  if (tschchartseriesscatterstroke_ != nullptr) tschchartseriesscatterstroke_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolfill() {
  if (tschchartseriesscattersymbolfill_ != nullptr) tschchartseriesscattersymbolfill_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolstroke() {
  if (tschchartseriesscattersymbolstroke_ != nullptr) tschchartseriesscattersymbolstroke_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultfill() {
  if (tschchartseriesdefaultfill_ != nullptr) tschchartseriesdefaultfill_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriescolumnfill() {
  if (tschchartseriescolumnfill_ != nullptr) tschchartseriescolumnfill_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespieshadow() {
  if (tschchartseriespieshadow_ != nullptr) tschchartseriespieshadow_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarshadow() {
  if (tschchartseriesbarshadow_ != nullptr) tschchartseriesbarshadow_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareashadow() {
  if (tschchartseriesareashadow_ != nullptr) tschchartseriesareashadow_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattershadow() {
  if (tschchartseriesscattershadow_ != nullptr) tschchartseriesscattershadow_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlineshadow() {
  if (tschchartseriesmixedlineshadow_ != nullptr) tschchartseriesmixedlineshadow_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareashadow() {
  if (tschchartseriesmixedareashadow_ != nullptr) tschchartseriesmixedareashadow_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnshadow() {
  if (tschchartseriesmixedcolumnshadow_ != nullptr) tschchartseriesmixedcolumnshadow_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslineshadow() {
  if (tschchartserieslineshadow_ != nullptr) tschchartserieslineshadow_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultshadow() {
  if (tschchartseriesdefaultshadow_ != nullptr) tschchartseriesdefaultshadow_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolfill() {
  if (tschchartseriesbubblesymbolfill_ != nullptr) tschchartseriesbubblesymbolfill_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblestroke() {
  if (tschchartseriesbubblestroke_ != nullptr) tschchartseriesbubblestroke_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolstroke() {
  if (tschchartseriesbubblesymbolstroke_ != nullptr) tschchartseriesbubblesymbolstroke_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubbleshadow() {
  if (tschchartseriesbubbleshadow_ != nullptr) tschchartseriesbubbleshadow_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dbarshadow() {
  if (tschchartseries3dbarshadow_ != nullptr) tschchartseries3dbarshadow_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnshadow() {
  if (tschchartseries3dcolumnshadow_ != nullptr) tschchartseries3dcolumnshadow_->Clear();
  _has_bits_[1] &= ~0x00200000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dlineshadow() {
  if (tschchartseries3dlineshadow_ != nullptr) tschchartseries3dlineshadow_->Clear();
  _has_bits_[1] &= ~0x00400000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dareashadow() {
  if (tschchartseries3dareashadow_ != nullptr) tschchartseries3dareashadow_->Clear();
  _has_bits_[1] &= ~0x00800000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dpieshadow() {
  if (tschchartseries3dpieshadow_ != nullptr) tschchartseries3dpieshadow_->Clear();
  _has_bits_[1] &= ~0x01000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnfill() {
  if (tschchartseriesmixedcolumnfill_ != nullptr) tschchartseriesmixedcolumnfill_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareafill() {
  if (tschchartseriesmixedareafill_ != nullptr) tschchartseriesmixedareafill_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnstroke() {
  if (tschchartseriesmixedcolumnstroke_ != nullptr) tschchartseriesmixedcolumnstroke_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinestroke() {
  if (tschchartseriesmixedlinestroke_ != nullptr) tschchartseriesmixedlinestroke_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareastroke() {
  if (tschchartseriesmixedareastroke_ != nullptr) tschchartseriesmixedareastroke_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfill() {
  if (tschchartseriesmixedlinesymbolfill_ != nullptr) tschchartseriesmixedlinesymbolfill_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfill() {
  if (tschchartseriesmixedareasymbolfill_ != nullptr) tschchartseriesmixedareasymbolfill_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolstroke() {
  if (tschchartseriesmixedlinesymbolstroke_ != nullptr) tschchartseriesmixedlinesymbolstroke_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolstroke() {
  if (tschchartseriesmixedareasymbolstroke_ != nullptr) tschchartseriesmixedareasymbolstroke_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinestroke() {
  if (tschchartseriesdefaulttrendlinestroke_ != nullptr) tschchartseriesdefaulttrendlinestroke_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineshadow() {
  if (tschchartseriesdefaulttrendlineshadow_ != nullptr) tschchartseriesdefaulttrendlineshadow_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarshadow() {
  if (tschchartseriesdefaulterrorbarshadow_ != nullptr) tschchartseriesdefaulterrorbarshadow_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstroke() {
  if (tschchartseriesdefaulterrorbarstroke_ != nullptr) tschchartseriesdefaulterrorbarstroke_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstrokescatterx() {
  if (tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr) tschchartseriesdefaulterrorbarstrokescatterx_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineend() {
  if (tschchartseriesdefaulterrorbarlineend_ != nullptr) tschchartseriesdefaulterrorbarlineend_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineendscatterx() {
  if (tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr) tschchartseriesdefaulterrorbarlineendscatterx_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultdeprecated3dfill() {
  if (tschchartseriesdefaultdeprecated3dfill_ != nullptr) tschchartseriesdefaultdeprecated3dfill_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbardeprecated3dfill() {
  if (tschchartseriesbardeprecated3dfill_ != nullptr) tschchartseriesbardeprecated3dfill_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriescolumndeprecated3dfill() {
  if (tschchartseriescolumndeprecated3dfill_ != nullptr) tschchartseriescolumndeprecated3dfill_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinedeprecated3dfill() {
  if (tschchartserieslinedeprecated3dfill_ != nullptr) tschchartserieslinedeprecated3dfill_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareadeprecated3dfill() {
  if (tschchartseriesareadeprecated3dfill_ != nullptr) tschchartseriesareadeprecated3dfill_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiedeprecated3dfill() {
  if (tschchartseriespiedeprecated3dfill_ != nullptr) tschchartseriespiedeprecated3dfill_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dbarfill() {
  if (tschchartseries3dbarfill_ != nullptr) tschchartseries3dbarfill_->Clear();
  _has_bits_[1] &= ~0x02000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnfill() {
  if (tschchartseries3dcolumnfill_ != nullptr) tschchartseries3dcolumnfill_->Clear();
  _has_bits_[1] &= ~0x04000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dlinefill() {
  if (tschchartseries3dlinefill_ != nullptr) tschchartseries3dlinefill_->Clear();
  _has_bits_[1] &= ~0x08000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dareafill() {
  if (tschchartseries3dareafill_ != nullptr) tschchartseries3dareafill_->Clear();
  _has_bits_[1] &= ~0x10000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dpiefill() {
  if (tschchartseries3dpiefill_ != nullptr) tschchartseries3dpiefill_->Clear();
  _has_bits_[1] &= ~0x20000000u;
}
ChartSeriesStyleArchive::ChartSeriesStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartSeriesStyleArchive)
}
ChartSeriesStyleArchive::ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbarfill()) {
    tschchartseriesbarfill_ = new ::TSD::FillArchive(*from.tschchartseriesbarfill_);
  } else {
    tschchartseriesbarfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbarstroke()) {
    tschchartseriesbarstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesbarstroke_);
  } else {
    tschchartseriesbarstroke_ = nullptr;
  }
  if (from._internal_has_tschchartserieslinestroke()) {
    tschchartserieslinestroke_ = new ::TSD::StrokeArchive(*from.tschchartserieslinestroke_);
  } else {
    tschchartserieslinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartserieslinesymbolfill()) {
    tschchartserieslinesymbolfill_ = new ::TSD::FillArchive(*from.tschchartserieslinesymbolfill_);
  } else {
    tschchartserieslinesymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartserieslinesymbolstroke()) {
    tschchartserieslinesymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartserieslinesymbolstroke_);
  } else {
    tschchartserieslinesymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesareafill()) {
    tschchartseriesareafill_ = new ::TSD::FillArchive(*from.tschchartseriesareafill_);
  } else {
    tschchartseriesareafill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesareastroke()) {
    tschchartseriesareastroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesareastroke_);
  } else {
    tschchartseriesareastroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesareasymbolfill()) {
    tschchartseriesareasymbolfill_ = new ::TSD::FillArchive(*from.tschchartseriesareasymbolfill_);
  } else {
    tschchartseriesareasymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesareasymbolstroke()) {
    tschchartseriesareasymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesareasymbolstroke_);
  } else {
    tschchartseriesareasymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriespiefill()) {
    tschchartseriespiefill_ = new ::TSD::FillArchive(*from.tschchartseriespiefill_);
  } else {
    tschchartseriespiefill_ = nullptr;
  }
  if (from._internal_has_tschchartseriespiestroke()) {
    tschchartseriespiestroke_ = new ::TSD::StrokeArchive(*from.tschchartseriespiestroke_);
  } else {
    tschchartseriespiestroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesscatterstroke()) {
    tschchartseriesscatterstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesscatterstroke_);
  } else {
    tschchartseriesscatterstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesscattersymbolfill()) {
    tschchartseriesscattersymbolfill_ = new ::TSD::FillArchive(*from.tschchartseriesscattersymbolfill_);
  } else {
    tschchartseriesscattersymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesscattersymbolstroke()) {
    tschchartseriesscattersymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesscattersymbolstroke_);
  } else {
    tschchartseriesscattersymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultfill()) {
    tschchartseriesdefaultfill_ = new ::TSD::FillArchive(*from.tschchartseriesdefaultfill_);
  } else {
    tschchartseriesdefaultfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriescolumnfill()) {
    tschchartseriescolumnfill_ = new ::TSD::FillArchive(*from.tschchartseriescolumnfill_);
  } else {
    tschchartseriescolumnfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriespieshadow()) {
    tschchartseriespieshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriespieshadow_);
  } else {
    tschchartseriespieshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbarshadow()) {
    tschchartseriesbarshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesbarshadow_);
  } else {
    tschchartseriesbarshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesareashadow()) {
    tschchartseriesareashadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesareashadow_);
  } else {
    tschchartseriesareashadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesscattershadow()) {
    tschchartseriesscattershadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesscattershadow_);
  } else {
    tschchartseriesscattershadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedlineshadow()) {
    tschchartseriesmixedlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesmixedlineshadow_);
  } else {
    tschchartseriesmixedlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedareashadow()) {
    tschchartseriesmixedareashadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesmixedareashadow_);
  } else {
    tschchartseriesmixedareashadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedcolumnshadow()) {
    tschchartseriesmixedcolumnshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesmixedcolumnshadow_);
  } else {
    tschchartseriesmixedcolumnshadow_ = nullptr;
  }
  if (from._internal_has_tschchartserieslineshadow()) {
    tschchartserieslineshadow_ = new ::TSD::ShadowArchive(*from.tschchartserieslineshadow_);
  } else {
    tschchartserieslineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultshadow()) {
    tschchartseriesdefaultshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesdefaultshadow_);
  } else {
    tschchartseriesdefaultshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedcolumnfill()) {
    tschchartseriesmixedcolumnfill_ = new ::TSD::FillArchive(*from.tschchartseriesmixedcolumnfill_);
  } else {
    tschchartseriesmixedcolumnfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedareafill()) {
    tschchartseriesmixedareafill_ = new ::TSD::FillArchive(*from.tschchartseriesmixedareafill_);
  } else {
    tschchartseriesmixedareafill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedcolumnstroke()) {
    tschchartseriesmixedcolumnstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesmixedcolumnstroke_);
  } else {
    tschchartseriesmixedcolumnstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedlinestroke()) {
    tschchartseriesmixedlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesmixedlinestroke_);
  } else {
    tschchartseriesmixedlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedareastroke()) {
    tschchartseriesmixedareastroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesmixedareastroke_);
  } else {
    tschchartseriesmixedareastroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedlinesymbolfill()) {
    tschchartseriesmixedlinesymbolfill_ = new ::TSD::FillArchive(*from.tschchartseriesmixedlinesymbolfill_);
  } else {
    tschchartseriesmixedlinesymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedareasymbolfill()) {
    tschchartseriesmixedareasymbolfill_ = new ::TSD::FillArchive(*from.tschchartseriesmixedareasymbolfill_);
  } else {
    tschchartseriesmixedareasymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedlinesymbolstroke()) {
    tschchartseriesmixedlinesymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesmixedlinesymbolstroke_);
  } else {
    tschchartseriesmixedlinesymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesmixedareasymbolstroke()) {
    tschchartseriesmixedareasymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesmixedareasymbolstroke_);
  } else {
    tschchartseriesmixedareasymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulttrendlinestroke()) {
    tschchartseriesdefaulttrendlinestroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesdefaulttrendlinestroke_);
  } else {
    tschchartseriesdefaulttrendlinestroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulttrendlineshadow()) {
    tschchartseriesdefaulttrendlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesdefaulttrendlineshadow_);
  } else {
    tschchartseriesdefaulttrendlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarshadow()) {
    tschchartseriesdefaulterrorbarshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesdefaulterrorbarshadow_);
  } else {
    tschchartseriesdefaulterrorbarshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarstroke()) {
    tschchartseriesdefaulterrorbarstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesdefaulterrorbarstroke_);
  } else {
    tschchartseriesdefaulterrorbarstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    tschchartseriesdefaulterrorbarstrokescatterx_ = new ::TSD::StrokeArchive(*from.tschchartseriesdefaulterrorbarstrokescatterx_);
  } else {
    tschchartseriesdefaulterrorbarstrokescatterx_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarlineend()) {
    tschchartseriesdefaulterrorbarlineend_ = new ::TSD::LineEndArchive(*from.tschchartseriesdefaulterrorbarlineend_);
  } else {
    tschchartseriesdefaulterrorbarlineend_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    tschchartseriesdefaulterrorbarlineendscatterx_ = new ::TSD::LineEndArchive(*from.tschchartseriesdefaulterrorbarlineendscatterx_);
  } else {
    tschchartseriesdefaulterrorbarlineendscatterx_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbubblesymbolfill()) {
    tschchartseriesbubblesymbolfill_ = new ::TSD::FillArchive(*from.tschchartseriesbubblesymbolfill_);
  } else {
    tschchartseriesbubblesymbolfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbubblestroke()) {
    tschchartseriesbubblestroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesbubblestroke_);
  } else {
    tschchartseriesbubblestroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbubblesymbolstroke()) {
    tschchartseriesbubblesymbolstroke_ = new ::TSD::StrokeArchive(*from.tschchartseriesbubblesymbolstroke_);
  } else {
    tschchartseriesbubblesymbolstroke_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbubbleshadow()) {
    tschchartseriesbubbleshadow_ = new ::TSD::ShadowArchive(*from.tschchartseriesbubbleshadow_);
  } else {
    tschchartseriesbubbleshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultdeprecated3dfill()) {
    tschchartseriesdefaultdeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from.tschchartseriesdefaultdeprecated3dfill_);
  } else {
    tschchartseriesdefaultdeprecated3dfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesbardeprecated3dfill()) {
    tschchartseriesbardeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from.tschchartseriesbardeprecated3dfill_);
  } else {
    tschchartseriesbardeprecated3dfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriescolumndeprecated3dfill()) {
    tschchartseriescolumndeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from.tschchartseriescolumndeprecated3dfill_);
  } else {
    tschchartseriescolumndeprecated3dfill_ = nullptr;
  }
  if (from._internal_has_tschchartserieslinedeprecated3dfill()) {
    tschchartserieslinedeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from.tschchartserieslinedeprecated3dfill_);
  } else {
    tschchartserieslinedeprecated3dfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriesareadeprecated3dfill()) {
    tschchartseriesareadeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from.tschchartseriesareadeprecated3dfill_);
  } else {
    tschchartseriesareadeprecated3dfill_ = nullptr;
  }
  if (from._internal_has_tschchartseriespiedeprecated3dfill()) {
    tschchartseriespiedeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from.tschchartseriespiedeprecated3dfill_);
  } else {
    tschchartseriespiedeprecated3dfill_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dbarshadow()) {
    tschchartseries3dbarshadow_ = new ::TSD::ShadowArchive(*from.tschchartseries3dbarshadow_);
  } else {
    tschchartseries3dbarshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dcolumnshadow()) {
    tschchartseries3dcolumnshadow_ = new ::TSD::ShadowArchive(*from.tschchartseries3dcolumnshadow_);
  } else {
    tschchartseries3dcolumnshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dlineshadow()) {
    tschchartseries3dlineshadow_ = new ::TSD::ShadowArchive(*from.tschchartseries3dlineshadow_);
  } else {
    tschchartseries3dlineshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dareashadow()) {
    tschchartseries3dareashadow_ = new ::TSD::ShadowArchive(*from.tschchartseries3dareashadow_);
  } else {
    tschchartseries3dareashadow_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dpieshadow()) {
    tschchartseries3dpieshadow_ = new ::TSD::ShadowArchive(*from.tschchartseries3dpieshadow_);
  } else {
    tschchartseries3dpieshadow_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dbarfill()) {
    tschchartseries3dbarfill_ = new ::TSD::FillArchive(*from.tschchartseries3dbarfill_);
  } else {
    tschchartseries3dbarfill_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dcolumnfill()) {
    tschchartseries3dcolumnfill_ = new ::TSD::FillArchive(*from.tschchartseries3dcolumnfill_);
  } else {
    tschchartseries3dcolumnfill_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dlinefill()) {
    tschchartseries3dlinefill_ = new ::TSD::FillArchive(*from.tschchartseries3dlinefill_);
  } else {
    tschchartseries3dlinefill_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dareafill()) {
    tschchartseries3dareafill_ = new ::TSD::FillArchive(*from.tschchartseries3dareafill_);
  } else {
    tschchartseries3dareafill_ = nullptr;
  }
  if (from._internal_has_tschchartseries3dpiefill()) {
    tschchartseries3dpiefill_ = new ::TSD::FillArchive(*from.tschchartseries3dpiefill_);
  } else {
    tschchartseries3dpiefill_ = nullptr;
  }
  ::memcpy(&tschchartseriesbarvaluelabelposition_, &from.tschchartseriesbarvaluelabelposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartseriesdefaulttrendlinersquaredopacity_) -
    reinterpret_cast<char*>(&tschchartseriesbarvaluelabelposition_)) + sizeof(tschchartseriesdefaulttrendlinersquaredopacity_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartSeriesStyleArchive)
}

void ChartSeriesStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartseriesdefaulttrendlinersquaredopacity_) -
    reinterpret_cast<char*>(&super_)) + sizeof(tschchartseriesdefaulttrendlinersquaredopacity_));
}

ChartSeriesStyleArchive::~ChartSeriesStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartSeriesStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSeriesStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete tschchartseriesbarfill_;
  if (this != internal_default_instance()) delete tschchartseriesbarstroke_;
  if (this != internal_default_instance()) delete tschchartserieslinestroke_;
  if (this != internal_default_instance()) delete tschchartserieslinesymbolfill_;
  if (this != internal_default_instance()) delete tschchartserieslinesymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriesareafill_;
  if (this != internal_default_instance()) delete tschchartseriesareastroke_;
  if (this != internal_default_instance()) delete tschchartseriesareasymbolfill_;
  if (this != internal_default_instance()) delete tschchartseriesareasymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriespiefill_;
  if (this != internal_default_instance()) delete tschchartseriespiestroke_;
  if (this != internal_default_instance()) delete tschchartseriesscatterstroke_;
  if (this != internal_default_instance()) delete tschchartseriesscattersymbolfill_;
  if (this != internal_default_instance()) delete tschchartseriesscattersymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultfill_;
  if (this != internal_default_instance()) delete tschchartseriescolumnfill_;
  if (this != internal_default_instance()) delete tschchartseriespieshadow_;
  if (this != internal_default_instance()) delete tschchartseriesbarshadow_;
  if (this != internal_default_instance()) delete tschchartseriesareashadow_;
  if (this != internal_default_instance()) delete tschchartseriesscattershadow_;
  if (this != internal_default_instance()) delete tschchartseriesmixedlineshadow_;
  if (this != internal_default_instance()) delete tschchartseriesmixedareashadow_;
  if (this != internal_default_instance()) delete tschchartseriesmixedcolumnshadow_;
  if (this != internal_default_instance()) delete tschchartserieslineshadow_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultshadow_;
  if (this != internal_default_instance()) delete tschchartseriesmixedcolumnfill_;
  if (this != internal_default_instance()) delete tschchartseriesmixedareafill_;
  if (this != internal_default_instance()) delete tschchartseriesmixedcolumnstroke_;
  if (this != internal_default_instance()) delete tschchartseriesmixedlinestroke_;
  if (this != internal_default_instance()) delete tschchartseriesmixedareastroke_;
  if (this != internal_default_instance()) delete tschchartseriesmixedlinesymbolfill_;
  if (this != internal_default_instance()) delete tschchartseriesmixedareasymbolfill_;
  if (this != internal_default_instance()) delete tschchartseriesmixedlinesymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriesmixedareasymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulttrendlinestroke_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulttrendlineshadow_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarshadow_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarstroke_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarstrokescatterx_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarlineend_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarlineendscatterx_;
  if (this != internal_default_instance()) delete tschchartseriesbubblesymbolfill_;
  if (this != internal_default_instance()) delete tschchartseriesbubblestroke_;
  if (this != internal_default_instance()) delete tschchartseriesbubblesymbolstroke_;
  if (this != internal_default_instance()) delete tschchartseriesbubbleshadow_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultdeprecated3dfill_;
  if (this != internal_default_instance()) delete tschchartseriesbardeprecated3dfill_;
  if (this != internal_default_instance()) delete tschchartseriescolumndeprecated3dfill_;
  if (this != internal_default_instance()) delete tschchartserieslinedeprecated3dfill_;
  if (this != internal_default_instance()) delete tschchartseriesareadeprecated3dfill_;
  if (this != internal_default_instance()) delete tschchartseriespiedeprecated3dfill_;
  if (this != internal_default_instance()) delete tschchartseries3dbarshadow_;
  if (this != internal_default_instance()) delete tschchartseries3dcolumnshadow_;
  if (this != internal_default_instance()) delete tschchartseries3dlineshadow_;
  if (this != internal_default_instance()) delete tschchartseries3dareashadow_;
  if (this != internal_default_instance()) delete tschchartseries3dpieshadow_;
  if (this != internal_default_instance()) delete tschchartseries3dbarfill_;
  if (this != internal_default_instance()) delete tschchartseries3dcolumnfill_;
  if (this != internal_default_instance()) delete tschchartseries3dlinefill_;
  if (this != internal_default_instance()) delete tschchartseries3dareafill_;
  if (this != internal_default_instance()) delete tschchartseries3dpiefill_;
}

void ChartSeriesStyleArchive::ArenaDtor(void* object) {
  ChartSeriesStyleArchive* _this = reinterpret_cast< ChartSeriesStyleArchive* >(object);
  (void)_this;
}
void ChartSeriesStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSeriesStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSeriesStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartseriesbarfill_ != nullptr);
      tschchartseriesbarfill_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartseriesbarstroke_ != nullptr);
      tschchartseriesbarstroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartserieslinestroke_ != nullptr);
      tschchartserieslinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartserieslinesymbolfill_ != nullptr);
      tschchartserieslinesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartserieslinesymbolstroke_ != nullptr);
      tschchartserieslinesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartseriesareafill_ != nullptr);
      tschchartseriesareafill_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartseriesareastroke_ != nullptr);
      tschchartseriesareastroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartseriesareasymbolfill_ != nullptr);
      tschchartseriesareasymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartseriesareasymbolstroke_ != nullptr);
      tschchartseriesareasymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartseriespiefill_ != nullptr);
      tschchartseriespiefill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tschchartseriespiestroke_ != nullptr);
      tschchartseriespiestroke_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(tschchartseriesscatterstroke_ != nullptr);
      tschchartseriesscatterstroke_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(tschchartseriesscattersymbolfill_ != nullptr);
      tschchartseriesscattersymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(tschchartseriesscattersymbolstroke_ != nullptr);
      tschchartseriesscattersymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(tschchartseriesdefaultfill_ != nullptr);
      tschchartseriesdefaultfill_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(tschchartseriescolumnfill_ != nullptr);
      tschchartseriescolumnfill_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(tschchartseriespieshadow_ != nullptr);
      tschchartseriespieshadow_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(tschchartseriesbarshadow_ != nullptr);
      tschchartseriesbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(tschchartseriesareashadow_ != nullptr);
      tschchartseriesareashadow_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(tschchartseriesscattershadow_ != nullptr);
      tschchartseriesscattershadow_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(tschchartseriesmixedlineshadow_ != nullptr);
      tschchartseriesmixedlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(tschchartseriesmixedareashadow_ != nullptr);
      tschchartseriesmixedareashadow_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(tschchartseriesmixedcolumnshadow_ != nullptr);
      tschchartseriesmixedcolumnshadow_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(tschchartserieslineshadow_ != nullptr);
      tschchartserieslineshadow_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(tschchartseriesdefaultshadow_ != nullptr);
      tschchartseriesdefaultshadow_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(tschchartseriesmixedcolumnfill_ != nullptr);
      tschchartseriesmixedcolumnfill_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(tschchartseriesmixedareafill_ != nullptr);
      tschchartseriesmixedareafill_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(tschchartseriesmixedcolumnstroke_ != nullptr);
      tschchartseriesmixedcolumnstroke_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(tschchartseriesmixedlinestroke_ != nullptr);
      tschchartseriesmixedlinestroke_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(tschchartseriesmixedareastroke_ != nullptr);
      tschchartseriesmixedareastroke_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(tschchartseriesmixedlinesymbolfill_ != nullptr);
      tschchartseriesmixedlinesymbolfill_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tschchartseriesmixedareasymbolfill_ != nullptr);
      tschchartseriesmixedareasymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tschchartseriesmixedlinesymbolstroke_ != nullptr);
      tschchartseriesmixedlinesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartseriesmixedareasymbolstroke_ != nullptr);
      tschchartseriesmixedareasymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartseriesdefaulttrendlinestroke_ != nullptr);
      tschchartseriesdefaulttrendlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartseriesdefaulttrendlineshadow_ != nullptr);
      tschchartseriesdefaulttrendlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarshadow_ != nullptr);
      tschchartseriesdefaulterrorbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarstroke_ != nullptr);
      tschchartseriesdefaulterrorbarstroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr);
      tschchartseriesdefaulterrorbarstrokescatterx_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarlineend_ != nullptr);
      tschchartseriesdefaulterrorbarlineend_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr);
      tschchartseriesdefaulterrorbarlineendscatterx_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tschchartseriesbubblesymbolfill_ != nullptr);
      tschchartseriesbubblesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tschchartseriesbubblestroke_ != nullptr);
      tschchartseriesbubblestroke_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(tschchartseriesbubblesymbolstroke_ != nullptr);
      tschchartseriesbubblesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(tschchartseriesbubbleshadow_ != nullptr);
      tschchartseriesbubbleshadow_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(tschchartseriesdefaultdeprecated3dfill_ != nullptr);
      tschchartseriesdefaultdeprecated3dfill_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(tschchartseriesbardeprecated3dfill_ != nullptr);
      tschchartseriesbardeprecated3dfill_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(tschchartseriescolumndeprecated3dfill_ != nullptr);
      tschchartseriescolumndeprecated3dfill_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(tschchartserieslinedeprecated3dfill_ != nullptr);
      tschchartserieslinedeprecated3dfill_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(tschchartseriesareadeprecated3dfill_ != nullptr);
      tschchartseriesareadeprecated3dfill_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(tschchartseriespiedeprecated3dfill_ != nullptr);
      tschchartseriespiedeprecated3dfill_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(tschchartseries3dbarshadow_ != nullptr);
      tschchartseries3dbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(tschchartseries3dcolumnshadow_ != nullptr);
      tschchartseries3dcolumnshadow_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(tschchartseries3dlineshadow_ != nullptr);
      tschchartseries3dlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(tschchartseries3dareashadow_ != nullptr);
      tschchartseries3dareashadow_->Clear();
    }
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(tschchartseries3dpieshadow_ != nullptr);
      tschchartseries3dpieshadow_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(tschchartseries3dbarfill_ != nullptr);
      tschchartseries3dbarfill_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(tschchartseries3dcolumnfill_ != nullptr);
      tschchartseries3dcolumnfill_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(tschchartseries3dlinefill_ != nullptr);
      tschchartseries3dlinefill_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(tschchartseries3dareafill_ != nullptr);
      tschchartseries3dareafill_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(tschchartseries3dpiefill_ != nullptr);
      tschchartseries3dpiefill_->Clear();
    }
  }
  if (cached_has_bits & 0xc0000000u) {
    ::memset(&tschchartseriesbarvaluelabelposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartserieslinesymbolsize_) -
        reinterpret_cast<char*>(&tschchartseriesbarvaluelabelposition_)) + sizeof(tschchartserieslinesymbolsize_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tschchartserieslinevaluelabelposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaultlabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&tschchartserieslinevaluelabelposition_)) + sizeof(tschchartseriesdefaultlabelparagraphstyleindex_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tschchartseriesbarlabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesmixedlinesymbolfilluseseriesstroke_) -
        reinterpret_cast<char*>(&tschchartseriesbarlabelparagraphstyleindex_)) + sizeof(tschchartseriesmixedlinesymbolfilluseseriesstroke_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartseriesmixedareasymbolfilluseseriesstroke_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartserieslinesymbolfilluseseriesstroke_) -
        reinterpret_cast<char*>(&tschchartseriesmixedareasymbolfilluseseriesstroke_)) + sizeof(tschchartserieslinesymbolfilluseseriesstroke_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartseriesareasymbolfilluseseriesstroke_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesbaroutsidelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&tschchartseriesareasymbolfilluseseriesstroke_)) + sizeof(tschchartseriesbaroutsidelabelparagraphstyleindex_));
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tschchartseriesareaoutsidelabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaulttrendlineequationopacity_) -
        reinterpret_cast<char*>(&tschchartseriesareaoutsidelabelparagraphstyleindex_)) + sizeof(tschchartseriesdefaulttrendlineequationopacity_));
  }
  tschchartseriesdefaulttrendlinersquaredopacity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesbarfill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarvaluelabelposition = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartseriesbarvaluelabelposition(&_has_bits_);
          tschchartseriesbarvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinesymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinesymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartserieslinesymbolsize = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_tschchartserieslinesymbolsize(&_has_bits_);
          tschchartserieslinesymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinevaluelabelposition = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tschchartserieslinevaluelabelposition(&_has_bits_);
          tschchartserieslinevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesareafill = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareafill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareastroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareavaluelabelposition = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartseriesareavaluelabelposition(&_has_bits_);
          tschchartseriesareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareasymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareasymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesareasymbolsize = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_tschchartseriesareasymbolsize(&_has_bits_);
          tschchartseriesareasymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriespiefill = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiefill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscatterstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattersymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattersymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesscattersymbolsize = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_tschchartseriesscattersymbolsize(&_has_bits_);
          tschchartseriesscattersymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattervaluelabelposition = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartseriesscattervaluelabelposition(&_has_bits_);
          tschchartseriesscattervaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultvaluelabelposition = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartseriesdefaultvaluelabelposition(&_has_bits_);
          tschchartseriesdefaultvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriespiedeprecatedserieslabelson = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartseriespiedeprecatedserieslabelson(&_has_bits_);
          tschchartseriespiedeprecatedserieslabelson_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriescolumnfill = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescolumnfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespieshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareashadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattershadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareashadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartseriesdefaultlabelparagraphstyleindex(&_has_bits_);
          tschchartseriesdefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartseriesbarlabelparagraphstyleindex(&_has_bits_);
          tschchartseriesbarlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartserieslinelabelparagraphstyleindex(&_has_bits_);
          tschchartserieslinelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tschchartseriesarealabelparagraphstyleindex(&_has_bits_);
          tschchartseriesarealabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriespielabelparagraphstyleindex = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartseriespielabelparagraphstyleindex(&_has_bits_);
          tschchartseriespielabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartseriesmixedlabelparagraphstyleindex(&_has_bits_);
          tschchartseriesmixedlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaultopacity = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_tschchartseriesdefaultopacity(&_has_bits_);
          tschchartseriesdefaultopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartserieslinesymbolfilluseseriesstroke(&_has_bits_);
          tschchartserieslinesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tschchartseriesareasymbolfilluseseriesstroke(&_has_bits_);
          tschchartseriesareasymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartseriesscattersymbolfilluseseriesstroke(&_has_bits_);
          tschchartseriesscattersymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke(&_has_bits_);
          tschchartseriesmixedlinesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartseriesmixedareasymbolfilluseseriesstroke(&_has_bits_);
          tschchartseriesmixedareasymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tschchartserieslinesymbolfilluseseriesfill(&_has_bits_);
          tschchartserieslinesymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartseriesareasymbolfilluseseriesfill(&_has_bits_);
          tschchartseriesareasymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolfilluseseriesfill(&_has_bits_);
          tschchartseriesmixedlinesymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_tschchartseriesmixedareasymbolfilluseseriesfill(&_has_bits_);
          tschchartseriesmixedareasymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareafill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareastroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesmixedlinesymbolsize = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolsize(&_has_bits_);
          tschchartseriesmixedlinesymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesmixedareasymbolsize = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_tschchartseriesmixedareasymbolsize(&_has_bits_);
          tschchartseriesmixedareasymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinesymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareasymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinesymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareasymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartseriesmixedcolumnvaluelabelposition(&_has_bits_);
          tschchartseriesmixedcolumnvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tschchartseriesmixedlinevaluelabelposition(&_has_bits_);
          tschchartseriesmixedlinevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedareavaluelabelposition = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tschchartseriesmixedareavaluelabelposition(&_has_bits_);
          tschchartseriesmixedareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartseriesbaroutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriesbaroutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tschchartseriesareaoutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriesareaoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tschchartseriespieoutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriespieoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex(&_has_bits_);
          tschchartseriesmixedoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartseriesstackedbarvaluelabelposition(&_has_bits_);
          tschchartseriesstackedbarvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedareavaluelabelposition = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_tschchartseriesstackedareavaluelabelposition(&_has_bits_);
          tschchartseriesstackedareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulttrendlinestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulttrendlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
      case 180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
      case 182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarlineend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
      case 184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex(&_has_bits_);
          tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(&_has_bits_);
          tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationopacity = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationopacity(&_has_bits_);
          tschchartseriesdefaulttrendlineequationopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredopacity(&_has_bits_);
          tschchartseriesdefaulttrendlinersquaredopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblesymbolfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblestroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblesymbolstroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblevaluelabelposition = 213;
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartseriesbubblevaluelabelposition(&_has_bits_);
          tschchartseriesbubblevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
      case 214:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubbleshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tschchartseriesbubblesymbolfilluseseriesstroke(&_has_bits_);
          tschchartseriesbubblesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultdeprecated3dfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbardeprecated3dfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescolumndeprecated3dfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinedeprecated3dfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareadeprecated3dfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiedeprecated3dfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dbarshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
      case 307:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dcolumnshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dlineshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
      case 309:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dareashadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dpieshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dbarfill = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dbarfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
      case 321:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dcolumnfill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dlinefill = 322;
      case 322:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dlinefill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dareafill = 323;
      case 323:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dareafill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dpiefill = 324;
      case 324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dpiefill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSeriesStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesbarfill = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tschchartseriesbarfill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tschchartseriesbarstroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartseriesbarvaluelabelposition = 13;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_tschchartseriesbarvaluelabelposition(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::tschchartserieslinestroke(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::tschchartserieslinesymbolfill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::tschchartserieslinesymbolstroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional float tschchartserieslinesymbolsize = 20;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_tschchartserieslinesymbolsize(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 tschchartserieslinevaluelabelposition = 22;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_tschchartserieslinevaluelabelposition(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesareafill = 25;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::tschchartseriesareafill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::tschchartseriesareastroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 tschchartseriesareavaluelabelposition = 28;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_tschchartseriesareavaluelabelposition(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::tschchartseriesareasymbolfill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::tschchartseriesareasymbolstroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional float tschchartseriesareasymbolsize = 32;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_tschchartseriesareasymbolsize(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive tschchartseriespiefill = 35;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::tschchartseriespiefill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::tschchartseriespiestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::tschchartseriesscatterstroke(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::tschchartseriesscattersymbolfill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::tschchartseriesscattersymbolstroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional float tschchartseriesscattersymbolsize = 44;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(44, this->_internal_tschchartseriesscattersymbolsize(), target);
  }

  // optional int32 tschchartseriesscattervaluelabelposition = 46;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_tschchartseriesscattervaluelabelposition(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::tschchartseriesdefaultfill(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 tschchartseriesdefaultvaluelabelposition = 52;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(52, this->_internal_tschchartseriesdefaultvaluelabelposition(), target);
  }

  // optional bool tschchartseriespiedeprecatedserieslabelson = 60;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_tschchartseriespiedeprecatedserieslabelson(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive tschchartseriescolumnfill = 62;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        62, _Internal::tschchartseriescolumnfill(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::tschchartseriespieshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::tschchartseriesbarshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::tschchartseriesareashadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::tschchartseriesscattershadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::tschchartseriesmixedlineshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::tschchartseriesmixedareashadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::tschchartseriesmixedcolumnshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::tschchartserieslineshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        108, _Internal::tschchartseriesdefaultshadow(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_tschchartseriesdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(111, this->_internal_tschchartseriesbarlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(112, this->_internal_tschchartserieslinelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(113, this->_internal_tschchartseriesarealabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespielabelparagraphstyleindex = 114;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(114, this->_internal_tschchartseriespielabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(115, this->_internal_tschchartseriesmixedlabelparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaultopacity = 116;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(116, this->_internal_tschchartseriesdefaultopacity(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(117, this->_internal_tschchartserieslinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(118, this->_internal_tschchartseriesareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(119, this->_internal_tschchartseriesscattersymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(120, this->_internal_tschchartseriesmixedlinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(121, this->_internal_tschchartseriesmixedareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(122, this->_internal_tschchartserieslinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(123, this->_internal_tschchartseriesareasymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(124, this->_internal_tschchartseriesmixedlinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(125, this->_internal_tschchartseriesmixedareasymbolfilluseseriesfill(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        130, _Internal::tschchartseriesmixedcolumnfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        131, _Internal::tschchartseriesmixedareafill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        132, _Internal::tschchartseriesmixedcolumnstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        133, _Internal::tschchartseriesmixedlinestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        134, _Internal::tschchartseriesmixedareastroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional float tschchartseriesmixedlinesymbolsize = 135;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(135, this->_internal_tschchartseriesmixedlinesymbolsize(), target);
  }

  // optional float tschchartseriesmixedareasymbolsize = 136;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(136, this->_internal_tschchartseriesmixedareasymbolsize(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        137, _Internal::tschchartseriesmixedlinesymbolfill(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        138, _Internal::tschchartseriesmixedareasymbolfill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        139, _Internal::tschchartseriesmixedlinesymbolstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        140, _Internal::tschchartseriesmixedareasymbolstroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(141, this->_internal_tschchartseriesmixedcolumnvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(142, this->_internal_tschchartseriesmixedlinevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedareavaluelabelposition = 143;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(143, this->_internal_tschchartseriesmixedareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(150, this->_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(151, this->_internal_tschchartseriesbaroutsidelabelparagraphstyleindex(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(153, this->_internal_tschchartseriesareaoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(154, this->_internal_tschchartseriespieoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(155, this->_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(156, this->_internal_tschchartseriesstackedbarvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesstackedareavaluelabelposition = 157;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(157, this->_internal_tschchartseriesstackedareavaluelabelposition(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        167, _Internal::tschchartseriesdefaulttrendlinestroke(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        168, _Internal::tschchartseriesdefaulttrendlineshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        180, _Internal::tschchartseriesdefaulterrorbarshadow(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        181, _Internal::tschchartseriesdefaulterrorbarstroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        182, _Internal::tschchartseriesdefaulterrorbarstrokescatterx(this), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        183, _Internal::tschchartseriesdefaulterrorbarlineend(this), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        184, _Internal::tschchartseriesdefaulterrorbarlineendscatterx(this), target, stream);
  }

  cached_has_bits = _has_bits_[3];
  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(201, this->_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(202, this->_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationopacity = 205;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(205, this->_internal_tschchartseriesdefaulttrendlineequationopacity(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(206, this->_internal_tschchartseriesdefaulttrendlinersquaredopacity(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        207, _Internal::tschchartseriesbubblesymbolfill(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        211, _Internal::tschchartseriesbubblestroke(this), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        212, _Internal::tschchartseriesbubblesymbolstroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 tschchartseriesbubblevaluelabelposition = 213;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(213, this->_internal_tschchartseriesbubblevaluelabelposition(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        214, _Internal::tschchartseriesbubbleshadow(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(215, this->_internal_tschchartseriesbubblesymbolfilluseseriesstroke(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        300, _Internal::tschchartseriesdefaultdeprecated3dfill(this), target, stream);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        301, _Internal::tschchartseriesbardeprecated3dfill(this), target, stream);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        302, _Internal::tschchartseriescolumndeprecated3dfill(this), target, stream);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        303, _Internal::tschchartserieslinedeprecated3dfill(this), target, stream);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        304, _Internal::tschchartseriesareadeprecated3dfill(this), target, stream);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        305, _Internal::tschchartseriespiedeprecated3dfill(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        306, _Internal::tschchartseries3dbarshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        307, _Internal::tschchartseries3dcolumnshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        308, _Internal::tschchartseries3dlineshadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        309, _Internal::tschchartseries3dareashadow(this), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        310, _Internal::tschchartseries3dpieshadow(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dbarfill = 320;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        320, _Internal::tschchartseries3dbarfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        321, _Internal::tschchartseries3dcolumnfill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dlinefill = 322;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        322, _Internal::tschchartseries3dlinefill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dareafill = 323;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        323, _Internal::tschchartseries3dareafill(this), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dpiefill = 324;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        324, _Internal::tschchartseries3dpiefill(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartSeriesStyleArchive)
  return target;
}

size_t ChartSeriesStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.FillArchive tschchartseriesbarfill = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbarfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbarstroke_);
    }

    // optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieslinestroke_);
    }

    // optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieslinesymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieslinesymbolstroke_);
    }

    // optional .TSD.FillArchive tschchartseriesareafill = 25;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesareafill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesareastroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesareasymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesareasymbolstroke_);
    }

    // optional .TSD.FillArchive tschchartseriespiefill = 35;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriespiefill_);
    }

    // optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriespiestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesscatterstroke_);
    }

    // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesscattersymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesscattersymbolstroke_);
    }

    // optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultfill_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.FillArchive tschchartseriescolumnfill = 62;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriescolumnfill_);
    }

    // optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriespieshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbarshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesscattershadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedcolumnshadow_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieslineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultshadow_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedcolumnfill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedareafill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedcolumnstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedareastroke_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedlinesymbolfill_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedareasymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedlinesymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesmixedareasymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulttrendlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulttrendlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarstrokescatterx_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarlineend_);
    }

    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarlineendscatterx_);
    }

    // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbubblesymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbubblestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbubblesymbolstroke_);
    }

    // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbubbleshadow_);
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultdeprecated3dfill_);
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesbardeprecated3dfill_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriescolumndeprecated3dfill_);
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartserieslinedeprecated3dfill_);
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesareadeprecated3dfill_);
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriespiedeprecated3dfill_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dbarshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dcolumnshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dareashadow_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dpieshadow_);
    }

    // optional .TSD.FillArchive tschchartseries3dbarfill = 320;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dbarfill_);
    }

    // optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dcolumnfill_);
    }

    // optional .TSD.FillArchive tschchartseries3dlinefill = 322;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dlinefill_);
    }

    // optional .TSD.FillArchive tschchartseries3dareafill = 323;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dareafill_);
    }

    // optional .TSD.FillArchive tschchartseries3dpiefill = 324;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseries3dpiefill_);
    }

    // optional int32 tschchartseriesbarvaluelabelposition = 13;
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbarvaluelabelposition());
    }

    // optional float tschchartserieslinesymbolsize = 20;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 tschchartserieslinevaluelabelposition = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinevaluelabelposition());
    }

    // optional int32 tschchartseriesareavaluelabelposition = 28;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareavaluelabelposition());
    }

    // optional float tschchartseriesareasymbolsize = 32;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesscattersymbolsize = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesscattervaluelabelposition = 46;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattervaluelabelposition());
    }

    // optional int32 tschchartseriesdefaultvaluelabelposition = 52;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultvaluelabelposition());
    }

    // optional int32 tschchartseriesbubblevaluelabelposition = 213;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblevaluelabelposition());
    }

    // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultlabelparagraphstyleindex());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbarlabelparagraphstyleindex());
    }

    // optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesarealabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespielabelparagraphstyleindex = 114;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespielabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlabelparagraphstyleindex());
    }

    // optional float tschchartseriesdefaultopacity = 116;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespiedeprecatedserieslabelson = 60;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriesmixedlinesymbolsize = 135;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesmixedareasymbolsize = 136;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedcolumnvaluelabelposition());
    }

    // optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinevaluelabelposition());
    }

    // optional int32 tschchartseriesmixedareavaluelabelposition = 143;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedareavaluelabelposition());
    }

    // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbaroutsidelabelparagraphstyleindex());
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareaoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespieoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedbarvaluelabelposition());
    }

    // optional int32 tschchartseriesstackedareavaluelabelposition = 157;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedareavaluelabelposition());
    }

    // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex());
    }

    // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex());
    }

    // optional float tschchartseriesdefaulttrendlineequationopacity = 205;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSeriesStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSeriesStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSeriesStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.ChartSeriesStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.ChartSeriesStyleArchive)
    MergeFrom(*source);
  }
}

void ChartSeriesStyleArchive::MergeFrom(const ChartSeriesStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartseriesbarfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesbarfill());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartseriesbarstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesbarstroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartserieslinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartserieslinestroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartserieslinesymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartserieslinesymbolfill());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartserieslinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartserieslinesymbolstroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartseriesareafill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesareafill());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartseriesareastroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesareastroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartseriesareasymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesareasymbolfill());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartseriesareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesareasymbolstroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartseriespiefill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriespiefill());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tschchartseriespiestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriespiestroke());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_tschchartseriesscatterstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesscatterstroke());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_tschchartseriesscattersymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesscattersymbolfill());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_tschchartseriesscattersymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesscattersymbolstroke());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_tschchartseriesdefaultfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesdefaultfill());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_tschchartseriescolumnfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriescolumnfill());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_tschchartseriespieshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriespieshadow());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_tschchartseriesbarshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesbarshadow());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_tschchartseriesareashadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesareashadow());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_tschchartseriesscattershadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesscattershadow());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_tschchartseriesmixedlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesmixedlineshadow());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_tschchartseriesmixedareashadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesmixedareashadow());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_tschchartseriesmixedcolumnshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesmixedcolumnshadow());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_tschchartserieslineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartserieslineshadow());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_tschchartseriesdefaultshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesdefaultshadow());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_tschchartseriesmixedcolumnfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesmixedcolumnfill());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_tschchartseriesmixedareafill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesmixedareafill());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_tschchartseriesmixedcolumnstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesmixedcolumnstroke());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_tschchartseriesmixedlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesmixedlinestroke());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_tschchartseriesmixedareastroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesmixedareastroke());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_tschchartseriesmixedlinesymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesmixedlinesymbolfill());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tschchartseriesmixedareasymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesmixedareasymbolfill());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tschchartseriesmixedlinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesmixedlinesymbolstroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartseriesmixedareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesmixedareasymbolstroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartseriesdefaulttrendlinestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesdefaulttrendlinestroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartseriesdefaulttrendlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesdefaulttrendlineshadow());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartseriesdefaulterrorbarshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarshadow());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartseriesdefaulterrorbarstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarstroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarstrokescatterx());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartseriesdefaulterrorbarlineend()->::TSD::LineEndArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarlineend());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx()->::TSD::LineEndArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarlineendscatterx());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tschchartseriesbubblesymbolfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseriesbubblesymbolfill());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tschchartseriesbubblestroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesbubblestroke());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_tschchartseriesbubblesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tschchartseriesbubblesymbolstroke());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_tschchartseriesbubbleshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseriesbubbleshadow());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_tschchartseriesdefaultdeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from._internal_tschchartseriesdefaultdeprecated3dfill());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_tschchartseriesbardeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from._internal_tschchartseriesbardeprecated3dfill());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_tschchartseriescolumndeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from._internal_tschchartseriescolumndeprecated3dfill());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_tschchartserieslinedeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from._internal_tschchartserieslinedeprecated3dfill());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_tschchartseriesareadeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from._internal_tschchartseriesareadeprecated3dfill());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_tschchartseriespiedeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(from._internal_tschchartseriespiedeprecated3dfill());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_tschchartseries3dbarshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseries3dbarshadow());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_tschchartseries3dcolumnshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseries3dcolumnshadow());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_tschchartseries3dlineshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseries3dlineshadow());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_tschchartseries3dareashadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseries3dareashadow());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_tschchartseries3dpieshadow()->::TSD::ShadowArchive::MergeFrom(from._internal_tschchartseries3dpieshadow());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_tschchartseries3dbarfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseries3dbarfill());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_tschchartseries3dcolumnfill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseries3dcolumnfill());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_tschchartseries3dlinefill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseries3dlinefill());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_tschchartseries3dareafill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseries3dareafill());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_tschchartseries3dpiefill()->::TSD::FillArchive::MergeFrom(from._internal_tschchartseries3dpiefill());
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartseriesbarvaluelabelposition_ = from.tschchartseriesbarvaluelabelposition_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartserieslinesymbolsize_ = from.tschchartserieslinesymbolsize_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartserieslinevaluelabelposition_ = from.tschchartserieslinevaluelabelposition_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartseriesareavaluelabelposition_ = from.tschchartseriesareavaluelabelposition_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartseriesareasymbolsize_ = from.tschchartseriesareasymbolsize_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartseriesscattersymbolsize_ = from.tschchartseriesscattersymbolsize_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartseriesscattervaluelabelposition_ = from.tschchartseriesscattervaluelabelposition_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartseriesdefaultvaluelabelposition_ = from.tschchartseriesdefaultvaluelabelposition_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartseriesbubblevaluelabelposition_ = from.tschchartseriesbubblevaluelabelposition_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartseriesdefaultlabelparagraphstyleindex_ = from.tschchartseriesdefaultlabelparagraphstyleindex_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tschchartseriesbarlabelparagraphstyleindex_ = from.tschchartseriesbarlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartserieslinelabelparagraphstyleindex_ = from.tschchartserieslinelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartseriesarealabelparagraphstyleindex_ = from.tschchartseriesarealabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartseriespielabelparagraphstyleindex_ = from.tschchartseriespielabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartseriesmixedlabelparagraphstyleindex_ = from.tschchartseriesmixedlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartseriesdefaultopacity_ = from.tschchartseriesdefaultopacity_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartseriesscattersymbolfilluseseriesstroke_ = from.tschchartseriesscattersymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartseriesmixedlinesymbolfilluseseriesstroke_ = from.tschchartseriesmixedlinesymbolfilluseseriesstroke_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartseriesmixedareasymbolfilluseseriesstroke_ = from.tschchartseriesmixedareasymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartserieslinesymbolfilluseseriesfill_ = from.tschchartserieslinesymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartseriesareasymbolfilluseseriesfill_ = from.tschchartseriesareasymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartseriesmixedlinesymbolfilluseseriesfill_ = from.tschchartseriesmixedlinesymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartseriesmixedareasymbolfilluseseriesfill_ = from.tschchartseriesmixedareasymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartseriespiedeprecatedserieslabelson_ = from.tschchartseriespiedeprecatedserieslabelson_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartseriesbubblesymbolfilluseseriesstroke_ = from.tschchartseriesbubblesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartserieslinesymbolfilluseseriesstroke_ = from.tschchartserieslinesymbolfilluseseriesstroke_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartseriesareasymbolfilluseseriesstroke_ = from.tschchartseriesareasymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartseriesmixedlinesymbolsize_ = from.tschchartseriesmixedlinesymbolsize_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartseriesmixedareasymbolsize_ = from.tschchartseriesmixedareasymbolsize_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartseriesmixedcolumnvaluelabelposition_ = from.tschchartseriesmixedcolumnvaluelabelposition_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartseriesmixedlinevaluelabelposition_ = from.tschchartseriesmixedlinevaluelabelposition_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartseriesmixedareavaluelabelposition_ = from.tschchartseriesmixedareavaluelabelposition_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = from.tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartseriesbaroutsidelabelparagraphstyleindex_ = from.tschchartseriesbaroutsidelabelparagraphstyleindex_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartseriesareaoutsidelabelparagraphstyleindex_ = from.tschchartseriesareaoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartseriespieoutsidelabelparagraphstyleindex_ = from.tschchartseriespieoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartseriesmixedoutsidelabelparagraphstyleindex_ = from.tschchartseriesmixedoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartseriesstackedbarvaluelabelposition_ = from.tschchartseriesstackedbarvaluelabelposition_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartseriesstackedareavaluelabelposition_ = from.tschchartseriesstackedareavaluelabelposition_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = from.tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = from.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartseriesdefaulttrendlineequationopacity_ = from.tschchartseriesdefaulttrendlineequationopacity_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_tschchartseriesdefaulttrendlinersquaredopacity(from._internal_tschchartseriesdefaulttrendlinersquaredopacity());
  }
}

void ChartSeriesStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSeriesStyleArchive::CopyFrom(const ChartSeriesStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarfill()) {
    if (!tschchartseriesbarfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarstroke()) {
    if (!tschchartseriesbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinestroke()) {
    if (!tschchartserieslinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinesymbolfill()) {
    if (!tschchartserieslinesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinesymbolstroke()) {
    if (!tschchartserieslinesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareafill()) {
    if (!tschchartseriesareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareastroke()) {
    if (!tschchartseriesareastroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareasymbolfill()) {
    if (!tschchartseriesareasymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareasymbolstroke()) {
    if (!tschchartseriesareasymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiefill()) {
    if (!tschchartseriespiefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiestroke()) {
    if (!tschchartseriespiestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscatterstroke()) {
    if (!tschchartseriesscatterstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattersymbolfill()) {
    if (!tschchartseriesscattersymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattersymbolstroke()) {
    if (!tschchartseriesscattersymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultfill()) {
    if (!tschchartseriesdefaultfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescolumnfill()) {
    if (!tschchartseriescolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespieshadow()) {
    if (!tschchartseriespieshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarshadow()) {
    if (!tschchartseriesbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareashadow()) {
    if (!tschchartseriesareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattershadow()) {
    if (!tschchartseriesscattershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlineshadow()) {
    if (!tschchartseriesmixedlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareashadow()) {
    if (!tschchartseriesmixedareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnshadow()) {
    if (!tschchartseriesmixedcolumnshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslineshadow()) {
    if (!tschchartserieslineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultshadow()) {
    if (!tschchartseriesdefaultshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnfill()) {
    if (!tschchartseriesmixedcolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareafill()) {
    if (!tschchartseriesmixedareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnstroke()) {
    if (!tschchartseriesmixedcolumnstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinestroke()) {
    if (!tschchartseriesmixedlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareastroke()) {
    if (!tschchartseriesmixedareastroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinesymbolfill()) {
    if (!tschchartseriesmixedlinesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareasymbolfill()) {
    if (!tschchartseriesmixedareasymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinesymbolstroke()) {
    if (!tschchartseriesmixedlinesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareasymbolstroke()) {
    if (!tschchartseriesmixedareasymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulttrendlinestroke()) {
    if (!tschchartseriesdefaulttrendlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulttrendlineshadow()) {
    if (!tschchartseriesdefaulttrendlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarshadow()) {
    if (!tschchartseriesdefaulterrorbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarstroke()) {
    if (!tschchartseriesdefaulterrorbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    if (!tschchartseriesdefaulterrorbarstrokescatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarlineend()) {
    if (!tschchartseriesdefaulterrorbarlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    if (!tschchartseriesdefaulterrorbarlineendscatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblesymbolfill()) {
    if (!tschchartseriesbubblesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblestroke()) {
    if (!tschchartseriesbubblestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblesymbolstroke()) {
    if (!tschchartseriesbubblesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubbleshadow()) {
    if (!tschchartseriesbubbleshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultdeprecated3dfill()) {
    if (!tschchartseriesdefaultdeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbardeprecated3dfill()) {
    if (!tschchartseriesbardeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescolumndeprecated3dfill()) {
    if (!tschchartseriescolumndeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinedeprecated3dfill()) {
    if (!tschchartserieslinedeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareadeprecated3dfill()) {
    if (!tschchartseriesareadeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiedeprecated3dfill()) {
    if (!tschchartseriespiedeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dbarshadow()) {
    if (!tschchartseries3dbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dcolumnshadow()) {
    if (!tschchartseries3dcolumnshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dlineshadow()) {
    if (!tschchartseries3dlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dareashadow()) {
    if (!tschchartseries3dareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dpieshadow()) {
    if (!tschchartseries3dpieshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dbarfill()) {
    if (!tschchartseries3dbarfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dcolumnfill()) {
    if (!tschchartseries3dcolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dlinefill()) {
    if (!tschchartseries3dlinefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dareafill()) {
    if (!tschchartseries3dareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dpiefill()) {
    if (!tschchartseries3dpiefill_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesStyleArchive::InternalSwap(ChartSeriesStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinersquaredopacity_)
      + sizeof(ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinersquaredopacity_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[12]);
}

// ===================================================================

class ChartSeriesNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesNonStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartSeriesNonStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartseriesdefaultnumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaultnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartseriesdefaultnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartseriesbarshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartserieslinesymboltype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartserieslineshowsymbol(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartserieslineshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartseriesareashowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartserieslinelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartseriesareasymboltype(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartseriesareashowsymbol(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartseriespieshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartseriesscattershowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartseriespiewedgeexplosion(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartseriesdefaultshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartseriespienumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriespienumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschchartseriespienumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartseriespielabelexplosion(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartseriesmixedlineshowsymbol(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartseriesmixedareashowsymbol(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartseriesmixedlinesymboltype(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartseriesmixedareasymboltype(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartseriesmixedshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartseriesmixedlinelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartseriesdefaultyaxisordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartseriespieshowserieslabels(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartseriesscattershowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartseriesscattersymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartseriesscatterlinetype(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartseriesscattershowline(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartseriesstackedpercentnumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesstackedpercentnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschchartseriesdefaultseriestype(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_tschchartseriesdefaulttrendlinetype(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tschchartseriesdefaulttrendlineorder(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_tschchartseriesdefaulttrendlineperiod(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowlabel(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartseriesdefaulttrendlinelabelstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowequation(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowr2value(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_tschchartseriesdefaulterrorbarsetting(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_tschchartseriesdefaulterrorbarsettingscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_tschchartseriesdefaulterrorbartype(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_tschchartseriesdefaulterrorbartypescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_tschchartseriesdefaulterrorbarfixedvalue(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_tschchartseriesdefaulterrorbarpercentvalue(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_tschchartseriesdefaulterrorbarstddevvalue(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedata(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustompositivedata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedatascatterx(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedata(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustomnegativedata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedatascatterx(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationoffsetx(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationoffsety(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredoffsetx(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredoffsety(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_tschchartseriesdefaultshowtrendline(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_tschchartseriesdefaultshowerrorbar(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_tschchartseriesdefaultshowerrorbarscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_tschchartseriesbubblesizedimension(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_tschchartseriesbubbleshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_tschchartseriesbubblelinetype(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_tschchartseriesbubbleshownegativedata(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartseriesbubbleadjustmentscale(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSS::StyleArchive&
ChartSeriesNonStyleArchive::_Internal::super(const ChartSeriesNonStyleArchive* msg) {
  return *msg->super_;
}
const ::TSCH::PreUFF::ChartsNumberFormatArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaultnumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaultnumberformat_;
}
const ::TSCH::PreUFF::ChartsNumberFormatArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriespienumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriespienumberformat_;
}
const ::TSCH::PreUFF::ChartsNumberFormatArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesstackedpercentnumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesstackedpercentnumberformat_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustompositivedata(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarcustompositivedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustomnegativedata(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarcustomnegativedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(const ChartSeriesNonStyleArchive* msg) {
  return *msg->tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}
void ChartSeriesNonStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedata() {
  if (tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr) tschchartseriesdefaulterrorbarcustompositivedata_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr) tschchartseriesdefaulterrorbarcustompositivedatascatterx_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedata() {
  if (tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr) tschchartseriesdefaulterrorbarcustomnegativedata_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr) tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartSeriesNonStyleArchive)
}
ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tschchartseriesdefaulttrendlinelabelstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tschchartseriesdefaulttrendlinelabelstring()) {
    tschchartseriesdefaulttrendlinelabelstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tschchartseriesdefaulttrendlinelabelstring(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaultnumberformat()) {
    tschchartseriesdefaultnumberformat_ = new ::TSCH::PreUFF::ChartsNumberFormatArchive(*from.tschchartseriesdefaultnumberformat_);
  } else {
    tschchartseriesdefaultnumberformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriespienumberformat()) {
    tschchartseriespienumberformat_ = new ::TSCH::PreUFF::ChartsNumberFormatArchive(*from.tschchartseriespienumberformat_);
  } else {
    tschchartseriespienumberformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriesstackedpercentnumberformat()) {
    tschchartseriesstackedpercentnumberformat_ = new ::TSCH::PreUFF::ChartsNumberFormatArchive(*from.tschchartseriesstackedpercentnumberformat_);
  } else {
    tschchartseriesstackedpercentnumberformat_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustompositivedata()) {
    tschchartseriesdefaulterrorbarcustompositivedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartseriesdefaulterrorbarcustompositivedata_);
  } else {
    tschchartseriesdefaulterrorbarcustompositivedata_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
    tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
  } else {
    tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
    tschchartseriesdefaulterrorbarcustomnegativedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartseriesdefaulterrorbarcustomnegativedata_);
  } else {
    tschchartseriesdefaulterrorbarcustomnegativedata_ = nullptr;
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
    tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
  } else {
    tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = nullptr;
  }
  ::memcpy(&tschchartseriesdefaultnumberformattype_, &from.tschchartseriesdefaultnumberformattype_,
    static_cast<size_t>(reinterpret_cast<char*>(&tschchartseriesbubbleadjustmentscale_) -
    reinterpret_cast<char*>(&tschchartseriesdefaultnumberformattype_)) + sizeof(tschchartseriesbubbleadjustmentscale_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartSeriesNonStyleArchive)
}

void ChartSeriesNonStyleArchive::SharedCtor() {
tschchartseriesdefaulttrendlinelabelstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tschchartseriesbubbleadjustmentscale_) -
    reinterpret_cast<char*>(&super_)) + sizeof(tschchartseriesbubbleadjustmentscale_));
}

ChartSeriesNonStyleArchive::~ChartSeriesNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartSeriesNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tschchartseriesdefaulttrendlinelabelstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete tschchartseriesdefaultnumberformat_;
  if (this != internal_default_instance()) delete tschchartseriespienumberformat_;
  if (this != internal_default_instance()) delete tschchartseriesstackedpercentnumberformat_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarcustompositivedata_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarcustomnegativedata_;
  if (this != internal_default_instance()) delete tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}

void ChartSeriesNonStyleArchive::ArenaDtor(void* object) {
  ChartSeriesNonStyleArchive* _this = reinterpret_cast< ChartSeriesNonStyleArchive* >(object);
  (void)_this;
}
void ChartSeriesNonStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartSeriesNonStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChartSeriesNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartseriesdefaulttrendlinelabelstring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tschchartseriesdefaultnumberformat_ != nullptr);
      tschchartseriesdefaultnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tschchartseriespienumberformat_ != nullptr);
      tschchartseriespienumberformat_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tschchartseriesstackedpercentnumberformat_ != nullptr);
      tschchartseriesstackedpercentnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr);
      tschchartseriesdefaulterrorbarcustompositivedata_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr);
      tschchartseriesdefaulterrorbarcustompositivedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr);
      tschchartseriesdefaulterrorbarcustomnegativedata_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr);
    tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&tschchartseriesdefaultnumberformattype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartserieslinelinetype_) -
        reinterpret_cast<char*>(&tschchartseriesdefaultnumberformattype_)) + sizeof(tschchartserieslinelinetype_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartseriesareasymboltype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriespielabelexplosion_) -
        reinterpret_cast<char*>(&tschchartseriesareasymboltype_)) + sizeof(tschchartseriespielabelexplosion_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartseriesmixedlinesymboltype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaultyaxisordinal_) -
        reinterpret_cast<char*>(&tschchartseriesmixedlinesymboltype_)) + sizeof(tschchartseriesdefaultyaxisordinal_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tschchartseriesscattersymboltype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaulttrendlinetype_) -
        reinterpret_cast<char*>(&tschchartseriesscattersymboltype_)) + sizeof(tschchartseriesdefaulttrendlinetype_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tschchartseriesdefaulttrendlineorder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaulterrorbarfixedvaluescatterx_) -
        reinterpret_cast<char*>(&tschchartseriesdefaulttrendlineorder_)) + sizeof(tschchartseriesdefaulterrorbarfixedvaluescatterx_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tschchartseriesdefaulterrorbarpercentvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesdefaultshowerrorbarscatterx_) -
        reinterpret_cast<char*>(&tschchartseriesdefaulterrorbarpercentvalue_)) + sizeof(tschchartseriesdefaultshowerrorbarscatterx_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tschchartseriesdefaulttrendlineequationoffsetx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tschchartseriesbubbleshownegativedata_) -
        reinterpret_cast<char*>(&tschchartseriesdefaulttrendlineequationoffsetx_)) + sizeof(tschchartseriesbubbleshownegativedata_));
  }
  tschchartseriesbubbleadjustmentscale_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesNonStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultnumberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultnumberformattype = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tschchartseriesdefaultnumberformattype(&_has_bits_);
          tschchartseriesdefaultnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbarshowvaluelabels = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tschchartseriesbarshowvaluelabels(&_has_bits_);
          tschchartseriesbarshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinesymboltype = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartserieslinesymboltype(&_has_bits_);
          tschchartserieslinesymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartserieslineshowsymbol = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tschchartserieslineshowsymbol(&_has_bits_);
          tschchartserieslineshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartserieslineshowvaluelabels = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartserieslineshowvaluelabels(&_has_bits_);
          tschchartserieslineshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesareashowvaluelabels = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartseriesareashowvaluelabels(&_has_bits_);
          tschchartseriesareashowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinelinetype = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartserieslinelinetype(&_has_bits_);
          tschchartserieslinelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareasymboltype = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_tschchartseriesareasymboltype(&_has_bits_);
          tschchartseriesareasymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesareashowsymbol = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_tschchartseriesareashowsymbol(&_has_bits_);
          tschchartseriesareashowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriespieshowvaluelabels = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartseriespieshowvaluelabels(&_has_bits_);
          tschchartseriespieshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowvaluelabels = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartseriesscattershowvaluelabels(&_has_bits_);
          tschchartseriesscattershowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriespiewedgeexplosion = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_tschchartseriespiewedgeexplosion(&_has_bits_);
          tschchartseriespiewedgeexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowvaluelabels = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tschchartseriesdefaultshowvaluelabels(&_has_bits_);
          tschchartseriesdefaultshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespienumberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriespienumberformattype = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tschchartseriespienumberformattype(&_has_bits_);
          tschchartseriespienumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriespielabelexplosion = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_tschchartseriespielabelexplosion(&_has_bits_);
          tschchartseriespielabelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlineshowsymbol = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tschchartseriesmixedlineshowsymbol(&_has_bits_);
          tschchartseriesmixedlineshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareashowsymbol = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_tschchartseriesmixedareashowsymbol(&_has_bits_);
          tschchartseriesmixedareashowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinesymboltype = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_tschchartseriesmixedlinesymboltype(&_has_bits_);
          tschchartseriesmixedlinesymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedareasymboltype = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_tschchartseriesmixedareasymboltype(&_has_bits_);
          tschchartseriesmixedareasymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedshowvaluelabels = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartseriesmixedshowvaluelabels(&_has_bits_);
          tschchartseriesmixedshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinelinetype = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_tschchartseriesmixedlinelinetype(&_has_bits_);
          tschchartseriesmixedlinelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultyaxisordinal = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartseriesdefaultyaxisordinal(&_has_bits_);
          tschchartseriesdefaultyaxisordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriespieshowserieslabels = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschchartseriespieshowserieslabels(&_has_bits_);
          tschchartseriespieshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowsymbol = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartseriesscattershowsymbol(&_has_bits_);
          tschchartseriesscattershowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattersymboltype = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartseriesscattersymboltype(&_has_bits_);
          tschchartseriesscattersymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscatterlinetype = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartseriesscatterlinetype(&_has_bits_);
          tschchartseriesscatterlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowline = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tschchartseriesscattershowline(&_has_bits_);
          tschchartseriesscattershowline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesstackedpercentnumberformat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultseriestype = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_tschchartseriesdefaultseriestype(&_has_bits_);
          tschchartseriesdefaultseriestype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlinetype = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinetype(&_has_bits_);
          tschchartseriesdefaulttrendlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineorder = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineorder(&_has_bits_);
          tschchartseriesdefaulttrendlineorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineperiod = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineperiod(&_has_bits_);
          tschchartseriesdefaulttrendlineperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowlabel(&_has_bits_);
          tschchartseriesdefaulttrendlineshowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tschchartseriesdefaulttrendlinelabelstring = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tschchartseriesdefaulttrendlinelabelstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowequation = 165;
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowequation(&_has_bits_);
          tschchartseriesdefaulttrendlineshowequation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowr2value(&_has_bits_);
          tschchartseriesdefaulttrendlineshowr2value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarsetting = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarsetting(&_has_bits_);
          tschchartseriesdefaulterrorbarsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarsettingscatterx(&_has_bits_);
          tschchartseriesdefaulterrorbarsettingscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbartype = 172;
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tschchartseriesdefaulterrorbartype(&_has_bits_);
          tschchartseriesdefaulterrorbartype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tschchartseriesdefaulterrorbartypescatterx(&_has_bits_);
          tschchartseriesdefaulterrorbartypescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
      case 174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarfixedvalue(&_has_bits_);
          tschchartseriesdefaulterrorbarfixedvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx(&_has_bits_);
          tschchartseriesdefaulterrorbarfixedvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
      case 176:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarpercentvalue(&_has_bits_);
          tschchartseriesdefaulterrorbarpercentvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
      case 177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx(&_has_bits_);
          tschchartseriesdefaulterrorbarpercentvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
      case 178:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarstddevvalue(&_has_bits_);
          tschchartseriesdefaulterrorbarstddevvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
      case 179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx(&_has_bits_);
          tschchartseriesdefaulterrorbarstddevvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
      case 190:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
      case 191:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
      case 193:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
      case 194:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationoffsetx(&_has_bits_);
          tschchartseriesdefaulttrendlineequationoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
      case 195:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationoffsety(&_has_bits_);
          tschchartseriesdefaulttrendlineequationoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
      case 196:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredoffsetx(&_has_bits_);
          tschchartseriesdefaulttrendlinersquaredoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
      case 197:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredoffsety(&_has_bits_);
          tschchartseriesdefaulttrendlinersquaredoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowtrendline = 198;
      case 198:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tschchartseriesdefaultshowtrendline(&_has_bits_);
          tschchartseriesdefaultshowtrendline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowerrorbar = 199;
      case 199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tschchartseriesdefaultshowerrorbar(&_has_bits_);
          tschchartseriesdefaultshowerrorbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tschchartseriesdefaultshowerrorbarscatterx(&_has_bits_);
          tschchartseriesdefaultshowerrorbarscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblesizedimension = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tschchartseriesbubblesizedimension(&_has_bits_);
          tschchartseriesbubblesizedimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshowvaluelabels = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tschchartseriesbubbleshowvaluelabels(&_has_bits_);
          tschchartseriesbubbleshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblelinetype = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tschchartseriesbubblelinetype(&_has_bits_);
          tschchartseriesbubblelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshownegativedata = 216;
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tschchartseriesbubbleshownegativedata(&_has_bits_);
          tschchartseriesbubbleshownegativedata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tschchartseriesbubbleadjustmentscale = 217;
      case 217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_tschchartseriesbubbleadjustmentscale(&_has_bits_);
          tschchartseriesbubbleadjustmentscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartSeriesNonStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tschchartseriesdefaultnumberformat(this), target, stream);
  }

  // optional int32 tschchartseriesdefaultnumberformattype = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_tschchartseriesdefaultnumberformattype(), target);
  }

  // optional bool tschchartseriesbarshowvaluelabels = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_tschchartseriesbarshowvaluelabels(), target);
  }

  // optional int32 tschchartserieslinesymboltype = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_tschchartserieslinesymboltype(), target);
  }

  // optional bool tschchartserieslineshowsymbol = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_tschchartserieslineshowsymbol(), target);
  }

  // optional bool tschchartserieslineshowvaluelabels = 21;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_tschchartserieslineshowvaluelabels(), target);
  }

  // optional bool tschchartseriesareashowvaluelabels = 27;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_tschchartseriesareashowvaluelabels(), target);
  }

  // optional int32 tschchartserieslinelinetype = 30;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_tschchartserieslinelinetype(), target);
  }

  // optional int32 tschchartseriesareasymboltype = 31;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_tschchartseriesareasymboltype(), target);
  }

  // optional bool tschchartseriesareashowsymbol = 32;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartseriesareashowsymbol(), target);
  }

  // optional bool tschchartseriespieshowvaluelabels = 37;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_tschchartseriespieshowvaluelabels(), target);
  }

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->_internal_tschchartseriesscattershowvaluelabels(), target);
  }

  // optional float tschchartseriespiewedgeexplosion = 50;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(50, this->_internal_tschchartseriespiewedgeexplosion(), target);
  }

  // optional bool tschchartseriesdefaultshowvaluelabels = 51;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_tschchartseriesdefaultshowvaluelabels(), target);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::tschchartseriespienumberformat(this), target, stream);
  }

  // optional int32 tschchartseriespienumberformattype = 53;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(53, this->_internal_tschchartseriespienumberformattype(), target);
  }

  // optional float tschchartseriespielabelexplosion = 54;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(54, this->_internal_tschchartseriespielabelexplosion(), target);
  }

  // optional bool tschchartseriesmixedlineshowsymbol = 58;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(58, this->_internal_tschchartseriesmixedlineshowsymbol(), target);
  }

  // optional bool tschchartseriesmixedareashowsymbol = 59;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_tschchartseriesmixedareashowsymbol(), target);
  }

  // optional int32 tschchartseriesmixedlinesymboltype = 60;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_tschchartseriesmixedlinesymboltype(), target);
  }

  // optional int32 tschchartseriesmixedareasymboltype = 61;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_tschchartseriesmixedareasymboltype(), target);
  }

  // optional bool tschchartseriesmixedshowvaluelabels = 62;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(62, this->_internal_tschchartseriesmixedshowvaluelabels(), target);
  }

  // optional int32 tschchartseriesmixedlinelinetype = 63;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(63, this->_internal_tschchartseriesmixedlinelinetype(), target);
  }

  // optional int32 tschchartseriesdefaultyaxisordinal = 65;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(65, this->_internal_tschchartseriesdefaultyaxisordinal(), target);
  }

  // optional bool tschchartseriespieshowserieslabels = 66;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(66, this->_internal_tschchartseriespieshowserieslabels(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartseriesscattershowsymbol = 69;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(69, this->_internal_tschchartseriesscattershowsymbol(), target);
  }

  // optional int32 tschchartseriesscattersymboltype = 70;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_tschchartseriesscattersymboltype(), target);
  }

  // optional int32 tschchartseriesscatterlinetype = 71;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(71, this->_internal_tschchartseriesscatterlinetype(), target);
  }

  // optional bool tschchartseriesscattershowline = 72;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(72, this->_internal_tschchartseriesscattershowline(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        90, _Internal::tschchartseriesstackedpercentnumberformat(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tschchartseriesdefaultseriestype = 126;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(126, this->_internal_tschchartseriesdefaultseriestype(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinetype = 160;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(160, this->_internal_tschchartseriesdefaulttrendlinetype(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineorder = 161;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(161, this->_internal_tschchartseriesdefaulttrendlineorder(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineperiod = 162;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(162, this->_internal_tschchartseriesdefaulttrendlineperiod(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(163, this->_internal_tschchartseriesdefaulttrendlineshowlabel(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string tschchartseriesdefaulttrendlinelabelstring = 164;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartseriesdefaulttrendlinelabelstring().data(), static_cast<int>(this->_internal_tschchartseriesdefaulttrendlinelabelstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring");
    target = stream->WriteStringMaybeAliased(
        164, this->_internal_tschchartseriesdefaulttrendlinelabelstring(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tschchartseriesdefaulttrendlineshowequation = 165;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(165, this->_internal_tschchartseriesdefaulttrendlineshowequation(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(166, this->_internal_tschchartseriesdefaulttrendlineshowr2value(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsetting = 170;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(170, this->_internal_tschchartseriesdefaulterrorbarsetting(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(171, this->_internal_tschchartseriesdefaulterrorbarsettingscatterx(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartype = 172;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(172, this->_internal_tschchartseriesdefaulterrorbartype(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(173, this->_internal_tschchartseriesdefaulterrorbartypescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(174, this->_internal_tschchartseriesdefaulterrorbarfixedvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(175, this->_internal_tschchartseriesdefaulterrorbarfixedvaluescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(176, this->_internal_tschchartseriesdefaulterrorbarpercentvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(177, this->_internal_tschchartseriesdefaulterrorbarpercentvaluescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(178, this->_internal_tschchartseriesdefaulterrorbarstddevvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(179, this->_internal_tschchartseriesdefaulterrorbarstddevvaluescatterx(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        190, _Internal::tschchartseriesdefaulterrorbarcustompositivedata(this), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        191, _Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(this), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        192, _Internal::tschchartseriesdefaulterrorbarcustomnegativedata(this), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        193, _Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(194, this->_internal_tschchartseriesdefaulttrendlineequationoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(195, this->_internal_tschchartseriesdefaulttrendlineequationoffsety(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(196, this->_internal_tschchartseriesdefaulttrendlinersquaredoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(197, this->_internal_tschchartseriesdefaulttrendlinersquaredoffsety(), target);
  }

  // optional bool tschchartseriesdefaultshowtrendline = 198;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(198, this->_internal_tschchartseriesdefaultshowtrendline(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbar = 199;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(199, this->_internal_tschchartseriesdefaultshowerrorbar(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(200, this->_internal_tschchartseriesdefaultshowerrorbarscatterx(), target);
  }

  // optional int32 tschchartseriesbubblesizedimension = 208;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(208, this->_internal_tschchartseriesbubblesizedimension(), target);
  }

  // optional bool tschchartseriesbubbleshowvaluelabels = 209;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(209, this->_internal_tschchartseriesbubbleshowvaluelabels(), target);
  }

  // optional int32 tschchartseriesbubblelinetype = 210;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(210, this->_internal_tschchartseriesbubblelinetype(), target);
  }

  // optional bool tschchartseriesbubbleshownegativedata = 216;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(216, this->_internal_tschchartseriesbubbleshownegativedata(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float tschchartseriesbubbleadjustmentscale = 217;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(217, this->_internal_tschchartseriesbubbleadjustmentscale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  return target;
}

size_t ChartSeriesNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tschchartseriesdefaulttrendlinelabelstring = 164;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tschchartseriesdefaulttrendlinelabelstring());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaultnumberformat_);
    }

    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriespienumberformat_);
    }

    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesstackedpercentnumberformat_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarcustompositivedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarcustomnegativedata_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
    }

    // optional int32 tschchartseriesdefaultnumberformattype = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultnumberformattype());
    }

    // optional int32 tschchartserieslinesymboltype = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinesymboltype());
    }

    // optional bool tschchartseriesbarshowvaluelabels = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartserieslineshowsymbol = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslineshowvaluelabels = 21;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareashowvaluelabels = 27;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartserieslinelinetype = 30;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinelinetype());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 tschchartseriesareasymboltype = 31;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareasymboltype());
    }

    // optional bool tschchartseriesareashowsymbol = 32;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespieshowvaluelabels = 37;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowvaluelabels = 45;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowvaluelabels = 51;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriespiewedgeexplosion = 50;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriespienumberformattype = 53;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespienumberformattype());
    }

    // optional float tschchartseriespielabelexplosion = 54;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartseriesmixedlinesymboltype = 60;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinesymboltype());
    }

    // optional int32 tschchartseriesmixedareasymboltype = 61;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedareasymboltype());
    }

    // optional bool tschchartseriesmixedlineshowsymbol = 58;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareashowsymbol = 59;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedshowvaluelabels = 62;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespieshowserieslabels = 66;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesmixedlinelinetype = 63;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinelinetype());
    }

    // optional int32 tschchartseriesdefaultyaxisordinal = 65;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultyaxisordinal());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 tschchartseriesscattersymboltype = 70;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattersymboltype());
    }

    // optional int32 tschchartseriesscatterlinetype = 71;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscatterlinetype());
    }

    // optional bool tschchartseriesscattershowsymbol = 69;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowline = 72;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaulttrendlineshowequation = 165;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesdefaultseriestype = 126;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultseriestype());
    }

    // optional int32 tschchartseriesdefaulttrendlinetype = 160;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlinetype());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tschchartseriesdefaulttrendlineorder = 161;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineorder());
    }

    // optional int32 tschchartseriesdefaulttrendlineperiod = 162;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineperiod());
    }

    // optional int32 tschchartseriesdefaulterrorbarsetting = 170;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbarsetting());
    }

    // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbarsettingscatterx());
    }

    // optional int32 tschchartseriesdefaulterrorbartype = 172;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbartype());
    }

    // optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbartypescatterx());
    }

    // optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowtrendline = 198;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowerrorbar = 199;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesbubblesizedimension = 208;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblesizedimension());
    }

    // optional int32 tschchartseriesbubblelinetype = 210;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblelinetype());
    }

    // optional bool tschchartseriesbubbleshowvaluelabels = 209;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshownegativedata = 216;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  // optional float tschchartseriesbubbleadjustmentscale = 217;
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartSeriesNonStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartSeriesNonStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartSeriesNonStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCH.PreUFF.ChartSeriesNonStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCH.PreUFF.ChartSeriesNonStyleArchive)
    MergeFrom(*source);
  }
}

void ChartSeriesNonStyleArchive::MergeFrom(const ChartSeriesNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tschchartseriesdefaulttrendlinelabelstring(from._internal_tschchartseriesdefaulttrendlinelabelstring());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tschchartseriesdefaultnumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(from._internal_tschchartseriesdefaultnumberformat());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tschchartseriespienumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(from._internal_tschchartseriespienumberformat());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tschchartseriesstackedpercentnumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(from._internal_tschchartseriesstackedpercentnumberformat());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarcustompositivedata());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarcustomnegativedata());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from._internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx());
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartseriesdefaultnumberformattype_ = from.tschchartseriesdefaultnumberformattype_;
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartserieslinesymboltype_ = from.tschchartserieslinesymboltype_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartseriesbarshowvaluelabels_ = from.tschchartseriesbarshowvaluelabels_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartserieslineshowsymbol_ = from.tschchartserieslineshowsymbol_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartserieslineshowvaluelabels_ = from.tschchartserieslineshowvaluelabels_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartseriesareashowvaluelabels_ = from.tschchartseriesareashowvaluelabels_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartserieslinelinetype_ = from.tschchartserieslinelinetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartseriesareasymboltype_ = from.tschchartseriesareasymboltype_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartseriesareashowsymbol_ = from.tschchartseriesareashowsymbol_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartseriespieshowvaluelabels_ = from.tschchartseriespieshowvaluelabels_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartseriesscattershowvaluelabels_ = from.tschchartseriesscattershowvaluelabels_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartseriesdefaultshowvaluelabels_ = from.tschchartseriesdefaultshowvaluelabels_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartseriespiewedgeexplosion_ = from.tschchartseriespiewedgeexplosion_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartseriespienumberformattype_ = from.tschchartseriespienumberformattype_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartseriespielabelexplosion_ = from.tschchartseriespielabelexplosion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartseriesmixedlinesymboltype_ = from.tschchartseriesmixedlinesymboltype_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartseriesmixedareasymboltype_ = from.tschchartseriesmixedareasymboltype_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartseriesmixedlineshowsymbol_ = from.tschchartseriesmixedlineshowsymbol_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartseriesmixedareashowsymbol_ = from.tschchartseriesmixedareashowsymbol_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartseriesmixedshowvaluelabels_ = from.tschchartseriesmixedshowvaluelabels_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartseriespieshowserieslabels_ = from.tschchartseriespieshowserieslabels_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartseriesmixedlinelinetype_ = from.tschchartseriesmixedlinelinetype_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartseriesdefaultyaxisordinal_ = from.tschchartseriesdefaultyaxisordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tschchartseriesscattersymboltype_ = from.tschchartseriesscattersymboltype_;
    }
    if (cached_has_bits & 0x00000002u) {
      tschchartseriesscatterlinetype_ = from.tschchartseriesscatterlinetype_;
    }
    if (cached_has_bits & 0x00000004u) {
      tschchartseriesscattershowsymbol_ = from.tschchartseriesscattershowsymbol_;
    }
    if (cached_has_bits & 0x00000008u) {
      tschchartseriesscattershowline_ = from.tschchartseriesscattershowline_;
    }
    if (cached_has_bits & 0x00000010u) {
      tschchartseriesdefaulttrendlineshowlabel_ = from.tschchartseriesdefaulttrendlineshowlabel_;
    }
    if (cached_has_bits & 0x00000020u) {
      tschchartseriesdefaulttrendlineshowequation_ = from.tschchartseriesdefaulttrendlineshowequation_;
    }
    if (cached_has_bits & 0x00000040u) {
      tschchartseriesdefaultseriestype_ = from.tschchartseriesdefaultseriestype_;
    }
    if (cached_has_bits & 0x00000080u) {
      tschchartseriesdefaulttrendlinetype_ = from.tschchartseriesdefaulttrendlinetype_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tschchartseriesdefaulttrendlineorder_ = from.tschchartseriesdefaulttrendlineorder_;
    }
    if (cached_has_bits & 0x00000200u) {
      tschchartseriesdefaulttrendlineperiod_ = from.tschchartseriesdefaulttrendlineperiod_;
    }
    if (cached_has_bits & 0x00000400u) {
      tschchartseriesdefaulterrorbarsetting_ = from.tschchartseriesdefaulterrorbarsetting_;
    }
    if (cached_has_bits & 0x00000800u) {
      tschchartseriesdefaulterrorbarsettingscatterx_ = from.tschchartseriesdefaulterrorbarsettingscatterx_;
    }
    if (cached_has_bits & 0x00001000u) {
      tschchartseriesdefaulterrorbartype_ = from.tschchartseriesdefaulterrorbartype_;
    }
    if (cached_has_bits & 0x00002000u) {
      tschchartseriesdefaulterrorbartypescatterx_ = from.tschchartseriesdefaulterrorbartypescatterx_;
    }
    if (cached_has_bits & 0x00004000u) {
      tschchartseriesdefaulterrorbarfixedvalue_ = from.tschchartseriesdefaulterrorbarfixedvalue_;
    }
    if (cached_has_bits & 0x00008000u) {
      tschchartseriesdefaulterrorbarfixedvaluescatterx_ = from.tschchartseriesdefaulterrorbarfixedvaluescatterx_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tschchartseriesdefaulterrorbarpercentvalue_ = from.tschchartseriesdefaulterrorbarpercentvalue_;
    }
    if (cached_has_bits & 0x00020000u) {
      tschchartseriesdefaulterrorbarpercentvaluescatterx_ = from.tschchartseriesdefaulterrorbarpercentvaluescatterx_;
    }
    if (cached_has_bits & 0x00040000u) {
      tschchartseriesdefaulterrorbarstddevvalue_ = from.tschchartseriesdefaulterrorbarstddevvalue_;
    }
    if (cached_has_bits & 0x00080000u) {
      tschchartseriesdefaulterrorbarstddevvaluescatterx_ = from.tschchartseriesdefaulterrorbarstddevvaluescatterx_;
    }
    if (cached_has_bits & 0x00100000u) {
      tschchartseriesdefaulttrendlineshowr2value_ = from.tschchartseriesdefaulttrendlineshowr2value_;
    }
    if (cached_has_bits & 0x00200000u) {
      tschchartseriesdefaultshowtrendline_ = from.tschchartseriesdefaultshowtrendline_;
    }
    if (cached_has_bits & 0x00400000u) {
      tschchartseriesdefaultshowerrorbar_ = from.tschchartseriesdefaultshowerrorbar_;
    }
    if (cached_has_bits & 0x00800000u) {
      tschchartseriesdefaultshowerrorbarscatterx_ = from.tschchartseriesdefaultshowerrorbarscatterx_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tschchartseriesdefaulttrendlineequationoffsetx_ = from.tschchartseriesdefaulttrendlineequationoffsetx_;
    }
    if (cached_has_bits & 0x02000000u) {
      tschchartseriesdefaulttrendlineequationoffsety_ = from.tschchartseriesdefaulttrendlineequationoffsety_;
    }
    if (cached_has_bits & 0x04000000u) {
      tschchartseriesdefaulttrendlinersquaredoffsetx_ = from.tschchartseriesdefaulttrendlinersquaredoffsetx_;
    }
    if (cached_has_bits & 0x08000000u) {
      tschchartseriesdefaulttrendlinersquaredoffsety_ = from.tschchartseriesdefaulttrendlinersquaredoffsety_;
    }
    if (cached_has_bits & 0x10000000u) {
      tschchartseriesbubblesizedimension_ = from.tschchartseriesbubblesizedimension_;
    }
    if (cached_has_bits & 0x20000000u) {
      tschchartseriesbubblelinetype_ = from.tschchartseriesbubblelinetype_;
    }
    if (cached_has_bits & 0x40000000u) {
      tschchartseriesbubbleshowvaluelabels_ = from.tschchartseriesbubbleshowvaluelabels_;
    }
    if (cached_has_bits & 0x80000000u) {
      tschchartseriesbubbleshownegativedata_ = from.tschchartseriesbubbleshownegativedata_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (from._internal_has_tschchartseriesbubbleadjustmentscale()) {
    _internal_set_tschchartseriesbubbleadjustmentscale(from._internal_tschchartseriesbubbleadjustmentscale());
  }
}

void ChartSeriesNonStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSeriesNonStyleArchive::CopyFrom(const ChartSeriesNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesNonStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultnumberformat()) {
    if (!tschchartseriesdefaultnumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespienumberformat()) {
    if (!tschchartseriespienumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesstackedpercentnumberformat()) {
    if (!tschchartseriesstackedpercentnumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesNonStyleArchive::InternalSwap(ChartSeriesNonStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  tschchartseriesdefaulttrendlinelabelstring_.Swap(&other->tschchartseriesdefaulttrendlinelabelstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubbleadjustmentscale_)
      + sizeof(ChartSeriesNonStyleArchive::tschchartseriesbubbleadjustmentscale_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesNonStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesNonStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PreUFF
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartInfoArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::LegendModelArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::LegendModelArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::LegendModelArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartModelArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartModelArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartModelArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartGridArchive_ValueRow* Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartGridArchive_ValueRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartGridArchive_ValueRow >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartGridArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartGridArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartGridArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartsNumberFormatArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartsNumberFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartsNumberFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartStyleArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartNonStyleArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::LegendStyleArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::LegendStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::LegendStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::LegendNonStyleArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::LegendNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::LegendNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartAxisStyleArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartAxisStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartAxisStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartAxisNonStyleArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartAxisNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartAxisNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartSeriesStyleArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartSeriesStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartSeriesStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartSeriesNonStyleArchive* Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartSeriesNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartSeriesNonStyleArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
